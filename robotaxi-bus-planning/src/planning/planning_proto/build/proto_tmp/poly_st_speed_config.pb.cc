// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: poly_st_speed_config.proto

#include "poly_st_speed_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace acu {
namespace planning {
class PolyStSpeedConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PolyStSpeedConfig>
      _instance;
} _PolyStSpeedConfig_default_instance_;
}  // namespace planning
}  // namespace acu
namespace protobuf_poly_5fst_5fspeed_5fconfig_2eproto {
void InitDefaultsPolyStSpeedConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_st_5fboundary_5fconfig_2eproto::InitDefaultsStBoundaryConfig();
  {
    void* ptr = &::acu::planning::_PolyStSpeedConfig_default_instance_;
    new (ptr) ::acu::planning::PolyStSpeedConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::PolyStSpeedConfig::InitAsDefaultInstance();
}

void InitDefaultsPolyStSpeedConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPolyStSpeedConfigImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PolyStSpeedConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PolyStSpeedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PolyStSpeedConfig, total_path_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PolyStSpeedConfig, total_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PolyStSpeedConfig, preferred_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PolyStSpeedConfig, preferred_decel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PolyStSpeedConfig, max_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PolyStSpeedConfig, min_decel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PolyStSpeedConfig, speed_limit_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PolyStSpeedConfig, speed_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PolyStSpeedConfig, jerk_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PolyStSpeedConfig, obstacle_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PolyStSpeedConfig, unblocking_obstacle_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PolyStSpeedConfig, st_boundary_config_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::acu::planning::PolyStSpeedConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_PolyStSpeedConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "poly_st_speed_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032poly_st_speed_config.proto\022\014acu.planni"
      "ng\032\030st_boundary_config.proto\"\330\002\n\021PolyStS"
      "peedConfig\022\031\n\021total_path_length\030\001 \001(\001\022\022\n"
      "\ntotal_time\030\002 \001(\001\022\027\n\017preferred_accel\030\003 \001"
      "(\001\022\027\n\017preferred_decel\030\004 \001(\001\022\021\n\tmax_accel"
      "\030\005 \001(\001\022\021\n\tmin_decel\030\006 \001(\001\022\032\n\022speed_limit"
      "_buffer\030\007 \001(\001\022\024\n\014speed_weight\030\010 \001(\001\022\023\n\013j"
      "erk_weight\030\t \001(\001\022\027\n\017obstacle_weight\030\n \001("
      "\001\022 \n\030unblocking_obstacle_cost\030\013 \001(\001\022:\n\022s"
      "t_boundary_config\030\014 \001(\0132\036.acu.planning.S"
      "tBoundaryConfig"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 415);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "poly_st_speed_config.proto", &protobuf_RegisterTypes);
  ::protobuf_st_5fboundary_5fconfig_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_poly_5fst_5fspeed_5fconfig_2eproto
namespace acu {
namespace planning {

// ===================================================================

void PolyStSpeedConfig::InitAsDefaultInstance() {
  ::acu::planning::_PolyStSpeedConfig_default_instance_._instance.get_mutable()->st_boundary_config_ = const_cast< ::acu::planning::StBoundaryConfig*>(
      ::acu::planning::StBoundaryConfig::internal_default_instance());
}
void PolyStSpeedConfig::clear_st_boundary_config() {
  if (st_boundary_config_ != NULL) st_boundary_config_->Clear();
  clear_has_st_boundary_config();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolyStSpeedConfig::kTotalPathLengthFieldNumber;
const int PolyStSpeedConfig::kTotalTimeFieldNumber;
const int PolyStSpeedConfig::kPreferredAccelFieldNumber;
const int PolyStSpeedConfig::kPreferredDecelFieldNumber;
const int PolyStSpeedConfig::kMaxAccelFieldNumber;
const int PolyStSpeedConfig::kMinDecelFieldNumber;
const int PolyStSpeedConfig::kSpeedLimitBufferFieldNumber;
const int PolyStSpeedConfig::kSpeedWeightFieldNumber;
const int PolyStSpeedConfig::kJerkWeightFieldNumber;
const int PolyStSpeedConfig::kObstacleWeightFieldNumber;
const int PolyStSpeedConfig::kUnblockingObstacleCostFieldNumber;
const int PolyStSpeedConfig::kStBoundaryConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolyStSpeedConfig::PolyStSpeedConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_poly_5fst_5fspeed_5fconfig_2eproto::InitDefaultsPolyStSpeedConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.PolyStSpeedConfig)
}
PolyStSpeedConfig::PolyStSpeedConfig(const PolyStSpeedConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_st_boundary_config()) {
    st_boundary_config_ = new ::acu::planning::StBoundaryConfig(*from.st_boundary_config_);
  } else {
    st_boundary_config_ = NULL;
  }
  ::memcpy(&total_path_length_, &from.total_path_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&unblocking_obstacle_cost_) -
    reinterpret_cast<char*>(&total_path_length_)) + sizeof(unblocking_obstacle_cost_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.PolyStSpeedConfig)
}

void PolyStSpeedConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&st_boundary_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unblocking_obstacle_cost_) -
      reinterpret_cast<char*>(&st_boundary_config_)) + sizeof(unblocking_obstacle_cost_));
}

PolyStSpeedConfig::~PolyStSpeedConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.PolyStSpeedConfig)
  SharedDtor();
}

void PolyStSpeedConfig::SharedDtor() {
  if (this != internal_default_instance()) delete st_boundary_config_;
}

void PolyStSpeedConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PolyStSpeedConfig::descriptor() {
  ::protobuf_poly_5fst_5fspeed_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_poly_5fst_5fspeed_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PolyStSpeedConfig& PolyStSpeedConfig::default_instance() {
  ::protobuf_poly_5fst_5fspeed_5fconfig_2eproto::InitDefaultsPolyStSpeedConfig();
  return *internal_default_instance();
}

PolyStSpeedConfig* PolyStSpeedConfig::New(::google::protobuf::Arena* arena) const {
  PolyStSpeedConfig* n = new PolyStSpeedConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PolyStSpeedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.PolyStSpeedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(st_boundary_config_ != NULL);
    st_boundary_config_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&total_path_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_limit_buffer_) -
        reinterpret_cast<char*>(&total_path_length_)) + sizeof(speed_limit_buffer_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&speed_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unblocking_obstacle_cost_) -
        reinterpret_cast<char*>(&speed_weight_)) + sizeof(unblocking_obstacle_cost_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PolyStSpeedConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.PolyStSpeedConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double total_path_length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_total_path_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double total_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_total_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double preferred_accel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_preferred_accel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preferred_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double preferred_decel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_preferred_decel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preferred_decel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_accel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_max_accel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_decel = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_min_decel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_decel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_limit_buffer = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_speed_limit_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_weight = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_speed_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double jerk_weight = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_jerk_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_weight = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_obstacle_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double unblocking_obstacle_cost = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_unblocking_obstacle_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unblocking_obstacle_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.StBoundaryConfig st_boundary_config = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_st_boundary_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.PolyStSpeedConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.PolyStSpeedConfig)
  return false;
#undef DO_
}

void PolyStSpeedConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.PolyStSpeedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_path_length = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_path_length(), output);
  }

  // optional double total_time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->total_time(), output);
  }

  // optional double preferred_accel = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->preferred_accel(), output);
  }

  // optional double preferred_decel = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->preferred_decel(), output);
  }

  // optional double max_accel = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max_accel(), output);
  }

  // optional double min_decel = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->min_decel(), output);
  }

  // optional double speed_limit_buffer = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->speed_limit_buffer(), output);
  }

  // optional double speed_weight = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->speed_weight(), output);
  }

  // optional double jerk_weight = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->jerk_weight(), output);
  }

  // optional double obstacle_weight = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->obstacle_weight(), output);
  }

  // optional double unblocking_obstacle_cost = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->unblocking_obstacle_cost(), output);
  }

  // optional .acu.planning.StBoundaryConfig st_boundary_config = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->st_boundary_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.PolyStSpeedConfig)
}

::google::protobuf::uint8* PolyStSpeedConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.PolyStSpeedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_path_length = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_path_length(), target);
  }

  // optional double total_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->total_time(), target);
  }

  // optional double preferred_accel = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->preferred_accel(), target);
  }

  // optional double preferred_decel = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->preferred_decel(), target);
  }

  // optional double max_accel = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max_accel(), target);
  }

  // optional double min_decel = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->min_decel(), target);
  }

  // optional double speed_limit_buffer = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->speed_limit_buffer(), target);
  }

  // optional double speed_weight = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->speed_weight(), target);
  }

  // optional double jerk_weight = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->jerk_weight(), target);
  }

  // optional double obstacle_weight = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->obstacle_weight(), target);
  }

  // optional double unblocking_obstacle_cost = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->unblocking_obstacle_cost(), target);
  }

  // optional .acu.planning.StBoundaryConfig st_boundary_config = 12;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *this->st_boundary_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.PolyStSpeedConfig)
  return target;
}

size_t PolyStSpeedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.PolyStSpeedConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .acu.planning.StBoundaryConfig st_boundary_config = 12;
    if (has_st_boundary_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->st_boundary_config_);
    }

    // optional double total_path_length = 1;
    if (has_total_path_length()) {
      total_size += 1 + 8;
    }

    // optional double total_time = 2;
    if (has_total_time()) {
      total_size += 1 + 8;
    }

    // optional double preferred_accel = 3;
    if (has_preferred_accel()) {
      total_size += 1 + 8;
    }

    // optional double preferred_decel = 4;
    if (has_preferred_decel()) {
      total_size += 1 + 8;
    }

    // optional double max_accel = 5;
    if (has_max_accel()) {
      total_size += 1 + 8;
    }

    // optional double min_decel = 6;
    if (has_min_decel()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit_buffer = 7;
    if (has_speed_limit_buffer()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double speed_weight = 8;
    if (has_speed_weight()) {
      total_size += 1 + 8;
    }

    // optional double jerk_weight = 9;
    if (has_jerk_weight()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_weight = 10;
    if (has_obstacle_weight()) {
      total_size += 1 + 8;
    }

    // optional double unblocking_obstacle_cost = 11;
    if (has_unblocking_obstacle_cost()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolyStSpeedConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.PolyStSpeedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PolyStSpeedConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PolyStSpeedConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.PolyStSpeedConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.PolyStSpeedConfig)
    MergeFrom(*source);
  }
}

void PolyStSpeedConfig::MergeFrom(const PolyStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.PolyStSpeedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_st_boundary_config()->::acu::planning::StBoundaryConfig::MergeFrom(from.st_boundary_config());
    }
    if (cached_has_bits & 0x00000002u) {
      total_path_length_ = from.total_path_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_time_ = from.total_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      preferred_accel_ = from.preferred_accel_;
    }
    if (cached_has_bits & 0x00000010u) {
      preferred_decel_ = from.preferred_decel_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_accel_ = from.max_accel_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_decel_ = from.min_decel_;
    }
    if (cached_has_bits & 0x00000080u) {
      speed_limit_buffer_ = from.speed_limit_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      speed_weight_ = from.speed_weight_;
    }
    if (cached_has_bits & 0x00000200u) {
      jerk_weight_ = from.jerk_weight_;
    }
    if (cached_has_bits & 0x00000400u) {
      obstacle_weight_ = from.obstacle_weight_;
    }
    if (cached_has_bits & 0x00000800u) {
      unblocking_obstacle_cost_ = from.unblocking_obstacle_cost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PolyStSpeedConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.PolyStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolyStSpeedConfig::CopyFrom(const PolyStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.PolyStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolyStSpeedConfig::IsInitialized() const {
  return true;
}

void PolyStSpeedConfig::Swap(PolyStSpeedConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolyStSpeedConfig::InternalSwap(PolyStSpeedConfig* other) {
  using std::swap;
  swap(st_boundary_config_, other->st_boundary_config_);
  swap(total_path_length_, other->total_path_length_);
  swap(total_time_, other->total_time_);
  swap(preferred_accel_, other->preferred_accel_);
  swap(preferred_decel_, other->preferred_decel_);
  swap(max_accel_, other->max_accel_);
  swap(min_decel_, other->min_decel_);
  swap(speed_limit_buffer_, other->speed_limit_buffer_);
  swap(speed_weight_, other->speed_weight_);
  swap(jerk_weight_, other->jerk_weight_);
  swap(obstacle_weight_, other->obstacle_weight_);
  swap(unblocking_obstacle_cost_, other->unblocking_obstacle_cost_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PolyStSpeedConfig::GetMetadata() const {
  protobuf_poly_5fst_5fspeed_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_poly_5fst_5fspeed_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace acu

// @@protoc_insertion_point(global_scope)
