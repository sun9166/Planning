// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decision_config.proto

#include "decision_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace acu {
namespace planning {
class IntentionDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IntentionDeciderConfig>
      _instance;
} _IntentionDeciderConfig_default_instance_;
class ReferenceLineDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReferenceLineDeciderConfig>
      _instance;
} _ReferenceLineDeciderConfig_default_instance_;
class ObjectDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectDeciderConfig>
      _instance;
} _ObjectDeciderConfig_default_instance_;
class ParkingDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParkingDeciderConfig>
      _instance;
} _ParkingDeciderConfig_default_instance_;
class DeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeciderConfig>
      _instance;
} _DeciderConfig_default_instance_;
}  // namespace planning
}  // namespace acu
namespace protobuf_decision_5fconfig_2eproto {
void InitDefaultsIntentionDeciderConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_IntentionDeciderConfig_default_instance_;
    new (ptr) ::acu::planning::IntentionDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::IntentionDeciderConfig::InitAsDefaultInstance();
}

void InitDefaultsIntentionDeciderConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIntentionDeciderConfigImpl);
}

void InitDefaultsReferenceLineDeciderConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_ReferenceLineDeciderConfig_default_instance_;
    new (ptr) ::acu::planning::ReferenceLineDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::ReferenceLineDeciderConfig::InitAsDefaultInstance();
}

void InitDefaultsReferenceLineDeciderConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReferenceLineDeciderConfigImpl);
}

void InitDefaultsObjectDeciderConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_ObjectDeciderConfig_default_instance_;
    new (ptr) ::acu::planning::ObjectDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::ObjectDeciderConfig::InitAsDefaultInstance();
}

void InitDefaultsObjectDeciderConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObjectDeciderConfigImpl);
}

void InitDefaultsParkingDeciderConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_ParkingDeciderConfig_default_instance_;
    new (ptr) ::acu::planning::ParkingDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::ParkingDeciderConfig::InitAsDefaultInstance();
}

void InitDefaultsParkingDeciderConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsParkingDeciderConfigImpl);
}

void InitDefaultsDeciderConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_decision_5fconfig_2eproto::InitDefaultsIntentionDeciderConfig();
  protobuf_decision_5fconfig_2eproto::InitDefaultsReferenceLineDeciderConfig();
  protobuf_decision_5fconfig_2eproto::InitDefaultsObjectDeciderConfig();
  protobuf_decision_5fconfig_2eproto::InitDefaultsParkingDeciderConfig();
  {
    void* ptr = &::acu::planning::_DeciderConfig_default_instance_;
    new (ptr) ::acu::planning::DeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::DeciderConfig::InitAsDefaultInstance();
}

void InitDefaultsDeciderConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeciderConfigImpl);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::IntentionDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::IntentionDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::IntentionDeciderConfig, offset_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::IntentionDeciderConfig, abandon_lc_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::IntentionDeciderConfig, mission_lc_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::IntentionDeciderConfig, speed_lc_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::IntentionDeciderConfig, obstacle_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::IntentionDeciderConfig, pull_over_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::IntentionDeciderConfig, meeting_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::IntentionDeciderConfig, command_lc_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::IntentionDeciderConfig, departure_enable_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ReferenceLineDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ReferenceLineDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ReferenceLineDeciderConfig, borrow_lane_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ReferenceLineDeciderConfig, borrow_road_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ReferenceLineDeciderConfig, dis_to_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ReferenceLineDeciderConfig, dis_to_curb_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectDeciderConfig, dis_to_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectDeciderConfig, yield_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectDeciderConfig, replan_slow_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectDeciderConfig, replan_speed_limit_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ParkingDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ParkingDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ParkingDeciderConfig, cruise_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ParkingDeciderConfig, allowable_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ParkingDeciderConfig, front_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ParkingDeciderConfig, back_space_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DeciderConfig, intention_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DeciderConfig, reference_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DeciderConfig, object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DeciderConfig, parking_),
  0,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::acu::planning::IntentionDeciderConfig)},
  { 23, 32, sizeof(::acu::planning::ReferenceLineDeciderConfig)},
  { 36, 45, sizeof(::acu::planning::ObjectDeciderConfig)},
  { 49, 58, sizeof(::acu::planning::ParkingDeciderConfig)},
  { 62, 71, sizeof(::acu::planning::DeciderConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_IntentionDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_ReferenceLineDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_ObjectDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_ParkingDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_DeciderConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "decision_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025decision_config.proto\022\014acu.planning\"\376\001"
      "\n\026IntentionDeciderConfig\022\025\n\roffset_enabl"
      "e\030\001 \001(\010\022\031\n\021abandon_lc_enable\030\002 \001(\010\022\031\n\021mi"
      "ssion_lc_enable\030\003 \001(\010\022\027\n\017speed_lc_enable"
      "\030\004 \001(\010\022\027\n\017obstacle_enable\030\005 \001(\010\022\030\n\020pull_"
      "over_enable\030\006 \001(\010\022\026\n\016meeting_enable\030\007 \001("
      "\010\022\031\n\021command_lc_enable\030\010 \001(\010\022\030\n\020departur"
      "e_enable\030\t \001(\010\"~\n\032ReferenceLineDeciderCo"
      "nfig\022\032\n\022borrow_lane_enable\030\001 \001(\010\022\032\n\022borr"
      "ow_road_enable\030\002 \001(\010\022\023\n\013dis_to_line\030\003 \001("
      "\001\022\023\n\013dis_to_curb\030\004 \001(\001\"x\n\023ObjectDeciderC"
      "onfig\022\023\n\013dis_to_stop\030\001 \001(\001\022\024\n\014yield_enab"
      "le\030\002 \001(\010\022\032\n\022replan_slow_enable\030\003 \001(\010\022\032\n\022"
      "replan_speed_limit\030\004 \001(\001\"o\n\024ParkingDecid"
      "erConfig\022\024\n\014cruise_speed\030\001 \001(\001\022\030\n\020allowa"
      "ble_offset\030\002 \001(\001\022\023\n\013front_space\030\003 \001(\001\022\022\n"
      "\nback_space\030\004 \001(\001\"\362\001\n\rDeciderConfig\0227\n\ti"
      "ntention\030\001 \001(\0132$.acu.planning.IntentionD"
      "eciderConfig\022@\n\016reference_line\030\002 \001(\0132(.a"
      "cu.planning.ReferenceLineDeciderConfig\0221"
      "\n\006object\030\003 \001(\0132!.acu.planning.ObjectDeci"
      "derConfig\0223\n\007parking\030\004 \001(\0132\".acu.plannin"
      "g.ParkingDeciderConfig"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 902);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "decision_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_decision_5fconfig_2eproto
namespace acu {
namespace planning {

// ===================================================================

void IntentionDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntentionDeciderConfig::kOffsetEnableFieldNumber;
const int IntentionDeciderConfig::kAbandonLcEnableFieldNumber;
const int IntentionDeciderConfig::kMissionLcEnableFieldNumber;
const int IntentionDeciderConfig::kSpeedLcEnableFieldNumber;
const int IntentionDeciderConfig::kObstacleEnableFieldNumber;
const int IntentionDeciderConfig::kPullOverEnableFieldNumber;
const int IntentionDeciderConfig::kMeetingEnableFieldNumber;
const int IntentionDeciderConfig::kCommandLcEnableFieldNumber;
const int IntentionDeciderConfig::kDepartureEnableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntentionDeciderConfig::IntentionDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_5fconfig_2eproto::InitDefaultsIntentionDeciderConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.IntentionDeciderConfig)
}
IntentionDeciderConfig::IntentionDeciderConfig(const IntentionDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&offset_enable_, &from.offset_enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&departure_enable_) -
    reinterpret_cast<char*>(&offset_enable_)) + sizeof(departure_enable_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.IntentionDeciderConfig)
}

void IntentionDeciderConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&offset_enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&departure_enable_) -
      reinterpret_cast<char*>(&offset_enable_)) + sizeof(departure_enable_));
}

IntentionDeciderConfig::~IntentionDeciderConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.IntentionDeciderConfig)
  SharedDtor();
}

void IntentionDeciderConfig::SharedDtor() {
}

void IntentionDeciderConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntentionDeciderConfig::descriptor() {
  ::protobuf_decision_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IntentionDeciderConfig& IntentionDeciderConfig::default_instance() {
  ::protobuf_decision_5fconfig_2eproto::InitDefaultsIntentionDeciderConfig();
  return *internal_default_instance();
}

IntentionDeciderConfig* IntentionDeciderConfig::New(::google::protobuf::Arena* arena) const {
  IntentionDeciderConfig* n = new IntentionDeciderConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IntentionDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.IntentionDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&offset_enable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&command_lc_enable_) -
        reinterpret_cast<char*>(&offset_enable_)) + sizeof(command_lc_enable_));
  }
  departure_enable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IntentionDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.IntentionDeciderConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool offset_enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_offset_enable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offset_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool abandon_lc_enable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_abandon_lc_enable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &abandon_lc_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mission_lc_enable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_mission_lc_enable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mission_lc_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool speed_lc_enable = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_speed_lc_enable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &speed_lc_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obstacle_enable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_obstacle_enable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obstacle_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pull_over_enable = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_pull_over_enable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pull_over_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool meeting_enable = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_meeting_enable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &meeting_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool command_lc_enable = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_command_lc_enable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &command_lc_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool departure_enable = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_departure_enable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &departure_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.IntentionDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.IntentionDeciderConfig)
  return false;
#undef DO_
}

void IntentionDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.IntentionDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool offset_enable = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->offset_enable(), output);
  }

  // optional bool abandon_lc_enable = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->abandon_lc_enable(), output);
  }

  // optional bool mission_lc_enable = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->mission_lc_enable(), output);
  }

  // optional bool speed_lc_enable = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->speed_lc_enable(), output);
  }

  // optional bool obstacle_enable = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->obstacle_enable(), output);
  }

  // optional bool pull_over_enable = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->pull_over_enable(), output);
  }

  // optional bool meeting_enable = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->meeting_enable(), output);
  }

  // optional bool command_lc_enable = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->command_lc_enable(), output);
  }

  // optional bool departure_enable = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->departure_enable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.IntentionDeciderConfig)
}

::google::protobuf::uint8* IntentionDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.IntentionDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool offset_enable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->offset_enable(), target);
  }

  // optional bool abandon_lc_enable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->abandon_lc_enable(), target);
  }

  // optional bool mission_lc_enable = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->mission_lc_enable(), target);
  }

  // optional bool speed_lc_enable = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->speed_lc_enable(), target);
  }

  // optional bool obstacle_enable = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->obstacle_enable(), target);
  }

  // optional bool pull_over_enable = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->pull_over_enable(), target);
  }

  // optional bool meeting_enable = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->meeting_enable(), target);
  }

  // optional bool command_lc_enable = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->command_lc_enable(), target);
  }

  // optional bool departure_enable = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->departure_enable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.IntentionDeciderConfig)
  return target;
}

size_t IntentionDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.IntentionDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bool offset_enable = 1;
    if (has_offset_enable()) {
      total_size += 1 + 1;
    }

    // optional bool abandon_lc_enable = 2;
    if (has_abandon_lc_enable()) {
      total_size += 1 + 1;
    }

    // optional bool mission_lc_enable = 3;
    if (has_mission_lc_enable()) {
      total_size += 1 + 1;
    }

    // optional bool speed_lc_enable = 4;
    if (has_speed_lc_enable()) {
      total_size += 1 + 1;
    }

    // optional bool obstacle_enable = 5;
    if (has_obstacle_enable()) {
      total_size += 1 + 1;
    }

    // optional bool pull_over_enable = 6;
    if (has_pull_over_enable()) {
      total_size += 1 + 1;
    }

    // optional bool meeting_enable = 7;
    if (has_meeting_enable()) {
      total_size += 1 + 1;
    }

    // optional bool command_lc_enable = 8;
    if (has_command_lc_enable()) {
      total_size += 1 + 1;
    }

  }
  // optional bool departure_enable = 9;
  if (has_departure_enable()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntentionDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.IntentionDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const IntentionDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IntentionDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.IntentionDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.IntentionDeciderConfig)
    MergeFrom(*source);
  }
}

void IntentionDeciderConfig::MergeFrom(const IntentionDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.IntentionDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      offset_enable_ = from.offset_enable_;
    }
    if (cached_has_bits & 0x00000002u) {
      abandon_lc_enable_ = from.abandon_lc_enable_;
    }
    if (cached_has_bits & 0x00000004u) {
      mission_lc_enable_ = from.mission_lc_enable_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_lc_enable_ = from.speed_lc_enable_;
    }
    if (cached_has_bits & 0x00000010u) {
      obstacle_enable_ = from.obstacle_enable_;
    }
    if (cached_has_bits & 0x00000020u) {
      pull_over_enable_ = from.pull_over_enable_;
    }
    if (cached_has_bits & 0x00000040u) {
      meeting_enable_ = from.meeting_enable_;
    }
    if (cached_has_bits & 0x00000080u) {
      command_lc_enable_ = from.command_lc_enable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_departure_enable(from.departure_enable());
  }
}

void IntentionDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.IntentionDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntentionDeciderConfig::CopyFrom(const IntentionDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.IntentionDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntentionDeciderConfig::IsInitialized() const {
  return true;
}

void IntentionDeciderConfig::Swap(IntentionDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntentionDeciderConfig::InternalSwap(IntentionDeciderConfig* other) {
  using std::swap;
  swap(offset_enable_, other->offset_enable_);
  swap(abandon_lc_enable_, other->abandon_lc_enable_);
  swap(mission_lc_enable_, other->mission_lc_enable_);
  swap(speed_lc_enable_, other->speed_lc_enable_);
  swap(obstacle_enable_, other->obstacle_enable_);
  swap(pull_over_enable_, other->pull_over_enable_);
  swap(meeting_enable_, other->meeting_enable_);
  swap(command_lc_enable_, other->command_lc_enable_);
  swap(departure_enable_, other->departure_enable_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IntentionDeciderConfig::GetMetadata() const {
  protobuf_decision_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReferenceLineDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferenceLineDeciderConfig::kBorrowLaneEnableFieldNumber;
const int ReferenceLineDeciderConfig::kBorrowRoadEnableFieldNumber;
const int ReferenceLineDeciderConfig::kDisToLineFieldNumber;
const int ReferenceLineDeciderConfig::kDisToCurbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReferenceLineDeciderConfig::ReferenceLineDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_5fconfig_2eproto::InitDefaultsReferenceLineDeciderConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.ReferenceLineDeciderConfig)
}
ReferenceLineDeciderConfig::ReferenceLineDeciderConfig(const ReferenceLineDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dis_to_line_, &from.dis_to_line_,
    static_cast<size_t>(reinterpret_cast<char*>(&borrow_road_enable_) -
    reinterpret_cast<char*>(&dis_to_line_)) + sizeof(borrow_road_enable_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.ReferenceLineDeciderConfig)
}

void ReferenceLineDeciderConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dis_to_line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&borrow_road_enable_) -
      reinterpret_cast<char*>(&dis_to_line_)) + sizeof(borrow_road_enable_));
}

ReferenceLineDeciderConfig::~ReferenceLineDeciderConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.ReferenceLineDeciderConfig)
  SharedDtor();
}

void ReferenceLineDeciderConfig::SharedDtor() {
}

void ReferenceLineDeciderConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceLineDeciderConfig::descriptor() {
  ::protobuf_decision_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReferenceLineDeciderConfig& ReferenceLineDeciderConfig::default_instance() {
  ::protobuf_decision_5fconfig_2eproto::InitDefaultsReferenceLineDeciderConfig();
  return *internal_default_instance();
}

ReferenceLineDeciderConfig* ReferenceLineDeciderConfig::New(::google::protobuf::Arena* arena) const {
  ReferenceLineDeciderConfig* n = new ReferenceLineDeciderConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReferenceLineDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.ReferenceLineDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&dis_to_line_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&borrow_road_enable_) -
        reinterpret_cast<char*>(&dis_to_line_)) + sizeof(borrow_road_enable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReferenceLineDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.ReferenceLineDeciderConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool borrow_lane_enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_borrow_lane_enable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &borrow_lane_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool borrow_road_enable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_borrow_road_enable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &borrow_road_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dis_to_line = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_dis_to_line();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dis_to_line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dis_to_curb = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_dis_to_curb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dis_to_curb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.ReferenceLineDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.ReferenceLineDeciderConfig)
  return false;
#undef DO_
}

void ReferenceLineDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.ReferenceLineDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool borrow_lane_enable = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->borrow_lane_enable(), output);
  }

  // optional bool borrow_road_enable = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->borrow_road_enable(), output);
  }

  // optional double dis_to_line = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dis_to_line(), output);
  }

  // optional double dis_to_curb = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->dis_to_curb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.ReferenceLineDeciderConfig)
}

::google::protobuf::uint8* ReferenceLineDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.ReferenceLineDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool borrow_lane_enable = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->borrow_lane_enable(), target);
  }

  // optional bool borrow_road_enable = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->borrow_road_enable(), target);
  }

  // optional double dis_to_line = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dis_to_line(), target);
  }

  // optional double dis_to_curb = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->dis_to_curb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.ReferenceLineDeciderConfig)
  return target;
}

size_t ReferenceLineDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.ReferenceLineDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double dis_to_line = 3;
    if (has_dis_to_line()) {
      total_size += 1 + 8;
    }

    // optional double dis_to_curb = 4;
    if (has_dis_to_curb()) {
      total_size += 1 + 8;
    }

    // optional bool borrow_lane_enable = 1;
    if (has_borrow_lane_enable()) {
      total_size += 1 + 1;
    }

    // optional bool borrow_road_enable = 2;
    if (has_borrow_road_enable()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceLineDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.ReferenceLineDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceLineDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReferenceLineDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.ReferenceLineDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.ReferenceLineDeciderConfig)
    MergeFrom(*source);
  }
}

void ReferenceLineDeciderConfig::MergeFrom(const ReferenceLineDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.ReferenceLineDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      dis_to_line_ = from.dis_to_line_;
    }
    if (cached_has_bits & 0x00000002u) {
      dis_to_curb_ = from.dis_to_curb_;
    }
    if (cached_has_bits & 0x00000004u) {
      borrow_lane_enable_ = from.borrow_lane_enable_;
    }
    if (cached_has_bits & 0x00000008u) {
      borrow_road_enable_ = from.borrow_road_enable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReferenceLineDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.ReferenceLineDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceLineDeciderConfig::CopyFrom(const ReferenceLineDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.ReferenceLineDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineDeciderConfig::IsInitialized() const {
  return true;
}

void ReferenceLineDeciderConfig::Swap(ReferenceLineDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReferenceLineDeciderConfig::InternalSwap(ReferenceLineDeciderConfig* other) {
  using std::swap;
  swap(dis_to_line_, other->dis_to_line_);
  swap(dis_to_curb_, other->dis_to_curb_);
  swap(borrow_lane_enable_, other->borrow_lane_enable_);
  swap(borrow_road_enable_, other->borrow_road_enable_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReferenceLineDeciderConfig::GetMetadata() const {
  protobuf_decision_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObjectDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectDeciderConfig::kDisToStopFieldNumber;
const int ObjectDeciderConfig::kYieldEnableFieldNumber;
const int ObjectDeciderConfig::kReplanSlowEnableFieldNumber;
const int ObjectDeciderConfig::kReplanSpeedLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectDeciderConfig::ObjectDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_5fconfig_2eproto::InitDefaultsObjectDeciderConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.ObjectDeciderConfig)
}
ObjectDeciderConfig::ObjectDeciderConfig(const ObjectDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dis_to_stop_, &from.dis_to_stop_,
    static_cast<size_t>(reinterpret_cast<char*>(&replan_slow_enable_) -
    reinterpret_cast<char*>(&dis_to_stop_)) + sizeof(replan_slow_enable_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.ObjectDeciderConfig)
}

void ObjectDeciderConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dis_to_stop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replan_slow_enable_) -
      reinterpret_cast<char*>(&dis_to_stop_)) + sizeof(replan_slow_enable_));
}

ObjectDeciderConfig::~ObjectDeciderConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.ObjectDeciderConfig)
  SharedDtor();
}

void ObjectDeciderConfig::SharedDtor() {
}

void ObjectDeciderConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDeciderConfig::descriptor() {
  ::protobuf_decision_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectDeciderConfig& ObjectDeciderConfig::default_instance() {
  ::protobuf_decision_5fconfig_2eproto::InitDefaultsObjectDeciderConfig();
  return *internal_default_instance();
}

ObjectDeciderConfig* ObjectDeciderConfig::New(::google::protobuf::Arena* arena) const {
  ObjectDeciderConfig* n = new ObjectDeciderConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.ObjectDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&dis_to_stop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replan_slow_enable_) -
        reinterpret_cast<char*>(&dis_to_stop_)) + sizeof(replan_slow_enable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.ObjectDeciderConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double dis_to_stop = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_dis_to_stop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dis_to_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool yield_enable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_yield_enable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yield_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool replan_slow_enable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_replan_slow_enable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &replan_slow_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double replan_speed_limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_replan_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &replan_speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.ObjectDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.ObjectDeciderConfig)
  return false;
#undef DO_
}

void ObjectDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.ObjectDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double dis_to_stop = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->dis_to_stop(), output);
  }

  // optional bool yield_enable = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->yield_enable(), output);
  }

  // optional bool replan_slow_enable = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->replan_slow_enable(), output);
  }

  // optional double replan_speed_limit = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->replan_speed_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.ObjectDeciderConfig)
}

::google::protobuf::uint8* ObjectDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.ObjectDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double dis_to_stop = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->dis_to_stop(), target);
  }

  // optional bool yield_enable = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->yield_enable(), target);
  }

  // optional bool replan_slow_enable = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->replan_slow_enable(), target);
  }

  // optional double replan_speed_limit = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->replan_speed_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.ObjectDeciderConfig)
  return target;
}

size_t ObjectDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.ObjectDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double dis_to_stop = 1;
    if (has_dis_to_stop()) {
      total_size += 1 + 8;
    }

    // optional double replan_speed_limit = 4;
    if (has_replan_speed_limit()) {
      total_size += 1 + 8;
    }

    // optional bool yield_enable = 2;
    if (has_yield_enable()) {
      total_size += 1 + 1;
    }

    // optional bool replan_slow_enable = 3;
    if (has_replan_slow_enable()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.ObjectDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.ObjectDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.ObjectDeciderConfig)
    MergeFrom(*source);
  }
}

void ObjectDeciderConfig::MergeFrom(const ObjectDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.ObjectDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      dis_to_stop_ = from.dis_to_stop_;
    }
    if (cached_has_bits & 0x00000002u) {
      replan_speed_limit_ = from.replan_speed_limit_;
    }
    if (cached_has_bits & 0x00000004u) {
      yield_enable_ = from.yield_enable_;
    }
    if (cached_has_bits & 0x00000008u) {
      replan_slow_enable_ = from.replan_slow_enable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.ObjectDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDeciderConfig::CopyFrom(const ObjectDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.ObjectDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDeciderConfig::IsInitialized() const {
  return true;
}

void ObjectDeciderConfig::Swap(ObjectDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectDeciderConfig::InternalSwap(ObjectDeciderConfig* other) {
  using std::swap;
  swap(dis_to_stop_, other->dis_to_stop_);
  swap(replan_speed_limit_, other->replan_speed_limit_);
  swap(yield_enable_, other->yield_enable_);
  swap(replan_slow_enable_, other->replan_slow_enable_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectDeciderConfig::GetMetadata() const {
  protobuf_decision_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParkingDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParkingDeciderConfig::kCruiseSpeedFieldNumber;
const int ParkingDeciderConfig::kAllowableOffsetFieldNumber;
const int ParkingDeciderConfig::kFrontSpaceFieldNumber;
const int ParkingDeciderConfig::kBackSpaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParkingDeciderConfig::ParkingDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_5fconfig_2eproto::InitDefaultsParkingDeciderConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.ParkingDeciderConfig)
}
ParkingDeciderConfig::ParkingDeciderConfig(const ParkingDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cruise_speed_, &from.cruise_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&back_space_) -
    reinterpret_cast<char*>(&cruise_speed_)) + sizeof(back_space_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.ParkingDeciderConfig)
}

void ParkingDeciderConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cruise_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&back_space_) -
      reinterpret_cast<char*>(&cruise_speed_)) + sizeof(back_space_));
}

ParkingDeciderConfig::~ParkingDeciderConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.ParkingDeciderConfig)
  SharedDtor();
}

void ParkingDeciderConfig::SharedDtor() {
}

void ParkingDeciderConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParkingDeciderConfig::descriptor() {
  ::protobuf_decision_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParkingDeciderConfig& ParkingDeciderConfig::default_instance() {
  ::protobuf_decision_5fconfig_2eproto::InitDefaultsParkingDeciderConfig();
  return *internal_default_instance();
}

ParkingDeciderConfig* ParkingDeciderConfig::New(::google::protobuf::Arena* arena) const {
  ParkingDeciderConfig* n = new ParkingDeciderConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParkingDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.ParkingDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&cruise_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&back_space_) -
        reinterpret_cast<char*>(&cruise_speed_)) + sizeof(back_space_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParkingDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.ParkingDeciderConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double cruise_speed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_cruise_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cruise_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double allowable_offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_allowable_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &allowable_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double front_space = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_front_space();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &front_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double back_space = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_back_space();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &back_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.ParkingDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.ParkingDeciderConfig)
  return false;
#undef DO_
}

void ParkingDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.ParkingDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double cruise_speed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->cruise_speed(), output);
  }

  // optional double allowable_offset = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->allowable_offset(), output);
  }

  // optional double front_space = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->front_space(), output);
  }

  // optional double back_space = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->back_space(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.ParkingDeciderConfig)
}

::google::protobuf::uint8* ParkingDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.ParkingDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double cruise_speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->cruise_speed(), target);
  }

  // optional double allowable_offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->allowable_offset(), target);
  }

  // optional double front_space = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->front_space(), target);
  }

  // optional double back_space = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->back_space(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.ParkingDeciderConfig)
  return target;
}

size_t ParkingDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.ParkingDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double cruise_speed = 1;
    if (has_cruise_speed()) {
      total_size += 1 + 8;
    }

    // optional double allowable_offset = 2;
    if (has_allowable_offset()) {
      total_size += 1 + 8;
    }

    // optional double front_space = 3;
    if (has_front_space()) {
      total_size += 1 + 8;
    }

    // optional double back_space = 4;
    if (has_back_space()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParkingDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.ParkingDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParkingDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.ParkingDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.ParkingDeciderConfig)
    MergeFrom(*source);
  }
}

void ParkingDeciderConfig::MergeFrom(const ParkingDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.ParkingDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      cruise_speed_ = from.cruise_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      allowable_offset_ = from.allowable_offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      front_space_ = from.front_space_;
    }
    if (cached_has_bits & 0x00000008u) {
      back_space_ = from.back_space_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParkingDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.ParkingDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingDeciderConfig::CopyFrom(const ParkingDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.ParkingDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingDeciderConfig::IsInitialized() const {
  return true;
}

void ParkingDeciderConfig::Swap(ParkingDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParkingDeciderConfig::InternalSwap(ParkingDeciderConfig* other) {
  using std::swap;
  swap(cruise_speed_, other->cruise_speed_);
  swap(allowable_offset_, other->allowable_offset_);
  swap(front_space_, other->front_space_);
  swap(back_space_, other->back_space_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParkingDeciderConfig::GetMetadata() const {
  protobuf_decision_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeciderConfig::InitAsDefaultInstance() {
  ::acu::planning::_DeciderConfig_default_instance_._instance.get_mutable()->intention_ = const_cast< ::acu::planning::IntentionDeciderConfig*>(
      ::acu::planning::IntentionDeciderConfig::internal_default_instance());
  ::acu::planning::_DeciderConfig_default_instance_._instance.get_mutable()->reference_line_ = const_cast< ::acu::planning::ReferenceLineDeciderConfig*>(
      ::acu::planning::ReferenceLineDeciderConfig::internal_default_instance());
  ::acu::planning::_DeciderConfig_default_instance_._instance.get_mutable()->object_ = const_cast< ::acu::planning::ObjectDeciderConfig*>(
      ::acu::planning::ObjectDeciderConfig::internal_default_instance());
  ::acu::planning::_DeciderConfig_default_instance_._instance.get_mutable()->parking_ = const_cast< ::acu::planning::ParkingDeciderConfig*>(
      ::acu::planning::ParkingDeciderConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeciderConfig::kIntentionFieldNumber;
const int DeciderConfig::kReferenceLineFieldNumber;
const int DeciderConfig::kObjectFieldNumber;
const int DeciderConfig::kParkingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeciderConfig::DeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_5fconfig_2eproto::InitDefaultsDeciderConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.DeciderConfig)
}
DeciderConfig::DeciderConfig(const DeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_intention()) {
    intention_ = new ::acu::planning::IntentionDeciderConfig(*from.intention_);
  } else {
    intention_ = NULL;
  }
  if (from.has_reference_line()) {
    reference_line_ = new ::acu::planning::ReferenceLineDeciderConfig(*from.reference_line_);
  } else {
    reference_line_ = NULL;
  }
  if (from.has_object()) {
    object_ = new ::acu::planning::ObjectDeciderConfig(*from.object_);
  } else {
    object_ = NULL;
  }
  if (from.has_parking()) {
    parking_ = new ::acu::planning::ParkingDeciderConfig(*from.parking_);
  } else {
    parking_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:acu.planning.DeciderConfig)
}

void DeciderConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&intention_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parking_) -
      reinterpret_cast<char*>(&intention_)) + sizeof(parking_));
}

DeciderConfig::~DeciderConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.DeciderConfig)
  SharedDtor();
}

void DeciderConfig::SharedDtor() {
  if (this != internal_default_instance()) delete intention_;
  if (this != internal_default_instance()) delete reference_line_;
  if (this != internal_default_instance()) delete object_;
  if (this != internal_default_instance()) delete parking_;
}

void DeciderConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeciderConfig::descriptor() {
  ::protobuf_decision_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeciderConfig& DeciderConfig::default_instance() {
  ::protobuf_decision_5fconfig_2eproto::InitDefaultsDeciderConfig();
  return *internal_default_instance();
}

DeciderConfig* DeciderConfig::New(::google::protobuf::Arena* arena) const {
  DeciderConfig* n = new DeciderConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.DeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(intention_ != NULL);
      intention_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(reference_line_ != NULL);
      reference_line_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(object_ != NULL);
      object_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(parking_ != NULL);
      parking_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.DeciderConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.planning.IntentionDeciderConfig intention = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intention()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.ReferenceLineDeciderConfig reference_line = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reference_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.ObjectDeciderConfig object = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.ParkingDeciderConfig parking = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.DeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.DeciderConfig)
  return false;
#undef DO_
}

void DeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.DeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.IntentionDeciderConfig intention = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->intention_, output);
  }

  // optional .acu.planning.ReferenceLineDeciderConfig reference_line = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->reference_line_, output);
  }

  // optional .acu.planning.ObjectDeciderConfig object = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->object_, output);
  }

  // optional .acu.planning.ParkingDeciderConfig parking = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->parking_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.DeciderConfig)
}

::google::protobuf::uint8* DeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.DeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.IntentionDeciderConfig intention = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->intention_, deterministic, target);
  }

  // optional .acu.planning.ReferenceLineDeciderConfig reference_line = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->reference_line_, deterministic, target);
  }

  // optional .acu.planning.ObjectDeciderConfig object = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->object_, deterministic, target);
  }

  // optional .acu.planning.ParkingDeciderConfig parking = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->parking_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.DeciderConfig)
  return target;
}

size_t DeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.DeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .acu.planning.IntentionDeciderConfig intention = 1;
    if (has_intention()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->intention_);
    }

    // optional .acu.planning.ReferenceLineDeciderConfig reference_line = 2;
    if (has_reference_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->reference_line_);
    }

    // optional .acu.planning.ObjectDeciderConfig object = 3;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->object_);
    }

    // optional .acu.planning.ParkingDeciderConfig parking = 4;
    if (has_parking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->parking_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.DeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.DeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.DeciderConfig)
    MergeFrom(*source);
  }
}

void DeciderConfig::MergeFrom(const DeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.DeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_intention()->::acu::planning::IntentionDeciderConfig::MergeFrom(from.intention());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reference_line()->::acu::planning::ReferenceLineDeciderConfig::MergeFrom(from.reference_line());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_object()->::acu::planning::ObjectDeciderConfig::MergeFrom(from.object());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_parking()->::acu::planning::ParkingDeciderConfig::MergeFrom(from.parking());
    }
  }
}

void DeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.DeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeciderConfig::CopyFrom(const DeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.DeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeciderConfig::IsInitialized() const {
  return true;
}

void DeciderConfig::Swap(DeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeciderConfig::InternalSwap(DeciderConfig* other) {
  using std::swap;
  swap(intention_, other->intention_);
  swap(reference_line_, other->reference_line_);
  swap(object_, other->object_);
  swap(parking_, other->parking_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeciderConfig::GetMetadata() const {
  protobuf_decision_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace acu

// @@protoc_insertion_point(global_scope)
