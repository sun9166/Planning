// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dp_st_speed_config.proto

#include "dp_st_speed_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace acu {
namespace planning {
class DpStSpeedConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DpStSpeedConfig>
      _instance;
} _DpStSpeedConfig_default_instance_;
}  // namespace planning
}  // namespace acu
namespace protobuf_dp_5fst_5fspeed_5fconfig_2eproto {
void InitDefaultsDpStSpeedConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_st_5fboundary_5fconfig_2eproto::InitDefaultsStBoundaryConfig();
  {
    void* ptr = &::acu::planning::_DpStSpeedConfig_default_instance_;
    new (ptr) ::acu::planning::DpStSpeedConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::DpStSpeedConfig::InitAsDefaultInstance();
}

void InitDefaultsDpStSpeedConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDpStSpeedConfigImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, total_path_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, total_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, matrix_dimension_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, matrix_dimension_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, speed_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, accel_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, jerk_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, obstacle_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, reference_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, go_down_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, go_up_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, default_obstacle_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, default_speed_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, exceed_speed_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, low_speed_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, keep_clear_low_speed_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, accel_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, decel_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, positive_jerk_coeff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, negative_jerk_coeff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, max_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, max_deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpStSpeedConfig, st_boundary_config_),
  3,
  4,
  5,
  6,
  1,
  7,
  8,
  9,
  2,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 28, sizeof(::acu::planning::DpStSpeedConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_DpStSpeedConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dp_st_speed_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030dp_st_speed_config.proto\022\014acu.planning"
      "\032\030st_boundary_config.proto\"\352\005\n\017DpStSpeed"
      "Config\022\036\n\021total_path_length\030\001 \001(\001:\0030.1\022\025"
      "\n\ntotal_time\030\002 \001(\001:\0013\022\037\n\022matrix_dimensio"
      "n_s\030\003 \001(\005:\003100\022\036\n\022matrix_dimension_t\030\004 \001"
      "(\005:\00210\022\027\n\014speed_weight\030\005 \001(\001:\0010\022\030\n\014accel"
      "_weight\030\006 \001(\001:\00210\022\027\n\013jerk_weight\030\007 \001(\001:\002"
      "10\022\032\n\017obstacle_weight\030\010 \001(\001:\0011\022\033\n\020refere"
      "nce_weight\030\t \001(\001:\0010\022\031\n\016go_down_buffer\030\n "
      "\001(\001:\0015\022\027\n\014go_up_buffer\030\013 \001(\001:\0015\022*\n\025defau"
      "lt_obstacle_cost\030\014 \001(\001:\01310000000000\022\035\n\022d"
      "efault_speed_cost\030\r \001(\001:\0011\022 \n\024exceed_spe"
      "ed_penalty\030\016 \001(\001:\00210\022\036\n\021low_speed_penalt"
      "y\030\017 \001(\001:\0032.5\022(\n\034keep_clear_low_speed_pen"
      "alty\030\020 \001(\001:\00210\022\030\n\raccel_penalty\030\024 \001(\001:\0012"
      "\022\030\n\rdecel_penalty\030\025 \001(\001:\0012\022\036\n\023positive_j"
      "erk_coeff\030\036 \001(\001:\0011\022 \n\023negative_jerk_coef"
      "f\030\037 \001(\001:\003300\022\035\n\020max_acceleration\030( \001(\001:\003"
      "4.5\022\036\n\020max_deceleration\030) \001(\001:\004-4.5\022:\n\022s"
      "t_boundary_config\0302 \001(\0132\036.acu.planning.S"
      "tBoundaryConfig"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 815);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dp_st_speed_config.proto", &protobuf_RegisterTypes);
  ::protobuf_st_5fboundary_5fconfig_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_dp_5fst_5fspeed_5fconfig_2eproto
namespace acu {
namespace planning {

// ===================================================================

void DpStSpeedConfig::InitAsDefaultInstance() {
  ::acu::planning::_DpStSpeedConfig_default_instance_._instance.get_mutable()->st_boundary_config_ = const_cast< ::acu::planning::StBoundaryConfig*>(
      ::acu::planning::StBoundaryConfig::internal_default_instance());
}
void DpStSpeedConfig::clear_st_boundary_config() {
  if (st_boundary_config_ != NULL) st_boundary_config_->Clear();
  clear_has_st_boundary_config();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DpStSpeedConfig::kTotalPathLengthFieldNumber;
const int DpStSpeedConfig::kTotalTimeFieldNumber;
const int DpStSpeedConfig::kMatrixDimensionSFieldNumber;
const int DpStSpeedConfig::kMatrixDimensionTFieldNumber;
const int DpStSpeedConfig::kSpeedWeightFieldNumber;
const int DpStSpeedConfig::kAccelWeightFieldNumber;
const int DpStSpeedConfig::kJerkWeightFieldNumber;
const int DpStSpeedConfig::kObstacleWeightFieldNumber;
const int DpStSpeedConfig::kReferenceWeightFieldNumber;
const int DpStSpeedConfig::kGoDownBufferFieldNumber;
const int DpStSpeedConfig::kGoUpBufferFieldNumber;
const int DpStSpeedConfig::kDefaultObstacleCostFieldNumber;
const int DpStSpeedConfig::kDefaultSpeedCostFieldNumber;
const int DpStSpeedConfig::kExceedSpeedPenaltyFieldNumber;
const int DpStSpeedConfig::kLowSpeedPenaltyFieldNumber;
const int DpStSpeedConfig::kKeepClearLowSpeedPenaltyFieldNumber;
const int DpStSpeedConfig::kAccelPenaltyFieldNumber;
const int DpStSpeedConfig::kDecelPenaltyFieldNumber;
const int DpStSpeedConfig::kPositiveJerkCoeffFieldNumber;
const int DpStSpeedConfig::kNegativeJerkCoeffFieldNumber;
const int DpStSpeedConfig::kMaxAccelerationFieldNumber;
const int DpStSpeedConfig::kMaxDecelerationFieldNumber;
const int DpStSpeedConfig::kStBoundaryConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DpStSpeedConfig::DpStSpeedConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dp_5fst_5fspeed_5fconfig_2eproto::InitDefaultsDpStSpeedConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.DpStSpeedConfig)
}
DpStSpeedConfig::DpStSpeedConfig(const DpStSpeedConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_st_boundary_config()) {
    st_boundary_config_ = new ::acu::planning::StBoundaryConfig(*from.st_boundary_config_);
  } else {
    st_boundary_config_ = NULL;
  }
  ::memcpy(&speed_weight_, &from.speed_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_deceleration_) -
    reinterpret_cast<char*>(&speed_weight_)) + sizeof(max_deceleration_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.DpStSpeedConfig)
}

void DpStSpeedConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&st_boundary_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reference_weight_) -
      reinterpret_cast<char*>(&st_boundary_config_)) + sizeof(reference_weight_));
  total_path_length_ = 0.1;
  total_time_ = 3;
  matrix_dimension_s_ = 100;
  matrix_dimension_t_ = 10;
  accel_weight_ = 10;
  jerk_weight_ = 10;
  obstacle_weight_ = 1;
  go_down_buffer_ = 5;
  go_up_buffer_ = 5;
  default_obstacle_cost_ = 10000000000;
  default_speed_cost_ = 1;
  exceed_speed_penalty_ = 10;
  low_speed_penalty_ = 2.5;
  keep_clear_low_speed_penalty_ = 10;
  accel_penalty_ = 2;
  decel_penalty_ = 2;
  positive_jerk_coeff_ = 1;
  negative_jerk_coeff_ = 300;
  max_acceleration_ = 4.5;
  max_deceleration_ = -4.5;
}

DpStSpeedConfig::~DpStSpeedConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.DpStSpeedConfig)
  SharedDtor();
}

void DpStSpeedConfig::SharedDtor() {
  if (this != internal_default_instance()) delete st_boundary_config_;
}

void DpStSpeedConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DpStSpeedConfig::descriptor() {
  ::protobuf_dp_5fst_5fspeed_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dp_5fst_5fspeed_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DpStSpeedConfig& DpStSpeedConfig::default_instance() {
  ::protobuf_dp_5fst_5fspeed_5fconfig_2eproto::InitDefaultsDpStSpeedConfig();
  return *internal_default_instance();
}

DpStSpeedConfig* DpStSpeedConfig::New(::google::protobuf::Arena* arena) const {
  DpStSpeedConfig* n = new DpStSpeedConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DpStSpeedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.DpStSpeedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(st_boundary_config_ != NULL);
    st_boundary_config_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&speed_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reference_weight_) -
        reinterpret_cast<char*>(&speed_weight_)) + sizeof(reference_weight_));
    total_path_length_ = 0.1;
    total_time_ = 3;
    matrix_dimension_s_ = 100;
    matrix_dimension_t_ = 10;
    accel_weight_ = 10;
  }
  if (cached_has_bits & 65280u) {
    jerk_weight_ = 10;
    obstacle_weight_ = 1;
    go_down_buffer_ = 5;
    go_up_buffer_ = 5;
    default_obstacle_cost_ = 10000000000;
    default_speed_cost_ = 1;
    exceed_speed_penalty_ = 10;
    low_speed_penalty_ = 2.5;
  }
  if (cached_has_bits & 8323072u) {
    keep_clear_low_speed_penalty_ = 10;
    accel_penalty_ = 2;
    decel_penalty_ = 2;
    positive_jerk_coeff_ = 1;
    negative_jerk_coeff_ = 300;
    max_acceleration_ = 4.5;
    max_deceleration_ = -4.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DpStSpeedConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.DpStSpeedConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double total_path_length = 1 [default = 0.1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_total_path_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double total_time = 2 [default = 3];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_total_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 matrix_dimension_s = 3 [default = 100];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_matrix_dimension_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matrix_dimension_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 matrix_dimension_t = 4 [default = 10];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_matrix_dimension_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matrix_dimension_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_weight = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_speed_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accel_weight = 6 [default = 10];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_accel_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accel_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double jerk_weight = 7 [default = 10];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_jerk_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_weight = 8 [default = 1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_obstacle_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double reference_weight = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_reference_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reference_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double go_down_buffer = 10 [default = 5];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_go_down_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &go_down_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double go_up_buffer = 11 [default = 5];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_go_up_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &go_up_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double default_obstacle_cost = 12 [default = 10000000000];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_default_obstacle_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_obstacle_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double default_speed_cost = 13 [default = 1];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_default_speed_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_speed_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double exceed_speed_penalty = 14 [default = 10];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_exceed_speed_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exceed_speed_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double low_speed_penalty = 15 [default = 2.5];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_low_speed_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_speed_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double keep_clear_low_speed_penalty = 16 [default = 10];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_keep_clear_low_speed_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &keep_clear_low_speed_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accel_penalty = 20 [default = 2];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {
          set_has_accel_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accel_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double decel_penalty = 21 [default = 2];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_decel_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &decel_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double positive_jerk_coeff = 30 [default = 1];
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {
          set_has_positive_jerk_coeff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positive_jerk_coeff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double negative_jerk_coeff = 31 [default = 300];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u /* 249 & 0xFF */)) {
          set_has_negative_jerk_coeff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &negative_jerk_coeff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acceleration = 40 [default = 4.5];
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 321 & 0xFF */)) {
          set_has_max_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_deceleration = 41 [default = -4.5];
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 329 & 0xFF */)) {
          set_has_max_deceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.StBoundaryConfig st_boundary_config = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_st_boundary_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.DpStSpeedConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.DpStSpeedConfig)
  return false;
#undef DO_
}

void DpStSpeedConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.DpStSpeedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_path_length = 1 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_path_length(), output);
  }

  // optional double total_time = 2 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->total_time(), output);
  }

  // optional int32 matrix_dimension_s = 3 [default = 100];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->matrix_dimension_s(), output);
  }

  // optional int32 matrix_dimension_t = 4 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->matrix_dimension_t(), output);
  }

  // optional double speed_weight = 5 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speed_weight(), output);
  }

  // optional double accel_weight = 6 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->accel_weight(), output);
  }

  // optional double jerk_weight = 7 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->jerk_weight(), output);
  }

  // optional double obstacle_weight = 8 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->obstacle_weight(), output);
  }

  // optional double reference_weight = 9 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->reference_weight(), output);
  }

  // optional double go_down_buffer = 10 [default = 5];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->go_down_buffer(), output);
  }

  // optional double go_up_buffer = 11 [default = 5];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->go_up_buffer(), output);
  }

  // optional double default_obstacle_cost = 12 [default = 10000000000];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->default_obstacle_cost(), output);
  }

  // optional double default_speed_cost = 13 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->default_speed_cost(), output);
  }

  // optional double exceed_speed_penalty = 14 [default = 10];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->exceed_speed_penalty(), output);
  }

  // optional double low_speed_penalty = 15 [default = 2.5];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->low_speed_penalty(), output);
  }

  // optional double keep_clear_low_speed_penalty = 16 [default = 10];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->keep_clear_low_speed_penalty(), output);
  }

  // optional double accel_penalty = 20 [default = 2];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->accel_penalty(), output);
  }

  // optional double decel_penalty = 21 [default = 2];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->decel_penalty(), output);
  }

  // optional double positive_jerk_coeff = 30 [default = 1];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->positive_jerk_coeff(), output);
  }

  // optional double negative_jerk_coeff = 31 [default = 300];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->negative_jerk_coeff(), output);
  }

  // optional double max_acceleration = 40 [default = 4.5];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->max_acceleration(), output);
  }

  // optional double max_deceleration = 41 [default = -4.5];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->max_deceleration(), output);
  }

  // optional .acu.planning.StBoundaryConfig st_boundary_config = 50;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->st_boundary_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.DpStSpeedConfig)
}

::google::protobuf::uint8* DpStSpeedConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.DpStSpeedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_path_length = 1 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_path_length(), target);
  }

  // optional double total_time = 2 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->total_time(), target);
  }

  // optional int32 matrix_dimension_s = 3 [default = 100];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->matrix_dimension_s(), target);
  }

  // optional int32 matrix_dimension_t = 4 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->matrix_dimension_t(), target);
  }

  // optional double speed_weight = 5 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->speed_weight(), target);
  }

  // optional double accel_weight = 6 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->accel_weight(), target);
  }

  // optional double jerk_weight = 7 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->jerk_weight(), target);
  }

  // optional double obstacle_weight = 8 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->obstacle_weight(), target);
  }

  // optional double reference_weight = 9 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->reference_weight(), target);
  }

  // optional double go_down_buffer = 10 [default = 5];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->go_down_buffer(), target);
  }

  // optional double go_up_buffer = 11 [default = 5];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->go_up_buffer(), target);
  }

  // optional double default_obstacle_cost = 12 [default = 10000000000];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->default_obstacle_cost(), target);
  }

  // optional double default_speed_cost = 13 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->default_speed_cost(), target);
  }

  // optional double exceed_speed_penalty = 14 [default = 10];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->exceed_speed_penalty(), target);
  }

  // optional double low_speed_penalty = 15 [default = 2.5];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->low_speed_penalty(), target);
  }

  // optional double keep_clear_low_speed_penalty = 16 [default = 10];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->keep_clear_low_speed_penalty(), target);
  }

  // optional double accel_penalty = 20 [default = 2];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->accel_penalty(), target);
  }

  // optional double decel_penalty = 21 [default = 2];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->decel_penalty(), target);
  }

  // optional double positive_jerk_coeff = 30 [default = 1];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->positive_jerk_coeff(), target);
  }

  // optional double negative_jerk_coeff = 31 [default = 300];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->negative_jerk_coeff(), target);
  }

  // optional double max_acceleration = 40 [default = 4.5];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->max_acceleration(), target);
  }

  // optional double max_deceleration = 41 [default = -4.5];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->max_deceleration(), target);
  }

  // optional .acu.planning.StBoundaryConfig st_boundary_config = 50;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        50, *this->st_boundary_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.DpStSpeedConfig)
  return target;
}

size_t DpStSpeedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.DpStSpeedConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .acu.planning.StBoundaryConfig st_boundary_config = 50;
    if (has_st_boundary_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->st_boundary_config_);
    }

    // optional double speed_weight = 5 [default = 0];
    if (has_speed_weight()) {
      total_size += 1 + 8;
    }

    // optional double reference_weight = 9 [default = 0];
    if (has_reference_weight()) {
      total_size += 1 + 8;
    }

    // optional double total_path_length = 1 [default = 0.1];
    if (has_total_path_length()) {
      total_size += 1 + 8;
    }

    // optional double total_time = 2 [default = 3];
    if (has_total_time()) {
      total_size += 1 + 8;
    }

    // optional int32 matrix_dimension_s = 3 [default = 100];
    if (has_matrix_dimension_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matrix_dimension_s());
    }

    // optional int32 matrix_dimension_t = 4 [default = 10];
    if (has_matrix_dimension_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matrix_dimension_t());
    }

    // optional double accel_weight = 6 [default = 10];
    if (has_accel_weight()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double jerk_weight = 7 [default = 10];
    if (has_jerk_weight()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_weight = 8 [default = 1];
    if (has_obstacle_weight()) {
      total_size += 1 + 8;
    }

    // optional double go_down_buffer = 10 [default = 5];
    if (has_go_down_buffer()) {
      total_size += 1 + 8;
    }

    // optional double go_up_buffer = 11 [default = 5];
    if (has_go_up_buffer()) {
      total_size += 1 + 8;
    }

    // optional double default_obstacle_cost = 12 [default = 10000000000];
    if (has_default_obstacle_cost()) {
      total_size += 1 + 8;
    }

    // optional double default_speed_cost = 13 [default = 1];
    if (has_default_speed_cost()) {
      total_size += 1 + 8;
    }

    // optional double exceed_speed_penalty = 14 [default = 10];
    if (has_exceed_speed_penalty()) {
      total_size += 1 + 8;
    }

    // optional double low_speed_penalty = 15 [default = 2.5];
    if (has_low_speed_penalty()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional double keep_clear_low_speed_penalty = 16 [default = 10];
    if (has_keep_clear_low_speed_penalty()) {
      total_size += 2 + 8;
    }

    // optional double accel_penalty = 20 [default = 2];
    if (has_accel_penalty()) {
      total_size += 2 + 8;
    }

    // optional double decel_penalty = 21 [default = 2];
    if (has_decel_penalty()) {
      total_size += 2 + 8;
    }

    // optional double positive_jerk_coeff = 30 [default = 1];
    if (has_positive_jerk_coeff()) {
      total_size += 2 + 8;
    }

    // optional double negative_jerk_coeff = 31 [default = 300];
    if (has_negative_jerk_coeff()) {
      total_size += 2 + 8;
    }

    // optional double max_acceleration = 40 [default = 4.5];
    if (has_max_acceleration()) {
      total_size += 2 + 8;
    }

    // optional double max_deceleration = 41 [default = -4.5];
    if (has_max_deceleration()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DpStSpeedConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.DpStSpeedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DpStSpeedConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DpStSpeedConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.DpStSpeedConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.DpStSpeedConfig)
    MergeFrom(*source);
  }
}

void DpStSpeedConfig::MergeFrom(const DpStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.DpStSpeedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_st_boundary_config()->::acu::planning::StBoundaryConfig::MergeFrom(from.st_boundary_config());
    }
    if (cached_has_bits & 0x00000002u) {
      speed_weight_ = from.speed_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      reference_weight_ = from.reference_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      total_path_length_ = from.total_path_length_;
    }
    if (cached_has_bits & 0x00000010u) {
      total_time_ = from.total_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      matrix_dimension_s_ = from.matrix_dimension_s_;
    }
    if (cached_has_bits & 0x00000040u) {
      matrix_dimension_t_ = from.matrix_dimension_t_;
    }
    if (cached_has_bits & 0x00000080u) {
      accel_weight_ = from.accel_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      jerk_weight_ = from.jerk_weight_;
    }
    if (cached_has_bits & 0x00000200u) {
      obstacle_weight_ = from.obstacle_weight_;
    }
    if (cached_has_bits & 0x00000400u) {
      go_down_buffer_ = from.go_down_buffer_;
    }
    if (cached_has_bits & 0x00000800u) {
      go_up_buffer_ = from.go_up_buffer_;
    }
    if (cached_has_bits & 0x00001000u) {
      default_obstacle_cost_ = from.default_obstacle_cost_;
    }
    if (cached_has_bits & 0x00002000u) {
      default_speed_cost_ = from.default_speed_cost_;
    }
    if (cached_has_bits & 0x00004000u) {
      exceed_speed_penalty_ = from.exceed_speed_penalty_;
    }
    if (cached_has_bits & 0x00008000u) {
      low_speed_penalty_ = from.low_speed_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      keep_clear_low_speed_penalty_ = from.keep_clear_low_speed_penalty_;
    }
    if (cached_has_bits & 0x00020000u) {
      accel_penalty_ = from.accel_penalty_;
    }
    if (cached_has_bits & 0x00040000u) {
      decel_penalty_ = from.decel_penalty_;
    }
    if (cached_has_bits & 0x00080000u) {
      positive_jerk_coeff_ = from.positive_jerk_coeff_;
    }
    if (cached_has_bits & 0x00100000u) {
      negative_jerk_coeff_ = from.negative_jerk_coeff_;
    }
    if (cached_has_bits & 0x00200000u) {
      max_acceleration_ = from.max_acceleration_;
    }
    if (cached_has_bits & 0x00400000u) {
      max_deceleration_ = from.max_deceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DpStSpeedConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.DpStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DpStSpeedConfig::CopyFrom(const DpStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.DpStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpStSpeedConfig::IsInitialized() const {
  return true;
}

void DpStSpeedConfig::Swap(DpStSpeedConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DpStSpeedConfig::InternalSwap(DpStSpeedConfig* other) {
  using std::swap;
  swap(st_boundary_config_, other->st_boundary_config_);
  swap(speed_weight_, other->speed_weight_);
  swap(reference_weight_, other->reference_weight_);
  swap(total_path_length_, other->total_path_length_);
  swap(total_time_, other->total_time_);
  swap(matrix_dimension_s_, other->matrix_dimension_s_);
  swap(matrix_dimension_t_, other->matrix_dimension_t_);
  swap(accel_weight_, other->accel_weight_);
  swap(jerk_weight_, other->jerk_weight_);
  swap(obstacle_weight_, other->obstacle_weight_);
  swap(go_down_buffer_, other->go_down_buffer_);
  swap(go_up_buffer_, other->go_up_buffer_);
  swap(default_obstacle_cost_, other->default_obstacle_cost_);
  swap(default_speed_cost_, other->default_speed_cost_);
  swap(exceed_speed_penalty_, other->exceed_speed_penalty_);
  swap(low_speed_penalty_, other->low_speed_penalty_);
  swap(keep_clear_low_speed_penalty_, other->keep_clear_low_speed_penalty_);
  swap(accel_penalty_, other->accel_penalty_);
  swap(decel_penalty_, other->decel_penalty_);
  swap(positive_jerk_coeff_, other->positive_jerk_coeff_);
  swap(negative_jerk_coeff_, other->negative_jerk_coeff_);
  swap(max_acceleration_, other->max_acceleration_);
  swap(max_deceleration_, other->max_deceleration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DpStSpeedConfig::GetMetadata() const {
  protobuf_dp_5fst_5fspeed_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dp_5fst_5fspeed_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace acu

// @@protoc_insertion_point(global_scope)
