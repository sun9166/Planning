// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decision.proto

#include "decision.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace acu {
namespace planning {
class PointENUDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PointENU>
      _instance;
} _PointENU_default_instance_;
class TargetLaneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TargetLane>
      _instance;
} _TargetLane_default_instance_;
class ObjectIgnoreDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectIgnore>
      _instance;
} _ObjectIgnore_default_instance_;
class ObjectStopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectStop>
      _instance;
} _ObjectStop_default_instance_;
class ObjectNudgeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectNudge>
      _instance;
} _ObjectNudge_default_instance_;
class ObjectYieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectYield>
      _instance;
} _ObjectYield_default_instance_;
class ObjectFollowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectFollow>
      _instance;
} _ObjectFollow_default_instance_;
class ObjectOvertakeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectOvertake>
      _instance;
} _ObjectOvertake_default_instance_;
class ObjectSidePassDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectSidePass>
      _instance;
} _ObjectSidePass_default_instance_;
class ObjectAvoidDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectAvoid>
      _instance;
} _ObjectAvoid_default_instance_;
class ObjectDecisionTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectDecisionType>
      _instance;
  const ::acu::planning::ObjectIgnore* ignore_;
  const ::acu::planning::ObjectStop* stop_;
  const ::acu::planning::ObjectFollow* follow_;
  const ::acu::planning::ObjectYield* yield_;
  const ::acu::planning::ObjectOvertake* overtake_;
  const ::acu::planning::ObjectNudge* nudge_;
  const ::acu::planning::ObjectAvoid* avoid_;
} _ObjectDecisionType_default_instance_;
class ObjectDecisionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectDecision>
      _instance;
} _ObjectDecision_default_instance_;
class ObjectDecisionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectDecisions>
      _instance;
} _ObjectDecisions_default_instance_;
class MainStopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MainStop>
      _instance;
} _MainStop_default_instance_;
class EmergencyStopHardBrakeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EmergencyStopHardBrake>
      _instance;
} _EmergencyStopHardBrake_default_instance_;
class EmergencyStopCruiseToStopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EmergencyStopCruiseToStop>
      _instance;
} _EmergencyStopCruiseToStop_default_instance_;
class MainEmergencyStopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MainEmergencyStop>
      _instance;
  const ::acu::planning::EmergencyStopHardBrake* hard_brake_;
  const ::acu::planning::EmergencyStopCruiseToStop* cruise_to_stop_;
} _MainEmergencyStop_default_instance_;
class MainCruiseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MainCruise>
      _instance;
} _MainCruise_default_instance_;
class MainChangeLaneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MainChangeLane>
      _instance;
} _MainChangeLane_default_instance_;
class MainMissionCompleteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MainMissionComplete>
      _instance;
} _MainMissionComplete_default_instance_;
class MainNotReadyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MainNotReady>
      _instance;
} _MainNotReady_default_instance_;
class MainParkingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MainParking>
      _instance;
} _MainParking_default_instance_;
class MainDecisionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MainDecision>
      _instance;
  const ::acu::planning::MainCruise* cruise_;
  const ::acu::planning::MainStop* stop_;
  const ::acu::planning::MainEmergencyStop* estop_;
  const ::acu::planning::MainChangeLane* change_lane_;
  const ::acu::planning::MainMissionComplete* mission_complete_;
  const ::acu::planning::MainNotReady* not_ready_;
  const ::acu::planning::MainParking* parking_;
} _MainDecision_default_instance_;
class DecisionResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DecisionResult>
      _instance;
} _DecisionResult_default_instance_;
}  // namespace planning
}  // namespace acu
namespace protobuf_decision_2eproto {
void InitDefaultsPointENUImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_PointENU_default_instance_;
    new (ptr) ::acu::planning::PointENU();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::PointENU::InitAsDefaultInstance();
}

void InitDefaultsPointENU() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPointENUImpl);
}

void InitDefaultsTargetLaneImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_TargetLane_default_instance_;
    new (ptr) ::acu::planning::TargetLane();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::TargetLane::InitAsDefaultInstance();
}

void InitDefaultsTargetLane() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTargetLaneImpl);
}

void InitDefaultsObjectIgnoreImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_ObjectIgnore_default_instance_;
    new (ptr) ::acu::planning::ObjectIgnore();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::ObjectIgnore::InitAsDefaultInstance();
}

void InitDefaultsObjectIgnore() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObjectIgnoreImpl);
}

void InitDefaultsObjectStopImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_decision_2eproto::InitDefaultsPointENU();
  {
    void* ptr = &::acu::planning::_ObjectStop_default_instance_;
    new (ptr) ::acu::planning::ObjectStop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::ObjectStop::InitAsDefaultInstance();
}

void InitDefaultsObjectStop() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObjectStopImpl);
}

void InitDefaultsObjectNudgeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_ObjectNudge_default_instance_;
    new (ptr) ::acu::planning::ObjectNudge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::ObjectNudge::InitAsDefaultInstance();
}

void InitDefaultsObjectNudge() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObjectNudgeImpl);
}

void InitDefaultsObjectYieldImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_decision_2eproto::InitDefaultsPointENU();
  {
    void* ptr = &::acu::planning::_ObjectYield_default_instance_;
    new (ptr) ::acu::planning::ObjectYield();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::ObjectYield::InitAsDefaultInstance();
}

void InitDefaultsObjectYield() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObjectYieldImpl);
}

void InitDefaultsObjectFollowImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_decision_2eproto::InitDefaultsPointENU();
  {
    void* ptr = &::acu::planning::_ObjectFollow_default_instance_;
    new (ptr) ::acu::planning::ObjectFollow();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::ObjectFollow::InitAsDefaultInstance();
}

void InitDefaultsObjectFollow() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObjectFollowImpl);
}

void InitDefaultsObjectOvertakeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_decision_2eproto::InitDefaultsPointENU();
  {
    void* ptr = &::acu::planning::_ObjectOvertake_default_instance_;
    new (ptr) ::acu::planning::ObjectOvertake();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::ObjectOvertake::InitAsDefaultInstance();
}

void InitDefaultsObjectOvertake() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObjectOvertakeImpl);
}

void InitDefaultsObjectSidePassImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_ObjectSidePass_default_instance_;
    new (ptr) ::acu::planning::ObjectSidePass();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::ObjectSidePass::InitAsDefaultInstance();
}

void InitDefaultsObjectSidePass() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObjectSidePassImpl);
}

void InitDefaultsObjectAvoidImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_ObjectAvoid_default_instance_;
    new (ptr) ::acu::planning::ObjectAvoid();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::ObjectAvoid::InitAsDefaultInstance();
}

void InitDefaultsObjectAvoid() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObjectAvoidImpl);
}

void InitDefaultsObjectDecisionTypeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_decision_2eproto::InitDefaultsObjectIgnore();
  protobuf_decision_2eproto::InitDefaultsObjectStop();
  protobuf_decision_2eproto::InitDefaultsObjectFollow();
  protobuf_decision_2eproto::InitDefaultsObjectYield();
  protobuf_decision_2eproto::InitDefaultsObjectOvertake();
  protobuf_decision_2eproto::InitDefaultsObjectNudge();
  protobuf_decision_2eproto::InitDefaultsObjectAvoid();
  {
    void* ptr = &::acu::planning::_ObjectDecisionType_default_instance_;
    new (ptr) ::acu::planning::ObjectDecisionType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::ObjectDecisionType::InitAsDefaultInstance();
}

void InitDefaultsObjectDecisionType() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObjectDecisionTypeImpl);
}

void InitDefaultsObjectDecisionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_decision_2eproto::InitDefaultsObjectDecisionType();
  {
    void* ptr = &::acu::planning::_ObjectDecision_default_instance_;
    new (ptr) ::acu::planning::ObjectDecision();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::ObjectDecision::InitAsDefaultInstance();
}

void InitDefaultsObjectDecision() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObjectDecisionImpl);
}

void InitDefaultsObjectDecisionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_decision_2eproto::InitDefaultsObjectDecision();
  {
    void* ptr = &::acu::planning::_ObjectDecisions_default_instance_;
    new (ptr) ::acu::planning::ObjectDecisions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::ObjectDecisions::InitAsDefaultInstance();
}

void InitDefaultsObjectDecisions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObjectDecisionsImpl);
}

void InitDefaultsMainStopImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_decision_2eproto::InitDefaultsPointENU();
  {
    void* ptr = &::acu::planning::_MainStop_default_instance_;
    new (ptr) ::acu::planning::MainStop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::MainStop::InitAsDefaultInstance();
}

void InitDefaultsMainStop() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMainStopImpl);
}

void InitDefaultsEmergencyStopHardBrakeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_EmergencyStopHardBrake_default_instance_;
    new (ptr) ::acu::planning::EmergencyStopHardBrake();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::EmergencyStopHardBrake::InitAsDefaultInstance();
}

void InitDefaultsEmergencyStopHardBrake() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEmergencyStopHardBrakeImpl);
}

void InitDefaultsEmergencyStopCruiseToStopImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_EmergencyStopCruiseToStop_default_instance_;
    new (ptr) ::acu::planning::EmergencyStopCruiseToStop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::EmergencyStopCruiseToStop::InitAsDefaultInstance();
}

void InitDefaultsEmergencyStopCruiseToStop() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEmergencyStopCruiseToStopImpl);
}

void InitDefaultsMainEmergencyStopImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_decision_2eproto::InitDefaultsEmergencyStopHardBrake();
  protobuf_decision_2eproto::InitDefaultsEmergencyStopCruiseToStop();
  {
    void* ptr = &::acu::planning::_MainEmergencyStop_default_instance_;
    new (ptr) ::acu::planning::MainEmergencyStop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::MainEmergencyStop::InitAsDefaultInstance();
}

void InitDefaultsMainEmergencyStop() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMainEmergencyStopImpl);
}

void InitDefaultsMainCruiseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_MainCruise_default_instance_;
    new (ptr) ::acu::planning::MainCruise();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::MainCruise::InitAsDefaultInstance();
}

void InitDefaultsMainCruise() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMainCruiseImpl);
}

void InitDefaultsMainChangeLaneImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_decision_2eproto::InitDefaultsTargetLane();
  protobuf_decision_2eproto::InitDefaultsMainStop();
  {
    void* ptr = &::acu::planning::_MainChangeLane_default_instance_;
    new (ptr) ::acu::planning::MainChangeLane();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::MainChangeLane::InitAsDefaultInstance();
}

void InitDefaultsMainChangeLane() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMainChangeLaneImpl);
}

void InitDefaultsMainMissionCompleteImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_decision_2eproto::InitDefaultsPointENU();
  {
    void* ptr = &::acu::planning::_MainMissionComplete_default_instance_;
    new (ptr) ::acu::planning::MainMissionComplete();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::MainMissionComplete::InitAsDefaultInstance();
}

void InitDefaultsMainMissionComplete() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMainMissionCompleteImpl);
}

void InitDefaultsMainNotReadyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_MainNotReady_default_instance_;
    new (ptr) ::acu::planning::MainNotReady();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::MainNotReady::InitAsDefaultInstance();
}

void InitDefaultsMainNotReady() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMainNotReadyImpl);
}

void InitDefaultsMainParkingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_MainParking_default_instance_;
    new (ptr) ::acu::planning::MainParking();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::MainParking::InitAsDefaultInstance();
}

void InitDefaultsMainParking() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMainParkingImpl);
}

void InitDefaultsMainDecisionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_decision_2eproto::InitDefaultsMainCruise();
  protobuf_decision_2eproto::InitDefaultsMainStop();
  protobuf_decision_2eproto::InitDefaultsMainEmergencyStop();
  protobuf_decision_2eproto::InitDefaultsMainChangeLane();
  protobuf_decision_2eproto::InitDefaultsMainMissionComplete();
  protobuf_decision_2eproto::InitDefaultsMainNotReady();
  protobuf_decision_2eproto::InitDefaultsMainParking();
  protobuf_decision_2eproto::InitDefaultsTargetLane();
  {
    void* ptr = &::acu::planning::_MainDecision_default_instance_;
    new (ptr) ::acu::planning::MainDecision();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::MainDecision::InitAsDefaultInstance();
}

void InitDefaultsMainDecision() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMainDecisionImpl);
}

void InitDefaultsDecisionResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_decision_2eproto::InitDefaultsMainDecision();
  protobuf_decision_2eproto::InitDefaultsObjectDecisions();
  {
    void* ptr = &::acu::planning::_DecisionResult_default_instance_;
    new (ptr) ::acu::planning::DecisionResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::DecisionResult::InitAsDefaultInstance();
}

void InitDefaultsDecisionResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDecisionResultImpl);
}

::google::protobuf::Metadata file_level_metadata[24];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PointENU, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PointENU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PointENU, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PointENU, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PointENU, z_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TargetLane, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TargetLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TargetLane, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TargetLane, start_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TargetLane, end_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TargetLane, speed_limit_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectIgnore, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectIgnore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectStop, reason_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectStop, distance_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectStop, stop_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectStop, stop_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectStop, wait_for_obstacle_),
  3,
  1,
  0,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectNudge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectNudge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectNudge, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectNudge, distance_l_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectYield, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectYield, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectYield, distance_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectYield, fence_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectYield, fence_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectYield, time_buffer_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectFollow, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectFollow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectFollow, distance_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectFollow, fence_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectFollow, fence_heading_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectOvertake, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectOvertake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectOvertake, distance_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectOvertake, fence_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectOvertake, fence_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectOvertake, time_buffer_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectSidePass, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectSidePass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectSidePass, type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectAvoid, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectAvoid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectDecisionType, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectDecisionType, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectDecisionType, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::acu::planning::ObjectDecisionTypeDefaultTypeInternal, ignore_),
  offsetof(::acu::planning::ObjectDecisionTypeDefaultTypeInternal, stop_),
  offsetof(::acu::planning::ObjectDecisionTypeDefaultTypeInternal, follow_),
  offsetof(::acu::planning::ObjectDecisionTypeDefaultTypeInternal, yield_),
  offsetof(::acu::planning::ObjectDecisionTypeDefaultTypeInternal, overtake_),
  offsetof(::acu::planning::ObjectDecisionTypeDefaultTypeInternal, nudge_),
  offsetof(::acu::planning::ObjectDecisionTypeDefaultTypeInternal, avoid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectDecisionType, object_tag_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectDecision, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectDecision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectDecision, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectDecision, perception_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectDecision, object_decision_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectDecisions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectDecisions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ObjectDecisions, decision_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainStop, reason_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainStop, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainStop, stop_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainStop, stop_heading_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::EmergencyStopHardBrake, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::EmergencyStopHardBrake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::EmergencyStopCruiseToStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::EmergencyStopCruiseToStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainEmergencyStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainEmergencyStop, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainEmergencyStop, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainEmergencyStop, reason_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainEmergencyStop, reason_),
  offsetof(::acu::planning::MainEmergencyStopDefaultTypeInternal, hard_brake_),
  offsetof(::acu::planning::MainEmergencyStopDefaultTypeInternal, cruise_to_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainEmergencyStop, task_),
  1,
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainCruise, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainCruise, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainChangeLane, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainChangeLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainChangeLane, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainChangeLane, default_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainChangeLane, default_lane_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainChangeLane, target_lane_stop_),
  2,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainMissionComplete, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainMissionComplete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainMissionComplete, stop_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainMissionComplete, stop_heading_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainNotReady, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainNotReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainNotReady, reason_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainParking, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainParking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainDecision, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainDecision, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainDecision, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::acu::planning::MainDecisionDefaultTypeInternal, cruise_),
  offsetof(::acu::planning::MainDecisionDefaultTypeInternal, stop_),
  offsetof(::acu::planning::MainDecisionDefaultTypeInternal, estop_),
  offsetof(::acu::planning::MainDecisionDefaultTypeInternal, change_lane_),
  offsetof(::acu::planning::MainDecisionDefaultTypeInternal, mission_complete_),
  offsetof(::acu::planning::MainDecisionDefaultTypeInternal, not_ready_),
  offsetof(::acu::planning::MainDecisionDefaultTypeInternal, parking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainDecision, target_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::MainDecision, task_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DecisionResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DecisionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DecisionResult, main_decision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DecisionResult, object_decision_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::acu::planning::PointENU)},
  { 11, 20, sizeof(::acu::planning::TargetLane)},
  { 24, 29, sizeof(::acu::planning::ObjectIgnore)},
  { 29, 39, sizeof(::acu::planning::ObjectStop)},
  { 44, 51, sizeof(::acu::planning::ObjectNudge)},
  { 53, 62, sizeof(::acu::planning::ObjectYield)},
  { 66, 74, sizeof(::acu::planning::ObjectFollow)},
  { 77, 86, sizeof(::acu::planning::ObjectOvertake)},
  { 90, 96, sizeof(::acu::planning::ObjectSidePass)},
  { 97, 102, sizeof(::acu::planning::ObjectAvoid)},
  { 102, 115, sizeof(::acu::planning::ObjectDecisionType)},
  { 122, 130, sizeof(::acu::planning::ObjectDecision)},
  { 133, 139, sizeof(::acu::planning::ObjectDecisions)},
  { 140, 149, sizeof(::acu::planning::MainStop)},
  { 153, 158, sizeof(::acu::planning::EmergencyStopHardBrake)},
  { 158, 163, sizeof(::acu::planning::EmergencyStopCruiseToStop)},
  { 163, 173, sizeof(::acu::planning::MainEmergencyStop)},
  { 177, 182, sizeof(::acu::planning::MainCruise)},
  { 182, 191, sizeof(::acu::planning::MainChangeLane)},
  { 195, 202, sizeof(::acu::planning::MainMissionComplete)},
  { 204, 210, sizeof(::acu::planning::MainNotReady)},
  { 211, 216, sizeof(::acu::planning::MainParking)},
  { 216, 230, sizeof(::acu::planning::MainDecision)},
  { 238, 245, sizeof(::acu::planning::DecisionResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_PointENU_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_TargetLane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_ObjectIgnore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_ObjectStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_ObjectNudge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_ObjectYield_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_ObjectFollow_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_ObjectOvertake_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_ObjectSidePass_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_ObjectAvoid_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_ObjectDecisionType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_ObjectDecision_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_ObjectDecisions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_MainStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_EmergencyStopHardBrake_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_EmergencyStopCruiseToStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_MainEmergencyStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_MainCruise_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_MainChangeLane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_MainMissionComplete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_MainNotReady_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_MainParking_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_MainDecision_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_DecisionResult_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "decision.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 24);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016decision.proto\022\014acu.planning\"8\n\010PointE"
      "NU\022\016\n\001x\030\001 \001(\001:\003nan\022\016\n\001y\030\002 \001(\001:\003nan\022\014\n\001z\030"
      "\003 \001(\001:\0010\"M\n\nTargetLane\022\n\n\002id\030\001 \001(\t\022\017\n\007st"
      "art_s\030\002 \001(\001\022\r\n\005end_s\030\003 \001(\001\022\023\n\013speed_limi"
      "t\030\004 \001(\001\"\016\n\014ObjectIgnore\"\260\001\n\nObjectStop\0221"
      "\n\013reason_code\030\001 \001(\0162\034.acu.planning.StopR"
      "easonCode\022\022\n\ndistance_s\030\002 \001(\001\022*\n\nstop_po"
      "int\030\003 \001(\0132\026.acu.planning.PointENU\022\024\n\014sto"
      "p_heading\030\004 \001(\001\022\031\n\021wait_for_obstacle\030\005 \003"
      "(\t\"\206\001\n\013ObjectNudge\022,\n\004type\030\001 \001(\0162\036.acu.p"
      "lanning.ObjectNudge.Type\022\022\n\ndistance_l\030\002"
      " \001(\001\"5\n\004Type\022\016\n\nLEFT_NUDGE\020\001\022\017\n\013RIGHT_NU"
      "DGE\020\002\022\014\n\010NO_NUDGE\020\003\"z\n\013ObjectYield\022\022\n\ndi"
      "stance_s\030\001 \001(\001\022+\n\013fence_point\030\002 \001(\0132\026.ac"
      "u.planning.PointENU\022\025\n\rfence_heading\030\003 \001"
      "(\001\022\023\n\013time_buffer\030\004 \001(\001\"f\n\014ObjectFollow\022"
      "\022\n\ndistance_s\030\001 \001(\001\022+\n\013fence_point\030\002 \001(\013"
      "2\026.acu.planning.PointENU\022\025\n\rfence_headin"
      "g\030\003 \001(\001\"}\n\016ObjectOvertake\022\022\n\ndistance_s\030"
      "\001 \001(\001\022+\n\013fence_point\030\002 \001(\0132\026.acu.plannin"
      "g.PointENU\022\025\n\rfence_heading\030\003 \001(\001\022\023\n\013tim"
      "e_buffer\030\004 \001(\001\"^\n\016ObjectSidePass\022/\n\004type"
      "\030\001 \001(\0162!.acu.planning.ObjectSidePass.Typ"
      "e\"\033\n\004Type\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002\"\r\n\013Object"
      "Avoid\"\336\002\n\022ObjectDecisionType\022,\n\006ignore\030\001"
      " \001(\0132\032.acu.planning.ObjectIgnoreH\000\022(\n\004st"
      "op\030\002 \001(\0132\030.acu.planning.ObjectStopH\000\022,\n\006"
      "follow\030\003 \001(\0132\032.acu.planning.ObjectFollow"
      "H\000\022*\n\005yield\030\004 \001(\0132\031.acu.planning.ObjectY"
      "ieldH\000\0220\n\010overtake\030\005 \001(\0132\034.acu.planning."
      "ObjectOvertakeH\000\022*\n\005nudge\030\006 \001(\0132\031.acu.pl"
      "anning.ObjectNudgeH\000\022*\n\005avoid\030\007 \001(\0132\031.ac"
      "u.planning.ObjectAvoidH\000B\014\n\nobject_tag\"n"
      "\n\016ObjectDecision\022\n\n\002id\030\001 \001(\t\022\025\n\rpercepti"
      "on_id\030\002 \001(\005\0229\n\017object_decision\030\003 \003(\0132 .a"
      "cu.planning.ObjectDecisionType\"A\n\017Object"
      "Decisions\022.\n\010decision\030\001 \003(\0132\034.acu.planni"
      "ng.ObjectDecision\"\217\001\n\010MainStop\0221\n\013reason"
      "_code\030\001 \001(\0162\034.acu.planning.StopReasonCod"
      "e\022\016\n\006reason\030\002 \001(\t\022*\n\nstop_point\030\003 \001(\0132\026."
      "acu.planning.PointENU\022\024\n\014stop_heading\030\004 "
      "\001(\001\"\030\n\026EmergencyStopHardBrake\"\033\n\031Emergen"
      "cyStopCruiseToStop\"\226\003\n\021MainEmergencyStop"
      "\022\?\n\013reason_code\030\001 \001(\0162*.acu.planning.Mai"
      "nEmergencyStop.ReasonCode\022\016\n\006reason\030\002 \001("
      "\t\022:\n\nhard_brake\030\003 \001(\0132$.acu.planning.Eme"
      "rgencyStopHardBrakeH\000\022A\n\016cruise_to_stop\030"
      "\004 \001(\0132\'.acu.planning.EmergencyStopCruise"
      "ToStopH\000\"\250\001\n\nReasonCode\022\035\n\031ESTOP_REASON_"
      "INTERNAL_ERR\020\001\022\032\n\026ESTOP_REASON_COLLISION"
      "\020\002\022\035\n\031ESTOP_REASON_ST_FIND_PATH\020\003\022!\n\035EST"
      "OP_REASON_ST_MAKE_DECISION\020\004\022\035\n\031ESTOP_RE"
      "ASON_SENSOR_ERROR\020\005B\006\n\004task\"\014\n\nMainCruis"
      "e\"\363\001\n\016MainChangeLane\022/\n\004type\030\001 \001(\0162!.acu"
      ".planning.MainChangeLane.Type\022.\n\014default"
      "_lane\030\002 \003(\0132\030.acu.planning.TargetLane\0221\n"
      "\021default_lane_stop\030\003 \001(\0132\026.acu.planning."
      "MainStop\0220\n\020target_lane_stop\030\004 \001(\0132\026.acu"
      ".planning.MainStop\"\033\n\004Type\022\010\n\004LEFT\020\001\022\t\n\005"
      "RIGHT\020\002\"W\n\023MainMissionComplete\022*\n\nstop_p"
      "oint\030\001 \001(\0132\026.acu.planning.PointENU\022\024\n\014st"
      "op_heading\030\002 \001(\001\"\036\n\014MainNotReady\022\016\n\006reas"
      "on\030\001 \001(\t\"\r\n\013MainParking\"\246\003\n\014MainDecision"
      "\022*\n\006cruise\030\001 \001(\0132\030.acu.planning.MainCrui"
      "seH\000\022&\n\004stop\030\002 \001(\0132\026.acu.planning.MainSt"
      "opH\000\0220\n\005estop\030\003 \001(\0132\037.acu.planning.MainE"
      "mergencyStopH\000\0227\n\013change_lane\030\004 \001(\0132\034.ac"
      "u.planning.MainChangeLaneB\002\030\001H\000\022=\n\020missi"
      "on_complete\030\006 \001(\0132!.acu.planning.MainMis"
      "sionCompleteH\000\022/\n\tnot_ready\030\007 \001(\0132\032.acu."
      "planning.MainNotReadyH\000\022,\n\007parking\030\010 \001(\013"
      "2\031.acu.planning.MainParkingH\000\0221\n\013target_"
      "lane\030\005 \003(\0132\030.acu.planning.TargetLaneB\002\030\001"
      "B\006\n\004task\"{\n\016DecisionResult\0221\n\rmain_decis"
      "ion\030\001 \001(\0132\032.acu.planning.MainDecision\0226\n"
      "\017object_decision\030\002 \001(\0132\035.acu.planning.Ob"
      "jectDecisions*\325\003\n\016StopReasonCode\022\034\n\030STOP"
      "_REASON_HEAD_VEHICLE\020\001\022\033\n\027STOP_REASON_DE"
      "STINATION\020\002\022\032\n\026STOP_REASON_PEDESTRIAN\020\003\022"
      "\030\n\024STOP_REASON_OBSTACLE\020\004\022\032\n\026STOP_REASON"
      "_PREPARKING\020\005\022\026\n\022STOP_REASON_SIGNAL\020d\022\031\n"
      "\025STOP_REASON_STOP_SIGN\020e\022\032\n\026STOP_REASON_"
      "YIELD_SIGN\020f\022\032\n\026STOP_REASON_CLEAR_ZONE\020g"
      "\022\031\n\025STOP_REASON_CROSSWALK\020h\022\027\n\023STOP_REAS"
      "ON_CREEPER\020i\022\035\n\031STOP_REASON_REFERENCE_EN"
      "D\020j\022\035\n\031STOP_REASON_YELLOW_SIGNAL\020k\022\031\n\025ST"
      "OP_REASON_PULL_OVER\020l\022\037\n\033STOP_REASON_SID"
      "EPASS_SAFETY\020m\022\035\n\031STOP_REASON_MISSION_PO"
      "INT\020n"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3525);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "decision.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_decision_2eproto
namespace acu {
namespace planning {
const ::google::protobuf::EnumDescriptor* ObjectNudge_Type_descriptor() {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_decision_2eproto::file_level_enum_descriptors[0];
}
bool ObjectNudge_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObjectNudge_Type ObjectNudge::LEFT_NUDGE;
const ObjectNudge_Type ObjectNudge::RIGHT_NUDGE;
const ObjectNudge_Type ObjectNudge::NO_NUDGE;
const ObjectNudge_Type ObjectNudge::Type_MIN;
const ObjectNudge_Type ObjectNudge::Type_MAX;
const int ObjectNudge::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ObjectSidePass_Type_descriptor() {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_decision_2eproto::file_level_enum_descriptors[1];
}
bool ObjectSidePass_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObjectSidePass_Type ObjectSidePass::LEFT;
const ObjectSidePass_Type ObjectSidePass::RIGHT;
const ObjectSidePass_Type ObjectSidePass::Type_MIN;
const ObjectSidePass_Type ObjectSidePass::Type_MAX;
const int ObjectSidePass::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MainEmergencyStop_ReasonCode_descriptor() {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_decision_2eproto::file_level_enum_descriptors[2];
}
bool MainEmergencyStop_ReasonCode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_INTERNAL_ERR;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_COLLISION;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_ST_FIND_PATH;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_ST_MAKE_DECISION;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_SENSOR_ERROR;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ReasonCode_MIN;
const MainEmergencyStop_ReasonCode MainEmergencyStop::ReasonCode_MAX;
const int MainEmergencyStop::ReasonCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MainChangeLane_Type_descriptor() {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_decision_2eproto::file_level_enum_descriptors[3];
}
bool MainChangeLane_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MainChangeLane_Type MainChangeLane::LEFT;
const MainChangeLane_Type MainChangeLane::RIGHT;
const MainChangeLane_Type MainChangeLane::Type_MIN;
const MainChangeLane_Type MainChangeLane::Type_MAX;
const int MainChangeLane::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* StopReasonCode_descriptor() {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_decision_2eproto::file_level_enum_descriptors[4];
}
bool StopReasonCode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PointENU::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointENU::kXFieldNumber;
const int PointENU::kYFieldNumber;
const int PointENU::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointENU::PointENU()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsPointENU();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.PointENU)
}
PointENU::PointENU(const PointENU& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&z_, &from.z_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&z_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.PointENU)
}

void PointENU::SharedCtor() {
  _cached_size_ = 0;
  z_ = 0;
  x_ = ::google::protobuf::internal::NaN();
  y_ = ::google::protobuf::internal::NaN();
}

PointENU::~PointENU() {
  // @@protoc_insertion_point(destructor:acu.planning.PointENU)
  SharedDtor();
}

void PointENU::SharedDtor() {
}

void PointENU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointENU::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PointENU& PointENU::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsPointENU();
  return *internal_default_instance();
}

PointENU* PointENU::New(::google::protobuf::Arena* arena) const {
  PointENU* n = new PointENU;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointENU::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.PointENU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    z_ = 0;
    x_ = ::google::protobuf::internal::NaN();
    y_ = ::google::protobuf::internal::NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PointENU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.PointENU)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = nan];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = nan];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.PointENU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.PointENU)
  return false;
#undef DO_
}

void PointENU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.PointENU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = nan];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.PointENU)
}

::google::protobuf::uint8* PointENU::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.PointENU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = nan];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.PointENU)
  return target;
}

size_t PointENU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.PointENU)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double x = 1 [default = nan];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = nan];
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointENU::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.PointENU)
  GOOGLE_DCHECK_NE(&from, this);
  const PointENU* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointENU>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.PointENU)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.PointENU)
    MergeFrom(*source);
  }
}

void PointENU::MergeFrom(const PointENU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.PointENU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PointENU::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.PointENU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointENU::CopyFrom(const PointENU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.PointENU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointENU::IsInitialized() const {
  return true;
}

void PointENU::Swap(PointENU* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointENU::InternalSwap(PointENU* other) {
  using std::swap;
  swap(z_, other->z_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointENU::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TargetLane::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetLane::kIdFieldNumber;
const int TargetLane::kStartSFieldNumber;
const int TargetLane::kEndSFieldNumber;
const int TargetLane::kSpeedLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetLane::TargetLane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsTargetLane();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.TargetLane)
}
TargetLane::TargetLane(const TargetLane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&start_s_, &from.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_limit_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(speed_limit_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.TargetLane)
}

void TargetLane::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_limit_) -
      reinterpret_cast<char*>(&start_s_)) + sizeof(speed_limit_));
}

TargetLane::~TargetLane() {
  // @@protoc_insertion_point(destructor:acu.planning.TargetLane)
  SharedDtor();
}

void TargetLane::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TargetLane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetLane::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TargetLane& TargetLane::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsTargetLane();
  return *internal_default_instance();
}

TargetLane* TargetLane::New(::google::protobuf::Arena* arena) const {
  TargetLane* n = new TargetLane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetLane::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.TargetLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&start_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_limit_) -
        reinterpret_cast<char*>(&start_s_)) + sizeof(speed_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TargetLane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.TargetLane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acu.planning.TargetLane.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double start_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_start_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double end_s = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_end_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.TargetLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.TargetLane)
  return false;
#undef DO_
}

void TargetLane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.TargetLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.planning.TargetLane.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double start_s = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->start_s(), output);
  }

  // optional double end_s = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->end_s(), output);
  }

  // optional double speed_limit = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.TargetLane)
}

::google::protobuf::uint8* TargetLane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.TargetLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.planning.TargetLane.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double start_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->start_s(), target);
  }

  // optional double end_s = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->end_s(), target);
  }

  // optional double speed_limit = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.TargetLane)
  return target;
}

size_t TargetLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.TargetLane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double start_s = 2;
    if (has_start_s()) {
      total_size += 1 + 8;
    }

    // optional double end_s = 3;
    if (has_end_s()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 4;
    if (has_speed_limit()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetLane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.TargetLane)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetLane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetLane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.TargetLane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.TargetLane)
    MergeFrom(*source);
  }
}

void TargetLane::MergeFrom(const TargetLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.TargetLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      start_s_ = from.start_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_s_ = from.end_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_limit_ = from.speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TargetLane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.TargetLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetLane::CopyFrom(const TargetLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.TargetLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetLane::IsInitialized() const {
  return true;
}

void TargetLane::Swap(TargetLane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetLane::InternalSwap(TargetLane* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(start_s_, other->start_s_);
  swap(end_s_, other->end_s_);
  swap(speed_limit_, other->speed_limit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetLane::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObjectIgnore::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectIgnore::ObjectIgnore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsObjectIgnore();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.ObjectIgnore)
}
ObjectIgnore::ObjectIgnore(const ObjectIgnore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:acu.planning.ObjectIgnore)
}

void ObjectIgnore::SharedCtor() {
  _cached_size_ = 0;
}

ObjectIgnore::~ObjectIgnore() {
  // @@protoc_insertion_point(destructor:acu.planning.ObjectIgnore)
  SharedDtor();
}

void ObjectIgnore::SharedDtor() {
}

void ObjectIgnore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectIgnore::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectIgnore& ObjectIgnore::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsObjectIgnore();
  return *internal_default_instance();
}

ObjectIgnore* ObjectIgnore::New(::google::protobuf::Arena* arena) const {
  ObjectIgnore* n = new ObjectIgnore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectIgnore::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.ObjectIgnore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectIgnore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.ObjectIgnore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.ObjectIgnore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.ObjectIgnore)
  return false;
#undef DO_
}

void ObjectIgnore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.ObjectIgnore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.ObjectIgnore)
}

::google::protobuf::uint8* ObjectIgnore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.ObjectIgnore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.ObjectIgnore)
  return target;
}

size_t ObjectIgnore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.ObjectIgnore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectIgnore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.ObjectIgnore)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectIgnore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectIgnore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.ObjectIgnore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.ObjectIgnore)
    MergeFrom(*source);
  }
}

void ObjectIgnore::MergeFrom(const ObjectIgnore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.ObjectIgnore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ObjectIgnore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.ObjectIgnore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectIgnore::CopyFrom(const ObjectIgnore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.ObjectIgnore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectIgnore::IsInitialized() const {
  return true;
}

void ObjectIgnore::Swap(ObjectIgnore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectIgnore::InternalSwap(ObjectIgnore* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectIgnore::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObjectStop::InitAsDefaultInstance() {
  ::acu::planning::_ObjectStop_default_instance_._instance.get_mutable()->stop_point_ = const_cast< ::acu::planning::PointENU*>(
      ::acu::planning::PointENU::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectStop::kReasonCodeFieldNumber;
const int ObjectStop::kDistanceSFieldNumber;
const int ObjectStop::kStopPointFieldNumber;
const int ObjectStop::kStopHeadingFieldNumber;
const int ObjectStop::kWaitForObstacleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectStop::ObjectStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsObjectStop();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.ObjectStop)
}
ObjectStop::ObjectStop(const ObjectStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      wait_for_obstacle_(from.wait_for_obstacle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stop_point()) {
    stop_point_ = new ::acu::planning::PointENU(*from.stop_point_);
  } else {
    stop_point_ = NULL;
  }
  ::memcpy(&distance_s_, &from.distance_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_code_) -
    reinterpret_cast<char*>(&distance_s_)) + sizeof(reason_code_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.ObjectStop)
}

void ObjectStop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stop_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_heading_) -
      reinterpret_cast<char*>(&stop_point_)) + sizeof(stop_heading_));
  reason_code_ = 1;
}

ObjectStop::~ObjectStop() {
  // @@protoc_insertion_point(destructor:acu.planning.ObjectStop)
  SharedDtor();
}

void ObjectStop::SharedDtor() {
  if (this != internal_default_instance()) delete stop_point_;
}

void ObjectStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectStop::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectStop& ObjectStop::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsObjectStop();
  return *internal_default_instance();
}

ObjectStop* ObjectStop::New(::google::protobuf::Arena* arena) const {
  ObjectStop* n = new ObjectStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectStop::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.ObjectStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wait_for_obstacle_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stop_point_ != NULL);
    stop_point_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&distance_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stop_heading_) -
        reinterpret_cast<char*>(&distance_s_)) + sizeof(stop_heading_));
    reason_code_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.ObjectStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.planning.StopReasonCode reason_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::planning::StopReasonCode_IsValid(value)) {
            set_reason_code(static_cast< ::acu::planning::StopReasonCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_distance_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.PointENU stop_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_heading = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_stop_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string wait_for_obstacle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_wait_for_obstacle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wait_for_obstacle(this->wait_for_obstacle_size() - 1).data(),
            static_cast<int>(this->wait_for_obstacle(this->wait_for_obstacle_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acu.planning.ObjectStop.wait_for_obstacle");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.ObjectStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.ObjectStop)
  return false;
#undef DO_
}

void ObjectStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.ObjectStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.StopReasonCode reason_code = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason_code(), output);
  }

  // optional double distance_s = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->distance_s(), output);
  }

  // optional .acu.planning.PointENU stop_point = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stop_point_, output);
  }

  // optional double stop_heading = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->stop_heading(), output);
  }

  // repeated string wait_for_obstacle = 5;
  for (int i = 0, n = this->wait_for_obstacle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wait_for_obstacle(i).data(), static_cast<int>(this->wait_for_obstacle(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.planning.ObjectStop.wait_for_obstacle");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->wait_for_obstacle(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.ObjectStop)
}

::google::protobuf::uint8* ObjectStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.ObjectStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.StopReasonCode reason_code = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason_code(), target);
  }

  // optional double distance_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->distance_s(), target);
  }

  // optional .acu.planning.PointENU stop_point = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->stop_point_, deterministic, target);
  }

  // optional double stop_heading = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->stop_heading(), target);
  }

  // repeated string wait_for_obstacle = 5;
  for (int i = 0, n = this->wait_for_obstacle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wait_for_obstacle(i).data(), static_cast<int>(this->wait_for_obstacle(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.planning.ObjectStop.wait_for_obstacle");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->wait_for_obstacle(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.ObjectStop)
  return target;
}

size_t ObjectStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.ObjectStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string wait_for_obstacle = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->wait_for_obstacle_size());
  for (int i = 0, n = this->wait_for_obstacle_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->wait_for_obstacle(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .acu.planning.PointENU stop_point = 3;
    if (has_stop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->stop_point_);
    }

    // optional double distance_s = 2;
    if (has_distance_s()) {
      total_size += 1 + 8;
    }

    // optional double stop_heading = 4;
    if (has_stop_heading()) {
      total_size += 1 + 8;
    }

    // optional .acu.planning.StopReasonCode reason_code = 1;
    if (has_reason_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.ObjectStop)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.ObjectStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.ObjectStop)
    MergeFrom(*source);
  }
}

void ObjectStop::MergeFrom(const ObjectStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.ObjectStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wait_for_obstacle_.MergeFrom(from.wait_for_obstacle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stop_point()->::acu::planning::PointENU::MergeFrom(from.stop_point());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_s_ = from.distance_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      stop_heading_ = from.stop_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      reason_code_ = from.reason_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.ObjectStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectStop::CopyFrom(const ObjectStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.ObjectStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectStop::IsInitialized() const {
  return true;
}

void ObjectStop::Swap(ObjectStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectStop::InternalSwap(ObjectStop* other) {
  using std::swap;
  wait_for_obstacle_.InternalSwap(&other->wait_for_obstacle_);
  swap(stop_point_, other->stop_point_);
  swap(distance_s_, other->distance_s_);
  swap(stop_heading_, other->stop_heading_);
  swap(reason_code_, other->reason_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectStop::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObjectNudge::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectNudge::kTypeFieldNumber;
const int ObjectNudge::kDistanceLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectNudge::ObjectNudge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsObjectNudge();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.ObjectNudge)
}
ObjectNudge::ObjectNudge(const ObjectNudge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&distance_l_, &from.distance_l_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&distance_l_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.ObjectNudge)
}

void ObjectNudge::SharedCtor() {
  _cached_size_ = 0;
  distance_l_ = 0;
  type_ = 1;
}

ObjectNudge::~ObjectNudge() {
  // @@protoc_insertion_point(destructor:acu.planning.ObjectNudge)
  SharedDtor();
}

void ObjectNudge::SharedDtor() {
}

void ObjectNudge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectNudge::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectNudge& ObjectNudge::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsObjectNudge();
  return *internal_default_instance();
}

ObjectNudge* ObjectNudge::New(::google::protobuf::Arena* arena) const {
  ObjectNudge* n = new ObjectNudge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectNudge::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.ObjectNudge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    distance_l_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectNudge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.ObjectNudge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.planning.ObjectNudge.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::planning::ObjectNudge_Type_IsValid(value)) {
            set_type(static_cast< ::acu::planning::ObjectNudge_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance_l = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_distance_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.ObjectNudge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.ObjectNudge)
  return false;
#undef DO_
}

void ObjectNudge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.ObjectNudge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.ObjectNudge.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional double distance_l = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->distance_l(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.ObjectNudge)
}

::google::protobuf::uint8* ObjectNudge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.ObjectNudge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.ObjectNudge.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional double distance_l = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->distance_l(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.ObjectNudge)
  return target;
}

size_t ObjectNudge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.ObjectNudge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double distance_l = 2;
    if (has_distance_l()) {
      total_size += 1 + 8;
    }

    // optional .acu.planning.ObjectNudge.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectNudge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.ObjectNudge)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectNudge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectNudge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.ObjectNudge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.ObjectNudge)
    MergeFrom(*source);
  }
}

void ObjectNudge::MergeFrom(const ObjectNudge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.ObjectNudge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      distance_l_ = from.distance_l_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectNudge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.ObjectNudge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectNudge::CopyFrom(const ObjectNudge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.ObjectNudge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectNudge::IsInitialized() const {
  return true;
}

void ObjectNudge::Swap(ObjectNudge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectNudge::InternalSwap(ObjectNudge* other) {
  using std::swap;
  swap(distance_l_, other->distance_l_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectNudge::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObjectYield::InitAsDefaultInstance() {
  ::acu::planning::_ObjectYield_default_instance_._instance.get_mutable()->fence_point_ = const_cast< ::acu::planning::PointENU*>(
      ::acu::planning::PointENU::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectYield::kDistanceSFieldNumber;
const int ObjectYield::kFencePointFieldNumber;
const int ObjectYield::kFenceHeadingFieldNumber;
const int ObjectYield::kTimeBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectYield::ObjectYield()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsObjectYield();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.ObjectYield)
}
ObjectYield::ObjectYield(const ObjectYield& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fence_point()) {
    fence_point_ = new ::acu::planning::PointENU(*from.fence_point_);
  } else {
    fence_point_ = NULL;
  }
  ::memcpy(&distance_s_, &from.distance_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_buffer_) -
    reinterpret_cast<char*>(&distance_s_)) + sizeof(time_buffer_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.ObjectYield)
}

void ObjectYield::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fence_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_buffer_) -
      reinterpret_cast<char*>(&fence_point_)) + sizeof(time_buffer_));
}

ObjectYield::~ObjectYield() {
  // @@protoc_insertion_point(destructor:acu.planning.ObjectYield)
  SharedDtor();
}

void ObjectYield::SharedDtor() {
  if (this != internal_default_instance()) delete fence_point_;
}

void ObjectYield::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectYield::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectYield& ObjectYield::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsObjectYield();
  return *internal_default_instance();
}

ObjectYield* ObjectYield::New(::google::protobuf::Arena* arena) const {
  ObjectYield* n = new ObjectYield;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectYield::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.ObjectYield)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(fence_point_ != NULL);
    fence_point_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&distance_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_buffer_) -
        reinterpret_cast<char*>(&distance_s_)) + sizeof(time_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectYield::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.ObjectYield)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double distance_s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_distance_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.PointENU fence_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fence_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double fence_heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_fence_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fence_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time_buffer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_time_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.ObjectYield)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.ObjectYield)
  return false;
#undef DO_
}

void ObjectYield::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.ObjectYield)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance_s = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->distance_s(), output);
  }

  // optional .acu.planning.PointENU fence_point = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fence_point_, output);
  }

  // optional double fence_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fence_heading(), output);
  }

  // optional double time_buffer = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->time_buffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.ObjectYield)
}

::google::protobuf::uint8* ObjectYield::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.ObjectYield)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance_s = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->distance_s(), target);
  }

  // optional .acu.planning.PointENU fence_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->fence_point_, deterministic, target);
  }

  // optional double fence_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->fence_heading(), target);
  }

  // optional double time_buffer = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->time_buffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.ObjectYield)
  return target;
}

size_t ObjectYield::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.ObjectYield)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .acu.planning.PointENU fence_point = 2;
    if (has_fence_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->fence_point_);
    }

    // optional double distance_s = 1;
    if (has_distance_s()) {
      total_size += 1 + 8;
    }

    // optional double fence_heading = 3;
    if (has_fence_heading()) {
      total_size += 1 + 8;
    }

    // optional double time_buffer = 4;
    if (has_time_buffer()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectYield::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.ObjectYield)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectYield* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectYield>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.ObjectYield)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.ObjectYield)
    MergeFrom(*source);
  }
}

void ObjectYield::MergeFrom(const ObjectYield& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.ObjectYield)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fence_point()->::acu::planning::PointENU::MergeFrom(from.fence_point());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_s_ = from.distance_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      fence_heading_ = from.fence_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_buffer_ = from.time_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectYield::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.ObjectYield)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectYield::CopyFrom(const ObjectYield& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.ObjectYield)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectYield::IsInitialized() const {
  return true;
}

void ObjectYield::Swap(ObjectYield* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectYield::InternalSwap(ObjectYield* other) {
  using std::swap;
  swap(fence_point_, other->fence_point_);
  swap(distance_s_, other->distance_s_);
  swap(fence_heading_, other->fence_heading_);
  swap(time_buffer_, other->time_buffer_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectYield::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObjectFollow::InitAsDefaultInstance() {
  ::acu::planning::_ObjectFollow_default_instance_._instance.get_mutable()->fence_point_ = const_cast< ::acu::planning::PointENU*>(
      ::acu::planning::PointENU::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectFollow::kDistanceSFieldNumber;
const int ObjectFollow::kFencePointFieldNumber;
const int ObjectFollow::kFenceHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectFollow::ObjectFollow()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsObjectFollow();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.ObjectFollow)
}
ObjectFollow::ObjectFollow(const ObjectFollow& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fence_point()) {
    fence_point_ = new ::acu::planning::PointENU(*from.fence_point_);
  } else {
    fence_point_ = NULL;
  }
  ::memcpy(&distance_s_, &from.distance_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&fence_heading_) -
    reinterpret_cast<char*>(&distance_s_)) + sizeof(fence_heading_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.ObjectFollow)
}

void ObjectFollow::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fence_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fence_heading_) -
      reinterpret_cast<char*>(&fence_point_)) + sizeof(fence_heading_));
}

ObjectFollow::~ObjectFollow() {
  // @@protoc_insertion_point(destructor:acu.planning.ObjectFollow)
  SharedDtor();
}

void ObjectFollow::SharedDtor() {
  if (this != internal_default_instance()) delete fence_point_;
}

void ObjectFollow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectFollow::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectFollow& ObjectFollow::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsObjectFollow();
  return *internal_default_instance();
}

ObjectFollow* ObjectFollow::New(::google::protobuf::Arena* arena) const {
  ObjectFollow* n = new ObjectFollow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectFollow::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.ObjectFollow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(fence_point_ != NULL);
    fence_point_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&distance_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fence_heading_) -
        reinterpret_cast<char*>(&distance_s_)) + sizeof(fence_heading_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectFollow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.ObjectFollow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double distance_s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_distance_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.PointENU fence_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fence_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double fence_heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_fence_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fence_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.ObjectFollow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.ObjectFollow)
  return false;
#undef DO_
}

void ObjectFollow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.ObjectFollow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance_s = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->distance_s(), output);
  }

  // optional .acu.planning.PointENU fence_point = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fence_point_, output);
  }

  // optional double fence_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fence_heading(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.ObjectFollow)
}

::google::protobuf::uint8* ObjectFollow::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.ObjectFollow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance_s = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->distance_s(), target);
  }

  // optional .acu.planning.PointENU fence_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->fence_point_, deterministic, target);
  }

  // optional double fence_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->fence_heading(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.ObjectFollow)
  return target;
}

size_t ObjectFollow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.ObjectFollow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .acu.planning.PointENU fence_point = 2;
    if (has_fence_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->fence_point_);
    }

    // optional double distance_s = 1;
    if (has_distance_s()) {
      total_size += 1 + 8;
    }

    // optional double fence_heading = 3;
    if (has_fence_heading()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectFollow::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.ObjectFollow)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectFollow* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectFollow>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.ObjectFollow)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.ObjectFollow)
    MergeFrom(*source);
  }
}

void ObjectFollow::MergeFrom(const ObjectFollow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.ObjectFollow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fence_point()->::acu::planning::PointENU::MergeFrom(from.fence_point());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_s_ = from.distance_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      fence_heading_ = from.fence_heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectFollow::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.ObjectFollow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectFollow::CopyFrom(const ObjectFollow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.ObjectFollow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectFollow::IsInitialized() const {
  return true;
}

void ObjectFollow::Swap(ObjectFollow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectFollow::InternalSwap(ObjectFollow* other) {
  using std::swap;
  swap(fence_point_, other->fence_point_);
  swap(distance_s_, other->distance_s_);
  swap(fence_heading_, other->fence_heading_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectFollow::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObjectOvertake::InitAsDefaultInstance() {
  ::acu::planning::_ObjectOvertake_default_instance_._instance.get_mutable()->fence_point_ = const_cast< ::acu::planning::PointENU*>(
      ::acu::planning::PointENU::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectOvertake::kDistanceSFieldNumber;
const int ObjectOvertake::kFencePointFieldNumber;
const int ObjectOvertake::kFenceHeadingFieldNumber;
const int ObjectOvertake::kTimeBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectOvertake::ObjectOvertake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsObjectOvertake();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.ObjectOvertake)
}
ObjectOvertake::ObjectOvertake(const ObjectOvertake& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fence_point()) {
    fence_point_ = new ::acu::planning::PointENU(*from.fence_point_);
  } else {
    fence_point_ = NULL;
  }
  ::memcpy(&distance_s_, &from.distance_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_buffer_) -
    reinterpret_cast<char*>(&distance_s_)) + sizeof(time_buffer_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.ObjectOvertake)
}

void ObjectOvertake::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fence_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_buffer_) -
      reinterpret_cast<char*>(&fence_point_)) + sizeof(time_buffer_));
}

ObjectOvertake::~ObjectOvertake() {
  // @@protoc_insertion_point(destructor:acu.planning.ObjectOvertake)
  SharedDtor();
}

void ObjectOvertake::SharedDtor() {
  if (this != internal_default_instance()) delete fence_point_;
}

void ObjectOvertake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectOvertake::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectOvertake& ObjectOvertake::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsObjectOvertake();
  return *internal_default_instance();
}

ObjectOvertake* ObjectOvertake::New(::google::protobuf::Arena* arena) const {
  ObjectOvertake* n = new ObjectOvertake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectOvertake::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.ObjectOvertake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(fence_point_ != NULL);
    fence_point_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&distance_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_buffer_) -
        reinterpret_cast<char*>(&distance_s_)) + sizeof(time_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectOvertake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.ObjectOvertake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double distance_s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_distance_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.PointENU fence_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fence_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double fence_heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_fence_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fence_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time_buffer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_time_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.ObjectOvertake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.ObjectOvertake)
  return false;
#undef DO_
}

void ObjectOvertake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.ObjectOvertake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance_s = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->distance_s(), output);
  }

  // optional .acu.planning.PointENU fence_point = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fence_point_, output);
  }

  // optional double fence_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->fence_heading(), output);
  }

  // optional double time_buffer = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->time_buffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.ObjectOvertake)
}

::google::protobuf::uint8* ObjectOvertake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.ObjectOvertake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance_s = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->distance_s(), target);
  }

  // optional .acu.planning.PointENU fence_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->fence_point_, deterministic, target);
  }

  // optional double fence_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->fence_heading(), target);
  }

  // optional double time_buffer = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->time_buffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.ObjectOvertake)
  return target;
}

size_t ObjectOvertake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.ObjectOvertake)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .acu.planning.PointENU fence_point = 2;
    if (has_fence_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->fence_point_);
    }

    // optional double distance_s = 1;
    if (has_distance_s()) {
      total_size += 1 + 8;
    }

    // optional double fence_heading = 3;
    if (has_fence_heading()) {
      total_size += 1 + 8;
    }

    // optional double time_buffer = 4;
    if (has_time_buffer()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectOvertake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.ObjectOvertake)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectOvertake* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectOvertake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.ObjectOvertake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.ObjectOvertake)
    MergeFrom(*source);
  }
}

void ObjectOvertake::MergeFrom(const ObjectOvertake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.ObjectOvertake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fence_point()->::acu::planning::PointENU::MergeFrom(from.fence_point());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_s_ = from.distance_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      fence_heading_ = from.fence_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_buffer_ = from.time_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectOvertake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.ObjectOvertake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectOvertake::CopyFrom(const ObjectOvertake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.ObjectOvertake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectOvertake::IsInitialized() const {
  return true;
}

void ObjectOvertake::Swap(ObjectOvertake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectOvertake::InternalSwap(ObjectOvertake* other) {
  using std::swap;
  swap(fence_point_, other->fence_point_);
  swap(distance_s_, other->distance_s_);
  swap(fence_heading_, other->fence_heading_);
  swap(time_buffer_, other->time_buffer_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectOvertake::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObjectSidePass::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectSidePass::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectSidePass::ObjectSidePass()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsObjectSidePass();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.ObjectSidePass)
}
ObjectSidePass::ObjectSidePass(const ObjectSidePass& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:acu.planning.ObjectSidePass)
}

void ObjectSidePass::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
}

ObjectSidePass::~ObjectSidePass() {
  // @@protoc_insertion_point(destructor:acu.planning.ObjectSidePass)
  SharedDtor();
}

void ObjectSidePass::SharedDtor() {
}

void ObjectSidePass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectSidePass::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectSidePass& ObjectSidePass::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsObjectSidePass();
  return *internal_default_instance();
}

ObjectSidePass* ObjectSidePass::New(::google::protobuf::Arena* arena) const {
  ObjectSidePass* n = new ObjectSidePass;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectSidePass::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.ObjectSidePass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectSidePass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.ObjectSidePass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.planning.ObjectSidePass.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::planning::ObjectSidePass_Type_IsValid(value)) {
            set_type(static_cast< ::acu::planning::ObjectSidePass_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.ObjectSidePass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.ObjectSidePass)
  return false;
#undef DO_
}

void ObjectSidePass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.ObjectSidePass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.ObjectSidePass.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.ObjectSidePass)
}

::google::protobuf::uint8* ObjectSidePass::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.ObjectSidePass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.ObjectSidePass.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.ObjectSidePass)
  return target;
}

size_t ObjectSidePass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.ObjectSidePass)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .acu.planning.ObjectSidePass.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectSidePass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.ObjectSidePass)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectSidePass* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectSidePass>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.ObjectSidePass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.ObjectSidePass)
    MergeFrom(*source);
  }
}

void ObjectSidePass::MergeFrom(const ObjectSidePass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.ObjectSidePass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
}

void ObjectSidePass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.ObjectSidePass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectSidePass::CopyFrom(const ObjectSidePass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.ObjectSidePass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectSidePass::IsInitialized() const {
  return true;
}

void ObjectSidePass::Swap(ObjectSidePass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectSidePass::InternalSwap(ObjectSidePass* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectSidePass::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObjectAvoid::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectAvoid::ObjectAvoid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsObjectAvoid();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.ObjectAvoid)
}
ObjectAvoid::ObjectAvoid(const ObjectAvoid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:acu.planning.ObjectAvoid)
}

void ObjectAvoid::SharedCtor() {
  _cached_size_ = 0;
}

ObjectAvoid::~ObjectAvoid() {
  // @@protoc_insertion_point(destructor:acu.planning.ObjectAvoid)
  SharedDtor();
}

void ObjectAvoid::SharedDtor() {
}

void ObjectAvoid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectAvoid::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectAvoid& ObjectAvoid::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsObjectAvoid();
  return *internal_default_instance();
}

ObjectAvoid* ObjectAvoid::New(::google::protobuf::Arena* arena) const {
  ObjectAvoid* n = new ObjectAvoid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectAvoid::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.ObjectAvoid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectAvoid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.ObjectAvoid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.ObjectAvoid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.ObjectAvoid)
  return false;
#undef DO_
}

void ObjectAvoid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.ObjectAvoid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.ObjectAvoid)
}

::google::protobuf::uint8* ObjectAvoid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.ObjectAvoid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.ObjectAvoid)
  return target;
}

size_t ObjectAvoid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.ObjectAvoid)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectAvoid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.ObjectAvoid)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectAvoid* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectAvoid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.ObjectAvoid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.ObjectAvoid)
    MergeFrom(*source);
  }
}

void ObjectAvoid::MergeFrom(const ObjectAvoid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.ObjectAvoid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ObjectAvoid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.ObjectAvoid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAvoid::CopyFrom(const ObjectAvoid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.ObjectAvoid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAvoid::IsInitialized() const {
  return true;
}

void ObjectAvoid::Swap(ObjectAvoid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectAvoid::InternalSwap(ObjectAvoid* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectAvoid::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObjectDecisionType::InitAsDefaultInstance() {
  ::acu::planning::_ObjectDecisionType_default_instance_.ignore_ = const_cast< ::acu::planning::ObjectIgnore*>(
      ::acu::planning::ObjectIgnore::internal_default_instance());
  ::acu::planning::_ObjectDecisionType_default_instance_.stop_ = const_cast< ::acu::planning::ObjectStop*>(
      ::acu::planning::ObjectStop::internal_default_instance());
  ::acu::planning::_ObjectDecisionType_default_instance_.follow_ = const_cast< ::acu::planning::ObjectFollow*>(
      ::acu::planning::ObjectFollow::internal_default_instance());
  ::acu::planning::_ObjectDecisionType_default_instance_.yield_ = const_cast< ::acu::planning::ObjectYield*>(
      ::acu::planning::ObjectYield::internal_default_instance());
  ::acu::planning::_ObjectDecisionType_default_instance_.overtake_ = const_cast< ::acu::planning::ObjectOvertake*>(
      ::acu::planning::ObjectOvertake::internal_default_instance());
  ::acu::planning::_ObjectDecisionType_default_instance_.nudge_ = const_cast< ::acu::planning::ObjectNudge*>(
      ::acu::planning::ObjectNudge::internal_default_instance());
  ::acu::planning::_ObjectDecisionType_default_instance_.avoid_ = const_cast< ::acu::planning::ObjectAvoid*>(
      ::acu::planning::ObjectAvoid::internal_default_instance());
}
void ObjectDecisionType::set_allocated_ignore(::acu::planning::ObjectIgnore* ignore) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_object_tag();
  if (ignore) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ignore = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ignore, submessage_arena);
    }
    set_has_ignore();
    object_tag_.ignore_ = ignore;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.ObjectDecisionType.ignore)
}
void ObjectDecisionType::set_allocated_stop(::acu::planning::ObjectStop* stop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_object_tag();
  if (stop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stop, submessage_arena);
    }
    set_has_stop();
    object_tag_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.ObjectDecisionType.stop)
}
void ObjectDecisionType::set_allocated_follow(::acu::planning::ObjectFollow* follow) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_object_tag();
  if (follow) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      follow = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, follow, submessage_arena);
    }
    set_has_follow();
    object_tag_.follow_ = follow;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.ObjectDecisionType.follow)
}
void ObjectDecisionType::set_allocated_yield(::acu::planning::ObjectYield* yield) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_object_tag();
  if (yield) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      yield = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, yield, submessage_arena);
    }
    set_has_yield();
    object_tag_.yield_ = yield;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.ObjectDecisionType.yield)
}
void ObjectDecisionType::set_allocated_overtake(::acu::planning::ObjectOvertake* overtake) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_object_tag();
  if (overtake) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      overtake = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, overtake, submessage_arena);
    }
    set_has_overtake();
    object_tag_.overtake_ = overtake;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.ObjectDecisionType.overtake)
}
void ObjectDecisionType::set_allocated_nudge(::acu::planning::ObjectNudge* nudge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_object_tag();
  if (nudge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nudge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nudge, submessage_arena);
    }
    set_has_nudge();
    object_tag_.nudge_ = nudge;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.ObjectDecisionType.nudge)
}
void ObjectDecisionType::set_allocated_avoid(::acu::planning::ObjectAvoid* avoid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_object_tag();
  if (avoid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      avoid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, avoid, submessage_arena);
    }
    set_has_avoid();
    object_tag_.avoid_ = avoid;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.ObjectDecisionType.avoid)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectDecisionType::kIgnoreFieldNumber;
const int ObjectDecisionType::kStopFieldNumber;
const int ObjectDecisionType::kFollowFieldNumber;
const int ObjectDecisionType::kYieldFieldNumber;
const int ObjectDecisionType::kOvertakeFieldNumber;
const int ObjectDecisionType::kNudgeFieldNumber;
const int ObjectDecisionType::kAvoidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectDecisionType::ObjectDecisionType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsObjectDecisionType();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.ObjectDecisionType)
}
ObjectDecisionType::ObjectDecisionType(const ObjectDecisionType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_object_tag();
  switch (from.object_tag_case()) {
    case kIgnore: {
      mutable_ignore()->::acu::planning::ObjectIgnore::MergeFrom(from.ignore());
      break;
    }
    case kStop: {
      mutable_stop()->::acu::planning::ObjectStop::MergeFrom(from.stop());
      break;
    }
    case kFollow: {
      mutable_follow()->::acu::planning::ObjectFollow::MergeFrom(from.follow());
      break;
    }
    case kYield: {
      mutable_yield()->::acu::planning::ObjectYield::MergeFrom(from.yield());
      break;
    }
    case kOvertake: {
      mutable_overtake()->::acu::planning::ObjectOvertake::MergeFrom(from.overtake());
      break;
    }
    case kNudge: {
      mutable_nudge()->::acu::planning::ObjectNudge::MergeFrom(from.nudge());
      break;
    }
    case kAvoid: {
      mutable_avoid()->::acu::planning::ObjectAvoid::MergeFrom(from.avoid());
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:acu.planning.ObjectDecisionType)
}

void ObjectDecisionType::SharedCtor() {
  _cached_size_ = 0;
  clear_has_object_tag();
}

ObjectDecisionType::~ObjectDecisionType() {
  // @@protoc_insertion_point(destructor:acu.planning.ObjectDecisionType)
  SharedDtor();
}

void ObjectDecisionType::SharedDtor() {
  if (has_object_tag()) {
    clear_object_tag();
  }
}

void ObjectDecisionType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDecisionType::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectDecisionType& ObjectDecisionType::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsObjectDecisionType();
  return *internal_default_instance();
}

ObjectDecisionType* ObjectDecisionType::New(::google::protobuf::Arena* arena) const {
  ObjectDecisionType* n = new ObjectDecisionType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectDecisionType::clear_object_tag() {
// @@protoc_insertion_point(one_of_clear_start:acu.planning.ObjectDecisionType)
  switch (object_tag_case()) {
    case kIgnore: {
      delete object_tag_.ignore_;
      break;
    }
    case kStop: {
      delete object_tag_.stop_;
      break;
    }
    case kFollow: {
      delete object_tag_.follow_;
      break;
    }
    case kYield: {
      delete object_tag_.yield_;
      break;
    }
    case kOvertake: {
      delete object_tag_.overtake_;
      break;
    }
    case kNudge: {
      delete object_tag_.nudge_;
      break;
    }
    case kAvoid: {
      delete object_tag_.avoid_;
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OBJECT_TAG_NOT_SET;
}


void ObjectDecisionType::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.ObjectDecisionType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_object_tag();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectDecisionType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.ObjectDecisionType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.planning.ObjectIgnore ignore = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ignore()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.ObjectStop stop = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.ObjectFollow follow = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_follow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.ObjectYield yield = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yield()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.ObjectOvertake overtake = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_overtake()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.ObjectNudge nudge = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nudge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.ObjectAvoid avoid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_avoid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.ObjectDecisionType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.ObjectDecisionType)
  return false;
#undef DO_
}

void ObjectDecisionType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.ObjectDecisionType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (object_tag_case()) {
    case kIgnore:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *object_tag_.ignore_, output);
      break;
    case kStop:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *object_tag_.stop_, output);
      break;
    case kFollow:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *object_tag_.follow_, output);
      break;
    case kYield:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *object_tag_.yield_, output);
      break;
    case kOvertake:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *object_tag_.overtake_, output);
      break;
    case kNudge:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *object_tag_.nudge_, output);
      break;
    case kAvoid:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *object_tag_.avoid_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.ObjectDecisionType)
}

::google::protobuf::uint8* ObjectDecisionType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.ObjectDecisionType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (object_tag_case()) {
    case kIgnore:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, *object_tag_.ignore_, deterministic, target);
      break;
    case kStop:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, *object_tag_.stop_, deterministic, target);
      break;
    case kFollow:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, *object_tag_.follow_, deterministic, target);
      break;
    case kYield:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, *object_tag_.yield_, deterministic, target);
      break;
    case kOvertake:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, *object_tag_.overtake_, deterministic, target);
      break;
    case kNudge:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, *object_tag_.nudge_, deterministic, target);
      break;
    case kAvoid:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, *object_tag_.avoid_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.ObjectDecisionType)
  return target;
}

size_t ObjectDecisionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.ObjectDecisionType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (object_tag_case()) {
    // optional .acu.planning.ObjectIgnore ignore = 1;
    case kIgnore: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *object_tag_.ignore_);
      break;
    }
    // optional .acu.planning.ObjectStop stop = 2;
    case kStop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *object_tag_.stop_);
      break;
    }
    // optional .acu.planning.ObjectFollow follow = 3;
    case kFollow: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *object_tag_.follow_);
      break;
    }
    // optional .acu.planning.ObjectYield yield = 4;
    case kYield: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *object_tag_.yield_);
      break;
    }
    // optional .acu.planning.ObjectOvertake overtake = 5;
    case kOvertake: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *object_tag_.overtake_);
      break;
    }
    // optional .acu.planning.ObjectNudge nudge = 6;
    case kNudge: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *object_tag_.nudge_);
      break;
    }
    // optional .acu.planning.ObjectAvoid avoid = 7;
    case kAvoid: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *object_tag_.avoid_);
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDecisionType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.ObjectDecisionType)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDecisionType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectDecisionType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.ObjectDecisionType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.ObjectDecisionType)
    MergeFrom(*source);
  }
}

void ObjectDecisionType::MergeFrom(const ObjectDecisionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.ObjectDecisionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.object_tag_case()) {
    case kIgnore: {
      mutable_ignore()->::acu::planning::ObjectIgnore::MergeFrom(from.ignore());
      break;
    }
    case kStop: {
      mutable_stop()->::acu::planning::ObjectStop::MergeFrom(from.stop());
      break;
    }
    case kFollow: {
      mutable_follow()->::acu::planning::ObjectFollow::MergeFrom(from.follow());
      break;
    }
    case kYield: {
      mutable_yield()->::acu::planning::ObjectYield::MergeFrom(from.yield());
      break;
    }
    case kOvertake: {
      mutable_overtake()->::acu::planning::ObjectOvertake::MergeFrom(from.overtake());
      break;
    }
    case kNudge: {
      mutable_nudge()->::acu::planning::ObjectNudge::MergeFrom(from.nudge());
      break;
    }
    case kAvoid: {
      mutable_avoid()->::acu::planning::ObjectAvoid::MergeFrom(from.avoid());
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
}

void ObjectDecisionType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.ObjectDecisionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDecisionType::CopyFrom(const ObjectDecisionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.ObjectDecisionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDecisionType::IsInitialized() const {
  return true;
}

void ObjectDecisionType::Swap(ObjectDecisionType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectDecisionType::InternalSwap(ObjectDecisionType* other) {
  using std::swap;
  swap(object_tag_, other->object_tag_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectDecisionType::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObjectDecision::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectDecision::kIdFieldNumber;
const int ObjectDecision::kPerceptionIdFieldNumber;
const int ObjectDecision::kObjectDecisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectDecision::ObjectDecision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsObjectDecision();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.ObjectDecision)
}
ObjectDecision::ObjectDecision(const ObjectDecision& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      object_decision_(from.object_decision_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  perception_id_ = from.perception_id_;
  // @@protoc_insertion_point(copy_constructor:acu.planning.ObjectDecision)
}

void ObjectDecision::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  perception_id_ = 0;
}

ObjectDecision::~ObjectDecision() {
  // @@protoc_insertion_point(destructor:acu.planning.ObjectDecision)
  SharedDtor();
}

void ObjectDecision::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ObjectDecision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDecision::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectDecision& ObjectDecision::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsObjectDecision();
  return *internal_default_instance();
}

ObjectDecision* ObjectDecision::New(::google::protobuf::Arena* arena) const {
  ObjectDecision* n = new ObjectDecision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectDecision::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.ObjectDecision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_decision_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  perception_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectDecision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.ObjectDecision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acu.planning.ObjectDecision.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 perception_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_perception_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &perception_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.planning.ObjectDecisionType object_decision = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_object_decision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.ObjectDecision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.ObjectDecision)
  return false;
#undef DO_
}

void ObjectDecision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.ObjectDecision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.planning.ObjectDecision.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 perception_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->perception_id(), output);
  }

  // repeated .acu.planning.ObjectDecisionType object_decision = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_decision_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->object_decision(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.ObjectDecision)
}

::google::protobuf::uint8* ObjectDecision::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.ObjectDecision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.planning.ObjectDecision.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 perception_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->perception_id(), target);
  }

  // repeated .acu.planning.ObjectDecisionType object_decision = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_decision_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->object_decision(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.ObjectDecision)
  return target;
}

size_t ObjectDecision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.ObjectDecision)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.planning.ObjectDecisionType object_decision = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->object_decision_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object_decision(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 perception_id = 2;
    if (has_perception_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->perception_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDecision::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.ObjectDecision)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDecision* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectDecision>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.ObjectDecision)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.ObjectDecision)
    MergeFrom(*source);
  }
}

void ObjectDecision::MergeFrom(const ObjectDecision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.ObjectDecision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_decision_.MergeFrom(from.object_decision_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      perception_id_ = from.perception_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectDecision::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.ObjectDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDecision::CopyFrom(const ObjectDecision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.ObjectDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDecision::IsInitialized() const {
  return true;
}

void ObjectDecision::Swap(ObjectDecision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectDecision::InternalSwap(ObjectDecision* other) {
  using std::swap;
  object_decision_.InternalSwap(&other->object_decision_);
  id_.Swap(&other->id_);
  swap(perception_id_, other->perception_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectDecision::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObjectDecisions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectDecisions::kDecisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectDecisions::ObjectDecisions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsObjectDecisions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.ObjectDecisions)
}
ObjectDecisions::ObjectDecisions(const ObjectDecisions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      decision_(from.decision_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:acu.planning.ObjectDecisions)
}

void ObjectDecisions::SharedCtor() {
  _cached_size_ = 0;
}

ObjectDecisions::~ObjectDecisions() {
  // @@protoc_insertion_point(destructor:acu.planning.ObjectDecisions)
  SharedDtor();
}

void ObjectDecisions::SharedDtor() {
}

void ObjectDecisions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectDecisions::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectDecisions& ObjectDecisions::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsObjectDecisions();
  return *internal_default_instance();
}

ObjectDecisions* ObjectDecisions::New(::google::protobuf::Arena* arena) const {
  ObjectDecisions* n = new ObjectDecisions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectDecisions::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.ObjectDecisions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  decision_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjectDecisions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.ObjectDecisions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .acu.planning.ObjectDecision decision = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_decision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.ObjectDecisions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.ObjectDecisions)
  return false;
#undef DO_
}

void ObjectDecisions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.ObjectDecisions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .acu.planning.ObjectDecision decision = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->decision_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->decision(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.ObjectDecisions)
}

::google::protobuf::uint8* ObjectDecisions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.ObjectDecisions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .acu.planning.ObjectDecision decision = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->decision_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->decision(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.ObjectDecisions)
  return target;
}

size_t ObjectDecisions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.ObjectDecisions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.planning.ObjectDecision decision = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->decision_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->decision(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectDecisions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.ObjectDecisions)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDecisions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectDecisions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.ObjectDecisions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.ObjectDecisions)
    MergeFrom(*source);
  }
}

void ObjectDecisions::MergeFrom(const ObjectDecisions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.ObjectDecisions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  decision_.MergeFrom(from.decision_);
}

void ObjectDecisions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.ObjectDecisions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDecisions::CopyFrom(const ObjectDecisions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.ObjectDecisions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDecisions::IsInitialized() const {
  return true;
}

void ObjectDecisions::Swap(ObjectDecisions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectDecisions::InternalSwap(ObjectDecisions* other) {
  using std::swap;
  decision_.InternalSwap(&other->decision_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectDecisions::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MainStop::InitAsDefaultInstance() {
  ::acu::planning::_MainStop_default_instance_._instance.get_mutable()->stop_point_ = const_cast< ::acu::planning::PointENU*>(
      ::acu::planning::PointENU::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainStop::kReasonCodeFieldNumber;
const int MainStop::kReasonFieldNumber;
const int MainStop::kStopPointFieldNumber;
const int MainStop::kStopHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainStop::MainStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsMainStop();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.MainStop)
}
MainStop::MainStop(const MainStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.has_stop_point()) {
    stop_point_ = new ::acu::planning::PointENU(*from.stop_point_);
  } else {
    stop_point_ = NULL;
  }
  ::memcpy(&stop_heading_, &from.stop_heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_code_) -
    reinterpret_cast<char*>(&stop_heading_)) + sizeof(reason_code_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.MainStop)
}

void MainStop::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stop_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_heading_) -
      reinterpret_cast<char*>(&stop_point_)) + sizeof(stop_heading_));
  reason_code_ = 1;
}

MainStop::~MainStop() {
  // @@protoc_insertion_point(destructor:acu.planning.MainStop)
  SharedDtor();
}

void MainStop::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stop_point_;
}

void MainStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainStop::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MainStop& MainStop::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsMainStop();
  return *internal_default_instance();
}

MainStop* MainStop::New(::google::protobuf::Arena* arena) const {
  MainStop* n = new MainStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainStop::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.MainStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*reason_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stop_point_ != NULL);
      stop_point_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    stop_heading_ = 0;
    reason_code_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MainStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.MainStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.planning.StopReasonCode reason_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::planning::StopReasonCode_IsValid(value)) {
            set_reason_code(static_cast< ::acu::planning::StopReasonCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acu.planning.MainStop.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.PointENU stop_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_heading = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_stop_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.MainStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.MainStop)
  return false;
#undef DO_
}

void MainStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.MainStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.StopReasonCode reason_code = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason_code(), output);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.planning.MainStop.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  // optional .acu.planning.PointENU stop_point = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stop_point_, output);
  }

  // optional double stop_heading = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->stop_heading(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.MainStop)
}

::google::protobuf::uint8* MainStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.MainStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.StopReasonCode reason_code = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason_code(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.planning.MainStop.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  // optional .acu.planning.PointENU stop_point = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->stop_point_, deterministic, target);
  }

  // optional double stop_heading = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->stop_heading(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.MainStop)
  return target;
}

size_t MainStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.MainStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional .acu.planning.PointENU stop_point = 3;
    if (has_stop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->stop_point_);
    }

    // optional double stop_heading = 4;
    if (has_stop_heading()) {
      total_size += 1 + 8;
    }

    // optional .acu.planning.StopReasonCode reason_code = 1;
    if (has_reason_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.MainStop)
  GOOGLE_DCHECK_NE(&from, this);
  const MainStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MainStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.MainStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.MainStop)
    MergeFrom(*source);
  }
}

void MainStop::MergeFrom(const MainStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.MainStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_stop_point()->::acu::planning::PointENU::MergeFrom(from.stop_point());
    }
    if (cached_has_bits & 0x00000004u) {
      stop_heading_ = from.stop_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      reason_code_ = from.reason_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MainStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.MainStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainStop::CopyFrom(const MainStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.MainStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainStop::IsInitialized() const {
  return true;
}

void MainStop::Swap(MainStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainStop::InternalSwap(MainStop* other) {
  using std::swap;
  reason_.Swap(&other->reason_);
  swap(stop_point_, other->stop_point_);
  swap(stop_heading_, other->stop_heading_);
  swap(reason_code_, other->reason_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainStop::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EmergencyStopHardBrake::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmergencyStopHardBrake::EmergencyStopHardBrake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsEmergencyStopHardBrake();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.EmergencyStopHardBrake)
}
EmergencyStopHardBrake::EmergencyStopHardBrake(const EmergencyStopHardBrake& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:acu.planning.EmergencyStopHardBrake)
}

void EmergencyStopHardBrake::SharedCtor() {
  _cached_size_ = 0;
}

EmergencyStopHardBrake::~EmergencyStopHardBrake() {
  // @@protoc_insertion_point(destructor:acu.planning.EmergencyStopHardBrake)
  SharedDtor();
}

void EmergencyStopHardBrake::SharedDtor() {
}

void EmergencyStopHardBrake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmergencyStopHardBrake::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmergencyStopHardBrake& EmergencyStopHardBrake::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsEmergencyStopHardBrake();
  return *internal_default_instance();
}

EmergencyStopHardBrake* EmergencyStopHardBrake::New(::google::protobuf::Arena* arena) const {
  EmergencyStopHardBrake* n = new EmergencyStopHardBrake;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmergencyStopHardBrake::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.EmergencyStopHardBrake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmergencyStopHardBrake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.EmergencyStopHardBrake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.EmergencyStopHardBrake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.EmergencyStopHardBrake)
  return false;
#undef DO_
}

void EmergencyStopHardBrake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.EmergencyStopHardBrake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.EmergencyStopHardBrake)
}

::google::protobuf::uint8* EmergencyStopHardBrake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.EmergencyStopHardBrake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.EmergencyStopHardBrake)
  return target;
}

size_t EmergencyStopHardBrake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.EmergencyStopHardBrake)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmergencyStopHardBrake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.EmergencyStopHardBrake)
  GOOGLE_DCHECK_NE(&from, this);
  const EmergencyStopHardBrake* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmergencyStopHardBrake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.EmergencyStopHardBrake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.EmergencyStopHardBrake)
    MergeFrom(*source);
  }
}

void EmergencyStopHardBrake::MergeFrom(const EmergencyStopHardBrake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.EmergencyStopHardBrake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EmergencyStopHardBrake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.EmergencyStopHardBrake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmergencyStopHardBrake::CopyFrom(const EmergencyStopHardBrake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.EmergencyStopHardBrake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmergencyStopHardBrake::IsInitialized() const {
  return true;
}

void EmergencyStopHardBrake::Swap(EmergencyStopHardBrake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmergencyStopHardBrake::InternalSwap(EmergencyStopHardBrake* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmergencyStopHardBrake::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EmergencyStopCruiseToStop::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmergencyStopCruiseToStop::EmergencyStopCruiseToStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsEmergencyStopCruiseToStop();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.EmergencyStopCruiseToStop)
}
EmergencyStopCruiseToStop::EmergencyStopCruiseToStop(const EmergencyStopCruiseToStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:acu.planning.EmergencyStopCruiseToStop)
}

void EmergencyStopCruiseToStop::SharedCtor() {
  _cached_size_ = 0;
}

EmergencyStopCruiseToStop::~EmergencyStopCruiseToStop() {
  // @@protoc_insertion_point(destructor:acu.planning.EmergencyStopCruiseToStop)
  SharedDtor();
}

void EmergencyStopCruiseToStop::SharedDtor() {
}

void EmergencyStopCruiseToStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmergencyStopCruiseToStop::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmergencyStopCruiseToStop& EmergencyStopCruiseToStop::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsEmergencyStopCruiseToStop();
  return *internal_default_instance();
}

EmergencyStopCruiseToStop* EmergencyStopCruiseToStop::New(::google::protobuf::Arena* arena) const {
  EmergencyStopCruiseToStop* n = new EmergencyStopCruiseToStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmergencyStopCruiseToStop::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.EmergencyStopCruiseToStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmergencyStopCruiseToStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.EmergencyStopCruiseToStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.EmergencyStopCruiseToStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.EmergencyStopCruiseToStop)
  return false;
#undef DO_
}

void EmergencyStopCruiseToStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.EmergencyStopCruiseToStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.EmergencyStopCruiseToStop)
}

::google::protobuf::uint8* EmergencyStopCruiseToStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.EmergencyStopCruiseToStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.EmergencyStopCruiseToStop)
  return target;
}

size_t EmergencyStopCruiseToStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.EmergencyStopCruiseToStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmergencyStopCruiseToStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.EmergencyStopCruiseToStop)
  GOOGLE_DCHECK_NE(&from, this);
  const EmergencyStopCruiseToStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmergencyStopCruiseToStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.EmergencyStopCruiseToStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.EmergencyStopCruiseToStop)
    MergeFrom(*source);
  }
}

void EmergencyStopCruiseToStop::MergeFrom(const EmergencyStopCruiseToStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.EmergencyStopCruiseToStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EmergencyStopCruiseToStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.EmergencyStopCruiseToStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmergencyStopCruiseToStop::CopyFrom(const EmergencyStopCruiseToStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.EmergencyStopCruiseToStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmergencyStopCruiseToStop::IsInitialized() const {
  return true;
}

void EmergencyStopCruiseToStop::Swap(EmergencyStopCruiseToStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmergencyStopCruiseToStop::InternalSwap(EmergencyStopCruiseToStop* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmergencyStopCruiseToStop::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MainEmergencyStop::InitAsDefaultInstance() {
  ::acu::planning::_MainEmergencyStop_default_instance_.hard_brake_ = const_cast< ::acu::planning::EmergencyStopHardBrake*>(
      ::acu::planning::EmergencyStopHardBrake::internal_default_instance());
  ::acu::planning::_MainEmergencyStop_default_instance_.cruise_to_stop_ = const_cast< ::acu::planning::EmergencyStopCruiseToStop*>(
      ::acu::planning::EmergencyStopCruiseToStop::internal_default_instance());
}
void MainEmergencyStop::set_allocated_hard_brake(::acu::planning::EmergencyStopHardBrake* hard_brake) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task();
  if (hard_brake) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hard_brake = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hard_brake, submessage_arena);
    }
    set_has_hard_brake();
    task_.hard_brake_ = hard_brake;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.MainEmergencyStop.hard_brake)
}
void MainEmergencyStop::set_allocated_cruise_to_stop(::acu::planning::EmergencyStopCruiseToStop* cruise_to_stop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task();
  if (cruise_to_stop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cruise_to_stop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cruise_to_stop, submessage_arena);
    }
    set_has_cruise_to_stop();
    task_.cruise_to_stop_ = cruise_to_stop;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.MainEmergencyStop.cruise_to_stop)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainEmergencyStop::kReasonCodeFieldNumber;
const int MainEmergencyStop::kReasonFieldNumber;
const int MainEmergencyStop::kHardBrakeFieldNumber;
const int MainEmergencyStop::kCruiseToStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainEmergencyStop::MainEmergencyStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsMainEmergencyStop();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.MainEmergencyStop)
}
MainEmergencyStop::MainEmergencyStop(const MainEmergencyStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  reason_code_ = from.reason_code_;
  clear_has_task();
  switch (from.task_case()) {
    case kHardBrake: {
      mutable_hard_brake()->::acu::planning::EmergencyStopHardBrake::MergeFrom(from.hard_brake());
      break;
    }
    case kCruiseToStop: {
      mutable_cruise_to_stop()->::acu::planning::EmergencyStopCruiseToStop::MergeFrom(from.cruise_to_stop());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:acu.planning.MainEmergencyStop)
}

void MainEmergencyStop::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_code_ = 1;
  clear_has_task();
}

MainEmergencyStop::~MainEmergencyStop() {
  // @@protoc_insertion_point(destructor:acu.planning.MainEmergencyStop)
  SharedDtor();
}

void MainEmergencyStop::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_task()) {
    clear_task();
  }
}

void MainEmergencyStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainEmergencyStop::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MainEmergencyStop& MainEmergencyStop::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsMainEmergencyStop();
  return *internal_default_instance();
}

MainEmergencyStop* MainEmergencyStop::New(::google::protobuf::Arena* arena) const {
  MainEmergencyStop* n = new MainEmergencyStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainEmergencyStop::clear_task() {
// @@protoc_insertion_point(one_of_clear_start:acu.planning.MainEmergencyStop)
  switch (task_case()) {
    case kHardBrake: {
      delete task_.hard_brake_;
      break;
    }
    case kCruiseToStop: {
      delete task_.cruise_to_stop_;
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TASK_NOT_SET;
}


void MainEmergencyStop::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.MainEmergencyStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*reason_.UnsafeRawStringPointer())->clear();
    }
    reason_code_ = 1;
  }
  clear_task();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MainEmergencyStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.MainEmergencyStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.planning.MainEmergencyStop.ReasonCode reason_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::planning::MainEmergencyStop_ReasonCode_IsValid(value)) {
            set_reason_code(static_cast< ::acu::planning::MainEmergencyStop_ReasonCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acu.planning.MainEmergencyStop.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.EmergencyStopHardBrake hard_brake = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hard_brake()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.EmergencyStopCruiseToStop cruise_to_stop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cruise_to_stop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.MainEmergencyStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.MainEmergencyStop)
  return false;
#undef DO_
}

void MainEmergencyStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.MainEmergencyStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.MainEmergencyStop.ReasonCode reason_code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason_code(), output);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.planning.MainEmergencyStop.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  switch (task_case()) {
    case kHardBrake:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *task_.hard_brake_, output);
      break;
    case kCruiseToStop:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *task_.cruise_to_stop_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.MainEmergencyStop)
}

::google::protobuf::uint8* MainEmergencyStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.MainEmergencyStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.MainEmergencyStop.ReasonCode reason_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason_code(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.planning.MainEmergencyStop.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  switch (task_case()) {
    case kHardBrake:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, *task_.hard_brake_, deterministic, target);
      break;
    case kCruiseToStop:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, *task_.cruise_to_stop_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.MainEmergencyStop)
  return target;
}

size_t MainEmergencyStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.MainEmergencyStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional .acu.planning.MainEmergencyStop.ReasonCode reason_code = 1;
    if (has_reason_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason_code());
    }

  }
  switch (task_case()) {
    // optional .acu.planning.EmergencyStopHardBrake hard_brake = 3;
    case kHardBrake: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_.hard_brake_);
      break;
    }
    // optional .acu.planning.EmergencyStopCruiseToStop cruise_to_stop = 4;
    case kCruiseToStop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_.cruise_to_stop_);
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainEmergencyStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.MainEmergencyStop)
  GOOGLE_DCHECK_NE(&from, this);
  const MainEmergencyStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MainEmergencyStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.MainEmergencyStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.MainEmergencyStop)
    MergeFrom(*source);
  }
}

void MainEmergencyStop::MergeFrom(const MainEmergencyStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.MainEmergencyStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      reason_code_ = from.reason_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.task_case()) {
    case kHardBrake: {
      mutable_hard_brake()->::acu::planning::EmergencyStopHardBrake::MergeFrom(from.hard_brake());
      break;
    }
    case kCruiseToStop: {
      mutable_cruise_to_stop()->::acu::planning::EmergencyStopCruiseToStop::MergeFrom(from.cruise_to_stop());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
}

void MainEmergencyStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.MainEmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainEmergencyStop::CopyFrom(const MainEmergencyStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.MainEmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainEmergencyStop::IsInitialized() const {
  return true;
}

void MainEmergencyStop::Swap(MainEmergencyStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainEmergencyStop::InternalSwap(MainEmergencyStop* other) {
  using std::swap;
  reason_.Swap(&other->reason_);
  swap(reason_code_, other->reason_code_);
  swap(task_, other->task_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainEmergencyStop::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MainCruise::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainCruise::MainCruise()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsMainCruise();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.MainCruise)
}
MainCruise::MainCruise(const MainCruise& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:acu.planning.MainCruise)
}

void MainCruise::SharedCtor() {
  _cached_size_ = 0;
}

MainCruise::~MainCruise() {
  // @@protoc_insertion_point(destructor:acu.planning.MainCruise)
  SharedDtor();
}

void MainCruise::SharedDtor() {
}

void MainCruise::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainCruise::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MainCruise& MainCruise::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsMainCruise();
  return *internal_default_instance();
}

MainCruise* MainCruise::New(::google::protobuf::Arena* arena) const {
  MainCruise* n = new MainCruise;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainCruise::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.MainCruise)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MainCruise::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.MainCruise)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.MainCruise)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.MainCruise)
  return false;
#undef DO_
}

void MainCruise::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.MainCruise)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.MainCruise)
}

::google::protobuf::uint8* MainCruise::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.MainCruise)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.MainCruise)
  return target;
}

size_t MainCruise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.MainCruise)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainCruise::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.MainCruise)
  GOOGLE_DCHECK_NE(&from, this);
  const MainCruise* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MainCruise>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.MainCruise)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.MainCruise)
    MergeFrom(*source);
  }
}

void MainCruise::MergeFrom(const MainCruise& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.MainCruise)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MainCruise::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.MainCruise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainCruise::CopyFrom(const MainCruise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.MainCruise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainCruise::IsInitialized() const {
  return true;
}

void MainCruise::Swap(MainCruise* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainCruise::InternalSwap(MainCruise* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainCruise::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MainChangeLane::InitAsDefaultInstance() {
  ::acu::planning::_MainChangeLane_default_instance_._instance.get_mutable()->default_lane_stop_ = const_cast< ::acu::planning::MainStop*>(
      ::acu::planning::MainStop::internal_default_instance());
  ::acu::planning::_MainChangeLane_default_instance_._instance.get_mutable()->target_lane_stop_ = const_cast< ::acu::planning::MainStop*>(
      ::acu::planning::MainStop::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainChangeLane::kTypeFieldNumber;
const int MainChangeLane::kDefaultLaneFieldNumber;
const int MainChangeLane::kDefaultLaneStopFieldNumber;
const int MainChangeLane::kTargetLaneStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainChangeLane::MainChangeLane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsMainChangeLane();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.MainChangeLane)
}
MainChangeLane::MainChangeLane(const MainChangeLane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      default_lane_(from.default_lane_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_default_lane_stop()) {
    default_lane_stop_ = new ::acu::planning::MainStop(*from.default_lane_stop_);
  } else {
    default_lane_stop_ = NULL;
  }
  if (from.has_target_lane_stop()) {
    target_lane_stop_ = new ::acu::planning::MainStop(*from.target_lane_stop_);
  } else {
    target_lane_stop_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:acu.planning.MainChangeLane)
}

void MainChangeLane::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&default_lane_stop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_lane_stop_) -
      reinterpret_cast<char*>(&default_lane_stop_)) + sizeof(target_lane_stop_));
  type_ = 1;
}

MainChangeLane::~MainChangeLane() {
  // @@protoc_insertion_point(destructor:acu.planning.MainChangeLane)
  SharedDtor();
}

void MainChangeLane::SharedDtor() {
  if (this != internal_default_instance()) delete default_lane_stop_;
  if (this != internal_default_instance()) delete target_lane_stop_;
}

void MainChangeLane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainChangeLane::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MainChangeLane& MainChangeLane::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsMainChangeLane();
  return *internal_default_instance();
}

MainChangeLane* MainChangeLane::New(::google::protobuf::Arena* arena) const {
  MainChangeLane* n = new MainChangeLane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainChangeLane::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.MainChangeLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  default_lane_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(default_lane_stop_ != NULL);
      default_lane_stop_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_lane_stop_ != NULL);
      target_lane_stop_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MainChangeLane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.MainChangeLane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.planning.MainChangeLane.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::planning::MainChangeLane_Type_IsValid(value)) {
            set_type(static_cast< ::acu::planning::MainChangeLane_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.planning.TargetLane default_lane = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_default_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.MainStop default_lane_stop = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_default_lane_stop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.MainStop target_lane_stop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_lane_stop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.MainChangeLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.MainChangeLane)
  return false;
#undef DO_
}

void MainChangeLane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.MainChangeLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.MainChangeLane.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .acu.planning.TargetLane default_lane = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->default_lane_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->default_lane(static_cast<int>(i)), output);
  }

  // optional .acu.planning.MainStop default_lane_stop = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->default_lane_stop_, output);
  }

  // optional .acu.planning.MainStop target_lane_stop = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->target_lane_stop_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.MainChangeLane)
}

::google::protobuf::uint8* MainChangeLane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.MainChangeLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.MainChangeLane.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .acu.planning.TargetLane default_lane = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->default_lane_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->default_lane(static_cast<int>(i)), deterministic, target);
  }

  // optional .acu.planning.MainStop default_lane_stop = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->default_lane_stop_, deterministic, target);
  }

  // optional .acu.planning.MainStop target_lane_stop = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->target_lane_stop_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.MainChangeLane)
  return target;
}

size_t MainChangeLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.MainChangeLane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.planning.TargetLane default_lane = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->default_lane_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->default_lane(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .acu.planning.MainStop default_lane_stop = 3;
    if (has_default_lane_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->default_lane_stop_);
    }

    // optional .acu.planning.MainStop target_lane_stop = 4;
    if (has_target_lane_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->target_lane_stop_);
    }

    // optional .acu.planning.MainChangeLane.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainChangeLane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.MainChangeLane)
  GOOGLE_DCHECK_NE(&from, this);
  const MainChangeLane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MainChangeLane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.MainChangeLane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.MainChangeLane)
    MergeFrom(*source);
  }
}

void MainChangeLane::MergeFrom(const MainChangeLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.MainChangeLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  default_lane_.MergeFrom(from.default_lane_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_default_lane_stop()->::acu::planning::MainStop::MergeFrom(from.default_lane_stop());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_target_lane_stop()->::acu::planning::MainStop::MergeFrom(from.target_lane_stop());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MainChangeLane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.MainChangeLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainChangeLane::CopyFrom(const MainChangeLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.MainChangeLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainChangeLane::IsInitialized() const {
  return true;
}

void MainChangeLane::Swap(MainChangeLane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainChangeLane::InternalSwap(MainChangeLane* other) {
  using std::swap;
  default_lane_.InternalSwap(&other->default_lane_);
  swap(default_lane_stop_, other->default_lane_stop_);
  swap(target_lane_stop_, other->target_lane_stop_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainChangeLane::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MainMissionComplete::InitAsDefaultInstance() {
  ::acu::planning::_MainMissionComplete_default_instance_._instance.get_mutable()->stop_point_ = const_cast< ::acu::planning::PointENU*>(
      ::acu::planning::PointENU::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainMissionComplete::kStopPointFieldNumber;
const int MainMissionComplete::kStopHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainMissionComplete::MainMissionComplete()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsMainMissionComplete();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.MainMissionComplete)
}
MainMissionComplete::MainMissionComplete(const MainMissionComplete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stop_point()) {
    stop_point_ = new ::acu::planning::PointENU(*from.stop_point_);
  } else {
    stop_point_ = NULL;
  }
  stop_heading_ = from.stop_heading_;
  // @@protoc_insertion_point(copy_constructor:acu.planning.MainMissionComplete)
}

void MainMissionComplete::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stop_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_heading_) -
      reinterpret_cast<char*>(&stop_point_)) + sizeof(stop_heading_));
}

MainMissionComplete::~MainMissionComplete() {
  // @@protoc_insertion_point(destructor:acu.planning.MainMissionComplete)
  SharedDtor();
}

void MainMissionComplete::SharedDtor() {
  if (this != internal_default_instance()) delete stop_point_;
}

void MainMissionComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainMissionComplete::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MainMissionComplete& MainMissionComplete::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsMainMissionComplete();
  return *internal_default_instance();
}

MainMissionComplete* MainMissionComplete::New(::google::protobuf::Arena* arena) const {
  MainMissionComplete* n = new MainMissionComplete;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainMissionComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.MainMissionComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stop_point_ != NULL);
    stop_point_->Clear();
  }
  stop_heading_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MainMissionComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.MainMissionComplete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.planning.PointENU stop_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_heading = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_stop_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.MainMissionComplete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.MainMissionComplete)
  return false;
#undef DO_
}

void MainMissionComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.MainMissionComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.PointENU stop_point = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stop_point_, output);
  }

  // optional double stop_heading = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->stop_heading(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.MainMissionComplete)
}

::google::protobuf::uint8* MainMissionComplete::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.MainMissionComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.PointENU stop_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->stop_point_, deterministic, target);
  }

  // optional double stop_heading = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->stop_heading(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.MainMissionComplete)
  return target;
}

size_t MainMissionComplete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.MainMissionComplete)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .acu.planning.PointENU stop_point = 1;
    if (has_stop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->stop_point_);
    }

    // optional double stop_heading = 2;
    if (has_stop_heading()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainMissionComplete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.MainMissionComplete)
  GOOGLE_DCHECK_NE(&from, this);
  const MainMissionComplete* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MainMissionComplete>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.MainMissionComplete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.MainMissionComplete)
    MergeFrom(*source);
  }
}

void MainMissionComplete::MergeFrom(const MainMissionComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.MainMissionComplete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stop_point()->::acu::planning::PointENU::MergeFrom(from.stop_point());
    }
    if (cached_has_bits & 0x00000002u) {
      stop_heading_ = from.stop_heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MainMissionComplete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.MainMissionComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainMissionComplete::CopyFrom(const MainMissionComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.MainMissionComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainMissionComplete::IsInitialized() const {
  return true;
}

void MainMissionComplete::Swap(MainMissionComplete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainMissionComplete::InternalSwap(MainMissionComplete* other) {
  using std::swap;
  swap(stop_point_, other->stop_point_);
  swap(stop_heading_, other->stop_heading_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainMissionComplete::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MainNotReady::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainNotReady::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainNotReady::MainNotReady()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsMainNotReady();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.MainNotReady)
}
MainNotReady::MainNotReady(const MainNotReady& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  // @@protoc_insertion_point(copy_constructor:acu.planning.MainNotReady)
}

void MainNotReady::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MainNotReady::~MainNotReady() {
  // @@protoc_insertion_point(destructor:acu.planning.MainNotReady)
  SharedDtor();
}

void MainNotReady::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MainNotReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainNotReady::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MainNotReady& MainNotReady::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsMainNotReady();
  return *internal_default_instance();
}

MainNotReady* MainNotReady::New(::google::protobuf::Arena* arena) const {
  MainNotReady* n = new MainNotReady;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainNotReady::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.MainNotReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*reason_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MainNotReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.MainNotReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string reason = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acu.planning.MainNotReady.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.MainNotReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.MainNotReady)
  return false;
#undef DO_
}

void MainNotReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.MainNotReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.planning.MainNotReady.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.MainNotReady)
}

::google::protobuf::uint8* MainNotReady::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.MainNotReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.planning.MainNotReady.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.MainNotReady)
  return target;
}

size_t MainNotReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.MainNotReady)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string reason = 1;
  if (has_reason()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainNotReady::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.MainNotReady)
  GOOGLE_DCHECK_NE(&from, this);
  const MainNotReady* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MainNotReady>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.MainNotReady)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.MainNotReady)
    MergeFrom(*source);
  }
}

void MainNotReady::MergeFrom(const MainNotReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.MainNotReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reason()) {
    set_has_reason();
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
}

void MainNotReady::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.MainNotReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainNotReady::CopyFrom(const MainNotReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.MainNotReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainNotReady::IsInitialized() const {
  return true;
}

void MainNotReady::Swap(MainNotReady* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainNotReady::InternalSwap(MainNotReady* other) {
  using std::swap;
  reason_.Swap(&other->reason_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainNotReady::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MainParking::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainParking::MainParking()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsMainParking();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.MainParking)
}
MainParking::MainParking(const MainParking& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:acu.planning.MainParking)
}

void MainParking::SharedCtor() {
  _cached_size_ = 0;
}

MainParking::~MainParking() {
  // @@protoc_insertion_point(destructor:acu.planning.MainParking)
  SharedDtor();
}

void MainParking::SharedDtor() {
}

void MainParking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainParking::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MainParking& MainParking::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsMainParking();
  return *internal_default_instance();
}

MainParking* MainParking::New(::google::protobuf::Arena* arena) const {
  MainParking* n = new MainParking;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainParking::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.MainParking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MainParking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.MainParking)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.MainParking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.MainParking)
  return false;
#undef DO_
}

void MainParking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.MainParking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.MainParking)
}

::google::protobuf::uint8* MainParking::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.MainParking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.MainParking)
  return target;
}

size_t MainParking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.MainParking)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainParking::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.MainParking)
  GOOGLE_DCHECK_NE(&from, this);
  const MainParking* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MainParking>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.MainParking)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.MainParking)
    MergeFrom(*source);
  }
}

void MainParking::MergeFrom(const MainParking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.MainParking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MainParking::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.MainParking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainParking::CopyFrom(const MainParking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.MainParking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainParking::IsInitialized() const {
  return true;
}

void MainParking::Swap(MainParking* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainParking::InternalSwap(MainParking* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainParking::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MainDecision::InitAsDefaultInstance() {
  ::acu::planning::_MainDecision_default_instance_.cruise_ = const_cast< ::acu::planning::MainCruise*>(
      ::acu::planning::MainCruise::internal_default_instance());
  ::acu::planning::_MainDecision_default_instance_.stop_ = const_cast< ::acu::planning::MainStop*>(
      ::acu::planning::MainStop::internal_default_instance());
  ::acu::planning::_MainDecision_default_instance_.estop_ = const_cast< ::acu::planning::MainEmergencyStop*>(
      ::acu::planning::MainEmergencyStop::internal_default_instance());
  ::acu::planning::_MainDecision_default_instance_.change_lane_ = const_cast< ::acu::planning::MainChangeLane*>(
      ::acu::planning::MainChangeLane::internal_default_instance());
  ::acu::planning::_MainDecision_default_instance_.mission_complete_ = const_cast< ::acu::planning::MainMissionComplete*>(
      ::acu::planning::MainMissionComplete::internal_default_instance());
  ::acu::planning::_MainDecision_default_instance_.not_ready_ = const_cast< ::acu::planning::MainNotReady*>(
      ::acu::planning::MainNotReady::internal_default_instance());
  ::acu::planning::_MainDecision_default_instance_.parking_ = const_cast< ::acu::planning::MainParking*>(
      ::acu::planning::MainParking::internal_default_instance());
}
void MainDecision::set_allocated_cruise(::acu::planning::MainCruise* cruise) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task();
  if (cruise) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cruise = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cruise, submessage_arena);
    }
    set_has_cruise();
    task_.cruise_ = cruise;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.MainDecision.cruise)
}
void MainDecision::set_allocated_stop(::acu::planning::MainStop* stop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task();
  if (stop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stop, submessage_arena);
    }
    set_has_stop();
    task_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.MainDecision.stop)
}
void MainDecision::set_allocated_estop(::acu::planning::MainEmergencyStop* estop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task();
  if (estop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      estop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, estop, submessage_arena);
    }
    set_has_estop();
    task_.estop_ = estop;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.MainDecision.estop)
}
void MainDecision::set_allocated_change_lane(::acu::planning::MainChangeLane* change_lane) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task();
  if (change_lane) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      change_lane = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, change_lane, submessage_arena);
    }
    set_has_change_lane();
    task_.change_lane_ = change_lane;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.MainDecision.change_lane)
}
void MainDecision::set_allocated_mission_complete(::acu::planning::MainMissionComplete* mission_complete) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task();
  if (mission_complete) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mission_complete = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mission_complete, submessage_arena);
    }
    set_has_mission_complete();
    task_.mission_complete_ = mission_complete;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.MainDecision.mission_complete)
}
void MainDecision::set_allocated_not_ready(::acu::planning::MainNotReady* not_ready) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task();
  if (not_ready) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      not_ready = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, not_ready, submessage_arena);
    }
    set_has_not_ready();
    task_.not_ready_ = not_ready;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.MainDecision.not_ready)
}
void MainDecision::set_allocated_parking(::acu::planning::MainParking* parking) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task();
  if (parking) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parking = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parking, submessage_arena);
    }
    set_has_parking();
    task_.parking_ = parking;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.MainDecision.parking)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MainDecision::kCruiseFieldNumber;
const int MainDecision::kStopFieldNumber;
const int MainDecision::kEstopFieldNumber;
const int MainDecision::kChangeLaneFieldNumber;
const int MainDecision::kMissionCompleteFieldNumber;
const int MainDecision::kNotReadyFieldNumber;
const int MainDecision::kParkingFieldNumber;
const int MainDecision::kTargetLaneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MainDecision::MainDecision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsMainDecision();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.MainDecision)
}
MainDecision::MainDecision(const MainDecision& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      target_lane_(from.target_lane_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_task();
  switch (from.task_case()) {
    case kCruise: {
      mutable_cruise()->::acu::planning::MainCruise::MergeFrom(from.cruise());
      break;
    }
    case kStop: {
      mutable_stop()->::acu::planning::MainStop::MergeFrom(from.stop());
      break;
    }
    case kEstop: {
      mutable_estop()->::acu::planning::MainEmergencyStop::MergeFrom(from.estop());
      break;
    }
    case kChangeLane: {
      mutable_change_lane()->::acu::planning::MainChangeLane::MergeFrom(from.change_lane());
      break;
    }
    case kMissionComplete: {
      mutable_mission_complete()->::acu::planning::MainMissionComplete::MergeFrom(from.mission_complete());
      break;
    }
    case kNotReady: {
      mutable_not_ready()->::acu::planning::MainNotReady::MergeFrom(from.not_ready());
      break;
    }
    case kParking: {
      mutable_parking()->::acu::planning::MainParking::MergeFrom(from.parking());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:acu.planning.MainDecision)
}

void MainDecision::SharedCtor() {
  _cached_size_ = 0;
  clear_has_task();
}

MainDecision::~MainDecision() {
  // @@protoc_insertion_point(destructor:acu.planning.MainDecision)
  SharedDtor();
}

void MainDecision::SharedDtor() {
  if (has_task()) {
    clear_task();
  }
}

void MainDecision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainDecision::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MainDecision& MainDecision::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsMainDecision();
  return *internal_default_instance();
}

MainDecision* MainDecision::New(::google::protobuf::Arena* arena) const {
  MainDecision* n = new MainDecision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MainDecision::clear_task() {
// @@protoc_insertion_point(one_of_clear_start:acu.planning.MainDecision)
  switch (task_case()) {
    case kCruise: {
      delete task_.cruise_;
      break;
    }
    case kStop: {
      delete task_.stop_;
      break;
    }
    case kEstop: {
      delete task_.estop_;
      break;
    }
    case kChangeLane: {
      delete task_.change_lane_;
      break;
    }
    case kMissionComplete: {
      delete task_.mission_complete_;
      break;
    }
    case kNotReady: {
      delete task_.not_ready_;
      break;
    }
    case kParking: {
      delete task_.parking_;
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TASK_NOT_SET;
}


void MainDecision::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.MainDecision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_lane_.Clear();
  clear_task();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MainDecision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.MainDecision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.planning.MainCruise cruise = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cruise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.MainStop stop = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.MainEmergencyStop estop = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_estop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.MainChangeLane change_lane = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_change_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.planning.TargetLane target_lane = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_target_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.MainMissionComplete mission_complete = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mission_complete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.MainNotReady not_ready = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_not_ready()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.MainParking parking = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.MainDecision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.MainDecision)
  return false;
#undef DO_
}

void MainDecision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.MainDecision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (task_case()) {
    case kCruise:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *task_.cruise_, output);
      break;
    case kStop:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *task_.stop_, output);
      break;
    case kEstop:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *task_.estop_, output);
      break;
    case kChangeLane:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *task_.change_lane_, output);
      break;
    default: ;
  }
  // repeated .acu.planning.TargetLane target_lane = 5 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->target_lane_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->target_lane(static_cast<int>(i)), output);
  }

  switch (task_case()) {
    case kMissionComplete:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *task_.mission_complete_, output);
      break;
    case kNotReady:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *task_.not_ready_, output);
      break;
    case kParking:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, *task_.parking_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.MainDecision)
}

::google::protobuf::uint8* MainDecision::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.MainDecision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (task_case()) {
    case kCruise:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, *task_.cruise_, deterministic, target);
      break;
    case kStop:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, *task_.stop_, deterministic, target);
      break;
    case kEstop:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, *task_.estop_, deterministic, target);
      break;
    case kChangeLane:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, *task_.change_lane_, deterministic, target);
      break;
    default: ;
  }
  // repeated .acu.planning.TargetLane target_lane = 5 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->target_lane_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->target_lane(static_cast<int>(i)), deterministic, target);
  }

  switch (task_case()) {
    case kMissionComplete:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, *task_.mission_complete_, deterministic, target);
      break;
    case kNotReady:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, *task_.not_ready_, deterministic, target);
      break;
    case kParking:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, *task_.parking_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.MainDecision)
  return target;
}

size_t MainDecision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.MainDecision)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.planning.TargetLane target_lane = 5 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->target_lane_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->target_lane(static_cast<int>(i)));
    }
  }

  switch (task_case()) {
    // optional .acu.planning.MainCruise cruise = 1;
    case kCruise: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_.cruise_);
      break;
    }
    // optional .acu.planning.MainStop stop = 2;
    case kStop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_.stop_);
      break;
    }
    // optional .acu.planning.MainEmergencyStop estop = 3;
    case kEstop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_.estop_);
      break;
    }
    // optional .acu.planning.MainChangeLane change_lane = 4 [deprecated = true];
    case kChangeLane: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_.change_lane_);
      break;
    }
    // optional .acu.planning.MainMissionComplete mission_complete = 6;
    case kMissionComplete: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_.mission_complete_);
      break;
    }
    // optional .acu.planning.MainNotReady not_ready = 7;
    case kNotReady: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_.not_ready_);
      break;
    }
    // optional .acu.planning.MainParking parking = 8;
    case kParking: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_.parking_);
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainDecision::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.MainDecision)
  GOOGLE_DCHECK_NE(&from, this);
  const MainDecision* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MainDecision>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.MainDecision)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.MainDecision)
    MergeFrom(*source);
  }
}

void MainDecision::MergeFrom(const MainDecision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.MainDecision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_lane_.MergeFrom(from.target_lane_);
  switch (from.task_case()) {
    case kCruise: {
      mutable_cruise()->::acu::planning::MainCruise::MergeFrom(from.cruise());
      break;
    }
    case kStop: {
      mutable_stop()->::acu::planning::MainStop::MergeFrom(from.stop());
      break;
    }
    case kEstop: {
      mutable_estop()->::acu::planning::MainEmergencyStop::MergeFrom(from.estop());
      break;
    }
    case kChangeLane: {
      mutable_change_lane()->::acu::planning::MainChangeLane::MergeFrom(from.change_lane());
      break;
    }
    case kMissionComplete: {
      mutable_mission_complete()->::acu::planning::MainMissionComplete::MergeFrom(from.mission_complete());
      break;
    }
    case kNotReady: {
      mutable_not_ready()->::acu::planning::MainNotReady::MergeFrom(from.not_ready());
      break;
    }
    case kParking: {
      mutable_parking()->::acu::planning::MainParking::MergeFrom(from.parking());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
}

void MainDecision::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.MainDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainDecision::CopyFrom(const MainDecision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.MainDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainDecision::IsInitialized() const {
  return true;
}

void MainDecision::Swap(MainDecision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MainDecision::InternalSwap(MainDecision* other) {
  using std::swap;
  target_lane_.InternalSwap(&other->target_lane_);
  swap(task_, other->task_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MainDecision::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DecisionResult::InitAsDefaultInstance() {
  ::acu::planning::_DecisionResult_default_instance_._instance.get_mutable()->main_decision_ = const_cast< ::acu::planning::MainDecision*>(
      ::acu::planning::MainDecision::internal_default_instance());
  ::acu::planning::_DecisionResult_default_instance_._instance.get_mutable()->object_decision_ = const_cast< ::acu::planning::ObjectDecisions*>(
      ::acu::planning::ObjectDecisions::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecisionResult::kMainDecisionFieldNumber;
const int DecisionResult::kObjectDecisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecisionResult::DecisionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_decision_2eproto::InitDefaultsDecisionResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.DecisionResult)
}
DecisionResult::DecisionResult(const DecisionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_main_decision()) {
    main_decision_ = new ::acu::planning::MainDecision(*from.main_decision_);
  } else {
    main_decision_ = NULL;
  }
  if (from.has_object_decision()) {
    object_decision_ = new ::acu::planning::ObjectDecisions(*from.object_decision_);
  } else {
    object_decision_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:acu.planning.DecisionResult)
}

void DecisionResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&main_decision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_decision_) -
      reinterpret_cast<char*>(&main_decision_)) + sizeof(object_decision_));
}

DecisionResult::~DecisionResult() {
  // @@protoc_insertion_point(destructor:acu.planning.DecisionResult)
  SharedDtor();
}

void DecisionResult::SharedDtor() {
  if (this != internal_default_instance()) delete main_decision_;
  if (this != internal_default_instance()) delete object_decision_;
}

void DecisionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecisionResult::descriptor() {
  ::protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DecisionResult& DecisionResult::default_instance() {
  ::protobuf_decision_2eproto::InitDefaultsDecisionResult();
  return *internal_default_instance();
}

DecisionResult* DecisionResult::New(::google::protobuf::Arena* arena) const {
  DecisionResult* n = new DecisionResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DecisionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.DecisionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(main_decision_ != NULL);
      main_decision_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(object_decision_ != NULL);
      object_decision_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DecisionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.DecisionResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.planning.MainDecision main_decision = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_main_decision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.ObjectDecisions object_decision = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object_decision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.DecisionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.DecisionResult)
  return false;
#undef DO_
}

void DecisionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.DecisionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.MainDecision main_decision = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->main_decision_, output);
  }

  // optional .acu.planning.ObjectDecisions object_decision = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->object_decision_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.DecisionResult)
}

::google::protobuf::uint8* DecisionResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.DecisionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.MainDecision main_decision = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->main_decision_, deterministic, target);
  }

  // optional .acu.planning.ObjectDecisions object_decision = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->object_decision_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.DecisionResult)
  return target;
}

size_t DecisionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.DecisionResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .acu.planning.MainDecision main_decision = 1;
    if (has_main_decision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->main_decision_);
    }

    // optional .acu.planning.ObjectDecisions object_decision = 2;
    if (has_object_decision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->object_decision_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecisionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.DecisionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecisionResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.DecisionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.DecisionResult)
    MergeFrom(*source);
  }
}

void DecisionResult::MergeFrom(const DecisionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.DecisionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_main_decision()->::acu::planning::MainDecision::MergeFrom(from.main_decision());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_object_decision()->::acu::planning::ObjectDecisions::MergeFrom(from.object_decision());
    }
  }
}

void DecisionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.DecisionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionResult::CopyFrom(const DecisionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.DecisionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionResult::IsInitialized() const {
  return true;
}

void DecisionResult::Swap(DecisionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecisionResult::InternalSwap(DecisionResult* other) {
  using std::swap;
  swap(main_decision_, other->main_decision_);
  swap(object_decision_, other->object_decision_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecisionResult::GetMetadata() const {
  protobuf_decision_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_decision_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace acu

// @@protoc_insertion_point(global_scope)
