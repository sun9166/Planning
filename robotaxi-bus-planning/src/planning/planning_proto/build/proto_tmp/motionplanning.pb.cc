// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: motionplanning.proto

#include "motionplanning.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace acu {
namespace planning {
class StopPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopPoint>
      _instance;
} _StopPoint_default_instance_;
class PlanningTargetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlanningTarget>
      _instance;
} _PlanningTarget_default_instance_;
class ADCSignalsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ADCSignals>
      _instance;
} _ADCSignals_default_instance_;
class EStopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EStop>
      _instance;
} _EStop_default_instance_;
class TaskStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskStats>
      _instance;
} _TaskStats_default_instance_;
class LatencyStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LatencyStats>
      _instance;
} _LatencyStats_default_instance_;
class RSSInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RSSInfo>
      _instance;
} _RSSInfo_default_instance_;
class ADCTrajectoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ADCTrajectory>
      _instance;
} _ADCTrajectory_default_instance_;
}  // namespace planning
}  // namespace acu
namespace protobuf_motionplanning_2eproto {
void InitDefaultsStopPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_StopPoint_default_instance_;
    new (ptr) ::acu::planning::StopPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::StopPoint::InitAsDefaultInstance();
}

void InitDefaultsStopPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStopPointImpl);
}

void InitDefaultsPlanningTargetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_motionplanning_2eproto::InitDefaultsStopPoint();
  {
    void* ptr = &::acu::planning::_PlanningTarget_default_instance_;
    new (ptr) ::acu::planning::PlanningTarget();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::PlanningTarget::InitAsDefaultInstance();
}

void InitDefaultsPlanningTarget() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlanningTargetImpl);
}

void InitDefaultsADCSignalsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_ADCSignals_default_instance_;
    new (ptr) ::acu::planning::ADCSignals();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::ADCSignals::InitAsDefaultInstance();
}

void InitDefaultsADCSignals() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsADCSignalsImpl);
}

void InitDefaultsEStopImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_EStop_default_instance_;
    new (ptr) ::acu::planning::EStop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::EStop::InitAsDefaultInstance();
}

void InitDefaultsEStop() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEStopImpl);
}

void InitDefaultsTaskStatsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_TaskStats_default_instance_;
    new (ptr) ::acu::planning::TaskStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::TaskStats::InitAsDefaultInstance();
}

void InitDefaultsTaskStats() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTaskStatsImpl);
}

void InitDefaultsLatencyStatsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_motionplanning_2eproto::InitDefaultsTaskStats();
  {
    void* ptr = &::acu::planning::_LatencyStats_default_instance_;
    new (ptr) ::acu::planning::LatencyStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::LatencyStats::InitAsDefaultInstance();
}

void InitDefaultsLatencyStats() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLatencyStatsImpl);
}

void InitDefaultsRSSInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_RSSInfo_default_instance_;
    new (ptr) ::acu::planning::RSSInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::RSSInfo::InitAsDefaultInstance();
}

void InitDefaultsRSSInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRSSInfoImpl);
}

void InitDefaultsADCTrajectoryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_header_2eproto::InitDefaultsHeader();
  protobuf_pnc_5fpoint_2eproto::InitDefaultsTrajectoryPoint();
  protobuf_motionplanning_2eproto::InitDefaultsEStop();
  protobuf_pnc_5fpoint_2eproto::InitDefaultsPathPoint();
  protobuf_decision_2eproto::InitDefaultsDecisionResult();
  protobuf_motionplanning_2eproto::InitDefaultsLatencyStats();
  protobuf_motionplanning_2eproto::InitDefaultsRSSInfo();
  {
    void* ptr = &::acu::planning::_ADCTrajectory_default_instance_;
    new (ptr) ::acu::planning::ADCTrajectory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::ADCTrajectory::InitAsDefaultInstance();
}

void InitDefaultsADCTrajectory() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsADCTrajectoryImpl);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::StopPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::StopPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::StopPoint, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::StopPoint, l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::StopPoint, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::StopPoint, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::StopPoint, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::StopPoint, type_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PlanningTarget, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PlanningTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PlanningTarget, stop_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PlanningTarget, cruise_speed_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ADCSignals, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ADCSignals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ADCSignals, signal_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::EStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::EStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::EStop, is_estop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::EStop, reason_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TaskStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TaskStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TaskStats, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TaskStats, time_ms_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::LatencyStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::LatencyStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::LatencyStats, total_time_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::LatencyStats, task_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::LatencyStats, init_frame_time_ms_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::RSSInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::RSSInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::RSSInfo, is_rss_safe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::RSSInfo, cur_dist_lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::RSSInfo, rss_safe_dist_lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::RSSInfo, acc_lon_range_minimum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::RSSInfo, acc_lon_range_maximum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::RSSInfo, acc_lat_left_range_minimum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::RSSInfo, acc_lat_left_range_maximum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::RSSInfo, acc_lat_right_range_minimum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::RSSInfo, acc_lat_right_range_maximum_),
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ADCTrajectory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ADCTrajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ADCTrajectory, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ADCTrajectory, total_path_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ADCTrajectory, total_path_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ADCTrajectory, trajectory_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ADCTrajectory, estop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ADCTrajectory, path_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ADCTrajectory, is_replan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ADCTrajectory, replan_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ADCTrajectory, gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ADCTrajectory, decision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ADCTrajectory, latency_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ADCTrajectory, right_of_way_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ADCTrajectory, trajectory_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ADCTrajectory, rss_info_),
  1,
  6,
  7,
  ~0u,
  2,
  ~0u,
  8,
  0,
  9,
  3,
  4,
  10,
  11,
  5,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::acu::planning::StopPoint)},
  { 17, 24, sizeof(::acu::planning::PlanningTarget)},
  { 26, 32, sizeof(::acu::planning::ADCSignals)},
  { 33, 40, sizeof(::acu::planning::EStop)},
  { 42, 49, sizeof(::acu::planning::TaskStats)},
  { 51, 59, sizeof(::acu::planning::LatencyStats)},
  { 62, 76, sizeof(::acu::planning::RSSInfo)},
  { 85, 104, sizeof(::acu::planning::ADCTrajectory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_StopPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_PlanningTarget_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_ADCSignals_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_EStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_TaskStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_LatencyStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_RSSInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_ADCTrajectory_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "motionplanning.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024motionplanning.proto\022\014acu.planning\032\014he"
      "ader.proto\032\017pnc_point.proto\032\016decision.pr"
      "oto\"\226\001\n\tStopPoint\022\t\n\001s\030\001 \001(\001\022\t\n\001l\030\002 \001(\001\022"
      "\t\n\001x\030\003 \001(\001\022\t\n\001y\030\004 \001(\001\022\017\n\007heading\030\005 \001(\001\0220"
      "\n\004type\030\006 \001(\0162\034.acu.planning.StopPoint.Ty"
      "pe:\004HARD\"\032\n\004Type\022\010\n\004HARD\020\000\022\010\n\004SOFT\020\001\"S\n\016"
      "PlanningTarget\022+\n\nstop_point\030\001 \001(\0132\027.acu"
      ".planning.StopPoint\022\024\n\014cruise_speed\030\002 \001("
      "\001\"\273\001\n\nADCSignals\0223\n\006signal\030\001 \003(\0162#.acu.p"
      "lanning.ADCSignals.SignalType\"x\n\nSignalT"
      "ype\022\r\n\tLEFT_TURN\020\001\022\016\n\nRIGHT_TURN\020\002\022\022\n\016LO"
      "W_BEAM_LIGHT\020\003\022\023\n\017HIGH_BEAM_LIGHT\020\004\022\r\n\tF"
      "OG_LIGHT\020\005\022\023\n\017EMERGENCY_LIGHT\020\006\")\n\005EStop"
      "\022\020\n\010is_estop\030\001 \001(\010\022\016\n\006reason\030\002 \001(\t\"*\n\tTa"
      "skStats\022\014\n\004name\030\001 \001(\t\022\017\n\007time_ms\030\002 \001(\001\"n"
      "\n\014LatencyStats\022\025\n\rtotal_time_ms\030\001 \001(\001\022+\n"
      "\ntask_stats\030\002 \003(\0132\027.acu.planning.TaskSta"
      "ts\022\032\n\022init_frame_time_ms\030\003 \001(\001\"\237\002\n\007RSSIn"
      "fo\022\023\n\013is_rss_safe\030\001 \001(\010\022\024\n\014cur_dist_lon\030"
      "\002 \001(\001\022\031\n\021rss_safe_dist_lon\030\003 \001(\001\022\035\n\025acc_"
      "lon_range_minimum\030\004 \001(\001\022\035\n\025acc_lon_range"
      "_maximum\030\005 \001(\001\022\"\n\032acc_lat_left_range_min"
      "imum\030\006 \001(\001\022\"\n\032acc_lat_left_range_maximum"
      "\030\007 \001(\001\022#\n\033acc_lat_right_range_minimum\030\010 "
      "\001(\001\022#\n\033acc_lat_right_range_maximum\030\t \001(\001"
      "\"\327\005\n\rADCTrajectory\022\"\n\006header\030\001 \001(\0132\022.acu"
      ".common.Header\022\031\n\021total_path_length\030\002 \001("
      "\001\022\027\n\017total_path_time\030\003 \001(\001\0225\n\020trajectory"
      "_point\030\014 \003(\0132\033.acu.common.TrajectoryPoin"
      "t\022\"\n\005estop\030\006 \001(\0132\023.acu.planning.EStop\022)\n"
      "\npath_point\030\r \003(\0132\025.acu.common.PathPoint"
      "\022\030\n\tis_replan\030\t \001(\010:\005false\022\025\n\rreplan_rea"
      "son\030\026 \001(\t\022\014\n\004gear\030\n \001(\005\022.\n\010decision\030\016 \001("
      "\0132\034.acu.planning.DecisionResult\0221\n\rlaten"
      "cy_stats\030\017 \001(\0132\032.acu.planning.LatencySta"
      "ts\022I\n\023right_of_way_status\030\021 \001(\0162,.acu.pl"
      "anning.ADCTrajectory.RightOfWayStatus\022L\n"
      "\017trajectory_type\030\025 \001(\0162*.acu.planning.AD"
      "CTrajectory.TrajectoryType:\007UNKNOWN\022\'\n\010r"
      "ss_info\030d \001(\0132\025.acu.planning.RSSInfo\"2\n\020"
      "RightOfWayStatus\022\017\n\013UNPROTECTED\020\000\022\r\n\tPRO"
      "TECTED\020\001\"P\n\016TrajectoryType\022\013\n\007UNKNOWN\020\000\022"
      "\n\n\006NORMAL\020\001\022\021\n\rPATH_FALLBACK\020\002\022\022\n\016SPEED_"
      "FALLBACK\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1730);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "motionplanning.proto", &protobuf_RegisterTypes);
  ::protobuf_header_2eproto::AddDescriptors();
  ::protobuf_pnc_5fpoint_2eproto::AddDescriptors();
  ::protobuf_decision_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_motionplanning_2eproto
namespace acu {
namespace planning {
const ::google::protobuf::EnumDescriptor* StopPoint_Type_descriptor() {
  protobuf_motionplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_motionplanning_2eproto::file_level_enum_descriptors[0];
}
bool StopPoint_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const StopPoint_Type StopPoint::HARD;
const StopPoint_Type StopPoint::SOFT;
const StopPoint_Type StopPoint::Type_MIN;
const StopPoint_Type StopPoint::Type_MAX;
const int StopPoint::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ADCSignals_SignalType_descriptor() {
  protobuf_motionplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_motionplanning_2eproto::file_level_enum_descriptors[1];
}
bool ADCSignals_SignalType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ADCSignals_SignalType ADCSignals::LEFT_TURN;
const ADCSignals_SignalType ADCSignals::RIGHT_TURN;
const ADCSignals_SignalType ADCSignals::LOW_BEAM_LIGHT;
const ADCSignals_SignalType ADCSignals::HIGH_BEAM_LIGHT;
const ADCSignals_SignalType ADCSignals::FOG_LIGHT;
const ADCSignals_SignalType ADCSignals::EMERGENCY_LIGHT;
const ADCSignals_SignalType ADCSignals::SignalType_MIN;
const ADCSignals_SignalType ADCSignals::SignalType_MAX;
const int ADCSignals::SignalType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ADCTrajectory_RightOfWayStatus_descriptor() {
  protobuf_motionplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_motionplanning_2eproto::file_level_enum_descriptors[2];
}
bool ADCTrajectory_RightOfWayStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ADCTrajectory_RightOfWayStatus ADCTrajectory::UNPROTECTED;
const ADCTrajectory_RightOfWayStatus ADCTrajectory::PROTECTED;
const ADCTrajectory_RightOfWayStatus ADCTrajectory::RightOfWayStatus_MIN;
const ADCTrajectory_RightOfWayStatus ADCTrajectory::RightOfWayStatus_MAX;
const int ADCTrajectory::RightOfWayStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ADCTrajectory_TrajectoryType_descriptor() {
  protobuf_motionplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_motionplanning_2eproto::file_level_enum_descriptors[3];
}
bool ADCTrajectory_TrajectoryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ADCTrajectory_TrajectoryType ADCTrajectory::UNKNOWN;
const ADCTrajectory_TrajectoryType ADCTrajectory::NORMAL;
const ADCTrajectory_TrajectoryType ADCTrajectory::PATH_FALLBACK;
const ADCTrajectory_TrajectoryType ADCTrajectory::SPEED_FALLBACK;
const ADCTrajectory_TrajectoryType ADCTrajectory::TrajectoryType_MIN;
const ADCTrajectory_TrajectoryType ADCTrajectory::TrajectoryType_MAX;
const int ADCTrajectory::TrajectoryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void StopPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopPoint::kSFieldNumber;
const int StopPoint::kLFieldNumber;
const int StopPoint::kXFieldNumber;
const int StopPoint::kYFieldNumber;
const int StopPoint::kHeadingFieldNumber;
const int StopPoint::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopPoint::StopPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_motionplanning_2eproto::InitDefaultsStopPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.StopPoint)
}
StopPoint::StopPoint(const StopPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&s_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.StopPoint)
}

void StopPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&s_)) + sizeof(type_));
}

StopPoint::~StopPoint() {
  // @@protoc_insertion_point(destructor:acu.planning.StopPoint)
  SharedDtor();
}

void StopPoint::SharedDtor() {
}

void StopPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopPoint::descriptor() {
  ::protobuf_motionplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_motionplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StopPoint& StopPoint::default_instance() {
  ::protobuf_motionplanning_2eproto::InitDefaultsStopPoint();
  return *internal_default_instance();
}

StopPoint* StopPoint::New(::google::protobuf::Arena* arena) const {
  StopPoint* n = new StopPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.StopPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&s_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StopPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.StopPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double l = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.StopPoint.Type type = 6 [default = HARD];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::planning::StopPoint_Type_IsValid(value)) {
            set_type(static_cast< ::acu::planning::StopPoint_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.StopPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.StopPoint)
  return false;
#undef DO_
}

void StopPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.StopPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double l = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->l(), output);
  }

  // optional double x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // optional double y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // optional double heading = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading(), output);
  }

  // optional .acu.planning.StopPoint.Type type = 6 [default = HARD];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.StopPoint)
}

::google::protobuf::uint8* StopPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.StopPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double l = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->l(), target);
  }

  // optional double x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // optional double y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // optional double heading = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading(), target);
  }

  // optional .acu.planning.StopPoint.Type type = 6 [default = HARD];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.StopPoint)
  return target;
}

size_t StopPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.StopPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional double s = 1;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double l = 2;
    if (has_l()) {
      total_size += 1 + 8;
    }

    // optional double x = 3;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 4;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double heading = 5;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional .acu.planning.StopPoint.Type type = 6 [default = HARD];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.StopPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const StopPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.StopPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.StopPoint)
    MergeFrom(*source);
  }
}

void StopPoint::MergeFrom(const StopPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.StopPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      l_ = from.l_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StopPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.StopPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopPoint::CopyFrom(const StopPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.StopPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopPoint::IsInitialized() const {
  return true;
}

void StopPoint::Swap(StopPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopPoint::InternalSwap(StopPoint* other) {
  using std::swap;
  swap(s_, other->s_);
  swap(l_, other->l_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(heading_, other->heading_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopPoint::GetMetadata() const {
  protobuf_motionplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_motionplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlanningTarget::InitAsDefaultInstance() {
  ::acu::planning::_PlanningTarget_default_instance_._instance.get_mutable()->stop_point_ = const_cast< ::acu::planning::StopPoint*>(
      ::acu::planning::StopPoint::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningTarget::kStopPointFieldNumber;
const int PlanningTarget::kCruiseSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningTarget::PlanningTarget()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_motionplanning_2eproto::InitDefaultsPlanningTarget();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.PlanningTarget)
}
PlanningTarget::PlanningTarget(const PlanningTarget& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stop_point()) {
    stop_point_ = new ::acu::planning::StopPoint(*from.stop_point_);
  } else {
    stop_point_ = NULL;
  }
  cruise_speed_ = from.cruise_speed_;
  // @@protoc_insertion_point(copy_constructor:acu.planning.PlanningTarget)
}

void PlanningTarget::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stop_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cruise_speed_) -
      reinterpret_cast<char*>(&stop_point_)) + sizeof(cruise_speed_));
}

PlanningTarget::~PlanningTarget() {
  // @@protoc_insertion_point(destructor:acu.planning.PlanningTarget)
  SharedDtor();
}

void PlanningTarget::SharedDtor() {
  if (this != internal_default_instance()) delete stop_point_;
}

void PlanningTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningTarget::descriptor() {
  ::protobuf_motionplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_motionplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanningTarget& PlanningTarget::default_instance() {
  ::protobuf_motionplanning_2eproto::InitDefaultsPlanningTarget();
  return *internal_default_instance();
}

PlanningTarget* PlanningTarget::New(::google::protobuf::Arena* arena) const {
  PlanningTarget* n = new PlanningTarget;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanningTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.PlanningTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stop_point_ != NULL);
    stop_point_->Clear();
  }
  cruise_speed_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlanningTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.PlanningTarget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.planning.StopPoint stop_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cruise_speed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_cruise_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cruise_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.PlanningTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.PlanningTarget)
  return false;
#undef DO_
}

void PlanningTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.PlanningTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.StopPoint stop_point = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stop_point_, output);
  }

  // optional double cruise_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cruise_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.PlanningTarget)
}

::google::protobuf::uint8* PlanningTarget::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.PlanningTarget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.StopPoint stop_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->stop_point_, deterministic, target);
  }

  // optional double cruise_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cruise_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.PlanningTarget)
  return target;
}

size_t PlanningTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.PlanningTarget)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .acu.planning.StopPoint stop_point = 1;
    if (has_stop_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->stop_point_);
    }

    // optional double cruise_speed = 2;
    if (has_cruise_speed()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningTarget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.PlanningTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningTarget* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningTarget>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.PlanningTarget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.PlanningTarget)
    MergeFrom(*source);
  }
}

void PlanningTarget::MergeFrom(const PlanningTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.PlanningTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stop_point()->::acu::planning::StopPoint::MergeFrom(from.stop_point());
    }
    if (cached_has_bits & 0x00000002u) {
      cruise_speed_ = from.cruise_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningTarget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.PlanningTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningTarget::CopyFrom(const PlanningTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.PlanningTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningTarget::IsInitialized() const {
  return true;
}

void PlanningTarget::Swap(PlanningTarget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningTarget::InternalSwap(PlanningTarget* other) {
  using std::swap;
  swap(stop_point_, other->stop_point_);
  swap(cruise_speed_, other->cruise_speed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanningTarget::GetMetadata() const {
  protobuf_motionplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_motionplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ADCSignals::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCSignals::kSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCSignals::ADCSignals()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_motionplanning_2eproto::InitDefaultsADCSignals();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.ADCSignals)
}
ADCSignals::ADCSignals(const ADCSignals& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      signal_(from.signal_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:acu.planning.ADCSignals)
}

void ADCSignals::SharedCtor() {
  _cached_size_ = 0;
}

ADCSignals::~ADCSignals() {
  // @@protoc_insertion_point(destructor:acu.planning.ADCSignals)
  SharedDtor();
}

void ADCSignals::SharedDtor() {
}

void ADCSignals::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCSignals::descriptor() {
  ::protobuf_motionplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_motionplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ADCSignals& ADCSignals::default_instance() {
  ::protobuf_motionplanning_2eproto::InitDefaultsADCSignals();
  return *internal_default_instance();
}

ADCSignals* ADCSignals::New(::google::protobuf::Arena* arena) const {
  ADCSignals* n = new ADCSignals;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADCSignals::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.ADCSignals)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signal_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ADCSignals::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.ADCSignals)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .acu.planning.ADCSignals.SignalType signal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::planning::ADCSignals_SignalType_IsValid(value)) {
            add_signal(static_cast< ::acu::planning::ADCSignals_SignalType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::acu::planning::ADCSignals_SignalType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_signal())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.ADCSignals)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.ADCSignals)
  return false;
#undef DO_
}

void ADCSignals::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.ADCSignals)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .acu.planning.ADCSignals.SignalType signal = 1;
  for (int i = 0, n = this->signal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->signal(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.ADCSignals)
}

::google::protobuf::uint8* ADCSignals::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.ADCSignals)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .acu.planning.ADCSignals.SignalType signal = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->signal_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.ADCSignals)
  return target;
}

size_t ADCSignals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.ADCSignals)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.planning.ADCSignals.SignalType signal = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->signal_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->signal(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCSignals::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.ADCSignals)
  GOOGLE_DCHECK_NE(&from, this);
  const ADCSignals* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCSignals>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.ADCSignals)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.ADCSignals)
    MergeFrom(*source);
  }
}

void ADCSignals::MergeFrom(const ADCSignals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.ADCSignals)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_.MergeFrom(from.signal_);
}

void ADCSignals::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.ADCSignals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCSignals::CopyFrom(const ADCSignals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.ADCSignals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCSignals::IsInitialized() const {
  return true;
}

void ADCSignals::Swap(ADCSignals* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCSignals::InternalSwap(ADCSignals* other) {
  using std::swap;
  signal_.InternalSwap(&other->signal_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADCSignals::GetMetadata() const {
  protobuf_motionplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_motionplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EStop::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EStop::kIsEstopFieldNumber;
const int EStop::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EStop::EStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_motionplanning_2eproto::InitDefaultsEStop();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.EStop)
}
EStop::EStop(const EStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  is_estop_ = from.is_estop_;
  // @@protoc_insertion_point(copy_constructor:acu.planning.EStop)
}

void EStop::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_estop_ = false;
}

EStop::~EStop() {
  // @@protoc_insertion_point(destructor:acu.planning.EStop)
  SharedDtor();
}

void EStop::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EStop::descriptor() {
  ::protobuf_motionplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_motionplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EStop& EStop::default_instance() {
  ::protobuf_motionplanning_2eproto::InitDefaultsEStop();
  return *internal_default_instance();
}

EStop* EStop::New(::google::protobuf::Arena* arena) const {
  EStop* n = new EStop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EStop::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.EStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*reason_.UnsafeRawStringPointer())->clear();
  }
  is_estop_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.EStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_estop = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_estop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_estop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acu.planning.EStop.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.EStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.EStop)
  return false;
#undef DO_
}

void EStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.EStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_estop = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_estop(), output);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.planning.EStop.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.EStop)
}

::google::protobuf::uint8* EStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.EStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_estop = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_estop(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.planning.EStop.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.EStop)
  return target;
}

size_t EStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.EStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional bool is_estop = 1;
    if (has_is_estop()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.EStop)
  GOOGLE_DCHECK_NE(&from, this);
  const EStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.EStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.EStop)
    MergeFrom(*source);
  }
}

void EStop::MergeFrom(const EStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.EStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_estop_ = from.is_estop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.EStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EStop::CopyFrom(const EStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.EStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EStop::IsInitialized() const {
  return true;
}

void EStop::Swap(EStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EStop::InternalSwap(EStop* other) {
  using std::swap;
  reason_.Swap(&other->reason_);
  swap(is_estop_, other->is_estop_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EStop::GetMetadata() const {
  protobuf_motionplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_motionplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaskStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskStats::kNameFieldNumber;
const int TaskStats::kTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskStats::TaskStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_motionplanning_2eproto::InitDefaultsTaskStats();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.TaskStats)
}
TaskStats::TaskStats(const TaskStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  time_ms_ = from.time_ms_;
  // @@protoc_insertion_point(copy_constructor:acu.planning.TaskStats)
}

void TaskStats::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ms_ = 0;
}

TaskStats::~TaskStats() {
  // @@protoc_insertion_point(destructor:acu.planning.TaskStats)
  SharedDtor();
}

void TaskStats::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskStats::descriptor() {
  ::protobuf_motionplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_motionplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskStats& TaskStats::default_instance() {
  ::protobuf_motionplanning_2eproto::InitDefaultsTaskStats();
  return *internal_default_instance();
}

TaskStats* TaskStats::New(::google::protobuf::Arena* arena) const {
  TaskStats* n = new TaskStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskStats::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.TaskStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  time_ms_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.TaskStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acu.planning.TaskStats.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.TaskStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.TaskStats)
  return false;
#undef DO_
}

void TaskStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.TaskStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.planning.TaskStats.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional double time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.TaskStats)
}

::google::protobuf::uint8* TaskStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.TaskStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.planning.TaskStats.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional double time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.TaskStats)
  return target;
}

size_t TaskStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.TaskStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double time_ms = 2;
    if (has_time_ms()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.TaskStats)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.TaskStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.TaskStats)
    MergeFrom(*source);
  }
}

void TaskStats::MergeFrom(const TaskStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.TaskStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_ms_ = from.time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaskStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.TaskStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStats::CopyFrom(const TaskStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.TaskStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStats::IsInitialized() const {
  return true;
}

void TaskStats::Swap(TaskStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskStats::InternalSwap(TaskStats* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(time_ms_, other->time_ms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskStats::GetMetadata() const {
  protobuf_motionplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_motionplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LatencyStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatencyStats::kTotalTimeMsFieldNumber;
const int LatencyStats::kTaskStatsFieldNumber;
const int LatencyStats::kInitFrameTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatencyStats::LatencyStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_motionplanning_2eproto::InitDefaultsLatencyStats();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.LatencyStats)
}
LatencyStats::LatencyStats(const LatencyStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      task_stats_(from.task_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_time_ms_, &from.total_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&init_frame_time_ms_) -
    reinterpret_cast<char*>(&total_time_ms_)) + sizeof(init_frame_time_ms_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.LatencyStats)
}

void LatencyStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&total_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&init_frame_time_ms_) -
      reinterpret_cast<char*>(&total_time_ms_)) + sizeof(init_frame_time_ms_));
}

LatencyStats::~LatencyStats() {
  // @@protoc_insertion_point(destructor:acu.planning.LatencyStats)
  SharedDtor();
}

void LatencyStats::SharedDtor() {
}

void LatencyStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatencyStats::descriptor() {
  ::protobuf_motionplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_motionplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LatencyStats& LatencyStats::default_instance() {
  ::protobuf_motionplanning_2eproto::InitDefaultsLatencyStats();
  return *internal_default_instance();
}

LatencyStats* LatencyStats::New(::google::protobuf::Arena* arena) const {
  LatencyStats* n = new LatencyStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LatencyStats::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.LatencyStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&total_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&init_frame_time_ms_) -
        reinterpret_cast<char*>(&total_time_ms_)) + sizeof(init_frame_time_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LatencyStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.LatencyStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double total_time_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_total_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.planning.TaskStats task_stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_task_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double init_frame_time_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_init_frame_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &init_frame_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.LatencyStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.LatencyStats)
  return false;
#undef DO_
}

void LatencyStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.LatencyStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_time_ms(), output);
  }

  // repeated .acu.planning.TaskStats task_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->task_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->task_stats(static_cast<int>(i)), output);
  }

  // optional double init_frame_time_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->init_frame_time_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.LatencyStats)
}

::google::protobuf::uint8* LatencyStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.LatencyStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_time_ms(), target);
  }

  // repeated .acu.planning.TaskStats task_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->task_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->task_stats(static_cast<int>(i)), deterministic, target);
  }

  // optional double init_frame_time_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->init_frame_time_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.LatencyStats)
  return target;
}

size_t LatencyStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.LatencyStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.planning.TaskStats task_stats = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->task_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->task_stats(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional double total_time_ms = 1;
    if (has_total_time_ms()) {
      total_size += 1 + 8;
    }

    // optional double init_frame_time_ms = 3;
    if (has_init_frame_time_ms()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatencyStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatencyStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.LatencyStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.LatencyStats)
    MergeFrom(*source);
  }
}

void LatencyStats::MergeFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_stats_.MergeFrom(from.task_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      total_time_ms_ = from.total_time_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      init_frame_time_ms_ = from.init_frame_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatencyStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyStats::CopyFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyStats::IsInitialized() const {
  return true;
}

void LatencyStats::Swap(LatencyStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatencyStats::InternalSwap(LatencyStats* other) {
  using std::swap;
  task_stats_.InternalSwap(&other->task_stats_);
  swap(total_time_ms_, other->total_time_ms_);
  swap(init_frame_time_ms_, other->init_frame_time_ms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LatencyStats::GetMetadata() const {
  protobuf_motionplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_motionplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RSSInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RSSInfo::kIsRssSafeFieldNumber;
const int RSSInfo::kCurDistLonFieldNumber;
const int RSSInfo::kRssSafeDistLonFieldNumber;
const int RSSInfo::kAccLonRangeMinimumFieldNumber;
const int RSSInfo::kAccLonRangeMaximumFieldNumber;
const int RSSInfo::kAccLatLeftRangeMinimumFieldNumber;
const int RSSInfo::kAccLatLeftRangeMaximumFieldNumber;
const int RSSInfo::kAccLatRightRangeMinimumFieldNumber;
const int RSSInfo::kAccLatRightRangeMaximumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RSSInfo::RSSInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_motionplanning_2eproto::InitDefaultsRSSInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.RSSInfo)
}
RSSInfo::RSSInfo(const RSSInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_dist_lon_, &from.cur_dist_lon_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_rss_safe_) -
    reinterpret_cast<char*>(&cur_dist_lon_)) + sizeof(is_rss_safe_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.RSSInfo)
}

void RSSInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cur_dist_lon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_rss_safe_) -
      reinterpret_cast<char*>(&cur_dist_lon_)) + sizeof(is_rss_safe_));
}

RSSInfo::~RSSInfo() {
  // @@protoc_insertion_point(destructor:acu.planning.RSSInfo)
  SharedDtor();
}

void RSSInfo::SharedDtor() {
}

void RSSInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSSInfo::descriptor() {
  ::protobuf_motionplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_motionplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RSSInfo& RSSInfo::default_instance() {
  ::protobuf_motionplanning_2eproto::InitDefaultsRSSInfo();
  return *internal_default_instance();
}

RSSInfo* RSSInfo::New(::google::protobuf::Arena* arena) const {
  RSSInfo* n = new RSSInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RSSInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.RSSInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&cur_dist_lon_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acc_lat_right_range_maximum_) -
        reinterpret_cast<char*>(&cur_dist_lon_)) + sizeof(acc_lat_right_range_maximum_));
  }
  is_rss_safe_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RSSInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.RSSInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_rss_safe = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_rss_safe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rss_safe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cur_dist_lon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_cur_dist_lon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cur_dist_lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rss_safe_dist_lon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_rss_safe_dist_lon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rss_safe_dist_lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lon_range_minimum = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_acc_lon_range_minimum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lon_range_minimum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lon_range_maximum = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_acc_lon_range_maximum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lon_range_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lat_left_range_minimum = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_acc_lat_left_range_minimum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lat_left_range_minimum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lat_left_range_maximum = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_acc_lat_left_range_maximum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lat_left_range_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lat_right_range_minimum = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_acc_lat_right_range_minimum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lat_right_range_minimum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lat_right_range_maximum = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_acc_lat_right_range_maximum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lat_right_range_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.RSSInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.RSSInfo)
  return false;
#undef DO_
}

void RSSInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.RSSInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_rss_safe = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_rss_safe(), output);
  }

  // optional double cur_dist_lon = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cur_dist_lon(), output);
  }

  // optional double rss_safe_dist_lon = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rss_safe_dist_lon(), output);
  }

  // optional double acc_lon_range_minimum = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->acc_lon_range_minimum(), output);
  }

  // optional double acc_lon_range_maximum = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->acc_lon_range_maximum(), output);
  }

  // optional double acc_lat_left_range_minimum = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->acc_lat_left_range_minimum(), output);
  }

  // optional double acc_lat_left_range_maximum = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->acc_lat_left_range_maximum(), output);
  }

  // optional double acc_lat_right_range_minimum = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->acc_lat_right_range_minimum(), output);
  }

  // optional double acc_lat_right_range_maximum = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->acc_lat_right_range_maximum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.RSSInfo)
}

::google::protobuf::uint8* RSSInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.RSSInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_rss_safe = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_rss_safe(), target);
  }

  // optional double cur_dist_lon = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cur_dist_lon(), target);
  }

  // optional double rss_safe_dist_lon = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rss_safe_dist_lon(), target);
  }

  // optional double acc_lon_range_minimum = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->acc_lon_range_minimum(), target);
  }

  // optional double acc_lon_range_maximum = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->acc_lon_range_maximum(), target);
  }

  // optional double acc_lat_left_range_minimum = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->acc_lat_left_range_minimum(), target);
  }

  // optional double acc_lat_left_range_maximum = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->acc_lat_left_range_maximum(), target);
  }

  // optional double acc_lat_right_range_minimum = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->acc_lat_right_range_minimum(), target);
  }

  // optional double acc_lat_right_range_maximum = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->acc_lat_right_range_maximum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.RSSInfo)
  return target;
}

size_t RSSInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.RSSInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double cur_dist_lon = 2;
    if (has_cur_dist_lon()) {
      total_size += 1 + 8;
    }

    // optional double rss_safe_dist_lon = 3;
    if (has_rss_safe_dist_lon()) {
      total_size += 1 + 8;
    }

    // optional double acc_lon_range_minimum = 4;
    if (has_acc_lon_range_minimum()) {
      total_size += 1 + 8;
    }

    // optional double acc_lon_range_maximum = 5;
    if (has_acc_lon_range_maximum()) {
      total_size += 1 + 8;
    }

    // optional double acc_lat_left_range_minimum = 6;
    if (has_acc_lat_left_range_minimum()) {
      total_size += 1 + 8;
    }

    // optional double acc_lat_left_range_maximum = 7;
    if (has_acc_lat_left_range_maximum()) {
      total_size += 1 + 8;
    }

    // optional double acc_lat_right_range_minimum = 8;
    if (has_acc_lat_right_range_minimum()) {
      total_size += 1 + 8;
    }

    // optional double acc_lat_right_range_maximum = 9;
    if (has_acc_lat_right_range_maximum()) {
      total_size += 1 + 8;
    }

  }
  // optional bool is_rss_safe = 1;
  if (has_is_rss_safe()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSSInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.RSSInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RSSInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RSSInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.RSSInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.RSSInfo)
    MergeFrom(*source);
  }
}

void RSSInfo::MergeFrom(const RSSInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.RSSInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      cur_dist_lon_ = from.cur_dist_lon_;
    }
    if (cached_has_bits & 0x00000002u) {
      rss_safe_dist_lon_ = from.rss_safe_dist_lon_;
    }
    if (cached_has_bits & 0x00000004u) {
      acc_lon_range_minimum_ = from.acc_lon_range_minimum_;
    }
    if (cached_has_bits & 0x00000008u) {
      acc_lon_range_maximum_ = from.acc_lon_range_maximum_;
    }
    if (cached_has_bits & 0x00000010u) {
      acc_lat_left_range_minimum_ = from.acc_lat_left_range_minimum_;
    }
    if (cached_has_bits & 0x00000020u) {
      acc_lat_left_range_maximum_ = from.acc_lat_left_range_maximum_;
    }
    if (cached_has_bits & 0x00000040u) {
      acc_lat_right_range_minimum_ = from.acc_lat_right_range_minimum_;
    }
    if (cached_has_bits & 0x00000080u) {
      acc_lat_right_range_maximum_ = from.acc_lat_right_range_maximum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_is_rss_safe(from.is_rss_safe());
  }
}

void RSSInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.RSSInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSSInfo::CopyFrom(const RSSInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.RSSInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSSInfo::IsInitialized() const {
  return true;
}

void RSSInfo::Swap(RSSInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RSSInfo::InternalSwap(RSSInfo* other) {
  using std::swap;
  swap(cur_dist_lon_, other->cur_dist_lon_);
  swap(rss_safe_dist_lon_, other->rss_safe_dist_lon_);
  swap(acc_lon_range_minimum_, other->acc_lon_range_minimum_);
  swap(acc_lon_range_maximum_, other->acc_lon_range_maximum_);
  swap(acc_lat_left_range_minimum_, other->acc_lat_left_range_minimum_);
  swap(acc_lat_left_range_maximum_, other->acc_lat_left_range_maximum_);
  swap(acc_lat_right_range_minimum_, other->acc_lat_right_range_minimum_);
  swap(acc_lat_right_range_maximum_, other->acc_lat_right_range_maximum_);
  swap(is_rss_safe_, other->is_rss_safe_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RSSInfo::GetMetadata() const {
  protobuf_motionplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_motionplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ADCTrajectory::InitAsDefaultInstance() {
  ::acu::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->header_ = const_cast< ::acu::common::Header*>(
      ::acu::common::Header::internal_default_instance());
  ::acu::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->estop_ = const_cast< ::acu::planning::EStop*>(
      ::acu::planning::EStop::internal_default_instance());
  ::acu::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->decision_ = const_cast< ::acu::planning::DecisionResult*>(
      ::acu::planning::DecisionResult::internal_default_instance());
  ::acu::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->latency_stats_ = const_cast< ::acu::planning::LatencyStats*>(
      ::acu::planning::LatencyStats::internal_default_instance());
  ::acu::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->rss_info_ = const_cast< ::acu::planning::RSSInfo*>(
      ::acu::planning::RSSInfo::internal_default_instance());
}
void ADCTrajectory::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
void ADCTrajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
void ADCTrajectory::clear_path_point() {
  path_point_.Clear();
}
void ADCTrajectory::clear_decision() {
  if (decision_ != NULL) decision_->Clear();
  clear_has_decision();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCTrajectory::kHeaderFieldNumber;
const int ADCTrajectory::kTotalPathLengthFieldNumber;
const int ADCTrajectory::kTotalPathTimeFieldNumber;
const int ADCTrajectory::kTrajectoryPointFieldNumber;
const int ADCTrajectory::kEstopFieldNumber;
const int ADCTrajectory::kPathPointFieldNumber;
const int ADCTrajectory::kIsReplanFieldNumber;
const int ADCTrajectory::kReplanReasonFieldNumber;
const int ADCTrajectory::kGearFieldNumber;
const int ADCTrajectory::kDecisionFieldNumber;
const int ADCTrajectory::kLatencyStatsFieldNumber;
const int ADCTrajectory::kRightOfWayStatusFieldNumber;
const int ADCTrajectory::kTrajectoryTypeFieldNumber;
const int ADCTrajectory::kRssInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCTrajectory::ADCTrajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_motionplanning_2eproto::InitDefaultsADCTrajectory();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.ADCTrajectory)
}
ADCTrajectory::ADCTrajectory(const ADCTrajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      trajectory_point_(from.trajectory_point_),
      path_point_(from.path_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  replan_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_replan_reason()) {
    replan_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replan_reason_);
  }
  if (from.has_header()) {
    header_ = new ::acu::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_estop()) {
    estop_ = new ::acu::planning::EStop(*from.estop_);
  } else {
    estop_ = NULL;
  }
  if (from.has_decision()) {
    decision_ = new ::acu::planning::DecisionResult(*from.decision_);
  } else {
    decision_ = NULL;
  }
  if (from.has_latency_stats()) {
    latency_stats_ = new ::acu::planning::LatencyStats(*from.latency_stats_);
  } else {
    latency_stats_ = NULL;
  }
  if (from.has_rss_info()) {
    rss_info_ = new ::acu::planning::RSSInfo(*from.rss_info_);
  } else {
    rss_info_ = NULL;
  }
  ::memcpy(&total_path_length_, &from.total_path_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&trajectory_type_) -
    reinterpret_cast<char*>(&total_path_length_)) + sizeof(trajectory_type_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.ADCTrajectory)
}

void ADCTrajectory::SharedCtor() {
  _cached_size_ = 0;
  replan_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(trajectory_type_));
}

ADCTrajectory::~ADCTrajectory() {
  // @@protoc_insertion_point(destructor:acu.planning.ADCTrajectory)
  SharedDtor();
}

void ADCTrajectory::SharedDtor() {
  replan_reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete estop_;
  if (this != internal_default_instance()) delete decision_;
  if (this != internal_default_instance()) delete latency_stats_;
  if (this != internal_default_instance()) delete rss_info_;
}

void ADCTrajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ADCTrajectory::descriptor() {
  ::protobuf_motionplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_motionplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ADCTrajectory& ADCTrajectory::default_instance() {
  ::protobuf_motionplanning_2eproto::InitDefaultsADCTrajectory();
  return *internal_default_instance();
}

ADCTrajectory* ADCTrajectory::New(::google::protobuf::Arena* arena) const {
  ADCTrajectory* n = new ADCTrajectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADCTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.ADCTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_point_.Clear();
  path_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!replan_reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*replan_reason_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(estop_ != NULL);
      estop_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(decision_ != NULL);
      decision_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(latency_stats_ != NULL);
      latency_stats_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(rss_info_ != NULL);
      rss_info_->Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&total_path_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_path_time_) -
        reinterpret_cast<char*>(&total_path_length_)) + sizeof(total_path_time_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&is_replan_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trajectory_type_) -
        reinterpret_cast<char*>(&is_replan_)) + sizeof(trajectory_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ADCTrajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.ADCTrajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double total_path_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_total_path_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double total_path_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_total_path_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.EStop estop = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_estop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_replan = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_is_replan();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_replan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gear = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_gear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.common.TrajectoryPoint trajectory_point = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.common.PathPoint path_point = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_path_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.DecisionResult decision = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_decision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.LatencyStats latency_stats = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_latency_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::planning::ADCTrajectory_RightOfWayStatus_IsValid(value)) {
            set_right_of_way_status(static_cast< ::acu::planning::ADCTrajectory_RightOfWayStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                17, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::planning::ADCTrajectory_TrajectoryType_IsValid(value)) {
            set_trajectory_type(static_cast< ::acu::planning::ADCTrajectory_TrajectoryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                21, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string replan_reason = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replan_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->replan_reason().data(), static_cast<int>(this->replan_reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acu.planning.ADCTrajectory.replan_reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.RSSInfo rss_info = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rss_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.ADCTrajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.ADCTrajectory)
  return false;
#undef DO_
}

void ADCTrajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.ADCTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional double total_path_length = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->total_path_length(), output);
  }

  // optional double total_path_time = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->total_path_time(), output);
  }

  // optional .acu.planning.EStop estop = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->estop_, output);
  }

  // optional bool is_replan = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_replan(), output);
  }

  // optional int32 gear = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gear(), output);
  }

  // repeated .acu.common.TrajectoryPoint trajectory_point = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->trajectory_point(static_cast<int>(i)), output);
  }

  // repeated .acu.common.PathPoint path_point = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->path_point(static_cast<int>(i)), output);
  }

  // optional .acu.planning.DecisionResult decision = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->decision_, output);
  }

  // optional .acu.planning.LatencyStats latency_stats = 15;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->latency_stats_, output);
  }

  // optional .acu.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->right_of_way_status(), output);
  }

  // optional .acu.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->trajectory_type(), output);
  }

  // optional string replan_reason = 22;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replan_reason().data(), static_cast<int>(this->replan_reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.planning.ADCTrajectory.replan_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->replan_reason(), output);
  }

  // optional .acu.planning.RSSInfo rss_info = 100;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *this->rss_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.ADCTrajectory)
}

::google::protobuf::uint8* ADCTrajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.ADCTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // optional double total_path_length = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->total_path_length(), target);
  }

  // optional double total_path_time = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->total_path_time(), target);
  }

  // optional .acu.planning.EStop estop = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->estop_, deterministic, target);
  }

  // optional bool is_replan = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_replan(), target);
  }

  // optional int32 gear = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gear(), target);
  }

  // repeated .acu.common.TrajectoryPoint trajectory_point = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->trajectory_point(static_cast<int>(i)), deterministic, target);
  }

  // repeated .acu.common.PathPoint path_point = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->path_point(static_cast<int>(i)), deterministic, target);
  }

  // optional .acu.planning.DecisionResult decision = 14;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, *this->decision_, deterministic, target);
  }

  // optional .acu.planning.LatencyStats latency_stats = 15;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, *this->latency_stats_, deterministic, target);
  }

  // optional .acu.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->right_of_way_status(), target);
  }

  // optional .acu.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->trajectory_type(), target);
  }

  // optional string replan_reason = 22;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replan_reason().data(), static_cast<int>(this->replan_reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.planning.ADCTrajectory.replan_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->replan_reason(), target);
  }

  // optional .acu.planning.RSSInfo rss_info = 100;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, *this->rss_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.ADCTrajectory)
  return target;
}

size_t ADCTrajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.ADCTrajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.common.TrajectoryPoint trajectory_point = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectory_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trajectory_point(static_cast<int>(i)));
    }
  }

  // repeated .acu.common.PathPoint path_point = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->path_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->path_point(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string replan_reason = 22;
    if (has_replan_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->replan_reason());
    }

    // optional .acu.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->header_);
    }

    // optional .acu.planning.EStop estop = 6;
    if (has_estop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->estop_);
    }

    // optional .acu.planning.DecisionResult decision = 14;
    if (has_decision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->decision_);
    }

    // optional .acu.planning.LatencyStats latency_stats = 15;
    if (has_latency_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->latency_stats_);
    }

    // optional .acu.planning.RSSInfo rss_info = 100;
    if (has_rss_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->rss_info_);
    }

    // optional double total_path_length = 2;
    if (has_total_path_length()) {
      total_size += 1 + 8;
    }

    // optional double total_path_time = 3;
    if (has_total_path_time()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional bool is_replan = 9 [default = false];
    if (has_is_replan()) {
      total_size += 1 + 1;
    }

    // optional int32 gear = 10;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gear());
    }

    // optional .acu.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
    if (has_right_of_way_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->right_of_way_status());
    }

    // optional .acu.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
    if (has_trajectory_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trajectory_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADCTrajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.ADCTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const ADCTrajectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCTrajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.ADCTrajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.ADCTrajectory)
    MergeFrom(*source);
  }
}

void ADCTrajectory::MergeFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.ADCTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  path_point_.MergeFrom(from.path_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_replan_reason();
      replan_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replan_reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::acu::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_estop()->::acu::planning::EStop::MergeFrom(from.estop());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_decision()->::acu::planning::DecisionResult::MergeFrom(from.decision());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_latency_stats()->::acu::planning::LatencyStats::MergeFrom(from.latency_stats());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_rss_info()->::acu::planning::RSSInfo::MergeFrom(from.rss_info());
    }
    if (cached_has_bits & 0x00000040u) {
      total_path_length_ = from.total_path_length_;
    }
    if (cached_has_bits & 0x00000080u) {
      total_path_time_ = from.total_path_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      is_replan_ = from.is_replan_;
    }
    if (cached_has_bits & 0x00000200u) {
      gear_ = from.gear_;
    }
    if (cached_has_bits & 0x00000400u) {
      right_of_way_status_ = from.right_of_way_status_;
    }
    if (cached_has_bits & 0x00000800u) {
      trajectory_type_ = from.trajectory_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ADCTrajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.ADCTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCTrajectory::CopyFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.ADCTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectory::IsInitialized() const {
  return true;
}

void ADCTrajectory::Swap(ADCTrajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCTrajectory::InternalSwap(ADCTrajectory* other) {
  using std::swap;
  trajectory_point_.InternalSwap(&other->trajectory_point_);
  path_point_.InternalSwap(&other->path_point_);
  replan_reason_.Swap(&other->replan_reason_);
  swap(header_, other->header_);
  swap(estop_, other->estop_);
  swap(decision_, other->decision_);
  swap(latency_stats_, other->latency_stats_);
  swap(rss_info_, other->rss_info_);
  swap(total_path_length_, other->total_path_length_);
  swap(total_path_time_, other->total_path_time_);
  swap(is_replan_, other->is_replan_);
  swap(gear_, other->gear_);
  swap(right_of_way_status_, other->right_of_way_status_);
  swap(trajectory_type_, other->trajectory_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ADCTrajectory::GetMetadata() const {
  protobuf_motionplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_motionplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace acu

// @@protoc_insertion_point(global_scope)
