// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reference_line_smoother_config.proto

#include "reference_line_smoother_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace acu {
namespace planning {
class QpSplineSmootherConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QpSplineSmootherConfig>
      _instance;
} _QpSplineSmootherConfig_default_instance_;
class SpiralSmootherConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpiralSmootherConfig>
      _instance;
} _SpiralSmootherConfig_default_instance_;
class DiscretePointsSmootherConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DiscretePointsSmootherConfig>
      _instance;
  const ::acu::planning::CosThetaSmootherConfig* cos_theta_smoothing_;
  const ::acu::planning::FemPosDeviationSmootherConfig* fem_pos_deviation_smoothing_;
} _DiscretePointsSmootherConfig_default_instance_;
class ReferenceLineSmootherConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReferenceLineSmootherConfig>
      _instance;
  const ::acu::planning::QpSplineSmootherConfig* qp_spline_;
  const ::acu::planning::SpiralSmootherConfig* spiral_;
  const ::acu::planning::DiscretePointsSmootherConfig* discrete_points_;
} _ReferenceLineSmootherConfig_default_instance_;
}  // namespace planning
}  // namespace acu
namespace protobuf_reference_5fline_5fsmoother_5fconfig_2eproto {
void InitDefaultsQpSplineSmootherConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_QpSplineSmootherConfig_default_instance_;
    new (ptr) ::acu::planning::QpSplineSmootherConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::QpSplineSmootherConfig::InitAsDefaultInstance();
}

void InitDefaultsQpSplineSmootherConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQpSplineSmootherConfigImpl);
}

void InitDefaultsSpiralSmootherConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_SpiralSmootherConfig_default_instance_;
    new (ptr) ::acu::planning::SpiralSmootherConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::SpiralSmootherConfig::InitAsDefaultInstance();
}

void InitDefaultsSpiralSmootherConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpiralSmootherConfigImpl);
}

void InitDefaultsDiscretePointsSmootherConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cos_5ftheta_5fsmoother_5fconfig_2eproto::InitDefaultsCosThetaSmootherConfig();
  protobuf_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto::InitDefaultsFemPosDeviationSmootherConfig();
  {
    void* ptr = &::acu::planning::_DiscretePointsSmootherConfig_default_instance_;
    new (ptr) ::acu::planning::DiscretePointsSmootherConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::DiscretePointsSmootherConfig::InitAsDefaultInstance();
}

void InitDefaultsDiscretePointsSmootherConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDiscretePointsSmootherConfigImpl);
}

void InitDefaultsReferenceLineSmootherConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::InitDefaultsQpSplineSmootherConfig();
  protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::InitDefaultsSpiralSmootherConfig();
  protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::InitDefaultsDiscretePointsSmootherConfig();
  {
    void* ptr = &::acu::planning::_ReferenceLineSmootherConfig_default_instance_;
    new (ptr) ::acu::planning::ReferenceLineSmootherConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::ReferenceLineSmootherConfig::InitAsDefaultInstance();
}

void InitDefaultsReferenceLineSmootherConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReferenceLineSmootherConfigImpl);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineSmootherConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineSmootherConfig, spline_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineSmootherConfig, max_spline_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineSmootherConfig, regularization_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineSmootherConfig, second_derivative_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineSmootherConfig, third_derivative_weight_),
  1,
  2,
  3,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::SpiralSmootherConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::SpiralSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::SpiralSmootherConfig, max_deviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::SpiralSmootherConfig, piecewise_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::SpiralSmootherConfig, max_iteration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::SpiralSmootherConfig, opt_tol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::SpiralSmootherConfig, opt_acceptable_tol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::SpiralSmootherConfig, opt_acceptable_iteration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::SpiralSmootherConfig, weight_curve_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::SpiralSmootherConfig, weight_kappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::SpiralSmootherConfig, weight_dkappa_),
  0,
  1,
  3,
  2,
  5,
  4,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DiscretePointsSmootherConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DiscretePointsSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DiscretePointsSmootherConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DiscretePointsSmootherConfig, smoothing_method_),
  offsetof(::acu::planning::DiscretePointsSmootherConfigDefaultTypeInternal, cos_theta_smoothing_),
  offsetof(::acu::planning::DiscretePointsSmootherConfigDefaultTypeInternal, fem_pos_deviation_smoothing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DiscretePointsSmootherConfig, SmootherConfig_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ReferenceLineSmootherConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ReferenceLineSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ReferenceLineSmootherConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ReferenceLineSmootherConfig, max_constraint_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ReferenceLineSmootherConfig, longitudinal_boundary_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ReferenceLineSmootherConfig, max_lateral_boundary_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ReferenceLineSmootherConfig, min_lateral_boundary_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ReferenceLineSmootherConfig, num_of_total_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ReferenceLineSmootherConfig, curb_shift_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ReferenceLineSmootherConfig, lateral_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ReferenceLineSmootherConfig, resolution_),
  offsetof(::acu::planning::ReferenceLineSmootherConfigDefaultTypeInternal, qp_spline_),
  offsetof(::acu::planning::ReferenceLineSmootherConfigDefaultTypeInternal, spiral_),
  offsetof(::acu::planning::ReferenceLineSmootherConfigDefaultTypeInternal, discrete_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::ReferenceLineSmootherConfig, SmootherConfig_),
  1,
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::acu::planning::QpSplineSmootherConfig)},
  { 15, 29, sizeof(::acu::planning::SpiralSmootherConfig)},
  { 38, 47, sizeof(::acu::planning::DiscretePointsSmootherConfig)},
  { 50, 67, sizeof(::acu::planning::ReferenceLineSmootherConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_QpSplineSmootherConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_SpiralSmootherConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_DiscretePointsSmootherConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_ReferenceLineSmootherConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "reference_line_smoother_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n$reference_line_smoother_config.proto\022\014"
      "acu.planning\032\'fem_pos_deviation_smoother"
      "_config.proto\032\037cos_theta_smoother_config"
      ".proto\"\277\001\n\026QpSplineSmootherConfig\022\027\n\014spl"
      "ine_order\030\001 \001(\r:\0015\022\035\n\021max_spline_length\030"
      "\002 \001(\001:\00225\022\"\n\025regularization_weight\030\003 \001(\001"
      ":\0030.1\022#\n\030second_derivative_weight\030\004 \001(\001:"
      "\0010\022$\n\027third_derivative_weight\030\005 \001(\001:\003100"
      "\"\243\002\n\024SpiralSmootherConfig\022\032\n\rmax_deviati"
      "on\030\001 \001(\001:\0030.1\022\034\n\020piecewise_length\030\002 \001(\001:"
      "\00210\022\033\n\rmax_iteration\030\003 \001(\r:\0041000\022\026\n\007opt_"
      "tol\030\004 \001(\001:\0051e-08\022!\n\022opt_acceptable_tol\030\005"
      " \001(\001:\0051e-06\022$\n\030opt_acceptable_iteration\030"
      "\006 \001(\r:\00215\022\036\n\023weight_curve_length\030\007 \001(\001:\001"
      "1\022\027\n\014weight_kappa\030\010 \001(\001:\0011\022\032\n\rweight_dka"
      "ppa\030\t \001(\001:\003100\"\232\003\n\034DiscretePointsSmoothe"
      "rConfig\022q\n\020smoothing_method\030\003 \001(\0162:.acu."
      "planning.DiscretePointsSmootherConfig.Sm"
      "oothingMethod:\033FEM_POS_DEVIATION_SMOOTHI"
      "NG\022C\n\023cos_theta_smoothing\030\004 \001(\0132$.acu.pl"
      "anning.CosThetaSmootherConfigH\000\022R\n\033fem_p"
      "os_deviation_smoothing\030\005 \001(\0132+.acu.plann"
      "ing.FemPosDeviationSmootherConfigH\000\"\\\n\017S"
      "moothingMethod\022\017\n\013NOT_DEFINED\020\000\022\027\n\023COS_T"
      "HETA_SMOOTHING\020\001\022\037\n\033FEM_POS_DEVIATION_SM"
      "OOTHING\020\002B\020\n\016SmootherConfig\"\367\003\n\033Referenc"
      "eLineSmootherConfig\022\"\n\027max_constraint_in"
      "terval\030\001 \001(\001:\0015\022&\n\033longitudinal_boundary"
      "_bound\030\002 \001(\001:\0011\022\'\n\032max_lateral_boundary_"
      "bound\030\003 \001(\001:\0030.5\022\'\n\032min_lateral_boundary"
      "_bound\030\004 \001(\001:\0030.2\022 \n\023num_of_total_points"
      "\030\005 \001(\r:\003500\022\027\n\ncurb_shift\030\006 \001(\001:\0030.2\022\033\n\016"
      "lateral_buffer\030\007 \001(\001:\0030.2\022\030\n\nresolution\030"
      "\010 \001(\001:\0040.02\0229\n\tqp_spline\030\024 \001(\0132$.acu.pla"
      "nning.QpSplineSmootherConfigH\000\0224\n\006spiral"
      "\030\025 \001(\0132\".acu.planning.SpiralSmootherConf"
      "igH\000\022E\n\017discrete_points\030\026 \001(\0132*.acu.plan"
      "ning.DiscretePointsSmootherConfigH\000B\020\n\016S"
      "mootherConfig"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1533);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "reference_line_smoother_config.proto", &protobuf_RegisterTypes);
  ::protobuf_fem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto::AddDescriptors();
  ::protobuf_cos_5ftheta_5fsmoother_5fconfig_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_reference_5fline_5fsmoother_5fconfig_2eproto
namespace acu {
namespace planning {
const ::google::protobuf::EnumDescriptor* DiscretePointsSmootherConfig_SmoothingMethod_descriptor() {
  protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool DiscretePointsSmootherConfig_SmoothingMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DiscretePointsSmootherConfig_SmoothingMethod DiscretePointsSmootherConfig::NOT_DEFINED;
const DiscretePointsSmootherConfig_SmoothingMethod DiscretePointsSmootherConfig::COS_THETA_SMOOTHING;
const DiscretePointsSmootherConfig_SmoothingMethod DiscretePointsSmootherConfig::FEM_POS_DEVIATION_SMOOTHING;
const DiscretePointsSmootherConfig_SmoothingMethod DiscretePointsSmootherConfig::SmoothingMethod_MIN;
const DiscretePointsSmootherConfig_SmoothingMethod DiscretePointsSmootherConfig::SmoothingMethod_MAX;
const int DiscretePointsSmootherConfig::SmoothingMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void QpSplineSmootherConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QpSplineSmootherConfig::kSplineOrderFieldNumber;
const int QpSplineSmootherConfig::kMaxSplineLengthFieldNumber;
const int QpSplineSmootherConfig::kRegularizationWeightFieldNumber;
const int QpSplineSmootherConfig::kSecondDerivativeWeightFieldNumber;
const int QpSplineSmootherConfig::kThirdDerivativeWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QpSplineSmootherConfig::QpSplineSmootherConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::InitDefaultsQpSplineSmootherConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.QpSplineSmootherConfig)
}
QpSplineSmootherConfig::QpSplineSmootherConfig(const QpSplineSmootherConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&second_derivative_weight_, &from.second_derivative_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&third_derivative_weight_) -
    reinterpret_cast<char*>(&second_derivative_weight_)) + sizeof(third_derivative_weight_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.QpSplineSmootherConfig)
}

void QpSplineSmootherConfig::SharedCtor() {
  _cached_size_ = 0;
  second_derivative_weight_ = 0;
  spline_order_ = 5u;
  max_spline_length_ = 25;
  regularization_weight_ = 0.1;
  third_derivative_weight_ = 100;
}

QpSplineSmootherConfig::~QpSplineSmootherConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.QpSplineSmootherConfig)
  SharedDtor();
}

void QpSplineSmootherConfig::SharedDtor() {
}

void QpSplineSmootherConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QpSplineSmootherConfig::descriptor() {
  ::protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QpSplineSmootherConfig& QpSplineSmootherConfig::default_instance() {
  ::protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::InitDefaultsQpSplineSmootherConfig();
  return *internal_default_instance();
}

QpSplineSmootherConfig* QpSplineSmootherConfig::New(::google::protobuf::Arena* arena) const {
  QpSplineSmootherConfig* n = new QpSplineSmootherConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QpSplineSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.QpSplineSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    second_derivative_weight_ = 0;
    spline_order_ = 5u;
    max_spline_length_ = 25;
    regularization_weight_ = 0.1;
    third_derivative_weight_ = 100;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QpSplineSmootherConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.QpSplineSmootherConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 spline_order = 1 [default = 5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_spline_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spline_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_spline_length = 2 [default = 25];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_max_spline_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_spline_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double regularization_weight = 3 [default = 0.1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_regularization_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &regularization_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double second_derivative_weight = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_second_derivative_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &second_derivative_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double third_derivative_weight = 5 [default = 100];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_third_derivative_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &third_derivative_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.QpSplineSmootherConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.QpSplineSmootherConfig)
  return false;
#undef DO_
}

void QpSplineSmootherConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.QpSplineSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 spline_order = 1 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spline_order(), output);
  }

  // optional double max_spline_length = 2 [default = 25];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_spline_length(), output);
  }

  // optional double regularization_weight = 3 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->regularization_weight(), output);
  }

  // optional double second_derivative_weight = 4 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->second_derivative_weight(), output);
  }

  // optional double third_derivative_weight = 5 [default = 100];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->third_derivative_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.QpSplineSmootherConfig)
}

::google::protobuf::uint8* QpSplineSmootherConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.QpSplineSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 spline_order = 1 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spline_order(), target);
  }

  // optional double max_spline_length = 2 [default = 25];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_spline_length(), target);
  }

  // optional double regularization_weight = 3 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->regularization_weight(), target);
  }

  // optional double second_derivative_weight = 4 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->second_derivative_weight(), target);
  }

  // optional double third_derivative_weight = 5 [default = 100];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->third_derivative_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.QpSplineSmootherConfig)
  return target;
}

size_t QpSplineSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.QpSplineSmootherConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional double second_derivative_weight = 4 [default = 0];
    if (has_second_derivative_weight()) {
      total_size += 1 + 8;
    }

    // optional uint32 spline_order = 1 [default = 5];
    if (has_spline_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spline_order());
    }

    // optional double max_spline_length = 2 [default = 25];
    if (has_max_spline_length()) {
      total_size += 1 + 8;
    }

    // optional double regularization_weight = 3 [default = 0.1];
    if (has_regularization_weight()) {
      total_size += 1 + 8;
    }

    // optional double third_derivative_weight = 5 [default = 100];
    if (has_third_derivative_weight()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QpSplineSmootherConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.QpSplineSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const QpSplineSmootherConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QpSplineSmootherConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.QpSplineSmootherConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.QpSplineSmootherConfig)
    MergeFrom(*source);
  }
}

void QpSplineSmootherConfig::MergeFrom(const QpSplineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.QpSplineSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      second_derivative_weight_ = from.second_derivative_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      spline_order_ = from.spline_order_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_spline_length_ = from.max_spline_length_;
    }
    if (cached_has_bits & 0x00000008u) {
      regularization_weight_ = from.regularization_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      third_derivative_weight_ = from.third_derivative_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QpSplineSmootherConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.QpSplineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QpSplineSmootherConfig::CopyFrom(const QpSplineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.QpSplineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpSplineSmootherConfig::IsInitialized() const {
  return true;
}

void QpSplineSmootherConfig::Swap(QpSplineSmootherConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QpSplineSmootherConfig::InternalSwap(QpSplineSmootherConfig* other) {
  using std::swap;
  swap(second_derivative_weight_, other->second_derivative_weight_);
  swap(spline_order_, other->spline_order_);
  swap(max_spline_length_, other->max_spline_length_);
  swap(regularization_weight_, other->regularization_weight_);
  swap(third_derivative_weight_, other->third_derivative_weight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QpSplineSmootherConfig::GetMetadata() const {
  protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpiralSmootherConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpiralSmootherConfig::kMaxDeviationFieldNumber;
const int SpiralSmootherConfig::kPiecewiseLengthFieldNumber;
const int SpiralSmootherConfig::kMaxIterationFieldNumber;
const int SpiralSmootherConfig::kOptTolFieldNumber;
const int SpiralSmootherConfig::kOptAcceptableTolFieldNumber;
const int SpiralSmootherConfig::kOptAcceptableIterationFieldNumber;
const int SpiralSmootherConfig::kWeightCurveLengthFieldNumber;
const int SpiralSmootherConfig::kWeightKappaFieldNumber;
const int SpiralSmootherConfig::kWeightDkappaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpiralSmootherConfig::SpiralSmootherConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::InitDefaultsSpiralSmootherConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.SpiralSmootherConfig)
}
SpiralSmootherConfig::SpiralSmootherConfig(const SpiralSmootherConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_deviation_, &from.max_deviation_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_dkappa_) -
    reinterpret_cast<char*>(&max_deviation_)) + sizeof(weight_dkappa_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.SpiralSmootherConfig)
}

void SpiralSmootherConfig::SharedCtor() {
  _cached_size_ = 0;
  max_deviation_ = 0.1;
  piecewise_length_ = 10;
  opt_tol_ = 1e-08;
  max_iteration_ = 1000u;
  opt_acceptable_iteration_ = 15u;
  opt_acceptable_tol_ = 1e-06;
  weight_curve_length_ = 1;
  weight_kappa_ = 1;
  weight_dkappa_ = 100;
}

SpiralSmootherConfig::~SpiralSmootherConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.SpiralSmootherConfig)
  SharedDtor();
}

void SpiralSmootherConfig::SharedDtor() {
}

void SpiralSmootherConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpiralSmootherConfig::descriptor() {
  ::protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpiralSmootherConfig& SpiralSmootherConfig::default_instance() {
  ::protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::InitDefaultsSpiralSmootherConfig();
  return *internal_default_instance();
}

SpiralSmootherConfig* SpiralSmootherConfig::New(::google::protobuf::Arena* arena) const {
  SpiralSmootherConfig* n = new SpiralSmootherConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpiralSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.SpiralSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    max_deviation_ = 0.1;
    piecewise_length_ = 10;
    opt_tol_ = 1e-08;
    max_iteration_ = 1000u;
    opt_acceptable_iteration_ = 15u;
    opt_acceptable_tol_ = 1e-06;
    weight_curve_length_ = 1;
    weight_kappa_ = 1;
  }
  weight_dkappa_ = 100;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpiralSmootherConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.SpiralSmootherConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_deviation = 1 [default = 0.1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_max_deviation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double piecewise_length = 2 [default = 10];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_piecewise_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &piecewise_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_iteration = 3 [default = 1000];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_max_iteration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_iteration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double opt_tol = 4 [default = 1e-08];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_opt_tol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opt_tol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double opt_acceptable_tol = 5 [default = 1e-06];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_opt_acceptable_tol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opt_acceptable_tol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 opt_acceptable_iteration = 6 [default = 15];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_opt_acceptable_iteration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opt_acceptable_iteration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_curve_length = 7 [default = 1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_weight_curve_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_curve_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_kappa = 8 [default = 1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_weight_kappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_dkappa = 9 [default = 100];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_weight_dkappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_dkappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.SpiralSmootherConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.SpiralSmootherConfig)
  return false;
#undef DO_
}

void SpiralSmootherConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.SpiralSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_deviation = 1 [default = 0.1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_deviation(), output);
  }

  // optional double piecewise_length = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->piecewise_length(), output);
  }

  // optional uint32 max_iteration = 3 [default = 1000];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_iteration(), output);
  }

  // optional double opt_tol = 4 [default = 1e-08];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->opt_tol(), output);
  }

  // optional double opt_acceptable_tol = 5 [default = 1e-06];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->opt_acceptable_tol(), output);
  }

  // optional uint32 opt_acceptable_iteration = 6 [default = 15];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->opt_acceptable_iteration(), output);
  }

  // optional double weight_curve_length = 7 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->weight_curve_length(), output);
  }

  // optional double weight_kappa = 8 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->weight_kappa(), output);
  }

  // optional double weight_dkappa = 9 [default = 100];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->weight_dkappa(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.SpiralSmootherConfig)
}

::google::protobuf::uint8* SpiralSmootherConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.SpiralSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_deviation = 1 [default = 0.1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_deviation(), target);
  }

  // optional double piecewise_length = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->piecewise_length(), target);
  }

  // optional uint32 max_iteration = 3 [default = 1000];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_iteration(), target);
  }

  // optional double opt_tol = 4 [default = 1e-08];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->opt_tol(), target);
  }

  // optional double opt_acceptable_tol = 5 [default = 1e-06];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->opt_acceptable_tol(), target);
  }

  // optional uint32 opt_acceptable_iteration = 6 [default = 15];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->opt_acceptable_iteration(), target);
  }

  // optional double weight_curve_length = 7 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->weight_curve_length(), target);
  }

  // optional double weight_kappa = 8 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->weight_kappa(), target);
  }

  // optional double weight_dkappa = 9 [default = 100];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->weight_dkappa(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.SpiralSmootherConfig)
  return target;
}

size_t SpiralSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.SpiralSmootherConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double max_deviation = 1 [default = 0.1];
    if (has_max_deviation()) {
      total_size += 1 + 8;
    }

    // optional double piecewise_length = 2 [default = 10];
    if (has_piecewise_length()) {
      total_size += 1 + 8;
    }

    // optional double opt_tol = 4 [default = 1e-08];
    if (has_opt_tol()) {
      total_size += 1 + 8;
    }

    // optional uint32 max_iteration = 3 [default = 1000];
    if (has_max_iteration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_iteration());
    }

    // optional uint32 opt_acceptable_iteration = 6 [default = 15];
    if (has_opt_acceptable_iteration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opt_acceptable_iteration());
    }

    // optional double opt_acceptable_tol = 5 [default = 1e-06];
    if (has_opt_acceptable_tol()) {
      total_size += 1 + 8;
    }

    // optional double weight_curve_length = 7 [default = 1];
    if (has_weight_curve_length()) {
      total_size += 1 + 8;
    }

    // optional double weight_kappa = 8 [default = 1];
    if (has_weight_kappa()) {
      total_size += 1 + 8;
    }

  }
  // optional double weight_dkappa = 9 [default = 100];
  if (has_weight_dkappa()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpiralSmootherConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.SpiralSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SpiralSmootherConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpiralSmootherConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.SpiralSmootherConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.SpiralSmootherConfig)
    MergeFrom(*source);
  }
}

void SpiralSmootherConfig::MergeFrom(const SpiralSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.SpiralSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      max_deviation_ = from.max_deviation_;
    }
    if (cached_has_bits & 0x00000002u) {
      piecewise_length_ = from.piecewise_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      opt_tol_ = from.opt_tol_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_iteration_ = from.max_iteration_;
    }
    if (cached_has_bits & 0x00000010u) {
      opt_acceptable_iteration_ = from.opt_acceptable_iteration_;
    }
    if (cached_has_bits & 0x00000020u) {
      opt_acceptable_tol_ = from.opt_acceptable_tol_;
    }
    if (cached_has_bits & 0x00000040u) {
      weight_curve_length_ = from.weight_curve_length_;
    }
    if (cached_has_bits & 0x00000080u) {
      weight_kappa_ = from.weight_kappa_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_weight_dkappa(from.weight_dkappa());
  }
}

void SpiralSmootherConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.SpiralSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiralSmootherConfig::CopyFrom(const SpiralSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.SpiralSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpiralSmootherConfig::IsInitialized() const {
  return true;
}

void SpiralSmootherConfig::Swap(SpiralSmootherConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpiralSmootherConfig::InternalSwap(SpiralSmootherConfig* other) {
  using std::swap;
  swap(max_deviation_, other->max_deviation_);
  swap(piecewise_length_, other->piecewise_length_);
  swap(opt_tol_, other->opt_tol_);
  swap(max_iteration_, other->max_iteration_);
  swap(opt_acceptable_iteration_, other->opt_acceptable_iteration_);
  swap(opt_acceptable_tol_, other->opt_acceptable_tol_);
  swap(weight_curve_length_, other->weight_curve_length_);
  swap(weight_kappa_, other->weight_kappa_);
  swap(weight_dkappa_, other->weight_dkappa_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpiralSmootherConfig::GetMetadata() const {
  protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DiscretePointsSmootherConfig::InitAsDefaultInstance() {
  ::acu::planning::_DiscretePointsSmootherConfig_default_instance_.cos_theta_smoothing_ = const_cast< ::acu::planning::CosThetaSmootherConfig*>(
      ::acu::planning::CosThetaSmootherConfig::internal_default_instance());
  ::acu::planning::_DiscretePointsSmootherConfig_default_instance_.fem_pos_deviation_smoothing_ = const_cast< ::acu::planning::FemPosDeviationSmootherConfig*>(
      ::acu::planning::FemPosDeviationSmootherConfig::internal_default_instance());
}
void DiscretePointsSmootherConfig::set_allocated_cos_theta_smoothing(::acu::planning::CosThetaSmootherConfig* cos_theta_smoothing) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_SmootherConfig();
  if (cos_theta_smoothing) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cos_theta_smoothing = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cos_theta_smoothing, submessage_arena);
    }
    set_has_cos_theta_smoothing();
    SmootherConfig_.cos_theta_smoothing_ = cos_theta_smoothing;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.DiscretePointsSmootherConfig.cos_theta_smoothing)
}
void DiscretePointsSmootherConfig::clear_cos_theta_smoothing() {
  if (has_cos_theta_smoothing()) {
    delete SmootherConfig_.cos_theta_smoothing_;
    clear_has_SmootherConfig();
  }
}
void DiscretePointsSmootherConfig::set_allocated_fem_pos_deviation_smoothing(::acu::planning::FemPosDeviationSmootherConfig* fem_pos_deviation_smoothing) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_SmootherConfig();
  if (fem_pos_deviation_smoothing) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fem_pos_deviation_smoothing = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fem_pos_deviation_smoothing, submessage_arena);
    }
    set_has_fem_pos_deviation_smoothing();
    SmootherConfig_.fem_pos_deviation_smoothing_ = fem_pos_deviation_smoothing;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.DiscretePointsSmootherConfig.fem_pos_deviation_smoothing)
}
void DiscretePointsSmootherConfig::clear_fem_pos_deviation_smoothing() {
  if (has_fem_pos_deviation_smoothing()) {
    delete SmootherConfig_.fem_pos_deviation_smoothing_;
    clear_has_SmootherConfig();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiscretePointsSmootherConfig::kSmoothingMethodFieldNumber;
const int DiscretePointsSmootherConfig::kCosThetaSmoothingFieldNumber;
const int DiscretePointsSmootherConfig::kFemPosDeviationSmoothingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiscretePointsSmootherConfig::DiscretePointsSmootherConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::InitDefaultsDiscretePointsSmootherConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.DiscretePointsSmootherConfig)
}
DiscretePointsSmootherConfig::DiscretePointsSmootherConfig(const DiscretePointsSmootherConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  smoothing_method_ = from.smoothing_method_;
  clear_has_SmootherConfig();
  switch (from.SmootherConfig_case()) {
    case kCosThetaSmoothing: {
      mutable_cos_theta_smoothing()->::acu::planning::CosThetaSmootherConfig::MergeFrom(from.cos_theta_smoothing());
      break;
    }
    case kFemPosDeviationSmoothing: {
      mutable_fem_pos_deviation_smoothing()->::acu::planning::FemPosDeviationSmootherConfig::MergeFrom(from.fem_pos_deviation_smoothing());
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:acu.planning.DiscretePointsSmootherConfig)
}

void DiscretePointsSmootherConfig::SharedCtor() {
  _cached_size_ = 0;
  smoothing_method_ = 2;
  clear_has_SmootherConfig();
}

DiscretePointsSmootherConfig::~DiscretePointsSmootherConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.DiscretePointsSmootherConfig)
  SharedDtor();
}

void DiscretePointsSmootherConfig::SharedDtor() {
  if (has_SmootherConfig()) {
    clear_SmootherConfig();
  }
}

void DiscretePointsSmootherConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscretePointsSmootherConfig::descriptor() {
  ::protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DiscretePointsSmootherConfig& DiscretePointsSmootherConfig::default_instance() {
  ::protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::InitDefaultsDiscretePointsSmootherConfig();
  return *internal_default_instance();
}

DiscretePointsSmootherConfig* DiscretePointsSmootherConfig::New(::google::protobuf::Arena* arena) const {
  DiscretePointsSmootherConfig* n = new DiscretePointsSmootherConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DiscretePointsSmootherConfig::clear_SmootherConfig() {
// @@protoc_insertion_point(one_of_clear_start:acu.planning.DiscretePointsSmootherConfig)
  switch (SmootherConfig_case()) {
    case kCosThetaSmoothing: {
      delete SmootherConfig_.cos_theta_smoothing_;
      break;
    }
    case kFemPosDeviationSmoothing: {
      delete SmootherConfig_.fem_pos_deviation_smoothing_;
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SMOOTHERCONFIG_NOT_SET;
}


void DiscretePointsSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.DiscretePointsSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  smoothing_method_ = 2;
  clear_SmootherConfig();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DiscretePointsSmootherConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.DiscretePointsSmootherConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.planning.DiscretePointsSmootherConfig.SmoothingMethod smoothing_method = 3 [default = FEM_POS_DEVIATION_SMOOTHING];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::planning::DiscretePointsSmootherConfig_SmoothingMethod_IsValid(value)) {
            set_smoothing_method(static_cast< ::acu::planning::DiscretePointsSmootherConfig_SmoothingMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.CosThetaSmootherConfig cos_theta_smoothing = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cos_theta_smoothing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoothing = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fem_pos_deviation_smoothing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.DiscretePointsSmootherConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.DiscretePointsSmootherConfig)
  return false;
#undef DO_
}

void DiscretePointsSmootherConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.DiscretePointsSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.DiscretePointsSmootherConfig.SmoothingMethod smoothing_method = 3 [default = FEM_POS_DEVIATION_SMOOTHING];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->smoothing_method(), output);
  }

  switch (SmootherConfig_case()) {
    case kCosThetaSmoothing:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *SmootherConfig_.cos_theta_smoothing_, output);
      break;
    case kFemPosDeviationSmoothing:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *SmootherConfig_.fem_pos_deviation_smoothing_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.DiscretePointsSmootherConfig)
}

::google::protobuf::uint8* DiscretePointsSmootherConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.DiscretePointsSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.DiscretePointsSmootherConfig.SmoothingMethod smoothing_method = 3 [default = FEM_POS_DEVIATION_SMOOTHING];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->smoothing_method(), target);
  }

  switch (SmootherConfig_case()) {
    case kCosThetaSmoothing:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, *SmootherConfig_.cos_theta_smoothing_, deterministic, target);
      break;
    case kFemPosDeviationSmoothing:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, *SmootherConfig_.fem_pos_deviation_smoothing_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.DiscretePointsSmootherConfig)
  return target;
}

size_t DiscretePointsSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.DiscretePointsSmootherConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .acu.planning.DiscretePointsSmootherConfig.SmoothingMethod smoothing_method = 3 [default = FEM_POS_DEVIATION_SMOOTHING];
  if (has_smoothing_method()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->smoothing_method());
  }

  switch (SmootherConfig_case()) {
    // optional .acu.planning.CosThetaSmootherConfig cos_theta_smoothing = 4;
    case kCosThetaSmoothing: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *SmootherConfig_.cos_theta_smoothing_);
      break;
    }
    // optional .acu.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoothing = 5;
    case kFemPosDeviationSmoothing: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *SmootherConfig_.fem_pos_deviation_smoothing_);
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscretePointsSmootherConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.DiscretePointsSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DiscretePointsSmootherConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DiscretePointsSmootherConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.DiscretePointsSmootherConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.DiscretePointsSmootherConfig)
    MergeFrom(*source);
  }
}

void DiscretePointsSmootherConfig::MergeFrom(const DiscretePointsSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.DiscretePointsSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_smoothing_method()) {
    set_smoothing_method(from.smoothing_method());
  }
  switch (from.SmootherConfig_case()) {
    case kCosThetaSmoothing: {
      mutable_cos_theta_smoothing()->::acu::planning::CosThetaSmootherConfig::MergeFrom(from.cos_theta_smoothing());
      break;
    }
    case kFemPosDeviationSmoothing: {
      mutable_fem_pos_deviation_smoothing()->::acu::planning::FemPosDeviationSmootherConfig::MergeFrom(from.fem_pos_deviation_smoothing());
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
}

void DiscretePointsSmootherConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.DiscretePointsSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscretePointsSmootherConfig::CopyFrom(const DiscretePointsSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.DiscretePointsSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscretePointsSmootherConfig::IsInitialized() const {
  return true;
}

void DiscretePointsSmootherConfig::Swap(DiscretePointsSmootherConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiscretePointsSmootherConfig::InternalSwap(DiscretePointsSmootherConfig* other) {
  using std::swap;
  swap(smoothing_method_, other->smoothing_method_);
  swap(SmootherConfig_, other->SmootherConfig_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DiscretePointsSmootherConfig::GetMetadata() const {
  protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReferenceLineSmootherConfig::InitAsDefaultInstance() {
  ::acu::planning::_ReferenceLineSmootherConfig_default_instance_.qp_spline_ = const_cast< ::acu::planning::QpSplineSmootherConfig*>(
      ::acu::planning::QpSplineSmootherConfig::internal_default_instance());
  ::acu::planning::_ReferenceLineSmootherConfig_default_instance_.spiral_ = const_cast< ::acu::planning::SpiralSmootherConfig*>(
      ::acu::planning::SpiralSmootherConfig::internal_default_instance());
  ::acu::planning::_ReferenceLineSmootherConfig_default_instance_.discrete_points_ = const_cast< ::acu::planning::DiscretePointsSmootherConfig*>(
      ::acu::planning::DiscretePointsSmootherConfig::internal_default_instance());
}
void ReferenceLineSmootherConfig::set_allocated_qp_spline(::acu::planning::QpSplineSmootherConfig* qp_spline) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_SmootherConfig();
  if (qp_spline) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      qp_spline = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, qp_spline, submessage_arena);
    }
    set_has_qp_spline();
    SmootherConfig_.qp_spline_ = qp_spline;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.ReferenceLineSmootherConfig.qp_spline)
}
void ReferenceLineSmootherConfig::set_allocated_spiral(::acu::planning::SpiralSmootherConfig* spiral) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_SmootherConfig();
  if (spiral) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      spiral = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spiral, submessage_arena);
    }
    set_has_spiral();
    SmootherConfig_.spiral_ = spiral;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.ReferenceLineSmootherConfig.spiral)
}
void ReferenceLineSmootherConfig::set_allocated_discrete_points(::acu::planning::DiscretePointsSmootherConfig* discrete_points) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_SmootherConfig();
  if (discrete_points) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      discrete_points = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, discrete_points, submessage_arena);
    }
    set_has_discrete_points();
    SmootherConfig_.discrete_points_ = discrete_points;
  }
  // @@protoc_insertion_point(field_set_allocated:acu.planning.ReferenceLineSmootherConfig.discrete_points)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferenceLineSmootherConfig::kMaxConstraintIntervalFieldNumber;
const int ReferenceLineSmootherConfig::kLongitudinalBoundaryBoundFieldNumber;
const int ReferenceLineSmootherConfig::kMaxLateralBoundaryBoundFieldNumber;
const int ReferenceLineSmootherConfig::kMinLateralBoundaryBoundFieldNumber;
const int ReferenceLineSmootherConfig::kNumOfTotalPointsFieldNumber;
const int ReferenceLineSmootherConfig::kCurbShiftFieldNumber;
const int ReferenceLineSmootherConfig::kLateralBufferFieldNumber;
const int ReferenceLineSmootherConfig::kResolutionFieldNumber;
const int ReferenceLineSmootherConfig::kQpSplineFieldNumber;
const int ReferenceLineSmootherConfig::kSpiralFieldNumber;
const int ReferenceLineSmootherConfig::kDiscretePointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReferenceLineSmootherConfig::ReferenceLineSmootherConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::InitDefaultsReferenceLineSmootherConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.ReferenceLineSmootherConfig)
}
ReferenceLineSmootherConfig::ReferenceLineSmootherConfig(const ReferenceLineSmootherConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_of_total_points_, &from.num_of_total_points_,
    static_cast<size_t>(reinterpret_cast<char*>(&resolution_) -
    reinterpret_cast<char*>(&num_of_total_points_)) + sizeof(resolution_));
  clear_has_SmootherConfig();
  switch (from.SmootherConfig_case()) {
    case kQpSpline: {
      mutable_qp_spline()->::acu::planning::QpSplineSmootherConfig::MergeFrom(from.qp_spline());
      break;
    }
    case kSpiral: {
      mutable_spiral()->::acu::planning::SpiralSmootherConfig::MergeFrom(from.spiral());
      break;
    }
    case kDiscretePoints: {
      mutable_discrete_points()->::acu::planning::DiscretePointsSmootherConfig::MergeFrom(from.discrete_points());
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:acu.planning.ReferenceLineSmootherConfig)
}

void ReferenceLineSmootherConfig::SharedCtor() {
  _cached_size_ = 0;
  num_of_total_points_ = 500u;
  max_constraint_interval_ = 5;
  longitudinal_boundary_bound_ = 1;
  max_lateral_boundary_bound_ = 0.5;
  min_lateral_boundary_bound_ = 0.2;
  curb_shift_ = 0.2;
  lateral_buffer_ = 0.2;
  resolution_ = 0.02;
  clear_has_SmootherConfig();
}

ReferenceLineSmootherConfig::~ReferenceLineSmootherConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.ReferenceLineSmootherConfig)
  SharedDtor();
}

void ReferenceLineSmootherConfig::SharedDtor() {
  if (has_SmootherConfig()) {
    clear_SmootherConfig();
  }
}

void ReferenceLineSmootherConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceLineSmootherConfig::descriptor() {
  ::protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReferenceLineSmootherConfig& ReferenceLineSmootherConfig::default_instance() {
  ::protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::InitDefaultsReferenceLineSmootherConfig();
  return *internal_default_instance();
}

ReferenceLineSmootherConfig* ReferenceLineSmootherConfig::New(::google::protobuf::Arena* arena) const {
  ReferenceLineSmootherConfig* n = new ReferenceLineSmootherConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReferenceLineSmootherConfig::clear_SmootherConfig() {
// @@protoc_insertion_point(one_of_clear_start:acu.planning.ReferenceLineSmootherConfig)
  switch (SmootherConfig_case()) {
    case kQpSpline: {
      delete SmootherConfig_.qp_spline_;
      break;
    }
    case kSpiral: {
      delete SmootherConfig_.spiral_;
      break;
    }
    case kDiscretePoints: {
      delete SmootherConfig_.discrete_points_;
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SMOOTHERCONFIG_NOT_SET;
}


void ReferenceLineSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.ReferenceLineSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    num_of_total_points_ = 500u;
    max_constraint_interval_ = 5;
    longitudinal_boundary_bound_ = 1;
    max_lateral_boundary_bound_ = 0.5;
    min_lateral_boundary_bound_ = 0.2;
    curb_shift_ = 0.2;
    lateral_buffer_ = 0.2;
    resolution_ = 0.02;
  }
  clear_SmootherConfig();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReferenceLineSmootherConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.ReferenceLineSmootherConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_constraint_interval = 1 [default = 5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_max_constraint_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_constraint_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitudinal_boundary_bound = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_longitudinal_boundary_bound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitudinal_boundary_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_lateral_boundary_bound = 3 [default = 0.5];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_max_lateral_boundary_bound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_lateral_boundary_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_lateral_boundary_bound = 4 [default = 0.2];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_min_lateral_boundary_bound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_lateral_boundary_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_of_total_points = 5 [default = 500];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_num_of_total_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_of_total_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double curb_shift = 6 [default = 0.2];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_curb_shift();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curb_shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_buffer = 7 [default = 0.2];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_lateral_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double resolution = 8 [default = 0.02];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.QpSplineSmootherConfig qp_spline = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_qp_spline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.SpiralSmootherConfig spiral = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spiral()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.DiscretePointsSmootherConfig discrete_points = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_discrete_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.ReferenceLineSmootherConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.ReferenceLineSmootherConfig)
  return false;
#undef DO_
}

void ReferenceLineSmootherConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.ReferenceLineSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_constraint_interval = 1 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_constraint_interval(), output);
  }

  // optional double longitudinal_boundary_bound = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitudinal_boundary_bound(), output);
  }

  // optional double max_lateral_boundary_bound = 3 [default = 0.5];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_lateral_boundary_bound(), output);
  }

  // optional double min_lateral_boundary_bound = 4 [default = 0.2];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min_lateral_boundary_bound(), output);
  }

  // optional uint32 num_of_total_points = 5 [default = 500];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_of_total_points(), output);
  }

  // optional double curb_shift = 6 [default = 0.2];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->curb_shift(), output);
  }

  // optional double lateral_buffer = 7 [default = 0.2];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->lateral_buffer(), output);
  }

  // optional double resolution = 8 [default = 0.02];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->resolution(), output);
  }

  switch (SmootherConfig_case()) {
    case kQpSpline:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        20, *SmootherConfig_.qp_spline_, output);
      break;
    case kSpiral:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        21, *SmootherConfig_.spiral_, output);
      break;
    case kDiscretePoints:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        22, *SmootherConfig_.discrete_points_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.ReferenceLineSmootherConfig)
}

::google::protobuf::uint8* ReferenceLineSmootherConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.ReferenceLineSmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_constraint_interval = 1 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_constraint_interval(), target);
  }

  // optional double longitudinal_boundary_bound = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitudinal_boundary_bound(), target);
  }

  // optional double max_lateral_boundary_bound = 3 [default = 0.5];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_lateral_boundary_bound(), target);
  }

  // optional double min_lateral_boundary_bound = 4 [default = 0.2];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min_lateral_boundary_bound(), target);
  }

  // optional uint32 num_of_total_points = 5 [default = 500];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_of_total_points(), target);
  }

  // optional double curb_shift = 6 [default = 0.2];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->curb_shift(), target);
  }

  // optional double lateral_buffer = 7 [default = 0.2];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->lateral_buffer(), target);
  }

  // optional double resolution = 8 [default = 0.02];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->resolution(), target);
  }

  switch (SmootherConfig_case()) {
    case kQpSpline:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          20, *SmootherConfig_.qp_spline_, deterministic, target);
      break;
    case kSpiral:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          21, *SmootherConfig_.spiral_, deterministic, target);
      break;
    case kDiscretePoints:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          22, *SmootherConfig_.discrete_points_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.ReferenceLineSmootherConfig)
  return target;
}

size_t ReferenceLineSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.ReferenceLineSmootherConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 num_of_total_points = 5 [default = 500];
    if (has_num_of_total_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_of_total_points());
    }

    // optional double max_constraint_interval = 1 [default = 5];
    if (has_max_constraint_interval()) {
      total_size += 1 + 8;
    }

    // optional double longitudinal_boundary_bound = 2 [default = 1];
    if (has_longitudinal_boundary_bound()) {
      total_size += 1 + 8;
    }

    // optional double max_lateral_boundary_bound = 3 [default = 0.5];
    if (has_max_lateral_boundary_bound()) {
      total_size += 1 + 8;
    }

    // optional double min_lateral_boundary_bound = 4 [default = 0.2];
    if (has_min_lateral_boundary_bound()) {
      total_size += 1 + 8;
    }

    // optional double curb_shift = 6 [default = 0.2];
    if (has_curb_shift()) {
      total_size += 1 + 8;
    }

    // optional double lateral_buffer = 7 [default = 0.2];
    if (has_lateral_buffer()) {
      total_size += 1 + 8;
    }

    // optional double resolution = 8 [default = 0.02];
    if (has_resolution()) {
      total_size += 1 + 8;
    }

  }
  switch (SmootherConfig_case()) {
    // optional .acu.planning.QpSplineSmootherConfig qp_spline = 20;
    case kQpSpline: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *SmootherConfig_.qp_spline_);
      break;
    }
    // optional .acu.planning.SpiralSmootherConfig spiral = 21;
    case kSpiral: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *SmootherConfig_.spiral_);
      break;
    }
    // optional .acu.planning.DiscretePointsSmootherConfig discrete_points = 22;
    case kDiscretePoints: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *SmootherConfig_.discrete_points_);
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceLineSmootherConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.ReferenceLineSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceLineSmootherConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReferenceLineSmootherConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.ReferenceLineSmootherConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.ReferenceLineSmootherConfig)
    MergeFrom(*source);
  }
}

void ReferenceLineSmootherConfig::MergeFrom(const ReferenceLineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.ReferenceLineSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      num_of_total_points_ = from.num_of_total_points_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_constraint_interval_ = from.max_constraint_interval_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitudinal_boundary_bound_ = from.longitudinal_boundary_bound_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_lateral_boundary_bound_ = from.max_lateral_boundary_bound_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_lateral_boundary_bound_ = from.min_lateral_boundary_bound_;
    }
    if (cached_has_bits & 0x00000020u) {
      curb_shift_ = from.curb_shift_;
    }
    if (cached_has_bits & 0x00000040u) {
      lateral_buffer_ = from.lateral_buffer_;
    }
    if (cached_has_bits & 0x00000080u) {
      resolution_ = from.resolution_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.SmootherConfig_case()) {
    case kQpSpline: {
      mutable_qp_spline()->::acu::planning::QpSplineSmootherConfig::MergeFrom(from.qp_spline());
      break;
    }
    case kSpiral: {
      mutable_spiral()->::acu::planning::SpiralSmootherConfig::MergeFrom(from.spiral());
      break;
    }
    case kDiscretePoints: {
      mutable_discrete_points()->::acu::planning::DiscretePointsSmootherConfig::MergeFrom(from.discrete_points());
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
}

void ReferenceLineSmootherConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.ReferenceLineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceLineSmootherConfig::CopyFrom(const ReferenceLineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.ReferenceLineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineSmootherConfig::IsInitialized() const {
  return true;
}

void ReferenceLineSmootherConfig::Swap(ReferenceLineSmootherConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReferenceLineSmootherConfig::InternalSwap(ReferenceLineSmootherConfig* other) {
  using std::swap;
  swap(num_of_total_points_, other->num_of_total_points_);
  swap(max_constraint_interval_, other->max_constraint_interval_);
  swap(longitudinal_boundary_bound_, other->longitudinal_boundary_bound_);
  swap(max_lateral_boundary_bound_, other->max_lateral_boundary_bound_);
  swap(min_lateral_boundary_bound_, other->min_lateral_boundary_bound_);
  swap(curb_shift_, other->curb_shift_);
  swap(lateral_buffer_, other->lateral_buffer_);
  swap(resolution_, other->resolution_);
  swap(SmootherConfig_, other->SmootherConfig_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReferenceLineSmootherConfig::GetMetadata() const {
  protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_reference_5fline_5fsmoother_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace acu

// @@protoc_insertion_point(global_scope)
