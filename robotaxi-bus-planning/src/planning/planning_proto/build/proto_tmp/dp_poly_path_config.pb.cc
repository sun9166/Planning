// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dp_poly_path_config.proto

#include "dp_poly_path_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace acu {
namespace planning {
class TrajectoryCostConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryCostConfig>
      _instance;
} _TrajectoryCostConfig_default_instance_;
class DpPolyPathConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DpPolyPathConfig>
      _instance;
} _DpPolyPathConfig_default_instance_;
}  // namespace planning
}  // namespace acu
namespace protobuf_dp_5fpoly_5fpath_5fconfig_2eproto {
void InitDefaultsTrajectoryCostConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_TrajectoryCostConfig_default_instance_;
    new (ptr) ::acu::planning::TrajectoryCostConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::TrajectoryCostConfig::InitAsDefaultInstance();
}

void InitDefaultsTrajectoryCostConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrajectoryCostConfigImpl);
}

void InitDefaultsDpPolyPathConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_waypoint_5fsampler_5fconfig_2eproto::InitDefaultsWaypointSamplerConfig();
  protobuf_dp_5fpoly_5fpath_5fconfig_2eproto::InitDefaultsTrajectoryCostConfig();
  {
    void* ptr = &::acu::planning::_DpPolyPathConfig_default_instance_;
    new (ptr) ::acu::planning::DpPolyPathConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::DpPolyPathConfig::InitAsDefaultInstance();
}

void InitDefaultsDpPolyPathConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDpPolyPathConfigImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TrajectoryCostConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TrajectoryCostConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TrajectoryCostConfig, eval_time_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TrajectoryCostConfig, path_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TrajectoryCostConfig, obstacle_ignore_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TrajectoryCostConfig, obstacle_collision_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TrajectoryCostConfig, obstacle_risk_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TrajectoryCostConfig, obstacle_collision_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TrajectoryCostConfig, path_l_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TrajectoryCostConfig, path_dl_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TrajectoryCostConfig, path_ddl_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TrajectoryCostConfig, path_l_cost_param_l0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TrajectoryCostConfig, path_l_cost_param_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TrajectoryCostConfig, path_l_cost_param_k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TrajectoryCostConfig, path_out_lane_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::TrajectoryCostConfig, path_end_l_cost_),
  8,
  9,
  10,
  11,
  12,
  13,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpPolyPathConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpPolyPathConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpPolyPathConfig, enable_pull_over_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpPolyPathConfig, eval_time_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpPolyPathConfig, path_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpPolyPathConfig, waypoint_sampler_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpPolyPathConfig, default_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpPolyPathConfig, lanechange_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::DpPolyPathConfig, avoid_obstacle_config_),
  4,
  5,
  6,
  0,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::acu::planning::TrajectoryCostConfig)},
  { 33, 45, sizeof(::acu::planning::DpPolyPathConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_TrajectoryCostConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_DpPolyPathConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dp_poly_path_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031dp_poly_path_config.proto\022\014acu.plannin"
      "g\032\035waypoint_sampler_config.proto\"\276\003\n\024Tra"
      "jectoryCostConfig\022\037\n\022eval_time_interval\030"
      "\001 \001(\001:\0030.1\022\034\n\017path_resolution\030\002 \001(\001:\0030.1"
      "\022$\n\030obstacle_ignore_distance\030\003 \001(\001:\00220\022("
      "\n\033obstacle_collision_distance\030\004 \001(\001:\0030.2"
      "\022!\n\026obstacle_risk_distance\030\005 \001(\001:\0012\022%\n\027o"
      "bstacle_collision_cost\030\006 \001(\001:\0041000\022\023\n\013pa"
      "th_l_cost\030\007 \001(\001\022\024\n\014path_dl_cost\030\010 \001(\001\022\025\n"
      "\rpath_ddl_cost\030\t \001(\001\022\034\n\024path_l_cost_para"
      "m_l0\030\n \001(\001\022\033\n\023path_l_cost_param_b\030\013 \001(\001\022"
      "\033\n\023path_l_cost_param_k\030\014 \001(\001\022\032\n\022path_out"
      "_lane_cost\030\r \001(\001\022\027\n\017path_end_l_cost\030\016 \001("
      "\001\"\365\002\n\020DpPolyPathConfig\022\036\n\020enable_pull_ov"
      "er\030\001 \001(\010:\004true\022\037\n\022eval_time_interval\030\002 \001"
      "(\001:\0030.1\022\034\n\017path_resolution\030\003 \001(\001:\0030.1\022D\n"
      "\027waypoint_sampler_config\030\004 \001(\0132#.acu.pla"
      "nning.WaypointSamplerConfig\022:\n\016default_c"
      "onfig\030\005 \001(\0132\".acu.planning.TrajectoryCos"
      "tConfig\022=\n\021lanechange_config\030\006 \001(\0132\".acu"
      ".planning.TrajectoryCostConfig\022A\n\025avoid_"
      "obstacle_config\030\007 \001(\0132\".acu.planning.Tra"
      "jectoryCostConfig"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 897);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dp_poly_path_config.proto", &protobuf_RegisterTypes);
  ::protobuf_waypoint_5fsampler_5fconfig_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_dp_5fpoly_5fpath_5fconfig_2eproto
namespace acu {
namespace planning {

// ===================================================================

void TrajectoryCostConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryCostConfig::kEvalTimeIntervalFieldNumber;
const int TrajectoryCostConfig::kPathResolutionFieldNumber;
const int TrajectoryCostConfig::kObstacleIgnoreDistanceFieldNumber;
const int TrajectoryCostConfig::kObstacleCollisionDistanceFieldNumber;
const int TrajectoryCostConfig::kObstacleRiskDistanceFieldNumber;
const int TrajectoryCostConfig::kObstacleCollisionCostFieldNumber;
const int TrajectoryCostConfig::kPathLCostFieldNumber;
const int TrajectoryCostConfig::kPathDlCostFieldNumber;
const int TrajectoryCostConfig::kPathDdlCostFieldNumber;
const int TrajectoryCostConfig::kPathLCostParamL0FieldNumber;
const int TrajectoryCostConfig::kPathLCostParamBFieldNumber;
const int TrajectoryCostConfig::kPathLCostParamKFieldNumber;
const int TrajectoryCostConfig::kPathOutLaneCostFieldNumber;
const int TrajectoryCostConfig::kPathEndLCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryCostConfig::TrajectoryCostConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dp_5fpoly_5fpath_5fconfig_2eproto::InitDefaultsTrajectoryCostConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.TrajectoryCostConfig)
}
TrajectoryCostConfig::TrajectoryCostConfig(const TrajectoryCostConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&path_l_cost_, &from.path_l_cost_,
    static_cast<size_t>(reinterpret_cast<char*>(&obstacle_collision_cost_) -
    reinterpret_cast<char*>(&path_l_cost_)) + sizeof(obstacle_collision_cost_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.TrajectoryCostConfig)
}

void TrajectoryCostConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&path_l_cost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&path_end_l_cost_) -
      reinterpret_cast<char*>(&path_l_cost_)) + sizeof(path_end_l_cost_));
  eval_time_interval_ = 0.1;
  path_resolution_ = 0.1;
  obstacle_ignore_distance_ = 20;
  obstacle_collision_distance_ = 0.2;
  obstacle_risk_distance_ = 2;
  obstacle_collision_cost_ = 1000;
}

TrajectoryCostConfig::~TrajectoryCostConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.TrajectoryCostConfig)
  SharedDtor();
}

void TrajectoryCostConfig::SharedDtor() {
}

void TrajectoryCostConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryCostConfig::descriptor() {
  ::protobuf_dp_5fpoly_5fpath_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dp_5fpoly_5fpath_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryCostConfig& TrajectoryCostConfig::default_instance() {
  ::protobuf_dp_5fpoly_5fpath_5fconfig_2eproto::InitDefaultsTrajectoryCostConfig();
  return *internal_default_instance();
}

TrajectoryCostConfig* TrajectoryCostConfig::New(::google::protobuf::Arena* arena) const {
  TrajectoryCostConfig* n = new TrajectoryCostConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryCostConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.TrajectoryCostConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&path_l_cost_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&path_end_l_cost_) -
        reinterpret_cast<char*>(&path_l_cost_)) + sizeof(path_end_l_cost_));
  }
  if (cached_has_bits & 16128u) {
    eval_time_interval_ = 0.1;
    path_resolution_ = 0.1;
    obstacle_ignore_distance_ = 20;
    obstacle_collision_distance_ = 0.2;
    obstacle_risk_distance_ = 2;
    obstacle_collision_cost_ = 1000;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrajectoryCostConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.TrajectoryCostConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double eval_time_interval = 1 [default = 0.1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_eval_time_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eval_time_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_resolution = 2 [default = 0.1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_path_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_ignore_distance = 3 [default = 20];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_obstacle_ignore_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_ignore_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_collision_distance = 4 [default = 0.2];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_obstacle_collision_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_collision_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_risk_distance = 5 [default = 2];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_obstacle_risk_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_risk_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_collision_cost = 6 [default = 1000];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_obstacle_collision_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_collision_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_l_cost = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_path_l_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_l_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_dl_cost = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_path_dl_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_dl_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_ddl_cost = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_path_ddl_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_ddl_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_l_cost_param_l0 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_path_l_cost_param_l0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_l_cost_param_l0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_l_cost_param_b = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_path_l_cost_param_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_l_cost_param_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_l_cost_param_k = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_path_l_cost_param_k();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_l_cost_param_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_out_lane_cost = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_path_out_lane_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_out_lane_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_end_l_cost = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_path_end_l_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_end_l_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.TrajectoryCostConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.TrajectoryCostConfig)
  return false;
#undef DO_
}

void TrajectoryCostConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.TrajectoryCostConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double eval_time_interval = 1 [default = 0.1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->eval_time_interval(), output);
  }

  // optional double path_resolution = 2 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->path_resolution(), output);
  }

  // optional double obstacle_ignore_distance = 3 [default = 20];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->obstacle_ignore_distance(), output);
  }

  // optional double obstacle_collision_distance = 4 [default = 0.2];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->obstacle_collision_distance(), output);
  }

  // optional double obstacle_risk_distance = 5 [default = 2];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->obstacle_risk_distance(), output);
  }

  // optional double obstacle_collision_cost = 6 [default = 1000];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->obstacle_collision_cost(), output);
  }

  // optional double path_l_cost = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->path_l_cost(), output);
  }

  // optional double path_dl_cost = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->path_dl_cost(), output);
  }

  // optional double path_ddl_cost = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->path_ddl_cost(), output);
  }

  // optional double path_l_cost_param_l0 = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->path_l_cost_param_l0(), output);
  }

  // optional double path_l_cost_param_b = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->path_l_cost_param_b(), output);
  }

  // optional double path_l_cost_param_k = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->path_l_cost_param_k(), output);
  }

  // optional double path_out_lane_cost = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->path_out_lane_cost(), output);
  }

  // optional double path_end_l_cost = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->path_end_l_cost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.TrajectoryCostConfig)
}

::google::protobuf::uint8* TrajectoryCostConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.TrajectoryCostConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double eval_time_interval = 1 [default = 0.1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->eval_time_interval(), target);
  }

  // optional double path_resolution = 2 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->path_resolution(), target);
  }

  // optional double obstacle_ignore_distance = 3 [default = 20];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->obstacle_ignore_distance(), target);
  }

  // optional double obstacle_collision_distance = 4 [default = 0.2];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->obstacle_collision_distance(), target);
  }

  // optional double obstacle_risk_distance = 5 [default = 2];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->obstacle_risk_distance(), target);
  }

  // optional double obstacle_collision_cost = 6 [default = 1000];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->obstacle_collision_cost(), target);
  }

  // optional double path_l_cost = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->path_l_cost(), target);
  }

  // optional double path_dl_cost = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->path_dl_cost(), target);
  }

  // optional double path_ddl_cost = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->path_ddl_cost(), target);
  }

  // optional double path_l_cost_param_l0 = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->path_l_cost_param_l0(), target);
  }

  // optional double path_l_cost_param_b = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->path_l_cost_param_b(), target);
  }

  // optional double path_l_cost_param_k = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->path_l_cost_param_k(), target);
  }

  // optional double path_out_lane_cost = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->path_out_lane_cost(), target);
  }

  // optional double path_end_l_cost = 14;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->path_end_l_cost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.TrajectoryCostConfig)
  return target;
}

size_t TrajectoryCostConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.TrajectoryCostConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double path_l_cost = 7;
    if (has_path_l_cost()) {
      total_size += 1 + 8;
    }

    // optional double path_dl_cost = 8;
    if (has_path_dl_cost()) {
      total_size += 1 + 8;
    }

    // optional double path_ddl_cost = 9;
    if (has_path_ddl_cost()) {
      total_size += 1 + 8;
    }

    // optional double path_l_cost_param_l0 = 10;
    if (has_path_l_cost_param_l0()) {
      total_size += 1 + 8;
    }

    // optional double path_l_cost_param_b = 11;
    if (has_path_l_cost_param_b()) {
      total_size += 1 + 8;
    }

    // optional double path_l_cost_param_k = 12;
    if (has_path_l_cost_param_k()) {
      total_size += 1 + 8;
    }

    // optional double path_out_lane_cost = 13;
    if (has_path_out_lane_cost()) {
      total_size += 1 + 8;
    }

    // optional double path_end_l_cost = 14;
    if (has_path_end_l_cost()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional double eval_time_interval = 1 [default = 0.1];
    if (has_eval_time_interval()) {
      total_size += 1 + 8;
    }

    // optional double path_resolution = 2 [default = 0.1];
    if (has_path_resolution()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_ignore_distance = 3 [default = 20];
    if (has_obstacle_ignore_distance()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_collision_distance = 4 [default = 0.2];
    if (has_obstacle_collision_distance()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_risk_distance = 5 [default = 2];
    if (has_obstacle_risk_distance()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_collision_cost = 6 [default = 1000];
    if (has_obstacle_collision_cost()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryCostConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.TrajectoryCostConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryCostConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryCostConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.TrajectoryCostConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.TrajectoryCostConfig)
    MergeFrom(*source);
  }
}

void TrajectoryCostConfig::MergeFrom(const TrajectoryCostConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.TrajectoryCostConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      path_l_cost_ = from.path_l_cost_;
    }
    if (cached_has_bits & 0x00000002u) {
      path_dl_cost_ = from.path_dl_cost_;
    }
    if (cached_has_bits & 0x00000004u) {
      path_ddl_cost_ = from.path_ddl_cost_;
    }
    if (cached_has_bits & 0x00000008u) {
      path_l_cost_param_l0_ = from.path_l_cost_param_l0_;
    }
    if (cached_has_bits & 0x00000010u) {
      path_l_cost_param_b_ = from.path_l_cost_param_b_;
    }
    if (cached_has_bits & 0x00000020u) {
      path_l_cost_param_k_ = from.path_l_cost_param_k_;
    }
    if (cached_has_bits & 0x00000040u) {
      path_out_lane_cost_ = from.path_out_lane_cost_;
    }
    if (cached_has_bits & 0x00000080u) {
      path_end_l_cost_ = from.path_end_l_cost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      eval_time_interval_ = from.eval_time_interval_;
    }
    if (cached_has_bits & 0x00000200u) {
      path_resolution_ = from.path_resolution_;
    }
    if (cached_has_bits & 0x00000400u) {
      obstacle_ignore_distance_ = from.obstacle_ignore_distance_;
    }
    if (cached_has_bits & 0x00000800u) {
      obstacle_collision_distance_ = from.obstacle_collision_distance_;
    }
    if (cached_has_bits & 0x00001000u) {
      obstacle_risk_distance_ = from.obstacle_risk_distance_;
    }
    if (cached_has_bits & 0x00002000u) {
      obstacle_collision_cost_ = from.obstacle_collision_cost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrajectoryCostConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.TrajectoryCostConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryCostConfig::CopyFrom(const TrajectoryCostConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.TrajectoryCostConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryCostConfig::IsInitialized() const {
  return true;
}

void TrajectoryCostConfig::Swap(TrajectoryCostConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryCostConfig::InternalSwap(TrajectoryCostConfig* other) {
  using std::swap;
  swap(path_l_cost_, other->path_l_cost_);
  swap(path_dl_cost_, other->path_dl_cost_);
  swap(path_ddl_cost_, other->path_ddl_cost_);
  swap(path_l_cost_param_l0_, other->path_l_cost_param_l0_);
  swap(path_l_cost_param_b_, other->path_l_cost_param_b_);
  swap(path_l_cost_param_k_, other->path_l_cost_param_k_);
  swap(path_out_lane_cost_, other->path_out_lane_cost_);
  swap(path_end_l_cost_, other->path_end_l_cost_);
  swap(eval_time_interval_, other->eval_time_interval_);
  swap(path_resolution_, other->path_resolution_);
  swap(obstacle_ignore_distance_, other->obstacle_ignore_distance_);
  swap(obstacle_collision_distance_, other->obstacle_collision_distance_);
  swap(obstacle_risk_distance_, other->obstacle_risk_distance_);
  swap(obstacle_collision_cost_, other->obstacle_collision_cost_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryCostConfig::GetMetadata() const {
  protobuf_dp_5fpoly_5fpath_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dp_5fpoly_5fpath_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DpPolyPathConfig::InitAsDefaultInstance() {
  ::acu::planning::_DpPolyPathConfig_default_instance_._instance.get_mutable()->waypoint_sampler_config_ = const_cast< ::acu::planning::WaypointSamplerConfig*>(
      ::acu::planning::WaypointSamplerConfig::internal_default_instance());
  ::acu::planning::_DpPolyPathConfig_default_instance_._instance.get_mutable()->default_config_ = const_cast< ::acu::planning::TrajectoryCostConfig*>(
      ::acu::planning::TrajectoryCostConfig::internal_default_instance());
  ::acu::planning::_DpPolyPathConfig_default_instance_._instance.get_mutable()->lanechange_config_ = const_cast< ::acu::planning::TrajectoryCostConfig*>(
      ::acu::planning::TrajectoryCostConfig::internal_default_instance());
  ::acu::planning::_DpPolyPathConfig_default_instance_._instance.get_mutable()->avoid_obstacle_config_ = const_cast< ::acu::planning::TrajectoryCostConfig*>(
      ::acu::planning::TrajectoryCostConfig::internal_default_instance());
}
void DpPolyPathConfig::clear_waypoint_sampler_config() {
  if (waypoint_sampler_config_ != NULL) waypoint_sampler_config_->Clear();
  clear_has_waypoint_sampler_config();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DpPolyPathConfig::kEnablePullOverFieldNumber;
const int DpPolyPathConfig::kEvalTimeIntervalFieldNumber;
const int DpPolyPathConfig::kPathResolutionFieldNumber;
const int DpPolyPathConfig::kWaypointSamplerConfigFieldNumber;
const int DpPolyPathConfig::kDefaultConfigFieldNumber;
const int DpPolyPathConfig::kLanechangeConfigFieldNumber;
const int DpPolyPathConfig::kAvoidObstacleConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DpPolyPathConfig::DpPolyPathConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_dp_5fpoly_5fpath_5fconfig_2eproto::InitDefaultsDpPolyPathConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.DpPolyPathConfig)
}
DpPolyPathConfig::DpPolyPathConfig(const DpPolyPathConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_waypoint_sampler_config()) {
    waypoint_sampler_config_ = new ::acu::planning::WaypointSamplerConfig(*from.waypoint_sampler_config_);
  } else {
    waypoint_sampler_config_ = NULL;
  }
  if (from.has_default_config()) {
    default_config_ = new ::acu::planning::TrajectoryCostConfig(*from.default_config_);
  } else {
    default_config_ = NULL;
  }
  if (from.has_lanechange_config()) {
    lanechange_config_ = new ::acu::planning::TrajectoryCostConfig(*from.lanechange_config_);
  } else {
    lanechange_config_ = NULL;
  }
  if (from.has_avoid_obstacle_config()) {
    avoid_obstacle_config_ = new ::acu::planning::TrajectoryCostConfig(*from.avoid_obstacle_config_);
  } else {
    avoid_obstacle_config_ = NULL;
  }
  ::memcpy(&enable_pull_over_, &from.enable_pull_over_,
    static_cast<size_t>(reinterpret_cast<char*>(&path_resolution_) -
    reinterpret_cast<char*>(&enable_pull_over_)) + sizeof(path_resolution_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.DpPolyPathConfig)
}

void DpPolyPathConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&waypoint_sampler_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avoid_obstacle_config_) -
      reinterpret_cast<char*>(&waypoint_sampler_config_)) + sizeof(avoid_obstacle_config_));
  enable_pull_over_ = true;
  eval_time_interval_ = 0.1;
  path_resolution_ = 0.1;
}

DpPolyPathConfig::~DpPolyPathConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.DpPolyPathConfig)
  SharedDtor();
}

void DpPolyPathConfig::SharedDtor() {
  if (this != internal_default_instance()) delete waypoint_sampler_config_;
  if (this != internal_default_instance()) delete default_config_;
  if (this != internal_default_instance()) delete lanechange_config_;
  if (this != internal_default_instance()) delete avoid_obstacle_config_;
}

void DpPolyPathConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DpPolyPathConfig::descriptor() {
  ::protobuf_dp_5fpoly_5fpath_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dp_5fpoly_5fpath_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DpPolyPathConfig& DpPolyPathConfig::default_instance() {
  ::protobuf_dp_5fpoly_5fpath_5fconfig_2eproto::InitDefaultsDpPolyPathConfig();
  return *internal_default_instance();
}

DpPolyPathConfig* DpPolyPathConfig::New(::google::protobuf::Arena* arena) const {
  DpPolyPathConfig* n = new DpPolyPathConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DpPolyPathConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.DpPolyPathConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(waypoint_sampler_config_ != NULL);
      waypoint_sampler_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(default_config_ != NULL);
      default_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lanechange_config_ != NULL);
      lanechange_config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(avoid_obstacle_config_ != NULL);
      avoid_obstacle_config_->Clear();
    }
    enable_pull_over_ = true;
    eval_time_interval_ = 0.1;
    path_resolution_ = 0.1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DpPolyPathConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.DpPolyPathConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable_pull_over = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_enable_pull_over();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_pull_over_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double eval_time_interval = 2 [default = 0.1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_eval_time_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eval_time_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_resolution = 3 [default = 0.1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_path_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.WaypointSamplerConfig waypoint_sampler_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_waypoint_sampler_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.TrajectoryCostConfig default_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_default_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.TrajectoryCostConfig lanechange_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lanechange_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.TrajectoryCostConfig avoid_obstacle_config = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_avoid_obstacle_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.DpPolyPathConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.DpPolyPathConfig)
  return false;
#undef DO_
}

void DpPolyPathConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.DpPolyPathConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_pull_over = 1 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_pull_over(), output);
  }

  // optional double eval_time_interval = 2 [default = 0.1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->eval_time_interval(), output);
  }

  // optional double path_resolution = 3 [default = 0.1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->path_resolution(), output);
  }

  // optional .acu.planning.WaypointSamplerConfig waypoint_sampler_config = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->waypoint_sampler_config_, output);
  }

  // optional .acu.planning.TrajectoryCostConfig default_config = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->default_config_, output);
  }

  // optional .acu.planning.TrajectoryCostConfig lanechange_config = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->lanechange_config_, output);
  }

  // optional .acu.planning.TrajectoryCostConfig avoid_obstacle_config = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->avoid_obstacle_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.DpPolyPathConfig)
}

::google::protobuf::uint8* DpPolyPathConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.DpPolyPathConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_pull_over = 1 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_pull_over(), target);
  }

  // optional double eval_time_interval = 2 [default = 0.1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->eval_time_interval(), target);
  }

  // optional double path_resolution = 3 [default = 0.1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->path_resolution(), target);
  }

  // optional .acu.planning.WaypointSamplerConfig waypoint_sampler_config = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->waypoint_sampler_config_, deterministic, target);
  }

  // optional .acu.planning.TrajectoryCostConfig default_config = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->default_config_, deterministic, target);
  }

  // optional .acu.planning.TrajectoryCostConfig lanechange_config = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->lanechange_config_, deterministic, target);
  }

  // optional .acu.planning.TrajectoryCostConfig avoid_obstacle_config = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->avoid_obstacle_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.DpPolyPathConfig)
  return target;
}

size_t DpPolyPathConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.DpPolyPathConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .acu.planning.WaypointSamplerConfig waypoint_sampler_config = 4;
    if (has_waypoint_sampler_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->waypoint_sampler_config_);
    }

    // optional .acu.planning.TrajectoryCostConfig default_config = 5;
    if (has_default_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->default_config_);
    }

    // optional .acu.planning.TrajectoryCostConfig lanechange_config = 6;
    if (has_lanechange_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->lanechange_config_);
    }

    // optional .acu.planning.TrajectoryCostConfig avoid_obstacle_config = 7;
    if (has_avoid_obstacle_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->avoid_obstacle_config_);
    }

    // optional bool enable_pull_over = 1 [default = true];
    if (has_enable_pull_over()) {
      total_size += 1 + 1;
    }

    // optional double eval_time_interval = 2 [default = 0.1];
    if (has_eval_time_interval()) {
      total_size += 1 + 8;
    }

    // optional double path_resolution = 3 [default = 0.1];
    if (has_path_resolution()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DpPolyPathConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.DpPolyPathConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DpPolyPathConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DpPolyPathConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.DpPolyPathConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.DpPolyPathConfig)
    MergeFrom(*source);
  }
}

void DpPolyPathConfig::MergeFrom(const DpPolyPathConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.DpPolyPathConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_waypoint_sampler_config()->::acu::planning::WaypointSamplerConfig::MergeFrom(from.waypoint_sampler_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_default_config()->::acu::planning::TrajectoryCostConfig::MergeFrom(from.default_config());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_lanechange_config()->::acu::planning::TrajectoryCostConfig::MergeFrom(from.lanechange_config());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_avoid_obstacle_config()->::acu::planning::TrajectoryCostConfig::MergeFrom(from.avoid_obstacle_config());
    }
    if (cached_has_bits & 0x00000010u) {
      enable_pull_over_ = from.enable_pull_over_;
    }
    if (cached_has_bits & 0x00000020u) {
      eval_time_interval_ = from.eval_time_interval_;
    }
    if (cached_has_bits & 0x00000040u) {
      path_resolution_ = from.path_resolution_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DpPolyPathConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.DpPolyPathConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DpPolyPathConfig::CopyFrom(const DpPolyPathConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.DpPolyPathConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpPolyPathConfig::IsInitialized() const {
  return true;
}

void DpPolyPathConfig::Swap(DpPolyPathConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DpPolyPathConfig::InternalSwap(DpPolyPathConfig* other) {
  using std::swap;
  swap(waypoint_sampler_config_, other->waypoint_sampler_config_);
  swap(default_config_, other->default_config_);
  swap(lanechange_config_, other->lanechange_config_);
  swap(avoid_obstacle_config_, other->avoid_obstacle_config_);
  swap(enable_pull_over_, other->enable_pull_over_);
  swap(eval_time_interval_, other->eval_time_interval_);
  swap(path_resolution_, other->path_resolution_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DpPolyPathConfig::GetMetadata() const {
  protobuf_dp_5fpoly_5fpath_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dp_5fpoly_5fpath_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace acu

// @@protoc_insertion_point(global_scope)
