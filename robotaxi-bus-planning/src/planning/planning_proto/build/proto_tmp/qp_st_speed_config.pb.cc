// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qp_st_speed_config.proto

#include "qp_st_speed_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace acu {
namespace planning {
class QpSplineConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QpSplineConfig>
      _instance;
} _QpSplineConfig_default_instance_;
class QpPiecewiseConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QpPiecewiseConfig>
      _instance;
} _QpPiecewiseConfig_default_instance_;
class QpStSpeedConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QpStSpeedConfig>
      _instance;
} _QpStSpeedConfig_default_instance_;
}  // namespace planning
}  // namespace acu
namespace protobuf_qp_5fst_5fspeed_5fconfig_2eproto {
void InitDefaultsQpSplineConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_QpSplineConfig_default_instance_;
    new (ptr) ::acu::planning::QpSplineConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::QpSplineConfig::InitAsDefaultInstance();
}

void InitDefaultsQpSplineConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQpSplineConfigImpl);
}

void InitDefaultsQpPiecewiseConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_QpPiecewiseConfig_default_instance_;
    new (ptr) ::acu::planning::QpPiecewiseConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::QpPiecewiseConfig::InitAsDefaultInstance();
}

void InitDefaultsQpPiecewiseConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQpPiecewiseConfigImpl);
}

void InitDefaultsQpStSpeedConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_qp_5fst_5fspeed_5fconfig_2eproto::InitDefaultsQpSplineConfig();
  protobuf_qp_5fst_5fspeed_5fconfig_2eproto::InitDefaultsQpPiecewiseConfig();
  protobuf_st_5fboundary_5fconfig_2eproto::InitDefaultsStBoundaryConfig();
  {
    void* ptr = &::acu::planning::_QpStSpeedConfig_default_instance_;
    new (ptr) ::acu::planning::QpStSpeedConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::QpStSpeedConfig::InitAsDefaultInstance();
}

void InitDefaultsQpStSpeedConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQpStSpeedConfigImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineConfig, number_of_discrete_graph_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineConfig, spline_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineConfig, speed_kernel_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineConfig, accel_kernel_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineConfig, decel_kernel_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineConfig, jerk_kernel_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineConfig, follow_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineConfig, stop_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineConfig, cruise_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineConfig, regularization_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineConfig, follow_drag_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineConfig, dp_st_reference_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineConfig, init_jerk_kernel_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineConfig, yield_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineConfig, yield_drag_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplineConfig, follow_v_weight_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  15,
  9,
  10,
  11,
  12,
  13,
  14,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpPiecewiseConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpPiecewiseConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpPiecewiseConfig, number_of_evaluated_graph_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpPiecewiseConfig, accel_kernel_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpPiecewiseConfig, decel_kernel_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpPiecewiseConfig, jerk_kernel_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpPiecewiseConfig, follow_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpPiecewiseConfig, stop_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpPiecewiseConfig, cruise_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpPiecewiseConfig, regularization_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpPiecewiseConfig, follow_drag_distance_),
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  8,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpStSpeedConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpStSpeedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpStSpeedConfig, total_path_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpStSpeedConfig, total_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpStSpeedConfig, preferred_max_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpStSpeedConfig, preferred_min_deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpStSpeedConfig, max_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpStSpeedConfig, min_deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpStSpeedConfig, qp_spline_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpStSpeedConfig, qp_piecewise_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpStSpeedConfig, st_boundary_config_),
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, sizeof(::acu::planning::QpSplineConfig)},
  { 37, 51, sizeof(::acu::planning::QpPiecewiseConfig)},
  { 60, 74, sizeof(::acu::planning::QpStSpeedConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_QpSplineConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_QpPiecewiseConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_QpStSpeedConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "qp_st_speed_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030qp_st_speed_config.proto\022\014acu.planning"
      "\032\030st_boundary_config.proto\"\317\003\n\016QpSplineC"
      "onfig\022\"\n\032number_of_discrete_graph_t\030\001 \001("
      "\r\022\024\n\014spline_order\030\002 \001(\r\022\033\n\023speed_kernel_"
      "weight\030\003 \001(\001\022\033\n\023accel_kernel_weight\030\004 \001("
      "\001\022\033\n\023decel_kernel_weight\030\005 \001(\001\022\032\n\022jerk_k"
      "ernel_weight\030\006 \001(\001\022\025\n\rfollow_weight\030\007 \001("
      "\001\022\023\n\013stop_weight\030\010 \001(\001\022\025\n\rcruise_weight\030"
      "\t \001(\001\022\"\n\025regularization_weight\030\n \001(\001:\0030."
      "1\022\034\n\024follow_drag_distance\030\013 \001(\001\022\036\n\026dp_st"
      "_reference_weight\030\014 \001(\001\022\037\n\027init_jerk_ker"
      "nel_weight\030\r \001(\001\022\024\n\014yield_weight\030\016 \001(\001\022\033"
      "\n\023yield_drag_distance\030\017 \001(\001\022\027\n\017follow_v_"
      "weight\030\020 \001(\001\"\223\002\n\021QpPiecewiseConfig\022#\n\033nu"
      "mber_of_evaluated_graph_t\030\001 \001(\r\022\033\n\023accel"
      "_kernel_weight\030\002 \001(\001\022\033\n\023decel_kernel_wei"
      "ght\030\003 \001(\001\022\032\n\022jerk_kernel_weight\030\004 \001(\001\022\025\n"
      "\rfollow_weight\030\005 \001(\001\022\023\n\013stop_weight\030\006 \001("
      "\001\022\025\n\rcruise_weight\030\007 \001(\001\022\"\n\025regularizati"
      "on_weight\030\010 \001(\001:\0030.1\022\034\n\024follow_drag_dist"
      "ance\030\t \001(\001\"\212\003\n\017QpStSpeedConfig\022\036\n\021total_"
      "path_length\030\001 \001(\001:\003200\022\025\n\ntotal_time\030\002 \001"
      "(\001:\0016\022\'\n\032preferred_max_acceleration\030\004 \001("
      "\001:\0031.2\022(\n\032preferred_min_deceleration\030\005 \001"
      "(\001:\004-1.8\022\033\n\020max_acceleration\030\006 \001(\001:\0012\022\036\n"
      "\020min_deceleration\030\007 \001(\001:\004-4.5\0226\n\020qp_spli"
      "ne_config\030\010 \001(\0132\034.acu.planning.QpSplineC"
      "onfig\022<\n\023qp_piecewise_config\030\t \001(\0132\037.acu"
      ".planning.QpPiecewiseConfig\022:\n\022st_bounda"
      "ry_config\030\n \001(\0132\036.acu.planning.StBoundar"
      "yConfig"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "qp_st_speed_config.proto", &protobuf_RegisterTypes);
  ::protobuf_st_5fboundary_5fconfig_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_qp_5fst_5fspeed_5fconfig_2eproto
namespace acu {
namespace planning {

// ===================================================================

void QpSplineConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QpSplineConfig::kNumberOfDiscreteGraphTFieldNumber;
const int QpSplineConfig::kSplineOrderFieldNumber;
const int QpSplineConfig::kSpeedKernelWeightFieldNumber;
const int QpSplineConfig::kAccelKernelWeightFieldNumber;
const int QpSplineConfig::kDecelKernelWeightFieldNumber;
const int QpSplineConfig::kJerkKernelWeightFieldNumber;
const int QpSplineConfig::kFollowWeightFieldNumber;
const int QpSplineConfig::kStopWeightFieldNumber;
const int QpSplineConfig::kCruiseWeightFieldNumber;
const int QpSplineConfig::kRegularizationWeightFieldNumber;
const int QpSplineConfig::kFollowDragDistanceFieldNumber;
const int QpSplineConfig::kDpStReferenceWeightFieldNumber;
const int QpSplineConfig::kInitJerkKernelWeightFieldNumber;
const int QpSplineConfig::kYieldWeightFieldNumber;
const int QpSplineConfig::kYieldDragDistanceFieldNumber;
const int QpSplineConfig::kFollowVWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QpSplineConfig::QpSplineConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_qp_5fst_5fspeed_5fconfig_2eproto::InitDefaultsQpSplineConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.QpSplineConfig)
}
QpSplineConfig::QpSplineConfig(const QpSplineConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&number_of_discrete_graph_t_, &from.number_of_discrete_graph_t_,
    static_cast<size_t>(reinterpret_cast<char*>(&regularization_weight_) -
    reinterpret_cast<char*>(&number_of_discrete_graph_t_)) + sizeof(regularization_weight_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.QpSplineConfig)
}

void QpSplineConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&number_of_discrete_graph_t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&follow_v_weight_) -
      reinterpret_cast<char*>(&number_of_discrete_graph_t_)) + sizeof(follow_v_weight_));
  regularization_weight_ = 0.1;
}

QpSplineConfig::~QpSplineConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.QpSplineConfig)
  SharedDtor();
}

void QpSplineConfig::SharedDtor() {
}

void QpSplineConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QpSplineConfig::descriptor() {
  ::protobuf_qp_5fst_5fspeed_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_qp_5fst_5fspeed_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QpSplineConfig& QpSplineConfig::default_instance() {
  ::protobuf_qp_5fst_5fspeed_5fconfig_2eproto::InitDefaultsQpSplineConfig();
  return *internal_default_instance();
}

QpSplineConfig* QpSplineConfig::New(::google::protobuf::Arena* arena) const {
  QpSplineConfig* n = new QpSplineConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QpSplineConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.QpSplineConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&number_of_discrete_graph_t_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stop_weight_) -
        reinterpret_cast<char*>(&number_of_discrete_graph_t_)) + sizeof(stop_weight_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&cruise_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&follow_v_weight_) -
        reinterpret_cast<char*>(&cruise_weight_)) + sizeof(follow_v_weight_));
    regularization_weight_ = 0.1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QpSplineConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.QpSplineConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 number_of_discrete_graph_t = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_number_of_discrete_graph_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_discrete_graph_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 spline_order = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_spline_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spline_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_kernel_weight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_speed_kernel_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_kernel_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accel_kernel_weight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_accel_kernel_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accel_kernel_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double decel_kernel_weight = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_decel_kernel_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &decel_kernel_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double jerk_kernel_weight = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_jerk_kernel_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_kernel_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double follow_weight = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_follow_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &follow_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_weight = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_stop_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cruise_weight = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_cruise_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cruise_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double regularization_weight = 10 [default = 0.1];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_regularization_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &regularization_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double follow_drag_distance = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_follow_drag_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &follow_drag_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dp_st_reference_weight = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_dp_st_reference_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dp_st_reference_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double init_jerk_kernel_weight = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_init_jerk_kernel_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &init_jerk_kernel_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double yield_weight = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_yield_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yield_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double yield_drag_distance = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_yield_drag_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yield_drag_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double follow_v_weight = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_follow_v_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &follow_v_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.QpSplineConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.QpSplineConfig)
  return false;
#undef DO_
}

void QpSplineConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.QpSplineConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 number_of_discrete_graph_t = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number_of_discrete_graph_t(), output);
  }

  // optional uint32 spline_order = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->spline_order(), output);
  }

  // optional double speed_kernel_weight = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->speed_kernel_weight(), output);
  }

  // optional double accel_kernel_weight = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->accel_kernel_weight(), output);
  }

  // optional double decel_kernel_weight = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->decel_kernel_weight(), output);
  }

  // optional double jerk_kernel_weight = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->jerk_kernel_weight(), output);
  }

  // optional double follow_weight = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->follow_weight(), output);
  }

  // optional double stop_weight = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->stop_weight(), output);
  }

  // optional double cruise_weight = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->cruise_weight(), output);
  }

  // optional double regularization_weight = 10 [default = 0.1];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->regularization_weight(), output);
  }

  // optional double follow_drag_distance = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->follow_drag_distance(), output);
  }

  // optional double dp_st_reference_weight = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->dp_st_reference_weight(), output);
  }

  // optional double init_jerk_kernel_weight = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->init_jerk_kernel_weight(), output);
  }

  // optional double yield_weight = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->yield_weight(), output);
  }

  // optional double yield_drag_distance = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->yield_drag_distance(), output);
  }

  // optional double follow_v_weight = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->follow_v_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.QpSplineConfig)
}

::google::protobuf::uint8* QpSplineConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.QpSplineConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 number_of_discrete_graph_t = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number_of_discrete_graph_t(), target);
  }

  // optional uint32 spline_order = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->spline_order(), target);
  }

  // optional double speed_kernel_weight = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->speed_kernel_weight(), target);
  }

  // optional double accel_kernel_weight = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->accel_kernel_weight(), target);
  }

  // optional double decel_kernel_weight = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->decel_kernel_weight(), target);
  }

  // optional double jerk_kernel_weight = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->jerk_kernel_weight(), target);
  }

  // optional double follow_weight = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->follow_weight(), target);
  }

  // optional double stop_weight = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->stop_weight(), target);
  }

  // optional double cruise_weight = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->cruise_weight(), target);
  }

  // optional double regularization_weight = 10 [default = 0.1];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->regularization_weight(), target);
  }

  // optional double follow_drag_distance = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->follow_drag_distance(), target);
  }

  // optional double dp_st_reference_weight = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->dp_st_reference_weight(), target);
  }

  // optional double init_jerk_kernel_weight = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->init_jerk_kernel_weight(), target);
  }

  // optional double yield_weight = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->yield_weight(), target);
  }

  // optional double yield_drag_distance = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->yield_drag_distance(), target);
  }

  // optional double follow_v_weight = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->follow_v_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.QpSplineConfig)
  return target;
}

size_t QpSplineConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.QpSplineConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 number_of_discrete_graph_t = 1;
    if (has_number_of_discrete_graph_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_discrete_graph_t());
    }

    // optional uint32 spline_order = 2;
    if (has_spline_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spline_order());
    }

    // optional double speed_kernel_weight = 3;
    if (has_speed_kernel_weight()) {
      total_size += 1 + 8;
    }

    // optional double accel_kernel_weight = 4;
    if (has_accel_kernel_weight()) {
      total_size += 1 + 8;
    }

    // optional double decel_kernel_weight = 5;
    if (has_decel_kernel_weight()) {
      total_size += 1 + 8;
    }

    // optional double jerk_kernel_weight = 6;
    if (has_jerk_kernel_weight()) {
      total_size += 1 + 8;
    }

    // optional double follow_weight = 7;
    if (has_follow_weight()) {
      total_size += 1 + 8;
    }

    // optional double stop_weight = 8;
    if (has_stop_weight()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double cruise_weight = 9;
    if (has_cruise_weight()) {
      total_size += 1 + 8;
    }

    // optional double follow_drag_distance = 11;
    if (has_follow_drag_distance()) {
      total_size += 1 + 8;
    }

    // optional double dp_st_reference_weight = 12;
    if (has_dp_st_reference_weight()) {
      total_size += 1 + 8;
    }

    // optional double init_jerk_kernel_weight = 13;
    if (has_init_jerk_kernel_weight()) {
      total_size += 1 + 8;
    }

    // optional double yield_weight = 14;
    if (has_yield_weight()) {
      total_size += 1 + 8;
    }

    // optional double yield_drag_distance = 15;
    if (has_yield_drag_distance()) {
      total_size += 1 + 8;
    }

    // optional double follow_v_weight = 16;
    if (has_follow_v_weight()) {
      total_size += 2 + 8;
    }

    // optional double regularization_weight = 10 [default = 0.1];
    if (has_regularization_weight()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QpSplineConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.QpSplineConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const QpSplineConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QpSplineConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.QpSplineConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.QpSplineConfig)
    MergeFrom(*source);
  }
}

void QpSplineConfig::MergeFrom(const QpSplineConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.QpSplineConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      number_of_discrete_graph_t_ = from.number_of_discrete_graph_t_;
    }
    if (cached_has_bits & 0x00000002u) {
      spline_order_ = from.spline_order_;
    }
    if (cached_has_bits & 0x00000004u) {
      speed_kernel_weight_ = from.speed_kernel_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      accel_kernel_weight_ = from.accel_kernel_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      decel_kernel_weight_ = from.decel_kernel_weight_;
    }
    if (cached_has_bits & 0x00000020u) {
      jerk_kernel_weight_ = from.jerk_kernel_weight_;
    }
    if (cached_has_bits & 0x00000040u) {
      follow_weight_ = from.follow_weight_;
    }
    if (cached_has_bits & 0x00000080u) {
      stop_weight_ = from.stop_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      cruise_weight_ = from.cruise_weight_;
    }
    if (cached_has_bits & 0x00000200u) {
      follow_drag_distance_ = from.follow_drag_distance_;
    }
    if (cached_has_bits & 0x00000400u) {
      dp_st_reference_weight_ = from.dp_st_reference_weight_;
    }
    if (cached_has_bits & 0x00000800u) {
      init_jerk_kernel_weight_ = from.init_jerk_kernel_weight_;
    }
    if (cached_has_bits & 0x00001000u) {
      yield_weight_ = from.yield_weight_;
    }
    if (cached_has_bits & 0x00002000u) {
      yield_drag_distance_ = from.yield_drag_distance_;
    }
    if (cached_has_bits & 0x00004000u) {
      follow_v_weight_ = from.follow_v_weight_;
    }
    if (cached_has_bits & 0x00008000u) {
      regularization_weight_ = from.regularization_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QpSplineConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.QpSplineConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QpSplineConfig::CopyFrom(const QpSplineConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.QpSplineConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpSplineConfig::IsInitialized() const {
  return true;
}

void QpSplineConfig::Swap(QpSplineConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QpSplineConfig::InternalSwap(QpSplineConfig* other) {
  using std::swap;
  swap(number_of_discrete_graph_t_, other->number_of_discrete_graph_t_);
  swap(spline_order_, other->spline_order_);
  swap(speed_kernel_weight_, other->speed_kernel_weight_);
  swap(accel_kernel_weight_, other->accel_kernel_weight_);
  swap(decel_kernel_weight_, other->decel_kernel_weight_);
  swap(jerk_kernel_weight_, other->jerk_kernel_weight_);
  swap(follow_weight_, other->follow_weight_);
  swap(stop_weight_, other->stop_weight_);
  swap(cruise_weight_, other->cruise_weight_);
  swap(follow_drag_distance_, other->follow_drag_distance_);
  swap(dp_st_reference_weight_, other->dp_st_reference_weight_);
  swap(init_jerk_kernel_weight_, other->init_jerk_kernel_weight_);
  swap(yield_weight_, other->yield_weight_);
  swap(yield_drag_distance_, other->yield_drag_distance_);
  swap(follow_v_weight_, other->follow_v_weight_);
  swap(regularization_weight_, other->regularization_weight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QpSplineConfig::GetMetadata() const {
  protobuf_qp_5fst_5fspeed_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_qp_5fst_5fspeed_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QpPiecewiseConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QpPiecewiseConfig::kNumberOfEvaluatedGraphTFieldNumber;
const int QpPiecewiseConfig::kAccelKernelWeightFieldNumber;
const int QpPiecewiseConfig::kDecelKernelWeightFieldNumber;
const int QpPiecewiseConfig::kJerkKernelWeightFieldNumber;
const int QpPiecewiseConfig::kFollowWeightFieldNumber;
const int QpPiecewiseConfig::kStopWeightFieldNumber;
const int QpPiecewiseConfig::kCruiseWeightFieldNumber;
const int QpPiecewiseConfig::kRegularizationWeightFieldNumber;
const int QpPiecewiseConfig::kFollowDragDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QpPiecewiseConfig::QpPiecewiseConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_qp_5fst_5fspeed_5fconfig_2eproto::InitDefaultsQpPiecewiseConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.QpPiecewiseConfig)
}
QpPiecewiseConfig::QpPiecewiseConfig(const QpPiecewiseConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accel_kernel_weight_, &from.accel_kernel_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&regularization_weight_) -
    reinterpret_cast<char*>(&accel_kernel_weight_)) + sizeof(regularization_weight_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.QpPiecewiseConfig)
}

void QpPiecewiseConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&accel_kernel_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_evaluated_graph_t_) -
      reinterpret_cast<char*>(&accel_kernel_weight_)) + sizeof(number_of_evaluated_graph_t_));
  regularization_weight_ = 0.1;
}

QpPiecewiseConfig::~QpPiecewiseConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.QpPiecewiseConfig)
  SharedDtor();
}

void QpPiecewiseConfig::SharedDtor() {
}

void QpPiecewiseConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QpPiecewiseConfig::descriptor() {
  ::protobuf_qp_5fst_5fspeed_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_qp_5fst_5fspeed_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QpPiecewiseConfig& QpPiecewiseConfig::default_instance() {
  ::protobuf_qp_5fst_5fspeed_5fconfig_2eproto::InitDefaultsQpPiecewiseConfig();
  return *internal_default_instance();
}

QpPiecewiseConfig* QpPiecewiseConfig::New(::google::protobuf::Arena* arena) const {
  QpPiecewiseConfig* n = new QpPiecewiseConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QpPiecewiseConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.QpPiecewiseConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&accel_kernel_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_evaluated_graph_t_) -
        reinterpret_cast<char*>(&accel_kernel_weight_)) + sizeof(number_of_evaluated_graph_t_));
  }
  regularization_weight_ = 0.1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QpPiecewiseConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.QpPiecewiseConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 number_of_evaluated_graph_t = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_number_of_evaluated_graph_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_evaluated_graph_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accel_kernel_weight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_accel_kernel_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accel_kernel_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double decel_kernel_weight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_decel_kernel_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &decel_kernel_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double jerk_kernel_weight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_jerk_kernel_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_kernel_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double follow_weight = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_follow_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &follow_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_weight = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_stop_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cruise_weight = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_cruise_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cruise_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double regularization_weight = 8 [default = 0.1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_regularization_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &regularization_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double follow_drag_distance = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_follow_drag_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &follow_drag_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.QpPiecewiseConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.QpPiecewiseConfig)
  return false;
#undef DO_
}

void QpPiecewiseConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.QpPiecewiseConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 number_of_evaluated_graph_t = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number_of_evaluated_graph_t(), output);
  }

  // optional double accel_kernel_weight = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->accel_kernel_weight(), output);
  }

  // optional double decel_kernel_weight = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->decel_kernel_weight(), output);
  }

  // optional double jerk_kernel_weight = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->jerk_kernel_weight(), output);
  }

  // optional double follow_weight = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->follow_weight(), output);
  }

  // optional double stop_weight = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->stop_weight(), output);
  }

  // optional double cruise_weight = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->cruise_weight(), output);
  }

  // optional double regularization_weight = 8 [default = 0.1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->regularization_weight(), output);
  }

  // optional double follow_drag_distance = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->follow_drag_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.QpPiecewiseConfig)
}

::google::protobuf::uint8* QpPiecewiseConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.QpPiecewiseConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 number_of_evaluated_graph_t = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number_of_evaluated_graph_t(), target);
  }

  // optional double accel_kernel_weight = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->accel_kernel_weight(), target);
  }

  // optional double decel_kernel_weight = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->decel_kernel_weight(), target);
  }

  // optional double jerk_kernel_weight = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->jerk_kernel_weight(), target);
  }

  // optional double follow_weight = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->follow_weight(), target);
  }

  // optional double stop_weight = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->stop_weight(), target);
  }

  // optional double cruise_weight = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->cruise_weight(), target);
  }

  // optional double regularization_weight = 8 [default = 0.1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->regularization_weight(), target);
  }

  // optional double follow_drag_distance = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->follow_drag_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.QpPiecewiseConfig)
  return target;
}

size_t QpPiecewiseConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.QpPiecewiseConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double accel_kernel_weight = 2;
    if (has_accel_kernel_weight()) {
      total_size += 1 + 8;
    }

    // optional double decel_kernel_weight = 3;
    if (has_decel_kernel_weight()) {
      total_size += 1 + 8;
    }

    // optional double jerk_kernel_weight = 4;
    if (has_jerk_kernel_weight()) {
      total_size += 1 + 8;
    }

    // optional double follow_weight = 5;
    if (has_follow_weight()) {
      total_size += 1 + 8;
    }

    // optional double stop_weight = 6;
    if (has_stop_weight()) {
      total_size += 1 + 8;
    }

    // optional double cruise_weight = 7;
    if (has_cruise_weight()) {
      total_size += 1 + 8;
    }

    // optional double follow_drag_distance = 9;
    if (has_follow_drag_distance()) {
      total_size += 1 + 8;
    }

    // optional uint32 number_of_evaluated_graph_t = 1;
    if (has_number_of_evaluated_graph_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number_of_evaluated_graph_t());
    }

  }
  // optional double regularization_weight = 8 [default = 0.1];
  if (has_regularization_weight()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QpPiecewiseConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.QpPiecewiseConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const QpPiecewiseConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QpPiecewiseConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.QpPiecewiseConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.QpPiecewiseConfig)
    MergeFrom(*source);
  }
}

void QpPiecewiseConfig::MergeFrom(const QpPiecewiseConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.QpPiecewiseConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      accel_kernel_weight_ = from.accel_kernel_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      decel_kernel_weight_ = from.decel_kernel_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      jerk_kernel_weight_ = from.jerk_kernel_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      follow_weight_ = from.follow_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      stop_weight_ = from.stop_weight_;
    }
    if (cached_has_bits & 0x00000020u) {
      cruise_weight_ = from.cruise_weight_;
    }
    if (cached_has_bits & 0x00000040u) {
      follow_drag_distance_ = from.follow_drag_distance_;
    }
    if (cached_has_bits & 0x00000080u) {
      number_of_evaluated_graph_t_ = from.number_of_evaluated_graph_t_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_regularization_weight(from.regularization_weight());
  }
}

void QpPiecewiseConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.QpPiecewiseConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QpPiecewiseConfig::CopyFrom(const QpPiecewiseConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.QpPiecewiseConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpPiecewiseConfig::IsInitialized() const {
  return true;
}

void QpPiecewiseConfig::Swap(QpPiecewiseConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QpPiecewiseConfig::InternalSwap(QpPiecewiseConfig* other) {
  using std::swap;
  swap(accel_kernel_weight_, other->accel_kernel_weight_);
  swap(decel_kernel_weight_, other->decel_kernel_weight_);
  swap(jerk_kernel_weight_, other->jerk_kernel_weight_);
  swap(follow_weight_, other->follow_weight_);
  swap(stop_weight_, other->stop_weight_);
  swap(cruise_weight_, other->cruise_weight_);
  swap(follow_drag_distance_, other->follow_drag_distance_);
  swap(number_of_evaluated_graph_t_, other->number_of_evaluated_graph_t_);
  swap(regularization_weight_, other->regularization_weight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QpPiecewiseConfig::GetMetadata() const {
  protobuf_qp_5fst_5fspeed_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_qp_5fst_5fspeed_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QpStSpeedConfig::InitAsDefaultInstance() {
  ::acu::planning::_QpStSpeedConfig_default_instance_._instance.get_mutable()->qp_spline_config_ = const_cast< ::acu::planning::QpSplineConfig*>(
      ::acu::planning::QpSplineConfig::internal_default_instance());
  ::acu::planning::_QpStSpeedConfig_default_instance_._instance.get_mutable()->qp_piecewise_config_ = const_cast< ::acu::planning::QpPiecewiseConfig*>(
      ::acu::planning::QpPiecewiseConfig::internal_default_instance());
  ::acu::planning::_QpStSpeedConfig_default_instance_._instance.get_mutable()->st_boundary_config_ = const_cast< ::acu::planning::StBoundaryConfig*>(
      ::acu::planning::StBoundaryConfig::internal_default_instance());
}
void QpStSpeedConfig::clear_st_boundary_config() {
  if (st_boundary_config_ != NULL) st_boundary_config_->Clear();
  clear_has_st_boundary_config();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QpStSpeedConfig::kTotalPathLengthFieldNumber;
const int QpStSpeedConfig::kTotalTimeFieldNumber;
const int QpStSpeedConfig::kPreferredMaxAccelerationFieldNumber;
const int QpStSpeedConfig::kPreferredMinDecelerationFieldNumber;
const int QpStSpeedConfig::kMaxAccelerationFieldNumber;
const int QpStSpeedConfig::kMinDecelerationFieldNumber;
const int QpStSpeedConfig::kQpSplineConfigFieldNumber;
const int QpStSpeedConfig::kQpPiecewiseConfigFieldNumber;
const int QpStSpeedConfig::kStBoundaryConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QpStSpeedConfig::QpStSpeedConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_qp_5fst_5fspeed_5fconfig_2eproto::InitDefaultsQpStSpeedConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.QpStSpeedConfig)
}
QpStSpeedConfig::QpStSpeedConfig(const QpStSpeedConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_qp_spline_config()) {
    qp_spline_config_ = new ::acu::planning::QpSplineConfig(*from.qp_spline_config_);
  } else {
    qp_spline_config_ = NULL;
  }
  if (from.has_qp_piecewise_config()) {
    qp_piecewise_config_ = new ::acu::planning::QpPiecewiseConfig(*from.qp_piecewise_config_);
  } else {
    qp_piecewise_config_ = NULL;
  }
  if (from.has_st_boundary_config()) {
    st_boundary_config_ = new ::acu::planning::StBoundaryConfig(*from.st_boundary_config_);
  } else {
    st_boundary_config_ = NULL;
  }
  ::memcpy(&total_path_length_, &from.total_path_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_deceleration_) -
    reinterpret_cast<char*>(&total_path_length_)) + sizeof(min_deceleration_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.QpStSpeedConfig)
}

void QpStSpeedConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&qp_spline_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&st_boundary_config_) -
      reinterpret_cast<char*>(&qp_spline_config_)) + sizeof(st_boundary_config_));
  total_path_length_ = 200;
  total_time_ = 6;
  preferred_max_acceleration_ = 1.2;
  preferred_min_deceleration_ = -1.8;
  max_acceleration_ = 2;
  min_deceleration_ = -4.5;
}

QpStSpeedConfig::~QpStSpeedConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.QpStSpeedConfig)
  SharedDtor();
}

void QpStSpeedConfig::SharedDtor() {
  if (this != internal_default_instance()) delete qp_spline_config_;
  if (this != internal_default_instance()) delete qp_piecewise_config_;
  if (this != internal_default_instance()) delete st_boundary_config_;
}

void QpStSpeedConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QpStSpeedConfig::descriptor() {
  ::protobuf_qp_5fst_5fspeed_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_qp_5fst_5fspeed_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QpStSpeedConfig& QpStSpeedConfig::default_instance() {
  ::protobuf_qp_5fst_5fspeed_5fconfig_2eproto::InitDefaultsQpStSpeedConfig();
  return *internal_default_instance();
}

QpStSpeedConfig* QpStSpeedConfig::New(::google::protobuf::Arena* arena) const {
  QpStSpeedConfig* n = new QpStSpeedConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QpStSpeedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.QpStSpeedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(qp_spline_config_ != NULL);
      qp_spline_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(qp_piecewise_config_ != NULL);
      qp_piecewise_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(st_boundary_config_ != NULL);
      st_boundary_config_->Clear();
    }
    total_path_length_ = 200;
    total_time_ = 6;
    preferred_max_acceleration_ = 1.2;
    preferred_min_deceleration_ = -1.8;
    max_acceleration_ = 2;
  }
  min_deceleration_ = -4.5;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QpStSpeedConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.QpStSpeedConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double total_path_length = 1 [default = 200];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_total_path_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double total_time = 2 [default = 6];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_total_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double preferred_max_acceleration = 4 [default = 1.2];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_preferred_max_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preferred_max_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double preferred_min_deceleration = 5 [default = -1.8];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_preferred_min_deceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preferred_min_deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acceleration = 6 [default = 2];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_max_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_deceleration = 7 [default = -4.5];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_min_deceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.QpSplineConfig qp_spline_config = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_qp_spline_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.QpPiecewiseConfig qp_piecewise_config = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_qp_piecewise_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.StBoundaryConfig st_boundary_config = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_st_boundary_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.QpStSpeedConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.QpStSpeedConfig)
  return false;
#undef DO_
}

void QpStSpeedConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.QpStSpeedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_path_length = 1 [default = 200];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_path_length(), output);
  }

  // optional double total_time = 2 [default = 6];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->total_time(), output);
  }

  // optional double preferred_max_acceleration = 4 [default = 1.2];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->preferred_max_acceleration(), output);
  }

  // optional double preferred_min_deceleration = 5 [default = -1.8];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->preferred_min_deceleration(), output);
  }

  // optional double max_acceleration = 6 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->max_acceleration(), output);
  }

  // optional double min_deceleration = 7 [default = -4.5];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->min_deceleration(), output);
  }

  // optional .acu.planning.QpSplineConfig qp_spline_config = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->qp_spline_config_, output);
  }

  // optional .acu.planning.QpPiecewiseConfig qp_piecewise_config = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->qp_piecewise_config_, output);
  }

  // optional .acu.planning.StBoundaryConfig st_boundary_config = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->st_boundary_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.QpStSpeedConfig)
}

::google::protobuf::uint8* QpStSpeedConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.QpStSpeedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_path_length = 1 [default = 200];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_path_length(), target);
  }

  // optional double total_time = 2 [default = 6];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->total_time(), target);
  }

  // optional double preferred_max_acceleration = 4 [default = 1.2];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->preferred_max_acceleration(), target);
  }

  // optional double preferred_min_deceleration = 5 [default = -1.8];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->preferred_min_deceleration(), target);
  }

  // optional double max_acceleration = 6 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->max_acceleration(), target);
  }

  // optional double min_deceleration = 7 [default = -4.5];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->min_deceleration(), target);
  }

  // optional .acu.planning.QpSplineConfig qp_spline_config = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->qp_spline_config_, deterministic, target);
  }

  // optional .acu.planning.QpPiecewiseConfig qp_piecewise_config = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->qp_piecewise_config_, deterministic, target);
  }

  // optional .acu.planning.StBoundaryConfig st_boundary_config = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->st_boundary_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.QpStSpeedConfig)
  return target;
}

size_t QpStSpeedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.QpStSpeedConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .acu.planning.QpSplineConfig qp_spline_config = 8;
    if (has_qp_spline_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->qp_spline_config_);
    }

    // optional .acu.planning.QpPiecewiseConfig qp_piecewise_config = 9;
    if (has_qp_piecewise_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->qp_piecewise_config_);
    }

    // optional .acu.planning.StBoundaryConfig st_boundary_config = 10;
    if (has_st_boundary_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->st_boundary_config_);
    }

    // optional double total_path_length = 1 [default = 200];
    if (has_total_path_length()) {
      total_size += 1 + 8;
    }

    // optional double total_time = 2 [default = 6];
    if (has_total_time()) {
      total_size += 1 + 8;
    }

    // optional double preferred_max_acceleration = 4 [default = 1.2];
    if (has_preferred_max_acceleration()) {
      total_size += 1 + 8;
    }

    // optional double preferred_min_deceleration = 5 [default = -1.8];
    if (has_preferred_min_deceleration()) {
      total_size += 1 + 8;
    }

    // optional double max_acceleration = 6 [default = 2];
    if (has_max_acceleration()) {
      total_size += 1 + 8;
    }

  }
  // optional double min_deceleration = 7 [default = -4.5];
  if (has_min_deceleration()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QpStSpeedConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.QpStSpeedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const QpStSpeedConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QpStSpeedConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.QpStSpeedConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.QpStSpeedConfig)
    MergeFrom(*source);
  }
}

void QpStSpeedConfig::MergeFrom(const QpStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.QpStSpeedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_qp_spline_config()->::acu::planning::QpSplineConfig::MergeFrom(from.qp_spline_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_qp_piecewise_config()->::acu::planning::QpPiecewiseConfig::MergeFrom(from.qp_piecewise_config());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_st_boundary_config()->::acu::planning::StBoundaryConfig::MergeFrom(from.st_boundary_config());
    }
    if (cached_has_bits & 0x00000008u) {
      total_path_length_ = from.total_path_length_;
    }
    if (cached_has_bits & 0x00000010u) {
      total_time_ = from.total_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      preferred_max_acceleration_ = from.preferred_max_acceleration_;
    }
    if (cached_has_bits & 0x00000040u) {
      preferred_min_deceleration_ = from.preferred_min_deceleration_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_acceleration_ = from.max_acceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_min_deceleration(from.min_deceleration());
  }
}

void QpStSpeedConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.QpStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QpStSpeedConfig::CopyFrom(const QpStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.QpStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpStSpeedConfig::IsInitialized() const {
  return true;
}

void QpStSpeedConfig::Swap(QpStSpeedConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QpStSpeedConfig::InternalSwap(QpStSpeedConfig* other) {
  using std::swap;
  swap(qp_spline_config_, other->qp_spline_config_);
  swap(qp_piecewise_config_, other->qp_piecewise_config_);
  swap(st_boundary_config_, other->st_boundary_config_);
  swap(total_path_length_, other->total_path_length_);
  swap(total_time_, other->total_time_);
  swap(preferred_max_acceleration_, other->preferred_max_acceleration_);
  swap(preferred_min_deceleration_, other->preferred_min_deceleration_);
  swap(max_acceleration_, other->max_acceleration_);
  swap(min_deceleration_, other->min_deceleration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QpStSpeedConfig::GetMetadata() const {
  protobuf_qp_5fst_5fspeed_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_qp_5fst_5fspeed_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace acu

// @@protoc_insertion_point(global_scope)
