// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dp_poly_path_config.proto

#ifndef PROTOBUF_dp_5fpoly_5fpath_5fconfig_2eproto__INCLUDED
#define PROTOBUF_dp_5fpoly_5fpath_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "waypoint_sampler_config.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_dp_5fpoly_5fpath_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTrajectoryCostConfigImpl();
void InitDefaultsTrajectoryCostConfig();
void InitDefaultsDpPolyPathConfigImpl();
void InitDefaultsDpPolyPathConfig();
inline void InitDefaults() {
  InitDefaultsTrajectoryCostConfig();
  InitDefaultsDpPolyPathConfig();
}
}  // namespace protobuf_dp_5fpoly_5fpath_5fconfig_2eproto
namespace acu {
namespace planning {
class DpPolyPathConfig;
class DpPolyPathConfigDefaultTypeInternal;
extern DpPolyPathConfigDefaultTypeInternal _DpPolyPathConfig_default_instance_;
class TrajectoryCostConfig;
class TrajectoryCostConfigDefaultTypeInternal;
extern TrajectoryCostConfigDefaultTypeInternal _TrajectoryCostConfig_default_instance_;
}  // namespace planning
}  // namespace acu
namespace acu {
namespace planning {

// ===================================================================

class TrajectoryCostConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:acu.planning.TrajectoryCostConfig) */ {
 public:
  TrajectoryCostConfig();
  virtual ~TrajectoryCostConfig();

  TrajectoryCostConfig(const TrajectoryCostConfig& from);

  inline TrajectoryCostConfig& operator=(const TrajectoryCostConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrajectoryCostConfig(TrajectoryCostConfig&& from) noexcept
    : TrajectoryCostConfig() {
    *this = ::std::move(from);
  }

  inline TrajectoryCostConfig& operator=(TrajectoryCostConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryCostConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryCostConfig* internal_default_instance() {
    return reinterpret_cast<const TrajectoryCostConfig*>(
               &_TrajectoryCostConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TrajectoryCostConfig* other);
  friend void swap(TrajectoryCostConfig& a, TrajectoryCostConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryCostConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  TrajectoryCostConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrajectoryCostConfig& from);
  void MergeFrom(const TrajectoryCostConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrajectoryCostConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double path_l_cost = 7;
  bool has_path_l_cost() const;
  void clear_path_l_cost();
  static const int kPathLCostFieldNumber = 7;
  double path_l_cost() const;
  void set_path_l_cost(double value);

  // optional double path_dl_cost = 8;
  bool has_path_dl_cost() const;
  void clear_path_dl_cost();
  static const int kPathDlCostFieldNumber = 8;
  double path_dl_cost() const;
  void set_path_dl_cost(double value);

  // optional double path_ddl_cost = 9;
  bool has_path_ddl_cost() const;
  void clear_path_ddl_cost();
  static const int kPathDdlCostFieldNumber = 9;
  double path_ddl_cost() const;
  void set_path_ddl_cost(double value);

  // optional double path_l_cost_param_l0 = 10;
  bool has_path_l_cost_param_l0() const;
  void clear_path_l_cost_param_l0();
  static const int kPathLCostParamL0FieldNumber = 10;
  double path_l_cost_param_l0() const;
  void set_path_l_cost_param_l0(double value);

  // optional double path_l_cost_param_b = 11;
  bool has_path_l_cost_param_b() const;
  void clear_path_l_cost_param_b();
  static const int kPathLCostParamBFieldNumber = 11;
  double path_l_cost_param_b() const;
  void set_path_l_cost_param_b(double value);

  // optional double path_l_cost_param_k = 12;
  bool has_path_l_cost_param_k() const;
  void clear_path_l_cost_param_k();
  static const int kPathLCostParamKFieldNumber = 12;
  double path_l_cost_param_k() const;
  void set_path_l_cost_param_k(double value);

  // optional double path_out_lane_cost = 13;
  bool has_path_out_lane_cost() const;
  void clear_path_out_lane_cost();
  static const int kPathOutLaneCostFieldNumber = 13;
  double path_out_lane_cost() const;
  void set_path_out_lane_cost(double value);

  // optional double path_end_l_cost = 14;
  bool has_path_end_l_cost() const;
  void clear_path_end_l_cost();
  static const int kPathEndLCostFieldNumber = 14;
  double path_end_l_cost() const;
  void set_path_end_l_cost(double value);

  // optional double eval_time_interval = 1 [default = 0.1];
  bool has_eval_time_interval() const;
  void clear_eval_time_interval();
  static const int kEvalTimeIntervalFieldNumber = 1;
  double eval_time_interval() const;
  void set_eval_time_interval(double value);

  // optional double path_resolution = 2 [default = 0.1];
  bool has_path_resolution() const;
  void clear_path_resolution();
  static const int kPathResolutionFieldNumber = 2;
  double path_resolution() const;
  void set_path_resolution(double value);

  // optional double obstacle_ignore_distance = 3 [default = 20];
  bool has_obstacle_ignore_distance() const;
  void clear_obstacle_ignore_distance();
  static const int kObstacleIgnoreDistanceFieldNumber = 3;
  double obstacle_ignore_distance() const;
  void set_obstacle_ignore_distance(double value);

  // optional double obstacle_collision_distance = 4 [default = 0.2];
  bool has_obstacle_collision_distance() const;
  void clear_obstacle_collision_distance();
  static const int kObstacleCollisionDistanceFieldNumber = 4;
  double obstacle_collision_distance() const;
  void set_obstacle_collision_distance(double value);

  // optional double obstacle_risk_distance = 5 [default = 2];
  bool has_obstacle_risk_distance() const;
  void clear_obstacle_risk_distance();
  static const int kObstacleRiskDistanceFieldNumber = 5;
  double obstacle_risk_distance() const;
  void set_obstacle_risk_distance(double value);

  // optional double obstacle_collision_cost = 6 [default = 1000];
  bool has_obstacle_collision_cost() const;
  void clear_obstacle_collision_cost();
  static const int kObstacleCollisionCostFieldNumber = 6;
  double obstacle_collision_cost() const;
  void set_obstacle_collision_cost(double value);

  // @@protoc_insertion_point(class_scope:acu.planning.TrajectoryCostConfig)
 private:
  void set_has_eval_time_interval();
  void clear_has_eval_time_interval();
  void set_has_path_resolution();
  void clear_has_path_resolution();
  void set_has_obstacle_ignore_distance();
  void clear_has_obstacle_ignore_distance();
  void set_has_obstacle_collision_distance();
  void clear_has_obstacle_collision_distance();
  void set_has_obstacle_risk_distance();
  void clear_has_obstacle_risk_distance();
  void set_has_obstacle_collision_cost();
  void clear_has_obstacle_collision_cost();
  void set_has_path_l_cost();
  void clear_has_path_l_cost();
  void set_has_path_dl_cost();
  void clear_has_path_dl_cost();
  void set_has_path_ddl_cost();
  void clear_has_path_ddl_cost();
  void set_has_path_l_cost_param_l0();
  void clear_has_path_l_cost_param_l0();
  void set_has_path_l_cost_param_b();
  void clear_has_path_l_cost_param_b();
  void set_has_path_l_cost_param_k();
  void clear_has_path_l_cost_param_k();
  void set_has_path_out_lane_cost();
  void clear_has_path_out_lane_cost();
  void set_has_path_end_l_cost();
  void clear_has_path_end_l_cost();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double path_l_cost_;
  double path_dl_cost_;
  double path_ddl_cost_;
  double path_l_cost_param_l0_;
  double path_l_cost_param_b_;
  double path_l_cost_param_k_;
  double path_out_lane_cost_;
  double path_end_l_cost_;
  double eval_time_interval_;
  double path_resolution_;
  double obstacle_ignore_distance_;
  double obstacle_collision_distance_;
  double obstacle_risk_distance_;
  double obstacle_collision_cost_;
  friend struct ::protobuf_dp_5fpoly_5fpath_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_dp_5fpoly_5fpath_5fconfig_2eproto::InitDefaultsTrajectoryCostConfigImpl();
};
// -------------------------------------------------------------------

class DpPolyPathConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:acu.planning.DpPolyPathConfig) */ {
 public:
  DpPolyPathConfig();
  virtual ~DpPolyPathConfig();

  DpPolyPathConfig(const DpPolyPathConfig& from);

  inline DpPolyPathConfig& operator=(const DpPolyPathConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DpPolyPathConfig(DpPolyPathConfig&& from) noexcept
    : DpPolyPathConfig() {
    *this = ::std::move(from);
  }

  inline DpPolyPathConfig& operator=(DpPolyPathConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DpPolyPathConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DpPolyPathConfig* internal_default_instance() {
    return reinterpret_cast<const DpPolyPathConfig*>(
               &_DpPolyPathConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DpPolyPathConfig* other);
  friend void swap(DpPolyPathConfig& a, DpPolyPathConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DpPolyPathConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  DpPolyPathConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DpPolyPathConfig& from);
  void MergeFrom(const DpPolyPathConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DpPolyPathConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .acu.planning.WaypointSamplerConfig waypoint_sampler_config = 4;
  bool has_waypoint_sampler_config() const;
  void clear_waypoint_sampler_config();
  static const int kWaypointSamplerConfigFieldNumber = 4;
  const ::acu::planning::WaypointSamplerConfig& waypoint_sampler_config() const;
  ::acu::planning::WaypointSamplerConfig* release_waypoint_sampler_config();
  ::acu::planning::WaypointSamplerConfig* mutable_waypoint_sampler_config();
  void set_allocated_waypoint_sampler_config(::acu::planning::WaypointSamplerConfig* waypoint_sampler_config);

  // optional .acu.planning.TrajectoryCostConfig default_config = 5;
  bool has_default_config() const;
  void clear_default_config();
  static const int kDefaultConfigFieldNumber = 5;
  const ::acu::planning::TrajectoryCostConfig& default_config() const;
  ::acu::planning::TrajectoryCostConfig* release_default_config();
  ::acu::planning::TrajectoryCostConfig* mutable_default_config();
  void set_allocated_default_config(::acu::planning::TrajectoryCostConfig* default_config);

  // optional .acu.planning.TrajectoryCostConfig lanechange_config = 6;
  bool has_lanechange_config() const;
  void clear_lanechange_config();
  static const int kLanechangeConfigFieldNumber = 6;
  const ::acu::planning::TrajectoryCostConfig& lanechange_config() const;
  ::acu::planning::TrajectoryCostConfig* release_lanechange_config();
  ::acu::planning::TrajectoryCostConfig* mutable_lanechange_config();
  void set_allocated_lanechange_config(::acu::planning::TrajectoryCostConfig* lanechange_config);

  // optional .acu.planning.TrajectoryCostConfig avoid_obstacle_config = 7;
  bool has_avoid_obstacle_config() const;
  void clear_avoid_obstacle_config();
  static const int kAvoidObstacleConfigFieldNumber = 7;
  const ::acu::planning::TrajectoryCostConfig& avoid_obstacle_config() const;
  ::acu::planning::TrajectoryCostConfig* release_avoid_obstacle_config();
  ::acu::planning::TrajectoryCostConfig* mutable_avoid_obstacle_config();
  void set_allocated_avoid_obstacle_config(::acu::planning::TrajectoryCostConfig* avoid_obstacle_config);

  // optional bool enable_pull_over = 1 [default = true];
  bool has_enable_pull_over() const;
  void clear_enable_pull_over();
  static const int kEnablePullOverFieldNumber = 1;
  bool enable_pull_over() const;
  void set_enable_pull_over(bool value);

  // optional double eval_time_interval = 2 [default = 0.1];
  bool has_eval_time_interval() const;
  void clear_eval_time_interval();
  static const int kEvalTimeIntervalFieldNumber = 2;
  double eval_time_interval() const;
  void set_eval_time_interval(double value);

  // optional double path_resolution = 3 [default = 0.1];
  bool has_path_resolution() const;
  void clear_path_resolution();
  static const int kPathResolutionFieldNumber = 3;
  double path_resolution() const;
  void set_path_resolution(double value);

  // @@protoc_insertion_point(class_scope:acu.planning.DpPolyPathConfig)
 private:
  void set_has_enable_pull_over();
  void clear_has_enable_pull_over();
  void set_has_eval_time_interval();
  void clear_has_eval_time_interval();
  void set_has_path_resolution();
  void clear_has_path_resolution();
  void set_has_waypoint_sampler_config();
  void clear_has_waypoint_sampler_config();
  void set_has_default_config();
  void clear_has_default_config();
  void set_has_lanechange_config();
  void clear_has_lanechange_config();
  void set_has_avoid_obstacle_config();
  void clear_has_avoid_obstacle_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::acu::planning::WaypointSamplerConfig* waypoint_sampler_config_;
  ::acu::planning::TrajectoryCostConfig* default_config_;
  ::acu::planning::TrajectoryCostConfig* lanechange_config_;
  ::acu::planning::TrajectoryCostConfig* avoid_obstacle_config_;
  bool enable_pull_over_;
  double eval_time_interval_;
  double path_resolution_;
  friend struct ::protobuf_dp_5fpoly_5fpath_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_dp_5fpoly_5fpath_5fconfig_2eproto::InitDefaultsDpPolyPathConfigImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrajectoryCostConfig

// optional double eval_time_interval = 1 [default = 0.1];
inline bool TrajectoryCostConfig::has_eval_time_interval() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TrajectoryCostConfig::set_has_eval_time_interval() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TrajectoryCostConfig::clear_has_eval_time_interval() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TrajectoryCostConfig::clear_eval_time_interval() {
  eval_time_interval_ = 0.1;
  clear_has_eval_time_interval();
}
inline double TrajectoryCostConfig::eval_time_interval() const {
  // @@protoc_insertion_point(field_get:acu.planning.TrajectoryCostConfig.eval_time_interval)
  return eval_time_interval_;
}
inline void TrajectoryCostConfig::set_eval_time_interval(double value) {
  set_has_eval_time_interval();
  eval_time_interval_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.TrajectoryCostConfig.eval_time_interval)
}

// optional double path_resolution = 2 [default = 0.1];
inline bool TrajectoryCostConfig::has_path_resolution() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TrajectoryCostConfig::set_has_path_resolution() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TrajectoryCostConfig::clear_has_path_resolution() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TrajectoryCostConfig::clear_path_resolution() {
  path_resolution_ = 0.1;
  clear_has_path_resolution();
}
inline double TrajectoryCostConfig::path_resolution() const {
  // @@protoc_insertion_point(field_get:acu.planning.TrajectoryCostConfig.path_resolution)
  return path_resolution_;
}
inline void TrajectoryCostConfig::set_path_resolution(double value) {
  set_has_path_resolution();
  path_resolution_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.TrajectoryCostConfig.path_resolution)
}

// optional double obstacle_ignore_distance = 3 [default = 20];
inline bool TrajectoryCostConfig::has_obstacle_ignore_distance() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TrajectoryCostConfig::set_has_obstacle_ignore_distance() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TrajectoryCostConfig::clear_has_obstacle_ignore_distance() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TrajectoryCostConfig::clear_obstacle_ignore_distance() {
  obstacle_ignore_distance_ = 20;
  clear_has_obstacle_ignore_distance();
}
inline double TrajectoryCostConfig::obstacle_ignore_distance() const {
  // @@protoc_insertion_point(field_get:acu.planning.TrajectoryCostConfig.obstacle_ignore_distance)
  return obstacle_ignore_distance_;
}
inline void TrajectoryCostConfig::set_obstacle_ignore_distance(double value) {
  set_has_obstacle_ignore_distance();
  obstacle_ignore_distance_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.TrajectoryCostConfig.obstacle_ignore_distance)
}

// optional double obstacle_collision_distance = 4 [default = 0.2];
inline bool TrajectoryCostConfig::has_obstacle_collision_distance() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TrajectoryCostConfig::set_has_obstacle_collision_distance() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TrajectoryCostConfig::clear_has_obstacle_collision_distance() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TrajectoryCostConfig::clear_obstacle_collision_distance() {
  obstacle_collision_distance_ = 0.2;
  clear_has_obstacle_collision_distance();
}
inline double TrajectoryCostConfig::obstacle_collision_distance() const {
  // @@protoc_insertion_point(field_get:acu.planning.TrajectoryCostConfig.obstacle_collision_distance)
  return obstacle_collision_distance_;
}
inline void TrajectoryCostConfig::set_obstacle_collision_distance(double value) {
  set_has_obstacle_collision_distance();
  obstacle_collision_distance_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.TrajectoryCostConfig.obstacle_collision_distance)
}

// optional double obstacle_risk_distance = 5 [default = 2];
inline bool TrajectoryCostConfig::has_obstacle_risk_distance() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TrajectoryCostConfig::set_has_obstacle_risk_distance() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TrajectoryCostConfig::clear_has_obstacle_risk_distance() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TrajectoryCostConfig::clear_obstacle_risk_distance() {
  obstacle_risk_distance_ = 2;
  clear_has_obstacle_risk_distance();
}
inline double TrajectoryCostConfig::obstacle_risk_distance() const {
  // @@protoc_insertion_point(field_get:acu.planning.TrajectoryCostConfig.obstacle_risk_distance)
  return obstacle_risk_distance_;
}
inline void TrajectoryCostConfig::set_obstacle_risk_distance(double value) {
  set_has_obstacle_risk_distance();
  obstacle_risk_distance_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.TrajectoryCostConfig.obstacle_risk_distance)
}

// optional double obstacle_collision_cost = 6 [default = 1000];
inline bool TrajectoryCostConfig::has_obstacle_collision_cost() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TrajectoryCostConfig::set_has_obstacle_collision_cost() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TrajectoryCostConfig::clear_has_obstacle_collision_cost() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TrajectoryCostConfig::clear_obstacle_collision_cost() {
  obstacle_collision_cost_ = 1000;
  clear_has_obstacle_collision_cost();
}
inline double TrajectoryCostConfig::obstacle_collision_cost() const {
  // @@protoc_insertion_point(field_get:acu.planning.TrajectoryCostConfig.obstacle_collision_cost)
  return obstacle_collision_cost_;
}
inline void TrajectoryCostConfig::set_obstacle_collision_cost(double value) {
  set_has_obstacle_collision_cost();
  obstacle_collision_cost_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.TrajectoryCostConfig.obstacle_collision_cost)
}

// optional double path_l_cost = 7;
inline bool TrajectoryCostConfig::has_path_l_cost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrajectoryCostConfig::set_has_path_l_cost() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrajectoryCostConfig::clear_has_path_l_cost() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrajectoryCostConfig::clear_path_l_cost() {
  path_l_cost_ = 0;
  clear_has_path_l_cost();
}
inline double TrajectoryCostConfig::path_l_cost() const {
  // @@protoc_insertion_point(field_get:acu.planning.TrajectoryCostConfig.path_l_cost)
  return path_l_cost_;
}
inline void TrajectoryCostConfig::set_path_l_cost(double value) {
  set_has_path_l_cost();
  path_l_cost_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.TrajectoryCostConfig.path_l_cost)
}

// optional double path_dl_cost = 8;
inline bool TrajectoryCostConfig::has_path_dl_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrajectoryCostConfig::set_has_path_dl_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrajectoryCostConfig::clear_has_path_dl_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrajectoryCostConfig::clear_path_dl_cost() {
  path_dl_cost_ = 0;
  clear_has_path_dl_cost();
}
inline double TrajectoryCostConfig::path_dl_cost() const {
  // @@protoc_insertion_point(field_get:acu.planning.TrajectoryCostConfig.path_dl_cost)
  return path_dl_cost_;
}
inline void TrajectoryCostConfig::set_path_dl_cost(double value) {
  set_has_path_dl_cost();
  path_dl_cost_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.TrajectoryCostConfig.path_dl_cost)
}

// optional double path_ddl_cost = 9;
inline bool TrajectoryCostConfig::has_path_ddl_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrajectoryCostConfig::set_has_path_ddl_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrajectoryCostConfig::clear_has_path_ddl_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrajectoryCostConfig::clear_path_ddl_cost() {
  path_ddl_cost_ = 0;
  clear_has_path_ddl_cost();
}
inline double TrajectoryCostConfig::path_ddl_cost() const {
  // @@protoc_insertion_point(field_get:acu.planning.TrajectoryCostConfig.path_ddl_cost)
  return path_ddl_cost_;
}
inline void TrajectoryCostConfig::set_path_ddl_cost(double value) {
  set_has_path_ddl_cost();
  path_ddl_cost_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.TrajectoryCostConfig.path_ddl_cost)
}

// optional double path_l_cost_param_l0 = 10;
inline bool TrajectoryCostConfig::has_path_l_cost_param_l0() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrajectoryCostConfig::set_has_path_l_cost_param_l0() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrajectoryCostConfig::clear_has_path_l_cost_param_l0() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrajectoryCostConfig::clear_path_l_cost_param_l0() {
  path_l_cost_param_l0_ = 0;
  clear_has_path_l_cost_param_l0();
}
inline double TrajectoryCostConfig::path_l_cost_param_l0() const {
  // @@protoc_insertion_point(field_get:acu.planning.TrajectoryCostConfig.path_l_cost_param_l0)
  return path_l_cost_param_l0_;
}
inline void TrajectoryCostConfig::set_path_l_cost_param_l0(double value) {
  set_has_path_l_cost_param_l0();
  path_l_cost_param_l0_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.TrajectoryCostConfig.path_l_cost_param_l0)
}

// optional double path_l_cost_param_b = 11;
inline bool TrajectoryCostConfig::has_path_l_cost_param_b() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrajectoryCostConfig::set_has_path_l_cost_param_b() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrajectoryCostConfig::clear_has_path_l_cost_param_b() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrajectoryCostConfig::clear_path_l_cost_param_b() {
  path_l_cost_param_b_ = 0;
  clear_has_path_l_cost_param_b();
}
inline double TrajectoryCostConfig::path_l_cost_param_b() const {
  // @@protoc_insertion_point(field_get:acu.planning.TrajectoryCostConfig.path_l_cost_param_b)
  return path_l_cost_param_b_;
}
inline void TrajectoryCostConfig::set_path_l_cost_param_b(double value) {
  set_has_path_l_cost_param_b();
  path_l_cost_param_b_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.TrajectoryCostConfig.path_l_cost_param_b)
}

// optional double path_l_cost_param_k = 12;
inline bool TrajectoryCostConfig::has_path_l_cost_param_k() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrajectoryCostConfig::set_has_path_l_cost_param_k() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrajectoryCostConfig::clear_has_path_l_cost_param_k() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrajectoryCostConfig::clear_path_l_cost_param_k() {
  path_l_cost_param_k_ = 0;
  clear_has_path_l_cost_param_k();
}
inline double TrajectoryCostConfig::path_l_cost_param_k() const {
  // @@protoc_insertion_point(field_get:acu.planning.TrajectoryCostConfig.path_l_cost_param_k)
  return path_l_cost_param_k_;
}
inline void TrajectoryCostConfig::set_path_l_cost_param_k(double value) {
  set_has_path_l_cost_param_k();
  path_l_cost_param_k_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.TrajectoryCostConfig.path_l_cost_param_k)
}

// optional double path_out_lane_cost = 13;
inline bool TrajectoryCostConfig::has_path_out_lane_cost() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrajectoryCostConfig::set_has_path_out_lane_cost() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrajectoryCostConfig::clear_has_path_out_lane_cost() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrajectoryCostConfig::clear_path_out_lane_cost() {
  path_out_lane_cost_ = 0;
  clear_has_path_out_lane_cost();
}
inline double TrajectoryCostConfig::path_out_lane_cost() const {
  // @@protoc_insertion_point(field_get:acu.planning.TrajectoryCostConfig.path_out_lane_cost)
  return path_out_lane_cost_;
}
inline void TrajectoryCostConfig::set_path_out_lane_cost(double value) {
  set_has_path_out_lane_cost();
  path_out_lane_cost_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.TrajectoryCostConfig.path_out_lane_cost)
}

// optional double path_end_l_cost = 14;
inline bool TrajectoryCostConfig::has_path_end_l_cost() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrajectoryCostConfig::set_has_path_end_l_cost() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TrajectoryCostConfig::clear_has_path_end_l_cost() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TrajectoryCostConfig::clear_path_end_l_cost() {
  path_end_l_cost_ = 0;
  clear_has_path_end_l_cost();
}
inline double TrajectoryCostConfig::path_end_l_cost() const {
  // @@protoc_insertion_point(field_get:acu.planning.TrajectoryCostConfig.path_end_l_cost)
  return path_end_l_cost_;
}
inline void TrajectoryCostConfig::set_path_end_l_cost(double value) {
  set_has_path_end_l_cost();
  path_end_l_cost_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.TrajectoryCostConfig.path_end_l_cost)
}

// -------------------------------------------------------------------

// DpPolyPathConfig

// optional bool enable_pull_over = 1 [default = true];
inline bool DpPolyPathConfig::has_enable_pull_over() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DpPolyPathConfig::set_has_enable_pull_over() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DpPolyPathConfig::clear_has_enable_pull_over() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DpPolyPathConfig::clear_enable_pull_over() {
  enable_pull_over_ = true;
  clear_has_enable_pull_over();
}
inline bool DpPolyPathConfig::enable_pull_over() const {
  // @@protoc_insertion_point(field_get:acu.planning.DpPolyPathConfig.enable_pull_over)
  return enable_pull_over_;
}
inline void DpPolyPathConfig::set_enable_pull_over(bool value) {
  set_has_enable_pull_over();
  enable_pull_over_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.DpPolyPathConfig.enable_pull_over)
}

// optional double eval_time_interval = 2 [default = 0.1];
inline bool DpPolyPathConfig::has_eval_time_interval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DpPolyPathConfig::set_has_eval_time_interval() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DpPolyPathConfig::clear_has_eval_time_interval() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DpPolyPathConfig::clear_eval_time_interval() {
  eval_time_interval_ = 0.1;
  clear_has_eval_time_interval();
}
inline double DpPolyPathConfig::eval_time_interval() const {
  // @@protoc_insertion_point(field_get:acu.planning.DpPolyPathConfig.eval_time_interval)
  return eval_time_interval_;
}
inline void DpPolyPathConfig::set_eval_time_interval(double value) {
  set_has_eval_time_interval();
  eval_time_interval_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.DpPolyPathConfig.eval_time_interval)
}

// optional double path_resolution = 3 [default = 0.1];
inline bool DpPolyPathConfig::has_path_resolution() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DpPolyPathConfig::set_has_path_resolution() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DpPolyPathConfig::clear_has_path_resolution() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DpPolyPathConfig::clear_path_resolution() {
  path_resolution_ = 0.1;
  clear_has_path_resolution();
}
inline double DpPolyPathConfig::path_resolution() const {
  // @@protoc_insertion_point(field_get:acu.planning.DpPolyPathConfig.path_resolution)
  return path_resolution_;
}
inline void DpPolyPathConfig::set_path_resolution(double value) {
  set_has_path_resolution();
  path_resolution_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.DpPolyPathConfig.path_resolution)
}

// optional .acu.planning.WaypointSamplerConfig waypoint_sampler_config = 4;
inline bool DpPolyPathConfig::has_waypoint_sampler_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DpPolyPathConfig::set_has_waypoint_sampler_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DpPolyPathConfig::clear_has_waypoint_sampler_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::acu::planning::WaypointSamplerConfig& DpPolyPathConfig::waypoint_sampler_config() const {
  const ::acu::planning::WaypointSamplerConfig* p = waypoint_sampler_config_;
  // @@protoc_insertion_point(field_get:acu.planning.DpPolyPathConfig.waypoint_sampler_config)
  return p != NULL ? *p : *reinterpret_cast<const ::acu::planning::WaypointSamplerConfig*>(
      &::acu::planning::_WaypointSamplerConfig_default_instance_);
}
inline ::acu::planning::WaypointSamplerConfig* DpPolyPathConfig::release_waypoint_sampler_config() {
  // @@protoc_insertion_point(field_release:acu.planning.DpPolyPathConfig.waypoint_sampler_config)
  clear_has_waypoint_sampler_config();
  ::acu::planning::WaypointSamplerConfig* temp = waypoint_sampler_config_;
  waypoint_sampler_config_ = NULL;
  return temp;
}
inline ::acu::planning::WaypointSamplerConfig* DpPolyPathConfig::mutable_waypoint_sampler_config() {
  set_has_waypoint_sampler_config();
  if (waypoint_sampler_config_ == NULL) {
    waypoint_sampler_config_ = new ::acu::planning::WaypointSamplerConfig;
  }
  // @@protoc_insertion_point(field_mutable:acu.planning.DpPolyPathConfig.waypoint_sampler_config)
  return waypoint_sampler_config_;
}
inline void DpPolyPathConfig::set_allocated_waypoint_sampler_config(::acu::planning::WaypointSamplerConfig* waypoint_sampler_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(waypoint_sampler_config_);
  }
  if (waypoint_sampler_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      waypoint_sampler_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, waypoint_sampler_config, submessage_arena);
    }
    set_has_waypoint_sampler_config();
  } else {
    clear_has_waypoint_sampler_config();
  }
  waypoint_sampler_config_ = waypoint_sampler_config;
  // @@protoc_insertion_point(field_set_allocated:acu.planning.DpPolyPathConfig.waypoint_sampler_config)
}

// optional .acu.planning.TrajectoryCostConfig default_config = 5;
inline bool DpPolyPathConfig::has_default_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DpPolyPathConfig::set_has_default_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DpPolyPathConfig::clear_has_default_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DpPolyPathConfig::clear_default_config() {
  if (default_config_ != NULL) default_config_->Clear();
  clear_has_default_config();
}
inline const ::acu::planning::TrajectoryCostConfig& DpPolyPathConfig::default_config() const {
  const ::acu::planning::TrajectoryCostConfig* p = default_config_;
  // @@protoc_insertion_point(field_get:acu.planning.DpPolyPathConfig.default_config)
  return p != NULL ? *p : *reinterpret_cast<const ::acu::planning::TrajectoryCostConfig*>(
      &::acu::planning::_TrajectoryCostConfig_default_instance_);
}
inline ::acu::planning::TrajectoryCostConfig* DpPolyPathConfig::release_default_config() {
  // @@protoc_insertion_point(field_release:acu.planning.DpPolyPathConfig.default_config)
  clear_has_default_config();
  ::acu::planning::TrajectoryCostConfig* temp = default_config_;
  default_config_ = NULL;
  return temp;
}
inline ::acu::planning::TrajectoryCostConfig* DpPolyPathConfig::mutable_default_config() {
  set_has_default_config();
  if (default_config_ == NULL) {
    default_config_ = new ::acu::planning::TrajectoryCostConfig;
  }
  // @@protoc_insertion_point(field_mutable:acu.planning.DpPolyPathConfig.default_config)
  return default_config_;
}
inline void DpPolyPathConfig::set_allocated_default_config(::acu::planning::TrajectoryCostConfig* default_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete default_config_;
  }
  if (default_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      default_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, default_config, submessage_arena);
    }
    set_has_default_config();
  } else {
    clear_has_default_config();
  }
  default_config_ = default_config;
  // @@protoc_insertion_point(field_set_allocated:acu.planning.DpPolyPathConfig.default_config)
}

// optional .acu.planning.TrajectoryCostConfig lanechange_config = 6;
inline bool DpPolyPathConfig::has_lanechange_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DpPolyPathConfig::set_has_lanechange_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DpPolyPathConfig::clear_has_lanechange_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DpPolyPathConfig::clear_lanechange_config() {
  if (lanechange_config_ != NULL) lanechange_config_->Clear();
  clear_has_lanechange_config();
}
inline const ::acu::planning::TrajectoryCostConfig& DpPolyPathConfig::lanechange_config() const {
  const ::acu::planning::TrajectoryCostConfig* p = lanechange_config_;
  // @@protoc_insertion_point(field_get:acu.planning.DpPolyPathConfig.lanechange_config)
  return p != NULL ? *p : *reinterpret_cast<const ::acu::planning::TrajectoryCostConfig*>(
      &::acu::planning::_TrajectoryCostConfig_default_instance_);
}
inline ::acu::planning::TrajectoryCostConfig* DpPolyPathConfig::release_lanechange_config() {
  // @@protoc_insertion_point(field_release:acu.planning.DpPolyPathConfig.lanechange_config)
  clear_has_lanechange_config();
  ::acu::planning::TrajectoryCostConfig* temp = lanechange_config_;
  lanechange_config_ = NULL;
  return temp;
}
inline ::acu::planning::TrajectoryCostConfig* DpPolyPathConfig::mutable_lanechange_config() {
  set_has_lanechange_config();
  if (lanechange_config_ == NULL) {
    lanechange_config_ = new ::acu::planning::TrajectoryCostConfig;
  }
  // @@protoc_insertion_point(field_mutable:acu.planning.DpPolyPathConfig.lanechange_config)
  return lanechange_config_;
}
inline void DpPolyPathConfig::set_allocated_lanechange_config(::acu::planning::TrajectoryCostConfig* lanechange_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lanechange_config_;
  }
  if (lanechange_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lanechange_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lanechange_config, submessage_arena);
    }
    set_has_lanechange_config();
  } else {
    clear_has_lanechange_config();
  }
  lanechange_config_ = lanechange_config;
  // @@protoc_insertion_point(field_set_allocated:acu.planning.DpPolyPathConfig.lanechange_config)
}

// optional .acu.planning.TrajectoryCostConfig avoid_obstacle_config = 7;
inline bool DpPolyPathConfig::has_avoid_obstacle_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DpPolyPathConfig::set_has_avoid_obstacle_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DpPolyPathConfig::clear_has_avoid_obstacle_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DpPolyPathConfig::clear_avoid_obstacle_config() {
  if (avoid_obstacle_config_ != NULL) avoid_obstacle_config_->Clear();
  clear_has_avoid_obstacle_config();
}
inline const ::acu::planning::TrajectoryCostConfig& DpPolyPathConfig::avoid_obstacle_config() const {
  const ::acu::planning::TrajectoryCostConfig* p = avoid_obstacle_config_;
  // @@protoc_insertion_point(field_get:acu.planning.DpPolyPathConfig.avoid_obstacle_config)
  return p != NULL ? *p : *reinterpret_cast<const ::acu::planning::TrajectoryCostConfig*>(
      &::acu::planning::_TrajectoryCostConfig_default_instance_);
}
inline ::acu::planning::TrajectoryCostConfig* DpPolyPathConfig::release_avoid_obstacle_config() {
  // @@protoc_insertion_point(field_release:acu.planning.DpPolyPathConfig.avoid_obstacle_config)
  clear_has_avoid_obstacle_config();
  ::acu::planning::TrajectoryCostConfig* temp = avoid_obstacle_config_;
  avoid_obstacle_config_ = NULL;
  return temp;
}
inline ::acu::planning::TrajectoryCostConfig* DpPolyPathConfig::mutable_avoid_obstacle_config() {
  set_has_avoid_obstacle_config();
  if (avoid_obstacle_config_ == NULL) {
    avoid_obstacle_config_ = new ::acu::planning::TrajectoryCostConfig;
  }
  // @@protoc_insertion_point(field_mutable:acu.planning.DpPolyPathConfig.avoid_obstacle_config)
  return avoid_obstacle_config_;
}
inline void DpPolyPathConfig::set_allocated_avoid_obstacle_config(::acu::planning::TrajectoryCostConfig* avoid_obstacle_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete avoid_obstacle_config_;
  }
  if (avoid_obstacle_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      avoid_obstacle_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, avoid_obstacle_config, submessage_arena);
    }
    set_has_avoid_obstacle_config();
  } else {
    clear_has_avoid_obstacle_config();
  }
  avoid_obstacle_config_ = avoid_obstacle_config;
  // @@protoc_insertion_point(field_set_allocated:acu.planning.DpPolyPathConfig.avoid_obstacle_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace acu

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dp_5fpoly_5fpath_5fconfig_2eproto__INCLUDED
