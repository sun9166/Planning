// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qp_problem.proto

#include "qp_problem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace acu {
namespace planning {
class QuadraticProgrammingProblemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QuadraticProgrammingProblem>
      _instance;
} _QuadraticProgrammingProblem_default_instance_;
class QPMatrixDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QPMatrix>
      _instance;
} _QPMatrix_default_instance_;
class QuadraticProgrammingProblemSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QuadraticProgrammingProblemSet>
      _instance;
} _QuadraticProgrammingProblemSet_default_instance_;
}  // namespace planning
}  // namespace acu
namespace protobuf_qp_5fproblem_2eproto {
void InitDefaultsQuadraticProgrammingProblemImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_qp_5fproblem_2eproto::InitDefaultsQPMatrix();
  {
    void* ptr = &::acu::planning::_QuadraticProgrammingProblem_default_instance_;
    new (ptr) ::acu::planning::QuadraticProgrammingProblem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::QuadraticProgrammingProblem::InitAsDefaultInstance();
}

void InitDefaultsQuadraticProgrammingProblem() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQuadraticProgrammingProblemImpl);
}

void InitDefaultsQPMatrixImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_QPMatrix_default_instance_;
    new (ptr) ::acu::planning::QPMatrix();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::QPMatrix::InitAsDefaultInstance();
}

void InitDefaultsQPMatrix() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQPMatrixImpl);
}

void InitDefaultsQuadraticProgrammingProblemSetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_qp_5fproblem_2eproto::InitDefaultsQuadraticProgrammingProblem();
  {
    void* ptr = &::acu::planning::_QuadraticProgrammingProblemSet_default_instance_;
    new (ptr) ::acu::planning::QuadraticProgrammingProblemSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::QuadraticProgrammingProblemSet::InitAsDefaultInstance();
}

void InitDefaultsQuadraticProgrammingProblemSet() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQuadraticProgrammingProblemSetImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuadraticProgrammingProblem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuadraticProgrammingProblem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuadraticProgrammingProblem, param_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuadraticProgrammingProblem, quadratic_matrix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuadraticProgrammingProblem, bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuadraticProgrammingProblem, equality_matrix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuadraticProgrammingProblem, equality_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuadraticProgrammingProblem, inequality_matrix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuadraticProgrammingProblem, inequality_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuadraticProgrammingProblem, input_marker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuadraticProgrammingProblem, optimal_param_),
  3,
  0,
  ~0u,
  1,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QPMatrix, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QPMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QPMatrix, row_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QPMatrix, col_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QPMatrix, element_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuadraticProgrammingProblemSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuadraticProgrammingProblemSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuadraticProgrammingProblemSet, problem_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::acu::planning::QuadraticProgrammingProblem)},
  { 23, 31, sizeof(::acu::planning::QPMatrix)},
  { 34, 40, sizeof(::acu::planning::QuadraticProgrammingProblemSet)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_QuadraticProgrammingProblem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_QPMatrix_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_QuadraticProgrammingProblemSet_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "qp_problem.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020qp_problem.proto\022\014acu.planning\"\264\002\n\033Qua"
      "draticProgrammingProblem\022\022\n\nparam_size\030\001"
      " \001(\005\0220\n\020quadratic_matrix\030\002 \001(\0132\026.acu.pla"
      "nning.QPMatrix\022\014\n\004bias\030\003 \003(\001\022/\n\017equality"
      "_matrix\030\004 \001(\0132\026.acu.planning.QPMatrix\022\026\n"
      "\016equality_value\030\005 \003(\001\0221\n\021inequality_matr"
      "ix\030\006 \001(\0132\026.acu.planning.QPMatrix\022\030\n\020ineq"
      "uality_value\030\007 \003(\001\022\024\n\014input_marker\030\010 \003(\001"
      "\022\025\n\roptimal_param\030\t \003(\001\"\?\n\010QPMatrix\022\020\n\010r"
      "ow_size\030\001 \001(\005\022\020\n\010col_size\030\002 \001(\005\022\017\n\007eleme"
      "nt\030\003 \003(\001\"\\\n\036QuadraticProgrammingProblemS"
      "et\022:\n\007problem\030\001 \003(\0132).acu.planning.Quadr"
      "aticProgrammingProblem"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 502);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "qp_problem.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_qp_5fproblem_2eproto
namespace acu {
namespace planning {

// ===================================================================

void QuadraticProgrammingProblem::InitAsDefaultInstance() {
  ::acu::planning::_QuadraticProgrammingProblem_default_instance_._instance.get_mutable()->quadratic_matrix_ = const_cast< ::acu::planning::QPMatrix*>(
      ::acu::planning::QPMatrix::internal_default_instance());
  ::acu::planning::_QuadraticProgrammingProblem_default_instance_._instance.get_mutable()->equality_matrix_ = const_cast< ::acu::planning::QPMatrix*>(
      ::acu::planning::QPMatrix::internal_default_instance());
  ::acu::planning::_QuadraticProgrammingProblem_default_instance_._instance.get_mutable()->inequality_matrix_ = const_cast< ::acu::planning::QPMatrix*>(
      ::acu::planning::QPMatrix::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuadraticProgrammingProblem::kParamSizeFieldNumber;
const int QuadraticProgrammingProblem::kQuadraticMatrixFieldNumber;
const int QuadraticProgrammingProblem::kBiasFieldNumber;
const int QuadraticProgrammingProblem::kEqualityMatrixFieldNumber;
const int QuadraticProgrammingProblem::kEqualityValueFieldNumber;
const int QuadraticProgrammingProblem::kInequalityMatrixFieldNumber;
const int QuadraticProgrammingProblem::kInequalityValueFieldNumber;
const int QuadraticProgrammingProblem::kInputMarkerFieldNumber;
const int QuadraticProgrammingProblem::kOptimalParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuadraticProgrammingProblem::QuadraticProgrammingProblem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_qp_5fproblem_2eproto::InitDefaultsQuadraticProgrammingProblem();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.QuadraticProgrammingProblem)
}
QuadraticProgrammingProblem::QuadraticProgrammingProblem(const QuadraticProgrammingProblem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      bias_(from.bias_),
      equality_value_(from.equality_value_),
      inequality_value_(from.inequality_value_),
      input_marker_(from.input_marker_),
      optimal_param_(from.optimal_param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_quadratic_matrix()) {
    quadratic_matrix_ = new ::acu::planning::QPMatrix(*from.quadratic_matrix_);
  } else {
    quadratic_matrix_ = NULL;
  }
  if (from.has_equality_matrix()) {
    equality_matrix_ = new ::acu::planning::QPMatrix(*from.equality_matrix_);
  } else {
    equality_matrix_ = NULL;
  }
  if (from.has_inequality_matrix()) {
    inequality_matrix_ = new ::acu::planning::QPMatrix(*from.inequality_matrix_);
  } else {
    inequality_matrix_ = NULL;
  }
  param_size_ = from.param_size_;
  // @@protoc_insertion_point(copy_constructor:acu.planning.QuadraticProgrammingProblem)
}

void QuadraticProgrammingProblem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&quadratic_matrix_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_size_) -
      reinterpret_cast<char*>(&quadratic_matrix_)) + sizeof(param_size_));
}

QuadraticProgrammingProblem::~QuadraticProgrammingProblem() {
  // @@protoc_insertion_point(destructor:acu.planning.QuadraticProgrammingProblem)
  SharedDtor();
}

void QuadraticProgrammingProblem::SharedDtor() {
  if (this != internal_default_instance()) delete quadratic_matrix_;
  if (this != internal_default_instance()) delete equality_matrix_;
  if (this != internal_default_instance()) delete inequality_matrix_;
}

void QuadraticProgrammingProblem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuadraticProgrammingProblem::descriptor() {
  ::protobuf_qp_5fproblem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_qp_5fproblem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuadraticProgrammingProblem& QuadraticProgrammingProblem::default_instance() {
  ::protobuf_qp_5fproblem_2eproto::InitDefaultsQuadraticProgrammingProblem();
  return *internal_default_instance();
}

QuadraticProgrammingProblem* QuadraticProgrammingProblem::New(::google::protobuf::Arena* arena) const {
  QuadraticProgrammingProblem* n = new QuadraticProgrammingProblem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuadraticProgrammingProblem::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.QuadraticProgrammingProblem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bias_.Clear();
  equality_value_.Clear();
  inequality_value_.Clear();
  input_marker_.Clear();
  optimal_param_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(quadratic_matrix_ != NULL);
      quadratic_matrix_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(equality_matrix_ != NULL);
      equality_matrix_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(inequality_matrix_ != NULL);
      inequality_matrix_->Clear();
    }
  }
  param_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QuadraticProgrammingProblem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.QuadraticProgrammingProblem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 param_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_param_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.QPMatrix quadratic_matrix = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quadratic_matrix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double bias = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25u, input, this->mutable_bias())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_bias())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.QPMatrix equality_matrix = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_equality_matrix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double equality_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41u, input, this->mutable_equality_value())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_equality_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.QPMatrix inequality_matrix = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_inequality_matrix()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double inequality_value = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57u, input, this->mutable_inequality_value())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_inequality_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double input_marker = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 65u, input, this->mutable_input_marker())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_input_marker())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double optimal_param = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 73u, input, this->mutable_optimal_param())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_optimal_param())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.QuadraticProgrammingProblem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.QuadraticProgrammingProblem)
  return false;
#undef DO_
}

void QuadraticProgrammingProblem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.QuadraticProgrammingProblem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 param_size = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->param_size(), output);
  }

  // optional .acu.planning.QPMatrix quadratic_matrix = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->quadratic_matrix_, output);
  }

  // repeated double bias = 3;
  for (int i = 0, n = this->bias_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->bias(i), output);
  }

  // optional .acu.planning.QPMatrix equality_matrix = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->equality_matrix_, output);
  }

  // repeated double equality_value = 5;
  for (int i = 0, n = this->equality_value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->equality_value(i), output);
  }

  // optional .acu.planning.QPMatrix inequality_matrix = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->inequality_matrix_, output);
  }

  // repeated double inequality_value = 7;
  for (int i = 0, n = this->inequality_value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->inequality_value(i), output);
  }

  // repeated double input_marker = 8;
  for (int i = 0, n = this->input_marker_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->input_marker(i), output);
  }

  // repeated double optimal_param = 9;
  for (int i = 0, n = this->optimal_param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      9, this->optimal_param(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.QuadraticProgrammingProblem)
}

::google::protobuf::uint8* QuadraticProgrammingProblem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.QuadraticProgrammingProblem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 param_size = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->param_size(), target);
  }

  // optional .acu.planning.QPMatrix quadratic_matrix = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->quadratic_matrix_, deterministic, target);
  }

  // repeated double bias = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(3, this->bias_, target);

  // optional .acu.planning.QPMatrix equality_matrix = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->equality_matrix_, deterministic, target);
  }

  // repeated double equality_value = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(5, this->equality_value_, target);

  // optional .acu.planning.QPMatrix inequality_matrix = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->inequality_matrix_, deterministic, target);
  }

  // repeated double inequality_value = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(7, this->inequality_value_, target);

  // repeated double input_marker = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(8, this->input_marker_, target);

  // repeated double optimal_param = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(9, this->optimal_param_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.QuadraticProgrammingProblem)
  return target;
}

size_t QuadraticProgrammingProblem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.QuadraticProgrammingProblem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated double bias = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->bias_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bias_size());
    total_size += data_size;
  }

  // repeated double equality_value = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->equality_value_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->equality_value_size());
    total_size += data_size;
  }

  // repeated double inequality_value = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->inequality_value_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->inequality_value_size());
    total_size += data_size;
  }

  // repeated double input_marker = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->input_marker_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->input_marker_size());
    total_size += data_size;
  }

  // repeated double optimal_param = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->optimal_param_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->optimal_param_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .acu.planning.QPMatrix quadratic_matrix = 2;
    if (has_quadratic_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->quadratic_matrix_);
    }

    // optional .acu.planning.QPMatrix equality_matrix = 4;
    if (has_equality_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->equality_matrix_);
    }

    // optional .acu.planning.QPMatrix inequality_matrix = 6;
    if (has_inequality_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->inequality_matrix_);
    }

    // optional int32 param_size = 1;
    if (has_param_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuadraticProgrammingProblem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.QuadraticProgrammingProblem)
  GOOGLE_DCHECK_NE(&from, this);
  const QuadraticProgrammingProblem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuadraticProgrammingProblem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.QuadraticProgrammingProblem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.QuadraticProgrammingProblem)
    MergeFrom(*source);
  }
}

void QuadraticProgrammingProblem::MergeFrom(const QuadraticProgrammingProblem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.QuadraticProgrammingProblem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bias_.MergeFrom(from.bias_);
  equality_value_.MergeFrom(from.equality_value_);
  inequality_value_.MergeFrom(from.inequality_value_);
  input_marker_.MergeFrom(from.input_marker_);
  optimal_param_.MergeFrom(from.optimal_param_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_quadratic_matrix()->::acu::planning::QPMatrix::MergeFrom(from.quadratic_matrix());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_equality_matrix()->::acu::planning::QPMatrix::MergeFrom(from.equality_matrix());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_inequality_matrix()->::acu::planning::QPMatrix::MergeFrom(from.inequality_matrix());
    }
    if (cached_has_bits & 0x00000008u) {
      param_size_ = from.param_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QuadraticProgrammingProblem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.QuadraticProgrammingProblem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuadraticProgrammingProblem::CopyFrom(const QuadraticProgrammingProblem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.QuadraticProgrammingProblem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuadraticProgrammingProblem::IsInitialized() const {
  return true;
}

void QuadraticProgrammingProblem::Swap(QuadraticProgrammingProblem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuadraticProgrammingProblem::InternalSwap(QuadraticProgrammingProblem* other) {
  using std::swap;
  bias_.InternalSwap(&other->bias_);
  equality_value_.InternalSwap(&other->equality_value_);
  inequality_value_.InternalSwap(&other->inequality_value_);
  input_marker_.InternalSwap(&other->input_marker_);
  optimal_param_.InternalSwap(&other->optimal_param_);
  swap(quadratic_matrix_, other->quadratic_matrix_);
  swap(equality_matrix_, other->equality_matrix_);
  swap(inequality_matrix_, other->inequality_matrix_);
  swap(param_size_, other->param_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuadraticProgrammingProblem::GetMetadata() const {
  protobuf_qp_5fproblem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_qp_5fproblem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QPMatrix::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QPMatrix::kRowSizeFieldNumber;
const int QPMatrix::kColSizeFieldNumber;
const int QPMatrix::kElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QPMatrix::QPMatrix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_qp_5fproblem_2eproto::InitDefaultsQPMatrix();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.QPMatrix)
}
QPMatrix::QPMatrix(const QPMatrix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      element_(from.element_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&row_size_, &from.row_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_size_) -
    reinterpret_cast<char*>(&row_size_)) + sizeof(col_size_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.QPMatrix)
}

void QPMatrix::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&row_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_size_) -
      reinterpret_cast<char*>(&row_size_)) + sizeof(col_size_));
}

QPMatrix::~QPMatrix() {
  // @@protoc_insertion_point(destructor:acu.planning.QPMatrix)
  SharedDtor();
}

void QPMatrix::SharedDtor() {
}

void QPMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QPMatrix::descriptor() {
  ::protobuf_qp_5fproblem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_qp_5fproblem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QPMatrix& QPMatrix::default_instance() {
  ::protobuf_qp_5fproblem_2eproto::InitDefaultsQPMatrix();
  return *internal_default_instance();
}

QPMatrix* QPMatrix::New(::google::protobuf::Arena* arena) const {
  QPMatrix* n = new QPMatrix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QPMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.QPMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&row_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&col_size_) -
        reinterpret_cast<char*>(&row_size_)) + sizeof(col_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QPMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.QPMatrix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 row_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_row_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 col_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_col_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double element = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25u, input, this->mutable_element())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.QPMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.QPMatrix)
  return false;
#undef DO_
}

void QPMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.QPMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 row_size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row_size(), output);
  }

  // optional int32 col_size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col_size(), output);
  }

  // repeated double element = 3;
  for (int i = 0, n = this->element_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->element(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.QPMatrix)
}

::google::protobuf::uint8* QPMatrix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.QPMatrix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 row_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row_size(), target);
  }

  // optional int32 col_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col_size(), target);
  }

  // repeated double element = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(3, this->element_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.QPMatrix)
  return target;
}

size_t QPMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.QPMatrix)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated double element = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->element_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->element_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 row_size = 1;
    if (has_row_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row_size());
    }

    // optional int32 col_size = 2;
    if (has_col_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QPMatrix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.QPMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const QPMatrix* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QPMatrix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.QPMatrix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.QPMatrix)
    MergeFrom(*source);
  }
}

void QPMatrix::MergeFrom(const QPMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.QPMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      row_size_ = from.row_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      col_size_ = from.col_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QPMatrix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.QPMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QPMatrix::CopyFrom(const QPMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.QPMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QPMatrix::IsInitialized() const {
  return true;
}

void QPMatrix::Swap(QPMatrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QPMatrix::InternalSwap(QPMatrix* other) {
  using std::swap;
  element_.InternalSwap(&other->element_);
  swap(row_size_, other->row_size_);
  swap(col_size_, other->col_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QPMatrix::GetMetadata() const {
  protobuf_qp_5fproblem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_qp_5fproblem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QuadraticProgrammingProblemSet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuadraticProgrammingProblemSet::kProblemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuadraticProgrammingProblemSet::QuadraticProgrammingProblemSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_qp_5fproblem_2eproto::InitDefaultsQuadraticProgrammingProblemSet();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.QuadraticProgrammingProblemSet)
}
QuadraticProgrammingProblemSet::QuadraticProgrammingProblemSet(const QuadraticProgrammingProblemSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      problem_(from.problem_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:acu.planning.QuadraticProgrammingProblemSet)
}

void QuadraticProgrammingProblemSet::SharedCtor() {
  _cached_size_ = 0;
}

QuadraticProgrammingProblemSet::~QuadraticProgrammingProblemSet() {
  // @@protoc_insertion_point(destructor:acu.planning.QuadraticProgrammingProblemSet)
  SharedDtor();
}

void QuadraticProgrammingProblemSet::SharedDtor() {
}

void QuadraticProgrammingProblemSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuadraticProgrammingProblemSet::descriptor() {
  ::protobuf_qp_5fproblem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_qp_5fproblem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuadraticProgrammingProblemSet& QuadraticProgrammingProblemSet::default_instance() {
  ::protobuf_qp_5fproblem_2eproto::InitDefaultsQuadraticProgrammingProblemSet();
  return *internal_default_instance();
}

QuadraticProgrammingProblemSet* QuadraticProgrammingProblemSet::New(::google::protobuf::Arena* arena) const {
  QuadraticProgrammingProblemSet* n = new QuadraticProgrammingProblemSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuadraticProgrammingProblemSet::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.QuadraticProgrammingProblemSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  problem_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QuadraticProgrammingProblemSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.QuadraticProgrammingProblemSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .acu.planning.QuadraticProgrammingProblem problem = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_problem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.QuadraticProgrammingProblemSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.QuadraticProgrammingProblemSet)
  return false;
#undef DO_
}

void QuadraticProgrammingProblemSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.QuadraticProgrammingProblemSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .acu.planning.QuadraticProgrammingProblem problem = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->problem_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->problem(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.QuadraticProgrammingProblemSet)
}

::google::protobuf::uint8* QuadraticProgrammingProblemSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.QuadraticProgrammingProblemSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .acu.planning.QuadraticProgrammingProblem problem = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->problem_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->problem(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.QuadraticProgrammingProblemSet)
  return target;
}

size_t QuadraticProgrammingProblemSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.QuadraticProgrammingProblemSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.planning.QuadraticProgrammingProblem problem = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->problem_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->problem(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuadraticProgrammingProblemSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.QuadraticProgrammingProblemSet)
  GOOGLE_DCHECK_NE(&from, this);
  const QuadraticProgrammingProblemSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuadraticProgrammingProblemSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.QuadraticProgrammingProblemSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.QuadraticProgrammingProblemSet)
    MergeFrom(*source);
  }
}

void QuadraticProgrammingProblemSet::MergeFrom(const QuadraticProgrammingProblemSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.QuadraticProgrammingProblemSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  problem_.MergeFrom(from.problem_);
}

void QuadraticProgrammingProblemSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.QuadraticProgrammingProblemSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuadraticProgrammingProblemSet::CopyFrom(const QuadraticProgrammingProblemSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.QuadraticProgrammingProblemSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuadraticProgrammingProblemSet::IsInitialized() const {
  return true;
}

void QuadraticProgrammingProblemSet::Swap(QuadraticProgrammingProblemSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuadraticProgrammingProblemSet::InternalSwap(QuadraticProgrammingProblemSet* other) {
  using std::swap;
  problem_.InternalSwap(&other->problem_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuadraticProgrammingProblemSet::GetMetadata() const {
  protobuf_qp_5fproblem_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_qp_5fproblem_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace acu

// @@protoc_insertion_point(global_scope)
