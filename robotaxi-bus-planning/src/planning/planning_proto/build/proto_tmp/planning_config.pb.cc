// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning_config.proto

#include "planning_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace acu {
namespace planning {
class PiecewiseJerkPathConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PiecewiseJerkPathConfig>
      _instance;
} _PiecewiseJerkPathConfig_default_instance_;
class PiecewiseJerkPathWeightsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PiecewiseJerkPathWeights>
      _instance;
} _PiecewiseJerkPathWeights_default_instance_;
class QuasiPotentialFieldPathConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QuasiPotentialFieldPathConfig>
      _instance;
} _QuasiPotentialFieldPathConfig_default_instance_;
class QuasiPotentialFieldPathWeightsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QuasiPotentialFieldPathWeights>
      _instance;
} _QuasiPotentialFieldPathWeights_default_instance_;
class PathBoundsDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathBoundsDeciderConfig>
      _instance;
} _PathBoundsDeciderConfig_default_instance_;
class PlannerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlannerConfig>
      _instance;
} _PlannerConfig_default_instance_;
class PlanningConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlanningConfig>
      _instance;
} _PlanningConfig_default_instance_;
}  // namespace planning
}  // namespace acu
namespace protobuf_planning_5fconfig_2eproto {
void InitDefaultsPiecewiseJerkPathConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_planning_5fconfig_2eproto::InitDefaultsPiecewiseJerkPathWeights();
  {
    void* ptr = &::acu::planning::_PiecewiseJerkPathConfig_default_instance_;
    new (ptr) ::acu::planning::PiecewiseJerkPathConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::PiecewiseJerkPathConfig::InitAsDefaultInstance();
}

void InitDefaultsPiecewiseJerkPathConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPiecewiseJerkPathConfigImpl);
}

void InitDefaultsPiecewiseJerkPathWeightsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_PiecewiseJerkPathWeights_default_instance_;
    new (ptr) ::acu::planning::PiecewiseJerkPathWeights();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::PiecewiseJerkPathWeights::InitAsDefaultInstance();
}

void InitDefaultsPiecewiseJerkPathWeights() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPiecewiseJerkPathWeightsImpl);
}

void InitDefaultsQuasiPotentialFieldPathConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_planning_5fconfig_2eproto::InitDefaultsQuasiPotentialFieldPathWeights();
  {
    void* ptr = &::acu::planning::_QuasiPotentialFieldPathConfig_default_instance_;
    new (ptr) ::acu::planning::QuasiPotentialFieldPathConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::QuasiPotentialFieldPathConfig::InitAsDefaultInstance();
}

void InitDefaultsQuasiPotentialFieldPathConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQuasiPotentialFieldPathConfigImpl);
}

void InitDefaultsQuasiPotentialFieldPathWeightsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_QuasiPotentialFieldPathWeights_default_instance_;
    new (ptr) ::acu::planning::QuasiPotentialFieldPathWeights();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::QuasiPotentialFieldPathWeights::InitAsDefaultInstance();
}

void InitDefaultsQuasiPotentialFieldPathWeights() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQuasiPotentialFieldPathWeightsImpl);
}

void InitDefaultsPathBoundsDeciderConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_PathBoundsDeciderConfig_default_instance_;
    new (ptr) ::acu::planning::PathBoundsDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::PathBoundsDeciderConfig::InitAsDefaultInstance();
}

void InitDefaultsPathBoundsDeciderConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPathBoundsDeciderConfigImpl);
}

void InitDefaultsPlannerConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_dp_5fpoly_5fpath_5fconfig_2eproto::InitDefaultsDpPolyPathConfig();
  protobuf_dp_5fst_5fspeed_5fconfig_2eproto::InitDefaultsDpStSpeedConfig();
  protobuf_qp_5fspline_5fpath_5fconfig_2eproto::InitDefaultsQpSplinePathConfig();
  protobuf_qp_5fst_5fspeed_5fconfig_2eproto::InitDefaultsQpStSpeedConfig();
  protobuf_poly_5fst_5fspeed_5fconfig_2eproto::InitDefaultsPolyStSpeedConfig();
  protobuf_planning_5fconfig_2eproto::InitDefaultsPiecewiseJerkPathConfig();
  protobuf_planning_5fconfig_2eproto::InitDefaultsPathBoundsDeciderConfig();
  protobuf_planning_5fconfig_2eproto::InitDefaultsQuasiPotentialFieldPathConfig();
  {
    void* ptr = &::acu::planning::_PlannerConfig_default_instance_;
    new (ptr) ::acu::planning::PlannerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::PlannerConfig::InitAsDefaultInstance();
}

void InitDefaultsPlannerConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlannerConfigImpl);
}

void InitDefaultsPlanningConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_planning_5fconfig_2eproto::InitDefaultsPlannerConfig();
  {
    void* ptr = &::acu::planning::_PlanningConfig_default_instance_;
    new (ptr) ::acu::planning::PlanningConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::PlanningConfig::InitAsDefaultInstance();
}

void InitDefaultsPlanningConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlanningConfigImpl);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PiecewiseJerkPathConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PiecewiseJerkPathConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PiecewiseJerkPathConfig, default_path_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PiecewiseJerkPathConfig, lane_change_path_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PiecewiseJerkPathConfig, start_from_road_side_config_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PiecewiseJerkPathWeights, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PiecewiseJerkPathWeights, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PiecewiseJerkPathWeights, l_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PiecewiseJerkPathWeights, dl_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PiecewiseJerkPathWeights, ddl_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PiecewiseJerkPathWeights, dddl_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PiecewiseJerkPathWeights, obstacle_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PiecewiseJerkPathWeights, dynamic_obstacle_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PiecewiseJerkPathWeights, dotted_line_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PiecewiseJerkPathWeights, solid_line_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PiecewiseJerkPathWeights, curb_weight_),
  4,
  5,
  6,
  7,
  8,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuasiPotentialFieldPathConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuasiPotentialFieldPathConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuasiPotentialFieldPathConfig, default_path_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuasiPotentialFieldPathConfig, start_from_road_side_config_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuasiPotentialFieldPathWeights, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuasiPotentialFieldPathWeights, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuasiPotentialFieldPathWeights, l_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuasiPotentialFieldPathWeights, dl_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuasiPotentialFieldPathWeights, ddl_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuasiPotentialFieldPathWeights, dddl_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuasiPotentialFieldPathWeights, dotted_line_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuasiPotentialFieldPathWeights, solid_line_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuasiPotentialFieldPathWeights, curb_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QuasiPotentialFieldPathWeights, obstacle_weight_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PathBoundsDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PathBoundsDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PathBoundsDeciderConfig, is_lane_borrowing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PathBoundsDeciderConfig, is_pull_over_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PathBoundsDeciderConfig, pull_over_destination_to_adc_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PathBoundsDeciderConfig, pull_over_destination_to_pathend_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PathBoundsDeciderConfig, pull_over_road_edge_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PathBoundsDeciderConfig, pull_over_approach_lon_distance_adjust_factor_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PlannerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PlannerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PlannerConfig, task_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PlannerConfig, dp_poly_path_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PlannerConfig, dp_st_speed_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PlannerConfig, qp_spline_path_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PlannerConfig, qp_st_speed_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PlannerConfig, poly_st_speed_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PlannerConfig, piecewise_jerk_path_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PlannerConfig, path_bounds_decider_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PlannerConfig, quasi_potential_field_path_config_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PlanningConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PlanningConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PlanningConfig, planner_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::PlanningConfig, planner_config_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::acu::planning::PiecewiseJerkPathConfig)},
  { 11, 25, sizeof(::acu::planning::PiecewiseJerkPathWeights)},
  { 34, 41, sizeof(::acu::planning::QuasiPotentialFieldPathConfig)},
  { 43, 56, sizeof(::acu::planning::QuasiPotentialFieldPathWeights)},
  { 64, 75, sizeof(::acu::planning::PathBoundsDeciderConfig)},
  { 81, 95, sizeof(::acu::planning::PlannerConfig)},
  { 104, 111, sizeof(::acu::planning::PlanningConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_PiecewiseJerkPathConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_PiecewiseJerkPathWeights_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_QuasiPotentialFieldPathConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_QuasiPotentialFieldPathWeights_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_PathBoundsDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_PlannerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_PlanningConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "planning_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025planning_config.proto\022\014acu.planning\032\031d"
      "p_poly_path_config.proto\032\030dp_st_speed_co"
      "nfig.proto\032\033qp_spline_path_config.proto\032"
      "\030qp_st_speed_config.proto\032\032poly_st_speed"
      "_config.proto\"\364\001\n\027PiecewiseJerkPathConfi"
      "g\022C\n\023default_path_config\030\001 \001(\0132&.acu.pla"
      "nning.PiecewiseJerkPathWeights\022G\n\027lane_c"
      "hange_path_config\030\002 \001(\0132&.acu.planning.P"
      "iecewiseJerkPathWeights\022K\n\033start_from_ro"
      "ad_side_config\030\003 \001(\0132&.acu.planning.Piec"
      "ewiseJerkPathWeights\"\223\002\n\030PiecewiseJerkPa"
      "thWeights\022\023\n\010l_weight\030\001 \001(\001:\0011\022\026\n\tdl_wei"
      "ght\030\002 \001(\001:\003100\022\030\n\nddl_weight\030\003 \001(\001:\0041000"
      "\022\032\n\013dddl_weight\030\004 \001(\001:\00510000\022\033\n\017obstacle"
      "_weight\030\005 \001(\001:\00250\022\"\n\027dynamic_obstacle_we"
      "ight\030\006 \001(\001:\0010\022\035\n\022dotted_line_weight\030\007 \001("
      "\001:\0010\022\034\n\021solid_line_weight\030\010 \001(\001:\0010\022\026\n\013cu"
      "rb_weight\030\t \001(\001:\0010\"\275\001\n\035QuasiPotentialFie"
      "ldPathConfig\022I\n\023default_path_config\030\001 \001("
      "\0132,.acu.planning.QuasiPotentialFieldPath"
      "Weights\022Q\n\033start_from_road_side_config\030\002"
      " \001(\0132,.acu.planning.QuasiPotentialFieldP"
      "athWeights\"\367\001\n\036QuasiPotentialFieldPathWe"
      "ights\022\023\n\010l_weight\030\001 \001(\001:\0011\022\026\n\tdl_weight\030"
      "\002 \001(\001:\003100\022\030\n\nddl_weight\030\003 \001(\001:\0041000\022\032\n\013"
      "dddl_weight\030\004 \001(\001:\00510000\022\035\n\022dotted_line_"
      "weight\030\005 \001(\001:\0015\022\035\n\021solid_line_weight\030\006 \001"
      "(\001:\00210\022\027\n\013curb_weight\030\007 \001(\001:\00220\022\033\n\017obsta"
      "cle_weight\030\010 \001(\001:\00220\"\226\002\n\027PathBoundsDecid"
      "erConfig\022\031\n\021is_lane_borrowing\030\001 \001(\010\022\024\n\014i"
      "s_pull_over\030\002 \001(\010\022/\n#pull_over_destinati"
      "on_to_adc_buffer\030\003 \001(\001:\00225\0223\n\'pull_over_"
      "destination_to_pathend_buffer\030\004 \001(\001:\00210\022"
      "(\n\032pull_over_road_edge_buffer\030\005 \001(\001:\0040.1"
      "5\022:\n-pull_over_approach_lon_distance_adj"
      "ust_factor\030\006 \001(\001:\0031.5\"\326\004\n\rPlannerConfig\022"
      "$\n\004task\030\001 \003(\0162\026.acu.planning.TaskType\022;\n"
      "\023dp_poly_path_config\030\002 \001(\0132\036.acu.plannin"
      "g.DpPolyPathConfig\0229\n\022dp_st_speed_config"
      "\030\003 \001(\0132\035.acu.planning.DpStSpeedConfig\022\?\n"
      "\025qp_spline_path_config\030\004 \001(\0132 .acu.plann"
      "ing.QpSplinePathConfig\0229\n\022qp_st_speed_co"
      "nfig\030\005 \001(\0132\035.acu.planning.QpStSpeedConfi"
      "g\022=\n\024poly_st_speed_config\030\006 \001(\0132\037.acu.pl"
      "anning.PolyStSpeedConfig\022I\n\032piecewise_je"
      "rk_path_config\030\007 \001(\0132%.acu.planning.Piec"
      "ewiseJerkPathConfig\022I\n\032path_bounds_decid"
      "er_config\030\010 \001(\0132%.acu.planning.PathBound"
      "sDeciderConfig\022V\n!quasi_potential_field_"
      "path_config\030\t \001(\0132+.acu.planning.QuasiPo"
      "tentialFieldPathConfig\"\257\001\n\016PlanningConfi"
      "g\022D\n\014planner_type\030\001 \001(\0162(.acu.planning.P"
      "lanningConfig.PlannerType:\004PATH\0223\n\016plann"
      "er_config\030\002 \001(\0132\033.acu.planning.PlannerCo"
      "nfig\"\"\n\013PlannerType\022\010\n\004PATH\020\000\022\t\n\005SPEED\020\001"
      "*\276\002\n\010TaskType\022\032\n\026DP_POLY_PATH_OPTIMIZER\020"
      "\000\022\031\n\025DP_ST_SPEED_OPTIMIZER\020\001\022\034\n\030QP_SPLIN"
      "E_PATH_OPTIMIZER\020\002\022 \n\034QP_SPLINE_ST_SPEED"
      "_OPTIMIZER\020\003\022\023\n\017TRAFFIC_DECIDER\020\004\022\020\n\014PAT"
      "H_DECIDER\020\005\022\021\n\rSPEED_DECIDER\020\006\022\033\n\027POLY_S"
      "T_SPEED_OPTIMIZER\020\007\022!\n\035PIECEWISE_JERK_PA"
      "TH_OPTIMIZER\020\010\022\027\n\023PATH_BOUNDS_DECIDER\020\t\022"
      "(\n$QUASI_POTENTIAL_FIELD_PATH_OPTIMIZER\020"
      "\n"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2521);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning_config.proto", &protobuf_RegisterTypes);
  ::protobuf_dp_5fpoly_5fpath_5fconfig_2eproto::AddDescriptors();
  ::protobuf_dp_5fst_5fspeed_5fconfig_2eproto::AddDescriptors();
  ::protobuf_qp_5fspline_5fpath_5fconfig_2eproto::AddDescriptors();
  ::protobuf_qp_5fst_5fspeed_5fconfig_2eproto::AddDescriptors();
  ::protobuf_poly_5fst_5fspeed_5fconfig_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_planning_5fconfig_2eproto
namespace acu {
namespace planning {
const ::google::protobuf::EnumDescriptor* PlanningConfig_PlannerType_descriptor() {
  protobuf_planning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_planning_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool PlanningConfig_PlannerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PlanningConfig_PlannerType PlanningConfig::PATH;
const PlanningConfig_PlannerType PlanningConfig::SPEED;
const PlanningConfig_PlannerType PlanningConfig::PlannerType_MIN;
const PlanningConfig_PlannerType PlanningConfig::PlannerType_MAX;
const int PlanningConfig::PlannerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TaskType_descriptor() {
  protobuf_planning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_planning_5fconfig_2eproto::file_level_enum_descriptors[1];
}
bool TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PiecewiseJerkPathConfig::InitAsDefaultInstance() {
  ::acu::planning::_PiecewiseJerkPathConfig_default_instance_._instance.get_mutable()->default_path_config_ = const_cast< ::acu::planning::PiecewiseJerkPathWeights*>(
      ::acu::planning::PiecewiseJerkPathWeights::internal_default_instance());
  ::acu::planning::_PiecewiseJerkPathConfig_default_instance_._instance.get_mutable()->lane_change_path_config_ = const_cast< ::acu::planning::PiecewiseJerkPathWeights*>(
      ::acu::planning::PiecewiseJerkPathWeights::internal_default_instance());
  ::acu::planning::_PiecewiseJerkPathConfig_default_instance_._instance.get_mutable()->start_from_road_side_config_ = const_cast< ::acu::planning::PiecewiseJerkPathWeights*>(
      ::acu::planning::PiecewiseJerkPathWeights::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PiecewiseJerkPathConfig::kDefaultPathConfigFieldNumber;
const int PiecewiseJerkPathConfig::kLaneChangePathConfigFieldNumber;
const int PiecewiseJerkPathConfig::kStartFromRoadSideConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PiecewiseJerkPathConfig::PiecewiseJerkPathConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fconfig_2eproto::InitDefaultsPiecewiseJerkPathConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.PiecewiseJerkPathConfig)
}
PiecewiseJerkPathConfig::PiecewiseJerkPathConfig(const PiecewiseJerkPathConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_default_path_config()) {
    default_path_config_ = new ::acu::planning::PiecewiseJerkPathWeights(*from.default_path_config_);
  } else {
    default_path_config_ = NULL;
  }
  if (from.has_lane_change_path_config()) {
    lane_change_path_config_ = new ::acu::planning::PiecewiseJerkPathWeights(*from.lane_change_path_config_);
  } else {
    lane_change_path_config_ = NULL;
  }
  if (from.has_start_from_road_side_config()) {
    start_from_road_side_config_ = new ::acu::planning::PiecewiseJerkPathWeights(*from.start_from_road_side_config_);
  } else {
    start_from_road_side_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:acu.planning.PiecewiseJerkPathConfig)
}

void PiecewiseJerkPathConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&default_path_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_from_road_side_config_) -
      reinterpret_cast<char*>(&default_path_config_)) + sizeof(start_from_road_side_config_));
}

PiecewiseJerkPathConfig::~PiecewiseJerkPathConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.PiecewiseJerkPathConfig)
  SharedDtor();
}

void PiecewiseJerkPathConfig::SharedDtor() {
  if (this != internal_default_instance()) delete default_path_config_;
  if (this != internal_default_instance()) delete lane_change_path_config_;
  if (this != internal_default_instance()) delete start_from_road_side_config_;
}

void PiecewiseJerkPathConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PiecewiseJerkPathConfig::descriptor() {
  ::protobuf_planning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PiecewiseJerkPathConfig& PiecewiseJerkPathConfig::default_instance() {
  ::protobuf_planning_5fconfig_2eproto::InitDefaultsPiecewiseJerkPathConfig();
  return *internal_default_instance();
}

PiecewiseJerkPathConfig* PiecewiseJerkPathConfig::New(::google::protobuf::Arena* arena) const {
  PiecewiseJerkPathConfig* n = new PiecewiseJerkPathConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PiecewiseJerkPathConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.PiecewiseJerkPathConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(default_path_config_ != NULL);
      default_path_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lane_change_path_config_ != NULL);
      lane_change_path_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(start_from_road_side_config_ != NULL);
      start_from_road_side_config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PiecewiseJerkPathConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.PiecewiseJerkPathConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.planning.PiecewiseJerkPathWeights default_path_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_default_path_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_change_path_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.PiecewiseJerkPathWeights start_from_road_side_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_from_road_side_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.PiecewiseJerkPathConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.PiecewiseJerkPathConfig)
  return false;
#undef DO_
}

void PiecewiseJerkPathConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.PiecewiseJerkPathConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.PiecewiseJerkPathWeights default_path_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->default_path_config_, output);
  }

  // optional .acu.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lane_change_path_config_, output);
  }

  // optional .acu.planning.PiecewiseJerkPathWeights start_from_road_side_config = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->start_from_road_side_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.PiecewiseJerkPathConfig)
}

::google::protobuf::uint8* PiecewiseJerkPathConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.PiecewiseJerkPathConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.PiecewiseJerkPathWeights default_path_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->default_path_config_, deterministic, target);
  }

  // optional .acu.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->lane_change_path_config_, deterministic, target);
  }

  // optional .acu.planning.PiecewiseJerkPathWeights start_from_road_side_config = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->start_from_road_side_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.PiecewiseJerkPathConfig)
  return target;
}

size_t PiecewiseJerkPathConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.PiecewiseJerkPathConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .acu.planning.PiecewiseJerkPathWeights default_path_config = 1;
    if (has_default_path_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->default_path_config_);
    }

    // optional .acu.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
    if (has_lane_change_path_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->lane_change_path_config_);
    }

    // optional .acu.planning.PiecewiseJerkPathWeights start_from_road_side_config = 3;
    if (has_start_from_road_side_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->start_from_road_side_config_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PiecewiseJerkPathConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.PiecewiseJerkPathConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PiecewiseJerkPathConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PiecewiseJerkPathConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.PiecewiseJerkPathConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.PiecewiseJerkPathConfig)
    MergeFrom(*source);
  }
}

void PiecewiseJerkPathConfig::MergeFrom(const PiecewiseJerkPathConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.PiecewiseJerkPathConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_default_path_config()->::acu::planning::PiecewiseJerkPathWeights::MergeFrom(from.default_path_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lane_change_path_config()->::acu::planning::PiecewiseJerkPathWeights::MergeFrom(from.lane_change_path_config());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_start_from_road_side_config()->::acu::planning::PiecewiseJerkPathWeights::MergeFrom(from.start_from_road_side_config());
    }
  }
}

void PiecewiseJerkPathConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.PiecewiseJerkPathConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiecewiseJerkPathConfig::CopyFrom(const PiecewiseJerkPathConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.PiecewiseJerkPathConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiecewiseJerkPathConfig::IsInitialized() const {
  return true;
}

void PiecewiseJerkPathConfig::Swap(PiecewiseJerkPathConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PiecewiseJerkPathConfig::InternalSwap(PiecewiseJerkPathConfig* other) {
  using std::swap;
  swap(default_path_config_, other->default_path_config_);
  swap(lane_change_path_config_, other->lane_change_path_config_);
  swap(start_from_road_side_config_, other->start_from_road_side_config_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PiecewiseJerkPathConfig::GetMetadata() const {
  protobuf_planning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PiecewiseJerkPathWeights::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PiecewiseJerkPathWeights::kLWeightFieldNumber;
const int PiecewiseJerkPathWeights::kDlWeightFieldNumber;
const int PiecewiseJerkPathWeights::kDdlWeightFieldNumber;
const int PiecewiseJerkPathWeights::kDddlWeightFieldNumber;
const int PiecewiseJerkPathWeights::kObstacleWeightFieldNumber;
const int PiecewiseJerkPathWeights::kDynamicObstacleWeightFieldNumber;
const int PiecewiseJerkPathWeights::kDottedLineWeightFieldNumber;
const int PiecewiseJerkPathWeights::kSolidLineWeightFieldNumber;
const int PiecewiseJerkPathWeights::kCurbWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PiecewiseJerkPathWeights::PiecewiseJerkPathWeights()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fconfig_2eproto::InitDefaultsPiecewiseJerkPathWeights();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.PiecewiseJerkPathWeights)
}
PiecewiseJerkPathWeights::PiecewiseJerkPathWeights(const PiecewiseJerkPathWeights& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dynamic_obstacle_weight_, &from.dynamic_obstacle_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&obstacle_weight_) -
    reinterpret_cast<char*>(&dynamic_obstacle_weight_)) + sizeof(obstacle_weight_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.PiecewiseJerkPathWeights)
}

void PiecewiseJerkPathWeights::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dynamic_obstacle_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curb_weight_) -
      reinterpret_cast<char*>(&dynamic_obstacle_weight_)) + sizeof(curb_weight_));
  l_weight_ = 1;
  dl_weight_ = 100;
  ddl_weight_ = 1000;
  dddl_weight_ = 10000;
  obstacle_weight_ = 50;
}

PiecewiseJerkPathWeights::~PiecewiseJerkPathWeights() {
  // @@protoc_insertion_point(destructor:acu.planning.PiecewiseJerkPathWeights)
  SharedDtor();
}

void PiecewiseJerkPathWeights::SharedDtor() {
}

void PiecewiseJerkPathWeights::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PiecewiseJerkPathWeights::descriptor() {
  ::protobuf_planning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PiecewiseJerkPathWeights& PiecewiseJerkPathWeights::default_instance() {
  ::protobuf_planning_5fconfig_2eproto::InitDefaultsPiecewiseJerkPathWeights();
  return *internal_default_instance();
}

PiecewiseJerkPathWeights* PiecewiseJerkPathWeights::New(::google::protobuf::Arena* arena) const {
  PiecewiseJerkPathWeights* n = new PiecewiseJerkPathWeights;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PiecewiseJerkPathWeights::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.PiecewiseJerkPathWeights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&dynamic_obstacle_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&curb_weight_) -
        reinterpret_cast<char*>(&dynamic_obstacle_weight_)) + sizeof(curb_weight_));
    l_weight_ = 1;
    dl_weight_ = 100;
    ddl_weight_ = 1000;
    dddl_weight_ = 10000;
  }
  obstacle_weight_ = 50;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PiecewiseJerkPathWeights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.PiecewiseJerkPathWeights)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double l_weight = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_l_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dl_weight = 2 [default = 100];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_dl_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dl_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ddl_weight = 3 [default = 1000];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_ddl_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddl_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dddl_weight = 4 [default = 10000];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_dddl_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dddl_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_weight = 5 [default = 50];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_obstacle_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dynamic_obstacle_weight = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_dynamic_obstacle_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dynamic_obstacle_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dotted_line_weight = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_dotted_line_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dotted_line_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double solid_line_weight = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_solid_line_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &solid_line_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double curb_weight = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_curb_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curb_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.PiecewiseJerkPathWeights)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.PiecewiseJerkPathWeights)
  return false;
#undef DO_
}

void PiecewiseJerkPathWeights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.PiecewiseJerkPathWeights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double l_weight = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->l_weight(), output);
  }

  // optional double dl_weight = 2 [default = 100];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dl_weight(), output);
  }

  // optional double ddl_weight = 3 [default = 1000];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ddl_weight(), output);
  }

  // optional double dddl_weight = 4 [default = 10000];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->dddl_weight(), output);
  }

  // optional double obstacle_weight = 5 [default = 50];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->obstacle_weight(), output);
  }

  // optional double dynamic_obstacle_weight = 6 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->dynamic_obstacle_weight(), output);
  }

  // optional double dotted_line_weight = 7 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->dotted_line_weight(), output);
  }

  // optional double solid_line_weight = 8 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->solid_line_weight(), output);
  }

  // optional double curb_weight = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->curb_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.PiecewiseJerkPathWeights)
}

::google::protobuf::uint8* PiecewiseJerkPathWeights::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.PiecewiseJerkPathWeights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double l_weight = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->l_weight(), target);
  }

  // optional double dl_weight = 2 [default = 100];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dl_weight(), target);
  }

  // optional double ddl_weight = 3 [default = 1000];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ddl_weight(), target);
  }

  // optional double dddl_weight = 4 [default = 10000];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->dddl_weight(), target);
  }

  // optional double obstacle_weight = 5 [default = 50];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->obstacle_weight(), target);
  }

  // optional double dynamic_obstacle_weight = 6 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->dynamic_obstacle_weight(), target);
  }

  // optional double dotted_line_weight = 7 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->dotted_line_weight(), target);
  }

  // optional double solid_line_weight = 8 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->solid_line_weight(), target);
  }

  // optional double curb_weight = 9 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->curb_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.PiecewiseJerkPathWeights)
  return target;
}

size_t PiecewiseJerkPathWeights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.PiecewiseJerkPathWeights)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double dynamic_obstacle_weight = 6 [default = 0];
    if (has_dynamic_obstacle_weight()) {
      total_size += 1 + 8;
    }

    // optional double dotted_line_weight = 7 [default = 0];
    if (has_dotted_line_weight()) {
      total_size += 1 + 8;
    }

    // optional double solid_line_weight = 8 [default = 0];
    if (has_solid_line_weight()) {
      total_size += 1 + 8;
    }

    // optional double curb_weight = 9 [default = 0];
    if (has_curb_weight()) {
      total_size += 1 + 8;
    }

    // optional double l_weight = 1 [default = 1];
    if (has_l_weight()) {
      total_size += 1 + 8;
    }

    // optional double dl_weight = 2 [default = 100];
    if (has_dl_weight()) {
      total_size += 1 + 8;
    }

    // optional double ddl_weight = 3 [default = 1000];
    if (has_ddl_weight()) {
      total_size += 1 + 8;
    }

    // optional double dddl_weight = 4 [default = 10000];
    if (has_dddl_weight()) {
      total_size += 1 + 8;
    }

  }
  // optional double obstacle_weight = 5 [default = 50];
  if (has_obstacle_weight()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PiecewiseJerkPathWeights::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.PiecewiseJerkPathWeights)
  GOOGLE_DCHECK_NE(&from, this);
  const PiecewiseJerkPathWeights* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PiecewiseJerkPathWeights>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.PiecewiseJerkPathWeights)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.PiecewiseJerkPathWeights)
    MergeFrom(*source);
  }
}

void PiecewiseJerkPathWeights::MergeFrom(const PiecewiseJerkPathWeights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.PiecewiseJerkPathWeights)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      dynamic_obstacle_weight_ = from.dynamic_obstacle_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      dotted_line_weight_ = from.dotted_line_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      solid_line_weight_ = from.solid_line_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      curb_weight_ = from.curb_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      l_weight_ = from.l_weight_;
    }
    if (cached_has_bits & 0x00000020u) {
      dl_weight_ = from.dl_weight_;
    }
    if (cached_has_bits & 0x00000040u) {
      ddl_weight_ = from.ddl_weight_;
    }
    if (cached_has_bits & 0x00000080u) {
      dddl_weight_ = from.dddl_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_obstacle_weight(from.obstacle_weight());
  }
}

void PiecewiseJerkPathWeights::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.PiecewiseJerkPathWeights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiecewiseJerkPathWeights::CopyFrom(const PiecewiseJerkPathWeights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.PiecewiseJerkPathWeights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiecewiseJerkPathWeights::IsInitialized() const {
  return true;
}

void PiecewiseJerkPathWeights::Swap(PiecewiseJerkPathWeights* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PiecewiseJerkPathWeights::InternalSwap(PiecewiseJerkPathWeights* other) {
  using std::swap;
  swap(dynamic_obstacle_weight_, other->dynamic_obstacle_weight_);
  swap(dotted_line_weight_, other->dotted_line_weight_);
  swap(solid_line_weight_, other->solid_line_weight_);
  swap(curb_weight_, other->curb_weight_);
  swap(l_weight_, other->l_weight_);
  swap(dl_weight_, other->dl_weight_);
  swap(ddl_weight_, other->ddl_weight_);
  swap(dddl_weight_, other->dddl_weight_);
  swap(obstacle_weight_, other->obstacle_weight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PiecewiseJerkPathWeights::GetMetadata() const {
  protobuf_planning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QuasiPotentialFieldPathConfig::InitAsDefaultInstance() {
  ::acu::planning::_QuasiPotentialFieldPathConfig_default_instance_._instance.get_mutable()->default_path_config_ = const_cast< ::acu::planning::QuasiPotentialFieldPathWeights*>(
      ::acu::planning::QuasiPotentialFieldPathWeights::internal_default_instance());
  ::acu::planning::_QuasiPotentialFieldPathConfig_default_instance_._instance.get_mutable()->start_from_road_side_config_ = const_cast< ::acu::planning::QuasiPotentialFieldPathWeights*>(
      ::acu::planning::QuasiPotentialFieldPathWeights::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuasiPotentialFieldPathConfig::kDefaultPathConfigFieldNumber;
const int QuasiPotentialFieldPathConfig::kStartFromRoadSideConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuasiPotentialFieldPathConfig::QuasiPotentialFieldPathConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fconfig_2eproto::InitDefaultsQuasiPotentialFieldPathConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.QuasiPotentialFieldPathConfig)
}
QuasiPotentialFieldPathConfig::QuasiPotentialFieldPathConfig(const QuasiPotentialFieldPathConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_default_path_config()) {
    default_path_config_ = new ::acu::planning::QuasiPotentialFieldPathWeights(*from.default_path_config_);
  } else {
    default_path_config_ = NULL;
  }
  if (from.has_start_from_road_side_config()) {
    start_from_road_side_config_ = new ::acu::planning::QuasiPotentialFieldPathWeights(*from.start_from_road_side_config_);
  } else {
    start_from_road_side_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:acu.planning.QuasiPotentialFieldPathConfig)
}

void QuasiPotentialFieldPathConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&default_path_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_from_road_side_config_) -
      reinterpret_cast<char*>(&default_path_config_)) + sizeof(start_from_road_side_config_));
}

QuasiPotentialFieldPathConfig::~QuasiPotentialFieldPathConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.QuasiPotentialFieldPathConfig)
  SharedDtor();
}

void QuasiPotentialFieldPathConfig::SharedDtor() {
  if (this != internal_default_instance()) delete default_path_config_;
  if (this != internal_default_instance()) delete start_from_road_side_config_;
}

void QuasiPotentialFieldPathConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuasiPotentialFieldPathConfig::descriptor() {
  ::protobuf_planning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuasiPotentialFieldPathConfig& QuasiPotentialFieldPathConfig::default_instance() {
  ::protobuf_planning_5fconfig_2eproto::InitDefaultsQuasiPotentialFieldPathConfig();
  return *internal_default_instance();
}

QuasiPotentialFieldPathConfig* QuasiPotentialFieldPathConfig::New(::google::protobuf::Arena* arena) const {
  QuasiPotentialFieldPathConfig* n = new QuasiPotentialFieldPathConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuasiPotentialFieldPathConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.QuasiPotentialFieldPathConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(default_path_config_ != NULL);
      default_path_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(start_from_road_side_config_ != NULL);
      start_from_road_side_config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QuasiPotentialFieldPathConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.QuasiPotentialFieldPathConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.planning.QuasiPotentialFieldPathWeights default_path_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_default_path_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.QuasiPotentialFieldPathWeights start_from_road_side_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_from_road_side_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.QuasiPotentialFieldPathConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.QuasiPotentialFieldPathConfig)
  return false;
#undef DO_
}

void QuasiPotentialFieldPathConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.QuasiPotentialFieldPathConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.QuasiPotentialFieldPathWeights default_path_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->default_path_config_, output);
  }

  // optional .acu.planning.QuasiPotentialFieldPathWeights start_from_road_side_config = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->start_from_road_side_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.QuasiPotentialFieldPathConfig)
}

::google::protobuf::uint8* QuasiPotentialFieldPathConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.QuasiPotentialFieldPathConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.QuasiPotentialFieldPathWeights default_path_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->default_path_config_, deterministic, target);
  }

  // optional .acu.planning.QuasiPotentialFieldPathWeights start_from_road_side_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->start_from_road_side_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.QuasiPotentialFieldPathConfig)
  return target;
}

size_t QuasiPotentialFieldPathConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.QuasiPotentialFieldPathConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .acu.planning.QuasiPotentialFieldPathWeights default_path_config = 1;
    if (has_default_path_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->default_path_config_);
    }

    // optional .acu.planning.QuasiPotentialFieldPathWeights start_from_road_side_config = 2;
    if (has_start_from_road_side_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->start_from_road_side_config_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuasiPotentialFieldPathConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.QuasiPotentialFieldPathConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const QuasiPotentialFieldPathConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuasiPotentialFieldPathConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.QuasiPotentialFieldPathConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.QuasiPotentialFieldPathConfig)
    MergeFrom(*source);
  }
}

void QuasiPotentialFieldPathConfig::MergeFrom(const QuasiPotentialFieldPathConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.QuasiPotentialFieldPathConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_default_path_config()->::acu::planning::QuasiPotentialFieldPathWeights::MergeFrom(from.default_path_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_start_from_road_side_config()->::acu::planning::QuasiPotentialFieldPathWeights::MergeFrom(from.start_from_road_side_config());
    }
  }
}

void QuasiPotentialFieldPathConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.QuasiPotentialFieldPathConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuasiPotentialFieldPathConfig::CopyFrom(const QuasiPotentialFieldPathConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.QuasiPotentialFieldPathConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuasiPotentialFieldPathConfig::IsInitialized() const {
  return true;
}

void QuasiPotentialFieldPathConfig::Swap(QuasiPotentialFieldPathConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuasiPotentialFieldPathConfig::InternalSwap(QuasiPotentialFieldPathConfig* other) {
  using std::swap;
  swap(default_path_config_, other->default_path_config_);
  swap(start_from_road_side_config_, other->start_from_road_side_config_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuasiPotentialFieldPathConfig::GetMetadata() const {
  protobuf_planning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QuasiPotentialFieldPathWeights::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuasiPotentialFieldPathWeights::kLWeightFieldNumber;
const int QuasiPotentialFieldPathWeights::kDlWeightFieldNumber;
const int QuasiPotentialFieldPathWeights::kDdlWeightFieldNumber;
const int QuasiPotentialFieldPathWeights::kDddlWeightFieldNumber;
const int QuasiPotentialFieldPathWeights::kDottedLineWeightFieldNumber;
const int QuasiPotentialFieldPathWeights::kSolidLineWeightFieldNumber;
const int QuasiPotentialFieldPathWeights::kCurbWeightFieldNumber;
const int QuasiPotentialFieldPathWeights::kObstacleWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuasiPotentialFieldPathWeights::QuasiPotentialFieldPathWeights()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fconfig_2eproto::InitDefaultsQuasiPotentialFieldPathWeights();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.QuasiPotentialFieldPathWeights)
}
QuasiPotentialFieldPathWeights::QuasiPotentialFieldPathWeights(const QuasiPotentialFieldPathWeights& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&l_weight_, &from.l_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&obstacle_weight_) -
    reinterpret_cast<char*>(&l_weight_)) + sizeof(obstacle_weight_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.QuasiPotentialFieldPathWeights)
}

void QuasiPotentialFieldPathWeights::SharedCtor() {
  _cached_size_ = 0;
  l_weight_ = 1;
  dl_weight_ = 100;
  ddl_weight_ = 1000;
  dddl_weight_ = 10000;
  dotted_line_weight_ = 5;
  solid_line_weight_ = 10;
  curb_weight_ = 20;
  obstacle_weight_ = 20;
}

QuasiPotentialFieldPathWeights::~QuasiPotentialFieldPathWeights() {
  // @@protoc_insertion_point(destructor:acu.planning.QuasiPotentialFieldPathWeights)
  SharedDtor();
}

void QuasiPotentialFieldPathWeights::SharedDtor() {
}

void QuasiPotentialFieldPathWeights::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuasiPotentialFieldPathWeights::descriptor() {
  ::protobuf_planning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QuasiPotentialFieldPathWeights& QuasiPotentialFieldPathWeights::default_instance() {
  ::protobuf_planning_5fconfig_2eproto::InitDefaultsQuasiPotentialFieldPathWeights();
  return *internal_default_instance();
}

QuasiPotentialFieldPathWeights* QuasiPotentialFieldPathWeights::New(::google::protobuf::Arena* arena) const {
  QuasiPotentialFieldPathWeights* n = new QuasiPotentialFieldPathWeights;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuasiPotentialFieldPathWeights::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.QuasiPotentialFieldPathWeights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    l_weight_ = 1;
    dl_weight_ = 100;
    ddl_weight_ = 1000;
    dddl_weight_ = 10000;
    dotted_line_weight_ = 5;
    solid_line_weight_ = 10;
    curb_weight_ = 20;
    obstacle_weight_ = 20;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QuasiPotentialFieldPathWeights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.QuasiPotentialFieldPathWeights)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double l_weight = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_l_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dl_weight = 2 [default = 100];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_dl_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dl_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ddl_weight = 3 [default = 1000];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_ddl_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddl_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dddl_weight = 4 [default = 10000];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_dddl_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dddl_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dotted_line_weight = 5 [default = 5];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_dotted_line_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dotted_line_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double solid_line_weight = 6 [default = 10];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_solid_line_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &solid_line_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double curb_weight = 7 [default = 20];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_curb_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curb_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_weight = 8 [default = 20];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_obstacle_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.QuasiPotentialFieldPathWeights)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.QuasiPotentialFieldPathWeights)
  return false;
#undef DO_
}

void QuasiPotentialFieldPathWeights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.QuasiPotentialFieldPathWeights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double l_weight = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->l_weight(), output);
  }

  // optional double dl_weight = 2 [default = 100];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dl_weight(), output);
  }

  // optional double ddl_weight = 3 [default = 1000];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ddl_weight(), output);
  }

  // optional double dddl_weight = 4 [default = 10000];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->dddl_weight(), output);
  }

  // optional double dotted_line_weight = 5 [default = 5];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->dotted_line_weight(), output);
  }

  // optional double solid_line_weight = 6 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->solid_line_weight(), output);
  }

  // optional double curb_weight = 7 [default = 20];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->curb_weight(), output);
  }

  // optional double obstacle_weight = 8 [default = 20];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->obstacle_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.QuasiPotentialFieldPathWeights)
}

::google::protobuf::uint8* QuasiPotentialFieldPathWeights::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.QuasiPotentialFieldPathWeights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double l_weight = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->l_weight(), target);
  }

  // optional double dl_weight = 2 [default = 100];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dl_weight(), target);
  }

  // optional double ddl_weight = 3 [default = 1000];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ddl_weight(), target);
  }

  // optional double dddl_weight = 4 [default = 10000];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->dddl_weight(), target);
  }

  // optional double dotted_line_weight = 5 [default = 5];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->dotted_line_weight(), target);
  }

  // optional double solid_line_weight = 6 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->solid_line_weight(), target);
  }

  // optional double curb_weight = 7 [default = 20];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->curb_weight(), target);
  }

  // optional double obstacle_weight = 8 [default = 20];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->obstacle_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.QuasiPotentialFieldPathWeights)
  return target;
}

size_t QuasiPotentialFieldPathWeights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.QuasiPotentialFieldPathWeights)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double l_weight = 1 [default = 1];
    if (has_l_weight()) {
      total_size += 1 + 8;
    }

    // optional double dl_weight = 2 [default = 100];
    if (has_dl_weight()) {
      total_size += 1 + 8;
    }

    // optional double ddl_weight = 3 [default = 1000];
    if (has_ddl_weight()) {
      total_size += 1 + 8;
    }

    // optional double dddl_weight = 4 [default = 10000];
    if (has_dddl_weight()) {
      total_size += 1 + 8;
    }

    // optional double dotted_line_weight = 5 [default = 5];
    if (has_dotted_line_weight()) {
      total_size += 1 + 8;
    }

    // optional double solid_line_weight = 6 [default = 10];
    if (has_solid_line_weight()) {
      total_size += 1 + 8;
    }

    // optional double curb_weight = 7 [default = 20];
    if (has_curb_weight()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_weight = 8 [default = 20];
    if (has_obstacle_weight()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuasiPotentialFieldPathWeights::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.QuasiPotentialFieldPathWeights)
  GOOGLE_DCHECK_NE(&from, this);
  const QuasiPotentialFieldPathWeights* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuasiPotentialFieldPathWeights>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.QuasiPotentialFieldPathWeights)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.QuasiPotentialFieldPathWeights)
    MergeFrom(*source);
  }
}

void QuasiPotentialFieldPathWeights::MergeFrom(const QuasiPotentialFieldPathWeights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.QuasiPotentialFieldPathWeights)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      l_weight_ = from.l_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      dl_weight_ = from.dl_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      ddl_weight_ = from.ddl_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      dddl_weight_ = from.dddl_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      dotted_line_weight_ = from.dotted_line_weight_;
    }
    if (cached_has_bits & 0x00000020u) {
      solid_line_weight_ = from.solid_line_weight_;
    }
    if (cached_has_bits & 0x00000040u) {
      curb_weight_ = from.curb_weight_;
    }
    if (cached_has_bits & 0x00000080u) {
      obstacle_weight_ = from.obstacle_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QuasiPotentialFieldPathWeights::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.QuasiPotentialFieldPathWeights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuasiPotentialFieldPathWeights::CopyFrom(const QuasiPotentialFieldPathWeights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.QuasiPotentialFieldPathWeights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuasiPotentialFieldPathWeights::IsInitialized() const {
  return true;
}

void QuasiPotentialFieldPathWeights::Swap(QuasiPotentialFieldPathWeights* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuasiPotentialFieldPathWeights::InternalSwap(QuasiPotentialFieldPathWeights* other) {
  using std::swap;
  swap(l_weight_, other->l_weight_);
  swap(dl_weight_, other->dl_weight_);
  swap(ddl_weight_, other->ddl_weight_);
  swap(dddl_weight_, other->dddl_weight_);
  swap(dotted_line_weight_, other->dotted_line_weight_);
  swap(solid_line_weight_, other->solid_line_weight_);
  swap(curb_weight_, other->curb_weight_);
  swap(obstacle_weight_, other->obstacle_weight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuasiPotentialFieldPathWeights::GetMetadata() const {
  protobuf_planning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PathBoundsDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathBoundsDeciderConfig::kIsLaneBorrowingFieldNumber;
const int PathBoundsDeciderConfig::kIsPullOverFieldNumber;
const int PathBoundsDeciderConfig::kPullOverDestinationToAdcBufferFieldNumber;
const int PathBoundsDeciderConfig::kPullOverDestinationToPathendBufferFieldNumber;
const int PathBoundsDeciderConfig::kPullOverRoadEdgeBufferFieldNumber;
const int PathBoundsDeciderConfig::kPullOverApproachLonDistanceAdjustFactorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathBoundsDeciderConfig::PathBoundsDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fconfig_2eproto::InitDefaultsPathBoundsDeciderConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.PathBoundsDeciderConfig)
}
PathBoundsDeciderConfig::PathBoundsDeciderConfig(const PathBoundsDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_lane_borrowing_, &from.is_lane_borrowing_,
    static_cast<size_t>(reinterpret_cast<char*>(&pull_over_approach_lon_distance_adjust_factor_) -
    reinterpret_cast<char*>(&is_lane_borrowing_)) + sizeof(pull_over_approach_lon_distance_adjust_factor_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.PathBoundsDeciderConfig)
}

void PathBoundsDeciderConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&is_lane_borrowing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_pull_over_) -
      reinterpret_cast<char*>(&is_lane_borrowing_)) + sizeof(is_pull_over_));
  pull_over_destination_to_adc_buffer_ = 25;
  pull_over_destination_to_pathend_buffer_ = 10;
  pull_over_road_edge_buffer_ = 0.15;
  pull_over_approach_lon_distance_adjust_factor_ = 1.5;
}

PathBoundsDeciderConfig::~PathBoundsDeciderConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.PathBoundsDeciderConfig)
  SharedDtor();
}

void PathBoundsDeciderConfig::SharedDtor() {
}

void PathBoundsDeciderConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathBoundsDeciderConfig::descriptor() {
  ::protobuf_planning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathBoundsDeciderConfig& PathBoundsDeciderConfig::default_instance() {
  ::protobuf_planning_5fconfig_2eproto::InitDefaultsPathBoundsDeciderConfig();
  return *internal_default_instance();
}

PathBoundsDeciderConfig* PathBoundsDeciderConfig::New(::google::protobuf::Arena* arena) const {
  PathBoundsDeciderConfig* n = new PathBoundsDeciderConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathBoundsDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.PathBoundsDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_lane_borrowing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_pull_over_) -
      reinterpret_cast<char*>(&is_lane_borrowing_)) + sizeof(is_pull_over_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 60u) {
    pull_over_destination_to_adc_buffer_ = 25;
    pull_over_destination_to_pathend_buffer_ = 10;
    pull_over_road_edge_buffer_ = 0.15;
    pull_over_approach_lon_distance_adjust_factor_ = 1.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PathBoundsDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.PathBoundsDeciderConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_lane_borrowing = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_lane_borrowing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_lane_borrowing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_pull_over = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_pull_over();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pull_over_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_pull_over_destination_to_adc_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pull_over_destination_to_adc_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_pull_over_destination_to_pathend_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pull_over_destination_to_pathend_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pull_over_road_edge_buffer = 5 [default = 0.15];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_pull_over_road_edge_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pull_over_road_edge_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pull_over_approach_lon_distance_adjust_factor = 6 [default = 1.5];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_pull_over_approach_lon_distance_adjust_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pull_over_approach_lon_distance_adjust_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.PathBoundsDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.PathBoundsDeciderConfig)
  return false;
#undef DO_
}

void PathBoundsDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.PathBoundsDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_lane_borrowing = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_lane_borrowing(), output);
  }

  // optional bool is_pull_over = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_pull_over(), output);
  }

  // optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->pull_over_destination_to_adc_buffer(), output);
  }

  // optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pull_over_destination_to_pathend_buffer(), output);
  }

  // optional double pull_over_road_edge_buffer = 5 [default = 0.15];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->pull_over_road_edge_buffer(), output);
  }

  // optional double pull_over_approach_lon_distance_adjust_factor = 6 [default = 1.5];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pull_over_approach_lon_distance_adjust_factor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.PathBoundsDeciderConfig)
}

::google::protobuf::uint8* PathBoundsDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.PathBoundsDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_lane_borrowing = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_lane_borrowing(), target);
  }

  // optional bool is_pull_over = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_pull_over(), target);
  }

  // optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->pull_over_destination_to_adc_buffer(), target);
  }

  // optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pull_over_destination_to_pathend_buffer(), target);
  }

  // optional double pull_over_road_edge_buffer = 5 [default = 0.15];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->pull_over_road_edge_buffer(), target);
  }

  // optional double pull_over_approach_lon_distance_adjust_factor = 6 [default = 1.5];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pull_over_approach_lon_distance_adjust_factor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.PathBoundsDeciderConfig)
  return target;
}

size_t PathBoundsDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.PathBoundsDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bool is_lane_borrowing = 1;
    if (has_is_lane_borrowing()) {
      total_size += 1 + 1;
    }

    // optional bool is_pull_over = 2;
    if (has_is_pull_over()) {
      total_size += 1 + 1;
    }

    // optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
    if (has_pull_over_destination_to_adc_buffer()) {
      total_size += 1 + 8;
    }

    // optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
    if (has_pull_over_destination_to_pathend_buffer()) {
      total_size += 1 + 8;
    }

    // optional double pull_over_road_edge_buffer = 5 [default = 0.15];
    if (has_pull_over_road_edge_buffer()) {
      total_size += 1 + 8;
    }

    // optional double pull_over_approach_lon_distance_adjust_factor = 6 [default = 1.5];
    if (has_pull_over_approach_lon_distance_adjust_factor()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathBoundsDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.PathBoundsDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PathBoundsDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathBoundsDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.PathBoundsDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.PathBoundsDeciderConfig)
    MergeFrom(*source);
  }
}

void PathBoundsDeciderConfig::MergeFrom(const PathBoundsDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.PathBoundsDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      is_lane_borrowing_ = from.is_lane_borrowing_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_pull_over_ = from.is_pull_over_;
    }
    if (cached_has_bits & 0x00000004u) {
      pull_over_destination_to_adc_buffer_ = from.pull_over_destination_to_adc_buffer_;
    }
    if (cached_has_bits & 0x00000008u) {
      pull_over_destination_to_pathend_buffer_ = from.pull_over_destination_to_pathend_buffer_;
    }
    if (cached_has_bits & 0x00000010u) {
      pull_over_road_edge_buffer_ = from.pull_over_road_edge_buffer_;
    }
    if (cached_has_bits & 0x00000020u) {
      pull_over_approach_lon_distance_adjust_factor_ = from.pull_over_approach_lon_distance_adjust_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PathBoundsDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.PathBoundsDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathBoundsDeciderConfig::CopyFrom(const PathBoundsDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.PathBoundsDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathBoundsDeciderConfig::IsInitialized() const {
  return true;
}

void PathBoundsDeciderConfig::Swap(PathBoundsDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathBoundsDeciderConfig::InternalSwap(PathBoundsDeciderConfig* other) {
  using std::swap;
  swap(is_lane_borrowing_, other->is_lane_borrowing_);
  swap(is_pull_over_, other->is_pull_over_);
  swap(pull_over_destination_to_adc_buffer_, other->pull_over_destination_to_adc_buffer_);
  swap(pull_over_destination_to_pathend_buffer_, other->pull_over_destination_to_pathend_buffer_);
  swap(pull_over_road_edge_buffer_, other->pull_over_road_edge_buffer_);
  swap(pull_over_approach_lon_distance_adjust_factor_, other->pull_over_approach_lon_distance_adjust_factor_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathBoundsDeciderConfig::GetMetadata() const {
  protobuf_planning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlannerConfig::InitAsDefaultInstance() {
  ::acu::planning::_PlannerConfig_default_instance_._instance.get_mutable()->dp_poly_path_config_ = const_cast< ::acu::planning::DpPolyPathConfig*>(
      ::acu::planning::DpPolyPathConfig::internal_default_instance());
  ::acu::planning::_PlannerConfig_default_instance_._instance.get_mutable()->dp_st_speed_config_ = const_cast< ::acu::planning::DpStSpeedConfig*>(
      ::acu::planning::DpStSpeedConfig::internal_default_instance());
  ::acu::planning::_PlannerConfig_default_instance_._instance.get_mutable()->qp_spline_path_config_ = const_cast< ::acu::planning::QpSplinePathConfig*>(
      ::acu::planning::QpSplinePathConfig::internal_default_instance());
  ::acu::planning::_PlannerConfig_default_instance_._instance.get_mutable()->qp_st_speed_config_ = const_cast< ::acu::planning::QpStSpeedConfig*>(
      ::acu::planning::QpStSpeedConfig::internal_default_instance());
  ::acu::planning::_PlannerConfig_default_instance_._instance.get_mutable()->poly_st_speed_config_ = const_cast< ::acu::planning::PolyStSpeedConfig*>(
      ::acu::planning::PolyStSpeedConfig::internal_default_instance());
  ::acu::planning::_PlannerConfig_default_instance_._instance.get_mutable()->piecewise_jerk_path_config_ = const_cast< ::acu::planning::PiecewiseJerkPathConfig*>(
      ::acu::planning::PiecewiseJerkPathConfig::internal_default_instance());
  ::acu::planning::_PlannerConfig_default_instance_._instance.get_mutable()->path_bounds_decider_config_ = const_cast< ::acu::planning::PathBoundsDeciderConfig*>(
      ::acu::planning::PathBoundsDeciderConfig::internal_default_instance());
  ::acu::planning::_PlannerConfig_default_instance_._instance.get_mutable()->quasi_potential_field_path_config_ = const_cast< ::acu::planning::QuasiPotentialFieldPathConfig*>(
      ::acu::planning::QuasiPotentialFieldPathConfig::internal_default_instance());
}
void PlannerConfig::clear_dp_poly_path_config() {
  if (dp_poly_path_config_ != NULL) dp_poly_path_config_->Clear();
  clear_has_dp_poly_path_config();
}
void PlannerConfig::clear_dp_st_speed_config() {
  if (dp_st_speed_config_ != NULL) dp_st_speed_config_->Clear();
  clear_has_dp_st_speed_config();
}
void PlannerConfig::clear_qp_spline_path_config() {
  if (qp_spline_path_config_ != NULL) qp_spline_path_config_->Clear();
  clear_has_qp_spline_path_config();
}
void PlannerConfig::clear_qp_st_speed_config() {
  if (qp_st_speed_config_ != NULL) qp_st_speed_config_->Clear();
  clear_has_qp_st_speed_config();
}
void PlannerConfig::clear_poly_st_speed_config() {
  if (poly_st_speed_config_ != NULL) poly_st_speed_config_->Clear();
  clear_has_poly_st_speed_config();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlannerConfig::kTaskFieldNumber;
const int PlannerConfig::kDpPolyPathConfigFieldNumber;
const int PlannerConfig::kDpStSpeedConfigFieldNumber;
const int PlannerConfig::kQpSplinePathConfigFieldNumber;
const int PlannerConfig::kQpStSpeedConfigFieldNumber;
const int PlannerConfig::kPolyStSpeedConfigFieldNumber;
const int PlannerConfig::kPiecewiseJerkPathConfigFieldNumber;
const int PlannerConfig::kPathBoundsDeciderConfigFieldNumber;
const int PlannerConfig::kQuasiPotentialFieldPathConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlannerConfig::PlannerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fconfig_2eproto::InitDefaultsPlannerConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.PlannerConfig)
}
PlannerConfig::PlannerConfig(const PlannerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      task_(from.task_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dp_poly_path_config()) {
    dp_poly_path_config_ = new ::acu::planning::DpPolyPathConfig(*from.dp_poly_path_config_);
  } else {
    dp_poly_path_config_ = NULL;
  }
  if (from.has_dp_st_speed_config()) {
    dp_st_speed_config_ = new ::acu::planning::DpStSpeedConfig(*from.dp_st_speed_config_);
  } else {
    dp_st_speed_config_ = NULL;
  }
  if (from.has_qp_spline_path_config()) {
    qp_spline_path_config_ = new ::acu::planning::QpSplinePathConfig(*from.qp_spline_path_config_);
  } else {
    qp_spline_path_config_ = NULL;
  }
  if (from.has_qp_st_speed_config()) {
    qp_st_speed_config_ = new ::acu::planning::QpStSpeedConfig(*from.qp_st_speed_config_);
  } else {
    qp_st_speed_config_ = NULL;
  }
  if (from.has_poly_st_speed_config()) {
    poly_st_speed_config_ = new ::acu::planning::PolyStSpeedConfig(*from.poly_st_speed_config_);
  } else {
    poly_st_speed_config_ = NULL;
  }
  if (from.has_piecewise_jerk_path_config()) {
    piecewise_jerk_path_config_ = new ::acu::planning::PiecewiseJerkPathConfig(*from.piecewise_jerk_path_config_);
  } else {
    piecewise_jerk_path_config_ = NULL;
  }
  if (from.has_path_bounds_decider_config()) {
    path_bounds_decider_config_ = new ::acu::planning::PathBoundsDeciderConfig(*from.path_bounds_decider_config_);
  } else {
    path_bounds_decider_config_ = NULL;
  }
  if (from.has_quasi_potential_field_path_config()) {
    quasi_potential_field_path_config_ = new ::acu::planning::QuasiPotentialFieldPathConfig(*from.quasi_potential_field_path_config_);
  } else {
    quasi_potential_field_path_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:acu.planning.PlannerConfig)
}

void PlannerConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dp_poly_path_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quasi_potential_field_path_config_) -
      reinterpret_cast<char*>(&dp_poly_path_config_)) + sizeof(quasi_potential_field_path_config_));
}

PlannerConfig::~PlannerConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.PlannerConfig)
  SharedDtor();
}

void PlannerConfig::SharedDtor() {
  if (this != internal_default_instance()) delete dp_poly_path_config_;
  if (this != internal_default_instance()) delete dp_st_speed_config_;
  if (this != internal_default_instance()) delete qp_spline_path_config_;
  if (this != internal_default_instance()) delete qp_st_speed_config_;
  if (this != internal_default_instance()) delete poly_st_speed_config_;
  if (this != internal_default_instance()) delete piecewise_jerk_path_config_;
  if (this != internal_default_instance()) delete path_bounds_decider_config_;
  if (this != internal_default_instance()) delete quasi_potential_field_path_config_;
}

void PlannerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlannerConfig::descriptor() {
  ::protobuf_planning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlannerConfig& PlannerConfig::default_instance() {
  ::protobuf_planning_5fconfig_2eproto::InitDefaultsPlannerConfig();
  return *internal_default_instance();
}

PlannerConfig* PlannerConfig::New(::google::protobuf::Arena* arena) const {
  PlannerConfig* n = new PlannerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlannerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.PlannerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(dp_poly_path_config_ != NULL);
      dp_poly_path_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dp_st_speed_config_ != NULL);
      dp_st_speed_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(qp_spline_path_config_ != NULL);
      qp_spline_path_config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(qp_st_speed_config_ != NULL);
      qp_st_speed_config_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(poly_st_speed_config_ != NULL);
      poly_st_speed_config_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(piecewise_jerk_path_config_ != NULL);
      piecewise_jerk_path_config_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(path_bounds_decider_config_ != NULL);
      path_bounds_decider_config_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(quasi_potential_field_path_config_ != NULL);
      quasi_potential_field_path_config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlannerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.PlannerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .acu.planning.TaskType task = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::planning::TaskType_IsValid(value)) {
            add_task(static_cast< ::acu::planning::TaskType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::acu::planning::TaskType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_task())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.DpPolyPathConfig dp_poly_path_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dp_poly_path_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.DpStSpeedConfig dp_st_speed_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dp_st_speed_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.QpSplinePathConfig qp_spline_path_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_qp_spline_path_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.QpStSpeedConfig qp_st_speed_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_qp_st_speed_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.PolyStSpeedConfig poly_st_speed_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_poly_st_speed_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.PiecewiseJerkPathConfig piecewise_jerk_path_config = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_piecewise_jerk_path_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.PathBoundsDeciderConfig path_bounds_decider_config = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path_bounds_decider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.QuasiPotentialFieldPathConfig quasi_potential_field_path_config = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quasi_potential_field_path_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.PlannerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.PlannerConfig)
  return false;
#undef DO_
}

void PlannerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.PlannerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .acu.planning.TaskType task = 1;
  for (int i = 0, n = this->task_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->task(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.DpPolyPathConfig dp_poly_path_config = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dp_poly_path_config_, output);
  }

  // optional .acu.planning.DpStSpeedConfig dp_st_speed_config = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->dp_st_speed_config_, output);
  }

  // optional .acu.planning.QpSplinePathConfig qp_spline_path_config = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->qp_spline_path_config_, output);
  }

  // optional .acu.planning.QpStSpeedConfig qp_st_speed_config = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->qp_st_speed_config_, output);
  }

  // optional .acu.planning.PolyStSpeedConfig poly_st_speed_config = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->poly_st_speed_config_, output);
  }

  // optional .acu.planning.PiecewiseJerkPathConfig piecewise_jerk_path_config = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->piecewise_jerk_path_config_, output);
  }

  // optional .acu.planning.PathBoundsDeciderConfig path_bounds_decider_config = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->path_bounds_decider_config_, output);
  }

  // optional .acu.planning.QuasiPotentialFieldPathConfig quasi_potential_field_path_config = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->quasi_potential_field_path_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.PlannerConfig)
}

::google::protobuf::uint8* PlannerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.PlannerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .acu.planning.TaskType task = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->task_, target);

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.DpPolyPathConfig dp_poly_path_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->dp_poly_path_config_, deterministic, target);
  }

  // optional .acu.planning.DpStSpeedConfig dp_st_speed_config = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->dp_st_speed_config_, deterministic, target);
  }

  // optional .acu.planning.QpSplinePathConfig qp_spline_path_config = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->qp_spline_path_config_, deterministic, target);
  }

  // optional .acu.planning.QpStSpeedConfig qp_st_speed_config = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->qp_st_speed_config_, deterministic, target);
  }

  // optional .acu.planning.PolyStSpeedConfig poly_st_speed_config = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->poly_st_speed_config_, deterministic, target);
  }

  // optional .acu.planning.PiecewiseJerkPathConfig piecewise_jerk_path_config = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->piecewise_jerk_path_config_, deterministic, target);
  }

  // optional .acu.planning.PathBoundsDeciderConfig path_bounds_decider_config = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->path_bounds_decider_config_, deterministic, target);
  }

  // optional .acu.planning.QuasiPotentialFieldPathConfig quasi_potential_field_path_config = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->quasi_potential_field_path_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.PlannerConfig)
  return target;
}

size_t PlannerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.PlannerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.planning.TaskType task = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->task_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->task(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .acu.planning.DpPolyPathConfig dp_poly_path_config = 2;
    if (has_dp_poly_path_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->dp_poly_path_config_);
    }

    // optional .acu.planning.DpStSpeedConfig dp_st_speed_config = 3;
    if (has_dp_st_speed_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->dp_st_speed_config_);
    }

    // optional .acu.planning.QpSplinePathConfig qp_spline_path_config = 4;
    if (has_qp_spline_path_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->qp_spline_path_config_);
    }

    // optional .acu.planning.QpStSpeedConfig qp_st_speed_config = 5;
    if (has_qp_st_speed_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->qp_st_speed_config_);
    }

    // optional .acu.planning.PolyStSpeedConfig poly_st_speed_config = 6;
    if (has_poly_st_speed_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->poly_st_speed_config_);
    }

    // optional .acu.planning.PiecewiseJerkPathConfig piecewise_jerk_path_config = 7;
    if (has_piecewise_jerk_path_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->piecewise_jerk_path_config_);
    }

    // optional .acu.planning.PathBoundsDeciderConfig path_bounds_decider_config = 8;
    if (has_path_bounds_decider_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->path_bounds_decider_config_);
    }

    // optional .acu.planning.QuasiPotentialFieldPathConfig quasi_potential_field_path_config = 9;
    if (has_quasi_potential_field_path_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->quasi_potential_field_path_config_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlannerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.PlannerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PlannerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlannerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.PlannerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.PlannerConfig)
    MergeFrom(*source);
  }
}

void PlannerConfig::MergeFrom(const PlannerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.PlannerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_.MergeFrom(from.task_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dp_poly_path_config()->::acu::planning::DpPolyPathConfig::MergeFrom(from.dp_poly_path_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dp_st_speed_config()->::acu::planning::DpStSpeedConfig::MergeFrom(from.dp_st_speed_config());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_qp_spline_path_config()->::acu::planning::QpSplinePathConfig::MergeFrom(from.qp_spline_path_config());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_qp_st_speed_config()->::acu::planning::QpStSpeedConfig::MergeFrom(from.qp_st_speed_config());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_poly_st_speed_config()->::acu::planning::PolyStSpeedConfig::MergeFrom(from.poly_st_speed_config());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_piecewise_jerk_path_config()->::acu::planning::PiecewiseJerkPathConfig::MergeFrom(from.piecewise_jerk_path_config());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_path_bounds_decider_config()->::acu::planning::PathBoundsDeciderConfig::MergeFrom(from.path_bounds_decider_config());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_quasi_potential_field_path_config()->::acu::planning::QuasiPotentialFieldPathConfig::MergeFrom(from.quasi_potential_field_path_config());
    }
  }
}

void PlannerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.PlannerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannerConfig::CopyFrom(const PlannerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.PlannerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerConfig::IsInitialized() const {
  return true;
}

void PlannerConfig::Swap(PlannerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlannerConfig::InternalSwap(PlannerConfig* other) {
  using std::swap;
  task_.InternalSwap(&other->task_);
  swap(dp_poly_path_config_, other->dp_poly_path_config_);
  swap(dp_st_speed_config_, other->dp_st_speed_config_);
  swap(qp_spline_path_config_, other->qp_spline_path_config_);
  swap(qp_st_speed_config_, other->qp_st_speed_config_);
  swap(poly_st_speed_config_, other->poly_st_speed_config_);
  swap(piecewise_jerk_path_config_, other->piecewise_jerk_path_config_);
  swap(path_bounds_decider_config_, other->path_bounds_decider_config_);
  swap(quasi_potential_field_path_config_, other->quasi_potential_field_path_config_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlannerConfig::GetMetadata() const {
  protobuf_planning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlanningConfig::InitAsDefaultInstance() {
  ::acu::planning::_PlanningConfig_default_instance_._instance.get_mutable()->planner_config_ = const_cast< ::acu::planning::PlannerConfig*>(
      ::acu::planning::PlannerConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningConfig::kPlannerTypeFieldNumber;
const int PlanningConfig::kPlannerConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningConfig::PlanningConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fconfig_2eproto::InitDefaultsPlanningConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.PlanningConfig)
}
PlanningConfig::PlanningConfig(const PlanningConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_planner_config()) {
    planner_config_ = new ::acu::planning::PlannerConfig(*from.planner_config_);
  } else {
    planner_config_ = NULL;
  }
  planner_type_ = from.planner_type_;
  // @@protoc_insertion_point(copy_constructor:acu.planning.PlanningConfig)
}

void PlanningConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&planner_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&planner_type_) -
      reinterpret_cast<char*>(&planner_config_)) + sizeof(planner_type_));
}

PlanningConfig::~PlanningConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.PlanningConfig)
  SharedDtor();
}

void PlanningConfig::SharedDtor() {
  if (this != internal_default_instance()) delete planner_config_;
}

void PlanningConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningConfig::descriptor() {
  ::protobuf_planning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanningConfig& PlanningConfig::default_instance() {
  ::protobuf_planning_5fconfig_2eproto::InitDefaultsPlanningConfig();
  return *internal_default_instance();
}

PlanningConfig* PlanningConfig::New(::google::protobuf::Arena* arena) const {
  PlanningConfig* n = new PlanningConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.PlanningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(planner_config_ != NULL);
    planner_config_->Clear();
  }
  planner_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlanningConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.PlanningConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.planning.PlanningConfig.PlannerType planner_type = 1 [default = PATH];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::planning::PlanningConfig_PlannerType_IsValid(value)) {
            set_planner_type(static_cast< ::acu::planning::PlanningConfig_PlannerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.planning.PlannerConfig planner_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_planner_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.PlanningConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.PlanningConfig)
  return false;
#undef DO_
}

void PlanningConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.PlanningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.PlanningConfig.PlannerType planner_type = 1 [default = PATH];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->planner_type(), output);
  }

  // optional .acu.planning.PlannerConfig planner_config = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->planner_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.PlanningConfig)
}

::google::protobuf::uint8* PlanningConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.PlanningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.planning.PlanningConfig.PlannerType planner_type = 1 [default = PATH];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->planner_type(), target);
  }

  // optional .acu.planning.PlannerConfig planner_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->planner_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.PlanningConfig)
  return target;
}

size_t PlanningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.PlanningConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .acu.planning.PlannerConfig planner_config = 2;
    if (has_planner_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->planner_config_);
    }

    // optional .acu.planning.PlanningConfig.PlannerType planner_type = 1 [default = PATH];
    if (has_planner_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->planner_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.PlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.PlanningConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.PlanningConfig)
    MergeFrom(*source);
  }
}

void PlanningConfig::MergeFrom(const PlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.PlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_planner_config()->::acu::planning::PlannerConfig::MergeFrom(from.planner_config());
    }
    if (cached_has_bits & 0x00000002u) {
      planner_type_ = from.planner_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.PlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningConfig::CopyFrom(const PlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.PlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningConfig::IsInitialized() const {
  return true;
}

void PlanningConfig::Swap(PlanningConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningConfig::InternalSwap(PlanningConfig* other) {
  using std::swap;
  swap(planner_config_, other->planner_config_);
  swap(planner_type_, other->planner_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanningConfig::GetMetadata() const {
  protobuf_planning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace acu

// @@protoc_insertion_point(global_scope)
