// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qp_spline_path_config.proto

#include "qp_spline_path_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace acu {
namespace planning {
class QpSplinePathConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QpSplinePathConfig>
      _instance;
} _QpSplinePathConfig_default_instance_;
}  // namespace planning
}  // namespace acu
namespace protobuf_qp_5fspline_5fpath_5fconfig_2eproto {
void InitDefaultsQpSplinePathConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_QpSplinePathConfig_default_instance_;
    new (ptr) ::acu::planning::QpSplinePathConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::QpSplinePathConfig::InitAsDefaultInstance();
}

void InitDefaultsQpSplinePathConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQpSplinePathConfigImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplinePathConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplinePathConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplinePathConfig, spline_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplinePathConfig, max_spline_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplinePathConfig, max_constraint_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplinePathConfig, time_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplinePathConfig, regularization_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplinePathConfig, first_spline_weight_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplinePathConfig, derivative_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplinePathConfig, second_derivative_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplinePathConfig, third_derivative_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplinePathConfig, reference_line_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplinePathConfig, num_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplinePathConfig, cross_lane_lateral_extension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplinePathConfig, cross_lane_longitudinal_extension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplinePathConfig, history_path_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplinePathConfig, lane_change_mid_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplinePathConfig, point_constraint_s_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplinePathConfig, lane_change_lateral_shift_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::QpSplinePathConfig, uturn_speed_limit_),
  9,
  4,
  5,
  6,
  7,
  8,
  0,
  1,
  11,
  2,
  10,
  12,
  13,
  3,
  14,
  15,
  16,
  17,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 23, sizeof(::acu::planning::QpSplinePathConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_QpSplinePathConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "qp_spline_path_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033qp_spline_path_config.proto\022\014acu.plann"
      "ing\"\211\005\n\022QpSplinePathConfig\022\027\n\014spline_ord"
      "er\030\001 \001(\r:\0016\022\035\n\021max_spline_length\030\002 \001(\001:\002"
      "15\022#\n\027max_constraint_interval\030\003 \001(\001:\00215\022"
      "\034\n\017time_resolution\030\004 \001(\001:\0030.1\022$\n\025regular"
      "ization_weight\030\005 \001(\001:\0050.001\022&\n\032first_spl"
      "ine_weight_factor\030\006 \001(\001:\00210\022\034\n\021derivativ"
      "e_weight\030\007 \001(\001:\0010\022#\n\030second_derivative_w"
      "eight\030\010 \001(\001:\0010\022$\n\027third_derivative_weigh"
      "t\030\t \001(\001:\003100\022 \n\025reference_line_weight\030\n "
      "\001(\001:\0010\022\027\n\nnum_output\030\013 \001(\r:\003100\022)\n\034cross"
      "_lane_lateral_extension\030\014 \001(\001:\0031.2\022-\n!cr"
      "oss_lane_longitudinal_extension\030\r \001(\001:\0025"
      "0\022\036\n\023history_path_weight\030\016 \001(\001:\0010\022\036\n\021lan"
      "e_change_mid_l\030\017 \001(\001:\0030.6\022(\n\033point_const"
      "raint_s_position\030\020 \001(\001:\003110\022$\n\031lane_chan"
      "ge_lateral_shift\030\021 \001(\001:\0011\022\034\n\021uturn_speed"
      "_limit\030\022 \001(\001:\0015"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 695);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "qp_spline_path_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_qp_5fspline_5fpath_5fconfig_2eproto
namespace acu {
namespace planning {

// ===================================================================

void QpSplinePathConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QpSplinePathConfig::kSplineOrderFieldNumber;
const int QpSplinePathConfig::kMaxSplineLengthFieldNumber;
const int QpSplinePathConfig::kMaxConstraintIntervalFieldNumber;
const int QpSplinePathConfig::kTimeResolutionFieldNumber;
const int QpSplinePathConfig::kRegularizationWeightFieldNumber;
const int QpSplinePathConfig::kFirstSplineWeightFactorFieldNumber;
const int QpSplinePathConfig::kDerivativeWeightFieldNumber;
const int QpSplinePathConfig::kSecondDerivativeWeightFieldNumber;
const int QpSplinePathConfig::kThirdDerivativeWeightFieldNumber;
const int QpSplinePathConfig::kReferenceLineWeightFieldNumber;
const int QpSplinePathConfig::kNumOutputFieldNumber;
const int QpSplinePathConfig::kCrossLaneLateralExtensionFieldNumber;
const int QpSplinePathConfig::kCrossLaneLongitudinalExtensionFieldNumber;
const int QpSplinePathConfig::kHistoryPathWeightFieldNumber;
const int QpSplinePathConfig::kLaneChangeMidLFieldNumber;
const int QpSplinePathConfig::kPointConstraintSPositionFieldNumber;
const int QpSplinePathConfig::kLaneChangeLateralShiftFieldNumber;
const int QpSplinePathConfig::kUturnSpeedLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QpSplinePathConfig::QpSplinePathConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_qp_5fspline_5fpath_5fconfig_2eproto::InitDefaultsQpSplinePathConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.QpSplinePathConfig)
}
QpSplinePathConfig::QpSplinePathConfig(const QpSplinePathConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&derivative_weight_, &from.derivative_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&uturn_speed_limit_) -
    reinterpret_cast<char*>(&derivative_weight_)) + sizeof(uturn_speed_limit_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.QpSplinePathConfig)
}

void QpSplinePathConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&derivative_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&history_path_weight_) -
      reinterpret_cast<char*>(&derivative_weight_)) + sizeof(history_path_weight_));
  max_spline_length_ = 15;
  max_constraint_interval_ = 15;
  time_resolution_ = 0.1;
  regularization_weight_ = 0.001;
  first_spline_weight_factor_ = 10;
  spline_order_ = 6u;
  num_output_ = 100u;
  third_derivative_weight_ = 100;
  cross_lane_lateral_extension_ = 1.2;
  cross_lane_longitudinal_extension_ = 50;
  lane_change_mid_l_ = 0.6;
  point_constraint_s_position_ = 110;
  lane_change_lateral_shift_ = 1;
  uturn_speed_limit_ = 5;
}

QpSplinePathConfig::~QpSplinePathConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.QpSplinePathConfig)
  SharedDtor();
}

void QpSplinePathConfig::SharedDtor() {
}

void QpSplinePathConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QpSplinePathConfig::descriptor() {
  ::protobuf_qp_5fspline_5fpath_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_qp_5fspline_5fpath_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QpSplinePathConfig& QpSplinePathConfig::default_instance() {
  ::protobuf_qp_5fspline_5fpath_5fconfig_2eproto::InitDefaultsQpSplinePathConfig();
  return *internal_default_instance();
}

QpSplinePathConfig* QpSplinePathConfig::New(::google::protobuf::Arena* arena) const {
  QpSplinePathConfig* n = new QpSplinePathConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QpSplinePathConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.QpSplinePathConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&derivative_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&history_path_weight_) -
        reinterpret_cast<char*>(&derivative_weight_)) + sizeof(history_path_weight_));
    max_spline_length_ = 15;
    max_constraint_interval_ = 15;
    time_resolution_ = 0.1;
    regularization_weight_ = 0.001;
  }
  if (cached_has_bits & 65280u) {
    first_spline_weight_factor_ = 10;
    spline_order_ = 6u;
    num_output_ = 100u;
    third_derivative_weight_ = 100;
    cross_lane_lateral_extension_ = 1.2;
    cross_lane_longitudinal_extension_ = 50;
    lane_change_mid_l_ = 0.6;
    point_constraint_s_position_ = 110;
  }
  if (cached_has_bits & 196608u) {
    lane_change_lateral_shift_ = 1;
    uturn_speed_limit_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QpSplinePathConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.QpSplinePathConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 spline_order = 1 [default = 6];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_spline_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spline_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_spline_length = 2 [default = 15];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_max_spline_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_spline_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_constraint_interval = 3 [default = 15];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_max_constraint_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_constraint_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time_resolution = 4 [default = 0.1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_time_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double regularization_weight = 5 [default = 0.001];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_regularization_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &regularization_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double first_spline_weight_factor = 6 [default = 10];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_first_spline_weight_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &first_spline_weight_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double derivative_weight = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_derivative_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &derivative_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double second_derivative_weight = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_second_derivative_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &second_derivative_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double third_derivative_weight = 9 [default = 100];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_third_derivative_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &third_derivative_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double reference_line_weight = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_reference_line_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reference_line_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_output = 11 [default = 100];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_num_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cross_lane_lateral_extension = 12 [default = 1.2];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_cross_lane_lateral_extension();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cross_lane_lateral_extension_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cross_lane_longitudinal_extension = 13 [default = 50];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_cross_lane_longitudinal_extension();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cross_lane_longitudinal_extension_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double history_path_weight = 14 [default = 0];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_history_path_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &history_path_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lane_change_mid_l = 15 [default = 0.6];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_lane_change_mid_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_change_mid_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double point_constraint_s_position = 16 [default = 110];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_point_constraint_s_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &point_constraint_s_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lane_change_lateral_shift = 17 [default = 1];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_lane_change_lateral_shift();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_change_lateral_shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double uturn_speed_limit = 18 [default = 5];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_uturn_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &uturn_speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.QpSplinePathConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.QpSplinePathConfig)
  return false;
#undef DO_
}

void QpSplinePathConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.QpSplinePathConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 spline_order = 1 [default = 6];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spline_order(), output);
  }

  // optional double max_spline_length = 2 [default = 15];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_spline_length(), output);
  }

  // optional double max_constraint_interval = 3 [default = 15];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_constraint_interval(), output);
  }

  // optional double time_resolution = 4 [default = 0.1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->time_resolution(), output);
  }

  // optional double regularization_weight = 5 [default = 0.001];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->regularization_weight(), output);
  }

  // optional double first_spline_weight_factor = 6 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->first_spline_weight_factor(), output);
  }

  // optional double derivative_weight = 7 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->derivative_weight(), output);
  }

  // optional double second_derivative_weight = 8 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->second_derivative_weight(), output);
  }

  // optional double third_derivative_weight = 9 [default = 100];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->third_derivative_weight(), output);
  }

  // optional double reference_line_weight = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->reference_line_weight(), output);
  }

  // optional uint32 num_output = 11 [default = 100];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->num_output(), output);
  }

  // optional double cross_lane_lateral_extension = 12 [default = 1.2];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->cross_lane_lateral_extension(), output);
  }

  // optional double cross_lane_longitudinal_extension = 13 [default = 50];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->cross_lane_longitudinal_extension(), output);
  }

  // optional double history_path_weight = 14 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->history_path_weight(), output);
  }

  // optional double lane_change_mid_l = 15 [default = 0.6];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->lane_change_mid_l(), output);
  }

  // optional double point_constraint_s_position = 16 [default = 110];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->point_constraint_s_position(), output);
  }

  // optional double lane_change_lateral_shift = 17 [default = 1];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->lane_change_lateral_shift(), output);
  }

  // optional double uturn_speed_limit = 18 [default = 5];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->uturn_speed_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.QpSplinePathConfig)
}

::google::protobuf::uint8* QpSplinePathConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.QpSplinePathConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 spline_order = 1 [default = 6];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spline_order(), target);
  }

  // optional double max_spline_length = 2 [default = 15];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_spline_length(), target);
  }

  // optional double max_constraint_interval = 3 [default = 15];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_constraint_interval(), target);
  }

  // optional double time_resolution = 4 [default = 0.1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->time_resolution(), target);
  }

  // optional double regularization_weight = 5 [default = 0.001];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->regularization_weight(), target);
  }

  // optional double first_spline_weight_factor = 6 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->first_spline_weight_factor(), target);
  }

  // optional double derivative_weight = 7 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->derivative_weight(), target);
  }

  // optional double second_derivative_weight = 8 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->second_derivative_weight(), target);
  }

  // optional double third_derivative_weight = 9 [default = 100];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->third_derivative_weight(), target);
  }

  // optional double reference_line_weight = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->reference_line_weight(), target);
  }

  // optional uint32 num_output = 11 [default = 100];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->num_output(), target);
  }

  // optional double cross_lane_lateral_extension = 12 [default = 1.2];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->cross_lane_lateral_extension(), target);
  }

  // optional double cross_lane_longitudinal_extension = 13 [default = 50];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->cross_lane_longitudinal_extension(), target);
  }

  // optional double history_path_weight = 14 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->history_path_weight(), target);
  }

  // optional double lane_change_mid_l = 15 [default = 0.6];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->lane_change_mid_l(), target);
  }

  // optional double point_constraint_s_position = 16 [default = 110];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->point_constraint_s_position(), target);
  }

  // optional double lane_change_lateral_shift = 17 [default = 1];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->lane_change_lateral_shift(), target);
  }

  // optional double uturn_speed_limit = 18 [default = 5];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->uturn_speed_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.QpSplinePathConfig)
  return target;
}

size_t QpSplinePathConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.QpSplinePathConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double derivative_weight = 7 [default = 0];
    if (has_derivative_weight()) {
      total_size += 1 + 8;
    }

    // optional double second_derivative_weight = 8 [default = 0];
    if (has_second_derivative_weight()) {
      total_size += 1 + 8;
    }

    // optional double reference_line_weight = 10 [default = 0];
    if (has_reference_line_weight()) {
      total_size += 1 + 8;
    }

    // optional double history_path_weight = 14 [default = 0];
    if (has_history_path_weight()) {
      total_size += 1 + 8;
    }

    // optional double max_spline_length = 2 [default = 15];
    if (has_max_spline_length()) {
      total_size += 1 + 8;
    }

    // optional double max_constraint_interval = 3 [default = 15];
    if (has_max_constraint_interval()) {
      total_size += 1 + 8;
    }

    // optional double time_resolution = 4 [default = 0.1];
    if (has_time_resolution()) {
      total_size += 1 + 8;
    }

    // optional double regularization_weight = 5 [default = 0.001];
    if (has_regularization_weight()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double first_spline_weight_factor = 6 [default = 10];
    if (has_first_spline_weight_factor()) {
      total_size += 1 + 8;
    }

    // optional uint32 spline_order = 1 [default = 6];
    if (has_spline_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spline_order());
    }

    // optional uint32 num_output = 11 [default = 100];
    if (has_num_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_output());
    }

    // optional double third_derivative_weight = 9 [default = 100];
    if (has_third_derivative_weight()) {
      total_size += 1 + 8;
    }

    // optional double cross_lane_lateral_extension = 12 [default = 1.2];
    if (has_cross_lane_lateral_extension()) {
      total_size += 1 + 8;
    }

    // optional double cross_lane_longitudinal_extension = 13 [default = 50];
    if (has_cross_lane_longitudinal_extension()) {
      total_size += 1 + 8;
    }

    // optional double lane_change_mid_l = 15 [default = 0.6];
    if (has_lane_change_mid_l()) {
      total_size += 1 + 8;
    }

    // optional double point_constraint_s_position = 16 [default = 110];
    if (has_point_constraint_s_position()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional double lane_change_lateral_shift = 17 [default = 1];
    if (has_lane_change_lateral_shift()) {
      total_size += 2 + 8;
    }

    // optional double uturn_speed_limit = 18 [default = 5];
    if (has_uturn_speed_limit()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QpSplinePathConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.QpSplinePathConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const QpSplinePathConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QpSplinePathConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.QpSplinePathConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.QpSplinePathConfig)
    MergeFrom(*source);
  }
}

void QpSplinePathConfig::MergeFrom(const QpSplinePathConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.QpSplinePathConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      derivative_weight_ = from.derivative_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      second_derivative_weight_ = from.second_derivative_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      reference_line_weight_ = from.reference_line_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      history_path_weight_ = from.history_path_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_spline_length_ = from.max_spline_length_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_constraint_interval_ = from.max_constraint_interval_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_resolution_ = from.time_resolution_;
    }
    if (cached_has_bits & 0x00000080u) {
      regularization_weight_ = from.regularization_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      first_spline_weight_factor_ = from.first_spline_weight_factor_;
    }
    if (cached_has_bits & 0x00000200u) {
      spline_order_ = from.spline_order_;
    }
    if (cached_has_bits & 0x00000400u) {
      num_output_ = from.num_output_;
    }
    if (cached_has_bits & 0x00000800u) {
      third_derivative_weight_ = from.third_derivative_weight_;
    }
    if (cached_has_bits & 0x00001000u) {
      cross_lane_lateral_extension_ = from.cross_lane_lateral_extension_;
    }
    if (cached_has_bits & 0x00002000u) {
      cross_lane_longitudinal_extension_ = from.cross_lane_longitudinal_extension_;
    }
    if (cached_has_bits & 0x00004000u) {
      lane_change_mid_l_ = from.lane_change_mid_l_;
    }
    if (cached_has_bits & 0x00008000u) {
      point_constraint_s_position_ = from.point_constraint_s_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      lane_change_lateral_shift_ = from.lane_change_lateral_shift_;
    }
    if (cached_has_bits & 0x00020000u) {
      uturn_speed_limit_ = from.uturn_speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QpSplinePathConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.QpSplinePathConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QpSplinePathConfig::CopyFrom(const QpSplinePathConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.QpSplinePathConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpSplinePathConfig::IsInitialized() const {
  return true;
}

void QpSplinePathConfig::Swap(QpSplinePathConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QpSplinePathConfig::InternalSwap(QpSplinePathConfig* other) {
  using std::swap;
  swap(derivative_weight_, other->derivative_weight_);
  swap(second_derivative_weight_, other->second_derivative_weight_);
  swap(reference_line_weight_, other->reference_line_weight_);
  swap(history_path_weight_, other->history_path_weight_);
  swap(max_spline_length_, other->max_spline_length_);
  swap(max_constraint_interval_, other->max_constraint_interval_);
  swap(time_resolution_, other->time_resolution_);
  swap(regularization_weight_, other->regularization_weight_);
  swap(first_spline_weight_factor_, other->first_spline_weight_factor_);
  swap(spline_order_, other->spline_order_);
  swap(num_output_, other->num_output_);
  swap(third_derivative_weight_, other->third_derivative_weight_);
  swap(cross_lane_lateral_extension_, other->cross_lane_lateral_extension_);
  swap(cross_lane_longitudinal_extension_, other->cross_lane_longitudinal_extension_);
  swap(lane_change_mid_l_, other->lane_change_mid_l_);
  swap(point_constraint_s_position_, other->point_constraint_s_position_);
  swap(lane_change_lateral_shift_, other->lane_change_lateral_shift_);
  swap(uturn_speed_limit_, other->uturn_speed_limit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QpSplinePathConfig::GetMetadata() const {
  protobuf_qp_5fspline_5fpath_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_qp_5fspline_5fpath_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace acu

// @@protoc_insertion_point(global_scope)
