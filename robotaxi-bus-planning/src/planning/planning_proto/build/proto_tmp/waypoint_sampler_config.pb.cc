// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waypoint_sampler_config.proto

#include "waypoint_sampler_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace acu {
namespace planning {
class WaypointSamplerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WaypointSamplerConfig>
      _instance;
} _WaypointSamplerConfig_default_instance_;
}  // namespace planning
}  // namespace acu
namespace protobuf_waypoint_5fsampler_5fconfig_2eproto {
void InitDefaultsWaypointSamplerConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::planning::_WaypointSamplerConfig_default_instance_;
    new (ptr) ::acu::planning::WaypointSamplerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::planning::WaypointSamplerConfig::InitAsDefaultInstance();
}

void InitDefaultsWaypointSamplerConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWaypointSamplerConfigImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::WaypointSamplerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::WaypointSamplerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::WaypointSamplerConfig, sample_points_num_each_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::WaypointSamplerConfig, step_length_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::WaypointSamplerConfig, step_length_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::WaypointSamplerConfig, lateral_sample_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::WaypointSamplerConfig, lateral_adjust_coeff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::WaypointSamplerConfig, sidepass_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::planning::WaypointSamplerConfig, navigator_sample_num_each_level_),
  2,
  3,
  4,
  5,
  6,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::acu::planning::WaypointSamplerConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::planning::_WaypointSamplerConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "waypoint_sampler_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035waypoint_sampler_config.proto\022\014acu.pla"
      "nning\"\204\002\n\025WaypointSamplerConfig\022\'\n\034sampl"
      "e_points_num_each_level\030\001 \001(\r:\0019\022\033\n\017step"
      "_length_max\030\002 \001(\001:\00215\022\032\n\017step_length_min"
      "\030\003 \001(\001:\0018\022\"\n\025lateral_sample_offset\030\004 \001(\001"
      ":\0030.5\022!\n\024lateral_adjust_coeff\030\005 \001(\001:\0030.5"
      "\022\031\n\021sidepass_distance\030\006 \001(\001\022\'\n\037navigator"
      "_sample_num_each_level\030\007 \001(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 308);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "waypoint_sampler_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_waypoint_5fsampler_5fconfig_2eproto
namespace acu {
namespace planning {

// ===================================================================

void WaypointSamplerConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WaypointSamplerConfig::kSamplePointsNumEachLevelFieldNumber;
const int WaypointSamplerConfig::kStepLengthMaxFieldNumber;
const int WaypointSamplerConfig::kStepLengthMinFieldNumber;
const int WaypointSamplerConfig::kLateralSampleOffsetFieldNumber;
const int WaypointSamplerConfig::kLateralAdjustCoeffFieldNumber;
const int WaypointSamplerConfig::kSidepassDistanceFieldNumber;
const int WaypointSamplerConfig::kNavigatorSampleNumEachLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaypointSamplerConfig::WaypointSamplerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_waypoint_5fsampler_5fconfig_2eproto::InitDefaultsWaypointSamplerConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.planning.WaypointSamplerConfig)
}
WaypointSamplerConfig::WaypointSamplerConfig(const WaypointSamplerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sidepass_distance_, &from.sidepass_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&lateral_adjust_coeff_) -
    reinterpret_cast<char*>(&sidepass_distance_)) + sizeof(lateral_adjust_coeff_));
  // @@protoc_insertion_point(copy_constructor:acu.planning.WaypointSamplerConfig)
}

void WaypointSamplerConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sidepass_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&navigator_sample_num_each_level_) -
      reinterpret_cast<char*>(&sidepass_distance_)) + sizeof(navigator_sample_num_each_level_));
  sample_points_num_each_level_ = 9u;
  step_length_max_ = 15;
  step_length_min_ = 8;
  lateral_sample_offset_ = 0.5;
  lateral_adjust_coeff_ = 0.5;
}

WaypointSamplerConfig::~WaypointSamplerConfig() {
  // @@protoc_insertion_point(destructor:acu.planning.WaypointSamplerConfig)
  SharedDtor();
}

void WaypointSamplerConfig::SharedDtor() {
}

void WaypointSamplerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaypointSamplerConfig::descriptor() {
  ::protobuf_waypoint_5fsampler_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_waypoint_5fsampler_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WaypointSamplerConfig& WaypointSamplerConfig::default_instance() {
  ::protobuf_waypoint_5fsampler_5fconfig_2eproto::InitDefaultsWaypointSamplerConfig();
  return *internal_default_instance();
}

WaypointSamplerConfig* WaypointSamplerConfig::New(::google::protobuf::Arena* arena) const {
  WaypointSamplerConfig* n = new WaypointSamplerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WaypointSamplerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.planning.WaypointSamplerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&sidepass_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&navigator_sample_num_each_level_) -
        reinterpret_cast<char*>(&sidepass_distance_)) + sizeof(navigator_sample_num_each_level_));
    sample_points_num_each_level_ = 9u;
    step_length_max_ = 15;
    step_length_min_ = 8;
    lateral_sample_offset_ = 0.5;
    lateral_adjust_coeff_ = 0.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WaypointSamplerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.planning.WaypointSamplerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sample_points_num_each_level = 1 [default = 9];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sample_points_num_each_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_points_num_each_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double step_length_max = 2 [default = 15];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_step_length_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_length_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double step_length_min = 3 [default = 8];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_step_length_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_length_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_sample_offset = 4 [default = 0.5];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_lateral_sample_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_sample_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_adjust_coeff = 5 [default = 0.5];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_lateral_adjust_coeff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_adjust_coeff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sidepass_distance = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_sidepass_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sidepass_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 navigator_sample_num_each_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_navigator_sample_num_each_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &navigator_sample_num_each_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.planning.WaypointSamplerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.planning.WaypointSamplerConfig)
  return false;
#undef DO_
}

void WaypointSamplerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.planning.WaypointSamplerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sample_points_num_each_level = 1 [default = 9];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sample_points_num_each_level(), output);
  }

  // optional double step_length_max = 2 [default = 15];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->step_length_max(), output);
  }

  // optional double step_length_min = 3 [default = 8];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->step_length_min(), output);
  }

  // optional double lateral_sample_offset = 4 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lateral_sample_offset(), output);
  }

  // optional double lateral_adjust_coeff = 5 [default = 0.5];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lateral_adjust_coeff(), output);
  }

  // optional double sidepass_distance = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->sidepass_distance(), output);
  }

  // optional uint32 navigator_sample_num_each_level = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->navigator_sample_num_each_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.planning.WaypointSamplerConfig)
}

::google::protobuf::uint8* WaypointSamplerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.planning.WaypointSamplerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sample_points_num_each_level = 1 [default = 9];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sample_points_num_each_level(), target);
  }

  // optional double step_length_max = 2 [default = 15];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->step_length_max(), target);
  }

  // optional double step_length_min = 3 [default = 8];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->step_length_min(), target);
  }

  // optional double lateral_sample_offset = 4 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lateral_sample_offset(), target);
  }

  // optional double lateral_adjust_coeff = 5 [default = 0.5];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lateral_adjust_coeff(), target);
  }

  // optional double sidepass_distance = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->sidepass_distance(), target);
  }

  // optional uint32 navigator_sample_num_each_level = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->navigator_sample_num_each_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.planning.WaypointSamplerConfig)
  return target;
}

size_t WaypointSamplerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.planning.WaypointSamplerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional double sidepass_distance = 6;
    if (has_sidepass_distance()) {
      total_size += 1 + 8;
    }

    // optional uint32 navigator_sample_num_each_level = 7;
    if (has_navigator_sample_num_each_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->navigator_sample_num_each_level());
    }

    // optional uint32 sample_points_num_each_level = 1 [default = 9];
    if (has_sample_points_num_each_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sample_points_num_each_level());
    }

    // optional double step_length_max = 2 [default = 15];
    if (has_step_length_max()) {
      total_size += 1 + 8;
    }

    // optional double step_length_min = 3 [default = 8];
    if (has_step_length_min()) {
      total_size += 1 + 8;
    }

    // optional double lateral_sample_offset = 4 [default = 0.5];
    if (has_lateral_sample_offset()) {
      total_size += 1 + 8;
    }

    // optional double lateral_adjust_coeff = 5 [default = 0.5];
    if (has_lateral_adjust_coeff()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaypointSamplerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.planning.WaypointSamplerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const WaypointSamplerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WaypointSamplerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.planning.WaypointSamplerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.planning.WaypointSamplerConfig)
    MergeFrom(*source);
  }
}

void WaypointSamplerConfig::MergeFrom(const WaypointSamplerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.planning.WaypointSamplerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      sidepass_distance_ = from.sidepass_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      navigator_sample_num_each_level_ = from.navigator_sample_num_each_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      sample_points_num_each_level_ = from.sample_points_num_each_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      step_length_max_ = from.step_length_max_;
    }
    if (cached_has_bits & 0x00000010u) {
      step_length_min_ = from.step_length_min_;
    }
    if (cached_has_bits & 0x00000020u) {
      lateral_sample_offset_ = from.lateral_sample_offset_;
    }
    if (cached_has_bits & 0x00000040u) {
      lateral_adjust_coeff_ = from.lateral_adjust_coeff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WaypointSamplerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.planning.WaypointSamplerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaypointSamplerConfig::CopyFrom(const WaypointSamplerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.planning.WaypointSamplerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaypointSamplerConfig::IsInitialized() const {
  return true;
}

void WaypointSamplerConfig::Swap(WaypointSamplerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaypointSamplerConfig::InternalSwap(WaypointSamplerConfig* other) {
  using std::swap;
  swap(sidepass_distance_, other->sidepass_distance_);
  swap(navigator_sample_num_each_level_, other->navigator_sample_num_each_level_);
  swap(sample_points_num_each_level_, other->sample_points_num_each_level_);
  swap(step_length_max_, other->step_length_max_);
  swap(step_length_min_, other->step_length_min_);
  swap(lateral_sample_offset_, other->lateral_sample_offset_);
  swap(lateral_adjust_coeff_, other->lateral_adjust_coeff_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WaypointSamplerConfig::GetMetadata() const {
  protobuf_waypoint_5fsampler_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_waypoint_5fsampler_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace acu

// @@protoc_insertion_point(global_scope)
