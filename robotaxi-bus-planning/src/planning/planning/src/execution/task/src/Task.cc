/*
 * this file was generated by NunniFSMGen
 */


#include "src/execution/task/include/Task.h"
#include "common/base/log/include/log.h"
#include "datapool/include/common_typedef.h"
#include "common/mapcheck/freespace/include/freespace.h"
#include "src/execution/business/include/dummy_business.h"
#include "src/execution/business/include/struct_business.h"
//#include "src/execution/business/include/unstruct_business.h"
namespace acu{
namespace planning{



Task::Task() {}


Task::Task( void *o ) {}


Task::~Task() {}


bool Task::Idle2AnalyseTaskFunc( void * o ) throw (TaskLogicError) {
    // add your code hereafter...
    AINFO << "[task fsm state]:Idle2AnalyseTaskFunc";
    TaskFSMParam  *pfsm_param = (TaskFSMParam*)o;
    pfsm_param->task_fsm_info.task_status.status = eTaskStatus::ANALYSE_TASK;
    pfsm_param->task_fsm_info.task_status.SetIdle2AnalyseTask();
    pfsm_param->debug_planning_msg.SetIdle2AnalyseTaskFunc();
    
    pfsm_param->task_fsm_info.ResetExeSubTaskStatus();
    if (acu::common::NodeTime::Now().ToSecond() - pfsm_param->task_content.new_task_time > 0.01) {
        if (pfsm_param->map_type == eMapType::STRUCTURE_ROAD) {
            AINFO << "MAKE STRUCTURE_BUSINESS";
            pfsm_param->business_ptr = std::make_shared<StructBusiness>();
            AINFO << pfsm_param->business_ptr->GetBusinessType().type_str;
            pfsm_param->task_fsm_info.setTaskExecutable();
        } else if (pfsm_param->map_type == eMapType::UNSTRUCTURE_ROAD) {
            AINFO << "MAKE UNSTRUCTURE_BUSINESS";
          //  pfsm_param->business_ptr = std::make_shared<UnstructBusiness>();
          //  AINFO << pfsm_param->business_ptr->GetBusinessType().type_str;
          //  pfsm_param->task_fsm_info.setTaskExecutable();
        } else {
            AINFO << "MAKE DUMMYBUSINESS";
            pfsm_param->business_ptr = std::make_shared<DummyBusiness>();
            return true;
        }
        AINFO << "task start over 1s";
        pfsm_param->task_content.ResetNewTask();
        // Freespace *pfs_check = Freespace::Instance();
        // if (pfs_check != nullptr) {
        //     geometry::Site cur_pos;
        //     cur_pos.xg = pfsm_param->localization_data.xg;
        //     cur_pos.yg = pfsm_param->localization_data.yg;
        //     cur_pos.globalangle = pfsm_param->localization_data.yaw;
        //     bool fs_result = pfs_check->IsInFreespace(cur_pos);
        //     // if (!fs_result) {
        //     //     AERROR << "current pos is not in freespace";
        //     //     pfsm_param->task_exe_status = eTaskExeResult::FAILURE;
        //     //     pfsm_param->task_fsm_info.setTaskOver();
        //     //     return true;
        //     // }
        // }
    } else {
        AINFO << "task start in 1s";
        pfsm_param->task_exe_status = eTaskExeResult::DEFAULT;
    }
    return true;
}


bool Task::IdleTaskFunc( void * o ) throw (TaskLogicError) {
    // add your code hereafter...
    AINFO << "[task fsm state]:IdleTaskFunc";
    TaskFSMParam  *pfsm_param = (TaskFSMParam*)o;
    if (pfsm_param == nullptr) return true;
    pfsm_param->Reset();
    pfsm_param->task_fsm_info.task_status.SetIdleTask();
    pfsm_param->debug_planning_msg.SetIdleTaskFunc();
    pfsm_param->business_ptr = std::make_shared<DummyBusiness>();
    return true;
}


bool Task::AnalyseTaskFunc( void * o ) throw (TaskLogicError) {
    // add your code hereafter...
    AINFO << "[task fsm state]:AnalyseTaskFunc";
    TaskFSMParam  *pfsm_param = (TaskFSMParam*)o;
    pfsm_param->task_fsm_info.task_status.SetAnalyseTask();
    pfsm_param->debug_planning_msg.SetAnalyseTaskFunc();

    pfsm_param->task_content.ResetNewTask();
    if (pfsm_param->task_fsm_info.IsTaskExeOK()) {
        pfsm_param->task_exe_status = eTaskExeResult::SUCCESS;
        pfsm_param->task_fsm_info.setTaskOver(); 
    } else {
        pfsm_param->task_fsm_info.setTaskExecutable();
    }
    pfsm_param->task_fsm_info.ResetExeSubTaskStatus();
    return true;
}


bool Task::ExecuteTaskFunc( void * o ) throw (TaskLogicError) {
    // add your code hereafter...
    AINFO << "[task fsm state]:ExecuteTaskFunc";
    TaskFSMParam  *pfsm_param = (TaskFSMParam*)o;
    pfsm_param->task_fsm_info.task_status.SetExecuteTask(); 
    pfsm_param->debug_planning_msg.SetExecuteTaskFunc();
    pfsm_param->task_fsm_info.ResetAnalyseStatus();
    return true;
}


bool Task::EndTaskFunc( void * o ) throw (TaskLogicError) {
    // add your code hereafter...
    AINFO << "[task fsm state]:EndTaskFunc";
    TaskFSMParam  *pfsm_param = (TaskFSMParam*)o;
    pfsm_param->task_fsm_info.task_status.SetEndTask();
    pfsm_param->debug_planning_msg.SetEndTaskFunc();
    pfsm_param->task_fsm_info.ResetAnalyseStatus();
    pfsm_param->task_fsm_info.ResetEndTaskHandleStatus();
    pfsm_param->business_ptr = std::make_shared<DummyBusiness>();
    if (pfsm_param->task_content.command_info == eCommand::COMMAND_STOP) {
        pfsm_param->task_fsm_info.setEndTaskHandleOver();
        pfsm_param->task_content.Reset();
        pfsm_param->task_exe_status = eTaskExeResult::DEFAULT;
    }
    return true;
}


bool Task::ExceptionalTaskFunc( void * o ) throw (TaskLogicError) {
    // add your code hereafter...
    AINFO << "[task fsm state]:ExceptionalTaskFunc";
    TaskFSMParam  *pfsm_param = (TaskFSMParam*)o;
    pfsm_param->task_fsm_info.task_status.SetExceptionalTask();
    pfsm_param->debug_planning_msg.SetExceptionalTaskFunc();
    pfsm_param->task_fsm_info.ResetExeSubTaskStatus();
    pfsm_param->paths.front_local_path.path.clear();

    if (pfsm_param->business_ptr != nullptr) {
        AWARN << "business_ptr  " << pfsm_param->business_ptr->GetBusinessType().type_str;
    }
    if (pfsm_param->business_ptr->GetBusinessType().type != eBusinessType::DUMMY) {
        pfsm_param->SaveScene();
        pfsm_param->business_ptr = std::make_shared<DummyBusiness>();
    }
    return true;
}


bool Task::SuspendTaskFunc( void * o ) throw (TaskLogicError) {
    // add your code hereafter...
    AINFO << "[task fsm state]:SuspendTaskFunc";
    TaskFSMParam  *pfsm_param = (TaskFSMParam*)o;
    pfsm_param->task_fsm_info.task_status.SetSuspendTask();
    pfsm_param->debug_planning_msg.SetSuspendTaskFunc();
    if (pfsm_param->business_ptr != nullptr) {
        AWARN << "business_ptr  " << pfsm_param->business_ptr->GetBusinessType().type_str;
    }
    if (pfsm_param->business_ptr->GetBusinessType().type != eBusinessType::DUMMY) {
        pfsm_param->SaveScene();
        pfsm_param->business_ptr = std::make_shared<DummyBusiness>();
    }
    return true;
}


bool Task::EmergencyBtnHandleFunc( void * o ) throw (TaskLogicError) {
    // add your code hereafter...
    AINFO << "[task fsm state]:EmergencyBtnHandleFunc";
    TaskFSMParam  *pfsm_param = (TaskFSMParam*)o;
    pfsm_param->task_fsm_info.task_status.SetEmergencyBtnHandle();
    pfsm_param->debug_planning_msg.SetEmergencyBtnHandleFunc();
    if (pfsm_param->business_ptr != nullptr) {
        AWARN << "business_ptr  " << pfsm_param->business_ptr->GetBusinessType().type_str;
    }
    if (pfsm_param->business_ptr->GetBusinessType().type != eBusinessType::DUMMY) {
        pfsm_param->SaveScene();
        pfsm_param->business_ptr = std::make_shared<DummyBusiness>();
    }
    return true;
}


bool Task::RemoteControlFunc( void * o ) throw (TaskLogicError) {
    // add your code hereafter...
    AINFO << "[task fsm state]:RemoteControlFunc";
    TaskFSMParam  *pfsm_param = (TaskFSMParam*)o;
    pfsm_param->task_fsm_info.task_status.SetRemoteControl();
    pfsm_param->debug_planning_msg.SetRemoteControlFunc();
    if (pfsm_param->business_ptr != nullptr) {
        AWARN << "business_ptr  " << pfsm_param->business_ptr->GetBusinessType().type_str;
    }
    if (pfsm_param->business_ptr->GetBusinessType().type != eBusinessType::DUMMY) {
        pfsm_param->SaveScene();
        pfsm_param->business_ptr = std::make_shared<DummyBusiness>();
    }
    return true;
}


bool Task::Suspend2AnalyseTaskFunc( void * o ) throw (TaskLogicError) {
    // add your code hereafter...
    AINFO << "[task fsm state]:Suspend2AnalyseTaskFunc";
    TaskFSMParam  *pfsm_param = (TaskFSMParam*)o;
    pfsm_param->task_fsm_info.task_status.status = eTaskStatus::ANALYSE_TASK;
    pfsm_param->task_fsm_info.task_status.SetSuspend2AnalyseTask();
    pfsm_param->debug_planning_msg.SetSuspend2AnalyseTaskFunc();
    pfsm_param->RestoreScene();
    pfsm_param->task_fsm_info.setTaskExecutable();
    pfsm_param->last_business_ptr = std::make_shared<DummyBusiness>();
    return true;
}


bool Task::Remote2AnalyseTaskFunc( void * o ) throw (TaskLogicError) {
    // add your code hereafter...
    AINFO << "[task fsm state]:Remote2AnalyseTaskFunc";
    TaskFSMParam  *pfsm_param = (TaskFSMParam*)o;
    pfsm_param->task_fsm_info.task_status.SetRemote2AnalyseTask();
    pfsm_param->debug_planning_msg.SetRemote2AnalyseTaskFunc();
    pfsm_param->task_fsm_info.ResetExeSubTaskStatus();
    pfsm_param->task_fsm_info.ResetExceptionAnalyseStatus();
    pfsm_param->RestoreScene();
    Freespace *pfs_check = Freespace::Instance();
    geometry::Site cur_pos;
    cur_pos.xg = pfsm_param->localization_data.xg;
    cur_pos.yg = pfsm_param->localization_data.yg;
    cur_pos.globalangle = pfsm_param->localization_data.yaw;
    bool fs_result = pfs_check->IsInFreespace(cur_pos);
    if (!fs_result) {
        pfsm_param->task_exe_status = eTaskExeResult::FAILURE;
        pfsm_param->task_fsm_info.setTaskOver();
        return true;
    } else {
        pfsm_param->task_fsm_info.setTaskExecutable();
    }
    pfsm_param->last_business_ptr = std::make_shared<DummyBusiness>();
    return true;
}


}
}

