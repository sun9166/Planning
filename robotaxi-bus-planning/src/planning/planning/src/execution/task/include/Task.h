/*
 * this file was generated by NunniFSMGen
 */


#ifndef Task_H
#define Task_H


#include "src/execution/task/include/TaskLogicError.h"
namespace acu{
namespace planning{



class Task
{
    public:
        virtual void TaskIsNew( void * o ) throw (TaskLogicError) = 0;
        virtual void TaskExecutable( void * o ) throw (TaskLogicError) = 0;
        virtual void TaskUnexecutable( void * o ) throw (TaskLogicError) = 0;
        virtual void TaskExecuteOver( void * o ) throw (TaskLogicError) = 0;
        virtual void TaskExecuteFault( void * o ) throw (TaskLogicError) = 0;
        virtual void TaskOver( void * o ) throw (TaskLogicError) = 0;
        virtual void TaskAborted( void * o ) throw (TaskLogicError) = 0;
        virtual void TaskSuspended( void * o ) throw (TaskLogicError) = 0;
        virtual void TaskContinued( void * o ) throw (TaskLogicError) = 0;
        virtual void SyetemException( void * o ) throw (TaskLogicError) = 0;
        virtual void SyetemNormal( void * o ) throw (TaskLogicError) = 0;
        virtual void BtnEmergencyPressed( void * o ) throw (TaskLogicError) = 0;
        virtual void BtnEmergencyUnpressed( void * o ) throw (TaskLogicError) = 0;
        virtual void RemoteCtrlConnected( void * o ) throw (TaskLogicError) = 0;
        virtual void RemoteCtrlUnconnected( void * o ) throw (TaskLogicError) = 0;
        virtual void EndTaskHandleOver( void * o ) throw (TaskLogicError) = 0;


    protected:
        Task();
        Task( void *o );


    public:
        virtual ~Task();


    public:
        bool Idle2AnalyseTaskFunc( void * o ) throw (TaskLogicError);
        bool IdleTaskFunc( void * o ) throw (TaskLogicError);
        bool AnalyseTaskFunc( void * o ) throw (TaskLogicError);
        bool ExecuteTaskFunc( void * o ) throw (TaskLogicError);
        bool EndTaskFunc( void * o ) throw (TaskLogicError);
        bool ExceptionalTaskFunc( void * o ) throw (TaskLogicError);
        bool SuspendTaskFunc( void * o ) throw (TaskLogicError);
        bool EmergencyBtnHandleFunc( void * o ) throw (TaskLogicError);
        bool RemoteControlFunc( void * o ) throw (TaskLogicError);
        bool Suspend2AnalyseTaskFunc( void * o ) throw (TaskLogicError);
        bool Remote2AnalyseTaskFunc( void * o ) throw (TaskLogicError);
};


}
}

#endif
