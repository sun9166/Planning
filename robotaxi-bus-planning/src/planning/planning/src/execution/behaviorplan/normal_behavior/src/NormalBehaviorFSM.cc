/*
 * this file was generated by NunniFSMGen - do not edit!
 */


#include "src/execution/behaviorplan/normal_behavior/include/NormalBehaviorFSM.h"
#include "src/execution/behaviorplan/normal_behavior/include/NormalBehaviorState.h"
namespace acu{
namespace planning{



NormalBehaviorFSM::NormalBehaviorFSM() {}


NormalBehaviorFSM::NormalBehaviorFSM( void *o ) : NormalBehavior( o ) {
    m_state = NormalBehaviorIdleState::instance();
}


NormalBehaviorFSM::~NormalBehaviorFSM() {}


void NormalBehaviorFSM::PathNoCollision( void * o ) throw (BehaviorLogicError) {
    m_state->PathNoCollision( this, o );
}


void NormalBehaviorFSM::CurvatureFault( void * o ) throw (BehaviorLogicError) {
    m_state->CurvatureFault( this, o );
}


void NormalBehaviorFSM::DeviationPath( void * o ) throw (BehaviorLogicError) {
    m_state->DeviationPath( this, o );
}


void NormalBehaviorFSM::PathCollision( void * o ) throw (BehaviorLogicError) {
    m_state->PathCollision( this, o );
}


void NormalBehaviorFSM::AebEmergency( void * o ) throw (BehaviorLogicError) {
    m_state->AebEmergency( this, o );
}


void NormalBehaviorFSM::SlowDownFinish( void * o ) throw (BehaviorLogicError) {
    m_state->SlowDownFinish( this, o );
}


void NormalBehaviorFSM::NarrowTurnFinish( void * o ) throw (BehaviorLogicError) {
    m_state->NarrowTurnFinish( this, o );
}


void NormalBehaviorFSM::NarrowTurnFault( void * o ) throw (BehaviorLogicError) {
    m_state->NarrowTurnFault( this, o );
}


void NormalBehaviorFSM::ForceAvoidFinish( void * o ) throw (BehaviorLogicError) {
    m_state->ForceAvoidFinish( this, o );
}


void NormalBehaviorFSM::ForceAvoidFault( void * o ) throw (BehaviorLogicError) {
    m_state->ForceAvoidFault( this, o );
}


void NormalBehaviorFSM::DWAResultSuccess( void * o ) throw (BehaviorLogicError) {
    m_state->DWAResultSuccess( this, o );
}


void NormalBehaviorFSM::HybridAstarSuccess( void * o ) throw (BehaviorLogicError) {
    m_state->HybridAstarSuccess( this, o );
}


void NormalBehaviorFSM::ForwardStayTimeOut( void * o ) throw (BehaviorLogicError) {
    m_state->ForwardStayTimeOut( this, o );
}


void NormalBehaviorFSM::BackStayTimeOut( void * o ) throw (BehaviorLogicError) {
    m_state->BackStayTimeOut( this, o );
}


void NormalBehaviorFSM::BackFollowingFinish( void * o ) throw (BehaviorLogicError) {
    m_state->BackFollowingFinish( this, o );
}


void NormalBehaviorFSM::ForwardAvoidFinish( void * o ) throw (BehaviorLogicError) {
    m_state->ForwardAvoidFinish( this, o );
}


void NormalBehaviorFSM::BackAvoidFinish( void * o ) throw (BehaviorLogicError) {
    m_state->BackAvoidFinish( this, o );
}


void NormalBehaviorFSM::YieldFinish( void * o ) throw (BehaviorLogicError) {
    m_state->YieldFinish( this, o );
}


void NormalBehaviorFSM::BehaviorErrorFinish( void * o ) throw (BehaviorLogicError) {
    m_state->BehaviorErrorFinish( this, o );
}


void NormalBehaviorFSM::BehaviorReset( void * o ) throw (BehaviorLogicError) {
    m_state->BehaviorReset( this, o );
}


void NormalBehaviorFSM::NoThingToDo( void * o ) throw (BehaviorLogicError) {
    m_state->NoThingToDo( this, o );
}


void NormalBehaviorFSM::changeState( NormalBehaviorState *newState ) {
    m_state = newState;
}
}
}

