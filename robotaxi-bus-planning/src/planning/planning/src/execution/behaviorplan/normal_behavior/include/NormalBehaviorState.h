/*
 * this file was generated by NunniFSMGen - do not edit!
 */


#ifndef NormalBehaviorState_H
#define NormalBehaviorState_H


#include "src/execution/behaviorplan/normal_behavior/include/BehaviorLogicError.h"
namespace acu{
namespace planning{



class NormalBehaviorFSM;


class NormalBehaviorState
{


    protected:
        NormalBehaviorState() {}


    public:
        virtual ~NormalBehaviorState() {}


    virtual void PathNoCollision( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
    virtual void CurvatureFault( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
    virtual void DeviationPath( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
    virtual void PathCollision( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
    virtual void AebEmergency( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
    virtual void SlowDownFinish( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
    virtual void NarrowTurnFinish( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
    virtual void NarrowTurnFault( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
    virtual void ForceAvoidFinish( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
    virtual void ForceAvoidFault( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
    virtual void DWAResultSuccess( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
    virtual void HybridAstarSuccess( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
    virtual void ForwardStayTimeOut( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
    virtual void BackStayTimeOut( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
    virtual void BackFollowingFinish( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
    virtual void ForwardAvoidFinish( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
    virtual void BackAvoidFinish( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
    virtual void YieldFinish( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
    virtual void BehaviorErrorFinish( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
    virtual void BehaviorReset( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
    virtual void NoThingToDo( NormalBehaviorFSM *ctx, void * o ) throw (BehaviorLogicError) = 0;
};


class NormalBehaviorIdleState : public NormalBehaviorState
{
    private:
        static NormalBehaviorIdleState *m_instance;


    private:
        NormalBehaviorIdleState();
        virtual ~NormalBehaviorIdleState();


    public:
        static NormalBehaviorIdleState* instance();


    virtual void PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
};


class NormalBehaviorForwardFollowingState : public NormalBehaviorState
{
    private:
        static NormalBehaviorForwardFollowingState *m_instance;


    private:
        NormalBehaviorForwardFollowingState();
        virtual ~NormalBehaviorForwardFollowingState();


    public:
        static NormalBehaviorForwardFollowingState* instance();


    virtual void PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
};


class NormalBehaviorSlowDownState : public NormalBehaviorState
{
    private:
        static NormalBehaviorSlowDownState *m_instance;


    private:
        NormalBehaviorSlowDownState();
        virtual ~NormalBehaviorSlowDownState();


    public:
        static NormalBehaviorSlowDownState* instance();


    virtual void PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
};


class NormalBehaviorBackFollowingState : public NormalBehaviorState
{
    private:
        static NormalBehaviorBackFollowingState *m_instance;


    private:
        NormalBehaviorBackFollowingState();
        virtual ~NormalBehaviorBackFollowingState();


    public:
        static NormalBehaviorBackFollowingState* instance();


    virtual void PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
};


class NormalBehaviorForwardAvoidState : public NormalBehaviorState
{
    private:
        static NormalBehaviorForwardAvoidState *m_instance;


    private:
        NormalBehaviorForwardAvoidState();
        virtual ~NormalBehaviorForwardAvoidState();


    public:
        static NormalBehaviorForwardAvoidState* instance();


    virtual void PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
};


class NormalBehaviorBackAvoidState : public NormalBehaviorState
{
    private:
        static NormalBehaviorBackAvoidState *m_instance;


    private:
        NormalBehaviorBackAvoidState();
        virtual ~NormalBehaviorBackAvoidState();


    public:
        static NormalBehaviorBackAvoidState* instance();


    virtual void PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
};


class NormalBehaviorForceAvoidState : public NormalBehaviorState
{
    private:
        static NormalBehaviorForceAvoidState *m_instance;


    private:
        NormalBehaviorForceAvoidState();
        virtual ~NormalBehaviorForceAvoidState();


    public:
        static NormalBehaviorForceAvoidState* instance();


    virtual void PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
};


class NormalBehaviorNarrowTurnState : public NormalBehaviorState
{
    private:
        static NormalBehaviorNarrowTurnState *m_instance;


    private:
        NormalBehaviorNarrowTurnState();
        virtual ~NormalBehaviorNarrowTurnState();


    public:
        static NormalBehaviorNarrowTurnState* instance();


    virtual void PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
};


class NormalBehaviorForwardStayStillState : public NormalBehaviorState
{
    private:
        static NormalBehaviorForwardStayStillState *m_instance;


    private:
        NormalBehaviorForwardStayStillState();
        virtual ~NormalBehaviorForwardStayStillState();


    public:
        static NormalBehaviorForwardStayStillState* instance();


    virtual void PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
};


class NormalBehaviorBackStayStillState : public NormalBehaviorState
{
    private:
        static NormalBehaviorBackStayStillState *m_instance;


    private:
        NormalBehaviorBackStayStillState();
        virtual ~NormalBehaviorBackStayStillState();


    public:
        static NormalBehaviorBackStayStillState* instance();


    virtual void PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
};


class NormalBehaviorBehaviorErrorState : public NormalBehaviorState
{
    private:
        static NormalBehaviorBehaviorErrorState *m_instance;


    private:
        NormalBehaviorBehaviorErrorState();
        virtual ~NormalBehaviorBehaviorErrorState();


    public:
        static NormalBehaviorBehaviorErrorState* instance();


    virtual void PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
    virtual void NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError);
};


}
}

#endif
