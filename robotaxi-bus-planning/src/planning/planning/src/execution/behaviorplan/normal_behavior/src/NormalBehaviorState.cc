/*
 * this file was generated by NunniFSMGen - do not edit!
 */


#include "src/execution/behaviorplan/normal_behavior/include/NormalBehaviorState.h"
#include "src/execution/behaviorplan/normal_behavior/include/NormalBehaviorFSM.h"
namespace acu{
namespace planning{





NormalBehaviorIdleState * NormalBehaviorIdleState::m_instance = 0;


NormalBehaviorIdleState::NormalBehaviorIdleState() {}


NormalBehaviorIdleState::~NormalBehaviorIdleState() {}


NormalBehaviorIdleState * NormalBehaviorIdleState::instance() {
    if ( m_instance == 0 )
        m_instance = new NormalBehaviorIdleState;
    return m_instance;
}


void NormalBehaviorIdleState::PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorIdleState::CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorIdleState::DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorIdleState::PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorIdleState::AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorIdleState::SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorIdleState::NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorIdleState::NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorIdleState::ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorIdleState::ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorIdleState::DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorIdleState::HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorIdleState::ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorIdleState::BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorIdleState::BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorIdleState::ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorIdleState::BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorIdleState::YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorIdleState::BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorIdleState::BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorIdleState::NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorForwardFollowingState::instance() );
}


NormalBehaviorForwardFollowingState * NormalBehaviorForwardFollowingState::m_instance = 0;


NormalBehaviorForwardFollowingState::NormalBehaviorForwardFollowingState() {}


NormalBehaviorForwardFollowingState::~NormalBehaviorForwardFollowingState() {}


NormalBehaviorForwardFollowingState * NormalBehaviorForwardFollowingState::instance() {
    if ( m_instance == 0 )
        m_instance = new NormalBehaviorForwardFollowingState;
    return m_instance;
}


void NormalBehaviorForwardFollowingState::PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardFollowingState::CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->NarrowTurnFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorNarrowTurnState::instance() );
}


void NormalBehaviorForwardFollowingState::DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorForceAvoidState::instance() );
}


void NormalBehaviorForwardFollowingState::PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->SlowDownFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorSlowDownState::instance() );
}


void NormalBehaviorForwardFollowingState::AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorBackStayStillState::instance() );
}


void NormalBehaviorForwardFollowingState::SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardFollowingState::NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardFollowingState::NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardFollowingState::ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardFollowingState::ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardFollowingState::DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardFollowingState::HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardFollowingState::ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardFollowingState::BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardFollowingState::BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardFollowingState::ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardFollowingState::BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardFollowingState::YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardFollowingState::BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardFollowingState::BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorIdleState::instance() );
}


void NormalBehaviorForwardFollowingState::NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


NormalBehaviorSlowDownState * NormalBehaviorSlowDownState::m_instance = 0;


NormalBehaviorSlowDownState::NormalBehaviorSlowDownState() {}


NormalBehaviorSlowDownState::~NormalBehaviorSlowDownState() {}


NormalBehaviorSlowDownState * NormalBehaviorSlowDownState::instance() {
    if ( m_instance == 0 )
        m_instance = new NormalBehaviorSlowDownState;
    return m_instance;
}


void NormalBehaviorSlowDownState::PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorForwardFollowingState::instance() );
}


void NormalBehaviorSlowDownState::CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->SlowDownFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorSlowDownState::DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorForceAvoidState::instance() );
}


void NormalBehaviorSlowDownState::PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->SlowDownFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorSlowDownState::AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorBackStayStillState::instance() );
}


void NormalBehaviorSlowDownState::SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorForwardStayStillState::instance() );
}


void NormalBehaviorSlowDownState::NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->SlowDownFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorSlowDownState::NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->SlowDownFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorSlowDownState::ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->SlowDownFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorSlowDownState::ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->SlowDownFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorSlowDownState::DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorForwardAvoidState::instance() );
}


void NormalBehaviorSlowDownState::HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->SlowDownFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorSlowDownState::ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->SlowDownFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorSlowDownState::BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->SlowDownFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorSlowDownState::BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->SlowDownFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorSlowDownState::ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->SlowDownFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorSlowDownState::BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->SlowDownFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorSlowDownState::YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->SlowDownFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorSlowDownState::BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->SlowDownFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorSlowDownState::BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorIdleState::instance() );
}


void NormalBehaviorSlowDownState::NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->SlowDownFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


NormalBehaviorBackFollowingState * NormalBehaviorBackFollowingState::m_instance = 0;


NormalBehaviorBackFollowingState::NormalBehaviorBackFollowingState() {}


NormalBehaviorBackFollowingState::~NormalBehaviorBackFollowingState() {}


NormalBehaviorBackFollowingState * NormalBehaviorBackFollowingState::instance() {
    if ( m_instance == 0 )
        m_instance = new NormalBehaviorBackFollowingState;
    return m_instance;
}


void NormalBehaviorBackFollowingState::PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorForwardFollowingState::instance() );
}


void NormalBehaviorBackFollowingState::CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackFollowingState::DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorForceAvoidState::instance() );
}


void NormalBehaviorBackFollowingState::PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackFollowingState::AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackFollowingState::SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackFollowingState::NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackFollowingState::NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackFollowingState::ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackFollowingState::ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackFollowingState::DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorForwardAvoidState::instance() );
}


void NormalBehaviorBackFollowingState::HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackFollowingState::ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackFollowingState::BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackFollowingState::BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorBackStayStillState::instance() );
}


void NormalBehaviorBackFollowingState::ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackFollowingState::BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackFollowingState::YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackFollowingState::BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackFollowingState::BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorIdleState::instance() );
}


void NormalBehaviorBackFollowingState::NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


NormalBehaviorForwardAvoidState * NormalBehaviorForwardAvoidState::m_instance = 0;


NormalBehaviorForwardAvoidState::NormalBehaviorForwardAvoidState() {}


NormalBehaviorForwardAvoidState::~NormalBehaviorForwardAvoidState() {}


NormalBehaviorForwardAvoidState * NormalBehaviorForwardAvoidState::instance() {
    if ( m_instance == 0 )
        m_instance = new NormalBehaviorForwardAvoidState;
    return m_instance;
}


void NormalBehaviorForwardAvoidState::PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardAvoidState::CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardAvoidState::DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorForceAvoidState::instance() );
}


void NormalBehaviorForwardAvoidState::PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->SlowDownFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorSlowDownState::instance() );
}


void NormalBehaviorForwardAvoidState::AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardAvoidState::SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardAvoidState::NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardAvoidState::NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardAvoidState::ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardAvoidState::ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardAvoidState::DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardAvoidState::HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardAvoidState::ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardAvoidState::BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardAvoidState::BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardAvoidState::ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorForwardFollowingState::instance() );
}


void NormalBehaviorForwardAvoidState::BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardAvoidState::YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardAvoidState::BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardAvoidState::BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorIdleState::instance() );
}


void NormalBehaviorForwardAvoidState::NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


NormalBehaviorBackAvoidState * NormalBehaviorBackAvoidState::m_instance = 0;


NormalBehaviorBackAvoidState::NormalBehaviorBackAvoidState() {}


NormalBehaviorBackAvoidState::~NormalBehaviorBackAvoidState() {}


NormalBehaviorBackAvoidState * NormalBehaviorBackAvoidState::instance() {
    if ( m_instance == 0 )
        m_instance = new NormalBehaviorBackAvoidState;
    return m_instance;
}


void NormalBehaviorBackAvoidState::PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackAvoidState::CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackAvoidState::DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorBackStayStillState::instance() );
}


void NormalBehaviorBackAvoidState::PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorBackStayStillState::instance() );
}


void NormalBehaviorBackAvoidState::AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackAvoidState::SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackAvoidState::NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackAvoidState::NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackAvoidState::ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackAvoidState::ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackAvoidState::DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackAvoidState::HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackAvoidState::ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackAvoidState::BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackAvoidState::BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackAvoidState::ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackAvoidState::BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorForwardFollowingState::instance() );
}


void NormalBehaviorBackAvoidState::YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackAvoidState::BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackAvoidState::BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorIdleState::instance() );
}


void NormalBehaviorBackAvoidState::NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


NormalBehaviorForceAvoidState * NormalBehaviorForceAvoidState::m_instance = 0;


NormalBehaviorForceAvoidState::NormalBehaviorForceAvoidState() {}


NormalBehaviorForceAvoidState::~NormalBehaviorForceAvoidState() {}


NormalBehaviorForceAvoidState * NormalBehaviorForceAvoidState::instance() {
    if ( m_instance == 0 )
        m_instance = new NormalBehaviorForceAvoidState;
    return m_instance;
}


void NormalBehaviorForceAvoidState::PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForceAvoidState::CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForceAvoidState::DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForceAvoidState::PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->SlowDownFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorSlowDownState::instance() );
}


void NormalBehaviorForceAvoidState::AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForceAvoidState::SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForceAvoidState::NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForceAvoidState::NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForceAvoidState::ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorForwardFollowingState::instance() );
}


void NormalBehaviorForceAvoidState::ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorBackStayStillState::instance() );
}


void NormalBehaviorForceAvoidState::DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForceAvoidState::HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForceAvoidState::ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForceAvoidState::BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForceAvoidState::BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForceAvoidState::ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForceAvoidState::BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForceAvoidState::YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForceAvoidState::BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForceAvoidState::BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorIdleState::instance() );
}


void NormalBehaviorForceAvoidState::NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


NormalBehaviorNarrowTurnState * NormalBehaviorNarrowTurnState::m_instance = 0;


NormalBehaviorNarrowTurnState::NormalBehaviorNarrowTurnState() {}


NormalBehaviorNarrowTurnState::~NormalBehaviorNarrowTurnState() {}


NormalBehaviorNarrowTurnState * NormalBehaviorNarrowTurnState::instance() {
    if ( m_instance == 0 )
        m_instance = new NormalBehaviorNarrowTurnState;
    return m_instance;
}


void NormalBehaviorNarrowTurnState::PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->NarrowTurnFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorNarrowTurnState::CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->NarrowTurnFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorNarrowTurnState::DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->NarrowTurnFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorNarrowTurnState::PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorBackStayStillState::instance() );
}


void NormalBehaviorNarrowTurnState::AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->NarrowTurnFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorNarrowTurnState::SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->NarrowTurnFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorNarrowTurnState::NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorForwardFollowingState::instance() );
}


void NormalBehaviorNarrowTurnState::NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorBackStayStillState::instance() );
}


void NormalBehaviorNarrowTurnState::ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->NarrowTurnFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorNarrowTurnState::ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->NarrowTurnFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorNarrowTurnState::DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->NarrowTurnFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorNarrowTurnState::HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->NarrowTurnFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorNarrowTurnState::ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->NarrowTurnFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorNarrowTurnState::BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->NarrowTurnFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorNarrowTurnState::BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->NarrowTurnFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorNarrowTurnState::ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->NarrowTurnFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorNarrowTurnState::BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->NarrowTurnFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorNarrowTurnState::YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->NarrowTurnFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorNarrowTurnState::BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->NarrowTurnFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorNarrowTurnState::BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorIdleState::instance() );
}


void NormalBehaviorNarrowTurnState::NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->NarrowTurnFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


NormalBehaviorForwardStayStillState * NormalBehaviorForwardStayStillState::m_instance = 0;


NormalBehaviorForwardStayStillState::NormalBehaviorForwardStayStillState() {}


NormalBehaviorForwardStayStillState::~NormalBehaviorForwardStayStillState() {}


NormalBehaviorForwardStayStillState * NormalBehaviorForwardStayStillState::instance() {
    if ( m_instance == 0 )
        m_instance = new NormalBehaviorForwardStayStillState;
    return m_instance;
}


void NormalBehaviorForwardStayStillState::PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorForwardFollowingState::instance() );
}


void NormalBehaviorForwardStayStillState::CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardStayStillState::DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForceAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorForceAvoidState::instance() );
}


void NormalBehaviorForwardStayStillState::PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardStayStillState::AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardStayStillState::SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardStayStillState::NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardStayStillState::NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardStayStillState::ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardStayStillState::ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardStayStillState::DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorForwardAvoidState::instance() );
}


void NormalBehaviorForwardStayStillState::HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardStayStillState::ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorBackFollowingState::instance() );
}


void NormalBehaviorForwardStayStillState::BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardStayStillState::BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardStayStillState::ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardStayStillState::BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardStayStillState::YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardStayStillState::BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorForwardStayStillState::BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorIdleState::instance() );
}


void NormalBehaviorForwardStayStillState::NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


NormalBehaviorBackStayStillState * NormalBehaviorBackStayStillState::m_instance = 0;


NormalBehaviorBackStayStillState::NormalBehaviorBackStayStillState() {}


NormalBehaviorBackStayStillState::~NormalBehaviorBackStayStillState() {}


NormalBehaviorBackStayStillState * NormalBehaviorBackStayStillState::instance() {
    if ( m_instance == 0 )
        m_instance = new NormalBehaviorBackStayStillState;
    return m_instance;
}


void NormalBehaviorBackStayStillState::PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardFollowingFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorForwardFollowingState::instance() );
}


void NormalBehaviorBackStayStillState::CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackStayStillState::DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackStayStillState::PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackStayStillState::AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackStayStillState::SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackStayStillState::NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackStayStillState::NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackStayStillState::ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackStayStillState::ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackStayStillState::DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->ForwardAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorForwardAvoidState::instance() );
}


void NormalBehaviorBackStayStillState::HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackAvoidFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorBackAvoidState::instance() );
}


void NormalBehaviorBackStayStillState::ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackStayStillState::BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
}


void NormalBehaviorBackStayStillState::BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackStayStillState::ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackStayStillState::BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackStayStillState::YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackStayStillState::BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBackStayStillState::BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorIdleState::instance() );
}


void NormalBehaviorBackStayStillState::NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BackStayStillFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


NormalBehaviorBehaviorErrorState * NormalBehaviorBehaviorErrorState::m_instance = 0;


NormalBehaviorBehaviorErrorState::NormalBehaviorBehaviorErrorState() {}


NormalBehaviorBehaviorErrorState::~NormalBehaviorBehaviorErrorState() {}


NormalBehaviorBehaviorErrorState * NormalBehaviorBehaviorErrorState::instance() {
    if ( m_instance == 0 )
        m_instance = new NormalBehaviorBehaviorErrorState;
    return m_instance;
}


void NormalBehaviorBehaviorErrorState::PathNoCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBehaviorErrorState::CurvatureFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBehaviorErrorState::DeviationPath( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBehaviorErrorState::PathCollision( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBehaviorErrorState::AebEmergency( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBehaviorErrorState::SlowDownFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBehaviorErrorState::NarrowTurnFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBehaviorErrorState::NarrowTurnFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBehaviorErrorState::ForceAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBehaviorErrorState::ForceAvoidFault( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBehaviorErrorState::DWAResultSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBehaviorErrorState::HybridAstarSuccess( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBehaviorErrorState::ForwardStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBehaviorErrorState::BackStayTimeOut( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBehaviorErrorState::BackFollowingFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBehaviorErrorState::ForwardAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBehaviorErrorState::BackAvoidFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBehaviorErrorState::YieldFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBehaviorErrorState::BehaviorErrorFinish( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}


void NormalBehaviorBehaviorErrorState::BehaviorReset( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->IdleFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
        ctx->changeState( NormalBehaviorIdleState::instance() );
}


void NormalBehaviorBehaviorErrorState::NoThingToDo( NormalBehaviorFSM *ctx,  void * o ) throw (BehaviorLogicError) {
    try {
        ctx->BehaviorErrorFunc( o );
    }
    catch( BehaviorLogicError &e ) {
        ctx->changeState( NormalBehaviorBehaviorErrorState::instance() );
        throw;
    }
}
}
}

