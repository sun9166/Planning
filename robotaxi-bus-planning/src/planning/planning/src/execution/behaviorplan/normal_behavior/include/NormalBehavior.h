/*
 * this file was generated by NunniFSMGen
 */


#ifndef NormalBehavior_H
#define NormalBehavior_H


#include "src/execution/behaviorplan/normal_behavior/include/BehaviorLogicError.h"
#include "src/algorithm/interface/dummy/include/dummy_algorithm.h"
#include "datapool/include/common_typedef.h"
#include "common/base/thread_pool/include/thread_pool.h"
namespace acu{
namespace planning{



class NormalBehavior
{
    public:
        virtual void PathNoCollision( void * o ) throw (BehaviorLogicError) = 0;
        virtual void CurvatureFault( void * o ) throw (BehaviorLogicError) = 0;
        virtual void DeviationPath( void * o ) throw (BehaviorLogicError) = 0;
        virtual void PathCollision( void * o ) throw (BehaviorLogicError) = 0;
        virtual void AebEmergency( void * o ) throw (BehaviorLogicError) = 0;
        virtual void SlowDownFinish( void * o ) throw (BehaviorLogicError) = 0;
        virtual void NarrowTurnFinish( void * o ) throw (BehaviorLogicError) = 0;
        virtual void NarrowTurnFault( void * o ) throw (BehaviorLogicError) = 0;
        virtual void ForceAvoidFinish( void * o ) throw (BehaviorLogicError) = 0;
        virtual void ForceAvoidFault( void * o ) throw (BehaviorLogicError) = 0;
        virtual void DWAResultSuccess( void * o ) throw (BehaviorLogicError) = 0;
        virtual void HybridAstarSuccess( void * o ) throw (BehaviorLogicError) = 0;
        virtual void ForwardStayTimeOut( void * o ) throw (BehaviorLogicError) = 0;
        virtual void BackStayTimeOut( void * o ) throw (BehaviorLogicError) = 0;
        virtual void BackFollowingFinish( void * o ) throw (BehaviorLogicError) = 0;
        virtual void ForwardAvoidFinish( void * o ) throw (BehaviorLogicError) = 0;
        virtual void BackAvoidFinish( void * o ) throw (BehaviorLogicError) = 0;
        virtual void YieldFinish( void * o ) throw (BehaviorLogicError) = 0;
        virtual void BehaviorErrorFinish( void * o ) throw (BehaviorLogicError) = 0;
        virtual void BehaviorReset( void * o ) throw (BehaviorLogicError) = 0;
        virtual void NoThingToDo( void * o ) throw (BehaviorLogicError) = 0;


    protected:
        NormalBehavior();
        NormalBehavior( void *o );


    public:
        virtual ~NormalBehavior();


    public:
        bool IdleFunc( void * o ) throw (BehaviorLogicError);
        bool ForwardFollowingFunc( void * o ) throw (BehaviorLogicError);
        bool NarrowTurnFunc( void * o ) throw (BehaviorLogicError);
        bool ForceAvoidFunc( void * o ) throw (BehaviorLogicError);
        bool SlowDownFunc( void * o ) throw (BehaviorLogicError);
        bool BackStayStillFunc( void * o ) throw (BehaviorLogicError);
        bool ForwardStayStillFunc( void * o ) throw (BehaviorLogicError);
        bool ForwardAvoidFunc( void * o ) throw (BehaviorLogicError);
        bool BackFollowingFunc( void * o ) throw (BehaviorLogicError);
        bool BackAvoidFunc( void * o ) throw (BehaviorLogicError);
        bool BehaviorErrorFunc( void * o ) throw (BehaviorLogicError);

        eCheckAlgthmResult CheckThreadResult(eComputeThreadType type_detect);
        bool RunDwaInThread();
        bool RunAstarInThread();
        eComputeResult CheckDwaAvoidInThread(PathData &new_path, DebugPlanningMsg &debug_msg);
        eComputeResult CheckAstarAvoidInThread(PathData &new_path, DebugPlanningMsg &debug_msg);

};


}
}

#endif
