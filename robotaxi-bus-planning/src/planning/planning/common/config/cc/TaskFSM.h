/*
 * this file was generated by NunniFSMGen - do not edit!
 */


#ifndef TaskFSM_H
#define TaskFSM_H


#include "Task.h"
namespace acu{
namespace planning{



class TaskState;


class TaskFSM : public Task
{
    private:
        TaskState *m_state;


    private:
        TaskFSM();


    public:
        TaskFSM( void *o );
        virtual ~TaskFSM();


    public:
        void changeState( TaskState *newState );
        virtual void TaskIsNew( void * o ) throw (LogicError);
        virtual void TaskExecutable( void * o ) throw (LogicError);
        virtual void TaskUnexecutable( void * o ) throw (LogicError);
        virtual void TaskExecuteOver( void * o ) throw (LogicError);
        virtual void TaskExecuteFault( void * o ) throw (LogicError);
        virtual void TaskOver( void * o ) throw (LogicError);
        virtual void TaskAborted( void * o ) throw (LogicError);
        virtual void TaskSuspended( void * o ) throw (LogicError);
        virtual void TaskContinued( void * o ) throw (LogicError);
        virtual void SyetemException( void * o ) throw (LogicError);
        virtual void SyetemNormal( void * o ) throw (LogicError);
        virtual void BtnEmergencyPressed( void * o ) throw (LogicError);
        virtual void BtnEmergencyUnpressed( void * o ) throw (LogicError);
        virtual void RemoteCtrlConnected( void * o ) throw (LogicError);
        virtual void RemoteCtrlUnconnected( void * o ) throw (LogicError);
        virtual void EndTaskHandleOver( void * o ) throw (LogicError);
};


}
}

#endif
