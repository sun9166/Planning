// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: can_protocol.proto

#include "can_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace acu {
namespace common {
namespace util {
class SignalsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signals>
      _instance;
} _Signals_default_instance_;
class CanFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CanFrame>
      _instance;
} _CanFrame_default_instance_;
class CanProtocolDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CanProtocol>
      _instance;
} _CanProtocol_default_instance_;
}  // namespace util
}  // namespace common
}  // namespace acu
namespace protobuf_can_5fprotocol_2eproto {
void InitDefaultsSignalsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::common::util::_Signals_default_instance_;
    new (ptr) ::acu::common::util::Signals();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::util::Signals::InitAsDefaultInstance();
}

void InitDefaultsSignals() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSignalsImpl);
}

void InitDefaultsCanFrameImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_can_5fprotocol_2eproto::InitDefaultsSignals();
  {
    void* ptr = &::acu::common::util::_CanFrame_default_instance_;
    new (ptr) ::acu::common::util::CanFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::util::CanFrame::InitAsDefaultInstance();
}

void InitDefaultsCanFrame() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCanFrameImpl);
}

void InitDefaultsCanProtocolImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_can_5fprotocol_2eproto::InitDefaultsCanFrame();
  {
    void* ptr = &::acu::common::util::_CanProtocol_default_instance_;
    new (ptr) ::acu::common::util::CanProtocol();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::util::CanProtocol::InitAsDefaultInstance();
}

void InitDefaultsCanProtocol() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCanProtocolImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::util::Signals, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::util::Signals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::util::Signals, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::util::Signals, start_bit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::util::Signals, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::util::Signals, factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::util::Signals, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::util::Signals, value_),
  0,
  1,
  2,
  5,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::util::CanFrame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::util::CanFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::util::CanFrame, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::util::CanFrame, signal_params_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::util::CanProtocol, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::util::CanProtocol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::util::CanProtocol, can_frame_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::acu::common::util::Signals)},
  { 17, 24, sizeof(::acu::common::util::CanFrame)},
  { 26, 32, sizeof(::acu::common::util::CanProtocol)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::util::_Signals_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::util::_CanFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::util::_CanProtocol_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "can_protocol.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022can_protocol.proto\022\017acu.common.util\"r\n"
      "\007Signals\022\014\n\004name\030\001 \002(\t\022\021\n\tstart_bit\030\002 \002("
      "\r\022\016\n\006length\030\003 \002(\r\022\021\n\006factor\030\004 \001(\002:\0011\022\021\n\006"
      "offset\030\005 \001(\002:\0010\022\020\n\005value\030\006 \001(\005:\0010\"G\n\010Can"
      "Frame\022\n\n\002id\030\001 \002(\r\022/\n\rsignal_params\030\002 \003(\013"
      "2\030.acu.common.util.Signals\";\n\013CanProtoco"
      "l\022,\n\tcan_frame\030\001 \003(\0132\031.acu.common.util.C"
      "anFrame"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 287);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "can_protocol.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_can_5fprotocol_2eproto
namespace acu {
namespace common {
namespace util {

// ===================================================================

void Signals::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signals::kNameFieldNumber;
const int Signals::kStartBitFieldNumber;
const int Signals::kLengthFieldNumber;
const int Signals::kFactorFieldNumber;
const int Signals::kOffsetFieldNumber;
const int Signals::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signals::Signals()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_can_5fprotocol_2eproto::InitDefaultsSignals();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.util.Signals)
}
Signals::Signals(const Signals& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&start_bit_, &from.start_bit_,
    static_cast<size_t>(reinterpret_cast<char*>(&factor_) -
    reinterpret_cast<char*>(&start_bit_)) + sizeof(factor_));
  // @@protoc_insertion_point(copy_constructor:acu.common.util.Signals)
}

void Signals::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_bit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&start_bit_)) + sizeof(value_));
  factor_ = 1;
}

Signals::~Signals() {
  // @@protoc_insertion_point(destructor:acu.common.util.Signals)
  SharedDtor();
}

void Signals::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Signals::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signals::descriptor() {
  ::protobuf_can_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_can_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Signals& Signals::default_instance() {
  ::protobuf_can_5fprotocol_2eproto::InitDefaultsSignals();
  return *internal_default_instance();
}

Signals* Signals::New(::google::protobuf::Arena* arena) const {
  Signals* n = new Signals;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signals::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.util.Signals)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 62u) {
    ::memset(&start_bit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&start_bit_)) + sizeof(value_));
    factor_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Signals::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.util.Signals)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acu.common.util.Signals.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 start_bit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_start_bit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_bit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float factor = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float offset = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 value = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.util.Signals)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.util.Signals)
  return false;
#undef DO_
}

void Signals::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.util.Signals)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.common.util.Signals.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 start_bit = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_bit(), output);
  }

  // required uint32 length = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->length(), output);
  }

  // optional float factor = 4 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->factor(), output);
  }

  // optional float offset = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->offset(), output);
  }

  // optional int32 value = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.util.Signals)
}

::google::protobuf::uint8* Signals::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.util.Signals)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.common.util.Signals.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 start_bit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_bit(), target);
  }

  // required uint32 length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->length(), target);
  }

  // optional float factor = 4 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->factor(), target);
  }

  // optional float offset = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->offset(), target);
  }

  // optional int32 value = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.util.Signals)
  return target;
}

size_t Signals::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:acu.common.util.Signals)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_start_bit()) {
    // required uint32 start_bit = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_bit());
  }

  if (has_length()) {
    // required uint32 length = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  return total_size;
}
size_t Signals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.util.Signals)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 start_bit = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_bit());

    // required uint32 length = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 56u) {
    // optional float offset = 5 [default = 0];
    if (has_offset()) {
      total_size += 1 + 4;
    }

    // optional int32 value = 6 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional float factor = 4 [default = 1];
    if (has_factor()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signals::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.util.Signals)
  GOOGLE_DCHECK_NE(&from, this);
  const Signals* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signals>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.util.Signals)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.util.Signals)
    MergeFrom(*source);
  }
}

void Signals::MergeFrom(const Signals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.util.Signals)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      start_bit_ = from.start_bit_;
    }
    if (cached_has_bits & 0x00000004u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000010u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000020u) {
      factor_ = from.factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Signals::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.util.Signals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signals::CopyFrom(const Signals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.util.Signals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signals::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Signals::Swap(Signals* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signals::InternalSwap(Signals* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(start_bit_, other->start_bit_);
  swap(length_, other->length_);
  swap(offset_, other->offset_);
  swap(value_, other->value_);
  swap(factor_, other->factor_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Signals::GetMetadata() const {
  protobuf_can_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_can_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CanFrame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CanFrame::kIdFieldNumber;
const int CanFrame::kSignalParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CanFrame::CanFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_can_5fprotocol_2eproto::InitDefaultsCanFrame();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.util.CanFrame)
}
CanFrame::CanFrame(const CanFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      signal_params_(from.signal_params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:acu.common.util.CanFrame)
}

void CanFrame::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
}

CanFrame::~CanFrame() {
  // @@protoc_insertion_point(destructor:acu.common.util.CanFrame)
  SharedDtor();
}

void CanFrame::SharedDtor() {
}

void CanFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CanFrame::descriptor() {
  ::protobuf_can_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_can_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CanFrame& CanFrame::default_instance() {
  ::protobuf_can_5fprotocol_2eproto::InitDefaultsCanFrame();
  return *internal_default_instance();
}

CanFrame* CanFrame::New(::google::protobuf::Arena* arena) const {
  CanFrame* n = new CanFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CanFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.util.CanFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signal_params_.Clear();
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CanFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.util.CanFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.common.util.Signals signal_params = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_signal_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.util.CanFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.util.CanFrame)
  return false;
#undef DO_
}

void CanFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.util.CanFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .acu.common.util.Signals signal_params = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signal_params_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signal_params(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.util.CanFrame)
}

::google::protobuf::uint8* CanFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.util.CanFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .acu.common.util.Signals signal_params = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signal_params_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->signal_params(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.util.CanFrame)
  return target;
}

size_t CanFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.util.CanFrame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // repeated .acu.common.util.Signals signal_params = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->signal_params_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->signal_params(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CanFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.util.CanFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const CanFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CanFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.util.CanFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.util.CanFrame)
    MergeFrom(*source);
  }
}

void CanFrame::MergeFrom(const CanFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.util.CanFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_params_.MergeFrom(from.signal_params_);
  if (from.has_id()) {
    set_id(from.id());
  }
}

void CanFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.util.CanFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanFrame::CopyFrom(const CanFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.util.CanFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->signal_params())) return false;
  return true;
}

void CanFrame::Swap(CanFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CanFrame::InternalSwap(CanFrame* other) {
  using std::swap;
  signal_params_.InternalSwap(&other->signal_params_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CanFrame::GetMetadata() const {
  protobuf_can_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_can_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CanProtocol::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CanProtocol::kCanFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CanProtocol::CanProtocol()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_can_5fprotocol_2eproto::InitDefaultsCanProtocol();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.util.CanProtocol)
}
CanProtocol::CanProtocol(const CanProtocol& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      can_frame_(from.can_frame_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:acu.common.util.CanProtocol)
}

void CanProtocol::SharedCtor() {
  _cached_size_ = 0;
}

CanProtocol::~CanProtocol() {
  // @@protoc_insertion_point(destructor:acu.common.util.CanProtocol)
  SharedDtor();
}

void CanProtocol::SharedDtor() {
}

void CanProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CanProtocol::descriptor() {
  ::protobuf_can_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_can_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CanProtocol& CanProtocol::default_instance() {
  ::protobuf_can_5fprotocol_2eproto::InitDefaultsCanProtocol();
  return *internal_default_instance();
}

CanProtocol* CanProtocol::New(::google::protobuf::Arena* arena) const {
  CanProtocol* n = new CanProtocol;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CanProtocol::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.util.CanProtocol)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  can_frame_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CanProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.util.CanProtocol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .acu.common.util.CanFrame can_frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_can_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.util.CanProtocol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.util.CanProtocol)
  return false;
#undef DO_
}

void CanProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.util.CanProtocol)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .acu.common.util.CanFrame can_frame = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->can_frame_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->can_frame(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.util.CanProtocol)
}

::google::protobuf::uint8* CanProtocol::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.util.CanProtocol)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .acu.common.util.CanFrame can_frame = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->can_frame_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->can_frame(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.util.CanProtocol)
  return target;
}

size_t CanProtocol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.util.CanProtocol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.common.util.CanFrame can_frame = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->can_frame_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->can_frame(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CanProtocol::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.util.CanProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  const CanProtocol* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CanProtocol>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.util.CanProtocol)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.util.CanProtocol)
    MergeFrom(*source);
  }
}

void CanProtocol::MergeFrom(const CanProtocol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.util.CanProtocol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  can_frame_.MergeFrom(from.can_frame_);
}

void CanProtocol::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.util.CanProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanProtocol::CopyFrom(const CanProtocol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.util.CanProtocol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanProtocol::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->can_frame())) return false;
  return true;
}

void CanProtocol::Swap(CanProtocol* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CanProtocol::InternalSwap(CanProtocol* other) {
  using std::swap;
  can_frame_.InternalSwap(&other->can_frame_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CanProtocol::GetMetadata() const {
  protobuf_can_5fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_can_5fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace util
}  // namespace common
}  // namespace acu

// @@protoc_insertion_point(global_scope)
