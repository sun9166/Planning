// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pnc_point.proto

#include "pnc_point.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace acu {
namespace common {
class SLPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SLPoint>
      _instance;
} _SLPoint_default_instance_;
class FrenetFramePointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrenetFramePoint>
      _instance;
} _FrenetFramePoint_default_instance_;
class SpeedPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedPoint>
      _instance;
} _SpeedPoint_default_instance_;
class PathPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathPoint>
      _instance;
} _PathPoint_default_instance_;
class PathDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Path>
      _instance;
} _Path_default_instance_;
class TrajectoryPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryPoint>
      _instance;
} _TrajectoryPoint_default_instance_;
class GaussianInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GaussianInfo>
      _instance;
} _GaussianInfo_default_instance_;
}  // namespace common
}  // namespace acu
namespace protobuf_pnc_5fpoint_2eproto {
void InitDefaultsSLPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::common::_SLPoint_default_instance_;
    new (ptr) ::acu::common::SLPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::SLPoint::InitAsDefaultInstance();
}

void InitDefaultsSLPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSLPointImpl);
}

void InitDefaultsFrenetFramePointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::common::_FrenetFramePoint_default_instance_;
    new (ptr) ::acu::common::FrenetFramePoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::FrenetFramePoint::InitAsDefaultInstance();
}

void InitDefaultsFrenetFramePoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFrenetFramePointImpl);
}

void InitDefaultsSpeedPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::common::_SpeedPoint_default_instance_;
    new (ptr) ::acu::common::SpeedPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::SpeedPoint::InitAsDefaultInstance();
}

void InitDefaultsSpeedPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpeedPointImpl);
}

void InitDefaultsPathPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::common::_PathPoint_default_instance_;
    new (ptr) ::acu::common::PathPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::PathPoint::InitAsDefaultInstance();
}

void InitDefaultsPathPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPathPointImpl);
}

void InitDefaultsPathImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_pnc_5fpoint_2eproto::InitDefaultsPathPoint();
  {
    void* ptr = &::acu::common::_Path_default_instance_;
    new (ptr) ::acu::common::Path();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::Path::InitAsDefaultInstance();
}

void InitDefaultsPath() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPathImpl);
}

void InitDefaultsTrajectoryPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_pnc_5fpoint_2eproto::InitDefaultsPathPoint();
  protobuf_pnc_5fpoint_2eproto::InitDefaultsGaussianInfo();
  {
    void* ptr = &::acu::common::_TrajectoryPoint_default_instance_;
    new (ptr) ::acu::common::TrajectoryPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::TrajectoryPoint::InitAsDefaultInstance();
}

void InitDefaultsTrajectoryPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrajectoryPointImpl);
}

void InitDefaultsGaussianInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::common::_GaussianInfo_default_instance_;
    new (ptr) ::acu::common::GaussianInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::GaussianInfo::InitAsDefaultInstance();
}

void InitDefaultsGaussianInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGaussianInfoImpl);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::SLPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::SLPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::SLPoint, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::SLPoint, l_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::FrenetFramePoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::FrenetFramePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::FrenetFramePoint, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::FrenetFramePoint, l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::FrenetFramePoint, dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::FrenetFramePoint, ddl_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::SpeedPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::SpeedPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::SpeedPoint, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::SpeedPoint, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::SpeedPoint, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::SpeedPoint, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::SpeedPoint, da_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PathPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PathPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PathPoint, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PathPoint, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PathPoint, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PathPoint, dr_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PathPoint, dr_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PathPoint, dr_theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PathPoint, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PathPoint, kappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PathPoint, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PathPoint, dkappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PathPoint, ddkappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PathPoint, lane_id_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Path, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Path, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Path, path_point_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::TrajectoryPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::TrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::TrajectoryPoint, path_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::TrajectoryPoint, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::TrajectoryPoint, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::TrajectoryPoint, relative_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::TrajectoryPoint, da_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::TrajectoryPoint, steer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::TrajectoryPoint, gaussian_info_),
  0,
  2,
  3,
  4,
  5,
  6,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::GaussianInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::GaussianInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::GaussianInfo, sigma_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::GaussianInfo, sigma_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::GaussianInfo, correlation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::GaussianInfo, area_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::GaussianInfo, ellipse_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::GaussianInfo, ellipse_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::GaussianInfo, theta_a_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::acu::common::SLPoint)},
  { 9, 18, sizeof(::acu::common::FrenetFramePoint)},
  { 22, 32, sizeof(::acu::common::SpeedPoint)},
  { 37, 54, sizeof(::acu::common::PathPoint)},
  { 66, 73, sizeof(::acu::common::Path)},
  { 75, 87, sizeof(::acu::common::TrajectoryPoint)},
  { 94, 106, sizeof(::acu::common::GaussianInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_SLPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_FrenetFramePoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_SpeedPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_PathPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_Path_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_TrajectoryPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_GaussianInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "pnc_point.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017pnc_point.proto\022\nacu.common\"\037\n\007SLPoint"
      "\022\t\n\001s\030\001 \001(\001\022\t\n\001l\030\002 \001(\001\"A\n\020FrenetFramePoi"
      "nt\022\t\n\001s\030\001 \001(\001\022\t\n\001l\030\002 \001(\001\022\n\n\002dl\030\003 \001(\001\022\013\n\003"
      "ddl\030\004 \001(\001\"D\n\nSpeedPoint\022\t\n\001s\030\001 \001(\001\022\t\n\001t\030"
      "\002 \001(\001\022\t\n\001v\030\003 \001(\001\022\t\n\001a\030\004 \001(\001\022\n\n\002da\030\005 \001(\001\""
      "\265\001\n\tPathPoint\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z"
      "\030\003 \001(\001\022\014\n\004dr_x\030\004 \001(\001\022\014\n\004dr_y\030\005 \001(\001\022\020\n\010dr"
      "_theta\030\006 \001(\001\022\r\n\005theta\030\007 \001(\001\022\r\n\005kappa\030\010 \001"
      "(\001\022\t\n\001s\030\t \001(\001\022\016\n\006dkappa\030\n \001(\001\022\017\n\007ddkappa"
      "\030\013 \001(\001\022\017\n\007lane_id\030\014 \001(\t\"\?\n\004Path\022\014\n\004name\030"
      "\001 \001(\t\022)\n\npath_point\030\002 \003(\0132\025.acu.common.P"
      "athPoint\"\265\001\n\017TrajectoryPoint\022)\n\npath_poi"
      "nt\030\001 \001(\0132\025.acu.common.PathPoint\022\t\n\001v\030\002 \001"
      "(\001\022\t\n\001a\030\003 \001(\001\022\025\n\rrelative_time\030\004 \001(\001\022\n\n\002"
      "da\030\005 \001(\001\022\r\n\005steer\030\006 \001(\001\022/\n\rgaussian_info"
      "\030\007 \001(\0132\030.acu.common.GaussianInfo\"\226\001\n\014Gau"
      "ssianInfo\022\017\n\007sigma_x\030\001 \001(\001\022\017\n\007sigma_y\030\002 "
      "\001(\001\022\023\n\013correlation\030\003 \001(\001\022\030\n\020area_probabi"
      "lity\030\004 \001(\001\022\021\n\tellipse_a\030\005 \001(\001\022\021\n\tellipse"
      "_b\030\006 \001(\001\022\017\n\007theta_a\030\007 \001(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 785);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pnc_point.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_pnc_5fpoint_2eproto
namespace acu {
namespace common {

// ===================================================================

void SLPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLPoint::kSFieldNumber;
const int SLPoint::kLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLPoint::SLPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pnc_5fpoint_2eproto::InitDefaultsSLPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.SLPoint)
}
SLPoint::SLPoint(const SLPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&l_) -
    reinterpret_cast<char*>(&s_)) + sizeof(l_));
  // @@protoc_insertion_point(copy_constructor:acu.common.SLPoint)
}

void SLPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&l_) -
      reinterpret_cast<char*>(&s_)) + sizeof(l_));
}

SLPoint::~SLPoint() {
  // @@protoc_insertion_point(destructor:acu.common.SLPoint)
  SharedDtor();
}

void SLPoint::SharedDtor() {
}

void SLPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLPoint::descriptor() {
  ::protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SLPoint& SLPoint::default_instance() {
  ::protobuf_pnc_5fpoint_2eproto::InitDefaultsSLPoint();
  return *internal_default_instance();
}

SLPoint* SLPoint::New(::google::protobuf::Arena* arena) const {
  SLPoint* n = new SLPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.SLPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&l_) -
        reinterpret_cast<char*>(&s_)) + sizeof(l_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SLPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.SLPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double l = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.SLPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.SLPoint)
  return false;
#undef DO_
}

void SLPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.SLPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double l = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->l(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.SLPoint)
}

::google::protobuf::uint8* SLPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.SLPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double l = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->l(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.SLPoint)
  return target;
}

size_t SLPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.SLPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double s = 1;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double l = 2;
    if (has_l()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.SLPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SLPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.SLPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.SLPoint)
    MergeFrom(*source);
  }
}

void SLPoint::MergeFrom(const SLPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.SLPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      l_ = from.l_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SLPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.SLPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLPoint::CopyFrom(const SLPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.SLPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPoint::IsInitialized() const {
  return true;
}

void SLPoint::Swap(SLPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLPoint::InternalSwap(SLPoint* other) {
  using std::swap;
  swap(s_, other->s_);
  swap(l_, other->l_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLPoint::GetMetadata() const {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FrenetFramePoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrenetFramePoint::kSFieldNumber;
const int FrenetFramePoint::kLFieldNumber;
const int FrenetFramePoint::kDlFieldNumber;
const int FrenetFramePoint::kDdlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrenetFramePoint::FrenetFramePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pnc_5fpoint_2eproto::InitDefaultsFrenetFramePoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.FrenetFramePoint)
}
FrenetFramePoint::FrenetFramePoint(const FrenetFramePoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&ddl_) -
    reinterpret_cast<char*>(&s_)) + sizeof(ddl_));
  // @@protoc_insertion_point(copy_constructor:acu.common.FrenetFramePoint)
}

void FrenetFramePoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ddl_) -
      reinterpret_cast<char*>(&s_)) + sizeof(ddl_));
}

FrenetFramePoint::~FrenetFramePoint() {
  // @@protoc_insertion_point(destructor:acu.common.FrenetFramePoint)
  SharedDtor();
}

void FrenetFramePoint::SharedDtor() {
}

void FrenetFramePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrenetFramePoint::descriptor() {
  ::protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrenetFramePoint& FrenetFramePoint::default_instance() {
  ::protobuf_pnc_5fpoint_2eproto::InitDefaultsFrenetFramePoint();
  return *internal_default_instance();
}

FrenetFramePoint* FrenetFramePoint::New(::google::protobuf::Arena* arena) const {
  FrenetFramePoint* n = new FrenetFramePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrenetFramePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.FrenetFramePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ddl_) -
        reinterpret_cast<char*>(&s_)) + sizeof(ddl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrenetFramePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.FrenetFramePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double l = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_dl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ddl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_ddl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.FrenetFramePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.FrenetFramePoint)
  return false;
#undef DO_
}

void FrenetFramePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.FrenetFramePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double l = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->l(), output);
  }

  // optional double dl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dl(), output);
  }

  // optional double ddl = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ddl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.FrenetFramePoint)
}

::google::protobuf::uint8* FrenetFramePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.FrenetFramePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double l = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->l(), target);
  }

  // optional double dl = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dl(), target);
  }

  // optional double ddl = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ddl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.FrenetFramePoint)
  return target;
}

size_t FrenetFramePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.FrenetFramePoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double s = 1;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double l = 2;
    if (has_l()) {
      total_size += 1 + 8;
    }

    // optional double dl = 3;
    if (has_dl()) {
      total_size += 1 + 8;
    }

    // optional double ddl = 4;
    if (has_ddl()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrenetFramePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.FrenetFramePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const FrenetFramePoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrenetFramePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.FrenetFramePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.FrenetFramePoint)
    MergeFrom(*source);
  }
}

void FrenetFramePoint::MergeFrom(const FrenetFramePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.FrenetFramePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      l_ = from.l_;
    }
    if (cached_has_bits & 0x00000004u) {
      dl_ = from.dl_;
    }
    if (cached_has_bits & 0x00000008u) {
      ddl_ = from.ddl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrenetFramePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.FrenetFramePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrenetFramePoint::CopyFrom(const FrenetFramePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.FrenetFramePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrenetFramePoint::IsInitialized() const {
  return true;
}

void FrenetFramePoint::Swap(FrenetFramePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrenetFramePoint::InternalSwap(FrenetFramePoint* other) {
  using std::swap;
  swap(s_, other->s_);
  swap(l_, other->l_);
  swap(dl_, other->dl_);
  swap(ddl_, other->ddl_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrenetFramePoint::GetMetadata() const {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeedPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedPoint::kSFieldNumber;
const int SpeedPoint::kTFieldNumber;
const int SpeedPoint::kVFieldNumber;
const int SpeedPoint::kAFieldNumber;
const int SpeedPoint::kDaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedPoint::SpeedPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pnc_5fpoint_2eproto::InitDefaultsSpeedPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.SpeedPoint)
}
SpeedPoint::SpeedPoint(const SpeedPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&da_) -
    reinterpret_cast<char*>(&s_)) + sizeof(da_));
  // @@protoc_insertion_point(copy_constructor:acu.common.SpeedPoint)
}

void SpeedPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&da_) -
      reinterpret_cast<char*>(&s_)) + sizeof(da_));
}

SpeedPoint::~SpeedPoint() {
  // @@protoc_insertion_point(destructor:acu.common.SpeedPoint)
  SharedDtor();
}

void SpeedPoint::SharedDtor() {
}

void SpeedPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedPoint::descriptor() {
  ::protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedPoint& SpeedPoint::default_instance() {
  ::protobuf_pnc_5fpoint_2eproto::InitDefaultsSpeedPoint();
  return *internal_default_instance();
}

SpeedPoint* SpeedPoint::New(::google::protobuf::Arena* arena) const {
  SpeedPoint* n = new SpeedPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.SpeedPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&da_) -
        reinterpret_cast<char*>(&s_)) + sizeof(da_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.SpeedPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double t = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double v = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double a = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double da = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_da();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &da_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.SpeedPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.SpeedPoint)
  return false;
#undef DO_
}

void SpeedPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.SpeedPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double t = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->t(), output);
  }

  // optional double v = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->v(), output);
  }

  // optional double a = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->a(), output);
  }

  // optional double da = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->da(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.SpeedPoint)
}

::google::protobuf::uint8* SpeedPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.SpeedPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double t = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->t(), target);
  }

  // optional double v = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->v(), target);
  }

  // optional double a = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->a(), target);
  }

  // optional double da = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->da(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.SpeedPoint)
  return target;
}

size_t SpeedPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.SpeedPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional double s = 1;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double t = 2;
    if (has_t()) {
      total_size += 1 + 8;
    }

    // optional double v = 3;
    if (has_v()) {
      total_size += 1 + 8;
    }

    // optional double a = 4;
    if (has_a()) {
      total_size += 1 + 8;
    }

    // optional double da = 5;
    if (has_da()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.SpeedPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.SpeedPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.SpeedPoint)
    MergeFrom(*source);
  }
}

void SpeedPoint::MergeFrom(const SpeedPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.SpeedPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      t_ = from.t_;
    }
    if (cached_has_bits & 0x00000004u) {
      v_ = from.v_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      da_ = from.da_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeedPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.SpeedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPoint::CopyFrom(const SpeedPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.SpeedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPoint::IsInitialized() const {
  return true;
}

void SpeedPoint::Swap(SpeedPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedPoint::InternalSwap(SpeedPoint* other) {
  using std::swap;
  swap(s_, other->s_);
  swap(t_, other->t_);
  swap(v_, other->v_);
  swap(a_, other->a_);
  swap(da_, other->da_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedPoint::GetMetadata() const {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PathPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPoint::kXFieldNumber;
const int PathPoint::kYFieldNumber;
const int PathPoint::kZFieldNumber;
const int PathPoint::kDrXFieldNumber;
const int PathPoint::kDrYFieldNumber;
const int PathPoint::kDrThetaFieldNumber;
const int PathPoint::kThetaFieldNumber;
const int PathPoint::kKappaFieldNumber;
const int PathPoint::kSFieldNumber;
const int PathPoint::kDkappaFieldNumber;
const int PathPoint::kDdkappaFieldNumber;
const int PathPoint::kLaneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPoint::PathPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pnc_5fpoint_2eproto::InitDefaultsPathPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.PathPoint)
}
PathPoint::PathPoint(const PathPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lane_id()) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&ddkappa_) -
    reinterpret_cast<char*>(&x_)) + sizeof(ddkappa_));
  // @@protoc_insertion_point(copy_constructor:acu.common.PathPoint)
}

void PathPoint::SharedCtor() {
  _cached_size_ = 0;
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ddkappa_) -
      reinterpret_cast<char*>(&x_)) + sizeof(ddkappa_));
}

PathPoint::~PathPoint() {
  // @@protoc_insertion_point(destructor:acu.common.PathPoint)
  SharedDtor();
}

void PathPoint::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PathPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathPoint::descriptor() {
  ::protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathPoint& PathPoint::default_instance() {
  ::protobuf_pnc_5fpoint_2eproto::InitDefaultsPathPoint();
  return *internal_default_instance();
}

PathPoint* PathPoint::New(::google::protobuf::Arena* arena) const {
  PathPoint* n = new PathPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.PathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!lane_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*lane_id_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&theta_) -
        reinterpret_cast<char*>(&x_)) + sizeof(theta_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&kappa_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ddkappa_) -
        reinterpret_cast<char*>(&kappa_)) + sizeof(ddkappa_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PathPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.PathPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dr_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_dr_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dr_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dr_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_dr_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dr_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dr_theta = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_dr_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dr_theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kappa = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_kappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double s = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dkappa = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_dkappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dkappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ddkappa = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_ddkappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddkappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lane_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acu.common.PathPoint.lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.PathPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.PathPoint)
  return false;
#undef DO_
}

void PathPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.PathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double dr_x = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->dr_x(), output);
  }

  // optional double dr_y = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->dr_y(), output);
  }

  // optional double dr_theta = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->dr_theta(), output);
  }

  // optional double theta = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->theta(), output);
  }

  // optional double kappa = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->kappa(), output);
  }

  // optional double s = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->s(), output);
  }

  // optional double dkappa = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->dkappa(), output);
  }

  // optional double ddkappa = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->ddkappa(), output);
  }

  // optional string lane_id = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.common.PathPoint.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->lane_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.PathPoint)
}

::google::protobuf::uint8* PathPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.PathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double dr_x = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->dr_x(), target);
  }

  // optional double dr_y = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->dr_y(), target);
  }

  // optional double dr_theta = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->dr_theta(), target);
  }

  // optional double theta = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->theta(), target);
  }

  // optional double kappa = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->kappa(), target);
  }

  // optional double s = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->s(), target);
  }

  // optional double dkappa = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->dkappa(), target);
  }

  // optional double ddkappa = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->ddkappa(), target);
  }

  // optional string lane_id = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.common.PathPoint.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->lane_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.PathPoint)
  return target;
}

size_t PathPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.PathPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string lane_id = 12;
    if (has_lane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lane_id());
    }

    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double dr_x = 4;
    if (has_dr_x()) {
      total_size += 1 + 8;
    }

    // optional double dr_y = 5;
    if (has_dr_y()) {
      total_size += 1 + 8;
    }

    // optional double dr_theta = 6;
    if (has_dr_theta()) {
      total_size += 1 + 8;
    }

    // optional double theta = 7;
    if (has_theta()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double kappa = 8;
    if (has_kappa()) {
      total_size += 1 + 8;
    }

    // optional double s = 9;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double dkappa = 10;
    if (has_dkappa()) {
      total_size += 1 + 8;
    }

    // optional double ddkappa = 11;
    if (has_ddkappa()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.PathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.PathPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.PathPoint)
    MergeFrom(*source);
  }
}

void PathPoint::MergeFrom(const PathPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.PathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_lane_id();
      lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000010u) {
      dr_x_ = from.dr_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      dr_y_ = from.dr_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      dr_theta_ = from.dr_theta_;
    }
    if (cached_has_bits & 0x00000080u) {
      theta_ = from.theta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      kappa_ = from.kappa_;
    }
    if (cached_has_bits & 0x00000200u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000400u) {
      dkappa_ = from.dkappa_;
    }
    if (cached_has_bits & 0x00000800u) {
      ddkappa_ = from.ddkappa_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PathPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPoint::CopyFrom(const PathPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPoint::IsInitialized() const {
  return true;
}

void PathPoint::Swap(PathPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPoint::InternalSwap(PathPoint* other) {
  using std::swap;
  lane_id_.Swap(&other->lane_id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(dr_x_, other->dr_x_);
  swap(dr_y_, other->dr_y_);
  swap(dr_theta_, other->dr_theta_);
  swap(theta_, other->theta_);
  swap(kappa_, other->kappa_);
  swap(s_, other->s_);
  swap(dkappa_, other->dkappa_);
  swap(ddkappa_, other->ddkappa_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathPoint::GetMetadata() const {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Path::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Path::kNameFieldNumber;
const int Path::kPathPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Path::Path()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pnc_5fpoint_2eproto::InitDefaultsPath();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.Path)
}
Path::Path(const Path& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      path_point_(from.path_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:acu.common.Path)
}

void Path::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:acu.common.Path)
  SharedDtor();
}

void Path::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Path::descriptor() {
  ::protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Path& Path::default_instance() {
  ::protobuf_pnc_5fpoint_2eproto::InitDefaultsPath();
  return *internal_default_instance();
}

Path* Path::New(::google::protobuf::Arena* arena) const {
  Path* n = new Path;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.Path)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.Path)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acu.common.Path.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.common.PathPoint path_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_path_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.Path)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.Path)
  return false;
#undef DO_
}

void Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.Path)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.common.Path.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .acu.common.PathPoint path_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->path_point(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.Path)
}

::google::protobuf::uint8* Path::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.Path)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acu.common.Path.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .acu.common.PathPoint path_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->path_point(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.Path)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.common.PathPoint path_point = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->path_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->path_point(static_cast<int>(i)));
    }
  }

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Path::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Path>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.Path)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_point_.MergeFrom(from.path_point_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Path::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::Swap(Path* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Path::InternalSwap(Path* other) {
  using std::swap;
  path_point_.InternalSwap(&other->path_point_);
  name_.Swap(&other->name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Path::GetMetadata() const {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrajectoryPoint::InitAsDefaultInstance() {
  ::acu::common::_TrajectoryPoint_default_instance_._instance.get_mutable()->path_point_ = const_cast< ::acu::common::PathPoint*>(
      ::acu::common::PathPoint::internal_default_instance());
  ::acu::common::_TrajectoryPoint_default_instance_._instance.get_mutable()->gaussian_info_ = const_cast< ::acu::common::GaussianInfo*>(
      ::acu::common::GaussianInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryPoint::kPathPointFieldNumber;
const int TrajectoryPoint::kVFieldNumber;
const int TrajectoryPoint::kAFieldNumber;
const int TrajectoryPoint::kRelativeTimeFieldNumber;
const int TrajectoryPoint::kDaFieldNumber;
const int TrajectoryPoint::kSteerFieldNumber;
const int TrajectoryPoint::kGaussianInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryPoint::TrajectoryPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pnc_5fpoint_2eproto::InitDefaultsTrajectoryPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.TrajectoryPoint)
}
TrajectoryPoint::TrajectoryPoint(const TrajectoryPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_path_point()) {
    path_point_ = new ::acu::common::PathPoint(*from.path_point_);
  } else {
    path_point_ = NULL;
  }
  if (from.has_gaussian_info()) {
    gaussian_info_ = new ::acu::common::GaussianInfo(*from.gaussian_info_);
  } else {
    gaussian_info_ = NULL;
  }
  ::memcpy(&v_, &from.v_,
    static_cast<size_t>(reinterpret_cast<char*>(&steer_) -
    reinterpret_cast<char*>(&v_)) + sizeof(steer_));
  // @@protoc_insertion_point(copy_constructor:acu.common.TrajectoryPoint)
}

void TrajectoryPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&path_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steer_) -
      reinterpret_cast<char*>(&path_point_)) + sizeof(steer_));
}

TrajectoryPoint::~TrajectoryPoint() {
  // @@protoc_insertion_point(destructor:acu.common.TrajectoryPoint)
  SharedDtor();
}

void TrajectoryPoint::SharedDtor() {
  if (this != internal_default_instance()) delete path_point_;
  if (this != internal_default_instance()) delete gaussian_info_;
}

void TrajectoryPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryPoint::descriptor() {
  ::protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryPoint& TrajectoryPoint::default_instance() {
  ::protobuf_pnc_5fpoint_2eproto::InitDefaultsTrajectoryPoint();
  return *internal_default_instance();
}

TrajectoryPoint* TrajectoryPoint::New(::google::protobuf::Arena* arena) const {
  TrajectoryPoint* n = new TrajectoryPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.TrajectoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(path_point_ != NULL);
      path_point_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gaussian_info_ != NULL);
      gaussian_info_->Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&v_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steer_) -
        reinterpret_cast<char*>(&v_)) + sizeof(steer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrajectoryPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.TrajectoryPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.common.PathPoint path_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double v = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double a = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double relative_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_relative_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double da = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_da();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &da_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_steer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.GaussianInfo gaussian_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gaussian_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.TrajectoryPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.TrajectoryPoint)
  return false;
#undef DO_
}

void TrajectoryPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.TrajectoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.PathPoint path_point = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->path_point_, output);
  }

  // optional double v = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->v(), output);
  }

  // optional double a = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->a(), output);
  }

  // optional double relative_time = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->relative_time(), output);
  }

  // optional double da = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->da(), output);
  }

  // optional double steer = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->steer(), output);
  }

  // optional .acu.common.GaussianInfo gaussian_info = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->gaussian_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.TrajectoryPoint)
}

::google::protobuf::uint8* TrajectoryPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.TrajectoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.PathPoint path_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->path_point_, deterministic, target);
  }

  // optional double v = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->v(), target);
  }

  // optional double a = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->a(), target);
  }

  // optional double relative_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->relative_time(), target);
  }

  // optional double da = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->da(), target);
  }

  // optional double steer = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->steer(), target);
  }

  // optional .acu.common.GaussianInfo gaussian_info = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->gaussian_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.TrajectoryPoint)
  return target;
}

size_t TrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.TrajectoryPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .acu.common.PathPoint path_point = 1;
    if (has_path_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->path_point_);
    }

    // optional .acu.common.GaussianInfo gaussian_info = 7;
    if (has_gaussian_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->gaussian_info_);
    }

    // optional double v = 2;
    if (has_v()) {
      total_size += 1 + 8;
    }

    // optional double a = 3;
    if (has_a()) {
      total_size += 1 + 8;
    }

    // optional double relative_time = 4;
    if (has_relative_time()) {
      total_size += 1 + 8;
    }

    // optional double da = 5;
    if (has_da()) {
      total_size += 1 + 8;
    }

    // optional double steer = 6;
    if (has_steer()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.TrajectoryPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.TrajectoryPoint)
    MergeFrom(*source);
  }
}

void TrajectoryPoint::MergeFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_path_point()->::acu::common::PathPoint::MergeFrom(from.path_point());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_gaussian_info()->::acu::common::GaussianInfo::MergeFrom(from.gaussian_info());
    }
    if (cached_has_bits & 0x00000004u) {
      v_ = from.v_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      relative_time_ = from.relative_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      da_ = from.da_;
    }
    if (cached_has_bits & 0x00000040u) {
      steer_ = from.steer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrajectoryPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPoint::CopyFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPoint::IsInitialized() const {
  return true;
}

void TrajectoryPoint::Swap(TrajectoryPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryPoint::InternalSwap(TrajectoryPoint* other) {
  using std::swap;
  swap(path_point_, other->path_point_);
  swap(gaussian_info_, other->gaussian_info_);
  swap(v_, other->v_);
  swap(a_, other->a_);
  swap(relative_time_, other->relative_time_);
  swap(da_, other->da_);
  swap(steer_, other->steer_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryPoint::GetMetadata() const {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GaussianInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GaussianInfo::kSigmaXFieldNumber;
const int GaussianInfo::kSigmaYFieldNumber;
const int GaussianInfo::kCorrelationFieldNumber;
const int GaussianInfo::kAreaProbabilityFieldNumber;
const int GaussianInfo::kEllipseAFieldNumber;
const int GaussianInfo::kEllipseBFieldNumber;
const int GaussianInfo::kThetaAFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GaussianInfo::GaussianInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pnc_5fpoint_2eproto::InitDefaultsGaussianInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.GaussianInfo)
}
GaussianInfo::GaussianInfo(const GaussianInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sigma_x_, &from.sigma_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&theta_a_) -
    reinterpret_cast<char*>(&sigma_x_)) + sizeof(theta_a_));
  // @@protoc_insertion_point(copy_constructor:acu.common.GaussianInfo)
}

void GaussianInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sigma_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_a_) -
      reinterpret_cast<char*>(&sigma_x_)) + sizeof(theta_a_));
}

GaussianInfo::~GaussianInfo() {
  // @@protoc_insertion_point(destructor:acu.common.GaussianInfo)
  SharedDtor();
}

void GaussianInfo::SharedDtor() {
}

void GaussianInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GaussianInfo::descriptor() {
  ::protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GaussianInfo& GaussianInfo::default_instance() {
  ::protobuf_pnc_5fpoint_2eproto::InitDefaultsGaussianInfo();
  return *internal_default_instance();
}

GaussianInfo* GaussianInfo::New(::google::protobuf::Arena* arena) const {
  GaussianInfo* n = new GaussianInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GaussianInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.GaussianInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&sigma_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&theta_a_) -
        reinterpret_cast<char*>(&sigma_x_)) + sizeof(theta_a_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GaussianInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.GaussianInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double sigma_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_sigma_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sigma_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sigma_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_sigma_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sigma_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double correlation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_correlation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &correlation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double area_probability = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_area_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &area_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ellipse_a = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_ellipse_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ellipse_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ellipse_b = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_ellipse_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ellipse_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta_a = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_theta_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.GaussianInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.GaussianInfo)
  return false;
#undef DO_
}

void GaussianInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.GaussianInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double sigma_x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->sigma_x(), output);
  }

  // optional double sigma_y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sigma_y(), output);
  }

  // optional double correlation = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->correlation(), output);
  }

  // optional double area_probability = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->area_probability(), output);
  }

  // optional double ellipse_a = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ellipse_a(), output);
  }

  // optional double ellipse_b = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ellipse_b(), output);
  }

  // optional double theta_a = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->theta_a(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.GaussianInfo)
}

::google::protobuf::uint8* GaussianInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.GaussianInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double sigma_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->sigma_x(), target);
  }

  // optional double sigma_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sigma_y(), target);
  }

  // optional double correlation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->correlation(), target);
  }

  // optional double area_probability = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->area_probability(), target);
  }

  // optional double ellipse_a = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ellipse_a(), target);
  }

  // optional double ellipse_b = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ellipse_b(), target);
  }

  // optional double theta_a = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->theta_a(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.GaussianInfo)
  return target;
}

size_t GaussianInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.GaussianInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional double sigma_x = 1;
    if (has_sigma_x()) {
      total_size += 1 + 8;
    }

    // optional double sigma_y = 2;
    if (has_sigma_y()) {
      total_size += 1 + 8;
    }

    // optional double correlation = 3;
    if (has_correlation()) {
      total_size += 1 + 8;
    }

    // optional double area_probability = 4;
    if (has_area_probability()) {
      total_size += 1 + 8;
    }

    // optional double ellipse_a = 5;
    if (has_ellipse_a()) {
      total_size += 1 + 8;
    }

    // optional double ellipse_b = 6;
    if (has_ellipse_b()) {
      total_size += 1 + 8;
    }

    // optional double theta_a = 7;
    if (has_theta_a()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GaussianInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.GaussianInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GaussianInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GaussianInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.GaussianInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.GaussianInfo)
    MergeFrom(*source);
  }
}

void GaussianInfo::MergeFrom(const GaussianInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.GaussianInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      sigma_x_ = from.sigma_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      sigma_y_ = from.sigma_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      correlation_ = from.correlation_;
    }
    if (cached_has_bits & 0x00000008u) {
      area_probability_ = from.area_probability_;
    }
    if (cached_has_bits & 0x00000010u) {
      ellipse_a_ = from.ellipse_a_;
    }
    if (cached_has_bits & 0x00000020u) {
      ellipse_b_ = from.ellipse_b_;
    }
    if (cached_has_bits & 0x00000040u) {
      theta_a_ = from.theta_a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GaussianInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.GaussianInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GaussianInfo::CopyFrom(const GaussianInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.GaussianInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaussianInfo::IsInitialized() const {
  return true;
}

void GaussianInfo::Swap(GaussianInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GaussianInfo::InternalSwap(GaussianInfo* other) {
  using std::swap;
  swap(sigma_x_, other->sigma_x_);
  swap(sigma_y_, other->sigma_y_);
  swap(correlation_, other->correlation_);
  swap(area_probability_, other->area_probability_);
  swap(ellipse_a_, other->ellipse_a_);
  swap(ellipse_b_, other->ellipse_b_);
  swap(theta_a_, other->theta_a_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GaussianInfo::GetMetadata() const {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace acu

// @@protoc_insertion_point(global_scope)
