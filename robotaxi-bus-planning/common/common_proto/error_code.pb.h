// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: error_code.proto

#ifndef PROTOBUF_error_5fcode_2eproto__INCLUDED
#define PROTOBUF_error_5fcode_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_error_5fcode_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsStatusPbImpl();
void InitDefaultsStatusPb();
void InitDefaultsFaultInfoImpl();
void InitDefaultsFaultInfo();
inline void InitDefaults() {
  InitDefaultsStatusPb();
  InitDefaultsFaultInfo();
}
}  // namespace protobuf_error_5fcode_2eproto
namespace acu {
namespace common {
class FaultInfo;
class FaultInfoDefaultTypeInternal;
extern FaultInfoDefaultTypeInternal _FaultInfo_default_instance_;
class StatusPb;
class StatusPbDefaultTypeInternal;
extern StatusPbDefaultTypeInternal _StatusPb_default_instance_;
}  // namespace common
}  // namespace acu
namespace acu {
namespace common {

enum ErrorCode {
  OK = 0,
  LOCALIZATION_IMU_HARDWARE_0_ERROR = 16,
  LOCALIZATION_IMU_HARDWARE_1_ERROR = 17,
  LOCALIZATION_IMU_HARDWARE_2_ERROR = 18,
  LOCALIZATION_LOCPOSE_0_ERROR = 256,
  HDMAP_DATA_ERROR = 512,
  PERCEPTION_LIDAR_HARDWARE_0_ERROR = 4096,
  PERCEPTION_LIDAR_HARDWARE_1_ERROR = 4097,
  PERCEPTION_LIDAR_HARDWARE_2_ERROR = 4098,
  PERCEPTION_LIDAR_HARDWARE_3_ERROR = 4099,
  PERCEPTION_LIDAR_SOFTWARE_0_ERROR = 4112,
  PERCEPTION_LIDAR_SOFTWARE_1_ERROR = 4113,
  PERCEPTION_LIDAR_SOFTWARE_2_ERROR = 4114,
  PERCEPTION_LIDAR_SOFTWARE_3_ERROR = 4115,
  PERCEPTION_ARS_0_SOFTWARE_0_ERROR = 4128,
  PERCEPTION_ARS_1_SOFTWARE_1_ERROR = 4129,
  PERCEPTION_VISION_HARDWARE_0_ERROR = 4352,
  PERCEPTION_VISION_HARDWARE_1_ERROR = 4353,
  PERCEPTION_VISION_HARDWARE_2_ERROR = 4354,
  PERCEPTION_VISION_SOFTWARE_0_ERROR = 4368,
  PERCEPTION_ULTRASONIC_HARDWARE_0_ERROR = 4608,
  PERCEPTION_ULTRASONIC_HARDWARE_1_ERROR = 4609,
  PERCEPTION_ULTRASONIC_HARDWARE_2_ERROR = 4610,
  PERCEPTION_ULTRASONIC_HARDWARE_3_ERROR = 4611,
  PERCEPTION_ULTRASONIC_HARDWARE_4_ERROR = 4612,
  PERCEPTION_ULTRASONIC_HARDWARE_5_ERROR = 4613,
  PERCEPTION_ULTRASONIC_HARDWARE_6_ERROR = 4614,
  PERCEPTION_ULTRASONIC_HARDWARE_7_ERROR = 4615,
  PERCEPTION_ULTRASONIC_HARDWARE_8_ERROR = 4616,
  PERCEPTION_ULTRASONIC_HARDWARE_9_ERROR = 4617,
  PERCEPTION_ULTRASONIC_HARDWARE_10_ERROR = 4618,
  PERCEPTION_ULTRASONIC_HARDWARE_11_ERROR = 4619,
  PERCEPTION_ULTRASONIC_SOFTWARE_0_ERROR = 4880,
  PERCEPTION_RADAR_HARDWARE_0_ERROR = 5120,
  PERCEPTION_RADAR_HARDWARE_1_ERROR = 5121,
  PERCEPTION_RADAR_SOFTWARE_0_ERROR = 5136,
  PERCEPTION_MOBILEYE_HARDWARE_0_ERROR = 5376,
  PERCEPTION_MOBILEYE_SOFTWARE_0_ERROR = 5377,
  PERCEPTION_OBJECTFUSION_0_ERROR = 5632,
  PLANNING_MISSIONPLAN_SOFTWARE_0_ERROR = 8192,
  PLANNING_MISSIONPLAN_SOFTWARE_1_ERROR = 8193,
  PLANNING_BEHAVIORPLAN_SOFTWARE_0_ERROR = 8448,
  PLANNING_PATHPLAN_SOFTWARE_0_ERROR = 8704,
  PLANNING_SPEEDPLAN_SOFTWARE_0_ERROR = 8960,
  PREDICTION_ERROR = 9216,
  PCICAN_HARDWARE_0_ERROR = 12288,
  PCICAN_SOFTWARE_0_ERROR = 12304,
  CONTROL_LON_SOFTWARE_0_ERROR = 16400,
  CONTROL_LAT_SOFTWARE_0_ERROR = 16656,
  MONITOR_APP_CPU_HGIH_ERROR = 20480,
  MONITOR_CLOUDSERVICE_CPU_HGIH_ERROR = 20481,
  MONITOR_OBJECTFUSION_CPU_HGIH_ERROR = 20482,
  MONITOR_LOCFUSION_CPU_HGIH_ERROR = 20483,
  MONITOR_PLAN_CPU_HGIH_ERROR = 20484,
  MONITOR_CONTROL_CPU_HGIH_ERROR = 20485,
  MONITOR_PCICAN_CPU_HGIH_ERROR = 20486,
  MONITOR_APP_MEM_HGIH_ERROR = 20736,
  MONITOR_CLOUDSERVICE_MEM_HGIH_ERROR = 20737,
  MONITOR_OBJECTFUSION_MEM_HGIH_ERROR = 20738,
  MONITOR_LOCFUSION_MEM_HGIH_ERROR = 20739,
  MONITOR_PLAN_MEM_HGIH_ERROR = 20740,
  MONITOR_CONTROL_MEM_HGIH_ERROR = 20741,
  MONITOR_PCICAN_MEM_HGIH_ERROR = 20742,
  MONITOR_APP_TIME_0_ERROR = 20992,
  MONITOR_CLOUDSERVICE_TIME_0_ERROR = 20993,
  MONITOR_OBJECTFUSION_TIME_0_ERROR = 20994,
  MONITOR_LOCFUSION_TIME_0_ERROR = 20995,
  MONITOR_PLAN_TIME_0_ERROR = 20996,
  MONITOR_CONTROL_TIME_0_ERROR = 20997,
  MONITOR_PCICAN_TIME_0_ERROR = 20998,
  MONITOR_APP_TIME_1_ERROR = 21072,
  MONITOR_CLOUDSERVICE_TIME_1_ERROR = 21073,
  MONITOR_OBJECTFUSION_TIME_1_ERROR = 21074,
  MONITOR_LOCFUSION_TIME_1_ERROR = 21075,
  MONITOR_PLAN_TIME_1_ERROR = 21076,
  MONITOR_CONTROL_TIME_1_ERROR = 21077,
  MONITOR_PCICAN_TIME_1_ERROR = 21078,
  MONITOR_APP_NODE_LOST_ERROR = 21248,
  MONITOR_CLOUDSERVICE_NODE_LOST_ERROR = 21249,
  MONITOR_OBJECTFUSION_NODE_LOST_ERROR = 21250,
  MONITOR_LOCFUSION_NODE_LOST_ERROR = 21251,
  MONITOR_PLAN_NODE_LOST_ERROR = 21252,
  MONITOR_CONTROL_NODE_LOST_ERROR = 21253,
  MONITOR_PCICAN_NODE_LOST_ERROR = 21254,
  MONITOR_SOFTWARE_0_ERROR = 21504,
  VEHICLE_EPS_0_ERROR = 24576,
  VEHICLE_EPS_1_ERROR = 24577,
  VEHICLE_BRAKE_0_ERROR = 24592,
  VEHICLE_BRAKE_1_ERROR = 24593,
  VEHICLE_DRIVE_0_ERROR = 24608,
  VEHICLE_EPB_0_ERROR = 24624,
  VEHICLE_EPB_1_ERROR = 24625,
  VEHICLE_POWER_0_ERROR = 24640,
  VEHICLE_POWER_1_ERROR = 24641,
  VEHICLE_POWER_2_ERROR = 24642,
  VEHICLE_POWER_3_ERROR = 24643,
  VEHICLE_CPU_0_ERROR = 24656,
  VEHICLE_VCU_1_ERROR = 24657
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = OK;
const ErrorCode ErrorCode_MAX = VEHICLE_VCU_1_ERROR;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class StatusPb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:acu.common.StatusPb) */ {
 public:
  StatusPb();
  virtual ~StatusPb();

  StatusPb(const StatusPb& from);

  inline StatusPb& operator=(const StatusPb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatusPb(StatusPb&& from) noexcept
    : StatusPb() {
    *this = ::std::move(from);
  }

  inline StatusPb& operator=(StatusPb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusPb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusPb* internal_default_instance() {
    return reinterpret_cast<const StatusPb*>(
               &_StatusPb_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(StatusPb* other);
  friend void swap(StatusPb& a, StatusPb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatusPb* New() const PROTOBUF_FINAL { return New(NULL); }

  StatusPb* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StatusPb& from);
  void MergeFrom(const StatusPb& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StatusPb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional .acu.common.ErrorCode error_code = 1 [default = OK];
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::acu::common::ErrorCode error_code() const;
  void set_error_code(::acu::common::ErrorCode value);

  // @@protoc_insertion_point(class_scope:acu.common.StatusPb)
 private:
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  int error_code_;
  friend struct ::protobuf_error_5fcode_2eproto::TableStruct;
  friend void ::protobuf_error_5fcode_2eproto::InitDefaultsStatusPbImpl();
};
// -------------------------------------------------------------------

class FaultInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:acu.common.FaultInfo) */ {
 public:
  FaultInfo();
  virtual ~FaultInfo();

  FaultInfo(const FaultInfo& from);

  inline FaultInfo& operator=(const FaultInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FaultInfo(FaultInfo&& from) noexcept
    : FaultInfo() {
    *this = ::std::move(from);
  }

  inline FaultInfo& operator=(FaultInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FaultInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaultInfo* internal_default_instance() {
    return reinterpret_cast<const FaultInfo*>(
               &_FaultInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FaultInfo* other);
  friend void swap(FaultInfo& a, FaultInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaultInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FaultInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FaultInfo& from);
  void MergeFrom(const FaultInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FaultInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string module_name = 2;
  bool has_module_name() const;
  void clear_module_name();
  static const int kModuleNameFieldNumber = 2;
  const ::std::string& module_name() const;
  void set_module_name(const ::std::string& value);
  #if LANG_CXX11
  void set_module_name(::std::string&& value);
  #endif
  void set_module_name(const char* value);
  void set_module_name(const char* value, size_t size);
  ::std::string* mutable_module_name();
  ::std::string* release_module_name();
  void set_allocated_module_name(::std::string* module_name);

  // optional string version = 3;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional string msg = 6;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 6;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional double timestamp_sec = 1;
  bool has_timestamp_sec() const;
  void clear_timestamp_sec();
  static const int kTimestampSecFieldNumber = 1;
  double timestamp_sec() const;
  void set_timestamp_sec(double value);

  // optional .acu.common.ErrorCode error_code = 4 [default = OK];
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 4;
  ::acu::common::ErrorCode error_code() const;
  void set_error_code(::acu::common::ErrorCode value);

  // optional int32 fault_level = 5;
  bool has_fault_level() const;
  void clear_fault_level();
  static const int kFaultLevelFieldNumber = 5;
  ::google::protobuf::int32 fault_level() const;
  void set_fault_level(::google::protobuf::int32 value);

  // optional int32 fault_type = 7;
  bool has_fault_type() const;
  void clear_fault_type();
  static const int kFaultTypeFieldNumber = 7;
  ::google::protobuf::int32 fault_type() const;
  void set_fault_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:acu.common.FaultInfo)
 private:
  void set_has_timestamp_sec();
  void clear_has_timestamp_sec();
  void set_has_module_name();
  void clear_has_module_name();
  void set_has_version();
  void clear_has_version();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_fault_level();
  void clear_has_fault_level();
  void set_has_msg();
  void clear_has_msg();
  void set_has_fault_type();
  void clear_has_fault_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr module_name_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  double timestamp_sec_;
  int error_code_;
  ::google::protobuf::int32 fault_level_;
  ::google::protobuf::int32 fault_type_;
  friend struct ::protobuf_error_5fcode_2eproto::TableStruct;
  friend void ::protobuf_error_5fcode_2eproto::InitDefaultsFaultInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StatusPb

// optional .acu.common.ErrorCode error_code = 1 [default = OK];
inline bool StatusPb::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatusPb::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatusPb::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatusPb::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::acu::common::ErrorCode StatusPb::error_code() const {
  // @@protoc_insertion_point(field_get:acu.common.StatusPb.error_code)
  return static_cast< ::acu::common::ErrorCode >(error_code_);
}
inline void StatusPb::set_error_code(::acu::common::ErrorCode value) {
  assert(::acu::common::ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:acu.common.StatusPb.error_code)
}

// optional string msg = 2;
inline bool StatusPb::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatusPb::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatusPb::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatusPb::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& StatusPb::msg() const {
  // @@protoc_insertion_point(field_get:acu.common.StatusPb.msg)
  return msg_.GetNoArena();
}
inline void StatusPb::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:acu.common.StatusPb.msg)
}
#if LANG_CXX11
inline void StatusPb::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:acu.common.StatusPb.msg)
}
#endif
inline void StatusPb::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:acu.common.StatusPb.msg)
}
inline void StatusPb::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:acu.common.StatusPb.msg)
}
inline ::std::string* StatusPb::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:acu.common.StatusPb.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusPb::release_msg() {
  // @@protoc_insertion_point(field_release:acu.common.StatusPb.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusPb::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:acu.common.StatusPb.msg)
}

// -------------------------------------------------------------------

// FaultInfo

// optional double timestamp_sec = 1;
inline bool FaultInfo::has_timestamp_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FaultInfo::set_has_timestamp_sec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FaultInfo::clear_has_timestamp_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FaultInfo::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  clear_has_timestamp_sec();
}
inline double FaultInfo::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:acu.common.FaultInfo.timestamp_sec)
  return timestamp_sec_;
}
inline void FaultInfo::set_timestamp_sec(double value) {
  set_has_timestamp_sec();
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:acu.common.FaultInfo.timestamp_sec)
}

// optional string module_name = 2;
inline bool FaultInfo::has_module_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FaultInfo::set_has_module_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FaultInfo::clear_has_module_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FaultInfo::clear_module_name() {
  module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_module_name();
}
inline const ::std::string& FaultInfo::module_name() const {
  // @@protoc_insertion_point(field_get:acu.common.FaultInfo.module_name)
  return module_name_.GetNoArena();
}
inline void FaultInfo::set_module_name(const ::std::string& value) {
  set_has_module_name();
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:acu.common.FaultInfo.module_name)
}
#if LANG_CXX11
inline void FaultInfo::set_module_name(::std::string&& value) {
  set_has_module_name();
  module_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:acu.common.FaultInfo.module_name)
}
#endif
inline void FaultInfo::set_module_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_module_name();
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:acu.common.FaultInfo.module_name)
}
inline void FaultInfo::set_module_name(const char* value, size_t size) {
  set_has_module_name();
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:acu.common.FaultInfo.module_name)
}
inline ::std::string* FaultInfo::mutable_module_name() {
  set_has_module_name();
  // @@protoc_insertion_point(field_mutable:acu.common.FaultInfo.module_name)
  return module_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FaultInfo::release_module_name() {
  // @@protoc_insertion_point(field_release:acu.common.FaultInfo.module_name)
  clear_has_module_name();
  return module_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FaultInfo::set_allocated_module_name(::std::string* module_name) {
  if (module_name != NULL) {
    set_has_module_name();
  } else {
    clear_has_module_name();
  }
  module_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module_name);
  // @@protoc_insertion_point(field_set_allocated:acu.common.FaultInfo.module_name)
}

// optional string version = 3;
inline bool FaultInfo::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FaultInfo::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FaultInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FaultInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& FaultInfo::version() const {
  // @@protoc_insertion_point(field_get:acu.common.FaultInfo.version)
  return version_.GetNoArena();
}
inline void FaultInfo::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:acu.common.FaultInfo.version)
}
#if LANG_CXX11
inline void FaultInfo::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:acu.common.FaultInfo.version)
}
#endif
inline void FaultInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:acu.common.FaultInfo.version)
}
inline void FaultInfo::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:acu.common.FaultInfo.version)
}
inline ::std::string* FaultInfo::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:acu.common.FaultInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FaultInfo::release_version() {
  // @@protoc_insertion_point(field_release:acu.common.FaultInfo.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FaultInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:acu.common.FaultInfo.version)
}

// optional .acu.common.ErrorCode error_code = 4 [default = OK];
inline bool FaultInfo::has_error_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FaultInfo::set_has_error_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FaultInfo::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FaultInfo::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::acu::common::ErrorCode FaultInfo::error_code() const {
  // @@protoc_insertion_point(field_get:acu.common.FaultInfo.error_code)
  return static_cast< ::acu::common::ErrorCode >(error_code_);
}
inline void FaultInfo::set_error_code(::acu::common::ErrorCode value) {
  assert(::acu::common::ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:acu.common.FaultInfo.error_code)
}

// optional int32 fault_level = 5;
inline bool FaultInfo::has_fault_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FaultInfo::set_has_fault_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FaultInfo::clear_has_fault_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FaultInfo::clear_fault_level() {
  fault_level_ = 0;
  clear_has_fault_level();
}
inline ::google::protobuf::int32 FaultInfo::fault_level() const {
  // @@protoc_insertion_point(field_get:acu.common.FaultInfo.fault_level)
  return fault_level_;
}
inline void FaultInfo::set_fault_level(::google::protobuf::int32 value) {
  set_has_fault_level();
  fault_level_ = value;
  // @@protoc_insertion_point(field_set:acu.common.FaultInfo.fault_level)
}

// optional string msg = 6;
inline bool FaultInfo::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FaultInfo::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FaultInfo::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FaultInfo::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& FaultInfo::msg() const {
  // @@protoc_insertion_point(field_get:acu.common.FaultInfo.msg)
  return msg_.GetNoArena();
}
inline void FaultInfo::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:acu.common.FaultInfo.msg)
}
#if LANG_CXX11
inline void FaultInfo::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:acu.common.FaultInfo.msg)
}
#endif
inline void FaultInfo::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:acu.common.FaultInfo.msg)
}
inline void FaultInfo::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:acu.common.FaultInfo.msg)
}
inline ::std::string* FaultInfo::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:acu.common.FaultInfo.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FaultInfo::release_msg() {
  // @@protoc_insertion_point(field_release:acu.common.FaultInfo.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FaultInfo::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:acu.common.FaultInfo.msg)
}

// optional int32 fault_type = 7;
inline bool FaultInfo::has_fault_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FaultInfo::set_has_fault_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FaultInfo::clear_has_fault_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FaultInfo::clear_fault_type() {
  fault_type_ = 0;
  clear_has_fault_type();
}
inline ::google::protobuf::int32 FaultInfo::fault_type() const {
  // @@protoc_insertion_point(field_get:acu.common.FaultInfo.fault_type)
  return fault_type_;
}
inline void FaultInfo::set_fault_type(::google::protobuf::int32 value) {
  set_has_fault_type();
  fault_type_ = value;
  // @@protoc_insertion_point(field_set:acu.common.FaultInfo.fault_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace acu

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::acu::common::ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::acu::common::ErrorCode>() {
  return ::acu::common::ErrorCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_error_5fcode_2eproto__INCLUDED
