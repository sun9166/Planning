// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: poly_vt_speed_config.proto

#ifndef PROTOBUF_poly_5fvt_5fspeed_5fconfig_2eproto__INCLUDED
#define PROTOBUF_poly_5fvt_5fspeed_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "st_boundary_config.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_poly_5fvt_5fspeed_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPolyVTSpeedConfigImpl();
void InitDefaultsPolyVTSpeedConfig();
inline void InitDefaults() {
  InitDefaultsPolyVTSpeedConfig();
}
}  // namespace protobuf_poly_5fvt_5fspeed_5fconfig_2eproto
namespace acu {
namespace planning {
class PolyVTSpeedConfig;
class PolyVTSpeedConfigDefaultTypeInternal;
extern PolyVTSpeedConfigDefaultTypeInternal _PolyVTSpeedConfig_default_instance_;
}  // namespace planning
}  // namespace acu
namespace acu {
namespace planning {

// ===================================================================

class PolyVTSpeedConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:acu.planning.PolyVTSpeedConfig) */ {
 public:
  PolyVTSpeedConfig();
  virtual ~PolyVTSpeedConfig();

  PolyVTSpeedConfig(const PolyVTSpeedConfig& from);

  inline PolyVTSpeedConfig& operator=(const PolyVTSpeedConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PolyVTSpeedConfig(PolyVTSpeedConfig&& from) noexcept
    : PolyVTSpeedConfig() {
    *this = ::std::move(from);
  }

  inline PolyVTSpeedConfig& operator=(PolyVTSpeedConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PolyVTSpeedConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolyVTSpeedConfig* internal_default_instance() {
    return reinterpret_cast<const PolyVTSpeedConfig*>(
               &_PolyVTSpeedConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PolyVTSpeedConfig* other);
  friend void swap(PolyVTSpeedConfig& a, PolyVTSpeedConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PolyVTSpeedConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  PolyVTSpeedConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PolyVTSpeedConfig& from);
  void MergeFrom(const PolyVTSpeedConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PolyVTSpeedConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .acu.planning.StBoundaryConfig st_boundary_config = 16;
  bool has_st_boundary_config() const;
  void clear_st_boundary_config();
  static const int kStBoundaryConfigFieldNumber = 16;
  const ::acu::planning::StBoundaryConfig& st_boundary_config() const;
  ::acu::planning::StBoundaryConfig* release_st_boundary_config();
  ::acu::planning::StBoundaryConfig* mutable_st_boundary_config();
  void set_allocated_st_boundary_config(::acu::planning::StBoundaryConfig* st_boundary_config);

  // optional double total_time = 1 [default = 0];
  bool has_total_time() const;
  void clear_total_time();
  static const int kTotalTimeFieldNumber = 1;
  double total_time() const;
  void set_total_time(double value);

  // optional double total_s = 2 [default = 0];
  bool has_total_s() const;
  void clear_total_s();
  static const int kTotalSFieldNumber = 2;
  double total_s() const;
  void set_total_s(double value);

  // optional int32 num_t_layers = 3;
  bool has_num_t_layers() const;
  void clear_num_t_layers();
  static const int kNumTLayersFieldNumber = 3;
  ::google::protobuf::int32 num_t_layers() const;
  void set_num_t_layers(::google::protobuf::int32 value);

  // optional int32 online_num_v_layers = 4;
  bool has_online_num_v_layers() const;
  void clear_online_num_v_layers();
  static const int kOnlineNumVLayersFieldNumber = 4;
  ::google::protobuf::int32 online_num_v_layers() const;
  void set_online_num_v_layers(::google::protobuf::int32 value);

  // optional double online_max_acc = 6;
  bool has_online_max_acc() const;
  void clear_online_max_acc();
  static const int kOnlineMaxAccFieldNumber = 6;
  double online_max_acc() const;
  void set_online_max_acc(double value);

  // optional double online_max_dec = 7;
  bool has_online_max_dec() const;
  void clear_online_max_dec();
  static const int kOnlineMaxDecFieldNumber = 7;
  double online_max_dec() const;
  void set_online_max_dec(double value);

  // optional int32 matrix_dim_s = 5;
  bool has_matrix_dim_s() const;
  void clear_matrix_dim_s();
  static const int kMatrixDimSFieldNumber = 5;
  ::google::protobuf::int32 matrix_dim_s() const;
  void set_matrix_dim_s(::google::protobuf::int32 value);

  // optional int32 offline_num_v_layers = 9;
  bool has_offline_num_v_layers() const;
  void clear_offline_num_v_layers();
  static const int kOfflineNumVLayersFieldNumber = 9;
  ::google::protobuf::int32 offline_num_v_layers() const;
  void set_offline_num_v_layers(::google::protobuf::int32 value);

  // optional double online_max_speed = 8;
  bool has_online_max_speed() const;
  void clear_online_max_speed();
  static const int kOnlineMaxSpeedFieldNumber = 8;
  double online_max_speed() const;
  void set_online_max_speed(double value);

  // optional double offline_max_acc = 10;
  bool has_offline_max_acc() const;
  void clear_offline_max_acc();
  static const int kOfflineMaxAccFieldNumber = 10;
  double offline_max_acc() const;
  void set_offline_max_acc(double value);

  // optional double offline_max_dec = 11;
  bool has_offline_max_dec() const;
  void clear_offline_max_dec();
  static const int kOfflineMaxDecFieldNumber = 11;
  double offline_max_dec() const;
  void set_offline_max_dec(double value);

  // optional double offline_max_speed = 12;
  bool has_offline_max_speed() const;
  void clear_offline_max_speed();
  static const int kOfflineMaxSpeedFieldNumber = 12;
  double offline_max_speed() const;
  void set_offline_max_speed(double value);

  // optional double sampling_unit_v = 14;
  bool has_sampling_unit_v() const;
  void clear_sampling_unit_v();
  static const int kSamplingUnitVFieldNumber = 14;
  double sampling_unit_v() const;
  void set_sampling_unit_v(double value);

  // optional double max_sampling_unit_v = 15;
  bool has_max_sampling_unit_v() const;
  void clear_max_sampling_unit_v();
  static const int kMaxSamplingUnitVFieldNumber = 15;
  double max_sampling_unit_v() const;
  void set_max_sampling_unit_v(double value);

  // optional int32 num_evaluated_points = 13;
  bool has_num_evaluated_points() const;
  void clear_num_evaluated_points();
  static const int kNumEvaluatedPointsFieldNumber = 13;
  ::google::protobuf::int32 num_evaluated_points() const;
  void set_num_evaluated_points(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:acu.planning.PolyVTSpeedConfig)
 private:
  void set_has_total_time();
  void clear_has_total_time();
  void set_has_total_s();
  void clear_has_total_s();
  void set_has_num_t_layers();
  void clear_has_num_t_layers();
  void set_has_online_num_v_layers();
  void clear_has_online_num_v_layers();
  void set_has_matrix_dim_s();
  void clear_has_matrix_dim_s();
  void set_has_online_max_acc();
  void clear_has_online_max_acc();
  void set_has_online_max_dec();
  void clear_has_online_max_dec();
  void set_has_online_max_speed();
  void clear_has_online_max_speed();
  void set_has_offline_num_v_layers();
  void clear_has_offline_num_v_layers();
  void set_has_offline_max_acc();
  void clear_has_offline_max_acc();
  void set_has_offline_max_dec();
  void clear_has_offline_max_dec();
  void set_has_offline_max_speed();
  void clear_has_offline_max_speed();
  void set_has_num_evaluated_points();
  void clear_has_num_evaluated_points();
  void set_has_sampling_unit_v();
  void clear_has_sampling_unit_v();
  void set_has_max_sampling_unit_v();
  void clear_has_max_sampling_unit_v();
  void set_has_st_boundary_config();
  void clear_has_st_boundary_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::acu::planning::StBoundaryConfig* st_boundary_config_;
  double total_time_;
  double total_s_;
  ::google::protobuf::int32 num_t_layers_;
  ::google::protobuf::int32 online_num_v_layers_;
  double online_max_acc_;
  double online_max_dec_;
  ::google::protobuf::int32 matrix_dim_s_;
  ::google::protobuf::int32 offline_num_v_layers_;
  double online_max_speed_;
  double offline_max_acc_;
  double offline_max_dec_;
  double offline_max_speed_;
  double sampling_unit_v_;
  double max_sampling_unit_v_;
  ::google::protobuf::int32 num_evaluated_points_;
  friend struct ::protobuf_poly_5fvt_5fspeed_5fconfig_2eproto::TableStruct;
  friend void ::protobuf_poly_5fvt_5fspeed_5fconfig_2eproto::InitDefaultsPolyVTSpeedConfigImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PolyVTSpeedConfig

// optional double total_time = 1 [default = 0];
inline bool PolyVTSpeedConfig::has_total_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PolyVTSpeedConfig::set_has_total_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PolyVTSpeedConfig::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PolyVTSpeedConfig::clear_total_time() {
  total_time_ = 0;
  clear_has_total_time();
}
inline double PolyVTSpeedConfig::total_time() const {
  // @@protoc_insertion_point(field_get:acu.planning.PolyVTSpeedConfig.total_time)
  return total_time_;
}
inline void PolyVTSpeedConfig::set_total_time(double value) {
  set_has_total_time();
  total_time_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.PolyVTSpeedConfig.total_time)
}

// optional double total_s = 2 [default = 0];
inline bool PolyVTSpeedConfig::has_total_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PolyVTSpeedConfig::set_has_total_s() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PolyVTSpeedConfig::clear_has_total_s() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PolyVTSpeedConfig::clear_total_s() {
  total_s_ = 0;
  clear_has_total_s();
}
inline double PolyVTSpeedConfig::total_s() const {
  // @@protoc_insertion_point(field_get:acu.planning.PolyVTSpeedConfig.total_s)
  return total_s_;
}
inline void PolyVTSpeedConfig::set_total_s(double value) {
  set_has_total_s();
  total_s_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.PolyVTSpeedConfig.total_s)
}

// optional int32 num_t_layers = 3;
inline bool PolyVTSpeedConfig::has_num_t_layers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PolyVTSpeedConfig::set_has_num_t_layers() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PolyVTSpeedConfig::clear_has_num_t_layers() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PolyVTSpeedConfig::clear_num_t_layers() {
  num_t_layers_ = 0;
  clear_has_num_t_layers();
}
inline ::google::protobuf::int32 PolyVTSpeedConfig::num_t_layers() const {
  // @@protoc_insertion_point(field_get:acu.planning.PolyVTSpeedConfig.num_t_layers)
  return num_t_layers_;
}
inline void PolyVTSpeedConfig::set_num_t_layers(::google::protobuf::int32 value) {
  set_has_num_t_layers();
  num_t_layers_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.PolyVTSpeedConfig.num_t_layers)
}

// optional int32 online_num_v_layers = 4;
inline bool PolyVTSpeedConfig::has_online_num_v_layers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PolyVTSpeedConfig::set_has_online_num_v_layers() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PolyVTSpeedConfig::clear_has_online_num_v_layers() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PolyVTSpeedConfig::clear_online_num_v_layers() {
  online_num_v_layers_ = 0;
  clear_has_online_num_v_layers();
}
inline ::google::protobuf::int32 PolyVTSpeedConfig::online_num_v_layers() const {
  // @@protoc_insertion_point(field_get:acu.planning.PolyVTSpeedConfig.online_num_v_layers)
  return online_num_v_layers_;
}
inline void PolyVTSpeedConfig::set_online_num_v_layers(::google::protobuf::int32 value) {
  set_has_online_num_v_layers();
  online_num_v_layers_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.PolyVTSpeedConfig.online_num_v_layers)
}

// optional int32 matrix_dim_s = 5;
inline bool PolyVTSpeedConfig::has_matrix_dim_s() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PolyVTSpeedConfig::set_has_matrix_dim_s() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PolyVTSpeedConfig::clear_has_matrix_dim_s() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PolyVTSpeedConfig::clear_matrix_dim_s() {
  matrix_dim_s_ = 0;
  clear_has_matrix_dim_s();
}
inline ::google::protobuf::int32 PolyVTSpeedConfig::matrix_dim_s() const {
  // @@protoc_insertion_point(field_get:acu.planning.PolyVTSpeedConfig.matrix_dim_s)
  return matrix_dim_s_;
}
inline void PolyVTSpeedConfig::set_matrix_dim_s(::google::protobuf::int32 value) {
  set_has_matrix_dim_s();
  matrix_dim_s_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.PolyVTSpeedConfig.matrix_dim_s)
}

// optional double online_max_acc = 6;
inline bool PolyVTSpeedConfig::has_online_max_acc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PolyVTSpeedConfig::set_has_online_max_acc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PolyVTSpeedConfig::clear_has_online_max_acc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PolyVTSpeedConfig::clear_online_max_acc() {
  online_max_acc_ = 0;
  clear_has_online_max_acc();
}
inline double PolyVTSpeedConfig::online_max_acc() const {
  // @@protoc_insertion_point(field_get:acu.planning.PolyVTSpeedConfig.online_max_acc)
  return online_max_acc_;
}
inline void PolyVTSpeedConfig::set_online_max_acc(double value) {
  set_has_online_max_acc();
  online_max_acc_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.PolyVTSpeedConfig.online_max_acc)
}

// optional double online_max_dec = 7;
inline bool PolyVTSpeedConfig::has_online_max_dec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PolyVTSpeedConfig::set_has_online_max_dec() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PolyVTSpeedConfig::clear_has_online_max_dec() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PolyVTSpeedConfig::clear_online_max_dec() {
  online_max_dec_ = 0;
  clear_has_online_max_dec();
}
inline double PolyVTSpeedConfig::online_max_dec() const {
  // @@protoc_insertion_point(field_get:acu.planning.PolyVTSpeedConfig.online_max_dec)
  return online_max_dec_;
}
inline void PolyVTSpeedConfig::set_online_max_dec(double value) {
  set_has_online_max_dec();
  online_max_dec_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.PolyVTSpeedConfig.online_max_dec)
}

// optional double online_max_speed = 8;
inline bool PolyVTSpeedConfig::has_online_max_speed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PolyVTSpeedConfig::set_has_online_max_speed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PolyVTSpeedConfig::clear_has_online_max_speed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PolyVTSpeedConfig::clear_online_max_speed() {
  online_max_speed_ = 0;
  clear_has_online_max_speed();
}
inline double PolyVTSpeedConfig::online_max_speed() const {
  // @@protoc_insertion_point(field_get:acu.planning.PolyVTSpeedConfig.online_max_speed)
  return online_max_speed_;
}
inline void PolyVTSpeedConfig::set_online_max_speed(double value) {
  set_has_online_max_speed();
  online_max_speed_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.PolyVTSpeedConfig.online_max_speed)
}

// optional int32 offline_num_v_layers = 9;
inline bool PolyVTSpeedConfig::has_offline_num_v_layers() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PolyVTSpeedConfig::set_has_offline_num_v_layers() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PolyVTSpeedConfig::clear_has_offline_num_v_layers() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PolyVTSpeedConfig::clear_offline_num_v_layers() {
  offline_num_v_layers_ = 0;
  clear_has_offline_num_v_layers();
}
inline ::google::protobuf::int32 PolyVTSpeedConfig::offline_num_v_layers() const {
  // @@protoc_insertion_point(field_get:acu.planning.PolyVTSpeedConfig.offline_num_v_layers)
  return offline_num_v_layers_;
}
inline void PolyVTSpeedConfig::set_offline_num_v_layers(::google::protobuf::int32 value) {
  set_has_offline_num_v_layers();
  offline_num_v_layers_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.PolyVTSpeedConfig.offline_num_v_layers)
}

// optional double offline_max_acc = 10;
inline bool PolyVTSpeedConfig::has_offline_max_acc() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PolyVTSpeedConfig::set_has_offline_max_acc() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PolyVTSpeedConfig::clear_has_offline_max_acc() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PolyVTSpeedConfig::clear_offline_max_acc() {
  offline_max_acc_ = 0;
  clear_has_offline_max_acc();
}
inline double PolyVTSpeedConfig::offline_max_acc() const {
  // @@protoc_insertion_point(field_get:acu.planning.PolyVTSpeedConfig.offline_max_acc)
  return offline_max_acc_;
}
inline void PolyVTSpeedConfig::set_offline_max_acc(double value) {
  set_has_offline_max_acc();
  offline_max_acc_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.PolyVTSpeedConfig.offline_max_acc)
}

// optional double offline_max_dec = 11;
inline bool PolyVTSpeedConfig::has_offline_max_dec() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PolyVTSpeedConfig::set_has_offline_max_dec() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PolyVTSpeedConfig::clear_has_offline_max_dec() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PolyVTSpeedConfig::clear_offline_max_dec() {
  offline_max_dec_ = 0;
  clear_has_offline_max_dec();
}
inline double PolyVTSpeedConfig::offline_max_dec() const {
  // @@protoc_insertion_point(field_get:acu.planning.PolyVTSpeedConfig.offline_max_dec)
  return offline_max_dec_;
}
inline void PolyVTSpeedConfig::set_offline_max_dec(double value) {
  set_has_offline_max_dec();
  offline_max_dec_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.PolyVTSpeedConfig.offline_max_dec)
}

// optional double offline_max_speed = 12;
inline bool PolyVTSpeedConfig::has_offline_max_speed() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PolyVTSpeedConfig::set_has_offline_max_speed() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PolyVTSpeedConfig::clear_has_offline_max_speed() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PolyVTSpeedConfig::clear_offline_max_speed() {
  offline_max_speed_ = 0;
  clear_has_offline_max_speed();
}
inline double PolyVTSpeedConfig::offline_max_speed() const {
  // @@protoc_insertion_point(field_get:acu.planning.PolyVTSpeedConfig.offline_max_speed)
  return offline_max_speed_;
}
inline void PolyVTSpeedConfig::set_offline_max_speed(double value) {
  set_has_offline_max_speed();
  offline_max_speed_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.PolyVTSpeedConfig.offline_max_speed)
}

// optional int32 num_evaluated_points = 13;
inline bool PolyVTSpeedConfig::has_num_evaluated_points() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PolyVTSpeedConfig::set_has_num_evaluated_points() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PolyVTSpeedConfig::clear_has_num_evaluated_points() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PolyVTSpeedConfig::clear_num_evaluated_points() {
  num_evaluated_points_ = 0;
  clear_has_num_evaluated_points();
}
inline ::google::protobuf::int32 PolyVTSpeedConfig::num_evaluated_points() const {
  // @@protoc_insertion_point(field_get:acu.planning.PolyVTSpeedConfig.num_evaluated_points)
  return num_evaluated_points_;
}
inline void PolyVTSpeedConfig::set_num_evaluated_points(::google::protobuf::int32 value) {
  set_has_num_evaluated_points();
  num_evaluated_points_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.PolyVTSpeedConfig.num_evaluated_points)
}

// optional double sampling_unit_v = 14;
inline bool PolyVTSpeedConfig::has_sampling_unit_v() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PolyVTSpeedConfig::set_has_sampling_unit_v() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PolyVTSpeedConfig::clear_has_sampling_unit_v() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PolyVTSpeedConfig::clear_sampling_unit_v() {
  sampling_unit_v_ = 0;
  clear_has_sampling_unit_v();
}
inline double PolyVTSpeedConfig::sampling_unit_v() const {
  // @@protoc_insertion_point(field_get:acu.planning.PolyVTSpeedConfig.sampling_unit_v)
  return sampling_unit_v_;
}
inline void PolyVTSpeedConfig::set_sampling_unit_v(double value) {
  set_has_sampling_unit_v();
  sampling_unit_v_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.PolyVTSpeedConfig.sampling_unit_v)
}

// optional double max_sampling_unit_v = 15;
inline bool PolyVTSpeedConfig::has_max_sampling_unit_v() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PolyVTSpeedConfig::set_has_max_sampling_unit_v() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PolyVTSpeedConfig::clear_has_max_sampling_unit_v() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PolyVTSpeedConfig::clear_max_sampling_unit_v() {
  max_sampling_unit_v_ = 0;
  clear_has_max_sampling_unit_v();
}
inline double PolyVTSpeedConfig::max_sampling_unit_v() const {
  // @@protoc_insertion_point(field_get:acu.planning.PolyVTSpeedConfig.max_sampling_unit_v)
  return max_sampling_unit_v_;
}
inline void PolyVTSpeedConfig::set_max_sampling_unit_v(double value) {
  set_has_max_sampling_unit_v();
  max_sampling_unit_v_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.PolyVTSpeedConfig.max_sampling_unit_v)
}

// optional .acu.planning.StBoundaryConfig st_boundary_config = 16;
inline bool PolyVTSpeedConfig::has_st_boundary_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PolyVTSpeedConfig::set_has_st_boundary_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PolyVTSpeedConfig::clear_has_st_boundary_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::acu::planning::StBoundaryConfig& PolyVTSpeedConfig::st_boundary_config() const {
  const ::acu::planning::StBoundaryConfig* p = st_boundary_config_;
  // @@protoc_insertion_point(field_get:acu.planning.PolyVTSpeedConfig.st_boundary_config)
  return p != NULL ? *p : *reinterpret_cast<const ::acu::planning::StBoundaryConfig*>(
      &::acu::planning::_StBoundaryConfig_default_instance_);
}
inline ::acu::planning::StBoundaryConfig* PolyVTSpeedConfig::release_st_boundary_config() {
  // @@protoc_insertion_point(field_release:acu.planning.PolyVTSpeedConfig.st_boundary_config)
  clear_has_st_boundary_config();
  ::acu::planning::StBoundaryConfig* temp = st_boundary_config_;
  st_boundary_config_ = NULL;
  return temp;
}
inline ::acu::planning::StBoundaryConfig* PolyVTSpeedConfig::mutable_st_boundary_config() {
  set_has_st_boundary_config();
  if (st_boundary_config_ == NULL) {
    st_boundary_config_ = new ::acu::planning::StBoundaryConfig;
  }
  // @@protoc_insertion_point(field_mutable:acu.planning.PolyVTSpeedConfig.st_boundary_config)
  return st_boundary_config_;
}
inline void PolyVTSpeedConfig::set_allocated_st_boundary_config(::acu::planning::StBoundaryConfig* st_boundary_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(st_boundary_config_);
  }
  if (st_boundary_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      st_boundary_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, st_boundary_config, submessage_arena);
    }
    set_has_st_boundary_config();
  } else {
    clear_has_st_boundary_config();
  }
  st_boundary_config_ = st_boundary_config;
  // @@protoc_insertion_point(field_set_allocated:acu.planning.PolyVTSpeedConfig.st_boundary_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace acu

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_poly_5fvt_5fspeed_5fconfig_2eproto__INCLUDED
