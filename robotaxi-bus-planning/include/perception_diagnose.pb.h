// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception_diagnose.proto

#ifndef PROTOBUF_perception_5fdiagnose_2eproto__INCLUDED
#define PROTOBUF_perception_5fdiagnose_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_perception_5fdiagnose_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPerceptionDiagnoseImpl();
void InitDefaultsPerceptionDiagnose();
void InitDefaultsSystemDiagnoseImpl();
void InitDefaultsSystemDiagnose();
void InitDefaultsDiagnoseImpl();
void InitDefaultsDiagnose();
inline void InitDefaults() {
  InitDefaultsPerceptionDiagnose();
  InitDefaultsSystemDiagnose();
  InitDefaultsDiagnose();
}
}  // namespace protobuf_perception_5fdiagnose_2eproto
namespace calmcar {
namespace perception {
class Diagnose;
class DiagnoseDefaultTypeInternal;
extern DiagnoseDefaultTypeInternal _Diagnose_default_instance_;
class PerceptionDiagnose;
class PerceptionDiagnoseDefaultTypeInternal;
extern PerceptionDiagnoseDefaultTypeInternal _PerceptionDiagnose_default_instance_;
class SystemDiagnose;
class SystemDiagnoseDefaultTypeInternal;
extern SystemDiagnoseDefaultTypeInternal _SystemDiagnose_default_instance_;
}  // namespace perception
}  // namespace calmcar
namespace calmcar {
namespace perception {

enum SystemDiagnose_CameraSubmodule {
  SystemDiagnose_CameraSubmodule_CAMERA_INVALID = 0,
  SystemDiagnose_CameraSubmodule_CAMERA_FC = 1,
  SystemDiagnose_CameraSubmodule_CAMERA_FC_NEAR = 2,
  SystemDiagnose_CameraSubmodule_CAMERA_FL = 3,
  SystemDiagnose_CameraSubmodule_CAMERA_FR = 4,
  SystemDiagnose_CameraSubmodule_CAMERA_RC = 5,
  SystemDiagnose_CameraSubmodule_CAMERA_RL = 6,
  SystemDiagnose_CameraSubmodule_CAMERA_RR = 7,
  SystemDiagnose_CameraSubmodule_CAMERA_FC_FAR = 8,
  SystemDiagnose_CameraSubmodule_SystemDiagnose_CameraSubmodule_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_CameraSubmodule_SystemDiagnose_CameraSubmodule_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_CameraSubmodule_IsValid(int value);
const SystemDiagnose_CameraSubmodule SystemDiagnose_CameraSubmodule_CameraSubmodule_MIN = SystemDiagnose_CameraSubmodule_CAMERA_INVALID;
const SystemDiagnose_CameraSubmodule SystemDiagnose_CameraSubmodule_CameraSubmodule_MAX = SystemDiagnose_CameraSubmodule_CAMERA_FC_FAR;
const int SystemDiagnose_CameraSubmodule_CameraSubmodule_ARRAYSIZE = SystemDiagnose_CameraSubmodule_CameraSubmodule_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_CameraSubmodule_descriptor();
inline const ::std::string& SystemDiagnose_CameraSubmodule_Name(SystemDiagnose_CameraSubmodule value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_CameraSubmodule_descriptor(), value);
}
inline bool SystemDiagnose_CameraSubmodule_Parse(
    const ::std::string& name, SystemDiagnose_CameraSubmodule* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_CameraSubmodule>(
    SystemDiagnose_CameraSubmodule_descriptor(), name, value);
}
enum SystemDiagnose_CameraCameraFunctionStatus {
  SystemDiagnose_CameraCameraFunctionStatus_CAMERA_CAMERA_FUNC_ENABLE_NONE = 0,
  SystemDiagnose_CameraCameraFunctionStatus_CAMERA_CAMERA_FUNC_ENABLE_CAMERA = 1,
  SystemDiagnose_CameraCameraFunctionStatus_CAMERA_CAMERA_FUNC_ENABLE_VIDEO = 2,
  SystemDiagnose_CameraCameraFunctionStatus_SystemDiagnose_CameraCameraFunctionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_CameraCameraFunctionStatus_SystemDiagnose_CameraCameraFunctionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_CameraCameraFunctionStatus_IsValid(int value);
const SystemDiagnose_CameraCameraFunctionStatus SystemDiagnose_CameraCameraFunctionStatus_CameraCameraFunctionStatus_MIN = SystemDiagnose_CameraCameraFunctionStatus_CAMERA_CAMERA_FUNC_ENABLE_NONE;
const SystemDiagnose_CameraCameraFunctionStatus SystemDiagnose_CameraCameraFunctionStatus_CameraCameraFunctionStatus_MAX = SystemDiagnose_CameraCameraFunctionStatus_CAMERA_CAMERA_FUNC_ENABLE_VIDEO;
const int SystemDiagnose_CameraCameraFunctionStatus_CameraCameraFunctionStatus_ARRAYSIZE = SystemDiagnose_CameraCameraFunctionStatus_CameraCameraFunctionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_CameraCameraFunctionStatus_descriptor();
inline const ::std::string& SystemDiagnose_CameraCameraFunctionStatus_Name(SystemDiagnose_CameraCameraFunctionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_CameraCameraFunctionStatus_descriptor(), value);
}
inline bool SystemDiagnose_CameraCameraFunctionStatus_Parse(
    const ::std::string& name, SystemDiagnose_CameraCameraFunctionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_CameraCameraFunctionStatus>(
    SystemDiagnose_CameraCameraFunctionStatus_descriptor(), name, value);
}
enum SystemDiagnose_CameraCameraInitStatus {
  SystemDiagnose_CameraCameraInitStatus_CAMERA_CAMERA_INIT_SUCCESS = 0,
  SystemDiagnose_CameraCameraInitStatus_CAMERA_CAMERA_INIT_ERROR_CONFIG = 1,
  SystemDiagnose_CameraCameraInitStatus_CAMERA_CAMERA_INIT_ERROR_DEVICE = 2,
  SystemDiagnose_CameraCameraInitStatus_CAMERA_CAMERA_INIT_ERROR_LINK = 4,
  SystemDiagnose_CameraCameraInitStatus_CAMERA_CAMERA_INIT_ERROR_ISP = 8,
  SystemDiagnose_CameraCameraInitStatus_SystemDiagnose_CameraCameraInitStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_CameraCameraInitStatus_SystemDiagnose_CameraCameraInitStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_CameraCameraInitStatus_IsValid(int value);
const SystemDiagnose_CameraCameraInitStatus SystemDiagnose_CameraCameraInitStatus_CameraCameraInitStatus_MIN = SystemDiagnose_CameraCameraInitStatus_CAMERA_CAMERA_INIT_SUCCESS;
const SystemDiagnose_CameraCameraInitStatus SystemDiagnose_CameraCameraInitStatus_CameraCameraInitStatus_MAX = SystemDiagnose_CameraCameraInitStatus_CAMERA_CAMERA_INIT_ERROR_ISP;
const int SystemDiagnose_CameraCameraInitStatus_CameraCameraInitStatus_ARRAYSIZE = SystemDiagnose_CameraCameraInitStatus_CameraCameraInitStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_CameraCameraInitStatus_descriptor();
inline const ::std::string& SystemDiagnose_CameraCameraInitStatus_Name(SystemDiagnose_CameraCameraInitStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_CameraCameraInitStatus_descriptor(), value);
}
inline bool SystemDiagnose_CameraCameraInitStatus_Parse(
    const ::std::string& name, SystemDiagnose_CameraCameraInitStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_CameraCameraInitStatus>(
    SystemDiagnose_CameraCameraInitStatus_descriptor(), name, value);
}
enum SystemDiagnose_CameraCameraRunStatus {
  SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_SUCCESS = 0,
  SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_EOF = 1,
  SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_WARN_TOO_SLOW = 2,
  SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_WARN_TIMESTAMP = 4,
  SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_WARN_TIMEOUT = 8,
  SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_ERROR_TIMEOUT = 16,
  SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_ERROR_INTERNAL_STATUS = 32,
  SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_ERROR_OUT_OF_MEMORY = 64,
  SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_ERROR_ISP = 128,
  SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_ERROR_LINK = 256,
  SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_ERROR_RESOURCE = 512,
  SystemDiagnose_CameraCameraRunStatus_SystemDiagnose_CameraCameraRunStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_CameraCameraRunStatus_SystemDiagnose_CameraCameraRunStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_CameraCameraRunStatus_IsValid(int value);
const SystemDiagnose_CameraCameraRunStatus SystemDiagnose_CameraCameraRunStatus_CameraCameraRunStatus_MIN = SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_SUCCESS;
const SystemDiagnose_CameraCameraRunStatus SystemDiagnose_CameraCameraRunStatus_CameraCameraRunStatus_MAX = SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_ERROR_RESOURCE;
const int SystemDiagnose_CameraCameraRunStatus_CameraCameraRunStatus_ARRAYSIZE = SystemDiagnose_CameraCameraRunStatus_CameraCameraRunStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_CameraCameraRunStatus_descriptor();
inline const ::std::string& SystemDiagnose_CameraCameraRunStatus_Name(SystemDiagnose_CameraCameraRunStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_CameraCameraRunStatus_descriptor(), value);
}
inline bool SystemDiagnose_CameraCameraRunStatus_Parse(
    const ::std::string& name, SystemDiagnose_CameraCameraRunStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_CameraCameraRunStatus>(
    SystemDiagnose_CameraCameraRunStatus_descriptor(), name, value);
}
enum SystemDiagnose_CanSubmodule {
  SystemDiagnose_CanSubmodule_CAN_INVALID = 0,
  SystemDiagnose_CanSubmodule_CAN_CHASSIS = 1,
  SystemDiagnose_CanSubmodule_CAN_RTK = 2,
  SystemDiagnose_CanSubmodule_CAN_RADAR_FC = 3,
  SystemDiagnose_CanSubmodule_SystemDiagnose_CanSubmodule_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_CanSubmodule_SystemDiagnose_CanSubmodule_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_CanSubmodule_IsValid(int value);
const SystemDiagnose_CanSubmodule SystemDiagnose_CanSubmodule_CanSubmodule_MIN = SystemDiagnose_CanSubmodule_CAN_INVALID;
const SystemDiagnose_CanSubmodule SystemDiagnose_CanSubmodule_CanSubmodule_MAX = SystemDiagnose_CanSubmodule_CAN_RADAR_FC;
const int SystemDiagnose_CanSubmodule_CanSubmodule_ARRAYSIZE = SystemDiagnose_CanSubmodule_CanSubmodule_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_CanSubmodule_descriptor();
inline const ::std::string& SystemDiagnose_CanSubmodule_Name(SystemDiagnose_CanSubmodule value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_CanSubmodule_descriptor(), value);
}
inline bool SystemDiagnose_CanSubmodule_Parse(
    const ::std::string& name, SystemDiagnose_CanSubmodule* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_CanSubmodule>(
    SystemDiagnose_CanSubmodule_descriptor(), name, value);
}
enum SystemDiagnose_CanChassisInitStatus {
  SystemDiagnose_CanChassisInitStatus_CAN_CHASSIS_INIT_SUCCESS = 0,
  SystemDiagnose_CanChassisInitStatus_CAN_CHASSIS_INIT_DBC_ERROR = 1,
  SystemDiagnose_CanChassisInitStatus_CAN_CHASSIS_INIT_PORT_ERROR = 2,
  SystemDiagnose_CanChassisInitStatus_SystemDiagnose_CanChassisInitStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_CanChassisInitStatus_SystemDiagnose_CanChassisInitStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_CanChassisInitStatus_IsValid(int value);
const SystemDiagnose_CanChassisInitStatus SystemDiagnose_CanChassisInitStatus_CanChassisInitStatus_MIN = SystemDiagnose_CanChassisInitStatus_CAN_CHASSIS_INIT_SUCCESS;
const SystemDiagnose_CanChassisInitStatus SystemDiagnose_CanChassisInitStatus_CanChassisInitStatus_MAX = SystemDiagnose_CanChassisInitStatus_CAN_CHASSIS_INIT_PORT_ERROR;
const int SystemDiagnose_CanChassisInitStatus_CanChassisInitStatus_ARRAYSIZE = SystemDiagnose_CanChassisInitStatus_CanChassisInitStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_CanChassisInitStatus_descriptor();
inline const ::std::string& SystemDiagnose_CanChassisInitStatus_Name(SystemDiagnose_CanChassisInitStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_CanChassisInitStatus_descriptor(), value);
}
inline bool SystemDiagnose_CanChassisInitStatus_Parse(
    const ::std::string& name, SystemDiagnose_CanChassisInitStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_CanChassisInitStatus>(
    SystemDiagnose_CanChassisInitStatus_descriptor(), name, value);
}
enum SystemDiagnose_CanChassisRunStatus {
  SystemDiagnose_CanChassisRunStatus_CAN_CHASSIS_RUN_SUCCESS = 0,
  SystemDiagnose_CanChassisRunStatus_CAN_CHASSIS_RUN_WARN_TOO_SLOW = 1,
  SystemDiagnose_CanChassisRunStatus_CAN_CHASSIS_RUN_ERROR_CAN_READ = 2,
  SystemDiagnose_CanChassisRunStatus_CAN_CHASSIS_RUN_HAS_VELOCITY = 4,
  SystemDiagnose_CanChassisRunStatus_CAN_CHASSIS_RUN_HAS_ACCLERATION = 8,
  SystemDiagnose_CanChassisRunStatus_CAN_CHASSIS_RUN_HAS_YAW_RATE = 16,
  SystemDiagnose_CanChassisRunStatus_CAN_CHASSIS_RUN_HAS_STEEL_ANGLE = 32,
  SystemDiagnose_CanChassisRunStatus_CAN_CHASSIS_RUN_HAS_WHEEL_ANGLE = 64,
  SystemDiagnose_CanChassisRunStatus_SystemDiagnose_CanChassisRunStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_CanChassisRunStatus_SystemDiagnose_CanChassisRunStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_CanChassisRunStatus_IsValid(int value);
const SystemDiagnose_CanChassisRunStatus SystemDiagnose_CanChassisRunStatus_CanChassisRunStatus_MIN = SystemDiagnose_CanChassisRunStatus_CAN_CHASSIS_RUN_SUCCESS;
const SystemDiagnose_CanChassisRunStatus SystemDiagnose_CanChassisRunStatus_CanChassisRunStatus_MAX = SystemDiagnose_CanChassisRunStatus_CAN_CHASSIS_RUN_HAS_WHEEL_ANGLE;
const int SystemDiagnose_CanChassisRunStatus_CanChassisRunStatus_ARRAYSIZE = SystemDiagnose_CanChassisRunStatus_CanChassisRunStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_CanChassisRunStatus_descriptor();
inline const ::std::string& SystemDiagnose_CanChassisRunStatus_Name(SystemDiagnose_CanChassisRunStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_CanChassisRunStatus_descriptor(), value);
}
inline bool SystemDiagnose_CanChassisRunStatus_Parse(
    const ::std::string& name, SystemDiagnose_CanChassisRunStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_CanChassisRunStatus>(
    SystemDiagnose_CanChassisRunStatus_descriptor(), name, value);
}
enum SystemDiagnose_CanRtkInitStatus {
  SystemDiagnose_CanRtkInitStatus_CAN_RTK_INIT_SUCCESS = 0,
  SystemDiagnose_CanRtkInitStatus_CAN_RTK_INIT_DBC_ERROR = 1,
  SystemDiagnose_CanRtkInitStatus_CAN_RTK_INIT_PORT_ERROR = 2,
  SystemDiagnose_CanRtkInitStatus_SystemDiagnose_CanRtkInitStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_CanRtkInitStatus_SystemDiagnose_CanRtkInitStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_CanRtkInitStatus_IsValid(int value);
const SystemDiagnose_CanRtkInitStatus SystemDiagnose_CanRtkInitStatus_CanRtkInitStatus_MIN = SystemDiagnose_CanRtkInitStatus_CAN_RTK_INIT_SUCCESS;
const SystemDiagnose_CanRtkInitStatus SystemDiagnose_CanRtkInitStatus_CanRtkInitStatus_MAX = SystemDiagnose_CanRtkInitStatus_CAN_RTK_INIT_PORT_ERROR;
const int SystemDiagnose_CanRtkInitStatus_CanRtkInitStatus_ARRAYSIZE = SystemDiagnose_CanRtkInitStatus_CanRtkInitStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_CanRtkInitStatus_descriptor();
inline const ::std::string& SystemDiagnose_CanRtkInitStatus_Name(SystemDiagnose_CanRtkInitStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_CanRtkInitStatus_descriptor(), value);
}
inline bool SystemDiagnose_CanRtkInitStatus_Parse(
    const ::std::string& name, SystemDiagnose_CanRtkInitStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_CanRtkInitStatus>(
    SystemDiagnose_CanRtkInitStatus_descriptor(), name, value);
}
enum SystemDiagnose_CanRtkRunStatus {
  SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_SUCCESS = 0,
  SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_WARN_TOO_SLOW = 1,
  SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_ERROR_CAN_READ = 2,
  SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_HAS_VELOCITY = 4,
  SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_HAS_ACCELERATION = 8,
  SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_HAS_HORIZONTAL_GPS = 16,
  SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_HAS_ALTITUDE = 32,
  SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_HAS_YAW = 64,
  SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_HAS_GYRO_XY = 128,
  SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_HAS_GYRO_Z = 256,
  SystemDiagnose_CanRtkRunStatus_SystemDiagnose_CanRtkRunStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_CanRtkRunStatus_SystemDiagnose_CanRtkRunStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_CanRtkRunStatus_IsValid(int value);
const SystemDiagnose_CanRtkRunStatus SystemDiagnose_CanRtkRunStatus_CanRtkRunStatus_MIN = SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_SUCCESS;
const SystemDiagnose_CanRtkRunStatus SystemDiagnose_CanRtkRunStatus_CanRtkRunStatus_MAX = SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_HAS_GYRO_Z;
const int SystemDiagnose_CanRtkRunStatus_CanRtkRunStatus_ARRAYSIZE = SystemDiagnose_CanRtkRunStatus_CanRtkRunStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_CanRtkRunStatus_descriptor();
inline const ::std::string& SystemDiagnose_CanRtkRunStatus_Name(SystemDiagnose_CanRtkRunStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_CanRtkRunStatus_descriptor(), value);
}
inline bool SystemDiagnose_CanRtkRunStatus_Parse(
    const ::std::string& name, SystemDiagnose_CanRtkRunStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_CanRtkRunStatus>(
    SystemDiagnose_CanRtkRunStatus_descriptor(), name, value);
}
enum SystemDiagnose_CanRadarFunctionStatus {
  SystemDiagnose_CanRadarFunctionStatus_CAN_RADAR_FUNC_NONE = 0,
  SystemDiagnose_CanRadarFunctionStatus_CAN_RADAR_FUNC_ENABLE_FC = 1,
  SystemDiagnose_CanRadarFunctionStatus_SystemDiagnose_CanRadarFunctionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_CanRadarFunctionStatus_SystemDiagnose_CanRadarFunctionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_CanRadarFunctionStatus_IsValid(int value);
const SystemDiagnose_CanRadarFunctionStatus SystemDiagnose_CanRadarFunctionStatus_CanRadarFunctionStatus_MIN = SystemDiagnose_CanRadarFunctionStatus_CAN_RADAR_FUNC_NONE;
const SystemDiagnose_CanRadarFunctionStatus SystemDiagnose_CanRadarFunctionStatus_CanRadarFunctionStatus_MAX = SystemDiagnose_CanRadarFunctionStatus_CAN_RADAR_FUNC_ENABLE_FC;
const int SystemDiagnose_CanRadarFunctionStatus_CanRadarFunctionStatus_ARRAYSIZE = SystemDiagnose_CanRadarFunctionStatus_CanRadarFunctionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_CanRadarFunctionStatus_descriptor();
inline const ::std::string& SystemDiagnose_CanRadarFunctionStatus_Name(SystemDiagnose_CanRadarFunctionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_CanRadarFunctionStatus_descriptor(), value);
}
inline bool SystemDiagnose_CanRadarFunctionStatus_Parse(
    const ::std::string& name, SystemDiagnose_CanRadarFunctionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_CanRadarFunctionStatus>(
    SystemDiagnose_CanRadarFunctionStatus_descriptor(), name, value);
}
enum SystemDiagnose_CanRadarInitStatus {
  SystemDiagnose_CanRadarInitStatus_CAN_RADAR_INIT_SUCCESS = 0,
  SystemDiagnose_CanRadarInitStatus_CAN_RADAR_FC_INIT_DBC_ERROR = 1,
  SystemDiagnose_CanRadarInitStatus_CAN_RADAR_FC_INIT_PORT_ERROR = 2,
  SystemDiagnose_CanRadarInitStatus_SystemDiagnose_CanRadarInitStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_CanRadarInitStatus_SystemDiagnose_CanRadarInitStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_CanRadarInitStatus_IsValid(int value);
const SystemDiagnose_CanRadarInitStatus SystemDiagnose_CanRadarInitStatus_CanRadarInitStatus_MIN = SystemDiagnose_CanRadarInitStatus_CAN_RADAR_INIT_SUCCESS;
const SystemDiagnose_CanRadarInitStatus SystemDiagnose_CanRadarInitStatus_CanRadarInitStatus_MAX = SystemDiagnose_CanRadarInitStatus_CAN_RADAR_FC_INIT_PORT_ERROR;
const int SystemDiagnose_CanRadarInitStatus_CanRadarInitStatus_ARRAYSIZE = SystemDiagnose_CanRadarInitStatus_CanRadarInitStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_CanRadarInitStatus_descriptor();
inline const ::std::string& SystemDiagnose_CanRadarInitStatus_Name(SystemDiagnose_CanRadarInitStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_CanRadarInitStatus_descriptor(), value);
}
inline bool SystemDiagnose_CanRadarInitStatus_Parse(
    const ::std::string& name, SystemDiagnose_CanRadarInitStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_CanRadarInitStatus>(
    SystemDiagnose_CanRadarInitStatus_descriptor(), name, value);
}
enum SystemDiagnose_CanRadarRunStatus {
  SystemDiagnose_CanRadarRunStatus_CAN_RADAR_RUN_SUCCESS = 0,
  SystemDiagnose_CanRadarRunStatus_CAN_RADAR_FC_RUN_WARN_TOO_SLOW = 1,
  SystemDiagnose_CanRadarRunStatus_CAN_RADAR_FC_RUN_ERROR_CAN_READ = 2,
  SystemDiagnose_CanRadarRunStatus_CAN_RADAR_FC_RUN_NO_OBJECT = 4,
  SystemDiagnose_CanRadarRunStatus_SystemDiagnose_CanRadarRunStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_CanRadarRunStatus_SystemDiagnose_CanRadarRunStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_CanRadarRunStatus_IsValid(int value);
const SystemDiagnose_CanRadarRunStatus SystemDiagnose_CanRadarRunStatus_CanRadarRunStatus_MIN = SystemDiagnose_CanRadarRunStatus_CAN_RADAR_RUN_SUCCESS;
const SystemDiagnose_CanRadarRunStatus SystemDiagnose_CanRadarRunStatus_CanRadarRunStatus_MAX = SystemDiagnose_CanRadarRunStatus_CAN_RADAR_FC_RUN_NO_OBJECT;
const int SystemDiagnose_CanRadarRunStatus_CanRadarRunStatus_ARRAYSIZE = SystemDiagnose_CanRadarRunStatus_CanRadarRunStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_CanRadarRunStatus_descriptor();
inline const ::std::string& SystemDiagnose_CanRadarRunStatus_Name(SystemDiagnose_CanRadarRunStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_CanRadarRunStatus_descriptor(), value);
}
inline bool SystemDiagnose_CanRadarRunStatus_Parse(
    const ::std::string& name, SystemDiagnose_CanRadarRunStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_CanRadarRunStatus>(
    SystemDiagnose_CanRadarRunStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemSubmodule {
  SystemDiagnose_SystemSubmodule_SYSTEM_INVALID = 0,
  SystemDiagnose_SystemSubmodule_SYSTEM_SYSTEM = 1,
  SystemDiagnose_SystemSubmodule_SYSTEM_CAMERA = 2,
  SystemDiagnose_SystemSubmodule_SYSTEM_INPUT = 3,
  SystemDiagnose_SystemSubmodule_SYSTEM_CAN = 4,
  SystemDiagnose_SystemSubmodule_SYSTEM_PERCEPTION = 5,
  SystemDiagnose_SystemSubmodule_SYSTEM_COMMUNICATION = 6,
  SystemDiagnose_SystemSubmodule_SYSTEM_EVENT = 7,
  SystemDiagnose_SystemSubmodule_SYSTEM_RECORD = 8,
  SystemDiagnose_SystemSubmodule_SystemDiagnose_SystemSubmodule_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemSubmodule_SystemDiagnose_SystemSubmodule_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemSubmodule_IsValid(int value);
const SystemDiagnose_SystemSubmodule SystemDiagnose_SystemSubmodule_SystemSubmodule_MIN = SystemDiagnose_SystemSubmodule_SYSTEM_INVALID;
const SystemDiagnose_SystemSubmodule SystemDiagnose_SystemSubmodule_SystemSubmodule_MAX = SystemDiagnose_SystemSubmodule_SYSTEM_RECORD;
const int SystemDiagnose_SystemSubmodule_SystemSubmodule_ARRAYSIZE = SystemDiagnose_SystemSubmodule_SystemSubmodule_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemSubmodule_descriptor();
inline const ::std::string& SystemDiagnose_SystemSubmodule_Name(SystemDiagnose_SystemSubmodule value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemSubmodule_descriptor(), value);
}
inline bool SystemDiagnose_SystemSubmodule_Parse(
    const ::std::string& name, SystemDiagnose_SystemSubmodule* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemSubmodule>(
    SystemDiagnose_SystemSubmodule_descriptor(), name, value);
}
enum SystemDiagnose_SystemSystemFunctionStatus {
  SystemDiagnose_SystemSystemFunctionStatus_SYSTEM_SYSTEM_FUNC_NONE = 0,
  SystemDiagnose_SystemSystemFunctionStatus_SYSTEM_SYSTEM_FUNC_ENABLE_CAMERA = 1,
  SystemDiagnose_SystemSystemFunctionStatus_SYSTEM_SYSTEM_FUNC_ENABLE_PERCEPTION = 2,
  SystemDiagnose_SystemSystemFunctionStatus_SYSTEM_SYSTEM_FUNC_ENABLE_CAN = 4,
  SystemDiagnose_SystemSystemFunctionStatus_SYSTEM_SYSTEM_FUNC_ENABLE_COMMUNICATION = 8,
  SystemDiagnose_SystemSystemFunctionStatus_SYSTEM_SYSTEM_FUNC_ENABLE_EVENT = 16,
  SystemDiagnose_SystemSystemFunctionStatus_SYSTEM_SYSTEM_FUNC_ENABLE_RECORD = 32,
  SystemDiagnose_SystemSystemFunctionStatus_SystemDiagnose_SystemSystemFunctionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemSystemFunctionStatus_SystemDiagnose_SystemSystemFunctionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemSystemFunctionStatus_IsValid(int value);
const SystemDiagnose_SystemSystemFunctionStatus SystemDiagnose_SystemSystemFunctionStatus_SystemSystemFunctionStatus_MIN = SystemDiagnose_SystemSystemFunctionStatus_SYSTEM_SYSTEM_FUNC_NONE;
const SystemDiagnose_SystemSystemFunctionStatus SystemDiagnose_SystemSystemFunctionStatus_SystemSystemFunctionStatus_MAX = SystemDiagnose_SystemSystemFunctionStatus_SYSTEM_SYSTEM_FUNC_ENABLE_RECORD;
const int SystemDiagnose_SystemSystemFunctionStatus_SystemSystemFunctionStatus_ARRAYSIZE = SystemDiagnose_SystemSystemFunctionStatus_SystemSystemFunctionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemSystemFunctionStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemSystemFunctionStatus_Name(SystemDiagnose_SystemSystemFunctionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemSystemFunctionStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemSystemFunctionStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemSystemFunctionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemSystemFunctionStatus>(
    SystemDiagnose_SystemSystemFunctionStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemSystemInitStatus {
  SystemDiagnose_SystemSystemInitStatus_SYSTEM_SYSTEM_INIT_SUCCESS = 0,
  SystemDiagnose_SystemSystemInitStatus_SYSTEM_SYSTEM_INIT_ERROR_CAMERA = 1,
  SystemDiagnose_SystemSystemInitStatus_SYSTEM_SYSTEM_INIT_ERROR_PERCEPTION = 2,
  SystemDiagnose_SystemSystemInitStatus_SYSTEM_SYSTEM_INIT_ERROR_CAN = 4,
  SystemDiagnose_SystemSystemInitStatus_SYSTEM_SYSTEM_INIT_ERROR_COMMUNICATION = 8,
  SystemDiagnose_SystemSystemInitStatus_SYSTEM_SYSTEM_INIT_ERROR_EVENT = 16,
  SystemDiagnose_SystemSystemInitStatus_SYSTEM_SYSTEM_INIT_ERROR_RECORD = 32,
  SystemDiagnose_SystemSystemInitStatus_SystemDiagnose_SystemSystemInitStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemSystemInitStatus_SystemDiagnose_SystemSystemInitStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemSystemInitStatus_IsValid(int value);
const SystemDiagnose_SystemSystemInitStatus SystemDiagnose_SystemSystemInitStatus_SystemSystemInitStatus_MIN = SystemDiagnose_SystemSystemInitStatus_SYSTEM_SYSTEM_INIT_SUCCESS;
const SystemDiagnose_SystemSystemInitStatus SystemDiagnose_SystemSystemInitStatus_SystemSystemInitStatus_MAX = SystemDiagnose_SystemSystemInitStatus_SYSTEM_SYSTEM_INIT_ERROR_RECORD;
const int SystemDiagnose_SystemSystemInitStatus_SystemSystemInitStatus_ARRAYSIZE = SystemDiagnose_SystemSystemInitStatus_SystemSystemInitStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemSystemInitStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemSystemInitStatus_Name(SystemDiagnose_SystemSystemInitStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemSystemInitStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemSystemInitStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemSystemInitStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemSystemInitStatus>(
    SystemDiagnose_SystemSystemInitStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemSystemRunStatus {
  SystemDiagnose_SystemSystemRunStatus_SYSTEM_SYSTEM_RUN_SUCCESS = 0,
  SystemDiagnose_SystemSystemRunStatus_SYSTEM_SYSTEM_RUN_EOF = 1,
  SystemDiagnose_SystemSystemRunStatus_SYSTEM_SYSTEM_RUN_ERROR_CAMERA = 2,
  SystemDiagnose_SystemSystemRunStatus_SYSTEM_SYSTEM_RUN_ERROR_PERCEPTION = 4,
  SystemDiagnose_SystemSystemRunStatus_SYSTEM_SYSTEM_RUN_ERROR_CAN = 8,
  SystemDiagnose_SystemSystemRunStatus_SYSTEM_SYSTEM_RUN_ERROR_COMMUNICATION = 16,
  SystemDiagnose_SystemSystemRunStatus_SYSTEM_SYSTEM_RUN_ERROR_EVENT = 32,
  SystemDiagnose_SystemSystemRunStatus_SYSTEM_SYSTEM_RUN_ERROR_RECORD = 64,
  SystemDiagnose_SystemSystemRunStatus_SystemDiagnose_SystemSystemRunStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemSystemRunStatus_SystemDiagnose_SystemSystemRunStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemSystemRunStatus_IsValid(int value);
const SystemDiagnose_SystemSystemRunStatus SystemDiagnose_SystemSystemRunStatus_SystemSystemRunStatus_MIN = SystemDiagnose_SystemSystemRunStatus_SYSTEM_SYSTEM_RUN_SUCCESS;
const SystemDiagnose_SystemSystemRunStatus SystemDiagnose_SystemSystemRunStatus_SystemSystemRunStatus_MAX = SystemDiagnose_SystemSystemRunStatus_SYSTEM_SYSTEM_RUN_ERROR_RECORD;
const int SystemDiagnose_SystemSystemRunStatus_SystemSystemRunStatus_ARRAYSIZE = SystemDiagnose_SystemSystemRunStatus_SystemSystemRunStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemSystemRunStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemSystemRunStatus_Name(SystemDiagnose_SystemSystemRunStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemSystemRunStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemSystemRunStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemSystemRunStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemSystemRunStatus>(
    SystemDiagnose_SystemSystemRunStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemCameraFunctionStatus {
  SystemDiagnose_SystemCameraFunctionStatus_SYSTEM_CAMERA_FUNC_NONE = 0,
  SystemDiagnose_SystemCameraFunctionStatus_SYSTEM_CAMERA_FUNC_ENABLE_FC = 1,
  SystemDiagnose_SystemCameraFunctionStatus_SYSTEM_CAMERA_FUNC_ENABLE_FC_NEAR = 2,
  SystemDiagnose_SystemCameraFunctionStatus_SYSTEM_CAMERA_FUNC_ENABLE_FL = 4,
  SystemDiagnose_SystemCameraFunctionStatus_SYSTEM_CAMERA_FUNC_ENABLE_FR = 8,
  SystemDiagnose_SystemCameraFunctionStatus_SYSTEM_CAMERA_FUNC_ENABLE_RC = 16,
  SystemDiagnose_SystemCameraFunctionStatus_SYSTEM_CAMERA_FUNC_ENABLE_RL = 32,
  SystemDiagnose_SystemCameraFunctionStatus_SYSTEM_CAMERA_FUNC_ENABLE_RR = 64,
  SystemDiagnose_SystemCameraFunctionStatus_SYSTEM_CAMERA_FUNC_ENABLE_FC_FAR = 128,
  SystemDiagnose_SystemCameraFunctionStatus_SystemDiagnose_SystemCameraFunctionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemCameraFunctionStatus_SystemDiagnose_SystemCameraFunctionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemCameraFunctionStatus_IsValid(int value);
const SystemDiagnose_SystemCameraFunctionStatus SystemDiagnose_SystemCameraFunctionStatus_SystemCameraFunctionStatus_MIN = SystemDiagnose_SystemCameraFunctionStatus_SYSTEM_CAMERA_FUNC_NONE;
const SystemDiagnose_SystemCameraFunctionStatus SystemDiagnose_SystemCameraFunctionStatus_SystemCameraFunctionStatus_MAX = SystemDiagnose_SystemCameraFunctionStatus_SYSTEM_CAMERA_FUNC_ENABLE_FC_FAR;
const int SystemDiagnose_SystemCameraFunctionStatus_SystemCameraFunctionStatus_ARRAYSIZE = SystemDiagnose_SystemCameraFunctionStatus_SystemCameraFunctionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemCameraFunctionStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemCameraFunctionStatus_Name(SystemDiagnose_SystemCameraFunctionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemCameraFunctionStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemCameraFunctionStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemCameraFunctionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemCameraFunctionStatus>(
    SystemDiagnose_SystemCameraFunctionStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemCameraInitStatus {
  SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_SUCCESS = 0,
  SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_FC = 1,
  SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_FC_NEAR = 2,
  SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_FL = 4,
  SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_FR = 8,
  SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_RC = 16,
  SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_RL = 32,
  SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_RR = 64,
  SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_FC_FAR = 128,
  SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_CONFIG = 256,
  SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_DEVICE = 512,
  SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_LINK = 1024,
  SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_ISP = 2048,
  SystemDiagnose_SystemCameraInitStatus_SystemDiagnose_SystemCameraInitStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemCameraInitStatus_SystemDiagnose_SystemCameraInitStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemCameraInitStatus_IsValid(int value);
const SystemDiagnose_SystemCameraInitStatus SystemDiagnose_SystemCameraInitStatus_SystemCameraInitStatus_MIN = SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_SUCCESS;
const SystemDiagnose_SystemCameraInitStatus SystemDiagnose_SystemCameraInitStatus_SystemCameraInitStatus_MAX = SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_ISP;
const int SystemDiagnose_SystemCameraInitStatus_SystemCameraInitStatus_ARRAYSIZE = SystemDiagnose_SystemCameraInitStatus_SystemCameraInitStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemCameraInitStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemCameraInitStatus_Name(SystemDiagnose_SystemCameraInitStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemCameraInitStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemCameraInitStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemCameraInitStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemCameraInitStatus>(
    SystemDiagnose_SystemCameraInitStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemCameraRunStatus {
  SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_SUCCESS = 0,
  SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_EOF = 1,
  SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_WARN_TOO_SLOW = 2,
  SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_WARN_TIMESTAMP = 4,
  SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_ERROR_FC = 8,
  SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_ERROR_FC_NEAR = 16,
  SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_ERROR_FL = 32,
  SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_ERROR_FR = 64,
  SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_ERROR_RC = 128,
  SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_ERROR_RL = 256,
  SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_ERROR_RR = 512,
  SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_ERROR_FC_FAR = 1024,
  SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_ERROR_ISP = 2048,
  SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_ERROR_LINK = 4096,
  SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_WARN_TIMEOUT = 8192,
  SystemDiagnose_SystemCameraRunStatus_SystemDiagnose_SystemCameraRunStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemCameraRunStatus_SystemDiagnose_SystemCameraRunStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemCameraRunStatus_IsValid(int value);
const SystemDiagnose_SystemCameraRunStatus SystemDiagnose_SystemCameraRunStatus_SystemCameraRunStatus_MIN = SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_SUCCESS;
const SystemDiagnose_SystemCameraRunStatus SystemDiagnose_SystemCameraRunStatus_SystemCameraRunStatus_MAX = SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_WARN_TIMEOUT;
const int SystemDiagnose_SystemCameraRunStatus_SystemCameraRunStatus_ARRAYSIZE = SystemDiagnose_SystemCameraRunStatus_SystemCameraRunStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemCameraRunStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemCameraRunStatus_Name(SystemDiagnose_SystemCameraRunStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemCameraRunStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemCameraRunStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemCameraRunStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemCameraRunStatus>(
    SystemDiagnose_SystemCameraRunStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemInputFunctionStatus {
  SystemDiagnose_SystemInputFunctionStatus_SYSTEM_INPUT_FUNC_NONE = 0,
  SystemDiagnose_SystemInputFunctionStatus_SYSTEM_INPUT_FUNC_ENABLE_CSD = 1,
  SystemDiagnose_SystemInputFunctionStatus_SYSTEM_INPUT_FUNC_ENABLE_DDS = 2,
  SystemDiagnose_SystemInputFunctionStatus_SystemDiagnose_SystemInputFunctionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemInputFunctionStatus_SystemDiagnose_SystemInputFunctionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemInputFunctionStatus_IsValid(int value);
const SystemDiagnose_SystemInputFunctionStatus SystemDiagnose_SystemInputFunctionStatus_SystemInputFunctionStatus_MIN = SystemDiagnose_SystemInputFunctionStatus_SYSTEM_INPUT_FUNC_NONE;
const SystemDiagnose_SystemInputFunctionStatus SystemDiagnose_SystemInputFunctionStatus_SystemInputFunctionStatus_MAX = SystemDiagnose_SystemInputFunctionStatus_SYSTEM_INPUT_FUNC_ENABLE_DDS;
const int SystemDiagnose_SystemInputFunctionStatus_SystemInputFunctionStatus_ARRAYSIZE = SystemDiagnose_SystemInputFunctionStatus_SystemInputFunctionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemInputFunctionStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemInputFunctionStatus_Name(SystemDiagnose_SystemInputFunctionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemInputFunctionStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemInputFunctionStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemInputFunctionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemInputFunctionStatus>(
    SystemDiagnose_SystemInputFunctionStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemInputInitStatus {
  SystemDiagnose_SystemInputInitStatus_SYSTEM_INPUT_INIT_SUCCESS = 0,
  SystemDiagnose_SystemInputInitStatus_SYSTEM_INPUT_INIT_CSD_ERROR = 1,
  SystemDiagnose_SystemInputInitStatus_SYSTEM_INPUT_INIT_DDS_ERROR_SUBSCRIBE = 2,
  SystemDiagnose_SystemInputInitStatus_SystemDiagnose_SystemInputInitStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemInputInitStatus_SystemDiagnose_SystemInputInitStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemInputInitStatus_IsValid(int value);
const SystemDiagnose_SystemInputInitStatus SystemDiagnose_SystemInputInitStatus_SystemInputInitStatus_MIN = SystemDiagnose_SystemInputInitStatus_SYSTEM_INPUT_INIT_SUCCESS;
const SystemDiagnose_SystemInputInitStatus SystemDiagnose_SystemInputInitStatus_SystemInputInitStatus_MAX = SystemDiagnose_SystemInputInitStatus_SYSTEM_INPUT_INIT_DDS_ERROR_SUBSCRIBE;
const int SystemDiagnose_SystemInputInitStatus_SystemInputInitStatus_ARRAYSIZE = SystemDiagnose_SystemInputInitStatus_SystemInputInitStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemInputInitStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemInputInitStatus_Name(SystemDiagnose_SystemInputInitStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemInputInitStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemInputInitStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemInputInitStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemInputInitStatus>(
    SystemDiagnose_SystemInputInitStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemInputRunStatus {
  SystemDiagnose_SystemInputRunStatus_SYSTEM_INPUT_RUN_SUCCESS = 0,
  SystemDiagnose_SystemInputRunStatus_SYSTEM_INPUT_RUN_CSD_EOF = 1,
  SystemDiagnose_SystemInputRunStatus_SYSTEM_INPUT_RUN_CSD_WARN_TOO_SLOW = 2,
  SystemDiagnose_SystemInputRunStatus_SYSTEM_INPUT_RUN_CSD_ERROR_SIZE = 4,
  SystemDiagnose_SystemInputRunStatus_SYSTEM_INPUT_RUN_CSD_ERROR_CONTENT = 8,
  SystemDiagnose_SystemInputRunStatus_SYSTEM_INPUT_RUN_CSD_ERROR_OUT_OF_MEMORY = 16,
  SystemDiagnose_SystemInputRunStatus_SYSTEM_INPUT_RUN_DDS_WARN_TOO_SLOW = 32,
  SystemDiagnose_SystemInputRunStatus_SYSTEM_INPUT_RUN_DDS_WARN_PILOT_EVENT = 64,
  SystemDiagnose_SystemInputRunStatus_SystemDiagnose_SystemInputRunStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemInputRunStatus_SystemDiagnose_SystemInputRunStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemInputRunStatus_IsValid(int value);
const SystemDiagnose_SystemInputRunStatus SystemDiagnose_SystemInputRunStatus_SystemInputRunStatus_MIN = SystemDiagnose_SystemInputRunStatus_SYSTEM_INPUT_RUN_SUCCESS;
const SystemDiagnose_SystemInputRunStatus SystemDiagnose_SystemInputRunStatus_SystemInputRunStatus_MAX = SystemDiagnose_SystemInputRunStatus_SYSTEM_INPUT_RUN_DDS_WARN_PILOT_EVENT;
const int SystemDiagnose_SystemInputRunStatus_SystemInputRunStatus_ARRAYSIZE = SystemDiagnose_SystemInputRunStatus_SystemInputRunStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemInputRunStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemInputRunStatus_Name(SystemDiagnose_SystemInputRunStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemInputRunStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemInputRunStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemInputRunStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemInputRunStatus>(
    SystemDiagnose_SystemInputRunStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemCanFunctionStatus {
  SystemDiagnose_SystemCanFunctionStatus_SYSTEM_CAN_FUNC_NONE = 0,
  SystemDiagnose_SystemCanFunctionStatus_SYSTEM_CAN_FUNC_ENABLE_CHASSIS = 1,
  SystemDiagnose_SystemCanFunctionStatus_SYSTEM_CAN_FUNC_ENABLE_RTK = 2,
  SystemDiagnose_SystemCanFunctionStatus_SYSTEM_CAN_FUNC_ENABLE_RADAR_FC = 4,
  SystemDiagnose_SystemCanFunctionStatus_SystemDiagnose_SystemCanFunctionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemCanFunctionStatus_SystemDiagnose_SystemCanFunctionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemCanFunctionStatus_IsValid(int value);
const SystemDiagnose_SystemCanFunctionStatus SystemDiagnose_SystemCanFunctionStatus_SystemCanFunctionStatus_MIN = SystemDiagnose_SystemCanFunctionStatus_SYSTEM_CAN_FUNC_NONE;
const SystemDiagnose_SystemCanFunctionStatus SystemDiagnose_SystemCanFunctionStatus_SystemCanFunctionStatus_MAX = SystemDiagnose_SystemCanFunctionStatus_SYSTEM_CAN_FUNC_ENABLE_RADAR_FC;
const int SystemDiagnose_SystemCanFunctionStatus_SystemCanFunctionStatus_ARRAYSIZE = SystemDiagnose_SystemCanFunctionStatus_SystemCanFunctionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemCanFunctionStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemCanFunctionStatus_Name(SystemDiagnose_SystemCanFunctionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemCanFunctionStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemCanFunctionStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemCanFunctionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemCanFunctionStatus>(
    SystemDiagnose_SystemCanFunctionStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemCanInitStatus {
  SystemDiagnose_SystemCanInitStatus_SYSTEM_CAN_INIT_SUCCESS = 0,
  SystemDiagnose_SystemCanInitStatus_SYSTEM_CAN_INIT_ERROR_CHASSIS = 1,
  SystemDiagnose_SystemCanInitStatus_SYSTEM_CAN_INIT_ERROR_RTK = 2,
  SystemDiagnose_SystemCanInitStatus_SYSTEM_CAN_INIT_ERROR_RADAR_FC = 4,
  SystemDiagnose_SystemCanInitStatus_SystemDiagnose_SystemCanInitStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemCanInitStatus_SystemDiagnose_SystemCanInitStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemCanInitStatus_IsValid(int value);
const SystemDiagnose_SystemCanInitStatus SystemDiagnose_SystemCanInitStatus_SystemCanInitStatus_MIN = SystemDiagnose_SystemCanInitStatus_SYSTEM_CAN_INIT_SUCCESS;
const SystemDiagnose_SystemCanInitStatus SystemDiagnose_SystemCanInitStatus_SystemCanInitStatus_MAX = SystemDiagnose_SystemCanInitStatus_SYSTEM_CAN_INIT_ERROR_RADAR_FC;
const int SystemDiagnose_SystemCanInitStatus_SystemCanInitStatus_ARRAYSIZE = SystemDiagnose_SystemCanInitStatus_SystemCanInitStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemCanInitStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemCanInitStatus_Name(SystemDiagnose_SystemCanInitStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemCanInitStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemCanInitStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemCanInitStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemCanInitStatus>(
    SystemDiagnose_SystemCanInitStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemCanRunStatus {
  SystemDiagnose_SystemCanRunStatus_SYSTEM_CAN_RUN_SUCCESS = 0,
  SystemDiagnose_SystemCanRunStatus_SYSTEM_CAN_RUN_WARN_TOO_SLOW = 1,
  SystemDiagnose_SystemCanRunStatus_SYSTEM_CAN_RUN_ERROR_CHASSIS = 2,
  SystemDiagnose_SystemCanRunStatus_SYSTEM_CAN_RUN_ERROR_RTK = 4,
  SystemDiagnose_SystemCanRunStatus_SYSTEM_CAN_RUN_ERROR_RADAR_FC = 8,
  SystemDiagnose_SystemCanRunStatus_SystemDiagnose_SystemCanRunStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemCanRunStatus_SystemDiagnose_SystemCanRunStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemCanRunStatus_IsValid(int value);
const SystemDiagnose_SystemCanRunStatus SystemDiagnose_SystemCanRunStatus_SystemCanRunStatus_MIN = SystemDiagnose_SystemCanRunStatus_SYSTEM_CAN_RUN_SUCCESS;
const SystemDiagnose_SystemCanRunStatus SystemDiagnose_SystemCanRunStatus_SystemCanRunStatus_MAX = SystemDiagnose_SystemCanRunStatus_SYSTEM_CAN_RUN_ERROR_RADAR_FC;
const int SystemDiagnose_SystemCanRunStatus_SystemCanRunStatus_ARRAYSIZE = SystemDiagnose_SystemCanRunStatus_SystemCanRunStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemCanRunStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemCanRunStatus_Name(SystemDiagnose_SystemCanRunStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemCanRunStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemCanRunStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemCanRunStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemCanRunStatus>(
    SystemDiagnose_SystemCanRunStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemPerceptionInitStatus {
  SystemDiagnose_SystemPerceptionInitStatus_SYSTEM_PERCEPTION_INIT_SUCCESS = 0,
  SystemDiagnose_SystemPerceptionInitStatus_SYSTEM_PERCEPTION_INIT_ERROR_CALIBRATION = 1,
  SystemDiagnose_SystemPerceptionInitStatus_SYSTEM_PERCEPTION_INIT_ERROR_PERCEPTION = 2,
  SystemDiagnose_SystemPerceptionInitStatus_SYSTEM_PERCEPTION_INIT_ERROR_DEVICE = 4,
  SystemDiagnose_SystemPerceptionInitStatus_SystemDiagnose_SystemPerceptionInitStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemPerceptionInitStatus_SystemDiagnose_SystemPerceptionInitStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemPerceptionInitStatus_IsValid(int value);
const SystemDiagnose_SystemPerceptionInitStatus SystemDiagnose_SystemPerceptionInitStatus_SystemPerceptionInitStatus_MIN = SystemDiagnose_SystemPerceptionInitStatus_SYSTEM_PERCEPTION_INIT_SUCCESS;
const SystemDiagnose_SystemPerceptionInitStatus SystemDiagnose_SystemPerceptionInitStatus_SystemPerceptionInitStatus_MAX = SystemDiagnose_SystemPerceptionInitStatus_SYSTEM_PERCEPTION_INIT_ERROR_DEVICE;
const int SystemDiagnose_SystemPerceptionInitStatus_SystemPerceptionInitStatus_ARRAYSIZE = SystemDiagnose_SystemPerceptionInitStatus_SystemPerceptionInitStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemPerceptionInitStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemPerceptionInitStatus_Name(SystemDiagnose_SystemPerceptionInitStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemPerceptionInitStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemPerceptionInitStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemPerceptionInitStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemPerceptionInitStatus>(
    SystemDiagnose_SystemPerceptionInitStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemPerceptionRunStatus {
  SystemDiagnose_SystemPerceptionRunStatus_SYSTEM_PERCEPTION_RUN_SUCCESS = 0,
  SystemDiagnose_SystemPerceptionRunStatus_SYSTEM_PERCEPTION_RUN_WARN_TOO_SLOW = 1,
  SystemDiagnose_SystemPerceptionRunStatus_SYSTEM_PERCEPTION_RUN_ERROR_PERCEPTION = 2,
  SystemDiagnose_SystemPerceptionRunStatus_SYSTEM_PERCEPTION_RUN_ERROR_INPUT = 4,
  SystemDiagnose_SystemPerceptionRunStatus_SystemDiagnose_SystemPerceptionRunStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemPerceptionRunStatus_SystemDiagnose_SystemPerceptionRunStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemPerceptionRunStatus_IsValid(int value);
const SystemDiagnose_SystemPerceptionRunStatus SystemDiagnose_SystemPerceptionRunStatus_SystemPerceptionRunStatus_MIN = SystemDiagnose_SystemPerceptionRunStatus_SYSTEM_PERCEPTION_RUN_SUCCESS;
const SystemDiagnose_SystemPerceptionRunStatus SystemDiagnose_SystemPerceptionRunStatus_SystemPerceptionRunStatus_MAX = SystemDiagnose_SystemPerceptionRunStatus_SYSTEM_PERCEPTION_RUN_ERROR_INPUT;
const int SystemDiagnose_SystemPerceptionRunStatus_SystemPerceptionRunStatus_ARRAYSIZE = SystemDiagnose_SystemPerceptionRunStatus_SystemPerceptionRunStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemPerceptionRunStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemPerceptionRunStatus_Name(SystemDiagnose_SystemPerceptionRunStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemPerceptionRunStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemPerceptionRunStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemPerceptionRunStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemPerceptionRunStatus>(
    SystemDiagnose_SystemPerceptionRunStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemCommunicationFunctionStatus {
  SystemDiagnose_SystemCommunicationFunctionStatus_SYSTEM_COMMUNICATION_FUNC_NONE = 0,
  SystemDiagnose_SystemCommunicationFunctionStatus_SYSTEM_COMMUNICATION_FUNC_ENABLE_DDS = 1,
  SystemDiagnose_SystemCommunicationFunctionStatus_SYSTEM_COMMUNICATION_FUNC_ENABLE_SHARED_MEMORY = 2,
  SystemDiagnose_SystemCommunicationFunctionStatus_SYSTEM_COMMUNICATION_FUNC_ENABLE_REMOTE_RENDER = 4,
  SystemDiagnose_SystemCommunicationFunctionStatus_SystemDiagnose_SystemCommunicationFunctionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemCommunicationFunctionStatus_SystemDiagnose_SystemCommunicationFunctionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemCommunicationFunctionStatus_IsValid(int value);
const SystemDiagnose_SystemCommunicationFunctionStatus SystemDiagnose_SystemCommunicationFunctionStatus_SystemCommunicationFunctionStatus_MIN = SystemDiagnose_SystemCommunicationFunctionStatus_SYSTEM_COMMUNICATION_FUNC_NONE;
const SystemDiagnose_SystemCommunicationFunctionStatus SystemDiagnose_SystemCommunicationFunctionStatus_SystemCommunicationFunctionStatus_MAX = SystemDiagnose_SystemCommunicationFunctionStatus_SYSTEM_COMMUNICATION_FUNC_ENABLE_REMOTE_RENDER;
const int SystemDiagnose_SystemCommunicationFunctionStatus_SystemCommunicationFunctionStatus_ARRAYSIZE = SystemDiagnose_SystemCommunicationFunctionStatus_SystemCommunicationFunctionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemCommunicationFunctionStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemCommunicationFunctionStatus_Name(SystemDiagnose_SystemCommunicationFunctionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemCommunicationFunctionStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemCommunicationFunctionStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemCommunicationFunctionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemCommunicationFunctionStatus>(
    SystemDiagnose_SystemCommunicationFunctionStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemCommunicationInitStatus {
  SystemDiagnose_SystemCommunicationInitStatus_SYSTEM_COMMUNICATION_INIT_SUCCESS = 0,
  SystemDiagnose_SystemCommunicationInitStatus_SYSTEM_COMMUNICATION_INIT_ERROR_DDS = 1,
  SystemDiagnose_SystemCommunicationInitStatus_SYSTEM_COMMUNICATION_INIT_ERROR_SHARED_MEMORY = 2,
  SystemDiagnose_SystemCommunicationInitStatus_SYSTEM_COMMUNICATION_INIT_ERROR_REMOTE_RENDER = 4,
  SystemDiagnose_SystemCommunicationInitStatus_SystemDiagnose_SystemCommunicationInitStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemCommunicationInitStatus_SystemDiagnose_SystemCommunicationInitStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemCommunicationInitStatus_IsValid(int value);
const SystemDiagnose_SystemCommunicationInitStatus SystemDiagnose_SystemCommunicationInitStatus_SystemCommunicationInitStatus_MIN = SystemDiagnose_SystemCommunicationInitStatus_SYSTEM_COMMUNICATION_INIT_SUCCESS;
const SystemDiagnose_SystemCommunicationInitStatus SystemDiagnose_SystemCommunicationInitStatus_SystemCommunicationInitStatus_MAX = SystemDiagnose_SystemCommunicationInitStatus_SYSTEM_COMMUNICATION_INIT_ERROR_REMOTE_RENDER;
const int SystemDiagnose_SystemCommunicationInitStatus_SystemCommunicationInitStatus_ARRAYSIZE = SystemDiagnose_SystemCommunicationInitStatus_SystemCommunicationInitStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemCommunicationInitStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemCommunicationInitStatus_Name(SystemDiagnose_SystemCommunicationInitStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemCommunicationInitStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemCommunicationInitStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemCommunicationInitStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemCommunicationInitStatus>(
    SystemDiagnose_SystemCommunicationInitStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemCommunicationRunStatus {
  SystemDiagnose_SystemCommunicationRunStatus_SYSTEM_COMMUNICATION_RUN_SUCCESS = 0,
  SystemDiagnose_SystemCommunicationRunStatus_SYSTEM_COMMUNICATION_RUN_WARN_DDS_EVENT = 1,
  SystemDiagnose_SystemCommunicationRunStatus_SYSTEM_COMMUNICATION_RUN_WARN_DDS_PUBLISH_TOO_SLOW = 2,
  SystemDiagnose_SystemCommunicationRunStatus_SYSTEM_COMMUNICATION_RUN_ERROR_DDS_PUBLISH = 4,
  SystemDiagnose_SystemCommunicationRunStatus_SYSTEM_COMMUNICATION_RUN_WARN_SHARED_MEMORY_WRITE_TOO_SLOW = 8,
  SystemDiagnose_SystemCommunicationRunStatus_SYSTEM_COMMUNICATION_RUN_ERROR_SHARED_MEMORY_WRITE = 16,
  SystemDiagnose_SystemCommunicationRunStatus_SYSTEM_COMMUNICATION_RUN_INFO_REMOTE_RENDER_HAS_CLIENT = 32,
  SystemDiagnose_SystemCommunicationRunStatus_SYSTEM_COMMUNICATION_RUN_WARN_REMOTE_RENDER_SEND_TOO_SLOW = 64,
  SystemDiagnose_SystemCommunicationRunStatus_SYSTEM_COMMUNICATION_RUN_ERROR_REMOTE_RENDER_SEND = 128,
  SystemDiagnose_SystemCommunicationRunStatus_SystemDiagnose_SystemCommunicationRunStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemCommunicationRunStatus_SystemDiagnose_SystemCommunicationRunStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemCommunicationRunStatus_IsValid(int value);
const SystemDiagnose_SystemCommunicationRunStatus SystemDiagnose_SystemCommunicationRunStatus_SystemCommunicationRunStatus_MIN = SystemDiagnose_SystemCommunicationRunStatus_SYSTEM_COMMUNICATION_RUN_SUCCESS;
const SystemDiagnose_SystemCommunicationRunStatus SystemDiagnose_SystemCommunicationRunStatus_SystemCommunicationRunStatus_MAX = SystemDiagnose_SystemCommunicationRunStatus_SYSTEM_COMMUNICATION_RUN_ERROR_REMOTE_RENDER_SEND;
const int SystemDiagnose_SystemCommunicationRunStatus_SystemCommunicationRunStatus_ARRAYSIZE = SystemDiagnose_SystemCommunicationRunStatus_SystemCommunicationRunStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemCommunicationRunStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemCommunicationRunStatus_Name(SystemDiagnose_SystemCommunicationRunStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemCommunicationRunStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemCommunicationRunStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemCommunicationRunStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemCommunicationRunStatus>(
    SystemDiagnose_SystemCommunicationRunStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemEventFunctionStatus {
  SystemDiagnose_SystemEventFunctionStatus_SYSTEM_EVENT_FUNC_NONE = 0,
  SystemDiagnose_SystemEventFunctionStatus_SystemDiagnose_SystemEventFunctionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemEventFunctionStatus_SystemDiagnose_SystemEventFunctionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemEventFunctionStatus_IsValid(int value);
const SystemDiagnose_SystemEventFunctionStatus SystemDiagnose_SystemEventFunctionStatus_SystemEventFunctionStatus_MIN = SystemDiagnose_SystemEventFunctionStatus_SYSTEM_EVENT_FUNC_NONE;
const SystemDiagnose_SystemEventFunctionStatus SystemDiagnose_SystemEventFunctionStatus_SystemEventFunctionStatus_MAX = SystemDiagnose_SystemEventFunctionStatus_SYSTEM_EVENT_FUNC_NONE;
const int SystemDiagnose_SystemEventFunctionStatus_SystemEventFunctionStatus_ARRAYSIZE = SystemDiagnose_SystemEventFunctionStatus_SystemEventFunctionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemEventFunctionStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemEventFunctionStatus_Name(SystemDiagnose_SystemEventFunctionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemEventFunctionStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemEventFunctionStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemEventFunctionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemEventFunctionStatus>(
    SystemDiagnose_SystemEventFunctionStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemEventInitStatus {
  SystemDiagnose_SystemEventInitStatus_SYSTEM_EVENT_INIT_SUCCESS = 0,
  SystemDiagnose_SystemEventInitStatus_SYSTEM_EVENT_INIT_ERROR = 1,
  SystemDiagnose_SystemEventInitStatus_SystemDiagnose_SystemEventInitStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemEventInitStatus_SystemDiagnose_SystemEventInitStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemEventInitStatus_IsValid(int value);
const SystemDiagnose_SystemEventInitStatus SystemDiagnose_SystemEventInitStatus_SystemEventInitStatus_MIN = SystemDiagnose_SystemEventInitStatus_SYSTEM_EVENT_INIT_SUCCESS;
const SystemDiagnose_SystemEventInitStatus SystemDiagnose_SystemEventInitStatus_SystemEventInitStatus_MAX = SystemDiagnose_SystemEventInitStatus_SYSTEM_EVENT_INIT_ERROR;
const int SystemDiagnose_SystemEventInitStatus_SystemEventInitStatus_ARRAYSIZE = SystemDiagnose_SystemEventInitStatus_SystemEventInitStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemEventInitStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemEventInitStatus_Name(SystemDiagnose_SystemEventInitStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemEventInitStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemEventInitStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemEventInitStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemEventInitStatus>(
    SystemDiagnose_SystemEventInitStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemEventRunStatus {
  SystemDiagnose_SystemEventRunStatus_SYSTEM_EVENT_RUN_SUCCESS = 0,
  SystemDiagnose_SystemEventRunStatus_SYSTEM_EVENT_RUN_WARN_TOO_SLOW = 1,
  SystemDiagnose_SystemEventRunStatus_SYSTEM_EVENT_RUN_TRIGGER_EVENT = 2,
  SystemDiagnose_SystemEventRunStatus_SystemDiagnose_SystemEventRunStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemEventRunStatus_SystemDiagnose_SystemEventRunStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemEventRunStatus_IsValid(int value);
const SystemDiagnose_SystemEventRunStatus SystemDiagnose_SystemEventRunStatus_SystemEventRunStatus_MIN = SystemDiagnose_SystemEventRunStatus_SYSTEM_EVENT_RUN_SUCCESS;
const SystemDiagnose_SystemEventRunStatus SystemDiagnose_SystemEventRunStatus_SystemEventRunStatus_MAX = SystemDiagnose_SystemEventRunStatus_SYSTEM_EVENT_RUN_TRIGGER_EVENT;
const int SystemDiagnose_SystemEventRunStatus_SystemEventRunStatus_ARRAYSIZE = SystemDiagnose_SystemEventRunStatus_SystemEventRunStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemEventRunStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemEventRunStatus_Name(SystemDiagnose_SystemEventRunStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemEventRunStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemEventRunStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemEventRunStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemEventRunStatus>(
    SystemDiagnose_SystemEventRunStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemRecordFunctionStatus {
  SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_NONE = 0,
  SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_CALIBRATION = 1,
  SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_TIMESTAMP = 2,
  SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_CSD = 4,
  SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_SCREEN = 8,
  SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_FC = 16,
  SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_FC_NEAR = 32,
  SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_FL = 64,
  SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_FR = 128,
  SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_RC = 256,
  SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_RL = 512,
  SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_RR = 1024,
  SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_FC_FAR = 2048,
  SystemDiagnose_SystemRecordFunctionStatus_SystemDiagnose_SystemRecordFunctionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemRecordFunctionStatus_SystemDiagnose_SystemRecordFunctionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemRecordFunctionStatus_IsValid(int value);
const SystemDiagnose_SystemRecordFunctionStatus SystemDiagnose_SystemRecordFunctionStatus_SystemRecordFunctionStatus_MIN = SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_NONE;
const SystemDiagnose_SystemRecordFunctionStatus SystemDiagnose_SystemRecordFunctionStatus_SystemRecordFunctionStatus_MAX = SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_FC_FAR;
const int SystemDiagnose_SystemRecordFunctionStatus_SystemRecordFunctionStatus_ARRAYSIZE = SystemDiagnose_SystemRecordFunctionStatus_SystemRecordFunctionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemRecordFunctionStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemRecordFunctionStatus_Name(SystemDiagnose_SystemRecordFunctionStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemRecordFunctionStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemRecordFunctionStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemRecordFunctionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemRecordFunctionStatus>(
    SystemDiagnose_SystemRecordFunctionStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemRecordInitStatus {
  SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_SUCCESS = 0,
  SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_CALIBRATION = 1,
  SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_TIMESTAMP = 2,
  SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_CSD = 4,
  SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_SCREEN = 8,
  SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_FC = 16,
  SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_FC_NEAR = 32,
  SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_FL = 64,
  SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_FR = 128,
  SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_RC = 256,
  SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_RL = 512,
  SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_RR = 1024,
  SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_FC_FAR = 2048,
  SystemDiagnose_SystemRecordInitStatus_SystemDiagnose_SystemRecordInitStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemRecordInitStatus_SystemDiagnose_SystemRecordInitStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemRecordInitStatus_IsValid(int value);
const SystemDiagnose_SystemRecordInitStatus SystemDiagnose_SystemRecordInitStatus_SystemRecordInitStatus_MIN = SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_SUCCESS;
const SystemDiagnose_SystemRecordInitStatus SystemDiagnose_SystemRecordInitStatus_SystemRecordInitStatus_MAX = SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_FC_FAR;
const int SystemDiagnose_SystemRecordInitStatus_SystemRecordInitStatus_ARRAYSIZE = SystemDiagnose_SystemRecordInitStatus_SystemRecordInitStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemRecordInitStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemRecordInitStatus_Name(SystemDiagnose_SystemRecordInitStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemRecordInitStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemRecordInitStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemRecordInitStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemRecordInitStatus>(
    SystemDiagnose_SystemRecordInitStatus_descriptor(), name, value);
}
enum SystemDiagnose_SystemRecordRunStatus {
  SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_SUCCESS = 0,
  SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_WARN_TOO_SLOW = 1,
  SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_CALIBRATION = 2,
  SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_TIMESTAMP = 4,
  SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_CSD = 8,
  SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_SCREEN = 16,
  SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_FC = 32,
  SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_FC_NEAR = 64,
  SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_FL = 128,
  SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_FR = 256,
  SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_RC = 512,
  SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_RL = 1024,
  SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_RR = 2048,
  SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_FC_FAR = 4096,
  SystemDiagnose_SystemRecordRunStatus_SystemDiagnose_SystemRecordRunStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SystemDiagnose_SystemRecordRunStatus_SystemDiagnose_SystemRecordRunStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SystemDiagnose_SystemRecordRunStatus_IsValid(int value);
const SystemDiagnose_SystemRecordRunStatus SystemDiagnose_SystemRecordRunStatus_SystemRecordRunStatus_MIN = SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_SUCCESS;
const SystemDiagnose_SystemRecordRunStatus SystemDiagnose_SystemRecordRunStatus_SystemRecordRunStatus_MAX = SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_FC_FAR;
const int SystemDiagnose_SystemRecordRunStatus_SystemRecordRunStatus_ARRAYSIZE = SystemDiagnose_SystemRecordRunStatus_SystemRecordRunStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemRecordRunStatus_descriptor();
inline const ::std::string& SystemDiagnose_SystemRecordRunStatus_Name(SystemDiagnose_SystemRecordRunStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SystemDiagnose_SystemRecordRunStatus_descriptor(), value);
}
inline bool SystemDiagnose_SystemRecordRunStatus_Parse(
    const ::std::string& name, SystemDiagnose_SystemRecordRunStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SystemDiagnose_SystemRecordRunStatus>(
    SystemDiagnose_SystemRecordRunStatus_descriptor(), name, value);
}
enum DiagnoseModule {
  DIAGNOSE_MODULE_INVALID = 0,
  DIAGNOSE_MODULE_CAMERA = 1,
  DIAGNOSE_MODULE_CAN = 2,
  DIAGNOSE_MODULE_SYSTEM = 3,
  DIAGNOSE_MODULE_PERCEPTION = 4,
  DiagnoseModule_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DiagnoseModule_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DiagnoseModule_IsValid(int value);
const DiagnoseModule DiagnoseModule_MIN = DIAGNOSE_MODULE_INVALID;
const DiagnoseModule DiagnoseModule_MAX = DIAGNOSE_MODULE_PERCEPTION;
const int DiagnoseModule_ARRAYSIZE = DiagnoseModule_MAX + 1;

const ::google::protobuf::EnumDescriptor* DiagnoseModule_descriptor();
inline const ::std::string& DiagnoseModule_Name(DiagnoseModule value) {
  return ::google::protobuf::internal::NameOfEnum(
    DiagnoseModule_descriptor(), value);
}
inline bool DiagnoseModule_Parse(
    const ::std::string& name, DiagnoseModule* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DiagnoseModule>(
    DiagnoseModule_descriptor(), name, value);
}
// ===================================================================

class PerceptionDiagnose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calmcar.perception.PerceptionDiagnose) */ {
 public:
  PerceptionDiagnose();
  virtual ~PerceptionDiagnose();

  PerceptionDiagnose(const PerceptionDiagnose& from);

  inline PerceptionDiagnose& operator=(const PerceptionDiagnose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PerceptionDiagnose(PerceptionDiagnose&& from) noexcept
    : PerceptionDiagnose() {
    *this = ::std::move(from);
  }

  inline PerceptionDiagnose& operator=(PerceptionDiagnose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PerceptionDiagnose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerceptionDiagnose* internal_default_instance() {
    return reinterpret_cast<const PerceptionDiagnose*>(
               &_PerceptionDiagnose_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PerceptionDiagnose* other);
  friend void swap(PerceptionDiagnose& a, PerceptionDiagnose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PerceptionDiagnose* New() const PROTOBUF_FINAL { return New(NULL); }

  PerceptionDiagnose* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PerceptionDiagnose& from);
  void MergeFrom(const PerceptionDiagnose& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PerceptionDiagnose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string module_name = 4;
  void clear_module_name();
  static const int kModuleNameFieldNumber = 4;
  const ::std::string& module_name() const;
  void set_module_name(const ::std::string& value);
  #if LANG_CXX11
  void set_module_name(::std::string&& value);
  #endif
  void set_module_name(const char* value);
  void set_module_name(const char* value, size_t size);
  ::std::string* mutable_module_name();
  ::std::string* release_module_name();
  void set_allocated_module_name(::std::string* module_name);

  // string sub_module_name = 6;
  void clear_sub_module_name();
  static const int kSubModuleNameFieldNumber = 6;
  const ::std::string& sub_module_name() const;
  void set_sub_module_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sub_module_name(::std::string&& value);
  #endif
  void set_sub_module_name(const char* value);
  void set_sub_module_name(const char* value, size_t size);
  ::std::string* mutable_sub_module_name();
  ::std::string* release_sub_module_name();
  void set_allocated_sub_module_name(::std::string* sub_module_name);

  // uint64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // uint32 frame_index = 1;
  void clear_frame_index();
  static const int kFrameIndexFieldNumber = 1;
  ::google::protobuf::uint32 frame_index() const;
  void set_frame_index(::google::protobuf::uint32 value);

  // .calmcar.perception.DiagnoseModule module_id = 3;
  void clear_module_id();
  static const int kModuleIdFieldNumber = 3;
  ::calmcar::perception::DiagnoseModule module_id() const;
  void set_module_id(::calmcar::perception::DiagnoseModule value);

  // uint32 sub_module_id = 5;
  void clear_sub_module_id();
  static const int kSubModuleIdFieldNumber = 5;
  ::google::protobuf::uint32 sub_module_id() const;
  void set_sub_module_id(::google::protobuf::uint32 value);

  // bool enable = 7;
  void clear_enable();
  static const int kEnableFieldNumber = 7;
  bool enable() const;
  void set_enable(bool value);

  // uint32 init_status = 8;
  void clear_init_status();
  static const int kInitStatusFieldNumber = 8;
  ::google::protobuf::uint32 init_status() const;
  void set_init_status(::google::protobuf::uint32 value);

  // uint32 input_status = 9;
  void clear_input_status();
  static const int kInputStatusFieldNumber = 9;
  ::google::protobuf::uint32 input_status() const;
  void set_input_status(::google::protobuf::uint32 value);

  // uint32 running_status = 10;
  void clear_running_status();
  static const int kRunningStatusFieldNumber = 10;
  ::google::protobuf::uint32 running_status() const;
  void set_running_status(::google::protobuf::uint32 value);

  // uint32 function_status = 11;
  void clear_function_status();
  static const int kFunctionStatusFieldNumber = 11;
  ::google::protobuf::uint32 function_status() const;
  void set_function_status(::google::protobuf::uint32 value);

  // uint32 output_status = 12;
  void clear_output_status();
  static const int kOutputStatusFieldNumber = 12;
  ::google::protobuf::uint32 output_status() const;
  void set_output_status(::google::protobuf::uint32 value);

  // uint32 process_runtime = 13;
  void clear_process_runtime();
  static const int kProcessRuntimeFieldNumber = 13;
  ::google::protobuf::uint32 process_runtime() const;
  void set_process_runtime(::google::protobuf::uint32 value);

  // uint32 infer_runtime = 14;
  void clear_infer_runtime();
  static const int kInferRuntimeFieldNumber = 14;
  ::google::protobuf::uint32 infer_runtime() const;
  void set_infer_runtime(::google::protobuf::uint32 value);

  // uint32 post_runtime = 15;
  void clear_post_runtime();
  static const int kPostRuntimeFieldNumber = 15;
  ::google::protobuf::uint32 post_runtime() const;
  void set_post_runtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:calmcar.perception.PerceptionDiagnose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr module_name_;
  ::google::protobuf::internal::ArenaStringPtr sub_module_name_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint32 frame_index_;
  int module_id_;
  ::google::protobuf::uint32 sub_module_id_;
  bool enable_;
  ::google::protobuf::uint32 init_status_;
  ::google::protobuf::uint32 input_status_;
  ::google::protobuf::uint32 running_status_;
  ::google::protobuf::uint32 function_status_;
  ::google::protobuf::uint32 output_status_;
  ::google::protobuf::uint32 process_runtime_;
  ::google::protobuf::uint32 infer_runtime_;
  ::google::protobuf::uint32 post_runtime_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_5fdiagnose_2eproto::TableStruct;
  friend void ::protobuf_perception_5fdiagnose_2eproto::InitDefaultsPerceptionDiagnoseImpl();
};
// -------------------------------------------------------------------

class SystemDiagnose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calmcar.perception.SystemDiagnose) */ {
 public:
  SystemDiagnose();
  virtual ~SystemDiagnose();

  SystemDiagnose(const SystemDiagnose& from);

  inline SystemDiagnose& operator=(const SystemDiagnose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SystemDiagnose(SystemDiagnose&& from) noexcept
    : SystemDiagnose() {
    *this = ::std::move(from);
  }

  inline SystemDiagnose& operator=(SystemDiagnose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemDiagnose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemDiagnose* internal_default_instance() {
    return reinterpret_cast<const SystemDiagnose*>(
               &_SystemDiagnose_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SystemDiagnose* other);
  friend void swap(SystemDiagnose& a, SystemDiagnose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SystemDiagnose* New() const PROTOBUF_FINAL { return New(NULL); }

  SystemDiagnose* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SystemDiagnose& from);
  void MergeFrom(const SystemDiagnose& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SystemDiagnose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SystemDiagnose_CameraSubmodule CameraSubmodule;
  static const CameraSubmodule CAMERA_INVALID =
    SystemDiagnose_CameraSubmodule_CAMERA_INVALID;
  static const CameraSubmodule CAMERA_FC =
    SystemDiagnose_CameraSubmodule_CAMERA_FC;
  static const CameraSubmodule CAMERA_FC_NEAR =
    SystemDiagnose_CameraSubmodule_CAMERA_FC_NEAR;
  static const CameraSubmodule CAMERA_FL =
    SystemDiagnose_CameraSubmodule_CAMERA_FL;
  static const CameraSubmodule CAMERA_FR =
    SystemDiagnose_CameraSubmodule_CAMERA_FR;
  static const CameraSubmodule CAMERA_RC =
    SystemDiagnose_CameraSubmodule_CAMERA_RC;
  static const CameraSubmodule CAMERA_RL =
    SystemDiagnose_CameraSubmodule_CAMERA_RL;
  static const CameraSubmodule CAMERA_RR =
    SystemDiagnose_CameraSubmodule_CAMERA_RR;
  static const CameraSubmodule CAMERA_FC_FAR =
    SystemDiagnose_CameraSubmodule_CAMERA_FC_FAR;
  static inline bool CameraSubmodule_IsValid(int value) {
    return SystemDiagnose_CameraSubmodule_IsValid(value);
  }
  static const CameraSubmodule CameraSubmodule_MIN =
    SystemDiagnose_CameraSubmodule_CameraSubmodule_MIN;
  static const CameraSubmodule CameraSubmodule_MAX =
    SystemDiagnose_CameraSubmodule_CameraSubmodule_MAX;
  static const int CameraSubmodule_ARRAYSIZE =
    SystemDiagnose_CameraSubmodule_CameraSubmodule_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CameraSubmodule_descriptor() {
    return SystemDiagnose_CameraSubmodule_descriptor();
  }
  static inline const ::std::string& CameraSubmodule_Name(CameraSubmodule value) {
    return SystemDiagnose_CameraSubmodule_Name(value);
  }
  static inline bool CameraSubmodule_Parse(const ::std::string& name,
      CameraSubmodule* value) {
    return SystemDiagnose_CameraSubmodule_Parse(name, value);
  }

  typedef SystemDiagnose_CameraCameraFunctionStatus CameraCameraFunctionStatus;
  static const CameraCameraFunctionStatus CAMERA_CAMERA_FUNC_ENABLE_NONE =
    SystemDiagnose_CameraCameraFunctionStatus_CAMERA_CAMERA_FUNC_ENABLE_NONE;
  static const CameraCameraFunctionStatus CAMERA_CAMERA_FUNC_ENABLE_CAMERA =
    SystemDiagnose_CameraCameraFunctionStatus_CAMERA_CAMERA_FUNC_ENABLE_CAMERA;
  static const CameraCameraFunctionStatus CAMERA_CAMERA_FUNC_ENABLE_VIDEO =
    SystemDiagnose_CameraCameraFunctionStatus_CAMERA_CAMERA_FUNC_ENABLE_VIDEO;
  static inline bool CameraCameraFunctionStatus_IsValid(int value) {
    return SystemDiagnose_CameraCameraFunctionStatus_IsValid(value);
  }
  static const CameraCameraFunctionStatus CameraCameraFunctionStatus_MIN =
    SystemDiagnose_CameraCameraFunctionStatus_CameraCameraFunctionStatus_MIN;
  static const CameraCameraFunctionStatus CameraCameraFunctionStatus_MAX =
    SystemDiagnose_CameraCameraFunctionStatus_CameraCameraFunctionStatus_MAX;
  static const int CameraCameraFunctionStatus_ARRAYSIZE =
    SystemDiagnose_CameraCameraFunctionStatus_CameraCameraFunctionStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CameraCameraFunctionStatus_descriptor() {
    return SystemDiagnose_CameraCameraFunctionStatus_descriptor();
  }
  static inline const ::std::string& CameraCameraFunctionStatus_Name(CameraCameraFunctionStatus value) {
    return SystemDiagnose_CameraCameraFunctionStatus_Name(value);
  }
  static inline bool CameraCameraFunctionStatus_Parse(const ::std::string& name,
      CameraCameraFunctionStatus* value) {
    return SystemDiagnose_CameraCameraFunctionStatus_Parse(name, value);
  }

  typedef SystemDiagnose_CameraCameraInitStatus CameraCameraInitStatus;
  static const CameraCameraInitStatus CAMERA_CAMERA_INIT_SUCCESS =
    SystemDiagnose_CameraCameraInitStatus_CAMERA_CAMERA_INIT_SUCCESS;
  static const CameraCameraInitStatus CAMERA_CAMERA_INIT_ERROR_CONFIG =
    SystemDiagnose_CameraCameraInitStatus_CAMERA_CAMERA_INIT_ERROR_CONFIG;
  static const CameraCameraInitStatus CAMERA_CAMERA_INIT_ERROR_DEVICE =
    SystemDiagnose_CameraCameraInitStatus_CAMERA_CAMERA_INIT_ERROR_DEVICE;
  static const CameraCameraInitStatus CAMERA_CAMERA_INIT_ERROR_LINK =
    SystemDiagnose_CameraCameraInitStatus_CAMERA_CAMERA_INIT_ERROR_LINK;
  static const CameraCameraInitStatus CAMERA_CAMERA_INIT_ERROR_ISP =
    SystemDiagnose_CameraCameraInitStatus_CAMERA_CAMERA_INIT_ERROR_ISP;
  static inline bool CameraCameraInitStatus_IsValid(int value) {
    return SystemDiagnose_CameraCameraInitStatus_IsValid(value);
  }
  static const CameraCameraInitStatus CameraCameraInitStatus_MIN =
    SystemDiagnose_CameraCameraInitStatus_CameraCameraInitStatus_MIN;
  static const CameraCameraInitStatus CameraCameraInitStatus_MAX =
    SystemDiagnose_CameraCameraInitStatus_CameraCameraInitStatus_MAX;
  static const int CameraCameraInitStatus_ARRAYSIZE =
    SystemDiagnose_CameraCameraInitStatus_CameraCameraInitStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CameraCameraInitStatus_descriptor() {
    return SystemDiagnose_CameraCameraInitStatus_descriptor();
  }
  static inline const ::std::string& CameraCameraInitStatus_Name(CameraCameraInitStatus value) {
    return SystemDiagnose_CameraCameraInitStatus_Name(value);
  }
  static inline bool CameraCameraInitStatus_Parse(const ::std::string& name,
      CameraCameraInitStatus* value) {
    return SystemDiagnose_CameraCameraInitStatus_Parse(name, value);
  }

  typedef SystemDiagnose_CameraCameraRunStatus CameraCameraRunStatus;
  static const CameraCameraRunStatus CAMERA_CAMERA_RUN_SUCCESS =
    SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_SUCCESS;
  static const CameraCameraRunStatus CAMERA_CAMERA_RUN_EOF =
    SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_EOF;
  static const CameraCameraRunStatus CAMERA_CAMERA_RUN_WARN_TOO_SLOW =
    SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_WARN_TOO_SLOW;
  static const CameraCameraRunStatus CAMERA_CAMERA_RUN_WARN_TIMESTAMP =
    SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_WARN_TIMESTAMP;
  static const CameraCameraRunStatus CAMERA_CAMERA_RUN_WARN_TIMEOUT =
    SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_WARN_TIMEOUT;
  static const CameraCameraRunStatus CAMERA_CAMERA_RUN_ERROR_TIMEOUT =
    SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_ERROR_TIMEOUT;
  static const CameraCameraRunStatus CAMERA_CAMERA_RUN_ERROR_INTERNAL_STATUS =
    SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_ERROR_INTERNAL_STATUS;
  static const CameraCameraRunStatus CAMERA_CAMERA_RUN_ERROR_OUT_OF_MEMORY =
    SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_ERROR_OUT_OF_MEMORY;
  static const CameraCameraRunStatus CAMERA_CAMERA_RUN_ERROR_ISP =
    SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_ERROR_ISP;
  static const CameraCameraRunStatus CAMERA_CAMERA_RUN_ERROR_LINK =
    SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_ERROR_LINK;
  static const CameraCameraRunStatus CAMERA_CAMERA_RUN_ERROR_RESOURCE =
    SystemDiagnose_CameraCameraRunStatus_CAMERA_CAMERA_RUN_ERROR_RESOURCE;
  static inline bool CameraCameraRunStatus_IsValid(int value) {
    return SystemDiagnose_CameraCameraRunStatus_IsValid(value);
  }
  static const CameraCameraRunStatus CameraCameraRunStatus_MIN =
    SystemDiagnose_CameraCameraRunStatus_CameraCameraRunStatus_MIN;
  static const CameraCameraRunStatus CameraCameraRunStatus_MAX =
    SystemDiagnose_CameraCameraRunStatus_CameraCameraRunStatus_MAX;
  static const int CameraCameraRunStatus_ARRAYSIZE =
    SystemDiagnose_CameraCameraRunStatus_CameraCameraRunStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CameraCameraRunStatus_descriptor() {
    return SystemDiagnose_CameraCameraRunStatus_descriptor();
  }
  static inline const ::std::string& CameraCameraRunStatus_Name(CameraCameraRunStatus value) {
    return SystemDiagnose_CameraCameraRunStatus_Name(value);
  }
  static inline bool CameraCameraRunStatus_Parse(const ::std::string& name,
      CameraCameraRunStatus* value) {
    return SystemDiagnose_CameraCameraRunStatus_Parse(name, value);
  }

  typedef SystemDiagnose_CanSubmodule CanSubmodule;
  static const CanSubmodule CAN_INVALID =
    SystemDiagnose_CanSubmodule_CAN_INVALID;
  static const CanSubmodule CAN_CHASSIS =
    SystemDiagnose_CanSubmodule_CAN_CHASSIS;
  static const CanSubmodule CAN_RTK =
    SystemDiagnose_CanSubmodule_CAN_RTK;
  static const CanSubmodule CAN_RADAR_FC =
    SystemDiagnose_CanSubmodule_CAN_RADAR_FC;
  static inline bool CanSubmodule_IsValid(int value) {
    return SystemDiagnose_CanSubmodule_IsValid(value);
  }
  static const CanSubmodule CanSubmodule_MIN =
    SystemDiagnose_CanSubmodule_CanSubmodule_MIN;
  static const CanSubmodule CanSubmodule_MAX =
    SystemDiagnose_CanSubmodule_CanSubmodule_MAX;
  static const int CanSubmodule_ARRAYSIZE =
    SystemDiagnose_CanSubmodule_CanSubmodule_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CanSubmodule_descriptor() {
    return SystemDiagnose_CanSubmodule_descriptor();
  }
  static inline const ::std::string& CanSubmodule_Name(CanSubmodule value) {
    return SystemDiagnose_CanSubmodule_Name(value);
  }
  static inline bool CanSubmodule_Parse(const ::std::string& name,
      CanSubmodule* value) {
    return SystemDiagnose_CanSubmodule_Parse(name, value);
  }

  typedef SystemDiagnose_CanChassisInitStatus CanChassisInitStatus;
  static const CanChassisInitStatus CAN_CHASSIS_INIT_SUCCESS =
    SystemDiagnose_CanChassisInitStatus_CAN_CHASSIS_INIT_SUCCESS;
  static const CanChassisInitStatus CAN_CHASSIS_INIT_DBC_ERROR =
    SystemDiagnose_CanChassisInitStatus_CAN_CHASSIS_INIT_DBC_ERROR;
  static const CanChassisInitStatus CAN_CHASSIS_INIT_PORT_ERROR =
    SystemDiagnose_CanChassisInitStatus_CAN_CHASSIS_INIT_PORT_ERROR;
  static inline bool CanChassisInitStatus_IsValid(int value) {
    return SystemDiagnose_CanChassisInitStatus_IsValid(value);
  }
  static const CanChassisInitStatus CanChassisInitStatus_MIN =
    SystemDiagnose_CanChassisInitStatus_CanChassisInitStatus_MIN;
  static const CanChassisInitStatus CanChassisInitStatus_MAX =
    SystemDiagnose_CanChassisInitStatus_CanChassisInitStatus_MAX;
  static const int CanChassisInitStatus_ARRAYSIZE =
    SystemDiagnose_CanChassisInitStatus_CanChassisInitStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CanChassisInitStatus_descriptor() {
    return SystemDiagnose_CanChassisInitStatus_descriptor();
  }
  static inline const ::std::string& CanChassisInitStatus_Name(CanChassisInitStatus value) {
    return SystemDiagnose_CanChassisInitStatus_Name(value);
  }
  static inline bool CanChassisInitStatus_Parse(const ::std::string& name,
      CanChassisInitStatus* value) {
    return SystemDiagnose_CanChassisInitStatus_Parse(name, value);
  }

  typedef SystemDiagnose_CanChassisRunStatus CanChassisRunStatus;
  static const CanChassisRunStatus CAN_CHASSIS_RUN_SUCCESS =
    SystemDiagnose_CanChassisRunStatus_CAN_CHASSIS_RUN_SUCCESS;
  static const CanChassisRunStatus CAN_CHASSIS_RUN_WARN_TOO_SLOW =
    SystemDiagnose_CanChassisRunStatus_CAN_CHASSIS_RUN_WARN_TOO_SLOW;
  static const CanChassisRunStatus CAN_CHASSIS_RUN_ERROR_CAN_READ =
    SystemDiagnose_CanChassisRunStatus_CAN_CHASSIS_RUN_ERROR_CAN_READ;
  static const CanChassisRunStatus CAN_CHASSIS_RUN_HAS_VELOCITY =
    SystemDiagnose_CanChassisRunStatus_CAN_CHASSIS_RUN_HAS_VELOCITY;
  static const CanChassisRunStatus CAN_CHASSIS_RUN_HAS_ACCLERATION =
    SystemDiagnose_CanChassisRunStatus_CAN_CHASSIS_RUN_HAS_ACCLERATION;
  static const CanChassisRunStatus CAN_CHASSIS_RUN_HAS_YAW_RATE =
    SystemDiagnose_CanChassisRunStatus_CAN_CHASSIS_RUN_HAS_YAW_RATE;
  static const CanChassisRunStatus CAN_CHASSIS_RUN_HAS_STEEL_ANGLE =
    SystemDiagnose_CanChassisRunStatus_CAN_CHASSIS_RUN_HAS_STEEL_ANGLE;
  static const CanChassisRunStatus CAN_CHASSIS_RUN_HAS_WHEEL_ANGLE =
    SystemDiagnose_CanChassisRunStatus_CAN_CHASSIS_RUN_HAS_WHEEL_ANGLE;
  static inline bool CanChassisRunStatus_IsValid(int value) {
    return SystemDiagnose_CanChassisRunStatus_IsValid(value);
  }
  static const CanChassisRunStatus CanChassisRunStatus_MIN =
    SystemDiagnose_CanChassisRunStatus_CanChassisRunStatus_MIN;
  static const CanChassisRunStatus CanChassisRunStatus_MAX =
    SystemDiagnose_CanChassisRunStatus_CanChassisRunStatus_MAX;
  static const int CanChassisRunStatus_ARRAYSIZE =
    SystemDiagnose_CanChassisRunStatus_CanChassisRunStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CanChassisRunStatus_descriptor() {
    return SystemDiagnose_CanChassisRunStatus_descriptor();
  }
  static inline const ::std::string& CanChassisRunStatus_Name(CanChassisRunStatus value) {
    return SystemDiagnose_CanChassisRunStatus_Name(value);
  }
  static inline bool CanChassisRunStatus_Parse(const ::std::string& name,
      CanChassisRunStatus* value) {
    return SystemDiagnose_CanChassisRunStatus_Parse(name, value);
  }

  typedef SystemDiagnose_CanRtkInitStatus CanRtkInitStatus;
  static const CanRtkInitStatus CAN_RTK_INIT_SUCCESS =
    SystemDiagnose_CanRtkInitStatus_CAN_RTK_INIT_SUCCESS;
  static const CanRtkInitStatus CAN_RTK_INIT_DBC_ERROR =
    SystemDiagnose_CanRtkInitStatus_CAN_RTK_INIT_DBC_ERROR;
  static const CanRtkInitStatus CAN_RTK_INIT_PORT_ERROR =
    SystemDiagnose_CanRtkInitStatus_CAN_RTK_INIT_PORT_ERROR;
  static inline bool CanRtkInitStatus_IsValid(int value) {
    return SystemDiagnose_CanRtkInitStatus_IsValid(value);
  }
  static const CanRtkInitStatus CanRtkInitStatus_MIN =
    SystemDiagnose_CanRtkInitStatus_CanRtkInitStatus_MIN;
  static const CanRtkInitStatus CanRtkInitStatus_MAX =
    SystemDiagnose_CanRtkInitStatus_CanRtkInitStatus_MAX;
  static const int CanRtkInitStatus_ARRAYSIZE =
    SystemDiagnose_CanRtkInitStatus_CanRtkInitStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CanRtkInitStatus_descriptor() {
    return SystemDiagnose_CanRtkInitStatus_descriptor();
  }
  static inline const ::std::string& CanRtkInitStatus_Name(CanRtkInitStatus value) {
    return SystemDiagnose_CanRtkInitStatus_Name(value);
  }
  static inline bool CanRtkInitStatus_Parse(const ::std::string& name,
      CanRtkInitStatus* value) {
    return SystemDiagnose_CanRtkInitStatus_Parse(name, value);
  }

  typedef SystemDiagnose_CanRtkRunStatus CanRtkRunStatus;
  static const CanRtkRunStatus CAN_RTK_RUN_SUCCESS =
    SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_SUCCESS;
  static const CanRtkRunStatus CAN_RTK_RUN_WARN_TOO_SLOW =
    SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_WARN_TOO_SLOW;
  static const CanRtkRunStatus CAN_RTK_RUN_ERROR_CAN_READ =
    SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_ERROR_CAN_READ;
  static const CanRtkRunStatus CAN_RTK_RUN_HAS_VELOCITY =
    SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_HAS_VELOCITY;
  static const CanRtkRunStatus CAN_RTK_RUN_HAS_ACCELERATION =
    SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_HAS_ACCELERATION;
  static const CanRtkRunStatus CAN_RTK_RUN_HAS_HORIZONTAL_GPS =
    SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_HAS_HORIZONTAL_GPS;
  static const CanRtkRunStatus CAN_RTK_RUN_HAS_ALTITUDE =
    SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_HAS_ALTITUDE;
  static const CanRtkRunStatus CAN_RTK_RUN_HAS_YAW =
    SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_HAS_YAW;
  static const CanRtkRunStatus CAN_RTK_RUN_HAS_GYRO_XY =
    SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_HAS_GYRO_XY;
  static const CanRtkRunStatus CAN_RTK_RUN_HAS_GYRO_Z =
    SystemDiagnose_CanRtkRunStatus_CAN_RTK_RUN_HAS_GYRO_Z;
  static inline bool CanRtkRunStatus_IsValid(int value) {
    return SystemDiagnose_CanRtkRunStatus_IsValid(value);
  }
  static const CanRtkRunStatus CanRtkRunStatus_MIN =
    SystemDiagnose_CanRtkRunStatus_CanRtkRunStatus_MIN;
  static const CanRtkRunStatus CanRtkRunStatus_MAX =
    SystemDiagnose_CanRtkRunStatus_CanRtkRunStatus_MAX;
  static const int CanRtkRunStatus_ARRAYSIZE =
    SystemDiagnose_CanRtkRunStatus_CanRtkRunStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CanRtkRunStatus_descriptor() {
    return SystemDiagnose_CanRtkRunStatus_descriptor();
  }
  static inline const ::std::string& CanRtkRunStatus_Name(CanRtkRunStatus value) {
    return SystemDiagnose_CanRtkRunStatus_Name(value);
  }
  static inline bool CanRtkRunStatus_Parse(const ::std::string& name,
      CanRtkRunStatus* value) {
    return SystemDiagnose_CanRtkRunStatus_Parse(name, value);
  }

  typedef SystemDiagnose_CanRadarFunctionStatus CanRadarFunctionStatus;
  static const CanRadarFunctionStatus CAN_RADAR_FUNC_NONE =
    SystemDiagnose_CanRadarFunctionStatus_CAN_RADAR_FUNC_NONE;
  static const CanRadarFunctionStatus CAN_RADAR_FUNC_ENABLE_FC =
    SystemDiagnose_CanRadarFunctionStatus_CAN_RADAR_FUNC_ENABLE_FC;
  static inline bool CanRadarFunctionStatus_IsValid(int value) {
    return SystemDiagnose_CanRadarFunctionStatus_IsValid(value);
  }
  static const CanRadarFunctionStatus CanRadarFunctionStatus_MIN =
    SystemDiagnose_CanRadarFunctionStatus_CanRadarFunctionStatus_MIN;
  static const CanRadarFunctionStatus CanRadarFunctionStatus_MAX =
    SystemDiagnose_CanRadarFunctionStatus_CanRadarFunctionStatus_MAX;
  static const int CanRadarFunctionStatus_ARRAYSIZE =
    SystemDiagnose_CanRadarFunctionStatus_CanRadarFunctionStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CanRadarFunctionStatus_descriptor() {
    return SystemDiagnose_CanRadarFunctionStatus_descriptor();
  }
  static inline const ::std::string& CanRadarFunctionStatus_Name(CanRadarFunctionStatus value) {
    return SystemDiagnose_CanRadarFunctionStatus_Name(value);
  }
  static inline bool CanRadarFunctionStatus_Parse(const ::std::string& name,
      CanRadarFunctionStatus* value) {
    return SystemDiagnose_CanRadarFunctionStatus_Parse(name, value);
  }

  typedef SystemDiagnose_CanRadarInitStatus CanRadarInitStatus;
  static const CanRadarInitStatus CAN_RADAR_INIT_SUCCESS =
    SystemDiagnose_CanRadarInitStatus_CAN_RADAR_INIT_SUCCESS;
  static const CanRadarInitStatus CAN_RADAR_FC_INIT_DBC_ERROR =
    SystemDiagnose_CanRadarInitStatus_CAN_RADAR_FC_INIT_DBC_ERROR;
  static const CanRadarInitStatus CAN_RADAR_FC_INIT_PORT_ERROR =
    SystemDiagnose_CanRadarInitStatus_CAN_RADAR_FC_INIT_PORT_ERROR;
  static inline bool CanRadarInitStatus_IsValid(int value) {
    return SystemDiagnose_CanRadarInitStatus_IsValid(value);
  }
  static const CanRadarInitStatus CanRadarInitStatus_MIN =
    SystemDiagnose_CanRadarInitStatus_CanRadarInitStatus_MIN;
  static const CanRadarInitStatus CanRadarInitStatus_MAX =
    SystemDiagnose_CanRadarInitStatus_CanRadarInitStatus_MAX;
  static const int CanRadarInitStatus_ARRAYSIZE =
    SystemDiagnose_CanRadarInitStatus_CanRadarInitStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CanRadarInitStatus_descriptor() {
    return SystemDiagnose_CanRadarInitStatus_descriptor();
  }
  static inline const ::std::string& CanRadarInitStatus_Name(CanRadarInitStatus value) {
    return SystemDiagnose_CanRadarInitStatus_Name(value);
  }
  static inline bool CanRadarInitStatus_Parse(const ::std::string& name,
      CanRadarInitStatus* value) {
    return SystemDiagnose_CanRadarInitStatus_Parse(name, value);
  }

  typedef SystemDiagnose_CanRadarRunStatus CanRadarRunStatus;
  static const CanRadarRunStatus CAN_RADAR_RUN_SUCCESS =
    SystemDiagnose_CanRadarRunStatus_CAN_RADAR_RUN_SUCCESS;
  static const CanRadarRunStatus CAN_RADAR_FC_RUN_WARN_TOO_SLOW =
    SystemDiagnose_CanRadarRunStatus_CAN_RADAR_FC_RUN_WARN_TOO_SLOW;
  static const CanRadarRunStatus CAN_RADAR_FC_RUN_ERROR_CAN_READ =
    SystemDiagnose_CanRadarRunStatus_CAN_RADAR_FC_RUN_ERROR_CAN_READ;
  static const CanRadarRunStatus CAN_RADAR_FC_RUN_NO_OBJECT =
    SystemDiagnose_CanRadarRunStatus_CAN_RADAR_FC_RUN_NO_OBJECT;
  static inline bool CanRadarRunStatus_IsValid(int value) {
    return SystemDiagnose_CanRadarRunStatus_IsValid(value);
  }
  static const CanRadarRunStatus CanRadarRunStatus_MIN =
    SystemDiagnose_CanRadarRunStatus_CanRadarRunStatus_MIN;
  static const CanRadarRunStatus CanRadarRunStatus_MAX =
    SystemDiagnose_CanRadarRunStatus_CanRadarRunStatus_MAX;
  static const int CanRadarRunStatus_ARRAYSIZE =
    SystemDiagnose_CanRadarRunStatus_CanRadarRunStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CanRadarRunStatus_descriptor() {
    return SystemDiagnose_CanRadarRunStatus_descriptor();
  }
  static inline const ::std::string& CanRadarRunStatus_Name(CanRadarRunStatus value) {
    return SystemDiagnose_CanRadarRunStatus_Name(value);
  }
  static inline bool CanRadarRunStatus_Parse(const ::std::string& name,
      CanRadarRunStatus* value) {
    return SystemDiagnose_CanRadarRunStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemSubmodule SystemSubmodule;
  static const SystemSubmodule SYSTEM_INVALID =
    SystemDiagnose_SystemSubmodule_SYSTEM_INVALID;
  static const SystemSubmodule SYSTEM_SYSTEM =
    SystemDiagnose_SystemSubmodule_SYSTEM_SYSTEM;
  static const SystemSubmodule SYSTEM_CAMERA =
    SystemDiagnose_SystemSubmodule_SYSTEM_CAMERA;
  static const SystemSubmodule SYSTEM_INPUT =
    SystemDiagnose_SystemSubmodule_SYSTEM_INPUT;
  static const SystemSubmodule SYSTEM_CAN =
    SystemDiagnose_SystemSubmodule_SYSTEM_CAN;
  static const SystemSubmodule SYSTEM_PERCEPTION =
    SystemDiagnose_SystemSubmodule_SYSTEM_PERCEPTION;
  static const SystemSubmodule SYSTEM_COMMUNICATION =
    SystemDiagnose_SystemSubmodule_SYSTEM_COMMUNICATION;
  static const SystemSubmodule SYSTEM_EVENT =
    SystemDiagnose_SystemSubmodule_SYSTEM_EVENT;
  static const SystemSubmodule SYSTEM_RECORD =
    SystemDiagnose_SystemSubmodule_SYSTEM_RECORD;
  static inline bool SystemSubmodule_IsValid(int value) {
    return SystemDiagnose_SystemSubmodule_IsValid(value);
  }
  static const SystemSubmodule SystemSubmodule_MIN =
    SystemDiagnose_SystemSubmodule_SystemSubmodule_MIN;
  static const SystemSubmodule SystemSubmodule_MAX =
    SystemDiagnose_SystemSubmodule_SystemSubmodule_MAX;
  static const int SystemSubmodule_ARRAYSIZE =
    SystemDiagnose_SystemSubmodule_SystemSubmodule_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemSubmodule_descriptor() {
    return SystemDiagnose_SystemSubmodule_descriptor();
  }
  static inline const ::std::string& SystemSubmodule_Name(SystemSubmodule value) {
    return SystemDiagnose_SystemSubmodule_Name(value);
  }
  static inline bool SystemSubmodule_Parse(const ::std::string& name,
      SystemSubmodule* value) {
    return SystemDiagnose_SystemSubmodule_Parse(name, value);
  }

  typedef SystemDiagnose_SystemSystemFunctionStatus SystemSystemFunctionStatus;
  static const SystemSystemFunctionStatus SYSTEM_SYSTEM_FUNC_NONE =
    SystemDiagnose_SystemSystemFunctionStatus_SYSTEM_SYSTEM_FUNC_NONE;
  static const SystemSystemFunctionStatus SYSTEM_SYSTEM_FUNC_ENABLE_CAMERA =
    SystemDiagnose_SystemSystemFunctionStatus_SYSTEM_SYSTEM_FUNC_ENABLE_CAMERA;
  static const SystemSystemFunctionStatus SYSTEM_SYSTEM_FUNC_ENABLE_PERCEPTION =
    SystemDiagnose_SystemSystemFunctionStatus_SYSTEM_SYSTEM_FUNC_ENABLE_PERCEPTION;
  static const SystemSystemFunctionStatus SYSTEM_SYSTEM_FUNC_ENABLE_CAN =
    SystemDiagnose_SystemSystemFunctionStatus_SYSTEM_SYSTEM_FUNC_ENABLE_CAN;
  static const SystemSystemFunctionStatus SYSTEM_SYSTEM_FUNC_ENABLE_COMMUNICATION =
    SystemDiagnose_SystemSystemFunctionStatus_SYSTEM_SYSTEM_FUNC_ENABLE_COMMUNICATION;
  static const SystemSystemFunctionStatus SYSTEM_SYSTEM_FUNC_ENABLE_EVENT =
    SystemDiagnose_SystemSystemFunctionStatus_SYSTEM_SYSTEM_FUNC_ENABLE_EVENT;
  static const SystemSystemFunctionStatus SYSTEM_SYSTEM_FUNC_ENABLE_RECORD =
    SystemDiagnose_SystemSystemFunctionStatus_SYSTEM_SYSTEM_FUNC_ENABLE_RECORD;
  static inline bool SystemSystemFunctionStatus_IsValid(int value) {
    return SystemDiagnose_SystemSystemFunctionStatus_IsValid(value);
  }
  static const SystemSystemFunctionStatus SystemSystemFunctionStatus_MIN =
    SystemDiagnose_SystemSystemFunctionStatus_SystemSystemFunctionStatus_MIN;
  static const SystemSystemFunctionStatus SystemSystemFunctionStatus_MAX =
    SystemDiagnose_SystemSystemFunctionStatus_SystemSystemFunctionStatus_MAX;
  static const int SystemSystemFunctionStatus_ARRAYSIZE =
    SystemDiagnose_SystemSystemFunctionStatus_SystemSystemFunctionStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemSystemFunctionStatus_descriptor() {
    return SystemDiagnose_SystemSystemFunctionStatus_descriptor();
  }
  static inline const ::std::string& SystemSystemFunctionStatus_Name(SystemSystemFunctionStatus value) {
    return SystemDiagnose_SystemSystemFunctionStatus_Name(value);
  }
  static inline bool SystemSystemFunctionStatus_Parse(const ::std::string& name,
      SystemSystemFunctionStatus* value) {
    return SystemDiagnose_SystemSystemFunctionStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemSystemInitStatus SystemSystemInitStatus;
  static const SystemSystemInitStatus SYSTEM_SYSTEM_INIT_SUCCESS =
    SystemDiagnose_SystemSystemInitStatus_SYSTEM_SYSTEM_INIT_SUCCESS;
  static const SystemSystemInitStatus SYSTEM_SYSTEM_INIT_ERROR_CAMERA =
    SystemDiagnose_SystemSystemInitStatus_SYSTEM_SYSTEM_INIT_ERROR_CAMERA;
  static const SystemSystemInitStatus SYSTEM_SYSTEM_INIT_ERROR_PERCEPTION =
    SystemDiagnose_SystemSystemInitStatus_SYSTEM_SYSTEM_INIT_ERROR_PERCEPTION;
  static const SystemSystemInitStatus SYSTEM_SYSTEM_INIT_ERROR_CAN =
    SystemDiagnose_SystemSystemInitStatus_SYSTEM_SYSTEM_INIT_ERROR_CAN;
  static const SystemSystemInitStatus SYSTEM_SYSTEM_INIT_ERROR_COMMUNICATION =
    SystemDiagnose_SystemSystemInitStatus_SYSTEM_SYSTEM_INIT_ERROR_COMMUNICATION;
  static const SystemSystemInitStatus SYSTEM_SYSTEM_INIT_ERROR_EVENT =
    SystemDiagnose_SystemSystemInitStatus_SYSTEM_SYSTEM_INIT_ERROR_EVENT;
  static const SystemSystemInitStatus SYSTEM_SYSTEM_INIT_ERROR_RECORD =
    SystemDiagnose_SystemSystemInitStatus_SYSTEM_SYSTEM_INIT_ERROR_RECORD;
  static inline bool SystemSystemInitStatus_IsValid(int value) {
    return SystemDiagnose_SystemSystemInitStatus_IsValid(value);
  }
  static const SystemSystemInitStatus SystemSystemInitStatus_MIN =
    SystemDiagnose_SystemSystemInitStatus_SystemSystemInitStatus_MIN;
  static const SystemSystemInitStatus SystemSystemInitStatus_MAX =
    SystemDiagnose_SystemSystemInitStatus_SystemSystemInitStatus_MAX;
  static const int SystemSystemInitStatus_ARRAYSIZE =
    SystemDiagnose_SystemSystemInitStatus_SystemSystemInitStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemSystemInitStatus_descriptor() {
    return SystemDiagnose_SystemSystemInitStatus_descriptor();
  }
  static inline const ::std::string& SystemSystemInitStatus_Name(SystemSystemInitStatus value) {
    return SystemDiagnose_SystemSystemInitStatus_Name(value);
  }
  static inline bool SystemSystemInitStatus_Parse(const ::std::string& name,
      SystemSystemInitStatus* value) {
    return SystemDiagnose_SystemSystemInitStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemSystemRunStatus SystemSystemRunStatus;
  static const SystemSystemRunStatus SYSTEM_SYSTEM_RUN_SUCCESS =
    SystemDiagnose_SystemSystemRunStatus_SYSTEM_SYSTEM_RUN_SUCCESS;
  static const SystemSystemRunStatus SYSTEM_SYSTEM_RUN_EOF =
    SystemDiagnose_SystemSystemRunStatus_SYSTEM_SYSTEM_RUN_EOF;
  static const SystemSystemRunStatus SYSTEM_SYSTEM_RUN_ERROR_CAMERA =
    SystemDiagnose_SystemSystemRunStatus_SYSTEM_SYSTEM_RUN_ERROR_CAMERA;
  static const SystemSystemRunStatus SYSTEM_SYSTEM_RUN_ERROR_PERCEPTION =
    SystemDiagnose_SystemSystemRunStatus_SYSTEM_SYSTEM_RUN_ERROR_PERCEPTION;
  static const SystemSystemRunStatus SYSTEM_SYSTEM_RUN_ERROR_CAN =
    SystemDiagnose_SystemSystemRunStatus_SYSTEM_SYSTEM_RUN_ERROR_CAN;
  static const SystemSystemRunStatus SYSTEM_SYSTEM_RUN_ERROR_COMMUNICATION =
    SystemDiagnose_SystemSystemRunStatus_SYSTEM_SYSTEM_RUN_ERROR_COMMUNICATION;
  static const SystemSystemRunStatus SYSTEM_SYSTEM_RUN_ERROR_EVENT =
    SystemDiagnose_SystemSystemRunStatus_SYSTEM_SYSTEM_RUN_ERROR_EVENT;
  static const SystemSystemRunStatus SYSTEM_SYSTEM_RUN_ERROR_RECORD =
    SystemDiagnose_SystemSystemRunStatus_SYSTEM_SYSTEM_RUN_ERROR_RECORD;
  static inline bool SystemSystemRunStatus_IsValid(int value) {
    return SystemDiagnose_SystemSystemRunStatus_IsValid(value);
  }
  static const SystemSystemRunStatus SystemSystemRunStatus_MIN =
    SystemDiagnose_SystemSystemRunStatus_SystemSystemRunStatus_MIN;
  static const SystemSystemRunStatus SystemSystemRunStatus_MAX =
    SystemDiagnose_SystemSystemRunStatus_SystemSystemRunStatus_MAX;
  static const int SystemSystemRunStatus_ARRAYSIZE =
    SystemDiagnose_SystemSystemRunStatus_SystemSystemRunStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemSystemRunStatus_descriptor() {
    return SystemDiagnose_SystemSystemRunStatus_descriptor();
  }
  static inline const ::std::string& SystemSystemRunStatus_Name(SystemSystemRunStatus value) {
    return SystemDiagnose_SystemSystemRunStatus_Name(value);
  }
  static inline bool SystemSystemRunStatus_Parse(const ::std::string& name,
      SystemSystemRunStatus* value) {
    return SystemDiagnose_SystemSystemRunStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemCameraFunctionStatus SystemCameraFunctionStatus;
  static const SystemCameraFunctionStatus SYSTEM_CAMERA_FUNC_NONE =
    SystemDiagnose_SystemCameraFunctionStatus_SYSTEM_CAMERA_FUNC_NONE;
  static const SystemCameraFunctionStatus SYSTEM_CAMERA_FUNC_ENABLE_FC =
    SystemDiagnose_SystemCameraFunctionStatus_SYSTEM_CAMERA_FUNC_ENABLE_FC;
  static const SystemCameraFunctionStatus SYSTEM_CAMERA_FUNC_ENABLE_FC_NEAR =
    SystemDiagnose_SystemCameraFunctionStatus_SYSTEM_CAMERA_FUNC_ENABLE_FC_NEAR;
  static const SystemCameraFunctionStatus SYSTEM_CAMERA_FUNC_ENABLE_FL =
    SystemDiagnose_SystemCameraFunctionStatus_SYSTEM_CAMERA_FUNC_ENABLE_FL;
  static const SystemCameraFunctionStatus SYSTEM_CAMERA_FUNC_ENABLE_FR =
    SystemDiagnose_SystemCameraFunctionStatus_SYSTEM_CAMERA_FUNC_ENABLE_FR;
  static const SystemCameraFunctionStatus SYSTEM_CAMERA_FUNC_ENABLE_RC =
    SystemDiagnose_SystemCameraFunctionStatus_SYSTEM_CAMERA_FUNC_ENABLE_RC;
  static const SystemCameraFunctionStatus SYSTEM_CAMERA_FUNC_ENABLE_RL =
    SystemDiagnose_SystemCameraFunctionStatus_SYSTEM_CAMERA_FUNC_ENABLE_RL;
  static const SystemCameraFunctionStatus SYSTEM_CAMERA_FUNC_ENABLE_RR =
    SystemDiagnose_SystemCameraFunctionStatus_SYSTEM_CAMERA_FUNC_ENABLE_RR;
  static const SystemCameraFunctionStatus SYSTEM_CAMERA_FUNC_ENABLE_FC_FAR =
    SystemDiagnose_SystemCameraFunctionStatus_SYSTEM_CAMERA_FUNC_ENABLE_FC_FAR;
  static inline bool SystemCameraFunctionStatus_IsValid(int value) {
    return SystemDiagnose_SystemCameraFunctionStatus_IsValid(value);
  }
  static const SystemCameraFunctionStatus SystemCameraFunctionStatus_MIN =
    SystemDiagnose_SystemCameraFunctionStatus_SystemCameraFunctionStatus_MIN;
  static const SystemCameraFunctionStatus SystemCameraFunctionStatus_MAX =
    SystemDiagnose_SystemCameraFunctionStatus_SystemCameraFunctionStatus_MAX;
  static const int SystemCameraFunctionStatus_ARRAYSIZE =
    SystemDiagnose_SystemCameraFunctionStatus_SystemCameraFunctionStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemCameraFunctionStatus_descriptor() {
    return SystemDiagnose_SystemCameraFunctionStatus_descriptor();
  }
  static inline const ::std::string& SystemCameraFunctionStatus_Name(SystemCameraFunctionStatus value) {
    return SystemDiagnose_SystemCameraFunctionStatus_Name(value);
  }
  static inline bool SystemCameraFunctionStatus_Parse(const ::std::string& name,
      SystemCameraFunctionStatus* value) {
    return SystemDiagnose_SystemCameraFunctionStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemCameraInitStatus SystemCameraInitStatus;
  static const SystemCameraInitStatus SYSTEM_CAMERA_INIT_SUCCESS =
    SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_SUCCESS;
  static const SystemCameraInitStatus SYSTEM_CAMERA_INIT_ERROR_FC =
    SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_FC;
  static const SystemCameraInitStatus SYSTEM_CAMERA_INIT_ERROR_FC_NEAR =
    SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_FC_NEAR;
  static const SystemCameraInitStatus SYSTEM_CAMERA_INIT_ERROR_FL =
    SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_FL;
  static const SystemCameraInitStatus SYSTEM_CAMERA_INIT_ERROR_FR =
    SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_FR;
  static const SystemCameraInitStatus SYSTEM_CAMERA_INIT_ERROR_RC =
    SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_RC;
  static const SystemCameraInitStatus SYSTEM_CAMERA_INIT_ERROR_RL =
    SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_RL;
  static const SystemCameraInitStatus SYSTEM_CAMERA_INIT_ERROR_RR =
    SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_RR;
  static const SystemCameraInitStatus SYSTEM_CAMERA_INIT_ERROR_FC_FAR =
    SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_FC_FAR;
  static const SystemCameraInitStatus SYSTEM_CAMERA_INIT_ERROR_CONFIG =
    SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_CONFIG;
  static const SystemCameraInitStatus SYSTEM_CAMERA_INIT_ERROR_DEVICE =
    SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_DEVICE;
  static const SystemCameraInitStatus SYSTEM_CAMERA_INIT_ERROR_LINK =
    SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_LINK;
  static const SystemCameraInitStatus SYSTEM_CAMERA_INIT_ERROR_ISP =
    SystemDiagnose_SystemCameraInitStatus_SYSTEM_CAMERA_INIT_ERROR_ISP;
  static inline bool SystemCameraInitStatus_IsValid(int value) {
    return SystemDiagnose_SystemCameraInitStatus_IsValid(value);
  }
  static const SystemCameraInitStatus SystemCameraInitStatus_MIN =
    SystemDiagnose_SystemCameraInitStatus_SystemCameraInitStatus_MIN;
  static const SystemCameraInitStatus SystemCameraInitStatus_MAX =
    SystemDiagnose_SystemCameraInitStatus_SystemCameraInitStatus_MAX;
  static const int SystemCameraInitStatus_ARRAYSIZE =
    SystemDiagnose_SystemCameraInitStatus_SystemCameraInitStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemCameraInitStatus_descriptor() {
    return SystemDiagnose_SystemCameraInitStatus_descriptor();
  }
  static inline const ::std::string& SystemCameraInitStatus_Name(SystemCameraInitStatus value) {
    return SystemDiagnose_SystemCameraInitStatus_Name(value);
  }
  static inline bool SystemCameraInitStatus_Parse(const ::std::string& name,
      SystemCameraInitStatus* value) {
    return SystemDiagnose_SystemCameraInitStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemCameraRunStatus SystemCameraRunStatus;
  static const SystemCameraRunStatus SYSTEM_CAMERA_RUN_SUCCESS =
    SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_SUCCESS;
  static const SystemCameraRunStatus SYSTEM_CAMERA_RUN_EOF =
    SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_EOF;
  static const SystemCameraRunStatus SYSTEM_CAMERA_RUN_WARN_TOO_SLOW =
    SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_WARN_TOO_SLOW;
  static const SystemCameraRunStatus SYSTEM_CAMERA_RUN_WARN_TIMESTAMP =
    SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_WARN_TIMESTAMP;
  static const SystemCameraRunStatus SYSTEM_CAMERA_RUN_ERROR_FC =
    SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_ERROR_FC;
  static const SystemCameraRunStatus SYSTEM_CAMERA_RUN_ERROR_FC_NEAR =
    SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_ERROR_FC_NEAR;
  static const SystemCameraRunStatus SYSTEM_CAMERA_RUN_ERROR_FL =
    SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_ERROR_FL;
  static const SystemCameraRunStatus SYSTEM_CAMERA_RUN_ERROR_FR =
    SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_ERROR_FR;
  static const SystemCameraRunStatus SYSTEM_CAMERA_RUN_ERROR_RC =
    SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_ERROR_RC;
  static const SystemCameraRunStatus SYSTEM_CAMERA_RUN_ERROR_RL =
    SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_ERROR_RL;
  static const SystemCameraRunStatus SYSTEM_CAMERA_RUN_ERROR_RR =
    SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_ERROR_RR;
  static const SystemCameraRunStatus SYSTEM_CAMERA_RUN_ERROR_FC_FAR =
    SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_ERROR_FC_FAR;
  static const SystemCameraRunStatus SYSTEM_CAMERA_RUN_ERROR_ISP =
    SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_ERROR_ISP;
  static const SystemCameraRunStatus SYSTEM_CAMERA_RUN_ERROR_LINK =
    SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_ERROR_LINK;
  static const SystemCameraRunStatus SYSTEM_CAMERA_RUN_WARN_TIMEOUT =
    SystemDiagnose_SystemCameraRunStatus_SYSTEM_CAMERA_RUN_WARN_TIMEOUT;
  static inline bool SystemCameraRunStatus_IsValid(int value) {
    return SystemDiagnose_SystemCameraRunStatus_IsValid(value);
  }
  static const SystemCameraRunStatus SystemCameraRunStatus_MIN =
    SystemDiagnose_SystemCameraRunStatus_SystemCameraRunStatus_MIN;
  static const SystemCameraRunStatus SystemCameraRunStatus_MAX =
    SystemDiagnose_SystemCameraRunStatus_SystemCameraRunStatus_MAX;
  static const int SystemCameraRunStatus_ARRAYSIZE =
    SystemDiagnose_SystemCameraRunStatus_SystemCameraRunStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemCameraRunStatus_descriptor() {
    return SystemDiagnose_SystemCameraRunStatus_descriptor();
  }
  static inline const ::std::string& SystemCameraRunStatus_Name(SystemCameraRunStatus value) {
    return SystemDiagnose_SystemCameraRunStatus_Name(value);
  }
  static inline bool SystemCameraRunStatus_Parse(const ::std::string& name,
      SystemCameraRunStatus* value) {
    return SystemDiagnose_SystemCameraRunStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemInputFunctionStatus SystemInputFunctionStatus;
  static const SystemInputFunctionStatus SYSTEM_INPUT_FUNC_NONE =
    SystemDiagnose_SystemInputFunctionStatus_SYSTEM_INPUT_FUNC_NONE;
  static const SystemInputFunctionStatus SYSTEM_INPUT_FUNC_ENABLE_CSD =
    SystemDiagnose_SystemInputFunctionStatus_SYSTEM_INPUT_FUNC_ENABLE_CSD;
  static const SystemInputFunctionStatus SYSTEM_INPUT_FUNC_ENABLE_DDS =
    SystemDiagnose_SystemInputFunctionStatus_SYSTEM_INPUT_FUNC_ENABLE_DDS;
  static inline bool SystemInputFunctionStatus_IsValid(int value) {
    return SystemDiagnose_SystemInputFunctionStatus_IsValid(value);
  }
  static const SystemInputFunctionStatus SystemInputFunctionStatus_MIN =
    SystemDiagnose_SystemInputFunctionStatus_SystemInputFunctionStatus_MIN;
  static const SystemInputFunctionStatus SystemInputFunctionStatus_MAX =
    SystemDiagnose_SystemInputFunctionStatus_SystemInputFunctionStatus_MAX;
  static const int SystemInputFunctionStatus_ARRAYSIZE =
    SystemDiagnose_SystemInputFunctionStatus_SystemInputFunctionStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemInputFunctionStatus_descriptor() {
    return SystemDiagnose_SystemInputFunctionStatus_descriptor();
  }
  static inline const ::std::string& SystemInputFunctionStatus_Name(SystemInputFunctionStatus value) {
    return SystemDiagnose_SystemInputFunctionStatus_Name(value);
  }
  static inline bool SystemInputFunctionStatus_Parse(const ::std::string& name,
      SystemInputFunctionStatus* value) {
    return SystemDiagnose_SystemInputFunctionStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemInputInitStatus SystemInputInitStatus;
  static const SystemInputInitStatus SYSTEM_INPUT_INIT_SUCCESS =
    SystemDiagnose_SystemInputInitStatus_SYSTEM_INPUT_INIT_SUCCESS;
  static const SystemInputInitStatus SYSTEM_INPUT_INIT_CSD_ERROR =
    SystemDiagnose_SystemInputInitStatus_SYSTEM_INPUT_INIT_CSD_ERROR;
  static const SystemInputInitStatus SYSTEM_INPUT_INIT_DDS_ERROR_SUBSCRIBE =
    SystemDiagnose_SystemInputInitStatus_SYSTEM_INPUT_INIT_DDS_ERROR_SUBSCRIBE;
  static inline bool SystemInputInitStatus_IsValid(int value) {
    return SystemDiagnose_SystemInputInitStatus_IsValid(value);
  }
  static const SystemInputInitStatus SystemInputInitStatus_MIN =
    SystemDiagnose_SystemInputInitStatus_SystemInputInitStatus_MIN;
  static const SystemInputInitStatus SystemInputInitStatus_MAX =
    SystemDiagnose_SystemInputInitStatus_SystemInputInitStatus_MAX;
  static const int SystemInputInitStatus_ARRAYSIZE =
    SystemDiagnose_SystemInputInitStatus_SystemInputInitStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemInputInitStatus_descriptor() {
    return SystemDiagnose_SystemInputInitStatus_descriptor();
  }
  static inline const ::std::string& SystemInputInitStatus_Name(SystemInputInitStatus value) {
    return SystemDiagnose_SystemInputInitStatus_Name(value);
  }
  static inline bool SystemInputInitStatus_Parse(const ::std::string& name,
      SystemInputInitStatus* value) {
    return SystemDiagnose_SystemInputInitStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemInputRunStatus SystemInputRunStatus;
  static const SystemInputRunStatus SYSTEM_INPUT_RUN_SUCCESS =
    SystemDiagnose_SystemInputRunStatus_SYSTEM_INPUT_RUN_SUCCESS;
  static const SystemInputRunStatus SYSTEM_INPUT_RUN_CSD_EOF =
    SystemDiagnose_SystemInputRunStatus_SYSTEM_INPUT_RUN_CSD_EOF;
  static const SystemInputRunStatus SYSTEM_INPUT_RUN_CSD_WARN_TOO_SLOW =
    SystemDiagnose_SystemInputRunStatus_SYSTEM_INPUT_RUN_CSD_WARN_TOO_SLOW;
  static const SystemInputRunStatus SYSTEM_INPUT_RUN_CSD_ERROR_SIZE =
    SystemDiagnose_SystemInputRunStatus_SYSTEM_INPUT_RUN_CSD_ERROR_SIZE;
  static const SystemInputRunStatus SYSTEM_INPUT_RUN_CSD_ERROR_CONTENT =
    SystemDiagnose_SystemInputRunStatus_SYSTEM_INPUT_RUN_CSD_ERROR_CONTENT;
  static const SystemInputRunStatus SYSTEM_INPUT_RUN_CSD_ERROR_OUT_OF_MEMORY =
    SystemDiagnose_SystemInputRunStatus_SYSTEM_INPUT_RUN_CSD_ERROR_OUT_OF_MEMORY;
  static const SystemInputRunStatus SYSTEM_INPUT_RUN_DDS_WARN_TOO_SLOW =
    SystemDiagnose_SystemInputRunStatus_SYSTEM_INPUT_RUN_DDS_WARN_TOO_SLOW;
  static const SystemInputRunStatus SYSTEM_INPUT_RUN_DDS_WARN_PILOT_EVENT =
    SystemDiagnose_SystemInputRunStatus_SYSTEM_INPUT_RUN_DDS_WARN_PILOT_EVENT;
  static inline bool SystemInputRunStatus_IsValid(int value) {
    return SystemDiagnose_SystemInputRunStatus_IsValid(value);
  }
  static const SystemInputRunStatus SystemInputRunStatus_MIN =
    SystemDiagnose_SystemInputRunStatus_SystemInputRunStatus_MIN;
  static const SystemInputRunStatus SystemInputRunStatus_MAX =
    SystemDiagnose_SystemInputRunStatus_SystemInputRunStatus_MAX;
  static const int SystemInputRunStatus_ARRAYSIZE =
    SystemDiagnose_SystemInputRunStatus_SystemInputRunStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemInputRunStatus_descriptor() {
    return SystemDiagnose_SystemInputRunStatus_descriptor();
  }
  static inline const ::std::string& SystemInputRunStatus_Name(SystemInputRunStatus value) {
    return SystemDiagnose_SystemInputRunStatus_Name(value);
  }
  static inline bool SystemInputRunStatus_Parse(const ::std::string& name,
      SystemInputRunStatus* value) {
    return SystemDiagnose_SystemInputRunStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemCanFunctionStatus SystemCanFunctionStatus;
  static const SystemCanFunctionStatus SYSTEM_CAN_FUNC_NONE =
    SystemDiagnose_SystemCanFunctionStatus_SYSTEM_CAN_FUNC_NONE;
  static const SystemCanFunctionStatus SYSTEM_CAN_FUNC_ENABLE_CHASSIS =
    SystemDiagnose_SystemCanFunctionStatus_SYSTEM_CAN_FUNC_ENABLE_CHASSIS;
  static const SystemCanFunctionStatus SYSTEM_CAN_FUNC_ENABLE_RTK =
    SystemDiagnose_SystemCanFunctionStatus_SYSTEM_CAN_FUNC_ENABLE_RTK;
  static const SystemCanFunctionStatus SYSTEM_CAN_FUNC_ENABLE_RADAR_FC =
    SystemDiagnose_SystemCanFunctionStatus_SYSTEM_CAN_FUNC_ENABLE_RADAR_FC;
  static inline bool SystemCanFunctionStatus_IsValid(int value) {
    return SystemDiagnose_SystemCanFunctionStatus_IsValid(value);
  }
  static const SystemCanFunctionStatus SystemCanFunctionStatus_MIN =
    SystemDiagnose_SystemCanFunctionStatus_SystemCanFunctionStatus_MIN;
  static const SystemCanFunctionStatus SystemCanFunctionStatus_MAX =
    SystemDiagnose_SystemCanFunctionStatus_SystemCanFunctionStatus_MAX;
  static const int SystemCanFunctionStatus_ARRAYSIZE =
    SystemDiagnose_SystemCanFunctionStatus_SystemCanFunctionStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemCanFunctionStatus_descriptor() {
    return SystemDiagnose_SystemCanFunctionStatus_descriptor();
  }
  static inline const ::std::string& SystemCanFunctionStatus_Name(SystemCanFunctionStatus value) {
    return SystemDiagnose_SystemCanFunctionStatus_Name(value);
  }
  static inline bool SystemCanFunctionStatus_Parse(const ::std::string& name,
      SystemCanFunctionStatus* value) {
    return SystemDiagnose_SystemCanFunctionStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemCanInitStatus SystemCanInitStatus;
  static const SystemCanInitStatus SYSTEM_CAN_INIT_SUCCESS =
    SystemDiagnose_SystemCanInitStatus_SYSTEM_CAN_INIT_SUCCESS;
  static const SystemCanInitStatus SYSTEM_CAN_INIT_ERROR_CHASSIS =
    SystemDiagnose_SystemCanInitStatus_SYSTEM_CAN_INIT_ERROR_CHASSIS;
  static const SystemCanInitStatus SYSTEM_CAN_INIT_ERROR_RTK =
    SystemDiagnose_SystemCanInitStatus_SYSTEM_CAN_INIT_ERROR_RTK;
  static const SystemCanInitStatus SYSTEM_CAN_INIT_ERROR_RADAR_FC =
    SystemDiagnose_SystemCanInitStatus_SYSTEM_CAN_INIT_ERROR_RADAR_FC;
  static inline bool SystemCanInitStatus_IsValid(int value) {
    return SystemDiagnose_SystemCanInitStatus_IsValid(value);
  }
  static const SystemCanInitStatus SystemCanInitStatus_MIN =
    SystemDiagnose_SystemCanInitStatus_SystemCanInitStatus_MIN;
  static const SystemCanInitStatus SystemCanInitStatus_MAX =
    SystemDiagnose_SystemCanInitStatus_SystemCanInitStatus_MAX;
  static const int SystemCanInitStatus_ARRAYSIZE =
    SystemDiagnose_SystemCanInitStatus_SystemCanInitStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemCanInitStatus_descriptor() {
    return SystemDiagnose_SystemCanInitStatus_descriptor();
  }
  static inline const ::std::string& SystemCanInitStatus_Name(SystemCanInitStatus value) {
    return SystemDiagnose_SystemCanInitStatus_Name(value);
  }
  static inline bool SystemCanInitStatus_Parse(const ::std::string& name,
      SystemCanInitStatus* value) {
    return SystemDiagnose_SystemCanInitStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemCanRunStatus SystemCanRunStatus;
  static const SystemCanRunStatus SYSTEM_CAN_RUN_SUCCESS =
    SystemDiagnose_SystemCanRunStatus_SYSTEM_CAN_RUN_SUCCESS;
  static const SystemCanRunStatus SYSTEM_CAN_RUN_WARN_TOO_SLOW =
    SystemDiagnose_SystemCanRunStatus_SYSTEM_CAN_RUN_WARN_TOO_SLOW;
  static const SystemCanRunStatus SYSTEM_CAN_RUN_ERROR_CHASSIS =
    SystemDiagnose_SystemCanRunStatus_SYSTEM_CAN_RUN_ERROR_CHASSIS;
  static const SystemCanRunStatus SYSTEM_CAN_RUN_ERROR_RTK =
    SystemDiagnose_SystemCanRunStatus_SYSTEM_CAN_RUN_ERROR_RTK;
  static const SystemCanRunStatus SYSTEM_CAN_RUN_ERROR_RADAR_FC =
    SystemDiagnose_SystemCanRunStatus_SYSTEM_CAN_RUN_ERROR_RADAR_FC;
  static inline bool SystemCanRunStatus_IsValid(int value) {
    return SystemDiagnose_SystemCanRunStatus_IsValid(value);
  }
  static const SystemCanRunStatus SystemCanRunStatus_MIN =
    SystemDiagnose_SystemCanRunStatus_SystemCanRunStatus_MIN;
  static const SystemCanRunStatus SystemCanRunStatus_MAX =
    SystemDiagnose_SystemCanRunStatus_SystemCanRunStatus_MAX;
  static const int SystemCanRunStatus_ARRAYSIZE =
    SystemDiagnose_SystemCanRunStatus_SystemCanRunStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemCanRunStatus_descriptor() {
    return SystemDiagnose_SystemCanRunStatus_descriptor();
  }
  static inline const ::std::string& SystemCanRunStatus_Name(SystemCanRunStatus value) {
    return SystemDiagnose_SystemCanRunStatus_Name(value);
  }
  static inline bool SystemCanRunStatus_Parse(const ::std::string& name,
      SystemCanRunStatus* value) {
    return SystemDiagnose_SystemCanRunStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemPerceptionInitStatus SystemPerceptionInitStatus;
  static const SystemPerceptionInitStatus SYSTEM_PERCEPTION_INIT_SUCCESS =
    SystemDiagnose_SystemPerceptionInitStatus_SYSTEM_PERCEPTION_INIT_SUCCESS;
  static const SystemPerceptionInitStatus SYSTEM_PERCEPTION_INIT_ERROR_CALIBRATION =
    SystemDiagnose_SystemPerceptionInitStatus_SYSTEM_PERCEPTION_INIT_ERROR_CALIBRATION;
  static const SystemPerceptionInitStatus SYSTEM_PERCEPTION_INIT_ERROR_PERCEPTION =
    SystemDiagnose_SystemPerceptionInitStatus_SYSTEM_PERCEPTION_INIT_ERROR_PERCEPTION;
  static const SystemPerceptionInitStatus SYSTEM_PERCEPTION_INIT_ERROR_DEVICE =
    SystemDiagnose_SystemPerceptionInitStatus_SYSTEM_PERCEPTION_INIT_ERROR_DEVICE;
  static inline bool SystemPerceptionInitStatus_IsValid(int value) {
    return SystemDiagnose_SystemPerceptionInitStatus_IsValid(value);
  }
  static const SystemPerceptionInitStatus SystemPerceptionInitStatus_MIN =
    SystemDiagnose_SystemPerceptionInitStatus_SystemPerceptionInitStatus_MIN;
  static const SystemPerceptionInitStatus SystemPerceptionInitStatus_MAX =
    SystemDiagnose_SystemPerceptionInitStatus_SystemPerceptionInitStatus_MAX;
  static const int SystemPerceptionInitStatus_ARRAYSIZE =
    SystemDiagnose_SystemPerceptionInitStatus_SystemPerceptionInitStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemPerceptionInitStatus_descriptor() {
    return SystemDiagnose_SystemPerceptionInitStatus_descriptor();
  }
  static inline const ::std::string& SystemPerceptionInitStatus_Name(SystemPerceptionInitStatus value) {
    return SystemDiagnose_SystemPerceptionInitStatus_Name(value);
  }
  static inline bool SystemPerceptionInitStatus_Parse(const ::std::string& name,
      SystemPerceptionInitStatus* value) {
    return SystemDiagnose_SystemPerceptionInitStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemPerceptionRunStatus SystemPerceptionRunStatus;
  static const SystemPerceptionRunStatus SYSTEM_PERCEPTION_RUN_SUCCESS =
    SystemDiagnose_SystemPerceptionRunStatus_SYSTEM_PERCEPTION_RUN_SUCCESS;
  static const SystemPerceptionRunStatus SYSTEM_PERCEPTION_RUN_WARN_TOO_SLOW =
    SystemDiagnose_SystemPerceptionRunStatus_SYSTEM_PERCEPTION_RUN_WARN_TOO_SLOW;
  static const SystemPerceptionRunStatus SYSTEM_PERCEPTION_RUN_ERROR_PERCEPTION =
    SystemDiagnose_SystemPerceptionRunStatus_SYSTEM_PERCEPTION_RUN_ERROR_PERCEPTION;
  static const SystemPerceptionRunStatus SYSTEM_PERCEPTION_RUN_ERROR_INPUT =
    SystemDiagnose_SystemPerceptionRunStatus_SYSTEM_PERCEPTION_RUN_ERROR_INPUT;
  static inline bool SystemPerceptionRunStatus_IsValid(int value) {
    return SystemDiagnose_SystemPerceptionRunStatus_IsValid(value);
  }
  static const SystemPerceptionRunStatus SystemPerceptionRunStatus_MIN =
    SystemDiagnose_SystemPerceptionRunStatus_SystemPerceptionRunStatus_MIN;
  static const SystemPerceptionRunStatus SystemPerceptionRunStatus_MAX =
    SystemDiagnose_SystemPerceptionRunStatus_SystemPerceptionRunStatus_MAX;
  static const int SystemPerceptionRunStatus_ARRAYSIZE =
    SystemDiagnose_SystemPerceptionRunStatus_SystemPerceptionRunStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemPerceptionRunStatus_descriptor() {
    return SystemDiagnose_SystemPerceptionRunStatus_descriptor();
  }
  static inline const ::std::string& SystemPerceptionRunStatus_Name(SystemPerceptionRunStatus value) {
    return SystemDiagnose_SystemPerceptionRunStatus_Name(value);
  }
  static inline bool SystemPerceptionRunStatus_Parse(const ::std::string& name,
      SystemPerceptionRunStatus* value) {
    return SystemDiagnose_SystemPerceptionRunStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemCommunicationFunctionStatus SystemCommunicationFunctionStatus;
  static const SystemCommunicationFunctionStatus SYSTEM_COMMUNICATION_FUNC_NONE =
    SystemDiagnose_SystemCommunicationFunctionStatus_SYSTEM_COMMUNICATION_FUNC_NONE;
  static const SystemCommunicationFunctionStatus SYSTEM_COMMUNICATION_FUNC_ENABLE_DDS =
    SystemDiagnose_SystemCommunicationFunctionStatus_SYSTEM_COMMUNICATION_FUNC_ENABLE_DDS;
  static const SystemCommunicationFunctionStatus SYSTEM_COMMUNICATION_FUNC_ENABLE_SHARED_MEMORY =
    SystemDiagnose_SystemCommunicationFunctionStatus_SYSTEM_COMMUNICATION_FUNC_ENABLE_SHARED_MEMORY;
  static const SystemCommunicationFunctionStatus SYSTEM_COMMUNICATION_FUNC_ENABLE_REMOTE_RENDER =
    SystemDiagnose_SystemCommunicationFunctionStatus_SYSTEM_COMMUNICATION_FUNC_ENABLE_REMOTE_RENDER;
  static inline bool SystemCommunicationFunctionStatus_IsValid(int value) {
    return SystemDiagnose_SystemCommunicationFunctionStatus_IsValid(value);
  }
  static const SystemCommunicationFunctionStatus SystemCommunicationFunctionStatus_MIN =
    SystemDiagnose_SystemCommunicationFunctionStatus_SystemCommunicationFunctionStatus_MIN;
  static const SystemCommunicationFunctionStatus SystemCommunicationFunctionStatus_MAX =
    SystemDiagnose_SystemCommunicationFunctionStatus_SystemCommunicationFunctionStatus_MAX;
  static const int SystemCommunicationFunctionStatus_ARRAYSIZE =
    SystemDiagnose_SystemCommunicationFunctionStatus_SystemCommunicationFunctionStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemCommunicationFunctionStatus_descriptor() {
    return SystemDiagnose_SystemCommunicationFunctionStatus_descriptor();
  }
  static inline const ::std::string& SystemCommunicationFunctionStatus_Name(SystemCommunicationFunctionStatus value) {
    return SystemDiagnose_SystemCommunicationFunctionStatus_Name(value);
  }
  static inline bool SystemCommunicationFunctionStatus_Parse(const ::std::string& name,
      SystemCommunicationFunctionStatus* value) {
    return SystemDiagnose_SystemCommunicationFunctionStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemCommunicationInitStatus SystemCommunicationInitStatus;
  static const SystemCommunicationInitStatus SYSTEM_COMMUNICATION_INIT_SUCCESS =
    SystemDiagnose_SystemCommunicationInitStatus_SYSTEM_COMMUNICATION_INIT_SUCCESS;
  static const SystemCommunicationInitStatus SYSTEM_COMMUNICATION_INIT_ERROR_DDS =
    SystemDiagnose_SystemCommunicationInitStatus_SYSTEM_COMMUNICATION_INIT_ERROR_DDS;
  static const SystemCommunicationInitStatus SYSTEM_COMMUNICATION_INIT_ERROR_SHARED_MEMORY =
    SystemDiagnose_SystemCommunicationInitStatus_SYSTEM_COMMUNICATION_INIT_ERROR_SHARED_MEMORY;
  static const SystemCommunicationInitStatus SYSTEM_COMMUNICATION_INIT_ERROR_REMOTE_RENDER =
    SystemDiagnose_SystemCommunicationInitStatus_SYSTEM_COMMUNICATION_INIT_ERROR_REMOTE_RENDER;
  static inline bool SystemCommunicationInitStatus_IsValid(int value) {
    return SystemDiagnose_SystemCommunicationInitStatus_IsValid(value);
  }
  static const SystemCommunicationInitStatus SystemCommunicationInitStatus_MIN =
    SystemDiagnose_SystemCommunicationInitStatus_SystemCommunicationInitStatus_MIN;
  static const SystemCommunicationInitStatus SystemCommunicationInitStatus_MAX =
    SystemDiagnose_SystemCommunicationInitStatus_SystemCommunicationInitStatus_MAX;
  static const int SystemCommunicationInitStatus_ARRAYSIZE =
    SystemDiagnose_SystemCommunicationInitStatus_SystemCommunicationInitStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemCommunicationInitStatus_descriptor() {
    return SystemDiagnose_SystemCommunicationInitStatus_descriptor();
  }
  static inline const ::std::string& SystemCommunicationInitStatus_Name(SystemCommunicationInitStatus value) {
    return SystemDiagnose_SystemCommunicationInitStatus_Name(value);
  }
  static inline bool SystemCommunicationInitStatus_Parse(const ::std::string& name,
      SystemCommunicationInitStatus* value) {
    return SystemDiagnose_SystemCommunicationInitStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemCommunicationRunStatus SystemCommunicationRunStatus;
  static const SystemCommunicationRunStatus SYSTEM_COMMUNICATION_RUN_SUCCESS =
    SystemDiagnose_SystemCommunicationRunStatus_SYSTEM_COMMUNICATION_RUN_SUCCESS;
  static const SystemCommunicationRunStatus SYSTEM_COMMUNICATION_RUN_WARN_DDS_EVENT =
    SystemDiagnose_SystemCommunicationRunStatus_SYSTEM_COMMUNICATION_RUN_WARN_DDS_EVENT;
  static const SystemCommunicationRunStatus SYSTEM_COMMUNICATION_RUN_WARN_DDS_PUBLISH_TOO_SLOW =
    SystemDiagnose_SystemCommunicationRunStatus_SYSTEM_COMMUNICATION_RUN_WARN_DDS_PUBLISH_TOO_SLOW;
  static const SystemCommunicationRunStatus SYSTEM_COMMUNICATION_RUN_ERROR_DDS_PUBLISH =
    SystemDiagnose_SystemCommunicationRunStatus_SYSTEM_COMMUNICATION_RUN_ERROR_DDS_PUBLISH;
  static const SystemCommunicationRunStatus SYSTEM_COMMUNICATION_RUN_WARN_SHARED_MEMORY_WRITE_TOO_SLOW =
    SystemDiagnose_SystemCommunicationRunStatus_SYSTEM_COMMUNICATION_RUN_WARN_SHARED_MEMORY_WRITE_TOO_SLOW;
  static const SystemCommunicationRunStatus SYSTEM_COMMUNICATION_RUN_ERROR_SHARED_MEMORY_WRITE =
    SystemDiagnose_SystemCommunicationRunStatus_SYSTEM_COMMUNICATION_RUN_ERROR_SHARED_MEMORY_WRITE;
  static const SystemCommunicationRunStatus SYSTEM_COMMUNICATION_RUN_INFO_REMOTE_RENDER_HAS_CLIENT =
    SystemDiagnose_SystemCommunicationRunStatus_SYSTEM_COMMUNICATION_RUN_INFO_REMOTE_RENDER_HAS_CLIENT;
  static const SystemCommunicationRunStatus SYSTEM_COMMUNICATION_RUN_WARN_REMOTE_RENDER_SEND_TOO_SLOW =
    SystemDiagnose_SystemCommunicationRunStatus_SYSTEM_COMMUNICATION_RUN_WARN_REMOTE_RENDER_SEND_TOO_SLOW;
  static const SystemCommunicationRunStatus SYSTEM_COMMUNICATION_RUN_ERROR_REMOTE_RENDER_SEND =
    SystemDiagnose_SystemCommunicationRunStatus_SYSTEM_COMMUNICATION_RUN_ERROR_REMOTE_RENDER_SEND;
  static inline bool SystemCommunicationRunStatus_IsValid(int value) {
    return SystemDiagnose_SystemCommunicationRunStatus_IsValid(value);
  }
  static const SystemCommunicationRunStatus SystemCommunicationRunStatus_MIN =
    SystemDiagnose_SystemCommunicationRunStatus_SystemCommunicationRunStatus_MIN;
  static const SystemCommunicationRunStatus SystemCommunicationRunStatus_MAX =
    SystemDiagnose_SystemCommunicationRunStatus_SystemCommunicationRunStatus_MAX;
  static const int SystemCommunicationRunStatus_ARRAYSIZE =
    SystemDiagnose_SystemCommunicationRunStatus_SystemCommunicationRunStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemCommunicationRunStatus_descriptor() {
    return SystemDiagnose_SystemCommunicationRunStatus_descriptor();
  }
  static inline const ::std::string& SystemCommunicationRunStatus_Name(SystemCommunicationRunStatus value) {
    return SystemDiagnose_SystemCommunicationRunStatus_Name(value);
  }
  static inline bool SystemCommunicationRunStatus_Parse(const ::std::string& name,
      SystemCommunicationRunStatus* value) {
    return SystemDiagnose_SystemCommunicationRunStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemEventFunctionStatus SystemEventFunctionStatus;
  static const SystemEventFunctionStatus SYSTEM_EVENT_FUNC_NONE =
    SystemDiagnose_SystemEventFunctionStatus_SYSTEM_EVENT_FUNC_NONE;
  static inline bool SystemEventFunctionStatus_IsValid(int value) {
    return SystemDiagnose_SystemEventFunctionStatus_IsValid(value);
  }
  static const SystemEventFunctionStatus SystemEventFunctionStatus_MIN =
    SystemDiagnose_SystemEventFunctionStatus_SystemEventFunctionStatus_MIN;
  static const SystemEventFunctionStatus SystemEventFunctionStatus_MAX =
    SystemDiagnose_SystemEventFunctionStatus_SystemEventFunctionStatus_MAX;
  static const int SystemEventFunctionStatus_ARRAYSIZE =
    SystemDiagnose_SystemEventFunctionStatus_SystemEventFunctionStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemEventFunctionStatus_descriptor() {
    return SystemDiagnose_SystemEventFunctionStatus_descriptor();
  }
  static inline const ::std::string& SystemEventFunctionStatus_Name(SystemEventFunctionStatus value) {
    return SystemDiagnose_SystemEventFunctionStatus_Name(value);
  }
  static inline bool SystemEventFunctionStatus_Parse(const ::std::string& name,
      SystemEventFunctionStatus* value) {
    return SystemDiagnose_SystemEventFunctionStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemEventInitStatus SystemEventInitStatus;
  static const SystemEventInitStatus SYSTEM_EVENT_INIT_SUCCESS =
    SystemDiagnose_SystemEventInitStatus_SYSTEM_EVENT_INIT_SUCCESS;
  static const SystemEventInitStatus SYSTEM_EVENT_INIT_ERROR =
    SystemDiagnose_SystemEventInitStatus_SYSTEM_EVENT_INIT_ERROR;
  static inline bool SystemEventInitStatus_IsValid(int value) {
    return SystemDiagnose_SystemEventInitStatus_IsValid(value);
  }
  static const SystemEventInitStatus SystemEventInitStatus_MIN =
    SystemDiagnose_SystemEventInitStatus_SystemEventInitStatus_MIN;
  static const SystemEventInitStatus SystemEventInitStatus_MAX =
    SystemDiagnose_SystemEventInitStatus_SystemEventInitStatus_MAX;
  static const int SystemEventInitStatus_ARRAYSIZE =
    SystemDiagnose_SystemEventInitStatus_SystemEventInitStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemEventInitStatus_descriptor() {
    return SystemDiagnose_SystemEventInitStatus_descriptor();
  }
  static inline const ::std::string& SystemEventInitStatus_Name(SystemEventInitStatus value) {
    return SystemDiagnose_SystemEventInitStatus_Name(value);
  }
  static inline bool SystemEventInitStatus_Parse(const ::std::string& name,
      SystemEventInitStatus* value) {
    return SystemDiagnose_SystemEventInitStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemEventRunStatus SystemEventRunStatus;
  static const SystemEventRunStatus SYSTEM_EVENT_RUN_SUCCESS =
    SystemDiagnose_SystemEventRunStatus_SYSTEM_EVENT_RUN_SUCCESS;
  static const SystemEventRunStatus SYSTEM_EVENT_RUN_WARN_TOO_SLOW =
    SystemDiagnose_SystemEventRunStatus_SYSTEM_EVENT_RUN_WARN_TOO_SLOW;
  static const SystemEventRunStatus SYSTEM_EVENT_RUN_TRIGGER_EVENT =
    SystemDiagnose_SystemEventRunStatus_SYSTEM_EVENT_RUN_TRIGGER_EVENT;
  static inline bool SystemEventRunStatus_IsValid(int value) {
    return SystemDiagnose_SystemEventRunStatus_IsValid(value);
  }
  static const SystemEventRunStatus SystemEventRunStatus_MIN =
    SystemDiagnose_SystemEventRunStatus_SystemEventRunStatus_MIN;
  static const SystemEventRunStatus SystemEventRunStatus_MAX =
    SystemDiagnose_SystemEventRunStatus_SystemEventRunStatus_MAX;
  static const int SystemEventRunStatus_ARRAYSIZE =
    SystemDiagnose_SystemEventRunStatus_SystemEventRunStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemEventRunStatus_descriptor() {
    return SystemDiagnose_SystemEventRunStatus_descriptor();
  }
  static inline const ::std::string& SystemEventRunStatus_Name(SystemEventRunStatus value) {
    return SystemDiagnose_SystemEventRunStatus_Name(value);
  }
  static inline bool SystemEventRunStatus_Parse(const ::std::string& name,
      SystemEventRunStatus* value) {
    return SystemDiagnose_SystemEventRunStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemRecordFunctionStatus SystemRecordFunctionStatus;
  static const SystemRecordFunctionStatus SYSTEM_RECORD_FUNC_NONE =
    SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_NONE;
  static const SystemRecordFunctionStatus SYSTEM_RECORD_FUNC_ENABLE_CALIBRATION =
    SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_CALIBRATION;
  static const SystemRecordFunctionStatus SYSTEM_RECORD_FUNC_ENABLE_TIMESTAMP =
    SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_TIMESTAMP;
  static const SystemRecordFunctionStatus SYSTEM_RECORD_FUNC_ENABLE_CSD =
    SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_CSD;
  static const SystemRecordFunctionStatus SYSTEM_RECORD_FUNC_ENABLE_SCREEN =
    SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_SCREEN;
  static const SystemRecordFunctionStatus SYSTEM_RECORD_FUNC_ENABLE_FC =
    SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_FC;
  static const SystemRecordFunctionStatus SYSTEM_RECORD_FUNC_ENABLE_FC_NEAR =
    SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_FC_NEAR;
  static const SystemRecordFunctionStatus SYSTEM_RECORD_FUNC_ENABLE_FL =
    SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_FL;
  static const SystemRecordFunctionStatus SYSTEM_RECORD_FUNC_ENABLE_FR =
    SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_FR;
  static const SystemRecordFunctionStatus SYSTEM_RECORD_FUNC_ENABLE_RC =
    SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_RC;
  static const SystemRecordFunctionStatus SYSTEM_RECORD_FUNC_ENABLE_RL =
    SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_RL;
  static const SystemRecordFunctionStatus SYSTEM_RECORD_FUNC_ENABLE_RR =
    SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_RR;
  static const SystemRecordFunctionStatus SYSTEM_RECORD_FUNC_ENABLE_FC_FAR =
    SystemDiagnose_SystemRecordFunctionStatus_SYSTEM_RECORD_FUNC_ENABLE_FC_FAR;
  static inline bool SystemRecordFunctionStatus_IsValid(int value) {
    return SystemDiagnose_SystemRecordFunctionStatus_IsValid(value);
  }
  static const SystemRecordFunctionStatus SystemRecordFunctionStatus_MIN =
    SystemDiagnose_SystemRecordFunctionStatus_SystemRecordFunctionStatus_MIN;
  static const SystemRecordFunctionStatus SystemRecordFunctionStatus_MAX =
    SystemDiagnose_SystemRecordFunctionStatus_SystemRecordFunctionStatus_MAX;
  static const int SystemRecordFunctionStatus_ARRAYSIZE =
    SystemDiagnose_SystemRecordFunctionStatus_SystemRecordFunctionStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemRecordFunctionStatus_descriptor() {
    return SystemDiagnose_SystemRecordFunctionStatus_descriptor();
  }
  static inline const ::std::string& SystemRecordFunctionStatus_Name(SystemRecordFunctionStatus value) {
    return SystemDiagnose_SystemRecordFunctionStatus_Name(value);
  }
  static inline bool SystemRecordFunctionStatus_Parse(const ::std::string& name,
      SystemRecordFunctionStatus* value) {
    return SystemDiagnose_SystemRecordFunctionStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemRecordInitStatus SystemRecordInitStatus;
  static const SystemRecordInitStatus SYSTEM_RECORD_INIT_SUCCESS =
    SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_SUCCESS;
  static const SystemRecordInitStatus SYSTEM_RECORD_INIT_ERROR_CALIBRATION =
    SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_CALIBRATION;
  static const SystemRecordInitStatus SYSTEM_RECORD_INIT_ERROR_TIMESTAMP =
    SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_TIMESTAMP;
  static const SystemRecordInitStatus SYSTEM_RECORD_INIT_ERROR_CSD =
    SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_CSD;
  static const SystemRecordInitStatus SYSTEM_RECORD_INIT_ERROR_SCREEN =
    SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_SCREEN;
  static const SystemRecordInitStatus SYSTEM_RECORD_INIT_ERROR_FC =
    SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_FC;
  static const SystemRecordInitStatus SYSTEM_RECORD_INIT_ERROR_FC_NEAR =
    SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_FC_NEAR;
  static const SystemRecordInitStatus SYSTEM_RECORD_INIT_ERROR_FL =
    SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_FL;
  static const SystemRecordInitStatus SYSTEM_RECORD_INIT_ERROR_FR =
    SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_FR;
  static const SystemRecordInitStatus SYSTEM_RECORD_INIT_ERROR_RC =
    SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_RC;
  static const SystemRecordInitStatus SYSTEM_RECORD_INIT_ERROR_RL =
    SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_RL;
  static const SystemRecordInitStatus SYSTEM_RECORD_INIT_ERROR_RR =
    SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_RR;
  static const SystemRecordInitStatus SYSTEM_RECORD_INIT_ERROR_FC_FAR =
    SystemDiagnose_SystemRecordInitStatus_SYSTEM_RECORD_INIT_ERROR_FC_FAR;
  static inline bool SystemRecordInitStatus_IsValid(int value) {
    return SystemDiagnose_SystemRecordInitStatus_IsValid(value);
  }
  static const SystemRecordInitStatus SystemRecordInitStatus_MIN =
    SystemDiagnose_SystemRecordInitStatus_SystemRecordInitStatus_MIN;
  static const SystemRecordInitStatus SystemRecordInitStatus_MAX =
    SystemDiagnose_SystemRecordInitStatus_SystemRecordInitStatus_MAX;
  static const int SystemRecordInitStatus_ARRAYSIZE =
    SystemDiagnose_SystemRecordInitStatus_SystemRecordInitStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemRecordInitStatus_descriptor() {
    return SystemDiagnose_SystemRecordInitStatus_descriptor();
  }
  static inline const ::std::string& SystemRecordInitStatus_Name(SystemRecordInitStatus value) {
    return SystemDiagnose_SystemRecordInitStatus_Name(value);
  }
  static inline bool SystemRecordInitStatus_Parse(const ::std::string& name,
      SystemRecordInitStatus* value) {
    return SystemDiagnose_SystemRecordInitStatus_Parse(name, value);
  }

  typedef SystemDiagnose_SystemRecordRunStatus SystemRecordRunStatus;
  static const SystemRecordRunStatus SYSTEM_RECORD_RUN_SUCCESS =
    SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_SUCCESS;
  static const SystemRecordRunStatus SYSTEM_RECORD_RUN_WARN_TOO_SLOW =
    SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_WARN_TOO_SLOW;
  static const SystemRecordRunStatus SYSTEM_RECORD_RUN_ERROR_CALIBRATION =
    SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_CALIBRATION;
  static const SystemRecordRunStatus SYSTEM_RECORD_RUN_ERROR_TIMESTAMP =
    SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_TIMESTAMP;
  static const SystemRecordRunStatus SYSTEM_RECORD_RUN_ERROR_CSD =
    SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_CSD;
  static const SystemRecordRunStatus SYSTEM_RECORD_RUN_ERROR_SCREEN =
    SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_SCREEN;
  static const SystemRecordRunStatus SYSTEM_RECORD_RUN_ERROR_FC =
    SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_FC;
  static const SystemRecordRunStatus SYSTEM_RECORD_RUN_ERROR_FC_NEAR =
    SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_FC_NEAR;
  static const SystemRecordRunStatus SYSTEM_RECORD_RUN_ERROR_FL =
    SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_FL;
  static const SystemRecordRunStatus SYSTEM_RECORD_RUN_ERROR_FR =
    SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_FR;
  static const SystemRecordRunStatus SYSTEM_RECORD_RUN_ERROR_RC =
    SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_RC;
  static const SystemRecordRunStatus SYSTEM_RECORD_RUN_ERROR_RL =
    SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_RL;
  static const SystemRecordRunStatus SYSTEM_RECORD_RUN_ERROR_RR =
    SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_RR;
  static const SystemRecordRunStatus SYSTEM_RECORD_RUN_ERROR_FC_FAR =
    SystemDiagnose_SystemRecordRunStatus_SYSTEM_RECORD_RUN_ERROR_FC_FAR;
  static inline bool SystemRecordRunStatus_IsValid(int value) {
    return SystemDiagnose_SystemRecordRunStatus_IsValid(value);
  }
  static const SystemRecordRunStatus SystemRecordRunStatus_MIN =
    SystemDiagnose_SystemRecordRunStatus_SystemRecordRunStatus_MIN;
  static const SystemRecordRunStatus SystemRecordRunStatus_MAX =
    SystemDiagnose_SystemRecordRunStatus_SystemRecordRunStatus_MAX;
  static const int SystemRecordRunStatus_ARRAYSIZE =
    SystemDiagnose_SystemRecordRunStatus_SystemRecordRunStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SystemRecordRunStatus_descriptor() {
    return SystemDiagnose_SystemRecordRunStatus_descriptor();
  }
  static inline const ::std::string& SystemRecordRunStatus_Name(SystemRecordRunStatus value) {
    return SystemDiagnose_SystemRecordRunStatus_Name(value);
  }
  static inline bool SystemRecordRunStatus_Parse(const ::std::string& name,
      SystemRecordRunStatus* value) {
    return SystemDiagnose_SystemRecordRunStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string module_name = 4;
  void clear_module_name();
  static const int kModuleNameFieldNumber = 4;
  const ::std::string& module_name() const;
  void set_module_name(const ::std::string& value);
  #if LANG_CXX11
  void set_module_name(::std::string&& value);
  #endif
  void set_module_name(const char* value);
  void set_module_name(const char* value, size_t size);
  ::std::string* mutable_module_name();
  ::std::string* release_module_name();
  void set_allocated_module_name(::std::string* module_name);

  // string sub_module_name = 6;
  void clear_sub_module_name();
  static const int kSubModuleNameFieldNumber = 6;
  const ::std::string& sub_module_name() const;
  void set_sub_module_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sub_module_name(::std::string&& value);
  #endif
  void set_sub_module_name(const char* value);
  void set_sub_module_name(const char* value, size_t size);
  ::std::string* mutable_sub_module_name();
  ::std::string* release_sub_module_name();
  void set_allocated_sub_module_name(::std::string* sub_module_name);

  // uint64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // uint32 frame_index = 1;
  void clear_frame_index();
  static const int kFrameIndexFieldNumber = 1;
  ::google::protobuf::uint32 frame_index() const;
  void set_frame_index(::google::protobuf::uint32 value);

  // .calmcar.perception.DiagnoseModule module_id = 3;
  void clear_module_id();
  static const int kModuleIdFieldNumber = 3;
  ::calmcar::perception::DiagnoseModule module_id() const;
  void set_module_id(::calmcar::perception::DiagnoseModule value);

  // uint32 sub_module_id = 5;
  void clear_sub_module_id();
  static const int kSubModuleIdFieldNumber = 5;
  ::google::protobuf::uint32 sub_module_id() const;
  void set_sub_module_id(::google::protobuf::uint32 value);

  // bool enable = 7;
  void clear_enable();
  static const int kEnableFieldNumber = 7;
  bool enable() const;
  void set_enable(bool value);

  // uint32 function_status = 8;
  void clear_function_status();
  static const int kFunctionStatusFieldNumber = 8;
  ::google::protobuf::uint32 function_status() const;
  void set_function_status(::google::protobuf::uint32 value);

  // uint32 init_status = 9;
  void clear_init_status();
  static const int kInitStatusFieldNumber = 9;
  ::google::protobuf::uint32 init_status() const;
  void set_init_status(::google::protobuf::uint32 value);

  // uint32 running_status = 10;
  void clear_running_status();
  static const int kRunningStatusFieldNumber = 10;
  ::google::protobuf::uint32 running_status() const;
  void set_running_status(::google::protobuf::uint32 value);

  // uint32 process_time = 20;
  void clear_process_time();
  static const int kProcessTimeFieldNumber = 20;
  ::google::protobuf::uint32 process_time() const;
  void set_process_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:calmcar.perception.SystemDiagnose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr module_name_;
  ::google::protobuf::internal::ArenaStringPtr sub_module_name_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint32 frame_index_;
  int module_id_;
  ::google::protobuf::uint32 sub_module_id_;
  bool enable_;
  ::google::protobuf::uint32 function_status_;
  ::google::protobuf::uint32 init_status_;
  ::google::protobuf::uint32 running_status_;
  ::google::protobuf::uint32 process_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_5fdiagnose_2eproto::TableStruct;
  friend void ::protobuf_perception_5fdiagnose_2eproto::InitDefaultsSystemDiagnoseImpl();
};
// -------------------------------------------------------------------

class Diagnose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calmcar.perception.Diagnose) */ {
 public:
  Diagnose();
  virtual ~Diagnose();

  Diagnose(const Diagnose& from);

  inline Diagnose& operator=(const Diagnose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Diagnose(Diagnose&& from) noexcept
    : Diagnose() {
    *this = ::std::move(from);
  }

  inline Diagnose& operator=(Diagnose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Diagnose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Diagnose* internal_default_instance() {
    return reinterpret_cast<const Diagnose*>(
               &_Diagnose_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Diagnose* other);
  friend void swap(Diagnose& a, Diagnose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Diagnose* New() const PROTOBUF_FINAL { return New(NULL); }

  Diagnose* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Diagnose& from);
  void MergeFrom(const Diagnose& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Diagnose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .calmcar.perception.PerceptionDiagnose perception_diagnose = 1;
  int perception_diagnose_size() const;
  void clear_perception_diagnose();
  static const int kPerceptionDiagnoseFieldNumber = 1;
  const ::calmcar::perception::PerceptionDiagnose& perception_diagnose(int index) const;
  ::calmcar::perception::PerceptionDiagnose* mutable_perception_diagnose(int index);
  ::calmcar::perception::PerceptionDiagnose* add_perception_diagnose();
  ::google::protobuf::RepeatedPtrField< ::calmcar::perception::PerceptionDiagnose >*
      mutable_perception_diagnose();
  const ::google::protobuf::RepeatedPtrField< ::calmcar::perception::PerceptionDiagnose >&
      perception_diagnose() const;

  // repeated .calmcar.perception.SystemDiagnose system_diagnose = 2;
  int system_diagnose_size() const;
  void clear_system_diagnose();
  static const int kSystemDiagnoseFieldNumber = 2;
  const ::calmcar::perception::SystemDiagnose& system_diagnose(int index) const;
  ::calmcar::perception::SystemDiagnose* mutable_system_diagnose(int index);
  ::calmcar::perception::SystemDiagnose* add_system_diagnose();
  ::google::protobuf::RepeatedPtrField< ::calmcar::perception::SystemDiagnose >*
      mutable_system_diagnose();
  const ::google::protobuf::RepeatedPtrField< ::calmcar::perception::SystemDiagnose >&
      system_diagnose() const;

  // @@protoc_insertion_point(class_scope:calmcar.perception.Diagnose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::calmcar::perception::PerceptionDiagnose > perception_diagnose_;
  ::google::protobuf::RepeatedPtrField< ::calmcar::perception::SystemDiagnose > system_diagnose_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_5fdiagnose_2eproto::TableStruct;
  friend void ::protobuf_perception_5fdiagnose_2eproto::InitDefaultsDiagnoseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerceptionDiagnose

// uint32 frame_index = 1;
inline void PerceptionDiagnose::clear_frame_index() {
  frame_index_ = 0u;
}
inline ::google::protobuf::uint32 PerceptionDiagnose::frame_index() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.PerceptionDiagnose.frame_index)
  return frame_index_;
}
inline void PerceptionDiagnose::set_frame_index(::google::protobuf::uint32 value) {
  
  frame_index_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.PerceptionDiagnose.frame_index)
}

// uint64 timestamp = 2;
inline void PerceptionDiagnose::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PerceptionDiagnose::timestamp() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.PerceptionDiagnose.timestamp)
  return timestamp_;
}
inline void PerceptionDiagnose::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.PerceptionDiagnose.timestamp)
}

// .calmcar.perception.DiagnoseModule module_id = 3;
inline void PerceptionDiagnose::clear_module_id() {
  module_id_ = 0;
}
inline ::calmcar::perception::DiagnoseModule PerceptionDiagnose::module_id() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.PerceptionDiagnose.module_id)
  return static_cast< ::calmcar::perception::DiagnoseModule >(module_id_);
}
inline void PerceptionDiagnose::set_module_id(::calmcar::perception::DiagnoseModule value) {
  
  module_id_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.PerceptionDiagnose.module_id)
}

// string module_name = 4;
inline void PerceptionDiagnose::clear_module_name() {
  module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PerceptionDiagnose::module_name() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.PerceptionDiagnose.module_name)
  return module_name_.GetNoArena();
}
inline void PerceptionDiagnose::set_module_name(const ::std::string& value) {
  
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:calmcar.perception.PerceptionDiagnose.module_name)
}
#if LANG_CXX11
inline void PerceptionDiagnose::set_module_name(::std::string&& value) {
  
  module_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:calmcar.perception.PerceptionDiagnose.module_name)
}
#endif
inline void PerceptionDiagnose::set_module_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:calmcar.perception.PerceptionDiagnose.module_name)
}
inline void PerceptionDiagnose::set_module_name(const char* value, size_t size) {
  
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:calmcar.perception.PerceptionDiagnose.module_name)
}
inline ::std::string* PerceptionDiagnose::mutable_module_name() {
  
  // @@protoc_insertion_point(field_mutable:calmcar.perception.PerceptionDiagnose.module_name)
  return module_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PerceptionDiagnose::release_module_name() {
  // @@protoc_insertion_point(field_release:calmcar.perception.PerceptionDiagnose.module_name)
  
  return module_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PerceptionDiagnose::set_allocated_module_name(::std::string* module_name) {
  if (module_name != NULL) {
    
  } else {
    
  }
  module_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module_name);
  // @@protoc_insertion_point(field_set_allocated:calmcar.perception.PerceptionDiagnose.module_name)
}

// uint32 sub_module_id = 5;
inline void PerceptionDiagnose::clear_sub_module_id() {
  sub_module_id_ = 0u;
}
inline ::google::protobuf::uint32 PerceptionDiagnose::sub_module_id() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.PerceptionDiagnose.sub_module_id)
  return sub_module_id_;
}
inline void PerceptionDiagnose::set_sub_module_id(::google::protobuf::uint32 value) {
  
  sub_module_id_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.PerceptionDiagnose.sub_module_id)
}

// string sub_module_name = 6;
inline void PerceptionDiagnose::clear_sub_module_name() {
  sub_module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PerceptionDiagnose::sub_module_name() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.PerceptionDiagnose.sub_module_name)
  return sub_module_name_.GetNoArena();
}
inline void PerceptionDiagnose::set_sub_module_name(const ::std::string& value) {
  
  sub_module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:calmcar.perception.PerceptionDiagnose.sub_module_name)
}
#if LANG_CXX11
inline void PerceptionDiagnose::set_sub_module_name(::std::string&& value) {
  
  sub_module_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:calmcar.perception.PerceptionDiagnose.sub_module_name)
}
#endif
inline void PerceptionDiagnose::set_sub_module_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sub_module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:calmcar.perception.PerceptionDiagnose.sub_module_name)
}
inline void PerceptionDiagnose::set_sub_module_name(const char* value, size_t size) {
  
  sub_module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:calmcar.perception.PerceptionDiagnose.sub_module_name)
}
inline ::std::string* PerceptionDiagnose::mutable_sub_module_name() {
  
  // @@protoc_insertion_point(field_mutable:calmcar.perception.PerceptionDiagnose.sub_module_name)
  return sub_module_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PerceptionDiagnose::release_sub_module_name() {
  // @@protoc_insertion_point(field_release:calmcar.perception.PerceptionDiagnose.sub_module_name)
  
  return sub_module_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PerceptionDiagnose::set_allocated_sub_module_name(::std::string* sub_module_name) {
  if (sub_module_name != NULL) {
    
  } else {
    
  }
  sub_module_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sub_module_name);
  // @@protoc_insertion_point(field_set_allocated:calmcar.perception.PerceptionDiagnose.sub_module_name)
}

// bool enable = 7;
inline void PerceptionDiagnose::clear_enable() {
  enable_ = false;
}
inline bool PerceptionDiagnose::enable() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.PerceptionDiagnose.enable)
  return enable_;
}
inline void PerceptionDiagnose::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.PerceptionDiagnose.enable)
}

// uint32 init_status = 8;
inline void PerceptionDiagnose::clear_init_status() {
  init_status_ = 0u;
}
inline ::google::protobuf::uint32 PerceptionDiagnose::init_status() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.PerceptionDiagnose.init_status)
  return init_status_;
}
inline void PerceptionDiagnose::set_init_status(::google::protobuf::uint32 value) {
  
  init_status_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.PerceptionDiagnose.init_status)
}

// uint32 input_status = 9;
inline void PerceptionDiagnose::clear_input_status() {
  input_status_ = 0u;
}
inline ::google::protobuf::uint32 PerceptionDiagnose::input_status() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.PerceptionDiagnose.input_status)
  return input_status_;
}
inline void PerceptionDiagnose::set_input_status(::google::protobuf::uint32 value) {
  
  input_status_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.PerceptionDiagnose.input_status)
}

// uint32 running_status = 10;
inline void PerceptionDiagnose::clear_running_status() {
  running_status_ = 0u;
}
inline ::google::protobuf::uint32 PerceptionDiagnose::running_status() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.PerceptionDiagnose.running_status)
  return running_status_;
}
inline void PerceptionDiagnose::set_running_status(::google::protobuf::uint32 value) {
  
  running_status_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.PerceptionDiagnose.running_status)
}

// uint32 function_status = 11;
inline void PerceptionDiagnose::clear_function_status() {
  function_status_ = 0u;
}
inline ::google::protobuf::uint32 PerceptionDiagnose::function_status() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.PerceptionDiagnose.function_status)
  return function_status_;
}
inline void PerceptionDiagnose::set_function_status(::google::protobuf::uint32 value) {
  
  function_status_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.PerceptionDiagnose.function_status)
}

// uint32 output_status = 12;
inline void PerceptionDiagnose::clear_output_status() {
  output_status_ = 0u;
}
inline ::google::protobuf::uint32 PerceptionDiagnose::output_status() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.PerceptionDiagnose.output_status)
  return output_status_;
}
inline void PerceptionDiagnose::set_output_status(::google::protobuf::uint32 value) {
  
  output_status_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.PerceptionDiagnose.output_status)
}

// uint32 process_runtime = 13;
inline void PerceptionDiagnose::clear_process_runtime() {
  process_runtime_ = 0u;
}
inline ::google::protobuf::uint32 PerceptionDiagnose::process_runtime() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.PerceptionDiagnose.process_runtime)
  return process_runtime_;
}
inline void PerceptionDiagnose::set_process_runtime(::google::protobuf::uint32 value) {
  
  process_runtime_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.PerceptionDiagnose.process_runtime)
}

// uint32 infer_runtime = 14;
inline void PerceptionDiagnose::clear_infer_runtime() {
  infer_runtime_ = 0u;
}
inline ::google::protobuf::uint32 PerceptionDiagnose::infer_runtime() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.PerceptionDiagnose.infer_runtime)
  return infer_runtime_;
}
inline void PerceptionDiagnose::set_infer_runtime(::google::protobuf::uint32 value) {
  
  infer_runtime_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.PerceptionDiagnose.infer_runtime)
}

// uint32 post_runtime = 15;
inline void PerceptionDiagnose::clear_post_runtime() {
  post_runtime_ = 0u;
}
inline ::google::protobuf::uint32 PerceptionDiagnose::post_runtime() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.PerceptionDiagnose.post_runtime)
  return post_runtime_;
}
inline void PerceptionDiagnose::set_post_runtime(::google::protobuf::uint32 value) {
  
  post_runtime_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.PerceptionDiagnose.post_runtime)
}

// -------------------------------------------------------------------

// SystemDiagnose

// uint32 frame_index = 1;
inline void SystemDiagnose::clear_frame_index() {
  frame_index_ = 0u;
}
inline ::google::protobuf::uint32 SystemDiagnose::frame_index() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.SystemDiagnose.frame_index)
  return frame_index_;
}
inline void SystemDiagnose::set_frame_index(::google::protobuf::uint32 value) {
  
  frame_index_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.SystemDiagnose.frame_index)
}

// uint64 timestamp = 2;
inline void SystemDiagnose::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SystemDiagnose::timestamp() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.SystemDiagnose.timestamp)
  return timestamp_;
}
inline void SystemDiagnose::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.SystemDiagnose.timestamp)
}

// .calmcar.perception.DiagnoseModule module_id = 3;
inline void SystemDiagnose::clear_module_id() {
  module_id_ = 0;
}
inline ::calmcar::perception::DiagnoseModule SystemDiagnose::module_id() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.SystemDiagnose.module_id)
  return static_cast< ::calmcar::perception::DiagnoseModule >(module_id_);
}
inline void SystemDiagnose::set_module_id(::calmcar::perception::DiagnoseModule value) {
  
  module_id_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.SystemDiagnose.module_id)
}

// string module_name = 4;
inline void SystemDiagnose::clear_module_name() {
  module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemDiagnose::module_name() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.SystemDiagnose.module_name)
  return module_name_.GetNoArena();
}
inline void SystemDiagnose::set_module_name(const ::std::string& value) {
  
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:calmcar.perception.SystemDiagnose.module_name)
}
#if LANG_CXX11
inline void SystemDiagnose::set_module_name(::std::string&& value) {
  
  module_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:calmcar.perception.SystemDiagnose.module_name)
}
#endif
inline void SystemDiagnose::set_module_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:calmcar.perception.SystemDiagnose.module_name)
}
inline void SystemDiagnose::set_module_name(const char* value, size_t size) {
  
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:calmcar.perception.SystemDiagnose.module_name)
}
inline ::std::string* SystemDiagnose::mutable_module_name() {
  
  // @@protoc_insertion_point(field_mutable:calmcar.perception.SystemDiagnose.module_name)
  return module_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemDiagnose::release_module_name() {
  // @@protoc_insertion_point(field_release:calmcar.perception.SystemDiagnose.module_name)
  
  return module_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemDiagnose::set_allocated_module_name(::std::string* module_name) {
  if (module_name != NULL) {
    
  } else {
    
  }
  module_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module_name);
  // @@protoc_insertion_point(field_set_allocated:calmcar.perception.SystemDiagnose.module_name)
}

// uint32 sub_module_id = 5;
inline void SystemDiagnose::clear_sub_module_id() {
  sub_module_id_ = 0u;
}
inline ::google::protobuf::uint32 SystemDiagnose::sub_module_id() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.SystemDiagnose.sub_module_id)
  return sub_module_id_;
}
inline void SystemDiagnose::set_sub_module_id(::google::protobuf::uint32 value) {
  
  sub_module_id_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.SystemDiagnose.sub_module_id)
}

// string sub_module_name = 6;
inline void SystemDiagnose::clear_sub_module_name() {
  sub_module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemDiagnose::sub_module_name() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.SystemDiagnose.sub_module_name)
  return sub_module_name_.GetNoArena();
}
inline void SystemDiagnose::set_sub_module_name(const ::std::string& value) {
  
  sub_module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:calmcar.perception.SystemDiagnose.sub_module_name)
}
#if LANG_CXX11
inline void SystemDiagnose::set_sub_module_name(::std::string&& value) {
  
  sub_module_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:calmcar.perception.SystemDiagnose.sub_module_name)
}
#endif
inline void SystemDiagnose::set_sub_module_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sub_module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:calmcar.perception.SystemDiagnose.sub_module_name)
}
inline void SystemDiagnose::set_sub_module_name(const char* value, size_t size) {
  
  sub_module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:calmcar.perception.SystemDiagnose.sub_module_name)
}
inline ::std::string* SystemDiagnose::mutable_sub_module_name() {
  
  // @@protoc_insertion_point(field_mutable:calmcar.perception.SystemDiagnose.sub_module_name)
  return sub_module_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemDiagnose::release_sub_module_name() {
  // @@protoc_insertion_point(field_release:calmcar.perception.SystemDiagnose.sub_module_name)
  
  return sub_module_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemDiagnose::set_allocated_sub_module_name(::std::string* sub_module_name) {
  if (sub_module_name != NULL) {
    
  } else {
    
  }
  sub_module_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sub_module_name);
  // @@protoc_insertion_point(field_set_allocated:calmcar.perception.SystemDiagnose.sub_module_name)
}

// bool enable = 7;
inline void SystemDiagnose::clear_enable() {
  enable_ = false;
}
inline bool SystemDiagnose::enable() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.SystemDiagnose.enable)
  return enable_;
}
inline void SystemDiagnose::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.SystemDiagnose.enable)
}

// uint32 function_status = 8;
inline void SystemDiagnose::clear_function_status() {
  function_status_ = 0u;
}
inline ::google::protobuf::uint32 SystemDiagnose::function_status() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.SystemDiagnose.function_status)
  return function_status_;
}
inline void SystemDiagnose::set_function_status(::google::protobuf::uint32 value) {
  
  function_status_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.SystemDiagnose.function_status)
}

// uint32 init_status = 9;
inline void SystemDiagnose::clear_init_status() {
  init_status_ = 0u;
}
inline ::google::protobuf::uint32 SystemDiagnose::init_status() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.SystemDiagnose.init_status)
  return init_status_;
}
inline void SystemDiagnose::set_init_status(::google::protobuf::uint32 value) {
  
  init_status_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.SystemDiagnose.init_status)
}

// uint32 running_status = 10;
inline void SystemDiagnose::clear_running_status() {
  running_status_ = 0u;
}
inline ::google::protobuf::uint32 SystemDiagnose::running_status() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.SystemDiagnose.running_status)
  return running_status_;
}
inline void SystemDiagnose::set_running_status(::google::protobuf::uint32 value) {
  
  running_status_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.SystemDiagnose.running_status)
}

// uint32 process_time = 20;
inline void SystemDiagnose::clear_process_time() {
  process_time_ = 0u;
}
inline ::google::protobuf::uint32 SystemDiagnose::process_time() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.SystemDiagnose.process_time)
  return process_time_;
}
inline void SystemDiagnose::set_process_time(::google::protobuf::uint32 value) {
  
  process_time_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.SystemDiagnose.process_time)
}

// -------------------------------------------------------------------

// Diagnose

// repeated .calmcar.perception.PerceptionDiagnose perception_diagnose = 1;
inline int Diagnose::perception_diagnose_size() const {
  return perception_diagnose_.size();
}
inline void Diagnose::clear_perception_diagnose() {
  perception_diagnose_.Clear();
}
inline const ::calmcar::perception::PerceptionDiagnose& Diagnose::perception_diagnose(int index) const {
  // @@protoc_insertion_point(field_get:calmcar.perception.Diagnose.perception_diagnose)
  return perception_diagnose_.Get(index);
}
inline ::calmcar::perception::PerceptionDiagnose* Diagnose::mutable_perception_diagnose(int index) {
  // @@protoc_insertion_point(field_mutable:calmcar.perception.Diagnose.perception_diagnose)
  return perception_diagnose_.Mutable(index);
}
inline ::calmcar::perception::PerceptionDiagnose* Diagnose::add_perception_diagnose() {
  // @@protoc_insertion_point(field_add:calmcar.perception.Diagnose.perception_diagnose)
  return perception_diagnose_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::calmcar::perception::PerceptionDiagnose >*
Diagnose::mutable_perception_diagnose() {
  // @@protoc_insertion_point(field_mutable_list:calmcar.perception.Diagnose.perception_diagnose)
  return &perception_diagnose_;
}
inline const ::google::protobuf::RepeatedPtrField< ::calmcar::perception::PerceptionDiagnose >&
Diagnose::perception_diagnose() const {
  // @@protoc_insertion_point(field_list:calmcar.perception.Diagnose.perception_diagnose)
  return perception_diagnose_;
}

// repeated .calmcar.perception.SystemDiagnose system_diagnose = 2;
inline int Diagnose::system_diagnose_size() const {
  return system_diagnose_.size();
}
inline void Diagnose::clear_system_diagnose() {
  system_diagnose_.Clear();
}
inline const ::calmcar::perception::SystemDiagnose& Diagnose::system_diagnose(int index) const {
  // @@protoc_insertion_point(field_get:calmcar.perception.Diagnose.system_diagnose)
  return system_diagnose_.Get(index);
}
inline ::calmcar::perception::SystemDiagnose* Diagnose::mutable_system_diagnose(int index) {
  // @@protoc_insertion_point(field_mutable:calmcar.perception.Diagnose.system_diagnose)
  return system_diagnose_.Mutable(index);
}
inline ::calmcar::perception::SystemDiagnose* Diagnose::add_system_diagnose() {
  // @@protoc_insertion_point(field_add:calmcar.perception.Diagnose.system_diagnose)
  return system_diagnose_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::calmcar::perception::SystemDiagnose >*
Diagnose::mutable_system_diagnose() {
  // @@protoc_insertion_point(field_mutable_list:calmcar.perception.Diagnose.system_diagnose)
  return &system_diagnose_;
}
inline const ::google::protobuf::RepeatedPtrField< ::calmcar::perception::SystemDiagnose >&
Diagnose::system_diagnose() const {
  // @@protoc_insertion_point(field_list:calmcar.perception.Diagnose.system_diagnose)
  return system_diagnose_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace calmcar

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_CameraSubmodule> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_CameraSubmodule>() {
  return ::calmcar::perception::SystemDiagnose_CameraSubmodule_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_CameraCameraFunctionStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_CameraCameraFunctionStatus>() {
  return ::calmcar::perception::SystemDiagnose_CameraCameraFunctionStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_CameraCameraInitStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_CameraCameraInitStatus>() {
  return ::calmcar::perception::SystemDiagnose_CameraCameraInitStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_CameraCameraRunStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_CameraCameraRunStatus>() {
  return ::calmcar::perception::SystemDiagnose_CameraCameraRunStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_CanSubmodule> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_CanSubmodule>() {
  return ::calmcar::perception::SystemDiagnose_CanSubmodule_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_CanChassisInitStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_CanChassisInitStatus>() {
  return ::calmcar::perception::SystemDiagnose_CanChassisInitStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_CanChassisRunStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_CanChassisRunStatus>() {
  return ::calmcar::perception::SystemDiagnose_CanChassisRunStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_CanRtkInitStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_CanRtkInitStatus>() {
  return ::calmcar::perception::SystemDiagnose_CanRtkInitStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_CanRtkRunStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_CanRtkRunStatus>() {
  return ::calmcar::perception::SystemDiagnose_CanRtkRunStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_CanRadarFunctionStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_CanRadarFunctionStatus>() {
  return ::calmcar::perception::SystemDiagnose_CanRadarFunctionStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_CanRadarInitStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_CanRadarInitStatus>() {
  return ::calmcar::perception::SystemDiagnose_CanRadarInitStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_CanRadarRunStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_CanRadarRunStatus>() {
  return ::calmcar::perception::SystemDiagnose_CanRadarRunStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemSubmodule> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemSubmodule>() {
  return ::calmcar::perception::SystemDiagnose_SystemSubmodule_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemSystemFunctionStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemSystemFunctionStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemSystemFunctionStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemSystemInitStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemSystemInitStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemSystemInitStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemSystemRunStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemSystemRunStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemSystemRunStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemCameraFunctionStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemCameraFunctionStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemCameraFunctionStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemCameraInitStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemCameraInitStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemCameraInitStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemCameraRunStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemCameraRunStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemCameraRunStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemInputFunctionStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemInputFunctionStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemInputFunctionStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemInputInitStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemInputInitStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemInputInitStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemInputRunStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemInputRunStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemInputRunStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemCanFunctionStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemCanFunctionStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemCanFunctionStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemCanInitStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemCanInitStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemCanInitStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemCanRunStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemCanRunStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemCanRunStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemPerceptionInitStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemPerceptionInitStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemPerceptionInitStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemPerceptionRunStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemPerceptionRunStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemPerceptionRunStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemCommunicationFunctionStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemCommunicationFunctionStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemCommunicationFunctionStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemCommunicationInitStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemCommunicationInitStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemCommunicationInitStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemCommunicationRunStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemCommunicationRunStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemCommunicationRunStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemEventFunctionStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemEventFunctionStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemEventFunctionStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemEventInitStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemEventInitStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemEventInitStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemEventRunStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemEventRunStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemEventRunStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemRecordFunctionStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemRecordFunctionStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemRecordFunctionStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemRecordInitStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemRecordInitStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemRecordInitStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SystemDiagnose_SystemRecordRunStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SystemDiagnose_SystemRecordRunStatus>() {
  return ::calmcar::perception::SystemDiagnose_SystemRecordRunStatus_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::DiagnoseModule> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::DiagnoseModule>() {
  return ::calmcar::perception::DiagnoseModule_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perception_5fdiagnose_2eproto__INCLUDED
