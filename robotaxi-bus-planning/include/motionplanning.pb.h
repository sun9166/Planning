// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: motionplanning.proto

#ifndef PROTOBUF_motionplanning_2eproto__INCLUDED
#define PROTOBUF_motionplanning_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "pnc_point.pb.h"
#include "decision.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_motionplanning_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsStopPointImpl();
void InitDefaultsStopPoint();
void InitDefaultsPlanningTargetImpl();
void InitDefaultsPlanningTarget();
void InitDefaultsADCSignalsImpl();
void InitDefaultsADCSignals();
void InitDefaultsEStopImpl();
void InitDefaultsEStop();
void InitDefaultsTaskStatsImpl();
void InitDefaultsTaskStats();
void InitDefaultsLatencyStatsImpl();
void InitDefaultsLatencyStats();
void InitDefaultsRSSInfoImpl();
void InitDefaultsRSSInfo();
void InitDefaultsADCTrajectoryImpl();
void InitDefaultsADCTrajectory();
inline void InitDefaults() {
  InitDefaultsStopPoint();
  InitDefaultsPlanningTarget();
  InitDefaultsADCSignals();
  InitDefaultsEStop();
  InitDefaultsTaskStats();
  InitDefaultsLatencyStats();
  InitDefaultsRSSInfo();
  InitDefaultsADCTrajectory();
}
}  // namespace protobuf_motionplanning_2eproto
namespace acu {
namespace planning {
class ADCSignals;
class ADCSignalsDefaultTypeInternal;
extern ADCSignalsDefaultTypeInternal _ADCSignals_default_instance_;
class ADCTrajectory;
class ADCTrajectoryDefaultTypeInternal;
extern ADCTrajectoryDefaultTypeInternal _ADCTrajectory_default_instance_;
class EStop;
class EStopDefaultTypeInternal;
extern EStopDefaultTypeInternal _EStop_default_instance_;
class LatencyStats;
class LatencyStatsDefaultTypeInternal;
extern LatencyStatsDefaultTypeInternal _LatencyStats_default_instance_;
class PlanningTarget;
class PlanningTargetDefaultTypeInternal;
extern PlanningTargetDefaultTypeInternal _PlanningTarget_default_instance_;
class RSSInfo;
class RSSInfoDefaultTypeInternal;
extern RSSInfoDefaultTypeInternal _RSSInfo_default_instance_;
class StopPoint;
class StopPointDefaultTypeInternal;
extern StopPointDefaultTypeInternal _StopPoint_default_instance_;
class TaskStats;
class TaskStatsDefaultTypeInternal;
extern TaskStatsDefaultTypeInternal _TaskStats_default_instance_;
}  // namespace planning
}  // namespace acu
namespace acu {
namespace planning {

enum StopPoint_Type {
  StopPoint_Type_HARD = 0,
  StopPoint_Type_SOFT = 1
};
bool StopPoint_Type_IsValid(int value);
const StopPoint_Type StopPoint_Type_Type_MIN = StopPoint_Type_HARD;
const StopPoint_Type StopPoint_Type_Type_MAX = StopPoint_Type_SOFT;
const int StopPoint_Type_Type_ARRAYSIZE = StopPoint_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* StopPoint_Type_descriptor();
inline const ::std::string& StopPoint_Type_Name(StopPoint_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    StopPoint_Type_descriptor(), value);
}
inline bool StopPoint_Type_Parse(
    const ::std::string& name, StopPoint_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StopPoint_Type>(
    StopPoint_Type_descriptor(), name, value);
}
enum ADCSignals_SignalType {
  ADCSignals_SignalType_LEFT_TURN = 1,
  ADCSignals_SignalType_RIGHT_TURN = 2,
  ADCSignals_SignalType_LOW_BEAM_LIGHT = 3,
  ADCSignals_SignalType_HIGH_BEAM_LIGHT = 4,
  ADCSignals_SignalType_FOG_LIGHT = 5,
  ADCSignals_SignalType_EMERGENCY_LIGHT = 6
};
bool ADCSignals_SignalType_IsValid(int value);
const ADCSignals_SignalType ADCSignals_SignalType_SignalType_MIN = ADCSignals_SignalType_LEFT_TURN;
const ADCSignals_SignalType ADCSignals_SignalType_SignalType_MAX = ADCSignals_SignalType_EMERGENCY_LIGHT;
const int ADCSignals_SignalType_SignalType_ARRAYSIZE = ADCSignals_SignalType_SignalType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ADCSignals_SignalType_descriptor();
inline const ::std::string& ADCSignals_SignalType_Name(ADCSignals_SignalType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ADCSignals_SignalType_descriptor(), value);
}
inline bool ADCSignals_SignalType_Parse(
    const ::std::string& name, ADCSignals_SignalType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ADCSignals_SignalType>(
    ADCSignals_SignalType_descriptor(), name, value);
}
enum ADCTrajectory_RightOfWayStatus {
  ADCTrajectory_RightOfWayStatus_UNPROTECTED = 0,
  ADCTrajectory_RightOfWayStatus_PROTECTED = 1
};
bool ADCTrajectory_RightOfWayStatus_IsValid(int value);
const ADCTrajectory_RightOfWayStatus ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MIN = ADCTrajectory_RightOfWayStatus_UNPROTECTED;
const ADCTrajectory_RightOfWayStatus ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MAX = ADCTrajectory_RightOfWayStatus_PROTECTED;
const int ADCTrajectory_RightOfWayStatus_RightOfWayStatus_ARRAYSIZE = ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ADCTrajectory_RightOfWayStatus_descriptor();
inline const ::std::string& ADCTrajectory_RightOfWayStatus_Name(ADCTrajectory_RightOfWayStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ADCTrajectory_RightOfWayStatus_descriptor(), value);
}
inline bool ADCTrajectory_RightOfWayStatus_Parse(
    const ::std::string& name, ADCTrajectory_RightOfWayStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ADCTrajectory_RightOfWayStatus>(
    ADCTrajectory_RightOfWayStatus_descriptor(), name, value);
}
enum ADCTrajectory_TrajectoryType {
  ADCTrajectory_TrajectoryType_UNKNOWN = 0,
  ADCTrajectory_TrajectoryType_NORMAL = 1,
  ADCTrajectory_TrajectoryType_PATH_FALLBACK = 2,
  ADCTrajectory_TrajectoryType_SPEED_FALLBACK = 3
};
bool ADCTrajectory_TrajectoryType_IsValid(int value);
const ADCTrajectory_TrajectoryType ADCTrajectory_TrajectoryType_TrajectoryType_MIN = ADCTrajectory_TrajectoryType_UNKNOWN;
const ADCTrajectory_TrajectoryType ADCTrajectory_TrajectoryType_TrajectoryType_MAX = ADCTrajectory_TrajectoryType_SPEED_FALLBACK;
const int ADCTrajectory_TrajectoryType_TrajectoryType_ARRAYSIZE = ADCTrajectory_TrajectoryType_TrajectoryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ADCTrajectory_TrajectoryType_descriptor();
inline const ::std::string& ADCTrajectory_TrajectoryType_Name(ADCTrajectory_TrajectoryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ADCTrajectory_TrajectoryType_descriptor(), value);
}
inline bool ADCTrajectory_TrajectoryType_Parse(
    const ::std::string& name, ADCTrajectory_TrajectoryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ADCTrajectory_TrajectoryType>(
    ADCTrajectory_TrajectoryType_descriptor(), name, value);
}
// ===================================================================

class StopPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:acu.planning.StopPoint) */ {
 public:
  StopPoint();
  virtual ~StopPoint();

  StopPoint(const StopPoint& from);

  inline StopPoint& operator=(const StopPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopPoint(StopPoint&& from) noexcept
    : StopPoint() {
    *this = ::std::move(from);
  }

  inline StopPoint& operator=(StopPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopPoint* internal_default_instance() {
    return reinterpret_cast<const StopPoint*>(
               &_StopPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(StopPoint* other);
  friend void swap(StopPoint& a, StopPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  StopPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StopPoint& from);
  void MergeFrom(const StopPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StopPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef StopPoint_Type Type;
  static const Type HARD =
    StopPoint_Type_HARD;
  static const Type SOFT =
    StopPoint_Type_SOFT;
  static inline bool Type_IsValid(int value) {
    return StopPoint_Type_IsValid(value);
  }
  static const Type Type_MIN =
    StopPoint_Type_Type_MIN;
  static const Type Type_MAX =
    StopPoint_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    StopPoint_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return StopPoint_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return StopPoint_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return StopPoint_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double s = 1;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 1;
  double s() const;
  void set_s(double value);

  // optional double l = 2;
  bool has_l() const;
  void clear_l();
  static const int kLFieldNumber = 2;
  double l() const;
  void set_l(double value);

  // optional double x = 3;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 3;
  double x() const;
  void set_x(double value);

  // optional double y = 4;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 4;
  double y() const;
  void set_y(double value);

  // optional double heading = 5;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 5;
  double heading() const;
  void set_heading(double value);

  // optional .acu.planning.StopPoint.Type type = 6 [default = HARD];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::acu::planning::StopPoint_Type type() const;
  void set_type(::acu::planning::StopPoint_Type value);

  // @@protoc_insertion_point(class_scope:acu.planning.StopPoint)
 private:
  void set_has_s();
  void clear_has_s();
  void set_has_l();
  void clear_has_l();
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_heading();
  void clear_has_heading();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double s_;
  double l_;
  double x_;
  double y_;
  double heading_;
  int type_;
  friend struct ::protobuf_motionplanning_2eproto::TableStruct;
  friend void ::protobuf_motionplanning_2eproto::InitDefaultsStopPointImpl();
};
// -------------------------------------------------------------------

class PlanningTarget : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:acu.planning.PlanningTarget) */ {
 public:
  PlanningTarget();
  virtual ~PlanningTarget();

  PlanningTarget(const PlanningTarget& from);

  inline PlanningTarget& operator=(const PlanningTarget& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlanningTarget(PlanningTarget&& from) noexcept
    : PlanningTarget() {
    *this = ::std::move(from);
  }

  inline PlanningTarget& operator=(PlanningTarget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanningTarget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningTarget* internal_default_instance() {
    return reinterpret_cast<const PlanningTarget*>(
               &_PlanningTarget_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PlanningTarget* other);
  friend void swap(PlanningTarget& a, PlanningTarget& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlanningTarget* New() const PROTOBUF_FINAL { return New(NULL); }

  PlanningTarget* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlanningTarget& from);
  void MergeFrom(const PlanningTarget& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlanningTarget* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .acu.planning.StopPoint stop_point = 1;
  bool has_stop_point() const;
  void clear_stop_point();
  static const int kStopPointFieldNumber = 1;
  const ::acu::planning::StopPoint& stop_point() const;
  ::acu::planning::StopPoint* release_stop_point();
  ::acu::planning::StopPoint* mutable_stop_point();
  void set_allocated_stop_point(::acu::planning::StopPoint* stop_point);

  // optional double cruise_speed = 2;
  bool has_cruise_speed() const;
  void clear_cruise_speed();
  static const int kCruiseSpeedFieldNumber = 2;
  double cruise_speed() const;
  void set_cruise_speed(double value);

  // @@protoc_insertion_point(class_scope:acu.planning.PlanningTarget)
 private:
  void set_has_stop_point();
  void clear_has_stop_point();
  void set_has_cruise_speed();
  void clear_has_cruise_speed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::acu::planning::StopPoint* stop_point_;
  double cruise_speed_;
  friend struct ::protobuf_motionplanning_2eproto::TableStruct;
  friend void ::protobuf_motionplanning_2eproto::InitDefaultsPlanningTargetImpl();
};
// -------------------------------------------------------------------

class ADCSignals : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:acu.planning.ADCSignals) */ {
 public:
  ADCSignals();
  virtual ~ADCSignals();

  ADCSignals(const ADCSignals& from);

  inline ADCSignals& operator=(const ADCSignals& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ADCSignals(ADCSignals&& from) noexcept
    : ADCSignals() {
    *this = ::std::move(from);
  }

  inline ADCSignals& operator=(ADCSignals&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADCSignals& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ADCSignals* internal_default_instance() {
    return reinterpret_cast<const ADCSignals*>(
               &_ADCSignals_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ADCSignals* other);
  friend void swap(ADCSignals& a, ADCSignals& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ADCSignals* New() const PROTOBUF_FINAL { return New(NULL); }

  ADCSignals* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ADCSignals& from);
  void MergeFrom(const ADCSignals& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ADCSignals* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ADCSignals_SignalType SignalType;
  static const SignalType LEFT_TURN =
    ADCSignals_SignalType_LEFT_TURN;
  static const SignalType RIGHT_TURN =
    ADCSignals_SignalType_RIGHT_TURN;
  static const SignalType LOW_BEAM_LIGHT =
    ADCSignals_SignalType_LOW_BEAM_LIGHT;
  static const SignalType HIGH_BEAM_LIGHT =
    ADCSignals_SignalType_HIGH_BEAM_LIGHT;
  static const SignalType FOG_LIGHT =
    ADCSignals_SignalType_FOG_LIGHT;
  static const SignalType EMERGENCY_LIGHT =
    ADCSignals_SignalType_EMERGENCY_LIGHT;
  static inline bool SignalType_IsValid(int value) {
    return ADCSignals_SignalType_IsValid(value);
  }
  static const SignalType SignalType_MIN =
    ADCSignals_SignalType_SignalType_MIN;
  static const SignalType SignalType_MAX =
    ADCSignals_SignalType_SignalType_MAX;
  static const int SignalType_ARRAYSIZE =
    ADCSignals_SignalType_SignalType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SignalType_descriptor() {
    return ADCSignals_SignalType_descriptor();
  }
  static inline const ::std::string& SignalType_Name(SignalType value) {
    return ADCSignals_SignalType_Name(value);
  }
  static inline bool SignalType_Parse(const ::std::string& name,
      SignalType* value) {
    return ADCSignals_SignalType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .acu.planning.ADCSignals.SignalType signal = 1;
  int signal_size() const;
  void clear_signal();
  static const int kSignalFieldNumber = 1;
  ::acu::planning::ADCSignals_SignalType signal(int index) const;
  void set_signal(int index, ::acu::planning::ADCSignals_SignalType value);
  void add_signal(::acu::planning::ADCSignals_SignalType value);
  const ::google::protobuf::RepeatedField<int>& signal() const;
  ::google::protobuf::RepeatedField<int>* mutable_signal();

  // @@protoc_insertion_point(class_scope:acu.planning.ADCSignals)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> signal_;
  friend struct ::protobuf_motionplanning_2eproto::TableStruct;
  friend void ::protobuf_motionplanning_2eproto::InitDefaultsADCSignalsImpl();
};
// -------------------------------------------------------------------

class EStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:acu.planning.EStop) */ {
 public:
  EStop();
  virtual ~EStop();

  EStop(const EStop& from);

  inline EStop& operator=(const EStop& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EStop(EStop&& from) noexcept
    : EStop() {
    *this = ::std::move(from);
  }

  inline EStop& operator=(EStop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EStop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EStop* internal_default_instance() {
    return reinterpret_cast<const EStop*>(
               &_EStop_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(EStop* other);
  friend void swap(EStop& a, EStop& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EStop* New() const PROTOBUF_FINAL { return New(NULL); }

  EStop* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EStop& from);
  void MergeFrom(const EStop& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EStop* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string reason = 2;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // optional bool is_estop = 1;
  bool has_is_estop() const;
  void clear_is_estop();
  static const int kIsEstopFieldNumber = 1;
  bool is_estop() const;
  void set_is_estop(bool value);

  // @@protoc_insertion_point(class_scope:acu.planning.EStop)
 private:
  void set_has_is_estop();
  void clear_has_is_estop();
  void set_has_reason();
  void clear_has_reason();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  bool is_estop_;
  friend struct ::protobuf_motionplanning_2eproto::TableStruct;
  friend void ::protobuf_motionplanning_2eproto::InitDefaultsEStopImpl();
};
// -------------------------------------------------------------------

class TaskStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:acu.planning.TaskStats) */ {
 public:
  TaskStats();
  virtual ~TaskStats();

  TaskStats(const TaskStats& from);

  inline TaskStats& operator=(const TaskStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskStats(TaskStats&& from) noexcept
    : TaskStats() {
    *this = ::std::move(from);
  }

  inline TaskStats& operator=(TaskStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskStats* internal_default_instance() {
    return reinterpret_cast<const TaskStats*>(
               &_TaskStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(TaskStats* other);
  friend void swap(TaskStats& a, TaskStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskStats* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskStats& from);
  void MergeFrom(const TaskStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional double time_ms = 2;
  bool has_time_ms() const;
  void clear_time_ms();
  static const int kTimeMsFieldNumber = 2;
  double time_ms() const;
  void set_time_ms(double value);

  // @@protoc_insertion_point(class_scope:acu.planning.TaskStats)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_time_ms();
  void clear_has_time_ms();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double time_ms_;
  friend struct ::protobuf_motionplanning_2eproto::TableStruct;
  friend void ::protobuf_motionplanning_2eproto::InitDefaultsTaskStatsImpl();
};
// -------------------------------------------------------------------

class LatencyStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:acu.planning.LatencyStats) */ {
 public:
  LatencyStats();
  virtual ~LatencyStats();

  LatencyStats(const LatencyStats& from);

  inline LatencyStats& operator=(const LatencyStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LatencyStats(LatencyStats&& from) noexcept
    : LatencyStats() {
    *this = ::std::move(from);
  }

  inline LatencyStats& operator=(LatencyStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LatencyStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LatencyStats* internal_default_instance() {
    return reinterpret_cast<const LatencyStats*>(
               &_LatencyStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(LatencyStats* other);
  friend void swap(LatencyStats& a, LatencyStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LatencyStats* New() const PROTOBUF_FINAL { return New(NULL); }

  LatencyStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LatencyStats& from);
  void MergeFrom(const LatencyStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LatencyStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .acu.planning.TaskStats task_stats = 2;
  int task_stats_size() const;
  void clear_task_stats();
  static const int kTaskStatsFieldNumber = 2;
  const ::acu::planning::TaskStats& task_stats(int index) const;
  ::acu::planning::TaskStats* mutable_task_stats(int index);
  ::acu::planning::TaskStats* add_task_stats();
  ::google::protobuf::RepeatedPtrField< ::acu::planning::TaskStats >*
      mutable_task_stats();
  const ::google::protobuf::RepeatedPtrField< ::acu::planning::TaskStats >&
      task_stats() const;

  // optional double total_time_ms = 1;
  bool has_total_time_ms() const;
  void clear_total_time_ms();
  static const int kTotalTimeMsFieldNumber = 1;
  double total_time_ms() const;
  void set_total_time_ms(double value);

  // optional double init_frame_time_ms = 3;
  bool has_init_frame_time_ms() const;
  void clear_init_frame_time_ms();
  static const int kInitFrameTimeMsFieldNumber = 3;
  double init_frame_time_ms() const;
  void set_init_frame_time_ms(double value);

  // @@protoc_insertion_point(class_scope:acu.planning.LatencyStats)
 private:
  void set_has_total_time_ms();
  void clear_has_total_time_ms();
  void set_has_init_frame_time_ms();
  void clear_has_init_frame_time_ms();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::acu::planning::TaskStats > task_stats_;
  double total_time_ms_;
  double init_frame_time_ms_;
  friend struct ::protobuf_motionplanning_2eproto::TableStruct;
  friend void ::protobuf_motionplanning_2eproto::InitDefaultsLatencyStatsImpl();
};
// -------------------------------------------------------------------

class RSSInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:acu.planning.RSSInfo) */ {
 public:
  RSSInfo();
  virtual ~RSSInfo();

  RSSInfo(const RSSInfo& from);

  inline RSSInfo& operator=(const RSSInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RSSInfo(RSSInfo&& from) noexcept
    : RSSInfo() {
    *this = ::std::move(from);
  }

  inline RSSInfo& operator=(RSSInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RSSInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RSSInfo* internal_default_instance() {
    return reinterpret_cast<const RSSInfo*>(
               &_RSSInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(RSSInfo* other);
  friend void swap(RSSInfo& a, RSSInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RSSInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RSSInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RSSInfo& from);
  void MergeFrom(const RSSInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RSSInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double cur_dist_lon = 2;
  bool has_cur_dist_lon() const;
  void clear_cur_dist_lon();
  static const int kCurDistLonFieldNumber = 2;
  double cur_dist_lon() const;
  void set_cur_dist_lon(double value);

  // optional double rss_safe_dist_lon = 3;
  bool has_rss_safe_dist_lon() const;
  void clear_rss_safe_dist_lon();
  static const int kRssSafeDistLonFieldNumber = 3;
  double rss_safe_dist_lon() const;
  void set_rss_safe_dist_lon(double value);

  // optional double acc_lon_range_minimum = 4;
  bool has_acc_lon_range_minimum() const;
  void clear_acc_lon_range_minimum();
  static const int kAccLonRangeMinimumFieldNumber = 4;
  double acc_lon_range_minimum() const;
  void set_acc_lon_range_minimum(double value);

  // optional double acc_lon_range_maximum = 5;
  bool has_acc_lon_range_maximum() const;
  void clear_acc_lon_range_maximum();
  static const int kAccLonRangeMaximumFieldNumber = 5;
  double acc_lon_range_maximum() const;
  void set_acc_lon_range_maximum(double value);

  // optional double acc_lat_left_range_minimum = 6;
  bool has_acc_lat_left_range_minimum() const;
  void clear_acc_lat_left_range_minimum();
  static const int kAccLatLeftRangeMinimumFieldNumber = 6;
  double acc_lat_left_range_minimum() const;
  void set_acc_lat_left_range_minimum(double value);

  // optional double acc_lat_left_range_maximum = 7;
  bool has_acc_lat_left_range_maximum() const;
  void clear_acc_lat_left_range_maximum();
  static const int kAccLatLeftRangeMaximumFieldNumber = 7;
  double acc_lat_left_range_maximum() const;
  void set_acc_lat_left_range_maximum(double value);

  // optional double acc_lat_right_range_minimum = 8;
  bool has_acc_lat_right_range_minimum() const;
  void clear_acc_lat_right_range_minimum();
  static const int kAccLatRightRangeMinimumFieldNumber = 8;
  double acc_lat_right_range_minimum() const;
  void set_acc_lat_right_range_minimum(double value);

  // optional double acc_lat_right_range_maximum = 9;
  bool has_acc_lat_right_range_maximum() const;
  void clear_acc_lat_right_range_maximum();
  static const int kAccLatRightRangeMaximumFieldNumber = 9;
  double acc_lat_right_range_maximum() const;
  void set_acc_lat_right_range_maximum(double value);

  // optional bool is_rss_safe = 1;
  bool has_is_rss_safe() const;
  void clear_is_rss_safe();
  static const int kIsRssSafeFieldNumber = 1;
  bool is_rss_safe() const;
  void set_is_rss_safe(bool value);

  // @@protoc_insertion_point(class_scope:acu.planning.RSSInfo)
 private:
  void set_has_is_rss_safe();
  void clear_has_is_rss_safe();
  void set_has_cur_dist_lon();
  void clear_has_cur_dist_lon();
  void set_has_rss_safe_dist_lon();
  void clear_has_rss_safe_dist_lon();
  void set_has_acc_lon_range_minimum();
  void clear_has_acc_lon_range_minimum();
  void set_has_acc_lon_range_maximum();
  void clear_has_acc_lon_range_maximum();
  void set_has_acc_lat_left_range_minimum();
  void clear_has_acc_lat_left_range_minimum();
  void set_has_acc_lat_left_range_maximum();
  void clear_has_acc_lat_left_range_maximum();
  void set_has_acc_lat_right_range_minimum();
  void clear_has_acc_lat_right_range_minimum();
  void set_has_acc_lat_right_range_maximum();
  void clear_has_acc_lat_right_range_maximum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double cur_dist_lon_;
  double rss_safe_dist_lon_;
  double acc_lon_range_minimum_;
  double acc_lon_range_maximum_;
  double acc_lat_left_range_minimum_;
  double acc_lat_left_range_maximum_;
  double acc_lat_right_range_minimum_;
  double acc_lat_right_range_maximum_;
  bool is_rss_safe_;
  friend struct ::protobuf_motionplanning_2eproto::TableStruct;
  friend void ::protobuf_motionplanning_2eproto::InitDefaultsRSSInfoImpl();
};
// -------------------------------------------------------------------

class ADCTrajectory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:acu.planning.ADCTrajectory) */ {
 public:
  ADCTrajectory();
  virtual ~ADCTrajectory();

  ADCTrajectory(const ADCTrajectory& from);

  inline ADCTrajectory& operator=(const ADCTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ADCTrajectory(ADCTrajectory&& from) noexcept
    : ADCTrajectory() {
    *this = ::std::move(from);
  }

  inline ADCTrajectory& operator=(ADCTrajectory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ADCTrajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ADCTrajectory* internal_default_instance() {
    return reinterpret_cast<const ADCTrajectory*>(
               &_ADCTrajectory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ADCTrajectory* other);
  friend void swap(ADCTrajectory& a, ADCTrajectory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ADCTrajectory* New() const PROTOBUF_FINAL { return New(NULL); }

  ADCTrajectory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ADCTrajectory& from);
  void MergeFrom(const ADCTrajectory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ADCTrajectory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ADCTrajectory_RightOfWayStatus RightOfWayStatus;
  static const RightOfWayStatus UNPROTECTED =
    ADCTrajectory_RightOfWayStatus_UNPROTECTED;
  static const RightOfWayStatus PROTECTED =
    ADCTrajectory_RightOfWayStatus_PROTECTED;
  static inline bool RightOfWayStatus_IsValid(int value) {
    return ADCTrajectory_RightOfWayStatus_IsValid(value);
  }
  static const RightOfWayStatus RightOfWayStatus_MIN =
    ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MIN;
  static const RightOfWayStatus RightOfWayStatus_MAX =
    ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MAX;
  static const int RightOfWayStatus_ARRAYSIZE =
    ADCTrajectory_RightOfWayStatus_RightOfWayStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RightOfWayStatus_descriptor() {
    return ADCTrajectory_RightOfWayStatus_descriptor();
  }
  static inline const ::std::string& RightOfWayStatus_Name(RightOfWayStatus value) {
    return ADCTrajectory_RightOfWayStatus_Name(value);
  }
  static inline bool RightOfWayStatus_Parse(const ::std::string& name,
      RightOfWayStatus* value) {
    return ADCTrajectory_RightOfWayStatus_Parse(name, value);
  }

  typedef ADCTrajectory_TrajectoryType TrajectoryType;
  static const TrajectoryType UNKNOWN =
    ADCTrajectory_TrajectoryType_UNKNOWN;
  static const TrajectoryType NORMAL =
    ADCTrajectory_TrajectoryType_NORMAL;
  static const TrajectoryType PATH_FALLBACK =
    ADCTrajectory_TrajectoryType_PATH_FALLBACK;
  static const TrajectoryType SPEED_FALLBACK =
    ADCTrajectory_TrajectoryType_SPEED_FALLBACK;
  static inline bool TrajectoryType_IsValid(int value) {
    return ADCTrajectory_TrajectoryType_IsValid(value);
  }
  static const TrajectoryType TrajectoryType_MIN =
    ADCTrajectory_TrajectoryType_TrajectoryType_MIN;
  static const TrajectoryType TrajectoryType_MAX =
    ADCTrajectory_TrajectoryType_TrajectoryType_MAX;
  static const int TrajectoryType_ARRAYSIZE =
    ADCTrajectory_TrajectoryType_TrajectoryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrajectoryType_descriptor() {
    return ADCTrajectory_TrajectoryType_descriptor();
  }
  static inline const ::std::string& TrajectoryType_Name(TrajectoryType value) {
    return ADCTrajectory_TrajectoryType_Name(value);
  }
  static inline bool TrajectoryType_Parse(const ::std::string& name,
      TrajectoryType* value) {
    return ADCTrajectory_TrajectoryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .acu.common.TrajectoryPoint trajectory_point = 12;
  int trajectory_point_size() const;
  void clear_trajectory_point();
  static const int kTrajectoryPointFieldNumber = 12;
  const ::acu::common::TrajectoryPoint& trajectory_point(int index) const;
  ::acu::common::TrajectoryPoint* mutable_trajectory_point(int index);
  ::acu::common::TrajectoryPoint* add_trajectory_point();
  ::google::protobuf::RepeatedPtrField< ::acu::common::TrajectoryPoint >*
      mutable_trajectory_point();
  const ::google::protobuf::RepeatedPtrField< ::acu::common::TrajectoryPoint >&
      trajectory_point() const;

  // repeated .acu.common.PathPoint path_point = 13;
  int path_point_size() const;
  void clear_path_point();
  static const int kPathPointFieldNumber = 13;
  const ::acu::common::PathPoint& path_point(int index) const;
  ::acu::common::PathPoint* mutable_path_point(int index);
  ::acu::common::PathPoint* add_path_point();
  ::google::protobuf::RepeatedPtrField< ::acu::common::PathPoint >*
      mutable_path_point();
  const ::google::protobuf::RepeatedPtrField< ::acu::common::PathPoint >&
      path_point() const;

  // optional string replan_reason = 22;
  bool has_replan_reason() const;
  void clear_replan_reason();
  static const int kReplanReasonFieldNumber = 22;
  const ::std::string& replan_reason() const;
  void set_replan_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_replan_reason(::std::string&& value);
  #endif
  void set_replan_reason(const char* value);
  void set_replan_reason(const char* value, size_t size);
  ::std::string* mutable_replan_reason();
  ::std::string* release_replan_reason();
  void set_allocated_replan_reason(::std::string* replan_reason);

  // optional .acu.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::acu::common::Header& header() const;
  ::acu::common::Header* release_header();
  ::acu::common::Header* mutable_header();
  void set_allocated_header(::acu::common::Header* header);

  // optional .acu.planning.EStop estop = 6;
  bool has_estop() const;
  void clear_estop();
  static const int kEstopFieldNumber = 6;
  const ::acu::planning::EStop& estop() const;
  ::acu::planning::EStop* release_estop();
  ::acu::planning::EStop* mutable_estop();
  void set_allocated_estop(::acu::planning::EStop* estop);

  // optional .acu.planning.DecisionResult decision = 14;
  bool has_decision() const;
  void clear_decision();
  static const int kDecisionFieldNumber = 14;
  const ::acu::planning::DecisionResult& decision() const;
  ::acu::planning::DecisionResult* release_decision();
  ::acu::planning::DecisionResult* mutable_decision();
  void set_allocated_decision(::acu::planning::DecisionResult* decision);

  // optional .acu.planning.LatencyStats latency_stats = 15;
  bool has_latency_stats() const;
  void clear_latency_stats();
  static const int kLatencyStatsFieldNumber = 15;
  const ::acu::planning::LatencyStats& latency_stats() const;
  ::acu::planning::LatencyStats* release_latency_stats();
  ::acu::planning::LatencyStats* mutable_latency_stats();
  void set_allocated_latency_stats(::acu::planning::LatencyStats* latency_stats);

  // optional .acu.planning.RSSInfo rss_info = 100;
  bool has_rss_info() const;
  void clear_rss_info();
  static const int kRssInfoFieldNumber = 100;
  const ::acu::planning::RSSInfo& rss_info() const;
  ::acu::planning::RSSInfo* release_rss_info();
  ::acu::planning::RSSInfo* mutable_rss_info();
  void set_allocated_rss_info(::acu::planning::RSSInfo* rss_info);

  // optional double total_path_length = 2;
  bool has_total_path_length() const;
  void clear_total_path_length();
  static const int kTotalPathLengthFieldNumber = 2;
  double total_path_length() const;
  void set_total_path_length(double value);

  // optional double total_path_time = 3;
  bool has_total_path_time() const;
  void clear_total_path_time();
  static const int kTotalPathTimeFieldNumber = 3;
  double total_path_time() const;
  void set_total_path_time(double value);

  // optional bool is_replan = 9 [default = false];
  bool has_is_replan() const;
  void clear_is_replan();
  static const int kIsReplanFieldNumber = 9;
  bool is_replan() const;
  void set_is_replan(bool value);

  // optional int32 gear = 10;
  bool has_gear() const;
  void clear_gear();
  static const int kGearFieldNumber = 10;
  ::google::protobuf::int32 gear() const;
  void set_gear(::google::protobuf::int32 value);

  // optional .acu.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  bool has_right_of_way_status() const;
  void clear_right_of_way_status();
  static const int kRightOfWayStatusFieldNumber = 17;
  ::acu::planning::ADCTrajectory_RightOfWayStatus right_of_way_status() const;
  void set_right_of_way_status(::acu::planning::ADCTrajectory_RightOfWayStatus value);

  // optional .acu.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
  bool has_trajectory_type() const;
  void clear_trajectory_type();
  static const int kTrajectoryTypeFieldNumber = 21;
  ::acu::planning::ADCTrajectory_TrajectoryType trajectory_type() const;
  void set_trajectory_type(::acu::planning::ADCTrajectory_TrajectoryType value);

  // @@protoc_insertion_point(class_scope:acu.planning.ADCTrajectory)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_total_path_length();
  void clear_has_total_path_length();
  void set_has_total_path_time();
  void clear_has_total_path_time();
  void set_has_estop();
  void clear_has_estop();
  void set_has_is_replan();
  void clear_has_is_replan();
  void set_has_replan_reason();
  void clear_has_replan_reason();
  void set_has_gear();
  void clear_has_gear();
  void set_has_decision();
  void clear_has_decision();
  void set_has_latency_stats();
  void clear_has_latency_stats();
  void set_has_right_of_way_status();
  void clear_has_right_of_way_status();
  void set_has_trajectory_type();
  void clear_has_trajectory_type();
  void set_has_rss_info();
  void clear_has_rss_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::acu::common::TrajectoryPoint > trajectory_point_;
  ::google::protobuf::RepeatedPtrField< ::acu::common::PathPoint > path_point_;
  ::google::protobuf::internal::ArenaStringPtr replan_reason_;
  ::acu::common::Header* header_;
  ::acu::planning::EStop* estop_;
  ::acu::planning::DecisionResult* decision_;
  ::acu::planning::LatencyStats* latency_stats_;
  ::acu::planning::RSSInfo* rss_info_;
  double total_path_length_;
  double total_path_time_;
  bool is_replan_;
  ::google::protobuf::int32 gear_;
  int right_of_way_status_;
  int trajectory_type_;
  friend struct ::protobuf_motionplanning_2eproto::TableStruct;
  friend void ::protobuf_motionplanning_2eproto::InitDefaultsADCTrajectoryImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StopPoint

// optional double s = 1;
inline bool StopPoint::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopPoint::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopPoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopPoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double StopPoint::s() const {
  // @@protoc_insertion_point(field_get:acu.planning.StopPoint.s)
  return s_;
}
inline void StopPoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.StopPoint.s)
}

// optional double l = 2;
inline bool StopPoint::has_l() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StopPoint::set_has_l() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StopPoint::clear_has_l() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StopPoint::clear_l() {
  l_ = 0;
  clear_has_l();
}
inline double StopPoint::l() const {
  // @@protoc_insertion_point(field_get:acu.planning.StopPoint.l)
  return l_;
}
inline void StopPoint::set_l(double value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.StopPoint.l)
}

// optional double x = 3;
inline bool StopPoint::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StopPoint::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StopPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StopPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double StopPoint::x() const {
  // @@protoc_insertion_point(field_get:acu.planning.StopPoint.x)
  return x_;
}
inline void StopPoint::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.StopPoint.x)
}

// optional double y = 4;
inline bool StopPoint::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StopPoint::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StopPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StopPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double StopPoint::y() const {
  // @@protoc_insertion_point(field_get:acu.planning.StopPoint.y)
  return y_;
}
inline void StopPoint::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.StopPoint.y)
}

// optional double heading = 5;
inline bool StopPoint::has_heading() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StopPoint::set_has_heading() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StopPoint::clear_has_heading() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StopPoint::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double StopPoint::heading() const {
  // @@protoc_insertion_point(field_get:acu.planning.StopPoint.heading)
  return heading_;
}
inline void StopPoint::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.StopPoint.heading)
}

// optional .acu.planning.StopPoint.Type type = 6 [default = HARD];
inline bool StopPoint::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StopPoint::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StopPoint::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StopPoint::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::acu::planning::StopPoint_Type StopPoint::type() const {
  // @@protoc_insertion_point(field_get:acu.planning.StopPoint.type)
  return static_cast< ::acu::planning::StopPoint_Type >(type_);
}
inline void StopPoint::set_type(::acu::planning::StopPoint_Type value) {
  assert(::acu::planning::StopPoint_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.StopPoint.type)
}

// -------------------------------------------------------------------

// PlanningTarget

// optional .acu.planning.StopPoint stop_point = 1;
inline bool PlanningTarget::has_stop_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningTarget::set_has_stop_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanningTarget::clear_has_stop_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanningTarget::clear_stop_point() {
  if (stop_point_ != NULL) stop_point_->Clear();
  clear_has_stop_point();
}
inline const ::acu::planning::StopPoint& PlanningTarget::stop_point() const {
  const ::acu::planning::StopPoint* p = stop_point_;
  // @@protoc_insertion_point(field_get:acu.planning.PlanningTarget.stop_point)
  return p != NULL ? *p : *reinterpret_cast<const ::acu::planning::StopPoint*>(
      &::acu::planning::_StopPoint_default_instance_);
}
inline ::acu::planning::StopPoint* PlanningTarget::release_stop_point() {
  // @@protoc_insertion_point(field_release:acu.planning.PlanningTarget.stop_point)
  clear_has_stop_point();
  ::acu::planning::StopPoint* temp = stop_point_;
  stop_point_ = NULL;
  return temp;
}
inline ::acu::planning::StopPoint* PlanningTarget::mutable_stop_point() {
  set_has_stop_point();
  if (stop_point_ == NULL) {
    stop_point_ = new ::acu::planning::StopPoint;
  }
  // @@protoc_insertion_point(field_mutable:acu.planning.PlanningTarget.stop_point)
  return stop_point_;
}
inline void PlanningTarget::set_allocated_stop_point(::acu::planning::StopPoint* stop_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stop_point_;
  }
  if (stop_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stop_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stop_point, submessage_arena);
    }
    set_has_stop_point();
  } else {
    clear_has_stop_point();
  }
  stop_point_ = stop_point;
  // @@protoc_insertion_point(field_set_allocated:acu.planning.PlanningTarget.stop_point)
}

// optional double cruise_speed = 2;
inline bool PlanningTarget::has_cruise_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningTarget::set_has_cruise_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanningTarget::clear_has_cruise_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanningTarget::clear_cruise_speed() {
  cruise_speed_ = 0;
  clear_has_cruise_speed();
}
inline double PlanningTarget::cruise_speed() const {
  // @@protoc_insertion_point(field_get:acu.planning.PlanningTarget.cruise_speed)
  return cruise_speed_;
}
inline void PlanningTarget::set_cruise_speed(double value) {
  set_has_cruise_speed();
  cruise_speed_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.PlanningTarget.cruise_speed)
}

// -------------------------------------------------------------------

// ADCSignals

// repeated .acu.planning.ADCSignals.SignalType signal = 1;
inline int ADCSignals::signal_size() const {
  return signal_.size();
}
inline void ADCSignals::clear_signal() {
  signal_.Clear();
}
inline ::acu::planning::ADCSignals_SignalType ADCSignals::signal(int index) const {
  // @@protoc_insertion_point(field_get:acu.planning.ADCSignals.signal)
  return static_cast< ::acu::planning::ADCSignals_SignalType >(signal_.Get(index));
}
inline void ADCSignals::set_signal(int index, ::acu::planning::ADCSignals_SignalType value) {
  assert(::acu::planning::ADCSignals_SignalType_IsValid(value));
  signal_.Set(index, value);
  // @@protoc_insertion_point(field_set:acu.planning.ADCSignals.signal)
}
inline void ADCSignals::add_signal(::acu::planning::ADCSignals_SignalType value) {
  assert(::acu::planning::ADCSignals_SignalType_IsValid(value));
  signal_.Add(value);
  // @@protoc_insertion_point(field_add:acu.planning.ADCSignals.signal)
}
inline const ::google::protobuf::RepeatedField<int>&
ADCSignals::signal() const {
  // @@protoc_insertion_point(field_list:acu.planning.ADCSignals.signal)
  return signal_;
}
inline ::google::protobuf::RepeatedField<int>*
ADCSignals::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:acu.planning.ADCSignals.signal)
  return &signal_;
}

// -------------------------------------------------------------------

// EStop

// optional bool is_estop = 1;
inline bool EStop::has_is_estop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EStop::set_has_is_estop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EStop::clear_has_is_estop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EStop::clear_is_estop() {
  is_estop_ = false;
  clear_has_is_estop();
}
inline bool EStop::is_estop() const {
  // @@protoc_insertion_point(field_get:acu.planning.EStop.is_estop)
  return is_estop_;
}
inline void EStop::set_is_estop(bool value) {
  set_has_is_estop();
  is_estop_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.EStop.is_estop)
}

// optional string reason = 2;
inline bool EStop::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EStop::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EStop::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EStop::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
inline const ::std::string& EStop::reason() const {
  // @@protoc_insertion_point(field_get:acu.planning.EStop.reason)
  return reason_.GetNoArena();
}
inline void EStop::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:acu.planning.EStop.reason)
}
#if LANG_CXX11
inline void EStop::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:acu.planning.EStop.reason)
}
#endif
inline void EStop::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:acu.planning.EStop.reason)
}
inline void EStop::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:acu.planning.EStop.reason)
}
inline ::std::string* EStop::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:acu.planning.EStop.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EStop::release_reason() {
  // @@protoc_insertion_point(field_release:acu.planning.EStop.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EStop::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:acu.planning.EStop.reason)
}

// -------------------------------------------------------------------

// TaskStats

// optional string name = 1;
inline bool TaskStats::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskStats::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskStats::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskStats::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TaskStats::name() const {
  // @@protoc_insertion_point(field_get:acu.planning.TaskStats.name)
  return name_.GetNoArena();
}
inline void TaskStats::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:acu.planning.TaskStats.name)
}
#if LANG_CXX11
inline void TaskStats::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:acu.planning.TaskStats.name)
}
#endif
inline void TaskStats::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:acu.planning.TaskStats.name)
}
inline void TaskStats::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:acu.planning.TaskStats.name)
}
inline ::std::string* TaskStats::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:acu.planning.TaskStats.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskStats::release_name() {
  // @@protoc_insertion_point(field_release:acu.planning.TaskStats.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskStats::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:acu.planning.TaskStats.name)
}

// optional double time_ms = 2;
inline bool TaskStats::has_time_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskStats::set_has_time_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskStats::clear_has_time_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskStats::clear_time_ms() {
  time_ms_ = 0;
  clear_has_time_ms();
}
inline double TaskStats::time_ms() const {
  // @@protoc_insertion_point(field_get:acu.planning.TaskStats.time_ms)
  return time_ms_;
}
inline void TaskStats::set_time_ms(double value) {
  set_has_time_ms();
  time_ms_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.TaskStats.time_ms)
}

// -------------------------------------------------------------------

// LatencyStats

// optional double total_time_ms = 1;
inline bool LatencyStats::has_total_time_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LatencyStats::set_has_total_time_ms() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LatencyStats::clear_has_total_time_ms() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LatencyStats::clear_total_time_ms() {
  total_time_ms_ = 0;
  clear_has_total_time_ms();
}
inline double LatencyStats::total_time_ms() const {
  // @@protoc_insertion_point(field_get:acu.planning.LatencyStats.total_time_ms)
  return total_time_ms_;
}
inline void LatencyStats::set_total_time_ms(double value) {
  set_has_total_time_ms();
  total_time_ms_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.LatencyStats.total_time_ms)
}

// repeated .acu.planning.TaskStats task_stats = 2;
inline int LatencyStats::task_stats_size() const {
  return task_stats_.size();
}
inline void LatencyStats::clear_task_stats() {
  task_stats_.Clear();
}
inline const ::acu::planning::TaskStats& LatencyStats::task_stats(int index) const {
  // @@protoc_insertion_point(field_get:acu.planning.LatencyStats.task_stats)
  return task_stats_.Get(index);
}
inline ::acu::planning::TaskStats* LatencyStats::mutable_task_stats(int index) {
  // @@protoc_insertion_point(field_mutable:acu.planning.LatencyStats.task_stats)
  return task_stats_.Mutable(index);
}
inline ::acu::planning::TaskStats* LatencyStats::add_task_stats() {
  // @@protoc_insertion_point(field_add:acu.planning.LatencyStats.task_stats)
  return task_stats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::acu::planning::TaskStats >*
LatencyStats::mutable_task_stats() {
  // @@protoc_insertion_point(field_mutable_list:acu.planning.LatencyStats.task_stats)
  return &task_stats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::acu::planning::TaskStats >&
LatencyStats::task_stats() const {
  // @@protoc_insertion_point(field_list:acu.planning.LatencyStats.task_stats)
  return task_stats_;
}

// optional double init_frame_time_ms = 3;
inline bool LatencyStats::has_init_frame_time_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LatencyStats::set_has_init_frame_time_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LatencyStats::clear_has_init_frame_time_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LatencyStats::clear_init_frame_time_ms() {
  init_frame_time_ms_ = 0;
  clear_has_init_frame_time_ms();
}
inline double LatencyStats::init_frame_time_ms() const {
  // @@protoc_insertion_point(field_get:acu.planning.LatencyStats.init_frame_time_ms)
  return init_frame_time_ms_;
}
inline void LatencyStats::set_init_frame_time_ms(double value) {
  set_has_init_frame_time_ms();
  init_frame_time_ms_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.LatencyStats.init_frame_time_ms)
}

// -------------------------------------------------------------------

// RSSInfo

// optional bool is_rss_safe = 1;
inline bool RSSInfo::has_is_rss_safe() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RSSInfo::set_has_is_rss_safe() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RSSInfo::clear_has_is_rss_safe() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RSSInfo::clear_is_rss_safe() {
  is_rss_safe_ = false;
  clear_has_is_rss_safe();
}
inline bool RSSInfo::is_rss_safe() const {
  // @@protoc_insertion_point(field_get:acu.planning.RSSInfo.is_rss_safe)
  return is_rss_safe_;
}
inline void RSSInfo::set_is_rss_safe(bool value) {
  set_has_is_rss_safe();
  is_rss_safe_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.RSSInfo.is_rss_safe)
}

// optional double cur_dist_lon = 2;
inline bool RSSInfo::has_cur_dist_lon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RSSInfo::set_has_cur_dist_lon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RSSInfo::clear_has_cur_dist_lon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RSSInfo::clear_cur_dist_lon() {
  cur_dist_lon_ = 0;
  clear_has_cur_dist_lon();
}
inline double RSSInfo::cur_dist_lon() const {
  // @@protoc_insertion_point(field_get:acu.planning.RSSInfo.cur_dist_lon)
  return cur_dist_lon_;
}
inline void RSSInfo::set_cur_dist_lon(double value) {
  set_has_cur_dist_lon();
  cur_dist_lon_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.RSSInfo.cur_dist_lon)
}

// optional double rss_safe_dist_lon = 3;
inline bool RSSInfo::has_rss_safe_dist_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RSSInfo::set_has_rss_safe_dist_lon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RSSInfo::clear_has_rss_safe_dist_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RSSInfo::clear_rss_safe_dist_lon() {
  rss_safe_dist_lon_ = 0;
  clear_has_rss_safe_dist_lon();
}
inline double RSSInfo::rss_safe_dist_lon() const {
  // @@protoc_insertion_point(field_get:acu.planning.RSSInfo.rss_safe_dist_lon)
  return rss_safe_dist_lon_;
}
inline void RSSInfo::set_rss_safe_dist_lon(double value) {
  set_has_rss_safe_dist_lon();
  rss_safe_dist_lon_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.RSSInfo.rss_safe_dist_lon)
}

// optional double acc_lon_range_minimum = 4;
inline bool RSSInfo::has_acc_lon_range_minimum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RSSInfo::set_has_acc_lon_range_minimum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RSSInfo::clear_has_acc_lon_range_minimum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RSSInfo::clear_acc_lon_range_minimum() {
  acc_lon_range_minimum_ = 0;
  clear_has_acc_lon_range_minimum();
}
inline double RSSInfo::acc_lon_range_minimum() const {
  // @@protoc_insertion_point(field_get:acu.planning.RSSInfo.acc_lon_range_minimum)
  return acc_lon_range_minimum_;
}
inline void RSSInfo::set_acc_lon_range_minimum(double value) {
  set_has_acc_lon_range_minimum();
  acc_lon_range_minimum_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.RSSInfo.acc_lon_range_minimum)
}

// optional double acc_lon_range_maximum = 5;
inline bool RSSInfo::has_acc_lon_range_maximum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RSSInfo::set_has_acc_lon_range_maximum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RSSInfo::clear_has_acc_lon_range_maximum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RSSInfo::clear_acc_lon_range_maximum() {
  acc_lon_range_maximum_ = 0;
  clear_has_acc_lon_range_maximum();
}
inline double RSSInfo::acc_lon_range_maximum() const {
  // @@protoc_insertion_point(field_get:acu.planning.RSSInfo.acc_lon_range_maximum)
  return acc_lon_range_maximum_;
}
inline void RSSInfo::set_acc_lon_range_maximum(double value) {
  set_has_acc_lon_range_maximum();
  acc_lon_range_maximum_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.RSSInfo.acc_lon_range_maximum)
}

// optional double acc_lat_left_range_minimum = 6;
inline bool RSSInfo::has_acc_lat_left_range_minimum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RSSInfo::set_has_acc_lat_left_range_minimum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RSSInfo::clear_has_acc_lat_left_range_minimum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RSSInfo::clear_acc_lat_left_range_minimum() {
  acc_lat_left_range_minimum_ = 0;
  clear_has_acc_lat_left_range_minimum();
}
inline double RSSInfo::acc_lat_left_range_minimum() const {
  // @@protoc_insertion_point(field_get:acu.planning.RSSInfo.acc_lat_left_range_minimum)
  return acc_lat_left_range_minimum_;
}
inline void RSSInfo::set_acc_lat_left_range_minimum(double value) {
  set_has_acc_lat_left_range_minimum();
  acc_lat_left_range_minimum_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.RSSInfo.acc_lat_left_range_minimum)
}

// optional double acc_lat_left_range_maximum = 7;
inline bool RSSInfo::has_acc_lat_left_range_maximum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RSSInfo::set_has_acc_lat_left_range_maximum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RSSInfo::clear_has_acc_lat_left_range_maximum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RSSInfo::clear_acc_lat_left_range_maximum() {
  acc_lat_left_range_maximum_ = 0;
  clear_has_acc_lat_left_range_maximum();
}
inline double RSSInfo::acc_lat_left_range_maximum() const {
  // @@protoc_insertion_point(field_get:acu.planning.RSSInfo.acc_lat_left_range_maximum)
  return acc_lat_left_range_maximum_;
}
inline void RSSInfo::set_acc_lat_left_range_maximum(double value) {
  set_has_acc_lat_left_range_maximum();
  acc_lat_left_range_maximum_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.RSSInfo.acc_lat_left_range_maximum)
}

// optional double acc_lat_right_range_minimum = 8;
inline bool RSSInfo::has_acc_lat_right_range_minimum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RSSInfo::set_has_acc_lat_right_range_minimum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RSSInfo::clear_has_acc_lat_right_range_minimum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RSSInfo::clear_acc_lat_right_range_minimum() {
  acc_lat_right_range_minimum_ = 0;
  clear_has_acc_lat_right_range_minimum();
}
inline double RSSInfo::acc_lat_right_range_minimum() const {
  // @@protoc_insertion_point(field_get:acu.planning.RSSInfo.acc_lat_right_range_minimum)
  return acc_lat_right_range_minimum_;
}
inline void RSSInfo::set_acc_lat_right_range_minimum(double value) {
  set_has_acc_lat_right_range_minimum();
  acc_lat_right_range_minimum_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.RSSInfo.acc_lat_right_range_minimum)
}

// optional double acc_lat_right_range_maximum = 9;
inline bool RSSInfo::has_acc_lat_right_range_maximum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RSSInfo::set_has_acc_lat_right_range_maximum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RSSInfo::clear_has_acc_lat_right_range_maximum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RSSInfo::clear_acc_lat_right_range_maximum() {
  acc_lat_right_range_maximum_ = 0;
  clear_has_acc_lat_right_range_maximum();
}
inline double RSSInfo::acc_lat_right_range_maximum() const {
  // @@protoc_insertion_point(field_get:acu.planning.RSSInfo.acc_lat_right_range_maximum)
  return acc_lat_right_range_maximum_;
}
inline void RSSInfo::set_acc_lat_right_range_maximum(double value) {
  set_has_acc_lat_right_range_maximum();
  acc_lat_right_range_maximum_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.RSSInfo.acc_lat_right_range_maximum)
}

// -------------------------------------------------------------------

// ADCTrajectory

// optional .acu.common.Header header = 1;
inline bool ADCTrajectory::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ADCTrajectory::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ADCTrajectory::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::acu::common::Header& ADCTrajectory::header() const {
  const ::acu::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:acu.planning.ADCTrajectory.header)
  return p != NULL ? *p : *reinterpret_cast<const ::acu::common::Header*>(
      &::acu::common::_Header_default_instance_);
}
inline ::acu::common::Header* ADCTrajectory::release_header() {
  // @@protoc_insertion_point(field_release:acu.planning.ADCTrajectory.header)
  clear_has_header();
  ::acu::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::acu::common::Header* ADCTrajectory::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::acu::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:acu.planning.ADCTrajectory.header)
  return header_;
}
inline void ADCTrajectory::set_allocated_header(::acu::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:acu.planning.ADCTrajectory.header)
}

// optional double total_path_length = 2;
inline bool ADCTrajectory::has_total_path_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ADCTrajectory::set_has_total_path_length() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ADCTrajectory::clear_has_total_path_length() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ADCTrajectory::clear_total_path_length() {
  total_path_length_ = 0;
  clear_has_total_path_length();
}
inline double ADCTrajectory::total_path_length() const {
  // @@protoc_insertion_point(field_get:acu.planning.ADCTrajectory.total_path_length)
  return total_path_length_;
}
inline void ADCTrajectory::set_total_path_length(double value) {
  set_has_total_path_length();
  total_path_length_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.ADCTrajectory.total_path_length)
}

// optional double total_path_time = 3;
inline bool ADCTrajectory::has_total_path_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ADCTrajectory::set_has_total_path_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ADCTrajectory::clear_has_total_path_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ADCTrajectory::clear_total_path_time() {
  total_path_time_ = 0;
  clear_has_total_path_time();
}
inline double ADCTrajectory::total_path_time() const {
  // @@protoc_insertion_point(field_get:acu.planning.ADCTrajectory.total_path_time)
  return total_path_time_;
}
inline void ADCTrajectory::set_total_path_time(double value) {
  set_has_total_path_time();
  total_path_time_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.ADCTrajectory.total_path_time)
}

// repeated .acu.common.TrajectoryPoint trajectory_point = 12;
inline int ADCTrajectory::trajectory_point_size() const {
  return trajectory_point_.size();
}
inline const ::acu::common::TrajectoryPoint& ADCTrajectory::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:acu.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_.Get(index);
}
inline ::acu::common::TrajectoryPoint* ADCTrajectory::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:acu.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_.Mutable(index);
}
inline ::acu::common::TrajectoryPoint* ADCTrajectory::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:acu.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::acu::common::TrajectoryPoint >*
ADCTrajectory::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:acu.planning.ADCTrajectory.trajectory_point)
  return &trajectory_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::acu::common::TrajectoryPoint >&
ADCTrajectory::trajectory_point() const {
  // @@protoc_insertion_point(field_list:acu.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_;
}

// optional .acu.planning.EStop estop = 6;
inline bool ADCTrajectory::has_estop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ADCTrajectory::set_has_estop() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ADCTrajectory::clear_has_estop() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ADCTrajectory::clear_estop() {
  if (estop_ != NULL) estop_->Clear();
  clear_has_estop();
}
inline const ::acu::planning::EStop& ADCTrajectory::estop() const {
  const ::acu::planning::EStop* p = estop_;
  // @@protoc_insertion_point(field_get:acu.planning.ADCTrajectory.estop)
  return p != NULL ? *p : *reinterpret_cast<const ::acu::planning::EStop*>(
      &::acu::planning::_EStop_default_instance_);
}
inline ::acu::planning::EStop* ADCTrajectory::release_estop() {
  // @@protoc_insertion_point(field_release:acu.planning.ADCTrajectory.estop)
  clear_has_estop();
  ::acu::planning::EStop* temp = estop_;
  estop_ = NULL;
  return temp;
}
inline ::acu::planning::EStop* ADCTrajectory::mutable_estop() {
  set_has_estop();
  if (estop_ == NULL) {
    estop_ = new ::acu::planning::EStop;
  }
  // @@protoc_insertion_point(field_mutable:acu.planning.ADCTrajectory.estop)
  return estop_;
}
inline void ADCTrajectory::set_allocated_estop(::acu::planning::EStop* estop) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete estop_;
  }
  if (estop) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      estop = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, estop, submessage_arena);
    }
    set_has_estop();
  } else {
    clear_has_estop();
  }
  estop_ = estop;
  // @@protoc_insertion_point(field_set_allocated:acu.planning.ADCTrajectory.estop)
}

// repeated .acu.common.PathPoint path_point = 13;
inline int ADCTrajectory::path_point_size() const {
  return path_point_.size();
}
inline const ::acu::common::PathPoint& ADCTrajectory::path_point(int index) const {
  // @@protoc_insertion_point(field_get:acu.planning.ADCTrajectory.path_point)
  return path_point_.Get(index);
}
inline ::acu::common::PathPoint* ADCTrajectory::mutable_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:acu.planning.ADCTrajectory.path_point)
  return path_point_.Mutable(index);
}
inline ::acu::common::PathPoint* ADCTrajectory::add_path_point() {
  // @@protoc_insertion_point(field_add:acu.planning.ADCTrajectory.path_point)
  return path_point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::acu::common::PathPoint >*
ADCTrajectory::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable_list:acu.planning.ADCTrajectory.path_point)
  return &path_point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::acu::common::PathPoint >&
ADCTrajectory::path_point() const {
  // @@protoc_insertion_point(field_list:acu.planning.ADCTrajectory.path_point)
  return path_point_;
}

// optional bool is_replan = 9 [default = false];
inline bool ADCTrajectory::has_is_replan() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ADCTrajectory::set_has_is_replan() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ADCTrajectory::clear_has_is_replan() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ADCTrajectory::clear_is_replan() {
  is_replan_ = false;
  clear_has_is_replan();
}
inline bool ADCTrajectory::is_replan() const {
  // @@protoc_insertion_point(field_get:acu.planning.ADCTrajectory.is_replan)
  return is_replan_;
}
inline void ADCTrajectory::set_is_replan(bool value) {
  set_has_is_replan();
  is_replan_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.ADCTrajectory.is_replan)
}

// optional string replan_reason = 22;
inline bool ADCTrajectory::has_replan_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ADCTrajectory::set_has_replan_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ADCTrajectory::clear_has_replan_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ADCTrajectory::clear_replan_reason() {
  replan_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_replan_reason();
}
inline const ::std::string& ADCTrajectory::replan_reason() const {
  // @@protoc_insertion_point(field_get:acu.planning.ADCTrajectory.replan_reason)
  return replan_reason_.GetNoArena();
}
inline void ADCTrajectory::set_replan_reason(const ::std::string& value) {
  set_has_replan_reason();
  replan_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:acu.planning.ADCTrajectory.replan_reason)
}
#if LANG_CXX11
inline void ADCTrajectory::set_replan_reason(::std::string&& value) {
  set_has_replan_reason();
  replan_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:acu.planning.ADCTrajectory.replan_reason)
}
#endif
inline void ADCTrajectory::set_replan_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_replan_reason();
  replan_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:acu.planning.ADCTrajectory.replan_reason)
}
inline void ADCTrajectory::set_replan_reason(const char* value, size_t size) {
  set_has_replan_reason();
  replan_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:acu.planning.ADCTrajectory.replan_reason)
}
inline ::std::string* ADCTrajectory::mutable_replan_reason() {
  set_has_replan_reason();
  // @@protoc_insertion_point(field_mutable:acu.planning.ADCTrajectory.replan_reason)
  return replan_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ADCTrajectory::release_replan_reason() {
  // @@protoc_insertion_point(field_release:acu.planning.ADCTrajectory.replan_reason)
  clear_has_replan_reason();
  return replan_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ADCTrajectory::set_allocated_replan_reason(::std::string* replan_reason) {
  if (replan_reason != NULL) {
    set_has_replan_reason();
  } else {
    clear_has_replan_reason();
  }
  replan_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), replan_reason);
  // @@protoc_insertion_point(field_set_allocated:acu.planning.ADCTrajectory.replan_reason)
}

// optional int32 gear = 10;
inline bool ADCTrajectory::has_gear() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ADCTrajectory::set_has_gear() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ADCTrajectory::clear_has_gear() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ADCTrajectory::clear_gear() {
  gear_ = 0;
  clear_has_gear();
}
inline ::google::protobuf::int32 ADCTrajectory::gear() const {
  // @@protoc_insertion_point(field_get:acu.planning.ADCTrajectory.gear)
  return gear_;
}
inline void ADCTrajectory::set_gear(::google::protobuf::int32 value) {
  set_has_gear();
  gear_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.ADCTrajectory.gear)
}

// optional .acu.planning.DecisionResult decision = 14;
inline bool ADCTrajectory::has_decision() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ADCTrajectory::set_has_decision() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ADCTrajectory::clear_has_decision() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::acu::planning::DecisionResult& ADCTrajectory::decision() const {
  const ::acu::planning::DecisionResult* p = decision_;
  // @@protoc_insertion_point(field_get:acu.planning.ADCTrajectory.decision)
  return p != NULL ? *p : *reinterpret_cast<const ::acu::planning::DecisionResult*>(
      &::acu::planning::_DecisionResult_default_instance_);
}
inline ::acu::planning::DecisionResult* ADCTrajectory::release_decision() {
  // @@protoc_insertion_point(field_release:acu.planning.ADCTrajectory.decision)
  clear_has_decision();
  ::acu::planning::DecisionResult* temp = decision_;
  decision_ = NULL;
  return temp;
}
inline ::acu::planning::DecisionResult* ADCTrajectory::mutable_decision() {
  set_has_decision();
  if (decision_ == NULL) {
    decision_ = new ::acu::planning::DecisionResult;
  }
  // @@protoc_insertion_point(field_mutable:acu.planning.ADCTrajectory.decision)
  return decision_;
}
inline void ADCTrajectory::set_allocated_decision(::acu::planning::DecisionResult* decision) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(decision_);
  }
  if (decision) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      decision = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, decision, submessage_arena);
    }
    set_has_decision();
  } else {
    clear_has_decision();
  }
  decision_ = decision;
  // @@protoc_insertion_point(field_set_allocated:acu.planning.ADCTrajectory.decision)
}

// optional .acu.planning.LatencyStats latency_stats = 15;
inline bool ADCTrajectory::has_latency_stats() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ADCTrajectory::set_has_latency_stats() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ADCTrajectory::clear_has_latency_stats() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ADCTrajectory::clear_latency_stats() {
  if (latency_stats_ != NULL) latency_stats_->Clear();
  clear_has_latency_stats();
}
inline const ::acu::planning::LatencyStats& ADCTrajectory::latency_stats() const {
  const ::acu::planning::LatencyStats* p = latency_stats_;
  // @@protoc_insertion_point(field_get:acu.planning.ADCTrajectory.latency_stats)
  return p != NULL ? *p : *reinterpret_cast<const ::acu::planning::LatencyStats*>(
      &::acu::planning::_LatencyStats_default_instance_);
}
inline ::acu::planning::LatencyStats* ADCTrajectory::release_latency_stats() {
  // @@protoc_insertion_point(field_release:acu.planning.ADCTrajectory.latency_stats)
  clear_has_latency_stats();
  ::acu::planning::LatencyStats* temp = latency_stats_;
  latency_stats_ = NULL;
  return temp;
}
inline ::acu::planning::LatencyStats* ADCTrajectory::mutable_latency_stats() {
  set_has_latency_stats();
  if (latency_stats_ == NULL) {
    latency_stats_ = new ::acu::planning::LatencyStats;
  }
  // @@protoc_insertion_point(field_mutable:acu.planning.ADCTrajectory.latency_stats)
  return latency_stats_;
}
inline void ADCTrajectory::set_allocated_latency_stats(::acu::planning::LatencyStats* latency_stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete latency_stats_;
  }
  if (latency_stats) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      latency_stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, latency_stats, submessage_arena);
    }
    set_has_latency_stats();
  } else {
    clear_has_latency_stats();
  }
  latency_stats_ = latency_stats;
  // @@protoc_insertion_point(field_set_allocated:acu.planning.ADCTrajectory.latency_stats)
}

// optional .acu.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
inline bool ADCTrajectory::has_right_of_way_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ADCTrajectory::set_has_right_of_way_status() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ADCTrajectory::clear_has_right_of_way_status() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ADCTrajectory::clear_right_of_way_status() {
  right_of_way_status_ = 0;
  clear_has_right_of_way_status();
}
inline ::acu::planning::ADCTrajectory_RightOfWayStatus ADCTrajectory::right_of_way_status() const {
  // @@protoc_insertion_point(field_get:acu.planning.ADCTrajectory.right_of_way_status)
  return static_cast< ::acu::planning::ADCTrajectory_RightOfWayStatus >(right_of_way_status_);
}
inline void ADCTrajectory::set_right_of_way_status(::acu::planning::ADCTrajectory_RightOfWayStatus value) {
  assert(::acu::planning::ADCTrajectory_RightOfWayStatus_IsValid(value));
  set_has_right_of_way_status();
  right_of_way_status_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.ADCTrajectory.right_of_way_status)
}

// optional .acu.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
inline bool ADCTrajectory::has_trajectory_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ADCTrajectory::set_has_trajectory_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ADCTrajectory::clear_has_trajectory_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ADCTrajectory::clear_trajectory_type() {
  trajectory_type_ = 0;
  clear_has_trajectory_type();
}
inline ::acu::planning::ADCTrajectory_TrajectoryType ADCTrajectory::trajectory_type() const {
  // @@protoc_insertion_point(field_get:acu.planning.ADCTrajectory.trajectory_type)
  return static_cast< ::acu::planning::ADCTrajectory_TrajectoryType >(trajectory_type_);
}
inline void ADCTrajectory::set_trajectory_type(::acu::planning::ADCTrajectory_TrajectoryType value) {
  assert(::acu::planning::ADCTrajectory_TrajectoryType_IsValid(value));
  set_has_trajectory_type();
  trajectory_type_ = value;
  // @@protoc_insertion_point(field_set:acu.planning.ADCTrajectory.trajectory_type)
}

// optional .acu.planning.RSSInfo rss_info = 100;
inline bool ADCTrajectory::has_rss_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ADCTrajectory::set_has_rss_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ADCTrajectory::clear_has_rss_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ADCTrajectory::clear_rss_info() {
  if (rss_info_ != NULL) rss_info_->Clear();
  clear_has_rss_info();
}
inline const ::acu::planning::RSSInfo& ADCTrajectory::rss_info() const {
  const ::acu::planning::RSSInfo* p = rss_info_;
  // @@protoc_insertion_point(field_get:acu.planning.ADCTrajectory.rss_info)
  return p != NULL ? *p : *reinterpret_cast<const ::acu::planning::RSSInfo*>(
      &::acu::planning::_RSSInfo_default_instance_);
}
inline ::acu::planning::RSSInfo* ADCTrajectory::release_rss_info() {
  // @@protoc_insertion_point(field_release:acu.planning.ADCTrajectory.rss_info)
  clear_has_rss_info();
  ::acu::planning::RSSInfo* temp = rss_info_;
  rss_info_ = NULL;
  return temp;
}
inline ::acu::planning::RSSInfo* ADCTrajectory::mutable_rss_info() {
  set_has_rss_info();
  if (rss_info_ == NULL) {
    rss_info_ = new ::acu::planning::RSSInfo;
  }
  // @@protoc_insertion_point(field_mutable:acu.planning.ADCTrajectory.rss_info)
  return rss_info_;
}
inline void ADCTrajectory::set_allocated_rss_info(::acu::planning::RSSInfo* rss_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rss_info_;
  }
  if (rss_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rss_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rss_info, submessage_arena);
    }
    set_has_rss_info();
  } else {
    clear_has_rss_info();
  }
  rss_info_ = rss_info;
  // @@protoc_insertion_point(field_set_allocated:acu.planning.ADCTrajectory.rss_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace acu

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::acu::planning::StopPoint_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::acu::planning::StopPoint_Type>() {
  return ::acu::planning::StopPoint_Type_descriptor();
}
template <> struct is_proto_enum< ::acu::planning::ADCSignals_SignalType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::acu::planning::ADCSignals_SignalType>() {
  return ::acu::planning::ADCSignals_SignalType_descriptor();
}
template <> struct is_proto_enum< ::acu::planning::ADCTrajectory_RightOfWayStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::acu::planning::ADCTrajectory_RightOfWayStatus>() {
  return ::acu::planning::ADCTrajectory_RightOfWayStatus_descriptor();
}
template <> struct is_proto_enum< ::acu::planning::ADCTrajectory_TrajectoryType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::acu::planning::ADCTrajectory_TrajectoryType>() {
  return ::acu::planning::ADCTrajectory_TrajectoryType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_motionplanning_2eproto__INCLUDED
