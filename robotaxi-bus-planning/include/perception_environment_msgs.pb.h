// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception_environment_msgs.proto

#ifndef PROTOBUF_perception_5fenvironment_5fmsgs_2eproto__INCLUDED
#define PROTOBUF_perception_5fenvironment_5fmsgs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common_msgs.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_perception_5fenvironment_5fmsgs_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSingleTrafficLightImpl();
void InitDefaultsSingleTrafficLight();
void InitDefaultsTrafficLightDetectionImpl();
void InitDefaultsTrafficLightDetection();
void InitDefaultsPerceptionEnvironmentImpl();
void InitDefaultsPerceptionEnvironment();
inline void InitDefaults() {
  InitDefaultsSingleTrafficLight();
  InitDefaultsTrafficLightDetection();
  InitDefaultsPerceptionEnvironment();
}
}  // namespace protobuf_perception_5fenvironment_5fmsgs_2eproto
class PerceptionEnvironment;
class PerceptionEnvironmentDefaultTypeInternal;
extern PerceptionEnvironmentDefaultTypeInternal _PerceptionEnvironment_default_instance_;
class SingleTrafficLight;
class SingleTrafficLightDefaultTypeInternal;
extern SingleTrafficLightDefaultTypeInternal _SingleTrafficLight_default_instance_;
class TrafficLightDetection;
class TrafficLightDetectionDefaultTypeInternal;
extern TrafficLightDetectionDefaultTypeInternal _TrafficLightDetection_default_instance_;

enum SingleTrafficLight_Color {
  SingleTrafficLight_Color_UNKNOWN_COLOR = 0,
  SingleTrafficLight_Color_RED = 1,
  SingleTrafficLight_Color_YELLOW = 2,
  SingleTrafficLight_Color_GREEN = 3,
  SingleTrafficLight_Color_BLACK = 4,
  SingleTrafficLight_Color_SingleTrafficLight_Color_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SingleTrafficLight_Color_SingleTrafficLight_Color_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SingleTrafficLight_Color_IsValid(int value);
const SingleTrafficLight_Color SingleTrafficLight_Color_Color_MIN = SingleTrafficLight_Color_UNKNOWN_COLOR;
const SingleTrafficLight_Color SingleTrafficLight_Color_Color_MAX = SingleTrafficLight_Color_BLACK;
const int SingleTrafficLight_Color_Color_ARRAYSIZE = SingleTrafficLight_Color_Color_MAX + 1;

const ::google::protobuf::EnumDescriptor* SingleTrafficLight_Color_descriptor();
inline const ::std::string& SingleTrafficLight_Color_Name(SingleTrafficLight_Color value) {
  return ::google::protobuf::internal::NameOfEnum(
    SingleTrafficLight_Color_descriptor(), value);
}
inline bool SingleTrafficLight_Color_Parse(
    const ::std::string& name, SingleTrafficLight_Color* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SingleTrafficLight_Color>(
    SingleTrafficLight_Color_descriptor(), name, value);
}
enum SingleTrafficLight_Flicker {
  SingleTrafficLight_Flicker_NORMAL = 0,
  SingleTrafficLight_Flicker_FLICKER_RED = 1,
  SingleTrafficLight_Flicker_FLICKER_YELLOW = 2,
  SingleTrafficLight_Flicker_FLICKER_GREEN = 3,
  SingleTrafficLight_Flicker_LENGTH_BLACK = 4,
  SingleTrafficLight_Flicker_LENGTH_FLICKER_YELLOW = 5,
  SingleTrafficLight_Flicker_UNORMAL = 6,
  SingleTrafficLight_Flicker_SingleTrafficLight_Flicker_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SingleTrafficLight_Flicker_SingleTrafficLight_Flicker_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SingleTrafficLight_Flicker_IsValid(int value);
const SingleTrafficLight_Flicker SingleTrafficLight_Flicker_Flicker_MIN = SingleTrafficLight_Flicker_NORMAL;
const SingleTrafficLight_Flicker SingleTrafficLight_Flicker_Flicker_MAX = SingleTrafficLight_Flicker_UNORMAL;
const int SingleTrafficLight_Flicker_Flicker_ARRAYSIZE = SingleTrafficLight_Flicker_Flicker_MAX + 1;

const ::google::protobuf::EnumDescriptor* SingleTrafficLight_Flicker_descriptor();
inline const ::std::string& SingleTrafficLight_Flicker_Name(SingleTrafficLight_Flicker value) {
  return ::google::protobuf::internal::NameOfEnum(
    SingleTrafficLight_Flicker_descriptor(), value);
}
inline bool SingleTrafficLight_Flicker_Parse(
    const ::std::string& name, SingleTrafficLight_Flicker* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SingleTrafficLight_Flicker>(
    SingleTrafficLight_Flicker_descriptor(), name, value);
}
// ===================================================================

class SingleTrafficLight : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SingleTrafficLight) */ {
 public:
  SingleTrafficLight();
  virtual ~SingleTrafficLight();

  SingleTrafficLight(const SingleTrafficLight& from);

  inline SingleTrafficLight& operator=(const SingleTrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SingleTrafficLight(SingleTrafficLight&& from) noexcept
    : SingleTrafficLight() {
    *this = ::std::move(from);
  }

  inline SingleTrafficLight& operator=(SingleTrafficLight&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleTrafficLight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleTrafficLight* internal_default_instance() {
    return reinterpret_cast<const SingleTrafficLight*>(
               &_SingleTrafficLight_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SingleTrafficLight* other);
  friend void swap(SingleTrafficLight& a, SingleTrafficLight& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingleTrafficLight* New() const PROTOBUF_FINAL { return New(NULL); }

  SingleTrafficLight* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SingleTrafficLight& from);
  void MergeFrom(const SingleTrafficLight& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SingleTrafficLight* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SingleTrafficLight_Color Color;
  static const Color UNKNOWN_COLOR =
    SingleTrafficLight_Color_UNKNOWN_COLOR;
  static const Color RED =
    SingleTrafficLight_Color_RED;
  static const Color YELLOW =
    SingleTrafficLight_Color_YELLOW;
  static const Color GREEN =
    SingleTrafficLight_Color_GREEN;
  static const Color BLACK =
    SingleTrafficLight_Color_BLACK;
  static inline bool Color_IsValid(int value) {
    return SingleTrafficLight_Color_IsValid(value);
  }
  static const Color Color_MIN =
    SingleTrafficLight_Color_Color_MIN;
  static const Color Color_MAX =
    SingleTrafficLight_Color_Color_MAX;
  static const int Color_ARRAYSIZE =
    SingleTrafficLight_Color_Color_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Color_descriptor() {
    return SingleTrafficLight_Color_descriptor();
  }
  static inline const ::std::string& Color_Name(Color value) {
    return SingleTrafficLight_Color_Name(value);
  }
  static inline bool Color_Parse(const ::std::string& name,
      Color* value) {
    return SingleTrafficLight_Color_Parse(name, value);
  }

  typedef SingleTrafficLight_Flicker Flicker;
  static const Flicker NORMAL =
    SingleTrafficLight_Flicker_NORMAL;
  static const Flicker FLICKER_RED =
    SingleTrafficLight_Flicker_FLICKER_RED;
  static const Flicker FLICKER_YELLOW =
    SingleTrafficLight_Flicker_FLICKER_YELLOW;
  static const Flicker FLICKER_GREEN =
    SingleTrafficLight_Flicker_FLICKER_GREEN;
  static const Flicker LENGTH_BLACK =
    SingleTrafficLight_Flicker_LENGTH_BLACK;
  static const Flicker LENGTH_FLICKER_YELLOW =
    SingleTrafficLight_Flicker_LENGTH_FLICKER_YELLOW;
  static const Flicker UNORMAL =
    SingleTrafficLight_Flicker_UNORMAL;
  static inline bool Flicker_IsValid(int value) {
    return SingleTrafficLight_Flicker_IsValid(value);
  }
  static const Flicker Flicker_MIN =
    SingleTrafficLight_Flicker_Flicker_MIN;
  static const Flicker Flicker_MAX =
    SingleTrafficLight_Flicker_Flicker_MAX;
  static const int Flicker_ARRAYSIZE =
    SingleTrafficLight_Flicker_Flicker_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Flicker_descriptor() {
    return SingleTrafficLight_Flicker_descriptor();
  }
  static inline const ::std::string& Flicker_Name(Flicker value) {
    return SingleTrafficLight_Flicker_Name(value);
  }
  static inline bool Flicker_Parse(const ::std::string& name,
      Flicker* value) {
    return SingleTrafficLight_Flicker_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 light_cycle = 8;
  int light_cycle_size() const;
  void clear_light_cycle();
  static const int kLightCycleFieldNumber = 8;
  ::google::protobuf::int32 light_cycle(int index) const;
  void set_light_cycle(int index, ::google::protobuf::int32 value);
  void add_light_cycle(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      light_cycle() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_light_cycle();

  // string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .SingleTrafficLight.Color color = 1;
  void clear_color();
  static const int kColorFieldNumber = 1;
  ::SingleTrafficLight_Color color() const;
  void set_color(::SingleTrafficLight_Color value);

  // .SingleTrafficLight.Flicker flicker = 3;
  void clear_flicker();
  static const int kFlickerFieldNumber = 3;
  ::SingleTrafficLight_Flicker flicker() const;
  void set_flicker(::SingleTrafficLight_Flicker value);

  // int32 number = 5;
  void clear_number();
  static const int kNumberFieldNumber = 5;
  ::google::protobuf::int32 number() const;
  void set_number(::google::protobuf::int32 value);

  // float confidence = 6;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 6;
  float confidence() const;
  void set_confidence(float value);

  // bool occlude = 4;
  void clear_occlude();
  static const int kOccludeFieldNumber = 4;
  bool occlude() const;
  void set_occlude(bool value);

  // bool using_obu = 9;
  void clear_using_obu();
  static const int kUsingObuFieldNumber = 9;
  bool using_obu() const;
  void set_using_obu(bool value);

  // float tracking_time = 7;
  void clear_tracking_time();
  static const int kTrackingTimeFieldNumber = 7;
  float tracking_time() const;
  void set_tracking_time(float value);

  // int32 light_type = 10;
  void clear_light_type();
  static const int kLightTypeFieldNumber = 10;
  ::google::protobuf::int32 light_type() const;
  void set_light_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SingleTrafficLight)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > light_cycle_;
  mutable int _light_cycle_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  int color_;
  int flicker_;
  ::google::protobuf::int32 number_;
  float confidence_;
  bool occlude_;
  bool using_obu_;
  float tracking_time_;
  ::google::protobuf::int32 light_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_5fenvironment_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_perception_5fenvironment_5fmsgs_2eproto::InitDefaultsSingleTrafficLightImpl();
};
// -------------------------------------------------------------------

class TrafficLightDetection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TrafficLightDetection) */ {
 public:
  TrafficLightDetection();
  virtual ~TrafficLightDetection();

  TrafficLightDetection(const TrafficLightDetection& from);

  inline TrafficLightDetection& operator=(const TrafficLightDetection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficLightDetection(TrafficLightDetection&& from) noexcept
    : TrafficLightDetection() {
    *this = ::std::move(from);
  }

  inline TrafficLightDetection& operator=(TrafficLightDetection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficLightDetection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLightDetection* internal_default_instance() {
    return reinterpret_cast<const TrafficLightDetection*>(
               &_TrafficLightDetection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TrafficLightDetection* other);
  friend void swap(TrafficLightDetection& a, TrafficLightDetection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficLightDetection* New() const PROTOBUF_FINAL { return New(NULL); }

  TrafficLightDetection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrafficLightDetection& from);
  void MergeFrom(const TrafficLightDetection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrafficLightDetection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SingleTrafficLight traffic_light = 2;
  int traffic_light_size() const;
  void clear_traffic_light();
  static const int kTrafficLightFieldNumber = 2;
  const ::SingleTrafficLight& traffic_light(int index) const;
  ::SingleTrafficLight* mutable_traffic_light(int index);
  ::SingleTrafficLight* add_traffic_light();
  ::google::protobuf::RepeatedPtrField< ::SingleTrafficLight >*
      mutable_traffic_light();
  const ::google::protobuf::RepeatedPtrField< ::SingleTrafficLight >&
      traffic_light() const;

  // .common_msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::common_msgs::Header& header() const;
  ::common_msgs::Header* release_header();
  ::common_msgs::Header* mutable_header();
  void set_allocated_header(::common_msgs::Header* header);

  // bool contain_lights = 3;
  void clear_contain_lights();
  static const int kContainLightsFieldNumber = 3;
  bool contain_lights() const;
  void set_contain_lights(bool value);

  // @@protoc_insertion_point(class_scope:TrafficLightDetection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::SingleTrafficLight > traffic_light_;
  ::common_msgs::Header* header_;
  bool contain_lights_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_5fenvironment_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_perception_5fenvironment_5fmsgs_2eproto::InitDefaultsTrafficLightDetectionImpl();
};
// -------------------------------------------------------------------

class PerceptionEnvironment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PerceptionEnvironment) */ {
 public:
  PerceptionEnvironment();
  virtual ~PerceptionEnvironment();

  PerceptionEnvironment(const PerceptionEnvironment& from);

  inline PerceptionEnvironment& operator=(const PerceptionEnvironment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PerceptionEnvironment(PerceptionEnvironment&& from) noexcept
    : PerceptionEnvironment() {
    *this = ::std::move(from);
  }

  inline PerceptionEnvironment& operator=(PerceptionEnvironment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PerceptionEnvironment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerceptionEnvironment* internal_default_instance() {
    return reinterpret_cast<const PerceptionEnvironment*>(
               &_PerceptionEnvironment_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PerceptionEnvironment* other);
  friend void swap(PerceptionEnvironment& a, PerceptionEnvironment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PerceptionEnvironment* New() const PROTOBUF_FINAL { return New(NULL); }

  PerceptionEnvironment* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PerceptionEnvironment& from);
  void MergeFrom(const PerceptionEnvironment& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PerceptionEnvironment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TrafficLightDetection traffic_light = 1;
  bool has_traffic_light() const;
  void clear_traffic_light();
  static const int kTrafficLightFieldNumber = 1;
  const ::TrafficLightDetection& traffic_light() const;
  ::TrafficLightDetection* release_traffic_light();
  ::TrafficLightDetection* mutable_traffic_light();
  void set_allocated_traffic_light(::TrafficLightDetection* traffic_light);

  // @@protoc_insertion_point(class_scope:PerceptionEnvironment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TrafficLightDetection* traffic_light_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_5fenvironment_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_perception_5fenvironment_5fmsgs_2eproto::InitDefaultsPerceptionEnvironmentImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SingleTrafficLight

// .SingleTrafficLight.Color color = 1;
inline void SingleTrafficLight::clear_color() {
  color_ = 0;
}
inline ::SingleTrafficLight_Color SingleTrafficLight::color() const {
  // @@protoc_insertion_point(field_get:SingleTrafficLight.color)
  return static_cast< ::SingleTrafficLight_Color >(color_);
}
inline void SingleTrafficLight::set_color(::SingleTrafficLight_Color value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:SingleTrafficLight.color)
}

// string id = 2;
inline void SingleTrafficLight::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SingleTrafficLight::id() const {
  // @@protoc_insertion_point(field_get:SingleTrafficLight.id)
  return id_.GetNoArena();
}
inline void SingleTrafficLight::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SingleTrafficLight.id)
}
#if LANG_CXX11
inline void SingleTrafficLight::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SingleTrafficLight.id)
}
#endif
inline void SingleTrafficLight::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SingleTrafficLight.id)
}
inline void SingleTrafficLight::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SingleTrafficLight.id)
}
inline ::std::string* SingleTrafficLight::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:SingleTrafficLight.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleTrafficLight::release_id() {
  // @@protoc_insertion_point(field_release:SingleTrafficLight.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleTrafficLight::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:SingleTrafficLight.id)
}

// .SingleTrafficLight.Flicker flicker = 3;
inline void SingleTrafficLight::clear_flicker() {
  flicker_ = 0;
}
inline ::SingleTrafficLight_Flicker SingleTrafficLight::flicker() const {
  // @@protoc_insertion_point(field_get:SingleTrafficLight.flicker)
  return static_cast< ::SingleTrafficLight_Flicker >(flicker_);
}
inline void SingleTrafficLight::set_flicker(::SingleTrafficLight_Flicker value) {
  
  flicker_ = value;
  // @@protoc_insertion_point(field_set:SingleTrafficLight.flicker)
}

// bool occlude = 4;
inline void SingleTrafficLight::clear_occlude() {
  occlude_ = false;
}
inline bool SingleTrafficLight::occlude() const {
  // @@protoc_insertion_point(field_get:SingleTrafficLight.occlude)
  return occlude_;
}
inline void SingleTrafficLight::set_occlude(bool value) {
  
  occlude_ = value;
  // @@protoc_insertion_point(field_set:SingleTrafficLight.occlude)
}

// int32 number = 5;
inline void SingleTrafficLight::clear_number() {
  number_ = 0;
}
inline ::google::protobuf::int32 SingleTrafficLight::number() const {
  // @@protoc_insertion_point(field_get:SingleTrafficLight.number)
  return number_;
}
inline void SingleTrafficLight::set_number(::google::protobuf::int32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:SingleTrafficLight.number)
}

// float confidence = 6;
inline void SingleTrafficLight::clear_confidence() {
  confidence_ = 0;
}
inline float SingleTrafficLight::confidence() const {
  // @@protoc_insertion_point(field_get:SingleTrafficLight.confidence)
  return confidence_;
}
inline void SingleTrafficLight::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:SingleTrafficLight.confidence)
}

// float tracking_time = 7;
inline void SingleTrafficLight::clear_tracking_time() {
  tracking_time_ = 0;
}
inline float SingleTrafficLight::tracking_time() const {
  // @@protoc_insertion_point(field_get:SingleTrafficLight.tracking_time)
  return tracking_time_;
}
inline void SingleTrafficLight::set_tracking_time(float value) {
  
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:SingleTrafficLight.tracking_time)
}

// repeated int32 light_cycle = 8;
inline int SingleTrafficLight::light_cycle_size() const {
  return light_cycle_.size();
}
inline void SingleTrafficLight::clear_light_cycle() {
  light_cycle_.Clear();
}
inline ::google::protobuf::int32 SingleTrafficLight::light_cycle(int index) const {
  // @@protoc_insertion_point(field_get:SingleTrafficLight.light_cycle)
  return light_cycle_.Get(index);
}
inline void SingleTrafficLight::set_light_cycle(int index, ::google::protobuf::int32 value) {
  light_cycle_.Set(index, value);
  // @@protoc_insertion_point(field_set:SingleTrafficLight.light_cycle)
}
inline void SingleTrafficLight::add_light_cycle(::google::protobuf::int32 value) {
  light_cycle_.Add(value);
  // @@protoc_insertion_point(field_add:SingleTrafficLight.light_cycle)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SingleTrafficLight::light_cycle() const {
  // @@protoc_insertion_point(field_list:SingleTrafficLight.light_cycle)
  return light_cycle_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SingleTrafficLight::mutable_light_cycle() {
  // @@protoc_insertion_point(field_mutable_list:SingleTrafficLight.light_cycle)
  return &light_cycle_;
}

// bool using_obu = 9;
inline void SingleTrafficLight::clear_using_obu() {
  using_obu_ = false;
}
inline bool SingleTrafficLight::using_obu() const {
  // @@protoc_insertion_point(field_get:SingleTrafficLight.using_obu)
  return using_obu_;
}
inline void SingleTrafficLight::set_using_obu(bool value) {
  
  using_obu_ = value;
  // @@protoc_insertion_point(field_set:SingleTrafficLight.using_obu)
}

// int32 light_type = 10;
inline void SingleTrafficLight::clear_light_type() {
  light_type_ = 0;
}
inline ::google::protobuf::int32 SingleTrafficLight::light_type() const {
  // @@protoc_insertion_point(field_get:SingleTrafficLight.light_type)
  return light_type_;
}
inline void SingleTrafficLight::set_light_type(::google::protobuf::int32 value) {
  
  light_type_ = value;
  // @@protoc_insertion_point(field_set:SingleTrafficLight.light_type)
}

// -------------------------------------------------------------------

// TrafficLightDetection

// .common_msgs.Header header = 1;
inline bool TrafficLightDetection::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::common_msgs::Header& TrafficLightDetection::header() const {
  const ::common_msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:TrafficLightDetection.header)
  return p != NULL ? *p : *reinterpret_cast<const ::common_msgs::Header*>(
      &::common_msgs::_Header_default_instance_);
}
inline ::common_msgs::Header* TrafficLightDetection::release_header() {
  // @@protoc_insertion_point(field_release:TrafficLightDetection.header)
  
  ::common_msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::common_msgs::Header* TrafficLightDetection::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::common_msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:TrafficLightDetection.header)
  return header_;
}
inline void TrafficLightDetection::set_allocated_header(::common_msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:TrafficLightDetection.header)
}

// repeated .SingleTrafficLight traffic_light = 2;
inline int TrafficLightDetection::traffic_light_size() const {
  return traffic_light_.size();
}
inline void TrafficLightDetection::clear_traffic_light() {
  traffic_light_.Clear();
}
inline const ::SingleTrafficLight& TrafficLightDetection::traffic_light(int index) const {
  // @@protoc_insertion_point(field_get:TrafficLightDetection.traffic_light)
  return traffic_light_.Get(index);
}
inline ::SingleTrafficLight* TrafficLightDetection::mutable_traffic_light(int index) {
  // @@protoc_insertion_point(field_mutable:TrafficLightDetection.traffic_light)
  return traffic_light_.Mutable(index);
}
inline ::SingleTrafficLight* TrafficLightDetection::add_traffic_light() {
  // @@protoc_insertion_point(field_add:TrafficLightDetection.traffic_light)
  return traffic_light_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SingleTrafficLight >*
TrafficLightDetection::mutable_traffic_light() {
  // @@protoc_insertion_point(field_mutable_list:TrafficLightDetection.traffic_light)
  return &traffic_light_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SingleTrafficLight >&
TrafficLightDetection::traffic_light() const {
  // @@protoc_insertion_point(field_list:TrafficLightDetection.traffic_light)
  return traffic_light_;
}

// bool contain_lights = 3;
inline void TrafficLightDetection::clear_contain_lights() {
  contain_lights_ = false;
}
inline bool TrafficLightDetection::contain_lights() const {
  // @@protoc_insertion_point(field_get:TrafficLightDetection.contain_lights)
  return contain_lights_;
}
inline void TrafficLightDetection::set_contain_lights(bool value) {
  
  contain_lights_ = value;
  // @@protoc_insertion_point(field_set:TrafficLightDetection.contain_lights)
}

// -------------------------------------------------------------------

// PerceptionEnvironment

// .TrafficLightDetection traffic_light = 1;
inline bool PerceptionEnvironment::has_traffic_light() const {
  return this != internal_default_instance() && traffic_light_ != NULL;
}
inline void PerceptionEnvironment::clear_traffic_light() {
  if (GetArenaNoVirtual() == NULL && traffic_light_ != NULL) {
    delete traffic_light_;
  }
  traffic_light_ = NULL;
}
inline const ::TrafficLightDetection& PerceptionEnvironment::traffic_light() const {
  const ::TrafficLightDetection* p = traffic_light_;
  // @@protoc_insertion_point(field_get:PerceptionEnvironment.traffic_light)
  return p != NULL ? *p : *reinterpret_cast<const ::TrafficLightDetection*>(
      &::_TrafficLightDetection_default_instance_);
}
inline ::TrafficLightDetection* PerceptionEnvironment::release_traffic_light() {
  // @@protoc_insertion_point(field_release:PerceptionEnvironment.traffic_light)
  
  ::TrafficLightDetection* temp = traffic_light_;
  traffic_light_ = NULL;
  return temp;
}
inline ::TrafficLightDetection* PerceptionEnvironment::mutable_traffic_light() {
  
  if (traffic_light_ == NULL) {
    traffic_light_ = new ::TrafficLightDetection;
  }
  // @@protoc_insertion_point(field_mutable:PerceptionEnvironment.traffic_light)
  return traffic_light_;
}
inline void PerceptionEnvironment::set_allocated_traffic_light(::TrafficLightDetection* traffic_light) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete traffic_light_;
  }
  if (traffic_light) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      traffic_light = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, traffic_light, submessage_arena);
    }
    
  } else {
    
  }
  traffic_light_ = traffic_light;
  // @@protoc_insertion_point(field_set_allocated:PerceptionEnvironment.traffic_light)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SingleTrafficLight_Color> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SingleTrafficLight_Color>() {
  return ::SingleTrafficLight_Color_descriptor();
}
template <> struct is_proto_enum< ::SingleTrafficLight_Flicker> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SingleTrafficLight_Flicker>() {
  return ::SingleTrafficLight_Flicker_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perception_5fenvironment_5fmsgs_2eproto__INCLUDED
