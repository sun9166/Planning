// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cloud2Vehicle.proto

#ifndef PROTOBUF_Cloud2Vehicle_2eproto__INCLUDED
#define PROTOBUF_Cloud2Vehicle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Cloud2Vehicle_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPathPointImpl();
void InitDefaultsPathPoint();
void InitDefaultsMissionImpl();
void InitDefaultsMission();
void InitDefaultsVehicle2CloudImpl();
void InitDefaultsVehicle2Cloud();
inline void InitDefaults() {
  InitDefaultsPathPoint();
  InitDefaultsMission();
  InitDefaultsVehicle2Cloud();
}
}  // namespace protobuf_Cloud2Vehicle_2eproto
namespace c2v {
namespace proto {
class Mission;
class MissionDefaultTypeInternal;
extern MissionDefaultTypeInternal _Mission_default_instance_;
class PathPoint;
class PathPointDefaultTypeInternal;
extern PathPointDefaultTypeInternal _PathPoint_default_instance_;
class Vehicle2Cloud;
class Vehicle2CloudDefaultTypeInternal;
extern Vehicle2CloudDefaultTypeInternal _Vehicle2Cloud_default_instance_;
}  // namespace proto
}  // namespace c2v
namespace c2v {
namespace proto {

// ===================================================================

class PathPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c2v.proto.PathPoint) */ {
 public:
  PathPoint();
  virtual ~PathPoint();

  PathPoint(const PathPoint& from);

  inline PathPoint& operator=(const PathPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PathPoint(PathPoint&& from) noexcept
    : PathPoint() {
    *this = ::std::move(from);
  }

  inline PathPoint& operator=(PathPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PathPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathPoint* internal_default_instance() {
    return reinterpret_cast<const PathPoint*>(
               &_PathPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PathPoint* other);
  friend void swap(PathPoint& a, PathPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PathPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  PathPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PathPoint& from);
  void MergeFrom(const PathPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PathPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double lat = 1;
  void clear_lat();
  static const int kLatFieldNumber = 1;
  double lat() const;
  void set_lat(double value);

  // double lon = 2;
  void clear_lon();
  static const int kLonFieldNumber = 2;
  double lon() const;
  void set_lon(double value);

  // @@protoc_insertion_point(class_scope:c2v.proto.PathPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double lat_;
  double lon_;
  mutable int _cached_size_;
  friend struct ::protobuf_Cloud2Vehicle_2eproto::TableStruct;
  friend void ::protobuf_Cloud2Vehicle_2eproto::InitDefaultsPathPointImpl();
};
// -------------------------------------------------------------------

class Mission : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c2v.proto.Mission) */ {
 public:
  Mission();
  virtual ~Mission();

  Mission(const Mission& from);

  inline Mission& operator=(const Mission& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mission(Mission&& from) noexcept
    : Mission() {
    *this = ::std::move(from);
  }

  inline Mission& operator=(Mission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mission* internal_default_instance() {
    return reinterpret_cast<const Mission*>(
               &_Mission_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Mission* other);
  friend void swap(Mission& a, Mission& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mission* New() const PROTOBUF_FINAL { return New(NULL); }

  Mission* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Mission& from);
  void MergeFrom(const Mission& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Mission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .c2v.proto.PathPoint point = 2;
  bool has_point() const;
  void clear_point();
  static const int kPointFieldNumber = 2;
  const ::c2v::proto::PathPoint& point() const;
  ::c2v::proto::PathPoint* release_point();
  ::c2v::proto::PathPoint* mutable_point();
  void set_allocated_point(::c2v::proto::PathPoint* point);

  // int32 mission_id = 1;
  void clear_mission_id();
  static const int kMissionIdFieldNumber = 1;
  ::google::protobuf::int32 mission_id() const;
  void set_mission_id(::google::protobuf::int32 value);

  // int32 mission_type = 3;
  void clear_mission_type();
  static const int kMissionTypeFieldNumber = 3;
  ::google::protobuf::int32 mission_type() const;
  void set_mission_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:c2v.proto.Mission)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::c2v::proto::PathPoint* point_;
  ::google::protobuf::int32 mission_id_;
  ::google::protobuf::int32 mission_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_Cloud2Vehicle_2eproto::TableStruct;
  friend void ::protobuf_Cloud2Vehicle_2eproto::InitDefaultsMissionImpl();
};
// -------------------------------------------------------------------

class Vehicle2Cloud : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:c2v.proto.Vehicle2Cloud) */ {
 public:
  Vehicle2Cloud();
  virtual ~Vehicle2Cloud();

  Vehicle2Cloud(const Vehicle2Cloud& from);

  inline Vehicle2Cloud& operator=(const Vehicle2Cloud& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vehicle2Cloud(Vehicle2Cloud&& from) noexcept
    : Vehicle2Cloud() {
    *this = ::std::move(from);
  }

  inline Vehicle2Cloud& operator=(Vehicle2Cloud&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vehicle2Cloud& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vehicle2Cloud* internal_default_instance() {
    return reinterpret_cast<const Vehicle2Cloud*>(
               &_Vehicle2Cloud_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Vehicle2Cloud* other);
  friend void swap(Vehicle2Cloud& a, Vehicle2Cloud& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vehicle2Cloud* New() const PROTOBUF_FINAL { return New(NULL); }

  Vehicle2Cloud* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vehicle2Cloud& from);
  void MergeFrom(const Vehicle2Cloud& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vehicle2Cloud* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .c2v.proto.Mission mission_points = 5;
  int mission_points_size() const;
  void clear_mission_points();
  static const int kMissionPointsFieldNumber = 5;
  const ::c2v::proto::Mission& mission_points(int index) const;
  ::c2v::proto::Mission* mutable_mission_points(int index);
  ::c2v::proto::Mission* add_mission_points();
  ::google::protobuf::RepeatedPtrField< ::c2v::proto::Mission >*
      mutable_mission_points();
  const ::google::protobuf::RepeatedPtrField< ::c2v::proto::Mission >&
      mission_points() const;

  // repeated .c2v.proto.PathPoint forbidden_points = 6;
  int forbidden_points_size() const;
  void clear_forbidden_points();
  static const int kForbiddenPointsFieldNumber = 6;
  const ::c2v::proto::PathPoint& forbidden_points(int index) const;
  ::c2v::proto::PathPoint* mutable_forbidden_points(int index);
  ::c2v::proto::PathPoint* add_forbidden_points();
  ::google::protobuf::RepeatedPtrField< ::c2v::proto::PathPoint >*
      mutable_forbidden_points();
  const ::google::protobuf::RepeatedPtrField< ::c2v::proto::PathPoint >&
      forbidden_points() const;

  // string vehicle_id = 2;
  void clear_vehicle_id();
  static const int kVehicleIdFieldNumber = 2;
  const ::std::string& vehicle_id() const;
  void set_vehicle_id(const ::std::string& value);
  #if LANG_CXX11
  void set_vehicle_id(::std::string&& value);
  #endif
  void set_vehicle_id(const char* value);
  void set_vehicle_id(const char* value, size_t size);
  ::std::string* mutable_vehicle_id();
  ::std::string* release_vehicle_id();
  void set_allocated_vehicle_id(::std::string* vehicle_id);

  // double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // int32 cmd_sequence_num = 3;
  void clear_cmd_sequence_num();
  static const int kCmdSequenceNumFieldNumber = 3;
  ::google::protobuf::int32 cmd_sequence_num() const;
  void set_cmd_sequence_num(::google::protobuf::int32 value);

  // int32 task_cmd = 4;
  void clear_task_cmd();
  static const int kTaskCmdFieldNumber = 4;
  ::google::protobuf::int32 task_cmd() const;
  void set_task_cmd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:c2v.proto.Vehicle2Cloud)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::c2v::proto::Mission > mission_points_;
  ::google::protobuf::RepeatedPtrField< ::c2v::proto::PathPoint > forbidden_points_;
  ::google::protobuf::internal::ArenaStringPtr vehicle_id_;
  double timestamp_;
  ::google::protobuf::int32 cmd_sequence_num_;
  ::google::protobuf::int32 task_cmd_;
  mutable int _cached_size_;
  friend struct ::protobuf_Cloud2Vehicle_2eproto::TableStruct;
  friend void ::protobuf_Cloud2Vehicle_2eproto::InitDefaultsVehicle2CloudImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PathPoint

// double lat = 1;
inline void PathPoint::clear_lat() {
  lat_ = 0;
}
inline double PathPoint::lat() const {
  // @@protoc_insertion_point(field_get:c2v.proto.PathPoint.lat)
  return lat_;
}
inline void PathPoint::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:c2v.proto.PathPoint.lat)
}

// double lon = 2;
inline void PathPoint::clear_lon() {
  lon_ = 0;
}
inline double PathPoint::lon() const {
  // @@protoc_insertion_point(field_get:c2v.proto.PathPoint.lon)
  return lon_;
}
inline void PathPoint::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:c2v.proto.PathPoint.lon)
}

// -------------------------------------------------------------------

// Mission

// int32 mission_id = 1;
inline void Mission::clear_mission_id() {
  mission_id_ = 0;
}
inline ::google::protobuf::int32 Mission::mission_id() const {
  // @@protoc_insertion_point(field_get:c2v.proto.Mission.mission_id)
  return mission_id_;
}
inline void Mission::set_mission_id(::google::protobuf::int32 value) {
  
  mission_id_ = value;
  // @@protoc_insertion_point(field_set:c2v.proto.Mission.mission_id)
}

// .c2v.proto.PathPoint point = 2;
inline bool Mission::has_point() const {
  return this != internal_default_instance() && point_ != NULL;
}
inline void Mission::clear_point() {
  if (GetArenaNoVirtual() == NULL && point_ != NULL) {
    delete point_;
  }
  point_ = NULL;
}
inline const ::c2v::proto::PathPoint& Mission::point() const {
  const ::c2v::proto::PathPoint* p = point_;
  // @@protoc_insertion_point(field_get:c2v.proto.Mission.point)
  return p != NULL ? *p : *reinterpret_cast<const ::c2v::proto::PathPoint*>(
      &::c2v::proto::_PathPoint_default_instance_);
}
inline ::c2v::proto::PathPoint* Mission::release_point() {
  // @@protoc_insertion_point(field_release:c2v.proto.Mission.point)
  
  ::c2v::proto::PathPoint* temp = point_;
  point_ = NULL;
  return temp;
}
inline ::c2v::proto::PathPoint* Mission::mutable_point() {
  
  if (point_ == NULL) {
    point_ = new ::c2v::proto::PathPoint;
  }
  // @@protoc_insertion_point(field_mutable:c2v.proto.Mission.point)
  return point_;
}
inline void Mission::set_allocated_point(::c2v::proto::PathPoint* point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete point_;
  }
  if (point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:c2v.proto.Mission.point)
}

// int32 mission_type = 3;
inline void Mission::clear_mission_type() {
  mission_type_ = 0;
}
inline ::google::protobuf::int32 Mission::mission_type() const {
  // @@protoc_insertion_point(field_get:c2v.proto.Mission.mission_type)
  return mission_type_;
}
inline void Mission::set_mission_type(::google::protobuf::int32 value) {
  
  mission_type_ = value;
  // @@protoc_insertion_point(field_set:c2v.proto.Mission.mission_type)
}

// -------------------------------------------------------------------

// Vehicle2Cloud

// double timestamp = 1;
inline void Vehicle2Cloud::clear_timestamp() {
  timestamp_ = 0;
}
inline double Vehicle2Cloud::timestamp() const {
  // @@protoc_insertion_point(field_get:c2v.proto.Vehicle2Cloud.timestamp)
  return timestamp_;
}
inline void Vehicle2Cloud::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:c2v.proto.Vehicle2Cloud.timestamp)
}

// string vehicle_id = 2;
inline void Vehicle2Cloud::clear_vehicle_id() {
  vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vehicle2Cloud::vehicle_id() const {
  // @@protoc_insertion_point(field_get:c2v.proto.Vehicle2Cloud.vehicle_id)
  return vehicle_id_.GetNoArena();
}
inline void Vehicle2Cloud::set_vehicle_id(const ::std::string& value) {
  
  vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:c2v.proto.Vehicle2Cloud.vehicle_id)
}
#if LANG_CXX11
inline void Vehicle2Cloud::set_vehicle_id(::std::string&& value) {
  
  vehicle_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:c2v.proto.Vehicle2Cloud.vehicle_id)
}
#endif
inline void Vehicle2Cloud::set_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:c2v.proto.Vehicle2Cloud.vehicle_id)
}
inline void Vehicle2Cloud::set_vehicle_id(const char* value, size_t size) {
  
  vehicle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:c2v.proto.Vehicle2Cloud.vehicle_id)
}
inline ::std::string* Vehicle2Cloud::mutable_vehicle_id() {
  
  // @@protoc_insertion_point(field_mutable:c2v.proto.Vehicle2Cloud.vehicle_id)
  return vehicle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vehicle2Cloud::release_vehicle_id() {
  // @@protoc_insertion_point(field_release:c2v.proto.Vehicle2Cloud.vehicle_id)
  
  return vehicle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vehicle2Cloud::set_allocated_vehicle_id(::std::string* vehicle_id) {
  if (vehicle_id != NULL) {
    
  } else {
    
  }
  vehicle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicle_id);
  // @@protoc_insertion_point(field_set_allocated:c2v.proto.Vehicle2Cloud.vehicle_id)
}

// int32 cmd_sequence_num = 3;
inline void Vehicle2Cloud::clear_cmd_sequence_num() {
  cmd_sequence_num_ = 0;
}
inline ::google::protobuf::int32 Vehicle2Cloud::cmd_sequence_num() const {
  // @@protoc_insertion_point(field_get:c2v.proto.Vehicle2Cloud.cmd_sequence_num)
  return cmd_sequence_num_;
}
inline void Vehicle2Cloud::set_cmd_sequence_num(::google::protobuf::int32 value) {
  
  cmd_sequence_num_ = value;
  // @@protoc_insertion_point(field_set:c2v.proto.Vehicle2Cloud.cmd_sequence_num)
}

// int32 task_cmd = 4;
inline void Vehicle2Cloud::clear_task_cmd() {
  task_cmd_ = 0;
}
inline ::google::protobuf::int32 Vehicle2Cloud::task_cmd() const {
  // @@protoc_insertion_point(field_get:c2v.proto.Vehicle2Cloud.task_cmd)
  return task_cmd_;
}
inline void Vehicle2Cloud::set_task_cmd(::google::protobuf::int32 value) {
  
  task_cmd_ = value;
  // @@protoc_insertion_point(field_set:c2v.proto.Vehicle2Cloud.task_cmd)
}

// repeated .c2v.proto.Mission mission_points = 5;
inline int Vehicle2Cloud::mission_points_size() const {
  return mission_points_.size();
}
inline void Vehicle2Cloud::clear_mission_points() {
  mission_points_.Clear();
}
inline const ::c2v::proto::Mission& Vehicle2Cloud::mission_points(int index) const {
  // @@protoc_insertion_point(field_get:c2v.proto.Vehicle2Cloud.mission_points)
  return mission_points_.Get(index);
}
inline ::c2v::proto::Mission* Vehicle2Cloud::mutable_mission_points(int index) {
  // @@protoc_insertion_point(field_mutable:c2v.proto.Vehicle2Cloud.mission_points)
  return mission_points_.Mutable(index);
}
inline ::c2v::proto::Mission* Vehicle2Cloud::add_mission_points() {
  // @@protoc_insertion_point(field_add:c2v.proto.Vehicle2Cloud.mission_points)
  return mission_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::c2v::proto::Mission >*
Vehicle2Cloud::mutable_mission_points() {
  // @@protoc_insertion_point(field_mutable_list:c2v.proto.Vehicle2Cloud.mission_points)
  return &mission_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::c2v::proto::Mission >&
Vehicle2Cloud::mission_points() const {
  // @@protoc_insertion_point(field_list:c2v.proto.Vehicle2Cloud.mission_points)
  return mission_points_;
}

// repeated .c2v.proto.PathPoint forbidden_points = 6;
inline int Vehicle2Cloud::forbidden_points_size() const {
  return forbidden_points_.size();
}
inline void Vehicle2Cloud::clear_forbidden_points() {
  forbidden_points_.Clear();
}
inline const ::c2v::proto::PathPoint& Vehicle2Cloud::forbidden_points(int index) const {
  // @@protoc_insertion_point(field_get:c2v.proto.Vehicle2Cloud.forbidden_points)
  return forbidden_points_.Get(index);
}
inline ::c2v::proto::PathPoint* Vehicle2Cloud::mutable_forbidden_points(int index) {
  // @@protoc_insertion_point(field_mutable:c2v.proto.Vehicle2Cloud.forbidden_points)
  return forbidden_points_.Mutable(index);
}
inline ::c2v::proto::PathPoint* Vehicle2Cloud::add_forbidden_points() {
  // @@protoc_insertion_point(field_add:c2v.proto.Vehicle2Cloud.forbidden_points)
  return forbidden_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::c2v::proto::PathPoint >*
Vehicle2Cloud::mutable_forbidden_points() {
  // @@protoc_insertion_point(field_mutable_list:c2v.proto.Vehicle2Cloud.forbidden_points)
  return &forbidden_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::c2v::proto::PathPoint >&
Vehicle2Cloud::forbidden_points() const {
  // @@protoc_insertion_point(field_list:c2v.proto.Vehicle2Cloud.forbidden_points)
  return forbidden_points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace c2v

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Cloud2Vehicle_2eproto__INCLUDED
