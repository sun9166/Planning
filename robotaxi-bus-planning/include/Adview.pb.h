// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Adview.proto

#ifndef PROTOBUF_Adview_2eproto__INCLUDED
#define PROTOBUF_Adview_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Adview_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsHeaderImpl();
void InitDefaultsHeader();
void InitDefaultsTaskpointImpl();
void InitDefaultsTaskpoint();
void InitDefaultsAdviewCmdImpl();
void InitDefaultsAdviewCmd();
inline void InitDefaults() {
  InitDefaultsHeader();
  InitDefaultsTaskpoint();
  InitDefaultsAdviewCmd();
}
}  // namespace protobuf_Adview_2eproto
namespace Adview {
namespace proto {
class AdviewCmd;
class AdviewCmdDefaultTypeInternal;
extern AdviewCmdDefaultTypeInternal _AdviewCmd_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Taskpoint;
class TaskpointDefaultTypeInternal;
extern TaskpointDefaultTypeInternal _Taskpoint_default_instance_;
}  // namespace proto
}  // namespace Adview
namespace Adview {
namespace proto {

// ===================================================================

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Adview.proto.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const PROTOBUF_FINAL { return New(NULL); }

  Header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string module_name = 2;
  void clear_module_name();
  static const int kModuleNameFieldNumber = 2;
  const ::std::string& module_name() const;
  void set_module_name(const ::std::string& value);
  #if LANG_CXX11
  void set_module_name(::std::string&& value);
  #endif
  void set_module_name(const char* value);
  void set_module_name(const char* value, size_t size);
  ::std::string* mutable_module_name();
  ::std::string* release_module_name();
  void set_allocated_module_name(::std::string* module_name);

  // string version = 4;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // double timestamp_sec = 1;
  void clear_timestamp_sec();
  static const int kTimestampSecFieldNumber = 1;
  double timestamp_sec() const;
  void set_timestamp_sec(double value);

  // uint32 sequence_num = 3;
  void clear_sequence_num();
  static const int kSequenceNumFieldNumber = 3;
  ::google::protobuf::uint32 sequence_num() const;
  void set_sequence_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Adview.proto.Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr module_name_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  double timestamp_sec_;
  ::google::protobuf::uint32 sequence_num_;
  mutable int _cached_size_;
  friend struct ::protobuf_Adview_2eproto::TableStruct;
  friend void ::protobuf_Adview_2eproto::InitDefaultsHeaderImpl();
};
// -------------------------------------------------------------------

class Taskpoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Adview.proto.Taskpoint) */ {
 public:
  Taskpoint();
  virtual ~Taskpoint();

  Taskpoint(const Taskpoint& from);

  inline Taskpoint& operator=(const Taskpoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Taskpoint(Taskpoint&& from) noexcept
    : Taskpoint() {
    *this = ::std::move(from);
  }

  inline Taskpoint& operator=(Taskpoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Taskpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Taskpoint* internal_default_instance() {
    return reinterpret_cast<const Taskpoint*>(
               &_Taskpoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Taskpoint* other);
  friend void swap(Taskpoint& a, Taskpoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Taskpoint* New() const PROTOBUF_FINAL { return New(NULL); }

  Taskpoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Taskpoint& from);
  void MergeFrom(const Taskpoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Taskpoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double lon = 2;
  void clear_lon();
  static const int kLonFieldNumber = 2;
  double lon() const;
  void set_lon(double value);

  // int32 mission_id = 1;
  void clear_mission_id();
  static const int kMissionIdFieldNumber = 1;
  ::google::protobuf::int32 mission_id() const;
  void set_mission_id(::google::protobuf::int32 value);

  // float angle = 4;
  void clear_angle();
  static const int kAngleFieldNumber = 4;
  float angle() const;
  void set_angle(float value);

  // double lat = 3;
  void clear_lat();
  static const int kLatFieldNumber = 3;
  double lat() const;
  void set_lat(double value);

  // int32 taskpoint_type = 5;
  void clear_taskpoint_type();
  static const int kTaskpointTypeFieldNumber = 5;
  ::google::protobuf::int32 taskpoint_type() const;
  void set_taskpoint_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Adview.proto.Taskpoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double lon_;
  ::google::protobuf::int32 mission_id_;
  float angle_;
  double lat_;
  ::google::protobuf::int32 taskpoint_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_Adview_2eproto::TableStruct;
  friend void ::protobuf_Adview_2eproto::InitDefaultsTaskpointImpl();
};
// -------------------------------------------------------------------

class AdviewCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Adview.proto.AdviewCmd) */ {
 public:
  AdviewCmd();
  virtual ~AdviewCmd();

  AdviewCmd(const AdviewCmd& from);

  inline AdviewCmd& operator=(const AdviewCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdviewCmd(AdviewCmd&& from) noexcept
    : AdviewCmd() {
    *this = ::std::move(from);
  }

  inline AdviewCmd& operator=(AdviewCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdviewCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdviewCmd* internal_default_instance() {
    return reinterpret_cast<const AdviewCmd*>(
               &_AdviewCmd_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(AdviewCmd* other);
  friend void swap(AdviewCmd& a, AdviewCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdviewCmd* New() const PROTOBUF_FINAL { return New(NULL); }

  AdviewCmd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AdviewCmd& from);
  void MergeFrom(const AdviewCmd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AdviewCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Adview.proto.Taskpoint task_points = 4;
  int task_points_size() const;
  void clear_task_points();
  static const int kTaskPointsFieldNumber = 4;
  const ::Adview::proto::Taskpoint& task_points(int index) const;
  ::Adview::proto::Taskpoint* mutable_task_points(int index);
  ::Adview::proto::Taskpoint* add_task_points();
  ::google::protobuf::RepeatedPtrField< ::Adview::proto::Taskpoint >*
      mutable_task_points();
  const ::google::protobuf::RepeatedPtrField< ::Adview::proto::Taskpoint >&
      task_points() const;

  // .Adview.proto.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Adview::proto::Header& header() const;
  ::Adview::proto::Header* release_header();
  ::Adview::proto::Header* mutable_header();
  void set_allocated_header(::Adview::proto::Header* header);

  // int32 business_mode_req = 2;
  void clear_business_mode_req();
  static const int kBusinessModeReqFieldNumber = 2;
  ::google::protobuf::int32 business_mode_req() const;
  void set_business_mode_req(::google::protobuf::int32 value);

  // int32 task_cmd = 3;
  void clear_task_cmd();
  static const int kTaskCmdFieldNumber = 3;
  ::google::protobuf::int32 task_cmd() const;
  void set_task_cmd(::google::protobuf::int32 value);

  // int32 whether_stop_on_route = 5;
  void clear_whether_stop_on_route();
  static const int kWhetherStopOnRouteFieldNumber = 5;
  ::google::protobuf::int32 whether_stop_on_route() const;
  void set_whether_stop_on_route(::google::protobuf::int32 value);

  // int32 cycle_task = 6;
  void clear_cycle_task();
  static const int kCycleTaskFieldNumber = 6;
  ::google::protobuf::int32 cycle_task() const;
  void set_cycle_task(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Adview.proto.AdviewCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Adview::proto::Taskpoint > task_points_;
  ::Adview::proto::Header* header_;
  ::google::protobuf::int32 business_mode_req_;
  ::google::protobuf::int32 task_cmd_;
  ::google::protobuf::int32 whether_stop_on_route_;
  ::google::protobuf::int32 cycle_task_;
  mutable int _cached_size_;
  friend struct ::protobuf_Adview_2eproto::TableStruct;
  friend void ::protobuf_Adview_2eproto::InitDefaultsAdviewCmdImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// double timestamp_sec = 1;
inline void Header::clear_timestamp_sec() {
  timestamp_sec_ = 0;
}
inline double Header::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:Adview.proto.Header.timestamp_sec)
  return timestamp_sec_;
}
inline void Header::set_timestamp_sec(double value) {
  
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:Adview.proto.Header.timestamp_sec)
}

// string module_name = 2;
inline void Header::clear_module_name() {
  module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::module_name() const {
  // @@protoc_insertion_point(field_get:Adview.proto.Header.module_name)
  return module_name_.GetNoArena();
}
inline void Header::set_module_name(const ::std::string& value) {
  
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Adview.proto.Header.module_name)
}
#if LANG_CXX11
inline void Header::set_module_name(::std::string&& value) {
  
  module_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Adview.proto.Header.module_name)
}
#endif
inline void Header::set_module_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Adview.proto.Header.module_name)
}
inline void Header::set_module_name(const char* value, size_t size) {
  
  module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Adview.proto.Header.module_name)
}
inline ::std::string* Header::mutable_module_name() {
  
  // @@protoc_insertion_point(field_mutable:Adview.proto.Header.module_name)
  return module_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_module_name() {
  // @@protoc_insertion_point(field_release:Adview.proto.Header.module_name)
  
  return module_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_module_name(::std::string* module_name) {
  if (module_name != NULL) {
    
  } else {
    
  }
  module_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module_name);
  // @@protoc_insertion_point(field_set_allocated:Adview.proto.Header.module_name)
}

// uint32 sequence_num = 3;
inline void Header::clear_sequence_num() {
  sequence_num_ = 0u;
}
inline ::google::protobuf::uint32 Header::sequence_num() const {
  // @@protoc_insertion_point(field_get:Adview.proto.Header.sequence_num)
  return sequence_num_;
}
inline void Header::set_sequence_num(::google::protobuf::uint32 value) {
  
  sequence_num_ = value;
  // @@protoc_insertion_point(field_set:Adview.proto.Header.sequence_num)
}

// string version = 4;
inline void Header::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::version() const {
  // @@protoc_insertion_point(field_get:Adview.proto.Header.version)
  return version_.GetNoArena();
}
inline void Header::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Adview.proto.Header.version)
}
#if LANG_CXX11
inline void Header::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Adview.proto.Header.version)
}
#endif
inline void Header::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Adview.proto.Header.version)
}
inline void Header::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Adview.proto.Header.version)
}
inline ::std::string* Header::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:Adview.proto.Header.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_version() {
  // @@protoc_insertion_point(field_release:Adview.proto.Header.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:Adview.proto.Header.version)
}

// -------------------------------------------------------------------

// Taskpoint

// int32 mission_id = 1;
inline void Taskpoint::clear_mission_id() {
  mission_id_ = 0;
}
inline ::google::protobuf::int32 Taskpoint::mission_id() const {
  // @@protoc_insertion_point(field_get:Adview.proto.Taskpoint.mission_id)
  return mission_id_;
}
inline void Taskpoint::set_mission_id(::google::protobuf::int32 value) {
  
  mission_id_ = value;
  // @@protoc_insertion_point(field_set:Adview.proto.Taskpoint.mission_id)
}

// double lon = 2;
inline void Taskpoint::clear_lon() {
  lon_ = 0;
}
inline double Taskpoint::lon() const {
  // @@protoc_insertion_point(field_get:Adview.proto.Taskpoint.lon)
  return lon_;
}
inline void Taskpoint::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:Adview.proto.Taskpoint.lon)
}

// double lat = 3;
inline void Taskpoint::clear_lat() {
  lat_ = 0;
}
inline double Taskpoint::lat() const {
  // @@protoc_insertion_point(field_get:Adview.proto.Taskpoint.lat)
  return lat_;
}
inline void Taskpoint::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:Adview.proto.Taskpoint.lat)
}

// float angle = 4;
inline void Taskpoint::clear_angle() {
  angle_ = 0;
}
inline float Taskpoint::angle() const {
  // @@protoc_insertion_point(field_get:Adview.proto.Taskpoint.angle)
  return angle_;
}
inline void Taskpoint::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:Adview.proto.Taskpoint.angle)
}

// int32 taskpoint_type = 5;
inline void Taskpoint::clear_taskpoint_type() {
  taskpoint_type_ = 0;
}
inline ::google::protobuf::int32 Taskpoint::taskpoint_type() const {
  // @@protoc_insertion_point(field_get:Adview.proto.Taskpoint.taskpoint_type)
  return taskpoint_type_;
}
inline void Taskpoint::set_taskpoint_type(::google::protobuf::int32 value) {
  
  taskpoint_type_ = value;
  // @@protoc_insertion_point(field_set:Adview.proto.Taskpoint.taskpoint_type)
}

// -------------------------------------------------------------------

// AdviewCmd

// .Adview.proto.Header header = 1;
inline bool AdviewCmd::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void AdviewCmd::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::Adview::proto::Header& AdviewCmd::header() const {
  const ::Adview::proto::Header* p = header_;
  // @@protoc_insertion_point(field_get:Adview.proto.AdviewCmd.header)
  return p != NULL ? *p : *reinterpret_cast<const ::Adview::proto::Header*>(
      &::Adview::proto::_Header_default_instance_);
}
inline ::Adview::proto::Header* AdviewCmd::release_header() {
  // @@protoc_insertion_point(field_release:Adview.proto.AdviewCmd.header)
  
  ::Adview::proto::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::Adview::proto::Header* AdviewCmd::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::Adview::proto::Header;
  }
  // @@protoc_insertion_point(field_mutable:Adview.proto.AdviewCmd.header)
  return header_;
}
inline void AdviewCmd::set_allocated_header(::Adview::proto::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Adview.proto.AdviewCmd.header)
}

// int32 business_mode_req = 2;
inline void AdviewCmd::clear_business_mode_req() {
  business_mode_req_ = 0;
}
inline ::google::protobuf::int32 AdviewCmd::business_mode_req() const {
  // @@protoc_insertion_point(field_get:Adview.proto.AdviewCmd.business_mode_req)
  return business_mode_req_;
}
inline void AdviewCmd::set_business_mode_req(::google::protobuf::int32 value) {
  
  business_mode_req_ = value;
  // @@protoc_insertion_point(field_set:Adview.proto.AdviewCmd.business_mode_req)
}

// int32 task_cmd = 3;
inline void AdviewCmd::clear_task_cmd() {
  task_cmd_ = 0;
}
inline ::google::protobuf::int32 AdviewCmd::task_cmd() const {
  // @@protoc_insertion_point(field_get:Adview.proto.AdviewCmd.task_cmd)
  return task_cmd_;
}
inline void AdviewCmd::set_task_cmd(::google::protobuf::int32 value) {
  
  task_cmd_ = value;
  // @@protoc_insertion_point(field_set:Adview.proto.AdviewCmd.task_cmd)
}

// repeated .Adview.proto.Taskpoint task_points = 4;
inline int AdviewCmd::task_points_size() const {
  return task_points_.size();
}
inline void AdviewCmd::clear_task_points() {
  task_points_.Clear();
}
inline const ::Adview::proto::Taskpoint& AdviewCmd::task_points(int index) const {
  // @@protoc_insertion_point(field_get:Adview.proto.AdviewCmd.task_points)
  return task_points_.Get(index);
}
inline ::Adview::proto::Taskpoint* AdviewCmd::mutable_task_points(int index) {
  // @@protoc_insertion_point(field_mutable:Adview.proto.AdviewCmd.task_points)
  return task_points_.Mutable(index);
}
inline ::Adview::proto::Taskpoint* AdviewCmd::add_task_points() {
  // @@protoc_insertion_point(field_add:Adview.proto.AdviewCmd.task_points)
  return task_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Adview::proto::Taskpoint >*
AdviewCmd::mutable_task_points() {
  // @@protoc_insertion_point(field_mutable_list:Adview.proto.AdviewCmd.task_points)
  return &task_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Adview::proto::Taskpoint >&
AdviewCmd::task_points() const {
  // @@protoc_insertion_point(field_list:Adview.proto.AdviewCmd.task_points)
  return task_points_;
}

// int32 whether_stop_on_route = 5;
inline void AdviewCmd::clear_whether_stop_on_route() {
  whether_stop_on_route_ = 0;
}
inline ::google::protobuf::int32 AdviewCmd::whether_stop_on_route() const {
  // @@protoc_insertion_point(field_get:Adview.proto.AdviewCmd.whether_stop_on_route)
  return whether_stop_on_route_;
}
inline void AdviewCmd::set_whether_stop_on_route(::google::protobuf::int32 value) {
  
  whether_stop_on_route_ = value;
  // @@protoc_insertion_point(field_set:Adview.proto.AdviewCmd.whether_stop_on_route)
}

// int32 cycle_task = 6;
inline void AdviewCmd::clear_cycle_task() {
  cycle_task_ = 0;
}
inline ::google::protobuf::int32 AdviewCmd::cycle_task() const {
  // @@protoc_insertion_point(field_get:Adview.proto.AdviewCmd.cycle_task)
  return cycle_task_;
}
inline void AdviewCmd::set_cycle_task(::google::protobuf::int32 value) {
  
  cycle_task_ = value;
  // @@protoc_insertion_point(field_set:Adview.proto.AdviewCmd.cycle_task)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace Adview

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Adview_2eproto__INCLUDED
