// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_road.proto

#include "map_road.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace acu {
namespace hdmap {
class BoundaryEdgeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BoundaryEdge>
      _instance;
} _BoundaryEdge_default_instance_;
class BoundaryPolygonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BoundaryPolygon>
      _instance;
} _BoundaryPolygon_default_instance_;
class RoadBoundaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadBoundary>
      _instance;
} _RoadBoundary_default_instance_;
class RoadROIBoundaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadROIBoundary>
      _instance;
} _RoadROIBoundary_default_instance_;
class RoadSectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadSection>
      _instance;
} _RoadSection_default_instance_;
class RoadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Road>
      _instance;
} _Road_default_instance_;
}  // namespace hdmap
}  // namespace acu
namespace protobuf_map_5froad_2eproto {
void InitDefaultsBoundaryEdgeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_map_5fgeometry_2eproto::InitDefaultsCurve();
  {
    void* ptr = &::acu::hdmap::_BoundaryEdge_default_instance_;
    new (ptr) ::acu::hdmap::BoundaryEdge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::hdmap::BoundaryEdge::InitAsDefaultInstance();
}

void InitDefaultsBoundaryEdge() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBoundaryEdgeImpl);
}

void InitDefaultsBoundaryPolygonImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_map_5froad_2eproto::InitDefaultsBoundaryEdge();
  {
    void* ptr = &::acu::hdmap::_BoundaryPolygon_default_instance_;
    new (ptr) ::acu::hdmap::BoundaryPolygon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::hdmap::BoundaryPolygon::InitAsDefaultInstance();
}

void InitDefaultsBoundaryPolygon() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBoundaryPolygonImpl);
}

void InitDefaultsRoadBoundaryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_map_5froad_2eproto::InitDefaultsBoundaryPolygon();
  {
    void* ptr = &::acu::hdmap::_RoadBoundary_default_instance_;
    new (ptr) ::acu::hdmap::RoadBoundary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::hdmap::RoadBoundary::InitAsDefaultInstance();
}

void InitDefaultsRoadBoundary() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoadBoundaryImpl);
}

void InitDefaultsRoadROIBoundaryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_map_5fid_2eproto::InitDefaultsId();
  protobuf_map_5froad_2eproto::InitDefaultsRoadBoundary();
  {
    void* ptr = &::acu::hdmap::_RoadROIBoundary_default_instance_;
    new (ptr) ::acu::hdmap::RoadROIBoundary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::hdmap::RoadROIBoundary::InitAsDefaultInstance();
}

void InitDefaultsRoadROIBoundary() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoadROIBoundaryImpl);
}

void InitDefaultsRoadSectionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_map_5fid_2eproto::InitDefaultsId();
  protobuf_map_5froad_2eproto::InitDefaultsRoadBoundary();
  {
    void* ptr = &::acu::hdmap::_RoadSection_default_instance_;
    new (ptr) ::acu::hdmap::RoadSection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::hdmap::RoadSection::InitAsDefaultInstance();
}

void InitDefaultsRoadSection() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoadSectionImpl);
}

void InitDefaultsRoadImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_map_5fid_2eproto::InitDefaultsId();
  protobuf_map_5froad_2eproto::InitDefaultsRoadSection();
  {
    void* ptr = &::acu::hdmap::_Road_default_instance_;
    new (ptr) ::acu::hdmap::Road();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::hdmap::Road::InitAsDefaultInstance();
}

void InitDefaultsRoad() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoadImpl);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::BoundaryEdge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::BoundaryEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::BoundaryEdge, curve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::BoundaryEdge, type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::BoundaryPolygon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::BoundaryPolygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::BoundaryPolygon, edge_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadBoundary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadBoundary, outer_polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadBoundary, hole_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadROIBoundary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadROIBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadROIBoundary, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadROIBoundary, road_boundaries_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadSection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadSection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadSection, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadSection, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadSection, boundary_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Road, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Road, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Road, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Road, section_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Road, junction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Road, pitch_),
  0,
  ~0u,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::acu::hdmap::BoundaryEdge)},
  { 9, 15, sizeof(::acu::hdmap::BoundaryPolygon)},
  { 16, 23, sizeof(::acu::hdmap::RoadBoundary)},
  { 25, 32, sizeof(::acu::hdmap::RoadROIBoundary)},
  { 34, 42, sizeof(::acu::hdmap::RoadSection)},
  { 45, 54, sizeof(::acu::hdmap::Road)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::hdmap::_BoundaryEdge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::hdmap::_BoundaryPolygon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::hdmap::_RoadBoundary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::hdmap::_RoadROIBoundary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::hdmap::_RoadSection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::hdmap::_Road_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "map_road.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016map_road.proto\022\tacu.hdmap\032\022map_geometr"
      "y.proto\032\014map_id.proto\"\243\001\n\014BoundaryEdge\022\037"
      "\n\005curve\030\001 \001(\0132\020.acu.hdmap.Curve\022*\n\004type\030"
      "\002 \001(\0162\034.acu.hdmap.BoundaryEdge.Type\"F\n\004T"
      "ype\022\013\n\007UNKNOWN\020\000\022\n\n\006NORMAL\020\001\022\021\n\rLEFT_BOU"
      "NDARY\020\002\022\022\n\016RIGHT_BOUNDARY\020\003\"8\n\017BoundaryP"
      "olygon\022%\n\004edge\030\001 \003(\0132\027.acu.hdmap.Boundar"
      "yEdge\"k\n\014RoadBoundary\0221\n\router_polygon\030\001"
      " \001(\0132\032.acu.hdmap.BoundaryPolygon\022(\n\004hole"
      "\030\002 \003(\0132\032.acu.hdmap.BoundaryPolygon\"^\n\017Ro"
      "adROIBoundary\022\031\n\002id\030\001 \001(\0132\r.acu.hdmap.Id"
      "\0220\n\017road_boundaries\030\002 \003(\0132\027.acu.hdmap.Ro"
      "adBoundary\"s\n\013RoadSection\022\031\n\002id\030\001 \001(\0132\r."
      "acu.hdmap.Id\022\036\n\007lane_id\030\002 \003(\0132\r.acu.hdma"
      "p.Id\022)\n\010boundary\030\003 \001(\0132\027.acu.hdmap.RoadB"
      "oundary\"}\n\004Road\022\031\n\002id\030\001 \001(\0132\r.acu.hdmap."
      "Id\022\'\n\007section\030\002 \003(\0132\026.acu.hdmap.RoadSect"
      "ion\022\"\n\013junction_id\030\003 \001(\0132\r.acu.hdmap.Id\022"
      "\r\n\005pitch\030\004 \001(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 734);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map_road.proto", &protobuf_RegisterTypes);
  ::protobuf_map_5fgeometry_2eproto::AddDescriptors();
  ::protobuf_map_5fid_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_map_5froad_2eproto
namespace acu {
namespace hdmap {
const ::google::protobuf::EnumDescriptor* BoundaryEdge_Type_descriptor() {
  protobuf_map_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5froad_2eproto::file_level_enum_descriptors[0];
}
bool BoundaryEdge_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BoundaryEdge_Type BoundaryEdge::UNKNOWN;
const BoundaryEdge_Type BoundaryEdge::NORMAL;
const BoundaryEdge_Type BoundaryEdge::LEFT_BOUNDARY;
const BoundaryEdge_Type BoundaryEdge::RIGHT_BOUNDARY;
const BoundaryEdge_Type BoundaryEdge::Type_MIN;
const BoundaryEdge_Type BoundaryEdge::Type_MAX;
const int BoundaryEdge::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void BoundaryEdge::InitAsDefaultInstance() {
  ::acu::hdmap::_BoundaryEdge_default_instance_._instance.get_mutable()->curve_ = const_cast< ::acu::hdmap::Curve*>(
      ::acu::hdmap::Curve::internal_default_instance());
}
void BoundaryEdge::clear_curve() {
  if (curve_ != NULL) curve_->Clear();
  clear_has_curve();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundaryEdge::kCurveFieldNumber;
const int BoundaryEdge::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundaryEdge::BoundaryEdge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_map_5froad_2eproto::InitDefaultsBoundaryEdge();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.hdmap.BoundaryEdge)
}
BoundaryEdge::BoundaryEdge(const BoundaryEdge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_curve()) {
    curve_ = new ::acu::hdmap::Curve(*from.curve_);
  } else {
    curve_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:acu.hdmap.BoundaryEdge)
}

void BoundaryEdge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&curve_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&curve_)) + sizeof(type_));
}

BoundaryEdge::~BoundaryEdge() {
  // @@protoc_insertion_point(destructor:acu.hdmap.BoundaryEdge)
  SharedDtor();
}

void BoundaryEdge::SharedDtor() {
  if (this != internal_default_instance()) delete curve_;
}

void BoundaryEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundaryEdge::descriptor() {
  ::protobuf_map_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BoundaryEdge& BoundaryEdge::default_instance() {
  ::protobuf_map_5froad_2eproto::InitDefaultsBoundaryEdge();
  return *internal_default_instance();
}

BoundaryEdge* BoundaryEdge::New(::google::protobuf::Arena* arena) const {
  BoundaryEdge* n = new BoundaryEdge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoundaryEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.hdmap.BoundaryEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(curve_ != NULL);
    curve_->Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BoundaryEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.hdmap.BoundaryEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.hdmap.Curve curve = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.hdmap.BoundaryEdge.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::hdmap::BoundaryEdge_Type_IsValid(value)) {
            set_type(static_cast< ::acu::hdmap::BoundaryEdge_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.hdmap.BoundaryEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.hdmap.BoundaryEdge)
  return false;
#undef DO_
}

void BoundaryEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.hdmap.BoundaryEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.hdmap.Curve curve = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->curve_, output);
  }

  // optional .acu.hdmap.BoundaryEdge.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.hdmap.BoundaryEdge)
}

::google::protobuf::uint8* BoundaryEdge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.hdmap.BoundaryEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.hdmap.Curve curve = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->curve_, deterministic, target);
  }

  // optional .acu.hdmap.BoundaryEdge.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.hdmap.BoundaryEdge)
  return target;
}

size_t BoundaryEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.hdmap.BoundaryEdge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .acu.hdmap.Curve curve = 1;
    if (has_curve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->curve_);
    }

    // optional .acu.hdmap.BoundaryEdge.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundaryEdge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.hdmap.BoundaryEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundaryEdge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoundaryEdge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.hdmap.BoundaryEdge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.hdmap.BoundaryEdge)
    MergeFrom(*source);
  }
}

void BoundaryEdge::MergeFrom(const BoundaryEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.hdmap.BoundaryEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_curve()->::acu::hdmap::Curve::MergeFrom(from.curve());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BoundaryEdge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.hdmap.BoundaryEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryEdge::CopyFrom(const BoundaryEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.hdmap.BoundaryEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryEdge::IsInitialized() const {
  return true;
}

void BoundaryEdge::Swap(BoundaryEdge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundaryEdge::InternalSwap(BoundaryEdge* other) {
  using std::swap;
  swap(curve_, other->curve_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoundaryEdge::GetMetadata() const {
  protobuf_map_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BoundaryPolygon::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundaryPolygon::kEdgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundaryPolygon::BoundaryPolygon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_map_5froad_2eproto::InitDefaultsBoundaryPolygon();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.hdmap.BoundaryPolygon)
}
BoundaryPolygon::BoundaryPolygon(const BoundaryPolygon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      edge_(from.edge_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:acu.hdmap.BoundaryPolygon)
}

void BoundaryPolygon::SharedCtor() {
  _cached_size_ = 0;
}

BoundaryPolygon::~BoundaryPolygon() {
  // @@protoc_insertion_point(destructor:acu.hdmap.BoundaryPolygon)
  SharedDtor();
}

void BoundaryPolygon::SharedDtor() {
}

void BoundaryPolygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundaryPolygon::descriptor() {
  ::protobuf_map_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BoundaryPolygon& BoundaryPolygon::default_instance() {
  ::protobuf_map_5froad_2eproto::InitDefaultsBoundaryPolygon();
  return *internal_default_instance();
}

BoundaryPolygon* BoundaryPolygon::New(::google::protobuf::Arena* arena) const {
  BoundaryPolygon* n = new BoundaryPolygon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoundaryPolygon::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.hdmap.BoundaryPolygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edge_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BoundaryPolygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.hdmap.BoundaryPolygon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .acu.hdmap.BoundaryEdge edge = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_edge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.hdmap.BoundaryPolygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.hdmap.BoundaryPolygon)
  return false;
#undef DO_
}

void BoundaryPolygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.hdmap.BoundaryPolygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .acu.hdmap.BoundaryEdge edge = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edge_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->edge(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.hdmap.BoundaryPolygon)
}

::google::protobuf::uint8* BoundaryPolygon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.hdmap.BoundaryPolygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .acu.hdmap.BoundaryEdge edge = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edge_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->edge(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.hdmap.BoundaryPolygon)
  return target;
}

size_t BoundaryPolygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.hdmap.BoundaryPolygon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.hdmap.BoundaryEdge edge = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->edge_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->edge(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundaryPolygon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.hdmap.BoundaryPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundaryPolygon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoundaryPolygon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.hdmap.BoundaryPolygon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.hdmap.BoundaryPolygon)
    MergeFrom(*source);
  }
}

void BoundaryPolygon::MergeFrom(const BoundaryPolygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.hdmap.BoundaryPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edge_.MergeFrom(from.edge_);
}

void BoundaryPolygon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.hdmap.BoundaryPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryPolygon::CopyFrom(const BoundaryPolygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.hdmap.BoundaryPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryPolygon::IsInitialized() const {
  return true;
}

void BoundaryPolygon::Swap(BoundaryPolygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundaryPolygon::InternalSwap(BoundaryPolygon* other) {
  using std::swap;
  edge_.InternalSwap(&other->edge_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoundaryPolygon::GetMetadata() const {
  protobuf_map_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadBoundary::InitAsDefaultInstance() {
  ::acu::hdmap::_RoadBoundary_default_instance_._instance.get_mutable()->outer_polygon_ = const_cast< ::acu::hdmap::BoundaryPolygon*>(
      ::acu::hdmap::BoundaryPolygon::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadBoundary::kOuterPolygonFieldNumber;
const int RoadBoundary::kHoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadBoundary::RoadBoundary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_map_5froad_2eproto::InitDefaultsRoadBoundary();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.hdmap.RoadBoundary)
}
RoadBoundary::RoadBoundary(const RoadBoundary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      hole_(from.hole_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_outer_polygon()) {
    outer_polygon_ = new ::acu::hdmap::BoundaryPolygon(*from.outer_polygon_);
  } else {
    outer_polygon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:acu.hdmap.RoadBoundary)
}

void RoadBoundary::SharedCtor() {
  _cached_size_ = 0;
  outer_polygon_ = NULL;
}

RoadBoundary::~RoadBoundary() {
  // @@protoc_insertion_point(destructor:acu.hdmap.RoadBoundary)
  SharedDtor();
}

void RoadBoundary::SharedDtor() {
  if (this != internal_default_instance()) delete outer_polygon_;
}

void RoadBoundary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadBoundary::descriptor() {
  ::protobuf_map_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadBoundary& RoadBoundary::default_instance() {
  ::protobuf_map_5froad_2eproto::InitDefaultsRoadBoundary();
  return *internal_default_instance();
}

RoadBoundary* RoadBoundary::New(::google::protobuf::Arena* arena) const {
  RoadBoundary* n = new RoadBoundary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoadBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.hdmap.RoadBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hole_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(outer_polygon_ != NULL);
    outer_polygon_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoadBoundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.hdmap.RoadBoundary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.hdmap.BoundaryPolygon outer_polygon = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_outer_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.BoundaryPolygon hole = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_hole()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.hdmap.RoadBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.hdmap.RoadBoundary)
  return false;
#undef DO_
}

void RoadBoundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.hdmap.RoadBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.hdmap.BoundaryPolygon outer_polygon = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->outer_polygon_, output);
  }

  // repeated .acu.hdmap.BoundaryPolygon hole = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hole(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.hdmap.RoadBoundary)
}

::google::protobuf::uint8* RoadBoundary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.hdmap.RoadBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.hdmap.BoundaryPolygon outer_polygon = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->outer_polygon_, deterministic, target);
  }

  // repeated .acu.hdmap.BoundaryPolygon hole = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->hole(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.hdmap.RoadBoundary)
  return target;
}

size_t RoadBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.hdmap.RoadBoundary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.hdmap.BoundaryPolygon hole = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->hole_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hole(static_cast<int>(i)));
    }
  }

  // optional .acu.hdmap.BoundaryPolygon outer_polygon = 1;
  if (has_outer_polygon()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->outer_polygon_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadBoundary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.hdmap.RoadBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadBoundary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadBoundary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.hdmap.RoadBoundary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.hdmap.RoadBoundary)
    MergeFrom(*source);
  }
}

void RoadBoundary::MergeFrom(const RoadBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.hdmap.RoadBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hole_.MergeFrom(from.hole_);
  if (from.has_outer_polygon()) {
    mutable_outer_polygon()->::acu::hdmap::BoundaryPolygon::MergeFrom(from.outer_polygon());
  }
}

void RoadBoundary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.hdmap.RoadBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadBoundary::CopyFrom(const RoadBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.hdmap.RoadBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadBoundary::IsInitialized() const {
  return true;
}

void RoadBoundary::Swap(RoadBoundary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadBoundary::InternalSwap(RoadBoundary* other) {
  using std::swap;
  hole_.InternalSwap(&other->hole_);
  swap(outer_polygon_, other->outer_polygon_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoadBoundary::GetMetadata() const {
  protobuf_map_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadROIBoundary::InitAsDefaultInstance() {
  ::acu::hdmap::_RoadROIBoundary_default_instance_._instance.get_mutable()->id_ = const_cast< ::acu::hdmap::Id*>(
      ::acu::hdmap::Id::internal_default_instance());
}
void RoadROIBoundary::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadROIBoundary::kIdFieldNumber;
const int RoadROIBoundary::kRoadBoundariesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadROIBoundary::RoadROIBoundary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_map_5froad_2eproto::InitDefaultsRoadROIBoundary();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.hdmap.RoadROIBoundary)
}
RoadROIBoundary::RoadROIBoundary(const RoadROIBoundary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      road_boundaries_(from.road_boundaries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::acu::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:acu.hdmap.RoadROIBoundary)
}

void RoadROIBoundary::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
}

RoadROIBoundary::~RoadROIBoundary() {
  // @@protoc_insertion_point(destructor:acu.hdmap.RoadROIBoundary)
  SharedDtor();
}

void RoadROIBoundary::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void RoadROIBoundary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadROIBoundary::descriptor() {
  ::protobuf_map_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadROIBoundary& RoadROIBoundary::default_instance() {
  ::protobuf_map_5froad_2eproto::InitDefaultsRoadROIBoundary();
  return *internal_default_instance();
}

RoadROIBoundary* RoadROIBoundary::New(::google::protobuf::Arena* arena) const {
  RoadROIBoundary* n = new RoadROIBoundary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoadROIBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.hdmap.RoadROIBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_boundaries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_ != NULL);
    id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoadROIBoundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.hdmap.RoadROIBoundary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.RoadBoundary road_boundaries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_road_boundaries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.hdmap.RoadROIBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.hdmap.RoadROIBoundary)
  return false;
#undef DO_
}

void RoadROIBoundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.hdmap.RoadROIBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // repeated .acu.hdmap.RoadBoundary road_boundaries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_boundaries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->road_boundaries(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.hdmap.RoadROIBoundary)
}

::google::protobuf::uint8* RoadROIBoundary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.hdmap.RoadROIBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // repeated .acu.hdmap.RoadBoundary road_boundaries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_boundaries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->road_boundaries(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.hdmap.RoadROIBoundary)
  return target;
}

size_t RoadROIBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.hdmap.RoadROIBoundary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.hdmap.RoadBoundary road_boundaries = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->road_boundaries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road_boundaries(static_cast<int>(i)));
    }
  }

  // optional .acu.hdmap.Id id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadROIBoundary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.hdmap.RoadROIBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadROIBoundary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadROIBoundary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.hdmap.RoadROIBoundary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.hdmap.RoadROIBoundary)
    MergeFrom(*source);
  }
}

void RoadROIBoundary::MergeFrom(const RoadROIBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.hdmap.RoadROIBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_boundaries_.MergeFrom(from.road_boundaries_);
  if (from.has_id()) {
    mutable_id()->::acu::hdmap::Id::MergeFrom(from.id());
  }
}

void RoadROIBoundary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.hdmap.RoadROIBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadROIBoundary::CopyFrom(const RoadROIBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.hdmap.RoadROIBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadROIBoundary::IsInitialized() const {
  return true;
}

void RoadROIBoundary::Swap(RoadROIBoundary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadROIBoundary::InternalSwap(RoadROIBoundary* other) {
  using std::swap;
  road_boundaries_.InternalSwap(&other->road_boundaries_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoadROIBoundary::GetMetadata() const {
  protobuf_map_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadSection::InitAsDefaultInstance() {
  ::acu::hdmap::_RoadSection_default_instance_._instance.get_mutable()->id_ = const_cast< ::acu::hdmap::Id*>(
      ::acu::hdmap::Id::internal_default_instance());
  ::acu::hdmap::_RoadSection_default_instance_._instance.get_mutable()->boundary_ = const_cast< ::acu::hdmap::RoadBoundary*>(
      ::acu::hdmap::RoadBoundary::internal_default_instance());
}
void RoadSection::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
void RoadSection::clear_lane_id() {
  lane_id_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadSection::kIdFieldNumber;
const int RoadSection::kLaneIdFieldNumber;
const int RoadSection::kBoundaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadSection::RoadSection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_map_5froad_2eproto::InitDefaultsRoadSection();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.hdmap.RoadSection)
}
RoadSection::RoadSection(const RoadSection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lane_id_(from.lane_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::acu::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_boundary()) {
    boundary_ = new ::acu::hdmap::RoadBoundary(*from.boundary_);
  } else {
    boundary_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:acu.hdmap.RoadSection)
}

void RoadSection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boundary_) -
      reinterpret_cast<char*>(&id_)) + sizeof(boundary_));
}

RoadSection::~RoadSection() {
  // @@protoc_insertion_point(destructor:acu.hdmap.RoadSection)
  SharedDtor();
}

void RoadSection::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete boundary_;
}

void RoadSection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadSection::descriptor() {
  ::protobuf_map_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadSection& RoadSection::default_instance() {
  ::protobuf_map_5froad_2eproto::InitDefaultsRoadSection();
  return *internal_default_instance();
}

RoadSection* RoadSection::New(::google::protobuf::Arena* arena) const {
  RoadSection* n = new RoadSection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoadSection::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.hdmap.RoadSection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(boundary_ != NULL);
      boundary_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoadSection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.hdmap.RoadSection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.Id lane_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.hdmap.RoadBoundary boundary = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.hdmap.RoadSection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.hdmap.RoadSection)
  return false;
#undef DO_
}

void RoadSection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.hdmap.RoadSection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // repeated .acu.hdmap.Id lane_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lane_id(static_cast<int>(i)), output);
  }

  // optional .acu.hdmap.RoadBoundary boundary = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->boundary_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.hdmap.RoadSection)
}

::google::protobuf::uint8* RoadSection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.hdmap.RoadSection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // repeated .acu.hdmap.Id lane_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->lane_id(static_cast<int>(i)), deterministic, target);
  }

  // optional .acu.hdmap.RoadBoundary boundary = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->boundary_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.hdmap.RoadSection)
  return target;
}

size_t RoadSection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.hdmap.RoadSection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.hdmap.Id lane_id = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_id(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .acu.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->id_);
    }

    // optional .acu.hdmap.RoadBoundary boundary = 3;
    if (has_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->boundary_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadSection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.hdmap.RoadSection)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadSection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadSection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.hdmap.RoadSection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.hdmap.RoadSection)
    MergeFrom(*source);
  }
}

void RoadSection::MergeFrom(const RoadSection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.hdmap.RoadSection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_id_.MergeFrom(from.lane_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::acu::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_boundary()->::acu::hdmap::RoadBoundary::MergeFrom(from.boundary());
    }
  }
}

void RoadSection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.hdmap.RoadSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadSection::CopyFrom(const RoadSection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.hdmap.RoadSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSection::IsInitialized() const {
  return true;
}

void RoadSection::Swap(RoadSection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadSection::InternalSwap(RoadSection* other) {
  using std::swap;
  lane_id_.InternalSwap(&other->lane_id_);
  swap(id_, other->id_);
  swap(boundary_, other->boundary_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoadSection::GetMetadata() const {
  protobuf_map_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Road::InitAsDefaultInstance() {
  ::acu::hdmap::_Road_default_instance_._instance.get_mutable()->id_ = const_cast< ::acu::hdmap::Id*>(
      ::acu::hdmap::Id::internal_default_instance());
  ::acu::hdmap::_Road_default_instance_._instance.get_mutable()->junction_id_ = const_cast< ::acu::hdmap::Id*>(
      ::acu::hdmap::Id::internal_default_instance());
}
void Road::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
void Road::clear_junction_id() {
  if (junction_id_ != NULL) junction_id_->Clear();
  clear_has_junction_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Road::kIdFieldNumber;
const int Road::kSectionFieldNumber;
const int Road::kJunctionIdFieldNumber;
const int Road::kPitchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Road::Road()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_map_5froad_2eproto::InitDefaultsRoad();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.hdmap.Road)
}
Road::Road(const Road& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      section_(from.section_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::acu::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_junction_id()) {
    junction_id_ = new ::acu::hdmap::Id(*from.junction_id_);
  } else {
    junction_id_ = NULL;
  }
  pitch_ = from.pitch_;
  // @@protoc_insertion_point(copy_constructor:acu.hdmap.Road)
}

void Road::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_) -
      reinterpret_cast<char*>(&id_)) + sizeof(pitch_));
}

Road::~Road() {
  // @@protoc_insertion_point(destructor:acu.hdmap.Road)
  SharedDtor();
}

void Road::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete junction_id_;
}

void Road::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Road::descriptor() {
  ::protobuf_map_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Road& Road::default_instance() {
  ::protobuf_map_5froad_2eproto::InitDefaultsRoad();
  return *internal_default_instance();
}

Road* Road::New(::google::protobuf::Arena* arena) const {
  Road* n = new Road;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Road::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.hdmap.Road)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  section_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(junction_id_ != NULL);
      junction_id_->Clear();
    }
  }
  pitch_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Road::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.hdmap.Road)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.RoadSection section = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_section()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.hdmap.Id junction_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_junction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pitch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_pitch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.hdmap.Road)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.hdmap.Road)
  return false;
#undef DO_
}

void Road::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.hdmap.Road)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // repeated .acu.hdmap.RoadSection section = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->section_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->section(static_cast<int>(i)), output);
  }

  // optional .acu.hdmap.Id junction_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->junction_id_, output);
  }

  // optional double pitch = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pitch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.hdmap.Road)
}

::google::protobuf::uint8* Road::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.hdmap.Road)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // repeated .acu.hdmap.RoadSection section = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->section_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->section(static_cast<int>(i)), deterministic, target);
  }

  // optional .acu.hdmap.Id junction_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->junction_id_, deterministic, target);
  }

  // optional double pitch = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pitch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.hdmap.Road)
  return target;
}

size_t Road::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.hdmap.Road)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.hdmap.RoadSection section = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->section_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->section(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .acu.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->id_);
    }

    // optional .acu.hdmap.Id junction_id = 3;
    if (has_junction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->junction_id_);
    }

    // optional double pitch = 4;
    if (has_pitch()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Road::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.hdmap.Road)
  GOOGLE_DCHECK_NE(&from, this);
  const Road* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Road>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.hdmap.Road)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.hdmap.Road)
    MergeFrom(*source);
  }
}

void Road::MergeFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.hdmap.Road)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  section_.MergeFrom(from.section_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::acu::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_junction_id()->::acu::hdmap::Id::MergeFrom(from.junction_id());
    }
    if (cached_has_bits & 0x00000004u) {
      pitch_ = from.pitch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Road::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.hdmap.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Road::CopyFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.hdmap.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Road::IsInitialized() const {
  return true;
}

void Road::Swap(Road* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Road::InternalSwap(Road* other) {
  using std::swap;
  section_.InternalSwap(&other->section_);
  swap(id_, other->id_);
  swap(junction_id_, other->junction_id_);
  swap(pitch_, other->pitch_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Road::GetMetadata() const {
  protobuf_map_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace acu

// @@protoc_insertion_point(global_scope)
