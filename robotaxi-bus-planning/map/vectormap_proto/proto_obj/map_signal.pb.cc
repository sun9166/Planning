// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_signal.proto

#include "map_signal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace acu {
namespace hdmap {
class SubsignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Subsignal>
      _instance;
} _Subsignal_default_instance_;
class SignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signal>
      _instance;
} _Signal_default_instance_;
}  // namespace hdmap
}  // namespace acu
namespace protobuf_map_5fsignal_2eproto {
void InitDefaultsSubsignalImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_map_5fid_2eproto::InitDefaultsId();
  protobuf_geometry_2eproto::InitDefaultsPointENU();
  {
    void* ptr = &::acu::hdmap::_Subsignal_default_instance_;
    new (ptr) ::acu::hdmap::Subsignal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::hdmap::Subsignal::InitAsDefaultInstance();
}

void InitDefaultsSubsignal() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSubsignalImpl);
}

void InitDefaultsSignalImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_map_5fid_2eproto::InitDefaultsId();
  protobuf_map_5fgeometry_2eproto::InitDefaultsPolygon();
  protobuf_map_5fsignal_2eproto::InitDefaultsSubsignal();
  protobuf_map_5fgeometry_2eproto::InitDefaultsCurve();
  {
    void* ptr = &::acu::hdmap::_Signal_default_instance_;
    new (ptr) ::acu::hdmap::Signal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::hdmap::Signal::InitAsDefaultInstance();
}

void InitDefaultsSignal() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSignalImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Subsignal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Subsignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Subsignal, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Subsignal, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Subsignal, location_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Signal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Signal, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Signal, boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Signal, subsignal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Signal, overlap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Signal, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Signal, stop_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Signal, distance_),
  0,
  1,
  ~0u,
  ~0u,
  3,
  ~0u,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::acu::hdmap::Subsignal)},
  { 11, 23, sizeof(::acu::hdmap::Signal)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::hdmap::_Subsignal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::hdmap::_Signal_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "map_signal.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020map_signal.proto\022\tacu.hdmap\032\016geometry."
      "proto\032\022map_geometry.proto\032\014map_id.proto\""
      "\230\002\n\tSubsignal\022\031\n\002id\030\001 \001(\0132\r.acu.hdmap.Id"
      "\022\'\n\004type\030\002 \001(\0162\031.acu.hdmap.Subsignal.Typ"
      "e\022&\n\010location\030\003 \001(\0132\024.acu.common.PointEN"
      "U\"\236\001\n\004Type\022\013\n\007UNKNOWN\020\001\022\n\n\006CIRCLE\020\002\022\016\n\nA"
      "RROW_LEFT\020\003\022\021\n\rARROW_FORWARD\020\004\022\017\n\013ARROW_"
      "RIGHT\020\005\022\032\n\026ARROW_LEFT_AND_FORWARD\020\006\022\033\n\027A"
      "RROW_RIGHT_AND_FORWARD\020\007\022\020\n\014ARROW_U_TURN"
      "\020\010\"\347\002\n\006Signal\022\031\n\002id\030\001 \001(\0132\r.acu.hdmap.Id"
      "\022$\n\010boundary\030\002 \001(\0132\022.acu.hdmap.Polygon\022\'"
      "\n\tsubsignal\030\003 \003(\0132\024.acu.hdmap.Subsignal\022"
      "!\n\noverlap_id\030\004 \003(\0132\r.acu.hdmap.Id\022$\n\004ty"
      "pe\030\005 \001(\0162\026.acu.hdmap.Signal.Type\022#\n\tstop"
      "_line\030\006 \003(\0132\020.acu.hdmap.Curve\022\020\n\010distanc"
      "e\030\007 \001(\001\"s\n\004Type\022\013\n\007UNKNOWN\020\001\022\024\n\020MIX_2_HO"
      "RIZONTAL\020\002\022\022\n\016MIX_2_VERTICAL\020\003\022\024\n\020MIX_3_"
      "HORIZONTAL\020\004\022\022\n\016MIX_3_VERTICAL\020\005\022\n\n\006SING"
      "LE\020\006"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 724);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map_signal.proto", &protobuf_RegisterTypes);
  ::protobuf_geometry_2eproto::AddDescriptors();
  ::protobuf_map_5fgeometry_2eproto::AddDescriptors();
  ::protobuf_map_5fid_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_map_5fsignal_2eproto
namespace acu {
namespace hdmap {
const ::google::protobuf::EnumDescriptor* Subsignal_Type_descriptor() {
  protobuf_map_5fsignal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5fsignal_2eproto::file_level_enum_descriptors[0];
}
bool Subsignal_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Subsignal_Type Subsignal::UNKNOWN;
const Subsignal_Type Subsignal::CIRCLE;
const Subsignal_Type Subsignal::ARROW_LEFT;
const Subsignal_Type Subsignal::ARROW_FORWARD;
const Subsignal_Type Subsignal::ARROW_RIGHT;
const Subsignal_Type Subsignal::ARROW_LEFT_AND_FORWARD;
const Subsignal_Type Subsignal::ARROW_RIGHT_AND_FORWARD;
const Subsignal_Type Subsignal::ARROW_U_TURN;
const Subsignal_Type Subsignal::Type_MIN;
const Subsignal_Type Subsignal::Type_MAX;
const int Subsignal::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Signal_Type_descriptor() {
  protobuf_map_5fsignal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5fsignal_2eproto::file_level_enum_descriptors[1];
}
bool Signal_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_Type Signal::UNKNOWN;
const Signal_Type Signal::MIX_2_HORIZONTAL;
const Signal_Type Signal::MIX_2_VERTICAL;
const Signal_Type Signal::MIX_3_HORIZONTAL;
const Signal_Type Signal::MIX_3_VERTICAL;
const Signal_Type Signal::SINGLE;
const Signal_Type Signal::Type_MIN;
const Signal_Type Signal::Type_MAX;
const int Signal::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Subsignal::InitAsDefaultInstance() {
  ::acu::hdmap::_Subsignal_default_instance_._instance.get_mutable()->id_ = const_cast< ::acu::hdmap::Id*>(
      ::acu::hdmap::Id::internal_default_instance());
  ::acu::hdmap::_Subsignal_default_instance_._instance.get_mutable()->location_ = const_cast< ::acu::common::PointENU*>(
      ::acu::common::PointENU::internal_default_instance());
}
void Subsignal::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
void Subsignal::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Subsignal::kIdFieldNumber;
const int Subsignal::kTypeFieldNumber;
const int Subsignal::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Subsignal::Subsignal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_map_5fsignal_2eproto::InitDefaultsSubsignal();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.hdmap.Subsignal)
}
Subsignal::Subsignal(const Subsignal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::acu::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_location()) {
    location_ = new ::acu::common::PointENU(*from.location_);
  } else {
    location_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:acu.hdmap.Subsignal)
}

void Subsignal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_) -
      reinterpret_cast<char*>(&id_)) + sizeof(location_));
  type_ = 1;
}

Subsignal::~Subsignal() {
  // @@protoc_insertion_point(destructor:acu.hdmap.Subsignal)
  SharedDtor();
}

void Subsignal::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete location_;
}

void Subsignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Subsignal::descriptor() {
  ::protobuf_map_5fsignal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fsignal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Subsignal& Subsignal::default_instance() {
  ::protobuf_map_5fsignal_2eproto::InitDefaultsSubsignal();
  return *internal_default_instance();
}

Subsignal* Subsignal::New(::google::protobuf::Arena* arena) const {
  Subsignal* n = new Subsignal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Subsignal::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.hdmap.Subsignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Subsignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.hdmap.Subsignal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.hdmap.Subsignal.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::hdmap::Subsignal_Type_IsValid(value)) {
            set_type(static_cast< ::acu::hdmap::Subsignal_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.PointENU location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.hdmap.Subsignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.hdmap.Subsignal)
  return false;
#undef DO_
}

void Subsignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.hdmap.Subsignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .acu.hdmap.Subsignal.Type type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .acu.common.PointENU location = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.hdmap.Subsignal)
}

::google::protobuf::uint8* Subsignal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.hdmap.Subsignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // optional .acu.hdmap.Subsignal.Type type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .acu.common.PointENU location = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->location_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.hdmap.Subsignal)
  return target;
}

size_t Subsignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.hdmap.Subsignal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .acu.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->id_);
    }

    // optional .acu.common.PointENU location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->location_);
    }

    // optional .acu.hdmap.Subsignal.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Subsignal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.hdmap.Subsignal)
  GOOGLE_DCHECK_NE(&from, this);
  const Subsignal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Subsignal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.hdmap.Subsignal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.hdmap.Subsignal)
    MergeFrom(*source);
  }
}

void Subsignal::MergeFrom(const Subsignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.hdmap.Subsignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::acu::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_location()->::acu::common::PointENU::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Subsignal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.hdmap.Subsignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subsignal::CopyFrom(const Subsignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.hdmap.Subsignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subsignal::IsInitialized() const {
  return true;
}

void Subsignal::Swap(Subsignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Subsignal::InternalSwap(Subsignal* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(location_, other->location_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Subsignal::GetMetadata() const {
  protobuf_map_5fsignal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fsignal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Signal::InitAsDefaultInstance() {
  ::acu::hdmap::_Signal_default_instance_._instance.get_mutable()->id_ = const_cast< ::acu::hdmap::Id*>(
      ::acu::hdmap::Id::internal_default_instance());
  ::acu::hdmap::_Signal_default_instance_._instance.get_mutable()->boundary_ = const_cast< ::acu::hdmap::Polygon*>(
      ::acu::hdmap::Polygon::internal_default_instance());
}
void Signal::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
void Signal::clear_boundary() {
  if (boundary_ != NULL) boundary_->Clear();
  clear_has_boundary();
}
void Signal::clear_overlap_id() {
  overlap_id_.Clear();
}
void Signal::clear_stop_line() {
  stop_line_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal::kIdFieldNumber;
const int Signal::kBoundaryFieldNumber;
const int Signal::kSubsignalFieldNumber;
const int Signal::kOverlapIdFieldNumber;
const int Signal::kTypeFieldNumber;
const int Signal::kStopLineFieldNumber;
const int Signal::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal::Signal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_map_5fsignal_2eproto::InitDefaultsSignal();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.hdmap.Signal)
}
Signal::Signal(const Signal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      subsignal_(from.subsignal_),
      overlap_id_(from.overlap_id_),
      stop_line_(from.stop_line_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::acu::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_boundary()) {
    boundary_ = new ::acu::hdmap::Polygon(*from.boundary_);
  } else {
    boundary_ = NULL;
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:acu.hdmap.Signal)
}

void Signal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&id_)) + sizeof(distance_));
  type_ = 1;
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:acu.hdmap.Signal)
  SharedDtor();
}

void Signal::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete boundary_;
}

void Signal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signal::descriptor() {
  ::protobuf_map_5fsignal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fsignal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Signal& Signal::default_instance() {
  ::protobuf_map_5fsignal_2eproto::InitDefaultsSignal();
  return *internal_default_instance();
}

Signal* Signal::New(::google::protobuf::Arena* arena) const {
  Signal* n = new Signal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.hdmap.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subsignal_.Clear();
  overlap_id_.Clear();
  stop_line_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(boundary_ != NULL);
      boundary_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    distance_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.hdmap.Signal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.hdmap.Polygon boundary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.Subsignal subsignal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_subsignal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.Id overlap_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_overlap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.hdmap.Signal.Type type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::hdmap::Signal_Type_IsValid(value)) {
            set_type(static_cast< ::acu::hdmap::Signal_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.Curve stop_line = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_stop_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.hdmap.Signal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.hdmap.Signal)
  return false;
#undef DO_
}

void Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.hdmap.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .acu.hdmap.Polygon boundary = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->boundary_, output);
  }

  // repeated .acu.hdmap.Subsignal subsignal = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subsignal_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->subsignal(static_cast<int>(i)), output);
  }

  // repeated .acu.hdmap.Id overlap_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overlap_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->overlap_id(static_cast<int>(i)), output);
  }

  // optional .acu.hdmap.Signal.Type type = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // repeated .acu.hdmap.Curve stop_line = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stop_line_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stop_line(static_cast<int>(i)), output);
  }

  // optional double distance = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.hdmap.Signal)
}

::google::protobuf::uint8* Signal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.hdmap.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // optional .acu.hdmap.Polygon boundary = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->boundary_, deterministic, target);
  }

  // repeated .acu.hdmap.Subsignal subsignal = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subsignal_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->subsignal(static_cast<int>(i)), deterministic, target);
  }

  // repeated .acu.hdmap.Id overlap_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overlap_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->overlap_id(static_cast<int>(i)), deterministic, target);
  }

  // optional .acu.hdmap.Signal.Type type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // repeated .acu.hdmap.Curve stop_line = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stop_line_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->stop_line(static_cast<int>(i)), deterministic, target);
  }

  // optional double distance = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.hdmap.Signal)
  return target;
}

size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.hdmap.Signal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.hdmap.Subsignal subsignal = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->subsignal_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->subsignal(static_cast<int>(i)));
    }
  }

  // repeated .acu.hdmap.Id overlap_id = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->overlap_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->overlap_id(static_cast<int>(i)));
    }
  }

  // repeated .acu.hdmap.Curve stop_line = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->stop_line_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stop_line(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .acu.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->id_);
    }

    // optional .acu.hdmap.Polygon boundary = 2;
    if (has_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->boundary_);
    }

    // optional double distance = 7;
    if (has_distance()) {
      total_size += 1 + 8;
    }

    // optional .acu.hdmap.Signal.Type type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.hdmap.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.hdmap.Signal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.hdmap.Signal)
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.hdmap.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subsignal_.MergeFrom(from.subsignal_);
  overlap_id_.MergeFrom(from.overlap_id_);
  stop_line_.MergeFrom(from.stop_line_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::acu::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_boundary()->::acu::hdmap::Polygon::MergeFrom(from.boundary());
    }
    if (cached_has_bits & 0x00000004u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Signal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.hdmap.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.hdmap.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  return true;
}

void Signal::Swap(Signal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal::InternalSwap(Signal* other) {
  using std::swap;
  subsignal_.InternalSwap(&other->subsignal_);
  overlap_id_.InternalSwap(&other->overlap_id_);
  stop_line_.InternalSwap(&other->stop_line_);
  swap(id_, other->id_);
  swap(boundary_, other->boundary_);
  swap(distance_, other->distance_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Signal::GetMetadata() const {
  protobuf_map_5fsignal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5fsignal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace acu

// @@protoc_insertion_point(global_scope)
