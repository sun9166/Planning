// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_roadnet.proto

#ifndef PROTOBUF_map_5froadnet_2eproto__INCLUDED
#define PROTOBUF_map_5froadnet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "map_id.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_map_5froadnet_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRoadNodeImpl();
void InitDefaultsRoadNode();
void InitDefaultsRoadnetImpl();
void InitDefaultsRoadnet();
inline void InitDefaults() {
  InitDefaultsRoadNode();
  InitDefaultsRoadnet();
}
}  // namespace protobuf_map_5froadnet_2eproto
namespace acu {
namespace hdmap {
class RoadNode;
class RoadNodeDefaultTypeInternal;
extern RoadNodeDefaultTypeInternal _RoadNode_default_instance_;
class Roadnet;
class RoadnetDefaultTypeInternal;
extern RoadnetDefaultTypeInternal _Roadnet_default_instance_;
}  // namespace hdmap
}  // namespace acu
namespace acu {
namespace hdmap {

enum RoadNode_RoadTurn {
  RoadNode_RoadTurn_NO_TURN = 1,
  RoadNode_RoadTurn_LEFT_TURN = 2,
  RoadNode_RoadTurn_RIGHT_TURN = 3,
  RoadNode_RoadTurn_U_TURN = 4
};
bool RoadNode_RoadTurn_IsValid(int value);
const RoadNode_RoadTurn RoadNode_RoadTurn_RoadTurn_MIN = RoadNode_RoadTurn_NO_TURN;
const RoadNode_RoadTurn RoadNode_RoadTurn_RoadTurn_MAX = RoadNode_RoadTurn_U_TURN;
const int RoadNode_RoadTurn_RoadTurn_ARRAYSIZE = RoadNode_RoadTurn_RoadTurn_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoadNode_RoadTurn_descriptor();
inline const ::std::string& RoadNode_RoadTurn_Name(RoadNode_RoadTurn value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoadNode_RoadTurn_descriptor(), value);
}
inline bool RoadNode_RoadTurn_Parse(
    const ::std::string& name, RoadNode_RoadTurn* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoadNode_RoadTurn>(
    RoadNode_RoadTurn_descriptor(), name, value);
}
// ===================================================================

class RoadNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:acu.hdmap.RoadNode) */ {
 public:
  RoadNode();
  virtual ~RoadNode();

  RoadNode(const RoadNode& from);

  inline RoadNode& operator=(const RoadNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoadNode(RoadNode&& from) noexcept
    : RoadNode() {
    *this = ::std::move(from);
  }

  inline RoadNode& operator=(RoadNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoadNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoadNode* internal_default_instance() {
    return reinterpret_cast<const RoadNode*>(
               &_RoadNode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RoadNode* other);
  friend void swap(RoadNode& a, RoadNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoadNode* New() const PROTOBUF_FINAL { return New(NULL); }

  RoadNode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoadNode& from);
  void MergeFrom(const RoadNode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoadNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RoadNode_RoadTurn RoadTurn;
  static const RoadTurn NO_TURN =
    RoadNode_RoadTurn_NO_TURN;
  static const RoadTurn LEFT_TURN =
    RoadNode_RoadTurn_LEFT_TURN;
  static const RoadTurn RIGHT_TURN =
    RoadNode_RoadTurn_RIGHT_TURN;
  static const RoadTurn U_TURN =
    RoadNode_RoadTurn_U_TURN;
  static inline bool RoadTurn_IsValid(int value) {
    return RoadNode_RoadTurn_IsValid(value);
  }
  static const RoadTurn RoadTurn_MIN =
    RoadNode_RoadTurn_RoadTurn_MIN;
  static const RoadTurn RoadTurn_MAX =
    RoadNode_RoadTurn_RoadTurn_MAX;
  static const int RoadTurn_ARRAYSIZE =
    RoadNode_RoadTurn_RoadTurn_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RoadTurn_descriptor() {
    return RoadNode_RoadTurn_descriptor();
  }
  static inline const ::std::string& RoadTurn_Name(RoadTurn value) {
    return RoadNode_RoadTurn_Name(value);
  }
  static inline bool RoadTurn_Parse(const ::std::string& name,
      RoadTurn* value) {
    return RoadNode_RoadTurn_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .acu.hdmap.Id successor_id = 5;
  int successor_id_size() const;
  void clear_successor_id();
  static const int kSuccessorIdFieldNumber = 5;
  const ::acu::hdmap::Id& successor_id(int index) const;
  ::acu::hdmap::Id* mutable_successor_id(int index);
  ::acu::hdmap::Id* add_successor_id();
  ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Id >*
      mutable_successor_id();
  const ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Id >&
      successor_id() const;

  // repeated .acu.hdmap.Id predecessor_id = 6;
  int predecessor_id_size() const;
  void clear_predecessor_id();
  static const int kPredecessorIdFieldNumber = 6;
  const ::acu::hdmap::Id& predecessor_id(int index) const;
  ::acu::hdmap::Id* mutable_predecessor_id(int index);
  ::acu::hdmap::Id* add_predecessor_id();
  ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Id >*
      mutable_predecessor_id();
  const ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Id >&
      predecessor_id() const;

  // optional .acu.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::acu::hdmap::Id& id() const;
  ::acu::hdmap::Id* release_id();
  ::acu::hdmap::Id* mutable_id();
  void set_allocated_id(::acu::hdmap::Id* id);

  // optional double length = 2;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  double length() const;
  void set_length(double value);

  // optional double speed_limit = 3;
  bool has_speed_limit() const;
  void clear_speed_limit();
  static const int kSpeedLimitFieldNumber = 3;
  double speed_limit() const;
  void set_speed_limit(double value);

  // optional .acu.hdmap.RoadNode.RoadTurn turn = 4;
  bool has_turn() const;
  void clear_turn();
  static const int kTurnFieldNumber = 4;
  ::acu::hdmap::RoadNode_RoadTurn turn() const;
  void set_turn(::acu::hdmap::RoadNode_RoadTurn value);

  // @@protoc_insertion_point(class_scope:acu.hdmap.RoadNode)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_length();
  void clear_has_length();
  void set_has_speed_limit();
  void clear_has_speed_limit();
  void set_has_turn();
  void clear_has_turn();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Id > successor_id_;
  ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Id > predecessor_id_;
  ::acu::hdmap::Id* id_;
  double length_;
  double speed_limit_;
  int turn_;
  friend struct ::protobuf_map_5froadnet_2eproto::TableStruct;
  friend void ::protobuf_map_5froadnet_2eproto::InitDefaultsRoadNodeImpl();
};
// -------------------------------------------------------------------

class Roadnet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:acu.hdmap.Roadnet) */ {
 public:
  Roadnet();
  virtual ~Roadnet();

  Roadnet(const Roadnet& from);

  inline Roadnet& operator=(const Roadnet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Roadnet(Roadnet&& from) noexcept
    : Roadnet() {
    *this = ::std::move(from);
  }

  inline Roadnet& operator=(Roadnet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Roadnet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Roadnet* internal_default_instance() {
    return reinterpret_cast<const Roadnet*>(
               &_Roadnet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Roadnet* other);
  friend void swap(Roadnet& a, Roadnet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Roadnet* New() const PROTOBUF_FINAL { return New(NULL); }

  Roadnet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Roadnet& from);
  void MergeFrom(const Roadnet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Roadnet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .acu.hdmap.RoadNode road_node = 1;
  int road_node_size() const;
  void clear_road_node();
  static const int kRoadNodeFieldNumber = 1;
  const ::acu::hdmap::RoadNode& road_node(int index) const;
  ::acu::hdmap::RoadNode* mutable_road_node(int index);
  ::acu::hdmap::RoadNode* add_road_node();
  ::google::protobuf::RepeatedPtrField< ::acu::hdmap::RoadNode >*
      mutable_road_node();
  const ::google::protobuf::RepeatedPtrField< ::acu::hdmap::RoadNode >&
      road_node() const;

  // @@protoc_insertion_point(class_scope:acu.hdmap.Roadnet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::acu::hdmap::RoadNode > road_node_;
  friend struct ::protobuf_map_5froadnet_2eproto::TableStruct;
  friend void ::protobuf_map_5froadnet_2eproto::InitDefaultsRoadnetImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoadNode

// optional .acu.hdmap.Id id = 1;
inline bool RoadNode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoadNode::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoadNode::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::acu::hdmap::Id& RoadNode::id() const {
  const ::acu::hdmap::Id* p = id_;
  // @@protoc_insertion_point(field_get:acu.hdmap.RoadNode.id)
  return p != NULL ? *p : *reinterpret_cast<const ::acu::hdmap::Id*>(
      &::acu::hdmap::_Id_default_instance_);
}
inline ::acu::hdmap::Id* RoadNode::release_id() {
  // @@protoc_insertion_point(field_release:acu.hdmap.RoadNode.id)
  clear_has_id();
  ::acu::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::acu::hdmap::Id* RoadNode::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::acu::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:acu.hdmap.RoadNode.id)
  return id_;
}
inline void RoadNode::set_allocated_id(::acu::hdmap::Id* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
  } else {
    clear_has_id();
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:acu.hdmap.RoadNode.id)
}

// optional double length = 2;
inline bool RoadNode::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoadNode::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoadNode::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoadNode::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double RoadNode::length() const {
  // @@protoc_insertion_point(field_get:acu.hdmap.RoadNode.length)
  return length_;
}
inline void RoadNode::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:acu.hdmap.RoadNode.length)
}

// optional double speed_limit = 3;
inline bool RoadNode::has_speed_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoadNode::set_has_speed_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoadNode::clear_has_speed_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoadNode::clear_speed_limit() {
  speed_limit_ = 0;
  clear_has_speed_limit();
}
inline double RoadNode::speed_limit() const {
  // @@protoc_insertion_point(field_get:acu.hdmap.RoadNode.speed_limit)
  return speed_limit_;
}
inline void RoadNode::set_speed_limit(double value) {
  set_has_speed_limit();
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:acu.hdmap.RoadNode.speed_limit)
}

// optional .acu.hdmap.RoadNode.RoadTurn turn = 4;
inline bool RoadNode::has_turn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoadNode::set_has_turn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoadNode::clear_has_turn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoadNode::clear_turn() {
  turn_ = 1;
  clear_has_turn();
}
inline ::acu::hdmap::RoadNode_RoadTurn RoadNode::turn() const {
  // @@protoc_insertion_point(field_get:acu.hdmap.RoadNode.turn)
  return static_cast< ::acu::hdmap::RoadNode_RoadTurn >(turn_);
}
inline void RoadNode::set_turn(::acu::hdmap::RoadNode_RoadTurn value) {
  assert(::acu::hdmap::RoadNode_RoadTurn_IsValid(value));
  set_has_turn();
  turn_ = value;
  // @@protoc_insertion_point(field_set:acu.hdmap.RoadNode.turn)
}

// repeated .acu.hdmap.Id successor_id = 5;
inline int RoadNode::successor_id_size() const {
  return successor_id_.size();
}
inline const ::acu::hdmap::Id& RoadNode::successor_id(int index) const {
  // @@protoc_insertion_point(field_get:acu.hdmap.RoadNode.successor_id)
  return successor_id_.Get(index);
}
inline ::acu::hdmap::Id* RoadNode::mutable_successor_id(int index) {
  // @@protoc_insertion_point(field_mutable:acu.hdmap.RoadNode.successor_id)
  return successor_id_.Mutable(index);
}
inline ::acu::hdmap::Id* RoadNode::add_successor_id() {
  // @@protoc_insertion_point(field_add:acu.hdmap.RoadNode.successor_id)
  return successor_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Id >*
RoadNode::mutable_successor_id() {
  // @@protoc_insertion_point(field_mutable_list:acu.hdmap.RoadNode.successor_id)
  return &successor_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Id >&
RoadNode::successor_id() const {
  // @@protoc_insertion_point(field_list:acu.hdmap.RoadNode.successor_id)
  return successor_id_;
}

// repeated .acu.hdmap.Id predecessor_id = 6;
inline int RoadNode::predecessor_id_size() const {
  return predecessor_id_.size();
}
inline const ::acu::hdmap::Id& RoadNode::predecessor_id(int index) const {
  // @@protoc_insertion_point(field_get:acu.hdmap.RoadNode.predecessor_id)
  return predecessor_id_.Get(index);
}
inline ::acu::hdmap::Id* RoadNode::mutable_predecessor_id(int index) {
  // @@protoc_insertion_point(field_mutable:acu.hdmap.RoadNode.predecessor_id)
  return predecessor_id_.Mutable(index);
}
inline ::acu::hdmap::Id* RoadNode::add_predecessor_id() {
  // @@protoc_insertion_point(field_add:acu.hdmap.RoadNode.predecessor_id)
  return predecessor_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Id >*
RoadNode::mutable_predecessor_id() {
  // @@protoc_insertion_point(field_mutable_list:acu.hdmap.RoadNode.predecessor_id)
  return &predecessor_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Id >&
RoadNode::predecessor_id() const {
  // @@protoc_insertion_point(field_list:acu.hdmap.RoadNode.predecessor_id)
  return predecessor_id_;
}

// -------------------------------------------------------------------

// Roadnet

// repeated .acu.hdmap.RoadNode road_node = 1;
inline int Roadnet::road_node_size() const {
  return road_node_.size();
}
inline void Roadnet::clear_road_node() {
  road_node_.Clear();
}
inline const ::acu::hdmap::RoadNode& Roadnet::road_node(int index) const {
  // @@protoc_insertion_point(field_get:acu.hdmap.Roadnet.road_node)
  return road_node_.Get(index);
}
inline ::acu::hdmap::RoadNode* Roadnet::mutable_road_node(int index) {
  // @@protoc_insertion_point(field_mutable:acu.hdmap.Roadnet.road_node)
  return road_node_.Mutable(index);
}
inline ::acu::hdmap::RoadNode* Roadnet::add_road_node() {
  // @@protoc_insertion_point(field_add:acu.hdmap.Roadnet.road_node)
  return road_node_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::acu::hdmap::RoadNode >*
Roadnet::mutable_road_node() {
  // @@protoc_insertion_point(field_mutable_list:acu.hdmap.Roadnet.road_node)
  return &road_node_;
}
inline const ::google::protobuf::RepeatedPtrField< ::acu::hdmap::RoadNode >&
Roadnet::road_node() const {
  // @@protoc_insertion_point(field_list:acu.hdmap.Roadnet.road_node)
  return road_node_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace acu

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::acu::hdmap::RoadNode_RoadTurn> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::acu::hdmap::RoadNode_RoadTurn>() {
  return ::acu::hdmap::RoadNode_RoadTurn_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_map_5froadnet_2eproto__INCLUDED
