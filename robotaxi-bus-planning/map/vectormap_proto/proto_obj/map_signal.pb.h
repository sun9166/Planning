// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_signal.proto

#ifndef PROTOBUF_map_5fsignal_2eproto__INCLUDED
#define PROTOBUF_map_5fsignal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "geometry.pb.h"
#include "map_geometry.pb.h"
#include "map_id.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_map_5fsignal_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSubsignalImpl();
void InitDefaultsSubsignal();
void InitDefaultsSignalImpl();
void InitDefaultsSignal();
inline void InitDefaults() {
  InitDefaultsSubsignal();
  InitDefaultsSignal();
}
}  // namespace protobuf_map_5fsignal_2eproto
namespace acu {
namespace hdmap {
class Signal;
class SignalDefaultTypeInternal;
extern SignalDefaultTypeInternal _Signal_default_instance_;
class Subsignal;
class SubsignalDefaultTypeInternal;
extern SubsignalDefaultTypeInternal _Subsignal_default_instance_;
}  // namespace hdmap
}  // namespace acu
namespace acu {
namespace hdmap {

enum Subsignal_Type {
  Subsignal_Type_UNKNOWN = 1,
  Subsignal_Type_CIRCLE = 2,
  Subsignal_Type_ARROW_LEFT = 3,
  Subsignal_Type_ARROW_FORWARD = 4,
  Subsignal_Type_ARROW_RIGHT = 5,
  Subsignal_Type_ARROW_LEFT_AND_FORWARD = 6,
  Subsignal_Type_ARROW_RIGHT_AND_FORWARD = 7,
  Subsignal_Type_ARROW_U_TURN = 8
};
bool Subsignal_Type_IsValid(int value);
const Subsignal_Type Subsignal_Type_Type_MIN = Subsignal_Type_UNKNOWN;
const Subsignal_Type Subsignal_Type_Type_MAX = Subsignal_Type_ARROW_U_TURN;
const int Subsignal_Type_Type_ARRAYSIZE = Subsignal_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Subsignal_Type_descriptor();
inline const ::std::string& Subsignal_Type_Name(Subsignal_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Subsignal_Type_descriptor(), value);
}
inline bool Subsignal_Type_Parse(
    const ::std::string& name, Subsignal_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Subsignal_Type>(
    Subsignal_Type_descriptor(), name, value);
}
enum Signal_Type {
  Signal_Type_UNKNOWN = 1,
  Signal_Type_MIX_2_HORIZONTAL = 2,
  Signal_Type_MIX_2_VERTICAL = 3,
  Signal_Type_MIX_3_HORIZONTAL = 4,
  Signal_Type_MIX_3_VERTICAL = 5,
  Signal_Type_SINGLE = 6
};
bool Signal_Type_IsValid(int value);
const Signal_Type Signal_Type_Type_MIN = Signal_Type_UNKNOWN;
const Signal_Type Signal_Type_Type_MAX = Signal_Type_SINGLE;
const int Signal_Type_Type_ARRAYSIZE = Signal_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Signal_Type_descriptor();
inline const ::std::string& Signal_Type_Name(Signal_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Signal_Type_descriptor(), value);
}
inline bool Signal_Type_Parse(
    const ::std::string& name, Signal_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Signal_Type>(
    Signal_Type_descriptor(), name, value);
}
// ===================================================================

class Subsignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:acu.hdmap.Subsignal) */ {
 public:
  Subsignal();
  virtual ~Subsignal();

  Subsignal(const Subsignal& from);

  inline Subsignal& operator=(const Subsignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Subsignal(Subsignal&& from) noexcept
    : Subsignal() {
    *this = ::std::move(from);
  }

  inline Subsignal& operator=(Subsignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Subsignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Subsignal* internal_default_instance() {
    return reinterpret_cast<const Subsignal*>(
               &_Subsignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Subsignal* other);
  friend void swap(Subsignal& a, Subsignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Subsignal* New() const PROTOBUF_FINAL { return New(NULL); }

  Subsignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Subsignal& from);
  void MergeFrom(const Subsignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Subsignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Subsignal_Type Type;
  static const Type UNKNOWN =
    Subsignal_Type_UNKNOWN;
  static const Type CIRCLE =
    Subsignal_Type_CIRCLE;
  static const Type ARROW_LEFT =
    Subsignal_Type_ARROW_LEFT;
  static const Type ARROW_FORWARD =
    Subsignal_Type_ARROW_FORWARD;
  static const Type ARROW_RIGHT =
    Subsignal_Type_ARROW_RIGHT;
  static const Type ARROW_LEFT_AND_FORWARD =
    Subsignal_Type_ARROW_LEFT_AND_FORWARD;
  static const Type ARROW_RIGHT_AND_FORWARD =
    Subsignal_Type_ARROW_RIGHT_AND_FORWARD;
  static const Type ARROW_U_TURN =
    Subsignal_Type_ARROW_U_TURN;
  static inline bool Type_IsValid(int value) {
    return Subsignal_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Subsignal_Type_Type_MIN;
  static const Type Type_MAX =
    Subsignal_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Subsignal_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Subsignal_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Subsignal_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Subsignal_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .acu.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::acu::hdmap::Id& id() const;
  ::acu::hdmap::Id* release_id();
  ::acu::hdmap::Id* mutable_id();
  void set_allocated_id(::acu::hdmap::Id* id);

  // optional .acu.common.PointENU location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  const ::acu::common::PointENU& location() const;
  ::acu::common::PointENU* release_location();
  ::acu::common::PointENU* mutable_location();
  void set_allocated_location(::acu::common::PointENU* location);

  // optional .acu.hdmap.Subsignal.Type type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::acu::hdmap::Subsignal_Type type() const;
  void set_type(::acu::hdmap::Subsignal_Type value);

  // @@protoc_insertion_point(class_scope:acu.hdmap.Subsignal)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_location();
  void clear_has_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::acu::hdmap::Id* id_;
  ::acu::common::PointENU* location_;
  int type_;
  friend struct ::protobuf_map_5fsignal_2eproto::TableStruct;
  friend void ::protobuf_map_5fsignal_2eproto::InitDefaultsSubsignalImpl();
};
// -------------------------------------------------------------------

class Signal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:acu.hdmap.Signal) */ {
 public:
  Signal();
  virtual ~Signal();

  Signal(const Signal& from);

  inline Signal& operator=(const Signal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Signal(Signal&& from) noexcept
    : Signal() {
    *this = ::std::move(from);
  }

  inline Signal& operator=(Signal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Signal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signal* internal_default_instance() {
    return reinterpret_cast<const Signal*>(
               &_Signal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Signal* other);
  friend void swap(Signal& a, Signal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Signal* New() const PROTOBUF_FINAL { return New(NULL); }

  Signal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Signal& from);
  void MergeFrom(const Signal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Signal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Signal_Type Type;
  static const Type UNKNOWN =
    Signal_Type_UNKNOWN;
  static const Type MIX_2_HORIZONTAL =
    Signal_Type_MIX_2_HORIZONTAL;
  static const Type MIX_2_VERTICAL =
    Signal_Type_MIX_2_VERTICAL;
  static const Type MIX_3_HORIZONTAL =
    Signal_Type_MIX_3_HORIZONTAL;
  static const Type MIX_3_VERTICAL =
    Signal_Type_MIX_3_VERTICAL;
  static const Type SINGLE =
    Signal_Type_SINGLE;
  static inline bool Type_IsValid(int value) {
    return Signal_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Signal_Type_Type_MIN;
  static const Type Type_MAX =
    Signal_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Signal_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Signal_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Signal_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Signal_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .acu.hdmap.Subsignal subsignal = 3;
  int subsignal_size() const;
  void clear_subsignal();
  static const int kSubsignalFieldNumber = 3;
  const ::acu::hdmap::Subsignal& subsignal(int index) const;
  ::acu::hdmap::Subsignal* mutable_subsignal(int index);
  ::acu::hdmap::Subsignal* add_subsignal();
  ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Subsignal >*
      mutable_subsignal();
  const ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Subsignal >&
      subsignal() const;

  // repeated .acu.hdmap.Id overlap_id = 4;
  int overlap_id_size() const;
  void clear_overlap_id();
  static const int kOverlapIdFieldNumber = 4;
  const ::acu::hdmap::Id& overlap_id(int index) const;
  ::acu::hdmap::Id* mutable_overlap_id(int index);
  ::acu::hdmap::Id* add_overlap_id();
  ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Id >*
      mutable_overlap_id();
  const ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Id >&
      overlap_id() const;

  // repeated .acu.hdmap.Curve stop_line = 6;
  int stop_line_size() const;
  void clear_stop_line();
  static const int kStopLineFieldNumber = 6;
  const ::acu::hdmap::Curve& stop_line(int index) const;
  ::acu::hdmap::Curve* mutable_stop_line(int index);
  ::acu::hdmap::Curve* add_stop_line();
  ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Curve >*
      mutable_stop_line();
  const ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Curve >&
      stop_line() const;

  // optional .acu.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::acu::hdmap::Id& id() const;
  ::acu::hdmap::Id* release_id();
  ::acu::hdmap::Id* mutable_id();
  void set_allocated_id(::acu::hdmap::Id* id);

  // optional .acu.hdmap.Polygon boundary = 2;
  bool has_boundary() const;
  void clear_boundary();
  static const int kBoundaryFieldNumber = 2;
  const ::acu::hdmap::Polygon& boundary() const;
  ::acu::hdmap::Polygon* release_boundary();
  ::acu::hdmap::Polygon* mutable_boundary();
  void set_allocated_boundary(::acu::hdmap::Polygon* boundary);

  // optional double distance = 7;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 7;
  double distance() const;
  void set_distance(double value);

  // optional .acu.hdmap.Signal.Type type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::acu::hdmap::Signal_Type type() const;
  void set_type(::acu::hdmap::Signal_Type value);

  // @@protoc_insertion_point(class_scope:acu.hdmap.Signal)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_boundary();
  void clear_has_boundary();
  void set_has_type();
  void clear_has_type();
  void set_has_distance();
  void clear_has_distance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Subsignal > subsignal_;
  ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Id > overlap_id_;
  ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Curve > stop_line_;
  ::acu::hdmap::Id* id_;
  ::acu::hdmap::Polygon* boundary_;
  double distance_;
  int type_;
  friend struct ::protobuf_map_5fsignal_2eproto::TableStruct;
  friend void ::protobuf_map_5fsignal_2eproto::InitDefaultsSignalImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Subsignal

// optional .acu.hdmap.Id id = 1;
inline bool Subsignal::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Subsignal::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Subsignal::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::acu::hdmap::Id& Subsignal::id() const {
  const ::acu::hdmap::Id* p = id_;
  // @@protoc_insertion_point(field_get:acu.hdmap.Subsignal.id)
  return p != NULL ? *p : *reinterpret_cast<const ::acu::hdmap::Id*>(
      &::acu::hdmap::_Id_default_instance_);
}
inline ::acu::hdmap::Id* Subsignal::release_id() {
  // @@protoc_insertion_point(field_release:acu.hdmap.Subsignal.id)
  clear_has_id();
  ::acu::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::acu::hdmap::Id* Subsignal::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::acu::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:acu.hdmap.Subsignal.id)
  return id_;
}
inline void Subsignal::set_allocated_id(::acu::hdmap::Id* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
  } else {
    clear_has_id();
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:acu.hdmap.Subsignal.id)
}

// optional .acu.hdmap.Subsignal.Type type = 2;
inline bool Subsignal::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Subsignal::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Subsignal::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Subsignal::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::acu::hdmap::Subsignal_Type Subsignal::type() const {
  // @@protoc_insertion_point(field_get:acu.hdmap.Subsignal.type)
  return static_cast< ::acu::hdmap::Subsignal_Type >(type_);
}
inline void Subsignal::set_type(::acu::hdmap::Subsignal_Type value) {
  assert(::acu::hdmap::Subsignal_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:acu.hdmap.Subsignal.type)
}

// optional .acu.common.PointENU location = 3;
inline bool Subsignal::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Subsignal::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Subsignal::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::acu::common::PointENU& Subsignal::location() const {
  const ::acu::common::PointENU* p = location_;
  // @@protoc_insertion_point(field_get:acu.hdmap.Subsignal.location)
  return p != NULL ? *p : *reinterpret_cast<const ::acu::common::PointENU*>(
      &::acu::common::_PointENU_default_instance_);
}
inline ::acu::common::PointENU* Subsignal::release_location() {
  // @@protoc_insertion_point(field_release:acu.hdmap.Subsignal.location)
  clear_has_location();
  ::acu::common::PointENU* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::acu::common::PointENU* Subsignal::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::acu::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:acu.hdmap.Subsignal.location)
  return location_;
}
inline void Subsignal::set_allocated_location(::acu::common::PointENU* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(location_);
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:acu.hdmap.Subsignal.location)
}

// -------------------------------------------------------------------

// Signal

// optional .acu.hdmap.Id id = 1;
inline bool Signal::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Signal::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Signal::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::acu::hdmap::Id& Signal::id() const {
  const ::acu::hdmap::Id* p = id_;
  // @@protoc_insertion_point(field_get:acu.hdmap.Signal.id)
  return p != NULL ? *p : *reinterpret_cast<const ::acu::hdmap::Id*>(
      &::acu::hdmap::_Id_default_instance_);
}
inline ::acu::hdmap::Id* Signal::release_id() {
  // @@protoc_insertion_point(field_release:acu.hdmap.Signal.id)
  clear_has_id();
  ::acu::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::acu::hdmap::Id* Signal::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::acu::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:acu.hdmap.Signal.id)
  return id_;
}
inline void Signal::set_allocated_id(::acu::hdmap::Id* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
  } else {
    clear_has_id();
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:acu.hdmap.Signal.id)
}

// optional .acu.hdmap.Polygon boundary = 2;
inline bool Signal::has_boundary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Signal::set_has_boundary() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Signal::clear_has_boundary() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::acu::hdmap::Polygon& Signal::boundary() const {
  const ::acu::hdmap::Polygon* p = boundary_;
  // @@protoc_insertion_point(field_get:acu.hdmap.Signal.boundary)
  return p != NULL ? *p : *reinterpret_cast<const ::acu::hdmap::Polygon*>(
      &::acu::hdmap::_Polygon_default_instance_);
}
inline ::acu::hdmap::Polygon* Signal::release_boundary() {
  // @@protoc_insertion_point(field_release:acu.hdmap.Signal.boundary)
  clear_has_boundary();
  ::acu::hdmap::Polygon* temp = boundary_;
  boundary_ = NULL;
  return temp;
}
inline ::acu::hdmap::Polygon* Signal::mutable_boundary() {
  set_has_boundary();
  if (boundary_ == NULL) {
    boundary_ = new ::acu::hdmap::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:acu.hdmap.Signal.boundary)
  return boundary_;
}
inline void Signal::set_allocated_boundary(::acu::hdmap::Polygon* boundary) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(boundary_);
  }
  if (boundary) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      boundary = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, boundary, submessage_arena);
    }
    set_has_boundary();
  } else {
    clear_has_boundary();
  }
  boundary_ = boundary;
  // @@protoc_insertion_point(field_set_allocated:acu.hdmap.Signal.boundary)
}

// repeated .acu.hdmap.Subsignal subsignal = 3;
inline int Signal::subsignal_size() const {
  return subsignal_.size();
}
inline void Signal::clear_subsignal() {
  subsignal_.Clear();
}
inline const ::acu::hdmap::Subsignal& Signal::subsignal(int index) const {
  // @@protoc_insertion_point(field_get:acu.hdmap.Signal.subsignal)
  return subsignal_.Get(index);
}
inline ::acu::hdmap::Subsignal* Signal::mutable_subsignal(int index) {
  // @@protoc_insertion_point(field_mutable:acu.hdmap.Signal.subsignal)
  return subsignal_.Mutable(index);
}
inline ::acu::hdmap::Subsignal* Signal::add_subsignal() {
  // @@protoc_insertion_point(field_add:acu.hdmap.Signal.subsignal)
  return subsignal_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Subsignal >*
Signal::mutable_subsignal() {
  // @@protoc_insertion_point(field_mutable_list:acu.hdmap.Signal.subsignal)
  return &subsignal_;
}
inline const ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Subsignal >&
Signal::subsignal() const {
  // @@protoc_insertion_point(field_list:acu.hdmap.Signal.subsignal)
  return subsignal_;
}

// repeated .acu.hdmap.Id overlap_id = 4;
inline int Signal::overlap_id_size() const {
  return overlap_id_.size();
}
inline const ::acu::hdmap::Id& Signal::overlap_id(int index) const {
  // @@protoc_insertion_point(field_get:acu.hdmap.Signal.overlap_id)
  return overlap_id_.Get(index);
}
inline ::acu::hdmap::Id* Signal::mutable_overlap_id(int index) {
  // @@protoc_insertion_point(field_mutable:acu.hdmap.Signal.overlap_id)
  return overlap_id_.Mutable(index);
}
inline ::acu::hdmap::Id* Signal::add_overlap_id() {
  // @@protoc_insertion_point(field_add:acu.hdmap.Signal.overlap_id)
  return overlap_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Id >*
Signal::mutable_overlap_id() {
  // @@protoc_insertion_point(field_mutable_list:acu.hdmap.Signal.overlap_id)
  return &overlap_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Id >&
Signal::overlap_id() const {
  // @@protoc_insertion_point(field_list:acu.hdmap.Signal.overlap_id)
  return overlap_id_;
}

// optional .acu.hdmap.Signal.Type type = 5;
inline bool Signal::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Signal::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Signal::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Signal::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::acu::hdmap::Signal_Type Signal::type() const {
  // @@protoc_insertion_point(field_get:acu.hdmap.Signal.type)
  return static_cast< ::acu::hdmap::Signal_Type >(type_);
}
inline void Signal::set_type(::acu::hdmap::Signal_Type value) {
  assert(::acu::hdmap::Signal_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:acu.hdmap.Signal.type)
}

// repeated .acu.hdmap.Curve stop_line = 6;
inline int Signal::stop_line_size() const {
  return stop_line_.size();
}
inline const ::acu::hdmap::Curve& Signal::stop_line(int index) const {
  // @@protoc_insertion_point(field_get:acu.hdmap.Signal.stop_line)
  return stop_line_.Get(index);
}
inline ::acu::hdmap::Curve* Signal::mutable_stop_line(int index) {
  // @@protoc_insertion_point(field_mutable:acu.hdmap.Signal.stop_line)
  return stop_line_.Mutable(index);
}
inline ::acu::hdmap::Curve* Signal::add_stop_line() {
  // @@protoc_insertion_point(field_add:acu.hdmap.Signal.stop_line)
  return stop_line_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Curve >*
Signal::mutable_stop_line() {
  // @@protoc_insertion_point(field_mutable_list:acu.hdmap.Signal.stop_line)
  return &stop_line_;
}
inline const ::google::protobuf::RepeatedPtrField< ::acu::hdmap::Curve >&
Signal::stop_line() const {
  // @@protoc_insertion_point(field_list:acu.hdmap.Signal.stop_line)
  return stop_line_;
}

// optional double distance = 7;
inline bool Signal::has_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Signal::set_has_distance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Signal::clear_has_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Signal::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline double Signal::distance() const {
  // @@protoc_insertion_point(field_get:acu.hdmap.Signal.distance)
  return distance_;
}
inline void Signal::set_distance(double value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:acu.hdmap.Signal.distance)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace acu

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::acu::hdmap::Subsignal_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::acu::hdmap::Subsignal_Type>() {
  return ::acu::hdmap::Subsignal_Type_descriptor();
}
template <> struct is_proto_enum< ::acu::hdmap::Signal_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::acu::hdmap::Signal_Type>() {
  return ::acu::hdmap::Signal_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_map_5fsignal_2eproto__INCLUDED
