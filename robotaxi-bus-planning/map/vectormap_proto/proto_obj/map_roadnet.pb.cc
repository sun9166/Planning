// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_roadnet.proto

#include "map_roadnet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace acu {
namespace hdmap {
class RoadNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadNode>
      _instance;
} _RoadNode_default_instance_;
class RoadnetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Roadnet>
      _instance;
} _Roadnet_default_instance_;
}  // namespace hdmap
}  // namespace acu
namespace protobuf_map_5froadnet_2eproto {
void InitDefaultsRoadNodeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_map_5fid_2eproto::InitDefaultsId();
  {
    void* ptr = &::acu::hdmap::_RoadNode_default_instance_;
    new (ptr) ::acu::hdmap::RoadNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::hdmap::RoadNode::InitAsDefaultInstance();
}

void InitDefaultsRoadNode() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoadNodeImpl);
}

void InitDefaultsRoadnetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_map_5froadnet_2eproto::InitDefaultsRoadNode();
  {
    void* ptr = &::acu::hdmap::_Roadnet_default_instance_;
    new (ptr) ::acu::hdmap::Roadnet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::hdmap::Roadnet::InitAsDefaultInstance();
}

void InitDefaultsRoadnet() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoadnetImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadNode, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadNode, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadNode, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadNode, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadNode, turn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadNode, successor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::RoadNode, predecessor_id_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Roadnet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Roadnet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Roadnet, road_node_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::acu::hdmap::RoadNode)},
  { 17, 23, sizeof(::acu::hdmap::Roadnet)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::hdmap::_RoadNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::hdmap::_Roadnet_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "map_roadnet.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021map_roadnet.proto\022\tacu.hdmap\032\014map_id.p"
      "roto\"\206\002\n\010RoadNode\022\031\n\002id\030\001 \001(\0132\r.acu.hdma"
      "p.Id\022\016\n\006length\030\002 \001(\001\022\023\n\013speed_limit\030\003 \001("
      "\001\022*\n\004turn\030\004 \001(\0162\034.acu.hdmap.RoadNode.Roa"
      "dTurn\022#\n\014successor_id\030\005 \003(\0132\r.acu.hdmap."
      "Id\022%\n\016predecessor_id\030\006 \003(\0132\r.acu.hdmap.I"
      "d\"B\n\010RoadTurn\022\013\n\007NO_TURN\020\001\022\r\n\tLEFT_TURN\020"
      "\002\022\016\n\nRIGHT_TURN\020\003\022\n\n\006U_TURN\020\004\"1\n\007Roadnet"
      "\022&\n\troad_node\030\001 \003(\0132\023.acu.hdmap.RoadNode"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 360);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map_roadnet.proto", &protobuf_RegisterTypes);
  ::protobuf_map_5fid_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_map_5froadnet_2eproto
namespace acu {
namespace hdmap {
const ::google::protobuf::EnumDescriptor* RoadNode_RoadTurn_descriptor() {
  protobuf_map_5froadnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5froadnet_2eproto::file_level_enum_descriptors[0];
}
bool RoadNode_RoadTurn_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoadNode_RoadTurn RoadNode::NO_TURN;
const RoadNode_RoadTurn RoadNode::LEFT_TURN;
const RoadNode_RoadTurn RoadNode::RIGHT_TURN;
const RoadNode_RoadTurn RoadNode::U_TURN;
const RoadNode_RoadTurn RoadNode::RoadTurn_MIN;
const RoadNode_RoadTurn RoadNode::RoadTurn_MAX;
const int RoadNode::RoadTurn_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void RoadNode::InitAsDefaultInstance() {
  ::acu::hdmap::_RoadNode_default_instance_._instance.get_mutable()->id_ = const_cast< ::acu::hdmap::Id*>(
      ::acu::hdmap::Id::internal_default_instance());
}
void RoadNode::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
void RoadNode::clear_successor_id() {
  successor_id_.Clear();
}
void RoadNode::clear_predecessor_id() {
  predecessor_id_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadNode::kIdFieldNumber;
const int RoadNode::kLengthFieldNumber;
const int RoadNode::kSpeedLimitFieldNumber;
const int RoadNode::kTurnFieldNumber;
const int RoadNode::kSuccessorIdFieldNumber;
const int RoadNode::kPredecessorIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadNode::RoadNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_map_5froadnet_2eproto::InitDefaultsRoadNode();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.hdmap.RoadNode)
}
RoadNode::RoadNode(const RoadNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      successor_id_(from.successor_id_),
      predecessor_id_(from.predecessor_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::acu::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&turn_) -
    reinterpret_cast<char*>(&length_)) + sizeof(turn_));
  // @@protoc_insertion_point(copy_constructor:acu.hdmap.RoadNode)
}

void RoadNode::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_limit_) -
      reinterpret_cast<char*>(&id_)) + sizeof(speed_limit_));
  turn_ = 1;
}

RoadNode::~RoadNode() {
  // @@protoc_insertion_point(destructor:acu.hdmap.RoadNode)
  SharedDtor();
}

void RoadNode::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void RoadNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadNode::descriptor() {
  ::protobuf_map_5froadnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5froadnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadNode& RoadNode::default_instance() {
  ::protobuf_map_5froadnet_2eproto::InitDefaultsRoadNode();
  return *internal_default_instance();
}

RoadNode* RoadNode::New(::google::protobuf::Arena* arena) const {
  RoadNode* n = new RoadNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoadNode::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.hdmap.RoadNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  successor_id_.Clear();
  predecessor_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_ != NULL);
    id_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_limit_) -
        reinterpret_cast<char*>(&length_)) + sizeof(speed_limit_));
    turn_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoadNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.hdmap.RoadNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.hdmap.RoadNode.RoadTurn turn = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::hdmap::RoadNode_RoadTurn_IsValid(value)) {
            set_turn(static_cast< ::acu::hdmap::RoadNode_RoadTurn >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.Id successor_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_successor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.Id predecessor_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_predecessor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.hdmap.RoadNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.hdmap.RoadNode)
  return false;
#undef DO_
}

void RoadNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.hdmap.RoadNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->length(), output);
  }

  // optional double speed_limit = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->speed_limit(), output);
  }

  // optional .acu.hdmap.RoadNode.RoadTurn turn = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->turn(), output);
  }

  // repeated .acu.hdmap.Id successor_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->successor_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->successor_id(static_cast<int>(i)), output);
  }

  // repeated .acu.hdmap.Id predecessor_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predecessor_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->predecessor_id(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.hdmap.RoadNode)
}

::google::protobuf::uint8* RoadNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.hdmap.RoadNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->length(), target);
  }

  // optional double speed_limit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->speed_limit(), target);
  }

  // optional .acu.hdmap.RoadNode.RoadTurn turn = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->turn(), target);
  }

  // repeated .acu.hdmap.Id successor_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->successor_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->successor_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .acu.hdmap.Id predecessor_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predecessor_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->predecessor_id(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.hdmap.RoadNode)
  return target;
}

size_t RoadNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.hdmap.RoadNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.hdmap.Id successor_id = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->successor_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->successor_id(static_cast<int>(i)));
    }
  }

  // repeated .acu.hdmap.Id predecessor_id = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->predecessor_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->predecessor_id(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .acu.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->id_);
    }

    // optional double length = 2;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 3;
    if (has_speed_limit()) {
      total_size += 1 + 8;
    }

    // optional .acu.hdmap.RoadNode.RoadTurn turn = 4;
    if (has_turn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.hdmap.RoadNode)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.hdmap.RoadNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.hdmap.RoadNode)
    MergeFrom(*source);
  }
}

void RoadNode::MergeFrom(const RoadNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.hdmap.RoadNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  successor_id_.MergeFrom(from.successor_id_);
  predecessor_id_.MergeFrom(from.predecessor_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::acu::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000004u) {
      speed_limit_ = from.speed_limit_;
    }
    if (cached_has_bits & 0x00000008u) {
      turn_ = from.turn_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoadNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.hdmap.RoadNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadNode::CopyFrom(const RoadNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.hdmap.RoadNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadNode::IsInitialized() const {
  return true;
}

void RoadNode::Swap(RoadNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadNode::InternalSwap(RoadNode* other) {
  using std::swap;
  successor_id_.InternalSwap(&other->successor_id_);
  predecessor_id_.InternalSwap(&other->predecessor_id_);
  swap(id_, other->id_);
  swap(length_, other->length_);
  swap(speed_limit_, other->speed_limit_);
  swap(turn_, other->turn_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoadNode::GetMetadata() const {
  protobuf_map_5froadnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5froadnet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Roadnet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Roadnet::kRoadNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Roadnet::Roadnet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_map_5froadnet_2eproto::InitDefaultsRoadnet();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.hdmap.Roadnet)
}
Roadnet::Roadnet(const Roadnet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      road_node_(from.road_node_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:acu.hdmap.Roadnet)
}

void Roadnet::SharedCtor() {
  _cached_size_ = 0;
}

Roadnet::~Roadnet() {
  // @@protoc_insertion_point(destructor:acu.hdmap.Roadnet)
  SharedDtor();
}

void Roadnet::SharedDtor() {
}

void Roadnet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Roadnet::descriptor() {
  ::protobuf_map_5froadnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5froadnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Roadnet& Roadnet::default_instance() {
  ::protobuf_map_5froadnet_2eproto::InitDefaultsRoadnet();
  return *internal_default_instance();
}

Roadnet* Roadnet::New(::google::protobuf::Arena* arena) const {
  Roadnet* n = new Roadnet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Roadnet::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.hdmap.Roadnet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_node_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Roadnet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.hdmap.Roadnet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .acu.hdmap.RoadNode road_node = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_road_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.hdmap.Roadnet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.hdmap.Roadnet)
  return false;
#undef DO_
}

void Roadnet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.hdmap.Roadnet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .acu.hdmap.RoadNode road_node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_node_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->road_node(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.hdmap.Roadnet)
}

::google::protobuf::uint8* Roadnet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.hdmap.Roadnet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .acu.hdmap.RoadNode road_node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_node_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->road_node(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.hdmap.Roadnet)
  return target;
}

size_t Roadnet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.hdmap.Roadnet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.hdmap.RoadNode road_node = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->road_node_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road_node(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Roadnet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.hdmap.Roadnet)
  GOOGLE_DCHECK_NE(&from, this);
  const Roadnet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Roadnet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.hdmap.Roadnet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.hdmap.Roadnet)
    MergeFrom(*source);
  }
}

void Roadnet::MergeFrom(const Roadnet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.hdmap.Roadnet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_node_.MergeFrom(from.road_node_);
}

void Roadnet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.hdmap.Roadnet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roadnet::CopyFrom(const Roadnet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.hdmap.Roadnet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roadnet::IsInitialized() const {
  return true;
}

void Roadnet::Swap(Roadnet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Roadnet::InternalSwap(Roadnet* other) {
  using std::swap;
  road_node_.InternalSwap(&other->road_node_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Roadnet::GetMetadata() const {
  protobuf_map_5froadnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5froadnet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace acu

// @@protoc_insertion_point(global_scope)
