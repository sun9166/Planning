// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_lane.proto

#include "map_lane.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace acu {
namespace hdmap {
class LaneBoundaryTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneBoundaryType>
      _instance;
} _LaneBoundaryType_default_instance_;
class LaneBoundaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneBoundary>
      _instance;
} _LaneBoundary_default_instance_;
class LaneSampleAssociationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneSampleAssociation>
      _instance;
} _LaneSampleAssociation_default_instance_;
class LaneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lane>
      _instance;
} _Lane_default_instance_;
}  // namespace hdmap
}  // namespace acu
namespace protobuf_map_5flane_2eproto {
void InitDefaultsLaneBoundaryTypeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::hdmap::_LaneBoundaryType_default_instance_;
    new (ptr) ::acu::hdmap::LaneBoundaryType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::hdmap::LaneBoundaryType::InitAsDefaultInstance();
}

void InitDefaultsLaneBoundaryType() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneBoundaryTypeImpl);
}

void InitDefaultsLaneBoundaryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_map_5fgeometry_2eproto::InitDefaultsCurve();
  protobuf_map_5flane_2eproto::InitDefaultsLaneBoundaryType();
  {
    void* ptr = &::acu::hdmap::_LaneBoundary_default_instance_;
    new (ptr) ::acu::hdmap::LaneBoundary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::hdmap::LaneBoundary::InitAsDefaultInstance();
}

void InitDefaultsLaneBoundary() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneBoundaryImpl);
}

void InitDefaultsLaneSampleAssociationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::hdmap::_LaneSampleAssociation_default_instance_;
    new (ptr) ::acu::hdmap::LaneSampleAssociation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::hdmap::LaneSampleAssociation::InitAsDefaultInstance();
}

void InitDefaultsLaneSampleAssociation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneSampleAssociationImpl);
}

void InitDefaultsLaneImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_map_5fid_2eproto::InitDefaultsId();
  protobuf_map_5fgeometry_2eproto::InitDefaultsCurve();
  protobuf_map_5flane_2eproto::InitDefaultsLaneBoundary();
  protobuf_map_5flane_2eproto::InitDefaultsLaneSampleAssociation();
  {
    void* ptr = &::acu::hdmap::_Lane_default_instance_;
    new (ptr) ::acu::hdmap::Lane();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::hdmap::Lane::InitAsDefaultInstance();
}

void InitDefaultsLane() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneImpl);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::LaneBoundaryType, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::LaneBoundaryType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::LaneBoundaryType, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::LaneBoundaryType, types_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::LaneBoundary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::LaneBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::LaneBoundary, curve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::LaneBoundary, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::LaneBoundary, virtual__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::LaneBoundary, boundary_type_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::LaneSampleAssociation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::LaneSampleAssociation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::LaneSampleAssociation, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::LaneSampleAssociation, width_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, central_curve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, left_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, right_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, overlap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, predecessor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, successor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, left_neighbor_forward_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, right_neighbor_forward_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, turn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, left_neighbor_reverse_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, right_neighbor_reverse_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, junction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, left_sample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, right_sample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, left_road_sample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::hdmap::Lane, right_road_sample_),
  0,
  1,
  2,
  3,
  5,
  6,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  8,
  9,
  ~0u,
  ~0u,
  4,
  ~0u,
  ~0u,
  7,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::acu::hdmap::LaneBoundaryType)},
  { 9, 18, sizeof(::acu::hdmap::LaneBoundary)},
  { 22, 29, sizeof(::acu::hdmap::LaneSampleAssociation)},
  { 31, 57, sizeof(::acu::hdmap::Lane)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::hdmap::_LaneBoundaryType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::hdmap::_LaneBoundary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::hdmap::_LaneSampleAssociation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::hdmap::_Lane_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "map_lane.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016map_lane.proto\022\tacu.hdmap\032\014map_id.prot"
      "o\032\022map_geometry.proto\"\310\001\n\020LaneBoundaryTy"
      "pe\022\t\n\001s\030\001 \001(\001\022/\n\005types\030\002 \003(\0162 .acu.hdmap"
      ".LaneBoundaryType.Type\"x\n\004Type\022\013\n\007UNKNOW"
      "N\020\000\022\021\n\rDOTTED_YELLOW\020\001\022\020\n\014DOTTED_WHITE\020\002"
      "\022\020\n\014SOLID_YELLOW\020\003\022\017\n\013SOLID_WHITE\020\004\022\021\n\rD"
      "OUBLE_YELLOW\020\005\022\010\n\004CURB\020\006\"\204\001\n\014LaneBoundar"
      "y\022\037\n\005curve\030\001 \001(\0132\020.acu.hdmap.Curve\022\016\n\006le"
      "ngth\030\002 \001(\001\022\017\n\007virtual\030\003 \001(\010\0222\n\rboundary_"
      "type\030\004 \003(\0132\033.acu.hdmap.LaneBoundaryType\""
      "1\n\025LaneSampleAssociation\022\t\n\001s\030\001 \001(\001\022\r\n\005w"
      "idth\030\002 \001(\001\"\266\t\n\004Lane\022\031\n\002id\030\001 \001(\0132\r.acu.hd"
      "map.Id\022\'\n\rcentral_curve\030\002 \001(\0132\020.acu.hdma"
      "p.Curve\022.\n\rleft_boundary\030\003 \001(\0132\027.acu.hdm"
      "ap.LaneBoundary\022/\n\016right_boundary\030\004 \001(\0132"
      "\027.acu.hdmap.LaneBoundary\022\016\n\006length\030\005 \001(\001"
      "\022\023\n\013speed_limit\030\006 \001(\001\022!\n\noverlap_id\030\007 \003("
      "\0132\r.acu.hdmap.Id\022%\n\016predecessor_id\030\010 \003(\013"
      "2\r.acu.hdmap.Id\022#\n\014successor_id\030\t \003(\0132\r."
      "acu.hdmap.Id\0224\n\035left_neighbor_forward_la"
      "ne_id\030\n \003(\0132\r.acu.hdmap.Id\0225\n\036right_neig"
      "hbor_forward_lane_id\030\013 \003(\0132\r.acu.hdmap.I"
      "d\022&\n\004type\030\014 \001(\0162\030.acu.hdmap.Lane.LaneTyp"
      "e\022&\n\004turn\030\r \001(\0162\030.acu.hdmap.Lane.LaneTur"
      "n\0224\n\035left_neighbor_reverse_lane_id\030\016 \003(\013"
      "2\r.acu.hdmap.Id\0225\n\036right_neighbor_revers"
      "e_lane_id\030\017 \003(\0132\r.acu.hdmap.Id\022\"\n\013juncti"
      "on_id\030\020 \001(\0132\r.acu.hdmap.Id\0225\n\013left_sampl"
      "e\030\021 \003(\0132 .acu.hdmap.LaneSampleAssociatio"
      "n\0226\n\014right_sample\030\022 \003(\0132 .acu.hdmap.Lane"
      "SampleAssociation\0220\n\tdirection\030\023 \001(\0162\035.a"
      "cu.hdmap.Lane.LaneDirection\022:\n\020left_road"
      "_sample\030\024 \003(\0132 .acu.hdmap.LaneSampleAsso"
      "ciation\022;\n\021right_road_sample\030\025 \003(\0132 .acu"
      ".hdmap.LaneSampleAssociation\"\213\001\n\010LaneTyp"
      "e\022\010\n\004NONE\020\001\022\020\n\014CITY_DRIVING\020\002\022\n\n\006BIKING\020"
      "\003\022\014\n\010SIDEWALK\020\004\022\013\n\007PARKING\020\005\022\n\n\006BUSING\020\006"
      "\022\n\n\006ISLAND\020\007\022\017\n\013WAITINGLEFT\020\010\022\023\n\017WAITING"
      "STRAIGHT\020\t\"B\n\010LaneTurn\022\013\n\007NO_TURN\020\001\022\r\n\tL"
      "EFT_TURN\020\002\022\016\n\nRIGHT_TURN\020\003\022\n\n\006U_TURN\020\004\";"
      "\n\rLaneDirection\022\013\n\007FORWARD\020\001\022\014\n\010BACKWARD"
      "\020\002\022\017\n\013BIDIRECTION\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1659);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map_lane.proto", &protobuf_RegisterTypes);
  ::protobuf_map_5fid_2eproto::AddDescriptors();
  ::protobuf_map_5fgeometry_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_map_5flane_2eproto
namespace acu {
namespace hdmap {
const ::google::protobuf::EnumDescriptor* LaneBoundaryType_Type_descriptor() {
  protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5flane_2eproto::file_level_enum_descriptors[0];
}
bool LaneBoundaryType_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LaneBoundaryType_Type LaneBoundaryType::UNKNOWN;
const LaneBoundaryType_Type LaneBoundaryType::DOTTED_YELLOW;
const LaneBoundaryType_Type LaneBoundaryType::DOTTED_WHITE;
const LaneBoundaryType_Type LaneBoundaryType::SOLID_YELLOW;
const LaneBoundaryType_Type LaneBoundaryType::SOLID_WHITE;
const LaneBoundaryType_Type LaneBoundaryType::DOUBLE_YELLOW;
const LaneBoundaryType_Type LaneBoundaryType::CURB;
const LaneBoundaryType_Type LaneBoundaryType::Type_MIN;
const LaneBoundaryType_Type LaneBoundaryType::Type_MAX;
const int LaneBoundaryType::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_LaneType_descriptor() {
  protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5flane_2eproto::file_level_enum_descriptors[1];
}
bool Lane_LaneType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_LaneType Lane::NONE;
const Lane_LaneType Lane::CITY_DRIVING;
const Lane_LaneType Lane::BIKING;
const Lane_LaneType Lane::SIDEWALK;
const Lane_LaneType Lane::PARKING;
const Lane_LaneType Lane::BUSING;
const Lane_LaneType Lane::ISLAND;
const Lane_LaneType Lane::WAITINGLEFT;
const Lane_LaneType Lane::WAITINGSTRAIGHT;
const Lane_LaneType Lane::LaneType_MIN;
const Lane_LaneType Lane::LaneType_MAX;
const int Lane::LaneType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_LaneTurn_descriptor() {
  protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5flane_2eproto::file_level_enum_descriptors[2];
}
bool Lane_LaneTurn_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_LaneTurn Lane::NO_TURN;
const Lane_LaneTurn Lane::LEFT_TURN;
const Lane_LaneTurn Lane::RIGHT_TURN;
const Lane_LaneTurn Lane::U_TURN;
const Lane_LaneTurn Lane::LaneTurn_MIN;
const Lane_LaneTurn Lane::LaneTurn_MAX;
const int Lane::LaneTurn_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_LaneDirection_descriptor() {
  protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_map_5flane_2eproto::file_level_enum_descriptors[3];
}
bool Lane_LaneDirection_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_LaneDirection Lane::FORWARD;
const Lane_LaneDirection Lane::BACKWARD;
const Lane_LaneDirection Lane::BIDIRECTION;
const Lane_LaneDirection Lane::LaneDirection_MIN;
const Lane_LaneDirection Lane::LaneDirection_MAX;
const int Lane::LaneDirection_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void LaneBoundaryType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneBoundaryType::kSFieldNumber;
const int LaneBoundaryType::kTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneBoundaryType::LaneBoundaryType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_map_5flane_2eproto::InitDefaultsLaneBoundaryType();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.hdmap.LaneBoundaryType)
}
LaneBoundaryType::LaneBoundaryType(const LaneBoundaryType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      types_(from.types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  s_ = from.s_;
  // @@protoc_insertion_point(copy_constructor:acu.hdmap.LaneBoundaryType)
}

void LaneBoundaryType::SharedCtor() {
  _cached_size_ = 0;
  s_ = 0;
}

LaneBoundaryType::~LaneBoundaryType() {
  // @@protoc_insertion_point(destructor:acu.hdmap.LaneBoundaryType)
  SharedDtor();
}

void LaneBoundaryType::SharedDtor() {
}

void LaneBoundaryType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneBoundaryType::descriptor() {
  ::protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneBoundaryType& LaneBoundaryType::default_instance() {
  ::protobuf_map_5flane_2eproto::InitDefaultsLaneBoundaryType();
  return *internal_default_instance();
}

LaneBoundaryType* LaneBoundaryType::New(::google::protobuf::Arena* arena) const {
  LaneBoundaryType* n = new LaneBoundaryType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneBoundaryType::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.hdmap.LaneBoundaryType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_.Clear();
  s_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneBoundaryType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.hdmap.LaneBoundaryType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.LaneBoundaryType.Type types = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::hdmap::LaneBoundaryType_Type_IsValid(value)) {
            add_types(static_cast< ::acu::hdmap::LaneBoundaryType_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 2,
                 ::acu::hdmap::LaneBoundaryType_Type_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_types())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.hdmap.LaneBoundaryType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.hdmap.LaneBoundaryType)
  return false;
#undef DO_
}

void LaneBoundaryType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.hdmap.LaneBoundaryType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // repeated .acu.hdmap.LaneBoundaryType.Type types = 2;
  for (int i = 0, n = this->types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->types(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.hdmap.LaneBoundaryType)
}

::google::protobuf::uint8* LaneBoundaryType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.hdmap.LaneBoundaryType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // repeated .acu.hdmap.LaneBoundaryType.Type types = 2;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    2, this->types_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.hdmap.LaneBoundaryType)
  return target;
}

size_t LaneBoundaryType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.hdmap.LaneBoundaryType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.hdmap.LaneBoundaryType.Type types = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->types(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional double s = 1;
  if (has_s()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneBoundaryType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.hdmap.LaneBoundaryType)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundaryType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneBoundaryType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.hdmap.LaneBoundaryType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.hdmap.LaneBoundaryType)
    MergeFrom(*source);
  }
}

void LaneBoundaryType::MergeFrom(const LaneBoundaryType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.hdmap.LaneBoundaryType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
  if (from.has_s()) {
    set_s(from.s());
  }
}

void LaneBoundaryType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.hdmap.LaneBoundaryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundaryType::CopyFrom(const LaneBoundaryType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.hdmap.LaneBoundaryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundaryType::IsInitialized() const {
  return true;
}

void LaneBoundaryType::Swap(LaneBoundaryType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneBoundaryType::InternalSwap(LaneBoundaryType* other) {
  using std::swap;
  types_.InternalSwap(&other->types_);
  swap(s_, other->s_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneBoundaryType::GetMetadata() const {
  protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneBoundary::InitAsDefaultInstance() {
  ::acu::hdmap::_LaneBoundary_default_instance_._instance.get_mutable()->curve_ = const_cast< ::acu::hdmap::Curve*>(
      ::acu::hdmap::Curve::internal_default_instance());
}
void LaneBoundary::clear_curve() {
  if (curve_ != NULL) curve_->Clear();
  clear_has_curve();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneBoundary::kCurveFieldNumber;
const int LaneBoundary::kLengthFieldNumber;
const int LaneBoundary::kVirtualFieldNumber;
const int LaneBoundary::kBoundaryTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneBoundary::LaneBoundary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_map_5flane_2eproto::InitDefaultsLaneBoundary();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.hdmap.LaneBoundary)
}
LaneBoundary::LaneBoundary(const LaneBoundary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      boundary_type_(from.boundary_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_curve()) {
    curve_ = new ::acu::hdmap::Curve(*from.curve_);
  } else {
    curve_ = NULL;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&virtual__) -
    reinterpret_cast<char*>(&length_)) + sizeof(virtual__));
  // @@protoc_insertion_point(copy_constructor:acu.hdmap.LaneBoundary)
}

void LaneBoundary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&curve_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&virtual__) -
      reinterpret_cast<char*>(&curve_)) + sizeof(virtual__));
}

LaneBoundary::~LaneBoundary() {
  // @@protoc_insertion_point(destructor:acu.hdmap.LaneBoundary)
  SharedDtor();
}

void LaneBoundary::SharedDtor() {
  if (this != internal_default_instance()) delete curve_;
}

void LaneBoundary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneBoundary::descriptor() {
  ::protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneBoundary& LaneBoundary::default_instance() {
  ::protobuf_map_5flane_2eproto::InitDefaultsLaneBoundary();
  return *internal_default_instance();
}

LaneBoundary* LaneBoundary::New(::google::protobuf::Arena* arena) const {
  LaneBoundary* n = new LaneBoundary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.hdmap.LaneBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boundary_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(curve_ != NULL);
    curve_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&virtual__) -
        reinterpret_cast<char*>(&length_)) + sizeof(virtual__));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneBoundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.hdmap.LaneBoundary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.hdmap.Curve curve = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool virtual = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_virtual_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &virtual__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.LaneBoundaryType boundary_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_boundary_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.hdmap.LaneBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.hdmap.LaneBoundary)
  return false;
#undef DO_
}

void LaneBoundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.hdmap.LaneBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.hdmap.Curve curve = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->curve_, output);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->length(), output);
  }

  // optional bool virtual = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->virtual_(), output);
  }

  // repeated .acu.hdmap.LaneBoundaryType boundary_type = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundary_type_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->boundary_type(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.hdmap.LaneBoundary)
}

::google::protobuf::uint8* LaneBoundary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.hdmap.LaneBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.hdmap.Curve curve = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->curve_, deterministic, target);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->length(), target);
  }

  // optional bool virtual = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->virtual_(), target);
  }

  // repeated .acu.hdmap.LaneBoundaryType boundary_type = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundary_type_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->boundary_type(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.hdmap.LaneBoundary)
  return target;
}

size_t LaneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.hdmap.LaneBoundary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.hdmap.LaneBoundaryType boundary_type = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->boundary_type_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->boundary_type(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .acu.hdmap.Curve curve = 1;
    if (has_curve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->curve_);
    }

    // optional double length = 2;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional bool virtual = 3;
    if (has_virtual_()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneBoundary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.hdmap.LaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneBoundary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.hdmap.LaneBoundary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.hdmap.LaneBoundary)
    MergeFrom(*source);
  }
}

void LaneBoundary::MergeFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.hdmap.LaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boundary_type_.MergeFrom(from.boundary_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_curve()->::acu::hdmap::Curve::MergeFrom(from.curve());
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000004u) {
      virtual__ = from.virtual__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneBoundary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.hdmap.LaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundary::CopyFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.hdmap.LaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundary::IsInitialized() const {
  return true;
}

void LaneBoundary::Swap(LaneBoundary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneBoundary::InternalSwap(LaneBoundary* other) {
  using std::swap;
  boundary_type_.InternalSwap(&other->boundary_type_);
  swap(curve_, other->curve_);
  swap(length_, other->length_);
  swap(virtual__, other->virtual__);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneBoundary::GetMetadata() const {
  protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneSampleAssociation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneSampleAssociation::kSFieldNumber;
const int LaneSampleAssociation::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneSampleAssociation::LaneSampleAssociation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_map_5flane_2eproto::InitDefaultsLaneSampleAssociation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.hdmap.LaneSampleAssociation)
}
LaneSampleAssociation::LaneSampleAssociation(const LaneSampleAssociation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&s_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:acu.hdmap.LaneSampleAssociation)
}

void LaneSampleAssociation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&s_)) + sizeof(width_));
}

LaneSampleAssociation::~LaneSampleAssociation() {
  // @@protoc_insertion_point(destructor:acu.hdmap.LaneSampleAssociation)
  SharedDtor();
}

void LaneSampleAssociation::SharedDtor() {
}

void LaneSampleAssociation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneSampleAssociation::descriptor() {
  ::protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneSampleAssociation& LaneSampleAssociation::default_instance() {
  ::protobuf_map_5flane_2eproto::InitDefaultsLaneSampleAssociation();
  return *internal_default_instance();
}

LaneSampleAssociation* LaneSampleAssociation::New(::google::protobuf::Arena* arena) const {
  LaneSampleAssociation* n = new LaneSampleAssociation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneSampleAssociation::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.hdmap.LaneSampleAssociation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&s_)) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneSampleAssociation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.hdmap.LaneSampleAssociation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.hdmap.LaneSampleAssociation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.hdmap.LaneSampleAssociation)
  return false;
#undef DO_
}

void LaneSampleAssociation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.hdmap.LaneSampleAssociation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.hdmap.LaneSampleAssociation)
}

::google::protobuf::uint8* LaneSampleAssociation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.hdmap.LaneSampleAssociation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.hdmap.LaneSampleAssociation)
  return target;
}

size_t LaneSampleAssociation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.hdmap.LaneSampleAssociation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double s = 1;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double width = 2;
    if (has_width()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneSampleAssociation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.hdmap.LaneSampleAssociation)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneSampleAssociation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneSampleAssociation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.hdmap.LaneSampleAssociation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.hdmap.LaneSampleAssociation)
    MergeFrom(*source);
  }
}

void LaneSampleAssociation::MergeFrom(const LaneSampleAssociation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.hdmap.LaneSampleAssociation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneSampleAssociation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.hdmap.LaneSampleAssociation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSampleAssociation::CopyFrom(const LaneSampleAssociation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.hdmap.LaneSampleAssociation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSampleAssociation::IsInitialized() const {
  return true;
}

void LaneSampleAssociation::Swap(LaneSampleAssociation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneSampleAssociation::InternalSwap(LaneSampleAssociation* other) {
  using std::swap;
  swap(s_, other->s_);
  swap(width_, other->width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneSampleAssociation::GetMetadata() const {
  protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Lane::InitAsDefaultInstance() {
  ::acu::hdmap::_Lane_default_instance_._instance.get_mutable()->id_ = const_cast< ::acu::hdmap::Id*>(
      ::acu::hdmap::Id::internal_default_instance());
  ::acu::hdmap::_Lane_default_instance_._instance.get_mutable()->central_curve_ = const_cast< ::acu::hdmap::Curve*>(
      ::acu::hdmap::Curve::internal_default_instance());
  ::acu::hdmap::_Lane_default_instance_._instance.get_mutable()->left_boundary_ = const_cast< ::acu::hdmap::LaneBoundary*>(
      ::acu::hdmap::LaneBoundary::internal_default_instance());
  ::acu::hdmap::_Lane_default_instance_._instance.get_mutable()->right_boundary_ = const_cast< ::acu::hdmap::LaneBoundary*>(
      ::acu::hdmap::LaneBoundary::internal_default_instance());
  ::acu::hdmap::_Lane_default_instance_._instance.get_mutable()->junction_id_ = const_cast< ::acu::hdmap::Id*>(
      ::acu::hdmap::Id::internal_default_instance());
}
void Lane::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
void Lane::clear_central_curve() {
  if (central_curve_ != NULL) central_curve_->Clear();
  clear_has_central_curve();
}
void Lane::clear_overlap_id() {
  overlap_id_.Clear();
}
void Lane::clear_predecessor_id() {
  predecessor_id_.Clear();
}
void Lane::clear_successor_id() {
  successor_id_.Clear();
}
void Lane::clear_left_neighbor_forward_lane_id() {
  left_neighbor_forward_lane_id_.Clear();
}
void Lane::clear_right_neighbor_forward_lane_id() {
  right_neighbor_forward_lane_id_.Clear();
}
void Lane::clear_left_neighbor_reverse_lane_id() {
  left_neighbor_reverse_lane_id_.Clear();
}
void Lane::clear_right_neighbor_reverse_lane_id() {
  right_neighbor_reverse_lane_id_.Clear();
}
void Lane::clear_junction_id() {
  if (junction_id_ != NULL) junction_id_->Clear();
  clear_has_junction_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane::kIdFieldNumber;
const int Lane::kCentralCurveFieldNumber;
const int Lane::kLeftBoundaryFieldNumber;
const int Lane::kRightBoundaryFieldNumber;
const int Lane::kLengthFieldNumber;
const int Lane::kSpeedLimitFieldNumber;
const int Lane::kOverlapIdFieldNumber;
const int Lane::kPredecessorIdFieldNumber;
const int Lane::kSuccessorIdFieldNumber;
const int Lane::kLeftNeighborForwardLaneIdFieldNumber;
const int Lane::kRightNeighborForwardLaneIdFieldNumber;
const int Lane::kTypeFieldNumber;
const int Lane::kTurnFieldNumber;
const int Lane::kLeftNeighborReverseLaneIdFieldNumber;
const int Lane::kRightNeighborReverseLaneIdFieldNumber;
const int Lane::kJunctionIdFieldNumber;
const int Lane::kLeftSampleFieldNumber;
const int Lane::kRightSampleFieldNumber;
const int Lane::kDirectionFieldNumber;
const int Lane::kLeftRoadSampleFieldNumber;
const int Lane::kRightRoadSampleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane::Lane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_map_5flane_2eproto::InitDefaultsLane();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.hdmap.Lane)
}
Lane::Lane(const Lane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      overlap_id_(from.overlap_id_),
      predecessor_id_(from.predecessor_id_),
      successor_id_(from.successor_id_),
      left_neighbor_forward_lane_id_(from.left_neighbor_forward_lane_id_),
      right_neighbor_forward_lane_id_(from.right_neighbor_forward_lane_id_),
      left_neighbor_reverse_lane_id_(from.left_neighbor_reverse_lane_id_),
      right_neighbor_reverse_lane_id_(from.right_neighbor_reverse_lane_id_),
      left_sample_(from.left_sample_),
      right_sample_(from.right_sample_),
      left_road_sample_(from.left_road_sample_),
      right_road_sample_(from.right_road_sample_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::acu::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_central_curve()) {
    central_curve_ = new ::acu::hdmap::Curve(*from.central_curve_);
  } else {
    central_curve_ = NULL;
  }
  if (from.has_left_boundary()) {
    left_boundary_ = new ::acu::hdmap::LaneBoundary(*from.left_boundary_);
  } else {
    left_boundary_ = NULL;
  }
  if (from.has_right_boundary()) {
    right_boundary_ = new ::acu::hdmap::LaneBoundary(*from.right_boundary_);
  } else {
    right_boundary_ = NULL;
  }
  if (from.has_junction_id()) {
    junction_id_ = new ::acu::hdmap::Id(*from.junction_id_);
  } else {
    junction_id_ = NULL;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&turn_) -
    reinterpret_cast<char*>(&length_)) + sizeof(turn_));
  // @@protoc_insertion_point(copy_constructor:acu.hdmap.Lane)
}

void Lane::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_limit_) -
      reinterpret_cast<char*>(&id_)) + sizeof(speed_limit_));
  direction_ = 1;
  type_ = 1;
  turn_ = 1;
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:acu.hdmap.Lane)
  SharedDtor();
}

void Lane::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete central_curve_;
  if (this != internal_default_instance()) delete left_boundary_;
  if (this != internal_default_instance()) delete right_boundary_;
  if (this != internal_default_instance()) delete junction_id_;
}

void Lane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lane::descriptor() {
  ::protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lane& Lane::default_instance() {
  ::protobuf_map_5flane_2eproto::InitDefaultsLane();
  return *internal_default_instance();
}

Lane* Lane::New(::google::protobuf::Arena* arena) const {
  Lane* n = new Lane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.hdmap.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  overlap_id_.Clear();
  predecessor_id_.Clear();
  successor_id_.Clear();
  left_neighbor_forward_lane_id_.Clear();
  right_neighbor_forward_lane_id_.Clear();
  left_neighbor_reverse_lane_id_.Clear();
  right_neighbor_reverse_lane_id_.Clear();
  left_sample_.Clear();
  right_sample_.Clear();
  left_road_sample_.Clear();
  right_road_sample_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(central_curve_ != NULL);
      central_curve_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(left_boundary_ != NULL);
      left_boundary_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(right_boundary_ != NULL);
      right_boundary_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(junction_id_ != NULL);
      junction_id_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_limit_) -
        reinterpret_cast<char*>(&length_)) + sizeof(speed_limit_));
    direction_ = 1;
  }
  if (cached_has_bits & 768u) {
    type_ = 1;
    turn_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Lane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.hdmap.Lane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.hdmap.Curve central_curve = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_central_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.hdmap.LaneBoundary left_boundary = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.hdmap.LaneBoundary right_boundary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_limit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.Id overlap_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_overlap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.Id predecessor_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_predecessor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.Id successor_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_successor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.Id left_neighbor_forward_lane_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_left_neighbor_forward_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.Id right_neighbor_forward_lane_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_right_neighbor_forward_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.hdmap.Lane.LaneType type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::hdmap::Lane_LaneType_IsValid(value)) {
            set_type(static_cast< ::acu::hdmap::Lane_LaneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.hdmap.Lane.LaneTurn turn = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::hdmap::Lane_LaneTurn_IsValid(value)) {
            set_turn(static_cast< ::acu::hdmap::Lane_LaneTurn >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                13, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.Id left_neighbor_reverse_lane_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_left_neighbor_reverse_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.Id right_neighbor_reverse_lane_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_right_neighbor_reverse_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.hdmap.Id junction_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_junction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.LaneSampleAssociation left_sample = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_left_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.LaneSampleAssociation right_sample = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_right_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.hdmap.Lane.LaneDirection direction = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::hdmap::Lane_LaneDirection_IsValid(value)) {
            set_direction(static_cast< ::acu::hdmap::Lane_LaneDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                19, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.LaneSampleAssociation left_road_sample = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_left_road_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .acu.hdmap.LaneSampleAssociation right_road_sample = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_right_road_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.hdmap.Lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.hdmap.Lane)
  return false;
#undef DO_
}

void Lane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.hdmap.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .acu.hdmap.Curve central_curve = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->central_curve_, output);
  }

  // optional .acu.hdmap.LaneBoundary left_boundary = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->left_boundary_, output);
  }

  // optional .acu.hdmap.LaneBoundary right_boundary = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->right_boundary_, output);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->length(), output);
  }

  // optional double speed_limit = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->speed_limit(), output);
  }

  // repeated .acu.hdmap.Id overlap_id = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overlap_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->overlap_id(static_cast<int>(i)), output);
  }

  // repeated .acu.hdmap.Id predecessor_id = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predecessor_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->predecessor_id(static_cast<int>(i)), output);
  }

  // repeated .acu.hdmap.Id successor_id = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->successor_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->successor_id(static_cast<int>(i)), output);
  }

  // repeated .acu.hdmap.Id left_neighbor_forward_lane_id = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_neighbor_forward_lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->left_neighbor_forward_lane_id(static_cast<int>(i)), output);
  }

  // repeated .acu.hdmap.Id right_neighbor_forward_lane_id = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_neighbor_forward_lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->right_neighbor_forward_lane_id(static_cast<int>(i)), output);
  }

  // optional .acu.hdmap.Lane.LaneType type = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->type(), output);
  }

  // optional .acu.hdmap.Lane.LaneTurn turn = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->turn(), output);
  }

  // repeated .acu.hdmap.Id left_neighbor_reverse_lane_id = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_neighbor_reverse_lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->left_neighbor_reverse_lane_id(static_cast<int>(i)), output);
  }

  // repeated .acu.hdmap.Id right_neighbor_reverse_lane_id = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_neighbor_reverse_lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->right_neighbor_reverse_lane_id(static_cast<int>(i)), output);
  }

  // optional .acu.hdmap.Id junction_id = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->junction_id_, output);
  }

  // repeated .acu.hdmap.LaneSampleAssociation left_sample = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_sample_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->left_sample(static_cast<int>(i)), output);
  }

  // repeated .acu.hdmap.LaneSampleAssociation right_sample = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_sample_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->right_sample(static_cast<int>(i)), output);
  }

  // optional .acu.hdmap.Lane.LaneDirection direction = 19;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->direction(), output);
  }

  // repeated .acu.hdmap.LaneSampleAssociation left_road_sample = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_road_sample_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->left_road_sample(static_cast<int>(i)), output);
  }

  // repeated .acu.hdmap.LaneSampleAssociation right_road_sample = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_road_sample_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->right_road_sample(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.hdmap.Lane)
}

::google::protobuf::uint8* Lane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.hdmap.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->id_, deterministic, target);
  }

  // optional .acu.hdmap.Curve central_curve = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->central_curve_, deterministic, target);
  }

  // optional .acu.hdmap.LaneBoundary left_boundary = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->left_boundary_, deterministic, target);
  }

  // optional .acu.hdmap.LaneBoundary right_boundary = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->right_boundary_, deterministic, target);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->length(), target);
  }

  // optional double speed_limit = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->speed_limit(), target);
  }

  // repeated .acu.hdmap.Id overlap_id = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overlap_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->overlap_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .acu.hdmap.Id predecessor_id = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predecessor_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->predecessor_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .acu.hdmap.Id successor_id = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->successor_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->successor_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .acu.hdmap.Id left_neighbor_forward_lane_id = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_neighbor_forward_lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->left_neighbor_forward_lane_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .acu.hdmap.Id right_neighbor_forward_lane_id = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_neighbor_forward_lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->right_neighbor_forward_lane_id(static_cast<int>(i)), deterministic, target);
  }

  // optional .acu.hdmap.Lane.LaneType type = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->type(), target);
  }

  // optional .acu.hdmap.Lane.LaneTurn turn = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->turn(), target);
  }

  // repeated .acu.hdmap.Id left_neighbor_reverse_lane_id = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_neighbor_reverse_lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->left_neighbor_reverse_lane_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .acu.hdmap.Id right_neighbor_reverse_lane_id = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_neighbor_reverse_lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->right_neighbor_reverse_lane_id(static_cast<int>(i)), deterministic, target);
  }

  // optional .acu.hdmap.Id junction_id = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, *this->junction_id_, deterministic, target);
  }

  // repeated .acu.hdmap.LaneSampleAssociation left_sample = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_sample_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->left_sample(static_cast<int>(i)), deterministic, target);
  }

  // repeated .acu.hdmap.LaneSampleAssociation right_sample = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_sample_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->right_sample(static_cast<int>(i)), deterministic, target);
  }

  // optional .acu.hdmap.Lane.LaneDirection direction = 19;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->direction(), target);
  }

  // repeated .acu.hdmap.LaneSampleAssociation left_road_sample = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_road_sample_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->left_road_sample(static_cast<int>(i)), deterministic, target);
  }

  // repeated .acu.hdmap.LaneSampleAssociation right_road_sample = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_road_sample_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->right_road_sample(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.hdmap.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.hdmap.Lane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .acu.hdmap.Id overlap_id = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->overlap_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->overlap_id(static_cast<int>(i)));
    }
  }

  // repeated .acu.hdmap.Id predecessor_id = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->predecessor_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->predecessor_id(static_cast<int>(i)));
    }
  }

  // repeated .acu.hdmap.Id successor_id = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->successor_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->successor_id(static_cast<int>(i)));
    }
  }

  // repeated .acu.hdmap.Id left_neighbor_forward_lane_id = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->left_neighbor_forward_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->left_neighbor_forward_lane_id(static_cast<int>(i)));
    }
  }

  // repeated .acu.hdmap.Id right_neighbor_forward_lane_id = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->right_neighbor_forward_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->right_neighbor_forward_lane_id(static_cast<int>(i)));
    }
  }

  // repeated .acu.hdmap.Id left_neighbor_reverse_lane_id = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->left_neighbor_reverse_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->left_neighbor_reverse_lane_id(static_cast<int>(i)));
    }
  }

  // repeated .acu.hdmap.Id right_neighbor_reverse_lane_id = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->right_neighbor_reverse_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->right_neighbor_reverse_lane_id(static_cast<int>(i)));
    }
  }

  // repeated .acu.hdmap.LaneSampleAssociation left_sample = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->left_sample_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->left_sample(static_cast<int>(i)));
    }
  }

  // repeated .acu.hdmap.LaneSampleAssociation right_sample = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->right_sample_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->right_sample(static_cast<int>(i)));
    }
  }

  // repeated .acu.hdmap.LaneSampleAssociation left_road_sample = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->left_road_sample_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->left_road_sample(static_cast<int>(i)));
    }
  }

  // repeated .acu.hdmap.LaneSampleAssociation right_road_sample = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->right_road_sample_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->right_road_sample(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .acu.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->id_);
    }

    // optional .acu.hdmap.Curve central_curve = 2;
    if (has_central_curve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->central_curve_);
    }

    // optional .acu.hdmap.LaneBoundary left_boundary = 3;
    if (has_left_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->left_boundary_);
    }

    // optional .acu.hdmap.LaneBoundary right_boundary = 4;
    if (has_right_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->right_boundary_);
    }

    // optional .acu.hdmap.Id junction_id = 16;
    if (has_junction_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->junction_id_);
    }

    // optional double length = 5;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 6;
    if (has_speed_limit()) {
      total_size += 1 + 8;
    }

    // optional .acu.hdmap.Lane.LaneDirection direction = 19;
    if (has_direction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .acu.hdmap.Lane.LaneType type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .acu.hdmap.Lane.LaneTurn turn = 13;
    if (has_turn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.hdmap.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.hdmap.Lane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.hdmap.Lane)
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.hdmap.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  overlap_id_.MergeFrom(from.overlap_id_);
  predecessor_id_.MergeFrom(from.predecessor_id_);
  successor_id_.MergeFrom(from.successor_id_);
  left_neighbor_forward_lane_id_.MergeFrom(from.left_neighbor_forward_lane_id_);
  right_neighbor_forward_lane_id_.MergeFrom(from.right_neighbor_forward_lane_id_);
  left_neighbor_reverse_lane_id_.MergeFrom(from.left_neighbor_reverse_lane_id_);
  right_neighbor_reverse_lane_id_.MergeFrom(from.right_neighbor_reverse_lane_id_);
  left_sample_.MergeFrom(from.left_sample_);
  right_sample_.MergeFrom(from.right_sample_);
  left_road_sample_.MergeFrom(from.left_road_sample_);
  right_road_sample_.MergeFrom(from.right_road_sample_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::acu::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_central_curve()->::acu::hdmap::Curve::MergeFrom(from.central_curve());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_left_boundary()->::acu::hdmap::LaneBoundary::MergeFrom(from.left_boundary());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_right_boundary()->::acu::hdmap::LaneBoundary::MergeFrom(from.right_boundary());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_junction_id()->::acu::hdmap::Id::MergeFrom(from.junction_id());
    }
    if (cached_has_bits & 0x00000020u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000040u) {
      speed_limit_ = from.speed_limit_;
    }
    if (cached_has_bits & 0x00000080u) {
      direction_ = from.direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000200u) {
      turn_ = from.turn_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Lane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.hdmap.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.hdmap.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::Swap(Lane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lane::InternalSwap(Lane* other) {
  using std::swap;
  overlap_id_.InternalSwap(&other->overlap_id_);
  predecessor_id_.InternalSwap(&other->predecessor_id_);
  successor_id_.InternalSwap(&other->successor_id_);
  left_neighbor_forward_lane_id_.InternalSwap(&other->left_neighbor_forward_lane_id_);
  right_neighbor_forward_lane_id_.InternalSwap(&other->right_neighbor_forward_lane_id_);
  left_neighbor_reverse_lane_id_.InternalSwap(&other->left_neighbor_reverse_lane_id_);
  right_neighbor_reverse_lane_id_.InternalSwap(&other->right_neighbor_reverse_lane_id_);
  left_sample_.InternalSwap(&other->left_sample_);
  right_sample_.InternalSwap(&other->right_sample_);
  left_road_sample_.InternalSwap(&other->left_road_sample_);
  right_road_sample_.InternalSwap(&other->right_road_sample_);
  swap(id_, other->id_);
  swap(central_curve_, other->central_curve_);
  swap(left_boundary_, other->left_boundary_);
  swap(right_boundary_, other->right_boundary_);
  swap(junction_id_, other->junction_id_);
  swap(length_, other->length_);
  swap(speed_limit_, other->speed_limit_);
  swap(direction_, other->direction_);
  swap(type_, other->type_);
  swap(turn_, other->turn_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lane::GetMetadata() const {
  protobuf_map_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_map_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace acu

// @@protoc_insertion_point(global_scope)
