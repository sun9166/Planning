// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry.proto

#include "geometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace acu {
namespace common {
class PointENUDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PointENU>
      _instance;
} _PointENU_default_instance_;
class Point2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point2D>
      _instance;
} _Point2D_default_instance_;
class Point3DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point3D>
      _instance;
} _Point3D_default_instance_;
class UnsureVarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnsureVar>
      _instance;
} _UnsureVar_default_instance_;
class UnsurePointsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnsurePoints>
      _instance;
} _UnsurePoints_default_instance_;
class UnsurePositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnsurePosition>
      _instance;
} _UnsurePosition_default_instance_;
class Vector3DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vector3>
      _instance;
} _Vector3_default_instance_;
class QuaternionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Quaternion>
      _instance;
} _Quaternion_default_instance_;
class Vector3WithCovarianceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vector3WithCovariance>
      _instance;
} _Vector3WithCovariance_default_instance_;
class EulerWithCovarianceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EulerWithCovariance>
      _instance;
} _EulerWithCovariance_default_instance_;
class WheelSpeedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WheelSpeed>
      _instance;
} _WheelSpeed_default_instance_;
class PoseEulerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PoseEuler>
      _instance;
} _PoseEuler_default_instance_;
class PoseQuaternionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PoseQuaternion>
      _instance;
} _PoseQuaternion_default_instance_;
class TwistDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Twist>
      _instance;
} _Twist_default_instance_;
class PoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pose>
      _instance;
} _Pose_default_instance_;
class LLHDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LLH>
      _instance;
} _LLH_default_instance_;
class NavStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NavStatus>
      _instance;
} _NavStatus_default_instance_;
}  // namespace common
}  // namespace acu
namespace protobuf_geometry_2eproto {
void InitDefaultsPointENUImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::common::_PointENU_default_instance_;
    new (ptr) ::acu::common::PointENU();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::PointENU::InitAsDefaultInstance();
}

void InitDefaultsPointENU() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPointENUImpl);
}

void InitDefaultsPoint2DImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::common::_Point2D_default_instance_;
    new (ptr) ::acu::common::Point2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::Point2D::InitAsDefaultInstance();
}

void InitDefaultsPoint2D() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPoint2DImpl);
}

void InitDefaultsPoint3DImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::common::_Point3D_default_instance_;
    new (ptr) ::acu::common::Point3D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::Point3D::InitAsDefaultInstance();
}

void InitDefaultsPoint3D() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPoint3DImpl);
}

void InitDefaultsUnsureVarImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::common::_UnsureVar_default_instance_;
    new (ptr) ::acu::common::UnsureVar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::UnsureVar::InitAsDefaultInstance();
}

void InitDefaultsUnsureVar() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUnsureVarImpl);
}

void InitDefaultsUnsurePointsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_geometry_2eproto::InitDefaultsUnsureVar();
  {
    void* ptr = &::acu::common::_UnsurePoints_default_instance_;
    new (ptr) ::acu::common::UnsurePoints();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::UnsurePoints::InitAsDefaultInstance();
}

void InitDefaultsUnsurePoints() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUnsurePointsImpl);
}

void InitDefaultsUnsurePositionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_geometry_2eproto::InitDefaultsUnsurePoints();
  {
    void* ptr = &::acu::common::_UnsurePosition_default_instance_;
    new (ptr) ::acu::common::UnsurePosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::UnsurePosition::InitAsDefaultInstance();
}

void InitDefaultsUnsurePosition() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUnsurePositionImpl);
}

void InitDefaultsVector3Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::common::_Vector3_default_instance_;
    new (ptr) ::acu::common::Vector3();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::Vector3::InitAsDefaultInstance();
}

void InitDefaultsVector3() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVector3Impl);
}

void InitDefaultsQuaternionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::common::_Quaternion_default_instance_;
    new (ptr) ::acu::common::Quaternion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::Quaternion::InitAsDefaultInstance();
}

void InitDefaultsQuaternion() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQuaternionImpl);
}

void InitDefaultsVector3WithCovarianceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_geometry_2eproto::InitDefaultsUnsureVar();
  {
    void* ptr = &::acu::common::_Vector3WithCovariance_default_instance_;
    new (ptr) ::acu::common::Vector3WithCovariance();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::Vector3WithCovariance::InitAsDefaultInstance();
}

void InitDefaultsVector3WithCovariance() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVector3WithCovarianceImpl);
}

void InitDefaultsEulerWithCovarianceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_geometry_2eproto::InitDefaultsUnsureVar();
  {
    void* ptr = &::acu::common::_EulerWithCovariance_default_instance_;
    new (ptr) ::acu::common::EulerWithCovariance();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::EulerWithCovariance::InitAsDefaultInstance();
}

void InitDefaultsEulerWithCovariance() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEulerWithCovarianceImpl);
}

void InitDefaultsWheelSpeedImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_geometry_2eproto::InitDefaultsUnsureVar();
  {
    void* ptr = &::acu::common::_WheelSpeed_default_instance_;
    new (ptr) ::acu::common::WheelSpeed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::WheelSpeed::InitAsDefaultInstance();
}

void InitDefaultsWheelSpeed() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWheelSpeedImpl);
}

void InitDefaultsPoseEulerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_geometry_2eproto::InitDefaultsVector3WithCovariance();
  protobuf_geometry_2eproto::InitDefaultsEulerWithCovariance();
  {
    void* ptr = &::acu::common::_PoseEuler_default_instance_;
    new (ptr) ::acu::common::PoseEuler();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::PoseEuler::InitAsDefaultInstance();
}

void InitDefaultsPoseEuler() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPoseEulerImpl);
}

void InitDefaultsPoseQuaternionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_geometry_2eproto::InitDefaultsVector3WithCovariance();
  protobuf_geometry_2eproto::InitDefaultsQuaternion();
  protobuf_geometry_2eproto::InitDefaultsVector3();
  {
    void* ptr = &::acu::common::_PoseQuaternion_default_instance_;
    new (ptr) ::acu::common::PoseQuaternion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::PoseQuaternion::InitAsDefaultInstance();
}

void InitDefaultsPoseQuaternion() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPoseQuaternionImpl);
}

void InitDefaultsTwistImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_geometry_2eproto::InitDefaultsVector3WithCovariance();
  {
    void* ptr = &::acu::common::_Twist_default_instance_;
    new (ptr) ::acu::common::Twist();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::Twist::InitAsDefaultInstance();
}

void InitDefaultsTwist() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTwistImpl);
}

void InitDefaultsPoseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_geometry_2eproto::InitDefaultsPoseEuler();
  protobuf_geometry_2eproto::InitDefaultsPoseQuaternion();
  {
    void* ptr = &::acu::common::_Pose_default_instance_;
    new (ptr) ::acu::common::Pose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::Pose::InitAsDefaultInstance();
}

void InitDefaultsPose() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPoseImpl);
}

void InitDefaultsLLHImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_geometry_2eproto::InitDefaultsUnsureVar();
  {
    void* ptr = &::acu::common::_LLH_default_instance_;
    new (ptr) ::acu::common::LLH();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::LLH::InitAsDefaultInstance();
}

void InitDefaultsLLH() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLLHImpl);
}

void InitDefaultsNavStatusImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::acu::common::_NavStatus_default_instance_;
    new (ptr) ::acu::common::NavStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::acu::common::NavStatus::InitAsDefaultInstance();
}

void InitDefaultsNavStatus() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNavStatusImpl);
}

::google::protobuf::Metadata file_level_metadata[17];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PointENU, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PointENU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PointENU, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PointENU, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PointENU, z_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Point2D, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Point2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Point2D, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Point2D, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Point3D, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Point3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Point3D, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Point3D, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Point3D, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::UnsureVar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::UnsureVar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::UnsureVar, variable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::UnsureVar, var_std_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::UnsurePoints, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::UnsurePoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::UnsurePoints, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::UnsurePoints, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::UnsurePoints, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::UnsurePoints, rho_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::UnsurePosition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::UnsurePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::UnsurePosition, parking_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::UnsurePosition, point_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Vector3, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Vector3, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Vector3, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Vector3, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Quaternion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Quaternion, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Quaternion, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Quaternion, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Quaternion, w_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Vector3WithCovariance, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Vector3WithCovariance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Vector3WithCovariance, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Vector3WithCovariance, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Vector3WithCovariance, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::EulerWithCovariance, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::EulerWithCovariance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::EulerWithCovariance, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::EulerWithCovariance, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::EulerWithCovariance, yaw_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::WheelSpeed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::WheelSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::WheelSpeed, front_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::WheelSpeed, front_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::WheelSpeed, rear_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::WheelSpeed, rear_right_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PoseEuler, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PoseEuler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PoseEuler, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PoseEuler, rotation_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PoseQuaternion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PoseQuaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PoseQuaternion, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PoseQuaternion, quaternion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::PoseQuaternion, rpy_covariance_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Twist, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Twist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Twist, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Twist, angular_velocity_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Pose, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Pose, pose_euler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Pose, pose_quaternion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::Pose, status_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::LLH, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::LLH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::LLH, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::LLH, lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::LLH, height_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::NavStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::NavStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::NavStatus, utc_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::NavStatus, gps_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::NavStatus, pos_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::NavStatus, att_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::NavStatus, init_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::NavStatus, sate_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::NavStatus, hdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::NavStatus, pdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::acu::common::NavStatus, diff_age_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::acu::common::PointENU)},
  { 11, 18, sizeof(::acu::common::Point2D)},
  { 20, 28, sizeof(::acu::common::Point3D)},
  { 31, 38, sizeof(::acu::common::UnsureVar)},
  { 40, 49, sizeof(::acu::common::UnsurePoints)},
  { 53, 60, sizeof(::acu::common::UnsurePosition)},
  { 62, 70, sizeof(::acu::common::Vector3)},
  { 73, 82, sizeof(::acu::common::Quaternion)},
  { 86, 94, sizeof(::acu::common::Vector3WithCovariance)},
  { 97, 105, sizeof(::acu::common::EulerWithCovariance)},
  { 108, 117, sizeof(::acu::common::WheelSpeed)},
  { 121, 128, sizeof(::acu::common::PoseEuler)},
  { 130, 138, sizeof(::acu::common::PoseQuaternion)},
  { 141, 148, sizeof(::acu::common::Twist)},
  { 150, 158, sizeof(::acu::common::Pose)},
  { 161, 169, sizeof(::acu::common::LLH)},
  { 172, 186, sizeof(::acu::common::NavStatus)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_PointENU_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_Point2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_Point3D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_UnsureVar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_UnsurePoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_UnsurePosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_Vector3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_Quaternion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_Vector3WithCovariance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_EulerWithCovariance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_WheelSpeed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_PoseEuler_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_PoseQuaternion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_Twist_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_Pose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_LLH_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::acu::common::_NavStatus_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "geometry.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016geometry.proto\022\nacu.common\"8\n\010PointENU"
      "\022\016\n\001x\030\001 \001(\001:\003nan\022\016\n\001y\030\002 \001(\001:\003nan\022\014\n\001z\030\003 "
      "\001(\001:\0010\")\n\007Point2D\022\016\n\001x\030\001 \001(\001:\003nan\022\016\n\001y\030\002"
      " \001(\001:\003nan\"9\n\007Point3D\022\016\n\001x\030\001 \001(\001:\003nan\022\016\n\001"
      "y\030\002 \001(\001:\003nan\022\016\n\001z\030\003 \001(\001:\003nan\".\n\tUnsureVa"
      "r\022\020\n\010variable\030\001 \001(\001\022\017\n\007var_std\030\002 \001(\001\"\207\001\n"
      "\014UnsurePoints\022 \n\001x\030\001 \001(\0132\025.acu.common.Un"
      "sureVar\022 \n\001y\030\002 \001(\0132\025.acu.common.UnsureVa"
      "r\022&\n\007heading\030\003 \001(\0132\025.acu.common.UnsureVa"
      "r\022\013\n\003rho\030\004 \001(\001\"M\n\016UnsurePosition\022\022\n\npark"
      "ing_id\030\001 \001(\005\022\'\n\005point\030\002 \001(\0132\030.acu.common"
      ".UnsurePoints\"*\n\007Vector3\022\t\n\001x\030\001 \001(\001\022\t\n\001y"
      "\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"8\n\nQuaternion\022\t\n\001x\030\001 \001"
      "(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001w\030\004 \001(\001\"}\n\025V"
      "ector3WithCovariance\022 \n\001x\030\001 \001(\0132\025.acu.co"
      "mmon.UnsureVar\022 \n\001y\030\002 \001(\0132\025.acu.common.U"
      "nsureVar\022 \n\001z\030\003 \001(\0132\025.acu.common.UnsureV"
      "ar\"\204\001\n\023EulerWithCovariance\022#\n\004roll\030\001 \001(\013"
      "2\025.acu.common.UnsureVar\022$\n\005pitch\030\002 \001(\0132\025"
      ".acu.common.UnsureVar\022\"\n\003yaw\030\003 \001(\0132\025.acu"
      ".common.UnsureVar\"\270\001\n\nWheelSpeed\022)\n\nfron"
      "t_left\030\001 \001(\0132\025.acu.common.UnsureVar\022*\n\013f"
      "ront_right\030\002 \001(\0132\025.acu.common.UnsureVar\022"
      "(\n\trear_left\030\003 \001(\0132\025.acu.common.UnsureVa"
      "r\022)\n\nrear_right\030\004 \001(\0132\025.acu.common.Unsur"
      "eVar\"s\n\tPoseEuler\0223\n\010position\030\001 \001(\0132!.ac"
      "u.common.Vector3WithCovariance\0221\n\010rotati"
      "on\030\002 \001(\0132\037.acu.common.EulerWithCovarianc"
      "e\"\236\001\n\016PoseQuaternion\0223\n\010position\030\001 \001(\0132!"
      ".acu.common.Vector3WithCovariance\022*\n\nqua"
      "ternion\030\002 \001(\0132\026.acu.common.Quaternion\022+\n"
      "\016rpy_covariance\030\003 \001(\0132\023.acu.common.Vecto"
      "r3\"y\n\005Twist\0223\n\010velocity\030\001 \001(\0132!.acu.comm"
      "on.Vector3WithCovariance\022;\n\020angular_velo"
      "city\030\002 \001(\0132!.acu.common.Vector3WithCovar"
      "iance\"\216\001\n\004Pose\022)\n\npose_euler\030\001 \001(\0132\025.acu"
      ".common.PoseEuler\0223\n\017pose_quaternion\030\002 \001"
      "(\0132\032.acu.common.PoseQuaternion\022&\n\006status"
      "\030\003 \001(\0162\026.acu.common.PoseStatus\"t\n\003LLH\022\"\n"
      "\003lat\030\001 \001(\0132\025.acu.common.UnsureVar\022\"\n\003lon"
      "\030\002 \001(\0132\025.acu.common.UnsureVar\022%\n\006height\030"
      "\003 \001(\0132\025.acu.common.UnsureVar\"\305\001\n\tNavStat"
      "us\022\020\n\010utc_time\030\001 \001(\001\022)\n\ngps_status\030\002 \001(\016"
      "2\025.acu.common.GpsStatus\022\022\n\npos_status\030\003 "
      "\001(\005\022\022\n\natt_status\030\004 \001(\005\022\023\n\013init_status\030\005"
      " \001(\005\022\020\n\010sate_num\030\006 \001(\005\022\014\n\004hdop\030\007 \001(\002\022\014\n\004"
      "pdop\030\010 \001(\002\022\020\n\010diff_age\030\t \001(\002*#\n\nPoseStat"
      "us\022\n\n\006NORMAL\020\000\022\t\n\005ERROR\020\001*`\n\tGpsStatus\022\t"
      "\n\005NOFIX\020\000\022\n\n\006SINGLE\020\001\022\013\n\007PSRDIFF\020\002\022\r\n\tCO"
      "DE_DIFF\020\003\022\016\n\nNARROW_INT\020\004\022\020\n\014NARROW_FLOA"
      "T\020\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2003);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "geometry.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_geometry_2eproto
namespace acu {
namespace common {
const ::google::protobuf::EnumDescriptor* PoseStatus_descriptor() {
  protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometry_2eproto::file_level_enum_descriptors[0];
}
bool PoseStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GpsStatus_descriptor() {
  protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometry_2eproto::file_level_enum_descriptors[1];
}
bool GpsStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PointENU::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointENU::kXFieldNumber;
const int PointENU::kYFieldNumber;
const int PointENU::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointENU::PointENU()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_geometry_2eproto::InitDefaultsPointENU();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.PointENU)
}
PointENU::PointENU(const PointENU& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&z_, &from.z_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&z_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:acu.common.PointENU)
}

void PointENU::SharedCtor() {
  _cached_size_ = 0;
  z_ = 0;
  x_ = ::google::protobuf::internal::NaN();
  y_ = ::google::protobuf::internal::NaN();
}

PointENU::~PointENU() {
  // @@protoc_insertion_point(destructor:acu.common.PointENU)
  SharedDtor();
}

void PointENU::SharedDtor() {
}

void PointENU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointENU::descriptor() {
  ::protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PointENU& PointENU::default_instance() {
  ::protobuf_geometry_2eproto::InitDefaultsPointENU();
  return *internal_default_instance();
}

PointENU* PointENU::New(::google::protobuf::Arena* arena) const {
  PointENU* n = new PointENU;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointENU::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.PointENU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    z_ = 0;
    x_ = ::google::protobuf::internal::NaN();
    y_ = ::google::protobuf::internal::NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PointENU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.PointENU)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = nan];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = nan];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.PointENU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.PointENU)
  return false;
#undef DO_
}

void PointENU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.PointENU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = nan];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.PointENU)
}

::google::protobuf::uint8* PointENU::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.PointENU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = nan];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.PointENU)
  return target;
}

size_t PointENU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.PointENU)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double x = 1 [default = nan];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = nan];
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointENU::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.PointENU)
  GOOGLE_DCHECK_NE(&from, this);
  const PointENU* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointENU>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.PointENU)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.PointENU)
    MergeFrom(*source);
  }
}

void PointENU::MergeFrom(const PointENU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.PointENU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PointENU::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.PointENU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointENU::CopyFrom(const PointENU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.PointENU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointENU::IsInitialized() const {
  return true;
}

void PointENU::Swap(PointENU* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointENU::InternalSwap(PointENU* other) {
  using std::swap;
  swap(z_, other->z_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointENU::GetMetadata() const {
  protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Point2D::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point2D::kXFieldNumber;
const int Point2D::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point2D::Point2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_geometry_2eproto::InitDefaultsPoint2D();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.Point2D)
}
Point2D::Point2D(const Point2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:acu.common.Point2D)
}

void Point2D::SharedCtor() {
  _cached_size_ = 0;
  x_ = ::google::protobuf::internal::NaN();
  y_ = ::google::protobuf::internal::NaN();
}

Point2D::~Point2D() {
  // @@protoc_insertion_point(destructor:acu.common.Point2D)
  SharedDtor();
}

void Point2D::SharedDtor() {
}

void Point2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point2D::descriptor() {
  ::protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point2D& Point2D::default_instance() {
  ::protobuf_geometry_2eproto::InitDefaultsPoint2D();
  return *internal_default_instance();
}

Point2D* Point2D::New(::google::protobuf::Arena* arena) const {
  Point2D* n = new Point2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point2D::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.Point2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    x_ = ::google::protobuf::internal::NaN();
    y_ = ::google::protobuf::internal::NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.Point2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = nan];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = nan];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.Point2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.Point2D)
  return false;
#undef DO_
}

void Point2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.Point2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = nan];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.Point2D)
}

::google::protobuf::uint8* Point2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.Point2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = nan];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.Point2D)
  return target;
}

size_t Point2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.Point2D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double x = 1 [default = nan];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = nan];
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Point2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.Point2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.Point2D)
    MergeFrom(*source);
  }
}

void Point2D::MergeFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2D::CopyFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2D::IsInitialized() const {
  return true;
}

void Point2D::Swap(Point2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point2D::InternalSwap(Point2D* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point2D::GetMetadata() const {
  protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Point3D::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point3D::kXFieldNumber;
const int Point3D::kYFieldNumber;
const int Point3D::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point3D::Point3D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_geometry_2eproto::InitDefaultsPoint3D();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.Point3D)
}
Point3D::Point3D(const Point3D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:acu.common.Point3D)
}

void Point3D::SharedCtor() {
  _cached_size_ = 0;
  x_ = ::google::protobuf::internal::NaN();
  y_ = ::google::protobuf::internal::NaN();
  z_ = ::google::protobuf::internal::NaN();
}

Point3D::~Point3D() {
  // @@protoc_insertion_point(destructor:acu.common.Point3D)
  SharedDtor();
}

void Point3D::SharedDtor() {
}

void Point3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point3D::descriptor() {
  ::protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point3D& Point3D::default_instance() {
  ::protobuf_geometry_2eproto::InitDefaultsPoint3D();
  return *internal_default_instance();
}

Point3D* Point3D::New(::google::protobuf::Arena* arena) const {
  Point3D* n = new Point3D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point3D::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.Point3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    x_ = ::google::protobuf::internal::NaN();
    y_ = ::google::protobuf::internal::NaN();
    z_ = ::google::protobuf::internal::NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.Point3D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = nan];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = nan];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3 [default = nan];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.Point3D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.Point3D)
  return false;
#undef DO_
}

void Point3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.Point3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = nan];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3 [default = nan];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.Point3D)
}

::google::protobuf::uint8* Point3D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.Point3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = nan];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3 [default = nan];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.Point3D)
  return target;
}

size_t Point3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.Point3D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1 [default = nan];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = nan];
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = nan];
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point3D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.Point3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Point3D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point3D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.Point3D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.Point3D)
    MergeFrom(*source);
  }
}

void Point3D::MergeFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.Point3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point3D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.Point3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3D::CopyFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.Point3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3D::IsInitialized() const {
  return true;
}

void Point3D::Swap(Point3D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point3D::InternalSwap(Point3D* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point3D::GetMetadata() const {
  protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UnsureVar::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnsureVar::kVariableFieldNumber;
const int UnsureVar::kVarStdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnsureVar::UnsureVar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_geometry_2eproto::InitDefaultsUnsureVar();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.UnsureVar)
}
UnsureVar::UnsureVar(const UnsureVar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&variable_, &from.variable_,
    static_cast<size_t>(reinterpret_cast<char*>(&var_std_) -
    reinterpret_cast<char*>(&variable_)) + sizeof(var_std_));
  // @@protoc_insertion_point(copy_constructor:acu.common.UnsureVar)
}

void UnsureVar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&variable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_std_) -
      reinterpret_cast<char*>(&variable_)) + sizeof(var_std_));
}

UnsureVar::~UnsureVar() {
  // @@protoc_insertion_point(destructor:acu.common.UnsureVar)
  SharedDtor();
}

void UnsureVar::SharedDtor() {
}

void UnsureVar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsureVar::descriptor() {
  ::protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnsureVar& UnsureVar::default_instance() {
  ::protobuf_geometry_2eproto::InitDefaultsUnsureVar();
  return *internal_default_instance();
}

UnsureVar* UnsureVar::New(::google::protobuf::Arena* arena) const {
  UnsureVar* n = new UnsureVar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnsureVar::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.UnsureVar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&variable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_std_) -
        reinterpret_cast<char*>(&variable_)) + sizeof(var_std_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnsureVar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.UnsureVar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double variable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_variable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &variable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double var_std = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_var_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &var_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.UnsureVar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.UnsureVar)
  return false;
#undef DO_
}

void UnsureVar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.UnsureVar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double variable = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->variable(), output);
  }

  // optional double var_std = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->var_std(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.UnsureVar)
}

::google::protobuf::uint8* UnsureVar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.UnsureVar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double variable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->variable(), target);
  }

  // optional double var_std = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->var_std(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.UnsureVar)
  return target;
}

size_t UnsureVar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.UnsureVar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double variable = 1;
    if (has_variable()) {
      total_size += 1 + 8;
    }

    // optional double var_std = 2;
    if (has_var_std()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsureVar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.UnsureVar)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsureVar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnsureVar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.UnsureVar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.UnsureVar)
    MergeFrom(*source);
  }
}

void UnsureVar::MergeFrom(const UnsureVar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.UnsureVar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      variable_ = from.variable_;
    }
    if (cached_has_bits & 0x00000002u) {
      var_std_ = from.var_std_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnsureVar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.UnsureVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsureVar::CopyFrom(const UnsureVar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.UnsureVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsureVar::IsInitialized() const {
  return true;
}

void UnsureVar::Swap(UnsureVar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnsureVar::InternalSwap(UnsureVar* other) {
  using std::swap;
  swap(variable_, other->variable_);
  swap(var_std_, other->var_std_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnsureVar::GetMetadata() const {
  protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UnsurePoints::InitAsDefaultInstance() {
  ::acu::common::_UnsurePoints_default_instance_._instance.get_mutable()->x_ = const_cast< ::acu::common::UnsureVar*>(
      ::acu::common::UnsureVar::internal_default_instance());
  ::acu::common::_UnsurePoints_default_instance_._instance.get_mutable()->y_ = const_cast< ::acu::common::UnsureVar*>(
      ::acu::common::UnsureVar::internal_default_instance());
  ::acu::common::_UnsurePoints_default_instance_._instance.get_mutable()->heading_ = const_cast< ::acu::common::UnsureVar*>(
      ::acu::common::UnsureVar::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnsurePoints::kXFieldNumber;
const int UnsurePoints::kYFieldNumber;
const int UnsurePoints::kHeadingFieldNumber;
const int UnsurePoints::kRhoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnsurePoints::UnsurePoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_geometry_2eproto::InitDefaultsUnsurePoints();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.UnsurePoints)
}
UnsurePoints::UnsurePoints(const UnsurePoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_x()) {
    x_ = new ::acu::common::UnsureVar(*from.x_);
  } else {
    x_ = NULL;
  }
  if (from.has_y()) {
    y_ = new ::acu::common::UnsureVar(*from.y_);
  } else {
    y_ = NULL;
  }
  if (from.has_heading()) {
    heading_ = new ::acu::common::UnsureVar(*from.heading_);
  } else {
    heading_ = NULL;
  }
  rho_ = from.rho_;
  // @@protoc_insertion_point(copy_constructor:acu.common.UnsurePoints)
}

void UnsurePoints::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rho_) -
      reinterpret_cast<char*>(&x_)) + sizeof(rho_));
}

UnsurePoints::~UnsurePoints() {
  // @@protoc_insertion_point(destructor:acu.common.UnsurePoints)
  SharedDtor();
}

void UnsurePoints::SharedDtor() {
  if (this != internal_default_instance()) delete x_;
  if (this != internal_default_instance()) delete y_;
  if (this != internal_default_instance()) delete heading_;
}

void UnsurePoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsurePoints::descriptor() {
  ::protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnsurePoints& UnsurePoints::default_instance() {
  ::protobuf_geometry_2eproto::InitDefaultsUnsurePoints();
  return *internal_default_instance();
}

UnsurePoints* UnsurePoints::New(::google::protobuf::Arena* arena) const {
  UnsurePoints* n = new UnsurePoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnsurePoints::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.UnsurePoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(x_ != NULL);
      x_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(y_ != NULL);
      y_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(heading_ != NULL);
      heading_->Clear();
    }
  }
  rho_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnsurePoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.UnsurePoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.common.UnsureVar x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.UnsureVar y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.UnsureVar heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heading()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rho = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_rho();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rho_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.UnsurePoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.UnsurePoints)
  return false;
#undef DO_
}

void UnsurePoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.UnsurePoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.UnsureVar x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->x_, output);
  }

  // optional .acu.common.UnsureVar y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->y_, output);
  }

  // optional .acu.common.UnsureVar heading = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->heading_, output);
  }

  // optional double rho = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rho(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.UnsurePoints)
}

::google::protobuf::uint8* UnsurePoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.UnsurePoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.UnsureVar x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->x_, deterministic, target);
  }

  // optional .acu.common.UnsureVar y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->y_, deterministic, target);
  }

  // optional .acu.common.UnsureVar heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->heading_, deterministic, target);
  }

  // optional double rho = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rho(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.UnsurePoints)
  return target;
}

size_t UnsurePoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.UnsurePoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .acu.common.UnsureVar x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->x_);
    }

    // optional .acu.common.UnsureVar y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->y_);
    }

    // optional .acu.common.UnsureVar heading = 3;
    if (has_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->heading_);
    }

    // optional double rho = 4;
    if (has_rho()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsurePoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.UnsurePoints)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsurePoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnsurePoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.UnsurePoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.UnsurePoints)
    MergeFrom(*source);
  }
}

void UnsurePoints::MergeFrom(const UnsurePoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.UnsurePoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_x()->::acu::common::UnsureVar::MergeFrom(from.x());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_y()->::acu::common::UnsureVar::MergeFrom(from.y());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_heading()->::acu::common::UnsureVar::MergeFrom(from.heading());
    }
    if (cached_has_bits & 0x00000008u) {
      rho_ = from.rho_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnsurePoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.UnsurePoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsurePoints::CopyFrom(const UnsurePoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.UnsurePoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsurePoints::IsInitialized() const {
  return true;
}

void UnsurePoints::Swap(UnsurePoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnsurePoints::InternalSwap(UnsurePoints* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(heading_, other->heading_);
  swap(rho_, other->rho_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnsurePoints::GetMetadata() const {
  protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UnsurePosition::InitAsDefaultInstance() {
  ::acu::common::_UnsurePosition_default_instance_._instance.get_mutable()->point_ = const_cast< ::acu::common::UnsurePoints*>(
      ::acu::common::UnsurePoints::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnsurePosition::kParkingIdFieldNumber;
const int UnsurePosition::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnsurePosition::UnsurePosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_geometry_2eproto::InitDefaultsUnsurePosition();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.UnsurePosition)
}
UnsurePosition::UnsurePosition(const UnsurePosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_point()) {
    point_ = new ::acu::common::UnsurePoints(*from.point_);
  } else {
    point_ = NULL;
  }
  parking_id_ = from.parking_id_;
  // @@protoc_insertion_point(copy_constructor:acu.common.UnsurePosition)
}

void UnsurePosition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parking_id_) -
      reinterpret_cast<char*>(&point_)) + sizeof(parking_id_));
}

UnsurePosition::~UnsurePosition() {
  // @@protoc_insertion_point(destructor:acu.common.UnsurePosition)
  SharedDtor();
}

void UnsurePosition::SharedDtor() {
  if (this != internal_default_instance()) delete point_;
}

void UnsurePosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsurePosition::descriptor() {
  ::protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnsurePosition& UnsurePosition::default_instance() {
  ::protobuf_geometry_2eproto::InitDefaultsUnsurePosition();
  return *internal_default_instance();
}

UnsurePosition* UnsurePosition::New(::google::protobuf::Arena* arena) const {
  UnsurePosition* n = new UnsurePosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnsurePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.UnsurePosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(point_ != NULL);
    point_->Clear();
  }
  parking_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnsurePosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.UnsurePosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 parking_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_parking_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parking_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.UnsurePoints point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.UnsurePosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.UnsurePosition)
  return false;
#undef DO_
}

void UnsurePosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.UnsurePosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 parking_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->parking_id(), output);
  }

  // optional .acu.common.UnsurePoints point = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->point_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.UnsurePosition)
}

::google::protobuf::uint8* UnsurePosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.UnsurePosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 parking_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->parking_id(), target);
  }

  // optional .acu.common.UnsurePoints point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->point_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.UnsurePosition)
  return target;
}

size_t UnsurePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.UnsurePosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .acu.common.UnsurePoints point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->point_);
    }

    // optional int32 parking_id = 1;
    if (has_parking_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parking_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsurePosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.UnsurePosition)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsurePosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnsurePosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.UnsurePosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.UnsurePosition)
    MergeFrom(*source);
  }
}

void UnsurePosition::MergeFrom(const UnsurePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.UnsurePosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_point()->::acu::common::UnsurePoints::MergeFrom(from.point());
    }
    if (cached_has_bits & 0x00000002u) {
      parking_id_ = from.parking_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnsurePosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.UnsurePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsurePosition::CopyFrom(const UnsurePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.UnsurePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsurePosition::IsInitialized() const {
  return true;
}

void UnsurePosition::Swap(UnsurePosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnsurePosition::InternalSwap(UnsurePosition* other) {
  using std::swap;
  swap(point_, other->point_);
  swap(parking_id_, other->parking_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnsurePosition::GetMetadata() const {
  protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vector3::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3::Vector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_geometry_2eproto::InitDefaultsVector3();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:acu.common.Vector3)
}

void Vector3::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:acu.common.Vector3)
  SharedDtor();
}

void Vector3::SharedDtor() {
}

void Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  ::protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector3& Vector3::default_instance() {
  ::protobuf_geometry_2eproto::InitDefaultsVector3();
  return *internal_default_instance();
}

Vector3* Vector3::New(::google::protobuf::Arena* arena) const {
  Vector3* n = new Vector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.Vector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.Vector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.Vector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.Vector3)
  return false;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.Vector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.Vector3)
}

::google::protobuf::uint8* Vector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.Vector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.Vector3)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.Vector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Quaternion::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quaternion::kXFieldNumber;
const int Quaternion::kYFieldNumber;
const int Quaternion::kZFieldNumber;
const int Quaternion::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quaternion::Quaternion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_geometry_2eproto::InitDefaultsQuaternion();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:acu.common.Quaternion)
}

void Quaternion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:acu.common.Quaternion)
  SharedDtor();
}

void Quaternion::SharedDtor() {
}

void Quaternion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quaternion::descriptor() {
  ::protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Quaternion& Quaternion::default_instance() {
  ::protobuf_geometry_2eproto::InitDefaultsQuaternion();
  return *internal_default_instance();
}

Quaternion* Quaternion::New(::google::protobuf::Arena* arena) const {
  Quaternion* n = new Quaternion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&w_) -
        reinterpret_cast<char*>(&x_)) + sizeof(w_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Quaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.Quaternion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double w = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.Quaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.Quaternion)
  return false;
#undef DO_
}

void Quaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double w = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.Quaternion)
}

::google::protobuf::uint8* Quaternion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double w = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.Quaternion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double w = 4;
    if (has_w()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quaternion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Quaternion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.Quaternion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.Quaternion)
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      w_ = from.w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Quaternion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::Swap(Quaternion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(w_, other->w_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vector3WithCovariance::InitAsDefaultInstance() {
  ::acu::common::_Vector3WithCovariance_default_instance_._instance.get_mutable()->x_ = const_cast< ::acu::common::UnsureVar*>(
      ::acu::common::UnsureVar::internal_default_instance());
  ::acu::common::_Vector3WithCovariance_default_instance_._instance.get_mutable()->y_ = const_cast< ::acu::common::UnsureVar*>(
      ::acu::common::UnsureVar::internal_default_instance());
  ::acu::common::_Vector3WithCovariance_default_instance_._instance.get_mutable()->z_ = const_cast< ::acu::common::UnsureVar*>(
      ::acu::common::UnsureVar::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3WithCovariance::kXFieldNumber;
const int Vector3WithCovariance::kYFieldNumber;
const int Vector3WithCovariance::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3WithCovariance::Vector3WithCovariance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_geometry_2eproto::InitDefaultsVector3WithCovariance();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.Vector3WithCovariance)
}
Vector3WithCovariance::Vector3WithCovariance(const Vector3WithCovariance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_x()) {
    x_ = new ::acu::common::UnsureVar(*from.x_);
  } else {
    x_ = NULL;
  }
  if (from.has_y()) {
    y_ = new ::acu::common::UnsureVar(*from.y_);
  } else {
    y_ = NULL;
  }
  if (from.has_z()) {
    z_ = new ::acu::common::UnsureVar(*from.z_);
  } else {
    z_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:acu.common.Vector3WithCovariance)
}

void Vector3WithCovariance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3WithCovariance::~Vector3WithCovariance() {
  // @@protoc_insertion_point(destructor:acu.common.Vector3WithCovariance)
  SharedDtor();
}

void Vector3WithCovariance::SharedDtor() {
  if (this != internal_default_instance()) delete x_;
  if (this != internal_default_instance()) delete y_;
  if (this != internal_default_instance()) delete z_;
}

void Vector3WithCovariance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3WithCovariance::descriptor() {
  ::protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector3WithCovariance& Vector3WithCovariance::default_instance() {
  ::protobuf_geometry_2eproto::InitDefaultsVector3WithCovariance();
  return *internal_default_instance();
}

Vector3WithCovariance* Vector3WithCovariance::New(::google::protobuf::Arena* arena) const {
  Vector3WithCovariance* n = new Vector3WithCovariance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3WithCovariance::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.Vector3WithCovariance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(x_ != NULL);
      x_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(y_ != NULL);
      y_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(z_ != NULL);
      z_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vector3WithCovariance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.Vector3WithCovariance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.common.UnsureVar x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.UnsureVar y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.UnsureVar z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_z()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.Vector3WithCovariance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.Vector3WithCovariance)
  return false;
#undef DO_
}

void Vector3WithCovariance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.Vector3WithCovariance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.UnsureVar x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->x_, output);
  }

  // optional .acu.common.UnsureVar y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->y_, output);
  }

  // optional .acu.common.UnsureVar z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->z_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.Vector3WithCovariance)
}

::google::protobuf::uint8* Vector3WithCovariance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.Vector3WithCovariance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.UnsureVar x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->x_, deterministic, target);
  }

  // optional .acu.common.UnsureVar y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->y_, deterministic, target);
  }

  // optional .acu.common.UnsureVar z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->z_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.Vector3WithCovariance)
  return target;
}

size_t Vector3WithCovariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.Vector3WithCovariance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .acu.common.UnsureVar x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->x_);
    }

    // optional .acu.common.UnsureVar y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->y_);
    }

    // optional .acu.common.UnsureVar z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->z_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3WithCovariance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.Vector3WithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3WithCovariance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3WithCovariance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.Vector3WithCovariance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.Vector3WithCovariance)
    MergeFrom(*source);
  }
}

void Vector3WithCovariance::MergeFrom(const Vector3WithCovariance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.Vector3WithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_x()->::acu::common::UnsureVar::MergeFrom(from.x());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_y()->::acu::common::UnsureVar::MergeFrom(from.y());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_z()->::acu::common::UnsureVar::MergeFrom(from.z());
    }
  }
}

void Vector3WithCovariance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.Vector3WithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3WithCovariance::CopyFrom(const Vector3WithCovariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.Vector3WithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3WithCovariance::IsInitialized() const {
  return true;
}

void Vector3WithCovariance::Swap(Vector3WithCovariance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3WithCovariance::InternalSwap(Vector3WithCovariance* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3WithCovariance::GetMetadata() const {
  protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EulerWithCovariance::InitAsDefaultInstance() {
  ::acu::common::_EulerWithCovariance_default_instance_._instance.get_mutable()->roll_ = const_cast< ::acu::common::UnsureVar*>(
      ::acu::common::UnsureVar::internal_default_instance());
  ::acu::common::_EulerWithCovariance_default_instance_._instance.get_mutable()->pitch_ = const_cast< ::acu::common::UnsureVar*>(
      ::acu::common::UnsureVar::internal_default_instance());
  ::acu::common::_EulerWithCovariance_default_instance_._instance.get_mutable()->yaw_ = const_cast< ::acu::common::UnsureVar*>(
      ::acu::common::UnsureVar::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EulerWithCovariance::kRollFieldNumber;
const int EulerWithCovariance::kPitchFieldNumber;
const int EulerWithCovariance::kYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EulerWithCovariance::EulerWithCovariance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_geometry_2eproto::InitDefaultsEulerWithCovariance();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.EulerWithCovariance)
}
EulerWithCovariance::EulerWithCovariance(const EulerWithCovariance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_roll()) {
    roll_ = new ::acu::common::UnsureVar(*from.roll_);
  } else {
    roll_ = NULL;
  }
  if (from.has_pitch()) {
    pitch_ = new ::acu::common::UnsureVar(*from.pitch_);
  } else {
    pitch_ = NULL;
  }
  if (from.has_yaw()) {
    yaw_ = new ::acu::common::UnsureVar(*from.yaw_);
  } else {
    yaw_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:acu.common.EulerWithCovariance)
}

void EulerWithCovariance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&roll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
}

EulerWithCovariance::~EulerWithCovariance() {
  // @@protoc_insertion_point(destructor:acu.common.EulerWithCovariance)
  SharedDtor();
}

void EulerWithCovariance::SharedDtor() {
  if (this != internal_default_instance()) delete roll_;
  if (this != internal_default_instance()) delete pitch_;
  if (this != internal_default_instance()) delete yaw_;
}

void EulerWithCovariance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EulerWithCovariance::descriptor() {
  ::protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EulerWithCovariance& EulerWithCovariance::default_instance() {
  ::protobuf_geometry_2eproto::InitDefaultsEulerWithCovariance();
  return *internal_default_instance();
}

EulerWithCovariance* EulerWithCovariance::New(::google::protobuf::Arena* arena) const {
  EulerWithCovariance* n = new EulerWithCovariance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EulerWithCovariance::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.EulerWithCovariance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(roll_ != NULL);
      roll_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pitch_ != NULL);
      pitch_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(yaw_ != NULL);
      yaw_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EulerWithCovariance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.EulerWithCovariance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.common.UnsureVar roll = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roll()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.UnsureVar pitch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pitch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.UnsureVar yaw = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yaw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.EulerWithCovariance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.EulerWithCovariance)
  return false;
#undef DO_
}

void EulerWithCovariance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.EulerWithCovariance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.UnsureVar roll = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->roll_, output);
  }

  // optional .acu.common.UnsureVar pitch = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pitch_, output);
  }

  // optional .acu.common.UnsureVar yaw = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->yaw_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.EulerWithCovariance)
}

::google::protobuf::uint8* EulerWithCovariance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.EulerWithCovariance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.UnsureVar roll = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->roll_, deterministic, target);
  }

  // optional .acu.common.UnsureVar pitch = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->pitch_, deterministic, target);
  }

  // optional .acu.common.UnsureVar yaw = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->yaw_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.EulerWithCovariance)
  return target;
}

size_t EulerWithCovariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.EulerWithCovariance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .acu.common.UnsureVar roll = 1;
    if (has_roll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->roll_);
    }

    // optional .acu.common.UnsureVar pitch = 2;
    if (has_pitch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->pitch_);
    }

    // optional .acu.common.UnsureVar yaw = 3;
    if (has_yaw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->yaw_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EulerWithCovariance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.EulerWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  const EulerWithCovariance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EulerWithCovariance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.EulerWithCovariance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.EulerWithCovariance)
    MergeFrom(*source);
  }
}

void EulerWithCovariance::MergeFrom(const EulerWithCovariance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.EulerWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_roll()->::acu::common::UnsureVar::MergeFrom(from.roll());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pitch()->::acu::common::UnsureVar::MergeFrom(from.pitch());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_yaw()->::acu::common::UnsureVar::MergeFrom(from.yaw());
    }
  }
}

void EulerWithCovariance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.EulerWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EulerWithCovariance::CopyFrom(const EulerWithCovariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.EulerWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EulerWithCovariance::IsInitialized() const {
  return true;
}

void EulerWithCovariance::Swap(EulerWithCovariance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EulerWithCovariance::InternalSwap(EulerWithCovariance* other) {
  using std::swap;
  swap(roll_, other->roll_);
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EulerWithCovariance::GetMetadata() const {
  protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WheelSpeed::InitAsDefaultInstance() {
  ::acu::common::_WheelSpeed_default_instance_._instance.get_mutable()->front_left_ = const_cast< ::acu::common::UnsureVar*>(
      ::acu::common::UnsureVar::internal_default_instance());
  ::acu::common::_WheelSpeed_default_instance_._instance.get_mutable()->front_right_ = const_cast< ::acu::common::UnsureVar*>(
      ::acu::common::UnsureVar::internal_default_instance());
  ::acu::common::_WheelSpeed_default_instance_._instance.get_mutable()->rear_left_ = const_cast< ::acu::common::UnsureVar*>(
      ::acu::common::UnsureVar::internal_default_instance());
  ::acu::common::_WheelSpeed_default_instance_._instance.get_mutable()->rear_right_ = const_cast< ::acu::common::UnsureVar*>(
      ::acu::common::UnsureVar::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WheelSpeed::kFrontLeftFieldNumber;
const int WheelSpeed::kFrontRightFieldNumber;
const int WheelSpeed::kRearLeftFieldNumber;
const int WheelSpeed::kRearRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WheelSpeed::WheelSpeed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_geometry_2eproto::InitDefaultsWheelSpeed();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.WheelSpeed)
}
WheelSpeed::WheelSpeed(const WheelSpeed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_front_left()) {
    front_left_ = new ::acu::common::UnsureVar(*from.front_left_);
  } else {
    front_left_ = NULL;
  }
  if (from.has_front_right()) {
    front_right_ = new ::acu::common::UnsureVar(*from.front_right_);
  } else {
    front_right_ = NULL;
  }
  if (from.has_rear_left()) {
    rear_left_ = new ::acu::common::UnsureVar(*from.rear_left_);
  } else {
    rear_left_ = NULL;
  }
  if (from.has_rear_right()) {
    rear_right_ = new ::acu::common::UnsureVar(*from.rear_right_);
  } else {
    rear_right_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:acu.common.WheelSpeed)
}

void WheelSpeed::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&front_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rear_right_) -
      reinterpret_cast<char*>(&front_left_)) + sizeof(rear_right_));
}

WheelSpeed::~WheelSpeed() {
  // @@protoc_insertion_point(destructor:acu.common.WheelSpeed)
  SharedDtor();
}

void WheelSpeed::SharedDtor() {
  if (this != internal_default_instance()) delete front_left_;
  if (this != internal_default_instance()) delete front_right_;
  if (this != internal_default_instance()) delete rear_left_;
  if (this != internal_default_instance()) delete rear_right_;
}

void WheelSpeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WheelSpeed::descriptor() {
  ::protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WheelSpeed& WheelSpeed::default_instance() {
  ::protobuf_geometry_2eproto::InitDefaultsWheelSpeed();
  return *internal_default_instance();
}

WheelSpeed* WheelSpeed::New(::google::protobuf::Arena* arena) const {
  WheelSpeed* n = new WheelSpeed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WheelSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.WheelSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(front_left_ != NULL);
      front_left_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(front_right_ != NULL);
      front_right_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rear_left_ != NULL);
      rear_left_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rear_right_ != NULL);
      rear_right_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WheelSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.WheelSpeed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.common.UnsureVar front_left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_front_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.UnsureVar front_right = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_front_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.UnsureVar rear_left = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rear_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.UnsureVar rear_right = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rear_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.WheelSpeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.WheelSpeed)
  return false;
#undef DO_
}

void WheelSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.WheelSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.UnsureVar front_left = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->front_left_, output);
  }

  // optional .acu.common.UnsureVar front_right = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->front_right_, output);
  }

  // optional .acu.common.UnsureVar rear_left = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rear_left_, output);
  }

  // optional .acu.common.UnsureVar rear_right = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->rear_right_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.WheelSpeed)
}

::google::protobuf::uint8* WheelSpeed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.WheelSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.UnsureVar front_left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->front_left_, deterministic, target);
  }

  // optional .acu.common.UnsureVar front_right = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->front_right_, deterministic, target);
  }

  // optional .acu.common.UnsureVar rear_left = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->rear_left_, deterministic, target);
  }

  // optional .acu.common.UnsureVar rear_right = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->rear_right_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.WheelSpeed)
  return target;
}

size_t WheelSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.WheelSpeed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .acu.common.UnsureVar front_left = 1;
    if (has_front_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->front_left_);
    }

    // optional .acu.common.UnsureVar front_right = 2;
    if (has_front_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->front_right_);
    }

    // optional .acu.common.UnsureVar rear_left = 3;
    if (has_rear_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->rear_left_);
    }

    // optional .acu.common.UnsureVar rear_right = 4;
    if (has_rear_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->rear_right_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WheelSpeed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.WheelSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  const WheelSpeed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WheelSpeed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.WheelSpeed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.WheelSpeed)
    MergeFrom(*source);
  }
}

void WheelSpeed::MergeFrom(const WheelSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.WheelSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_front_left()->::acu::common::UnsureVar::MergeFrom(from.front_left());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_front_right()->::acu::common::UnsureVar::MergeFrom(from.front_right());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_rear_left()->::acu::common::UnsureVar::MergeFrom(from.rear_left());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_rear_right()->::acu::common::UnsureVar::MergeFrom(from.rear_right());
    }
  }
}

void WheelSpeed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.WheelSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WheelSpeed::CopyFrom(const WheelSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.WheelSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WheelSpeed::IsInitialized() const {
  return true;
}

void WheelSpeed::Swap(WheelSpeed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WheelSpeed::InternalSwap(WheelSpeed* other) {
  using std::swap;
  swap(front_left_, other->front_left_);
  swap(front_right_, other->front_right_);
  swap(rear_left_, other->rear_left_);
  swap(rear_right_, other->rear_right_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WheelSpeed::GetMetadata() const {
  protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PoseEuler::InitAsDefaultInstance() {
  ::acu::common::_PoseEuler_default_instance_._instance.get_mutable()->position_ = const_cast< ::acu::common::Vector3WithCovariance*>(
      ::acu::common::Vector3WithCovariance::internal_default_instance());
  ::acu::common::_PoseEuler_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::acu::common::EulerWithCovariance*>(
      ::acu::common::EulerWithCovariance::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseEuler::kPositionFieldNumber;
const int PoseEuler::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseEuler::PoseEuler()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_geometry_2eproto::InitDefaultsPoseEuler();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.PoseEuler)
}
PoseEuler::PoseEuler(const PoseEuler& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::acu::common::Vector3WithCovariance(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::acu::common::EulerWithCovariance(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:acu.common.PoseEuler)
}

void PoseEuler::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&position_)) + sizeof(rotation_));
}

PoseEuler::~PoseEuler() {
  // @@protoc_insertion_point(destructor:acu.common.PoseEuler)
  SharedDtor();
}

void PoseEuler::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete rotation_;
}

void PoseEuler::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoseEuler::descriptor() {
  ::protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PoseEuler& PoseEuler::default_instance() {
  ::protobuf_geometry_2eproto::InitDefaultsPoseEuler();
  return *internal_default_instance();
}

PoseEuler* PoseEuler::New(::google::protobuf::Arena* arena) const {
  PoseEuler* n = new PoseEuler;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoseEuler::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.PoseEuler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rotation_ != NULL);
      rotation_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PoseEuler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.PoseEuler)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.common.Vector3WithCovariance position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.EulerWithCovariance rotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.PoseEuler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.PoseEuler)
  return false;
#undef DO_
}

void PoseEuler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.PoseEuler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.Vector3WithCovariance position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // optional .acu.common.EulerWithCovariance rotation = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rotation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.PoseEuler)
}

::google::protobuf::uint8* PoseEuler::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.PoseEuler)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.Vector3WithCovariance position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->position_, deterministic, target);
  }

  // optional .acu.common.EulerWithCovariance rotation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->rotation_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.PoseEuler)
  return target;
}

size_t PoseEuler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.PoseEuler)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .acu.common.Vector3WithCovariance position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->position_);
    }

    // optional .acu.common.EulerWithCovariance rotation = 2;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->rotation_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoseEuler::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.PoseEuler)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseEuler* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoseEuler>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.PoseEuler)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.PoseEuler)
    MergeFrom(*source);
  }
}

void PoseEuler::MergeFrom(const PoseEuler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.PoseEuler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::acu::common::Vector3WithCovariance::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rotation()->::acu::common::EulerWithCovariance::MergeFrom(from.rotation());
    }
  }
}

void PoseEuler::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.PoseEuler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseEuler::CopyFrom(const PoseEuler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.PoseEuler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseEuler::IsInitialized() const {
  return true;
}

void PoseEuler::Swap(PoseEuler* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseEuler::InternalSwap(PoseEuler* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(rotation_, other->rotation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoseEuler::GetMetadata() const {
  protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PoseQuaternion::InitAsDefaultInstance() {
  ::acu::common::_PoseQuaternion_default_instance_._instance.get_mutable()->position_ = const_cast< ::acu::common::Vector3WithCovariance*>(
      ::acu::common::Vector3WithCovariance::internal_default_instance());
  ::acu::common::_PoseQuaternion_default_instance_._instance.get_mutable()->quaternion_ = const_cast< ::acu::common::Quaternion*>(
      ::acu::common::Quaternion::internal_default_instance());
  ::acu::common::_PoseQuaternion_default_instance_._instance.get_mutable()->rpy_covariance_ = const_cast< ::acu::common::Vector3*>(
      ::acu::common::Vector3::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseQuaternion::kPositionFieldNumber;
const int PoseQuaternion::kQuaternionFieldNumber;
const int PoseQuaternion::kRpyCovarianceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseQuaternion::PoseQuaternion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_geometry_2eproto::InitDefaultsPoseQuaternion();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.PoseQuaternion)
}
PoseQuaternion::PoseQuaternion(const PoseQuaternion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::acu::common::Vector3WithCovariance(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_quaternion()) {
    quaternion_ = new ::acu::common::Quaternion(*from.quaternion_);
  } else {
    quaternion_ = NULL;
  }
  if (from.has_rpy_covariance()) {
    rpy_covariance_ = new ::acu::common::Vector3(*from.rpy_covariance_);
  } else {
    rpy_covariance_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:acu.common.PoseQuaternion)
}

void PoseQuaternion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rpy_covariance_) -
      reinterpret_cast<char*>(&position_)) + sizeof(rpy_covariance_));
}

PoseQuaternion::~PoseQuaternion() {
  // @@protoc_insertion_point(destructor:acu.common.PoseQuaternion)
  SharedDtor();
}

void PoseQuaternion::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete quaternion_;
  if (this != internal_default_instance()) delete rpy_covariance_;
}

void PoseQuaternion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoseQuaternion::descriptor() {
  ::protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PoseQuaternion& PoseQuaternion::default_instance() {
  ::protobuf_geometry_2eproto::InitDefaultsPoseQuaternion();
  return *internal_default_instance();
}

PoseQuaternion* PoseQuaternion::New(::google::protobuf::Arena* arena) const {
  PoseQuaternion* n = new PoseQuaternion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoseQuaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.PoseQuaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(quaternion_ != NULL);
      quaternion_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rpy_covariance_ != NULL);
      rpy_covariance_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PoseQuaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.PoseQuaternion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.common.Vector3WithCovariance position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.Quaternion quaternion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quaternion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.Vector3 rpy_covariance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rpy_covariance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.PoseQuaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.PoseQuaternion)
  return false;
#undef DO_
}

void PoseQuaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.PoseQuaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.Vector3WithCovariance position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // optional .acu.common.Quaternion quaternion = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->quaternion_, output);
  }

  // optional .acu.common.Vector3 rpy_covariance = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rpy_covariance_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.PoseQuaternion)
}

::google::protobuf::uint8* PoseQuaternion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.PoseQuaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.Vector3WithCovariance position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->position_, deterministic, target);
  }

  // optional .acu.common.Quaternion quaternion = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->quaternion_, deterministic, target);
  }

  // optional .acu.common.Vector3 rpy_covariance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->rpy_covariance_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.PoseQuaternion)
  return target;
}

size_t PoseQuaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.PoseQuaternion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .acu.common.Vector3WithCovariance position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->position_);
    }

    // optional .acu.common.Quaternion quaternion = 2;
    if (has_quaternion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->quaternion_);
    }

    // optional .acu.common.Vector3 rpy_covariance = 3;
    if (has_rpy_covariance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->rpy_covariance_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoseQuaternion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.PoseQuaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseQuaternion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoseQuaternion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.PoseQuaternion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.PoseQuaternion)
    MergeFrom(*source);
  }
}

void PoseQuaternion::MergeFrom(const PoseQuaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.PoseQuaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::acu::common::Vector3WithCovariance::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_quaternion()->::acu::common::Quaternion::MergeFrom(from.quaternion());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_rpy_covariance()->::acu::common::Vector3::MergeFrom(from.rpy_covariance());
    }
  }
}

void PoseQuaternion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.PoseQuaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseQuaternion::CopyFrom(const PoseQuaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.PoseQuaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseQuaternion::IsInitialized() const {
  return true;
}

void PoseQuaternion::Swap(PoseQuaternion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseQuaternion::InternalSwap(PoseQuaternion* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(quaternion_, other->quaternion_);
  swap(rpy_covariance_, other->rpy_covariance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoseQuaternion::GetMetadata() const {
  protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Twist::InitAsDefaultInstance() {
  ::acu::common::_Twist_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::acu::common::Vector3WithCovariance*>(
      ::acu::common::Vector3WithCovariance::internal_default_instance());
  ::acu::common::_Twist_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::acu::common::Vector3WithCovariance*>(
      ::acu::common::Vector3WithCovariance::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Twist::kVelocityFieldNumber;
const int Twist::kAngularVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Twist::Twist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_geometry_2eproto::InitDefaultsTwist();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.Twist)
}
Twist::Twist(const Twist& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_velocity()) {
    velocity_ = new ::acu::common::Vector3WithCovariance(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::acu::common::Vector3WithCovariance(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:acu.common.Twist)
}

void Twist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_velocity_) -
      reinterpret_cast<char*>(&velocity_)) + sizeof(angular_velocity_));
}

Twist::~Twist() {
  // @@protoc_insertion_point(destructor:acu.common.Twist)
  SharedDtor();
}

void Twist::SharedDtor() {
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete angular_velocity_;
}

void Twist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Twist::descriptor() {
  ::protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Twist& Twist::default_instance() {
  ::protobuf_geometry_2eproto::InitDefaultsTwist();
  return *internal_default_instance();
}

Twist* Twist::New(::google::protobuf::Arena* arena) const {
  Twist* n = new Twist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Twist::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.Twist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(angular_velocity_ != NULL);
      angular_velocity_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Twist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.Twist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.common.Vector3WithCovariance velocity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.Vector3WithCovariance angular_velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.Twist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.Twist)
  return false;
#undef DO_
}

void Twist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.Twist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.Vector3WithCovariance velocity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->velocity_, output);
  }

  // optional .acu.common.Vector3WithCovariance angular_velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->angular_velocity_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.Twist)
}

::google::protobuf::uint8* Twist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.Twist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.Vector3WithCovariance velocity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->velocity_, deterministic, target);
  }

  // optional .acu.common.Vector3WithCovariance angular_velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->angular_velocity_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.Twist)
  return target;
}

size_t Twist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.Twist)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .acu.common.Vector3WithCovariance velocity = 1;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->velocity_);
    }

    // optional .acu.common.Vector3WithCovariance angular_velocity = 2;
    if (has_angular_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->angular_velocity_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Twist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.Twist)
  GOOGLE_DCHECK_NE(&from, this);
  const Twist* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Twist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.Twist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.Twist)
    MergeFrom(*source);
  }
}

void Twist::MergeFrom(const Twist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.Twist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_velocity()->::acu::common::Vector3WithCovariance::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_angular_velocity()->::acu::common::Vector3WithCovariance::MergeFrom(from.angular_velocity());
    }
  }
}

void Twist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.Twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Twist::CopyFrom(const Twist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.Twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Twist::IsInitialized() const {
  return true;
}

void Twist::Swap(Twist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Twist::InternalSwap(Twist* other) {
  using std::swap;
  swap(velocity_, other->velocity_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Twist::GetMetadata() const {
  protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Pose::InitAsDefaultInstance() {
  ::acu::common::_Pose_default_instance_._instance.get_mutable()->pose_euler_ = const_cast< ::acu::common::PoseEuler*>(
      ::acu::common::PoseEuler::internal_default_instance());
  ::acu::common::_Pose_default_instance_._instance.get_mutable()->pose_quaternion_ = const_cast< ::acu::common::PoseQuaternion*>(
      ::acu::common::PoseQuaternion::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose::kPoseEulerFieldNumber;
const int Pose::kPoseQuaternionFieldNumber;
const int Pose::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose::Pose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_geometry_2eproto::InitDefaultsPose();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.Pose)
}
Pose::Pose(const Pose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose_euler()) {
    pose_euler_ = new ::acu::common::PoseEuler(*from.pose_euler_);
  } else {
    pose_euler_ = NULL;
  }
  if (from.has_pose_quaternion()) {
    pose_quaternion_ = new ::acu::common::PoseQuaternion(*from.pose_quaternion_);
  } else {
    pose_quaternion_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:acu.common.Pose)
}

void Pose::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pose_euler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&pose_euler_)) + sizeof(status_));
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:acu.common.Pose)
  SharedDtor();
}

void Pose::SharedDtor() {
  if (this != internal_default_instance()) delete pose_euler_;
  if (this != internal_default_instance()) delete pose_quaternion_;
}

void Pose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose::descriptor() {
  ::protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pose& Pose::default_instance() {
  ::protobuf_geometry_2eproto::InitDefaultsPose();
  return *internal_default_instance();
}

Pose* Pose::New(::google::protobuf::Arena* arena) const {
  Pose* n = new Pose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pose_euler_ != NULL);
      pose_euler_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pose_quaternion_ != NULL);
      pose_quaternion_->Clear();
    }
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.Pose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.common.PoseEuler pose_euler = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose_euler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.PoseQuaternion pose_quaternion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose_quaternion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.PoseStatus status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::common::PoseStatus_IsValid(value)) {
            set_status(static_cast< ::acu::common::PoseStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.Pose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.Pose)
  return false;
#undef DO_
}

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.PoseEuler pose_euler = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pose_euler_, output);
  }

  // optional .acu.common.PoseQuaternion pose_quaternion = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pose_quaternion_, output);
  }

  // optional .acu.common.PoseStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.Pose)
}

::google::protobuf::uint8* Pose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.Pose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.PoseEuler pose_euler = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->pose_euler_, deterministic, target);
  }

  // optional .acu.common.PoseQuaternion pose_quaternion = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->pose_quaternion_, deterministic, target);
  }

  // optional .acu.common.PoseStatus status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.Pose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .acu.common.PoseEuler pose_euler = 1;
    if (has_pose_euler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->pose_euler_);
    }

    // optional .acu.common.PoseQuaternion pose_quaternion = 2;
    if (has_pose_quaternion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->pose_quaternion_);
    }

    // optional .acu.common.PoseStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.Pose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pose_euler()->::acu::common::PoseEuler::MergeFrom(from.pose_euler());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pose_quaternion()->::acu::common::PoseQuaternion::MergeFrom(from.pose_quaternion());
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::Swap(Pose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose::InternalSwap(Pose* other) {
  using std::swap;
  swap(pose_euler_, other->pose_euler_);
  swap(pose_quaternion_, other->pose_quaternion_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LLH::InitAsDefaultInstance() {
  ::acu::common::_LLH_default_instance_._instance.get_mutable()->lat_ = const_cast< ::acu::common::UnsureVar*>(
      ::acu::common::UnsureVar::internal_default_instance());
  ::acu::common::_LLH_default_instance_._instance.get_mutable()->lon_ = const_cast< ::acu::common::UnsureVar*>(
      ::acu::common::UnsureVar::internal_default_instance());
  ::acu::common::_LLH_default_instance_._instance.get_mutable()->height_ = const_cast< ::acu::common::UnsureVar*>(
      ::acu::common::UnsureVar::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LLH::kLatFieldNumber;
const int LLH::kLonFieldNumber;
const int LLH::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LLH::LLH()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_geometry_2eproto::InitDefaultsLLH();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.LLH)
}
LLH::LLH(const LLH& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lat()) {
    lat_ = new ::acu::common::UnsureVar(*from.lat_);
  } else {
    lat_ = NULL;
  }
  if (from.has_lon()) {
    lon_ = new ::acu::common::UnsureVar(*from.lon_);
  } else {
    lon_ = NULL;
  }
  if (from.has_height()) {
    height_ = new ::acu::common::UnsureVar(*from.height_);
  } else {
    height_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:acu.common.LLH)
}

void LLH::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(height_));
}

LLH::~LLH() {
  // @@protoc_insertion_point(destructor:acu.common.LLH)
  SharedDtor();
}

void LLH::SharedDtor() {
  if (this != internal_default_instance()) delete lat_;
  if (this != internal_default_instance()) delete lon_;
  if (this != internal_default_instance()) delete height_;
}

void LLH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LLH::descriptor() {
  ::protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LLH& LLH::default_instance() {
  ::protobuf_geometry_2eproto::InitDefaultsLLH();
  return *internal_default_instance();
}

LLH* LLH::New(::google::protobuf::Arena* arena) const {
  LLH* n = new LLH;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LLH::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.LLH)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lat_ != NULL);
      lat_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lon_ != NULL);
      lon_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(height_ != NULL);
      height_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LLH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.LLH)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .acu.common.UnsureVar lat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.UnsureVar lon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.UnsureVar height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_height()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.LLH)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.LLH)
  return false;
#undef DO_
}

void LLH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.LLH)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.UnsureVar lat = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->lat_, output);
  }

  // optional .acu.common.UnsureVar lon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lon_, output);
  }

  // optional .acu.common.UnsureVar height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->height_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.LLH)
}

::google::protobuf::uint8* LLH::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.LLH)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .acu.common.UnsureVar lat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->lat_, deterministic, target);
  }

  // optional .acu.common.UnsureVar lon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->lon_, deterministic, target);
  }

  // optional .acu.common.UnsureVar height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->height_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.LLH)
  return target;
}

size_t LLH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.LLH)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .acu.common.UnsureVar lat = 1;
    if (has_lat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->lat_);
    }

    // optional .acu.common.UnsureVar lon = 2;
    if (has_lon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->lon_);
    }

    // optional .acu.common.UnsureVar height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->height_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LLH::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.LLH)
  GOOGLE_DCHECK_NE(&from, this);
  const LLH* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LLH>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.LLH)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.LLH)
    MergeFrom(*source);
  }
}

void LLH::MergeFrom(const LLH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.LLH)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_lat()->::acu::common::UnsureVar::MergeFrom(from.lat());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lon()->::acu::common::UnsureVar::MergeFrom(from.lon());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_height()->::acu::common::UnsureVar::MergeFrom(from.height());
    }
  }
}

void LLH::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.LLH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LLH::CopyFrom(const LLH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.LLH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LLH::IsInitialized() const {
  return true;
}

void LLH::Swap(LLH* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LLH::InternalSwap(LLH* other) {
  using std::swap;
  swap(lat_, other->lat_);
  swap(lon_, other->lon_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LLH::GetMetadata() const {
  protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NavStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavStatus::kUtcTimeFieldNumber;
const int NavStatus::kGpsStatusFieldNumber;
const int NavStatus::kPosStatusFieldNumber;
const int NavStatus::kAttStatusFieldNumber;
const int NavStatus::kInitStatusFieldNumber;
const int NavStatus::kSateNumFieldNumber;
const int NavStatus::kHdopFieldNumber;
const int NavStatus::kPdopFieldNumber;
const int NavStatus::kDiffAgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavStatus::NavStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_geometry_2eproto::InitDefaultsNavStatus();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:acu.common.NavStatus)
}
NavStatus::NavStatus(const NavStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&utc_time_, &from.utc_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&diff_age_) -
    reinterpret_cast<char*>(&utc_time_)) + sizeof(diff_age_));
  // @@protoc_insertion_point(copy_constructor:acu.common.NavStatus)
}

void NavStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&utc_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diff_age_) -
      reinterpret_cast<char*>(&utc_time_)) + sizeof(diff_age_));
}

NavStatus::~NavStatus() {
  // @@protoc_insertion_point(destructor:acu.common.NavStatus)
  SharedDtor();
}

void NavStatus::SharedDtor() {
}

void NavStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavStatus::descriptor() {
  ::protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavStatus& NavStatus::default_instance() {
  ::protobuf_geometry_2eproto::InitDefaultsNavStatus();
  return *internal_default_instance();
}

NavStatus* NavStatus::New(::google::protobuf::Arena* arena) const {
  NavStatus* n = new NavStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NavStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:acu.common.NavStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&utc_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pdop_) -
        reinterpret_cast<char*>(&utc_time_)) + sizeof(pdop_));
  }
  diff_age_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NavStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:acu.common.NavStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double utc_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_utc_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .acu.common.GpsStatus gps_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::acu::common::GpsStatus_IsValid(value)) {
            set_gps_status(static_cast< ::acu::common::GpsStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pos_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_pos_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 att_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_att_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &att_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 init_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_init_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sate_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_sate_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sate_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hdop = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_hdop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pdop = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_pdop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float diff_age = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_diff_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &diff_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:acu.common.NavStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:acu.common.NavStatus)
  return false;
#undef DO_
}

void NavStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:acu.common.NavStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double utc_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->utc_time(), output);
  }

  // optional .acu.common.GpsStatus gps_status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gps_status(), output);
  }

  // optional int32 pos_status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_status(), output);
  }

  // optional int32 att_status = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->att_status(), output);
  }

  // optional int32 init_status = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->init_status(), output);
  }

  // optional int32 sate_num = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sate_num(), output);
  }

  // optional float hdop = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->hdop(), output);
  }

  // optional float pdop = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->pdop(), output);
  }

  // optional float diff_age = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->diff_age(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:acu.common.NavStatus)
}

::google::protobuf::uint8* NavStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:acu.common.NavStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double utc_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->utc_time(), target);
  }

  // optional .acu.common.GpsStatus gps_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->gps_status(), target);
  }

  // optional int32 pos_status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_status(), target);
  }

  // optional int32 att_status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->att_status(), target);
  }

  // optional int32 init_status = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->init_status(), target);
  }

  // optional int32 sate_num = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sate_num(), target);
  }

  // optional float hdop = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->hdop(), target);
  }

  // optional float pdop = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->pdop(), target);
  }

  // optional float diff_age = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->diff_age(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:acu.common.NavStatus)
  return target;
}

size_t NavStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:acu.common.NavStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double utc_time = 1;
    if (has_utc_time()) {
      total_size += 1 + 8;
    }

    // optional .acu.common.GpsStatus gps_status = 2;
    if (has_gps_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gps_status());
    }

    // optional int32 pos_status = 3;
    if (has_pos_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_status());
    }

    // optional int32 att_status = 4;
    if (has_att_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->att_status());
    }

    // optional int32 init_status = 5;
    if (has_init_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_status());
    }

    // optional int32 sate_num = 6;
    if (has_sate_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sate_num());
    }

    // optional float hdop = 7;
    if (has_hdop()) {
      total_size += 1 + 4;
    }

    // optional float pdop = 8;
    if (has_pdop()) {
      total_size += 1 + 4;
    }

  }
  // optional float diff_age = 9;
  if (has_diff_age()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:acu.common.NavStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const NavStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:acu.common.NavStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:acu.common.NavStatus)
    MergeFrom(*source);
  }
}

void NavStatus::MergeFrom(const NavStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:acu.common.NavStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      utc_time_ = from.utc_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      gps_status_ = from.gps_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      pos_status_ = from.pos_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      att_status_ = from.att_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      init_status_ = from.init_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      sate_num_ = from.sate_num_;
    }
    if (cached_has_bits & 0x00000040u) {
      hdop_ = from.hdop_;
    }
    if (cached_has_bits & 0x00000080u) {
      pdop_ = from.pdop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_diff_age(from.diff_age());
  }
}

void NavStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:acu.common.NavStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavStatus::CopyFrom(const NavStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:acu.common.NavStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavStatus::IsInitialized() const {
  return true;
}

void NavStatus::Swap(NavStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavStatus::InternalSwap(NavStatus* other) {
  using std::swap;
  swap(utc_time_, other->utc_time_);
  swap(gps_status_, other->gps_status_);
  swap(pos_status_, other->pos_status_);
  swap(att_status_, other->att_status_);
  swap(init_status_, other->init_status_);
  swap(sate_num_, other->sate_num_);
  swap(hdop_, other->hdop_);
  swap(pdop_, other->pdop_);
  swap(diff_age_, other->diff_age_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NavStatus::GetMetadata() const {
  protobuf_geometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_geometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace acu

// @@protoc_insertion_point(global_scope)
