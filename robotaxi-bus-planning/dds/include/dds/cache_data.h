// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file cache_data.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _CALMCAR_DDS_CACHE_DATA_H_
#define _CALMCAR_DDS_CACHE_DATA_H_

#include "common.h"

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace calmcar {
    namespace dds {
        /*!
         * @brief This class represents the structure CacheData defined by the user in the IDL file.
         * @ingroup CACHE_DATA
         */
        class CacheData
        {
        public:

            /*!
             * @brief Default constructor.
             */
            CacheData();

            explicit CacheData(const uint64_t&);

            /*!
             * @brief Default destructor.
             */
            ~CacheData();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object calmcar::dds::CacheData that will be copied.
             */
            CacheData(
                    const CacheData& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object calmcar::dds::CacheData that will be copied.
             */
            CacheData(
                    CacheData&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object calmcar::dds::CacheData that will be copied.
             */
            CacheData& operator =(
                    const CacheData& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object calmcar::dds::CacheData that will be copied.
             */
            CacheData& operator =(
                    CacheData&& x);

            /*!
             * @brief This function copies the value in member key
             * @param _key New value to be copied in member key
             */
            void key(
                    const std::string& _key);

            /*!
             * @brief This function moves the value in member key
             * @param _key New value to be moved in member key
             */
            void key(
                    std::string&& _key);

            /*!
             * @brief This function returns a constant reference to member key
             * @return Constant reference to member key
             */
            const std::string& key() const;

            /*!
             * @brief This function returns a reference to member key
             * @return Reference to member key
             */
            std::string& key();
            /*!
             * @brief This function copies the value in member type
             * @param _type New value to be copied in member type
             */
            void type(
                    const std::string& _type);

            /*!
             * @brief This function moves the value in member type
             * @param _type New value to be moved in member type
             */
            void type(
                    std::string&& _type);

            /*!
             * @brief This function returns a constant reference to member type
             * @return Constant reference to member type
             */
            const std::string& type() const;

            /*!
             * @brief This function returns a reference to member type
             * @return Reference to member type
             */
            std::string& type();
            /*!
             * @brief This function sets a value in member methods
             * @param _methods New value for member methods
             */
            void methods(
                    uint64_t _methods);

            /*!
             * @brief This function returns the value of member methods
             * @return Value of member methods
             */
            uint64_t methods() const;

            /*!
             * @brief This function returns a reference to member methods
             * @return Reference to member methods
             */
            uint64_t& methods();

            /*!
             * @brief This function sets a value in member size
             * @param _size New value for member size
             */
            void size(
                    uint64_t _size);

            /*!
             * @brief This function returns the value of member size
             * @return Value of member size
             */
            uint64_t size() const;

            /*!
             * @brief This function returns a reference to member size
             * @return Reference to member size
             */
            uint64_t& size();

            /*!
             * @brief This function copies the value in member data
             * @param _data New value to be copied in member data
             */
            void data(
                    const std::vector<uint8_t>& _data);

            /*!
             * @brief This function moves the value in member data
             * @param _data New value to be moved in member data
             */
            void data(
                    std::vector<uint8_t>&& _data);

            /*!
             * @brief This function returns a constant reference to member data
             * @return Constant reference to member data
             */
            const std::vector<uint8_t>& data() const;

            /*!
             * @brief This function returns a reference to member data
             * @return Reference to member data
             */
            std::vector<uint8_t>& data();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            static size_t getCdrSerializedSize(
                    const calmcar::dds::CacheData& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::string m_key{};
            std::string m_type{};
            uint64_t m_methods{};
            uint64_t m_size{};
            std::vector<uint8_t> m_data{};
        };
    }  // namespace dds
}  // namespace calmcar

#endif // _CALMCAR_DDS_CACHE_DATA_H_
