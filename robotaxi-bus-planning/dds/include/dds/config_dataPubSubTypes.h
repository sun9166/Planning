// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file config_dataPubSubTypes.h
 * This header file contains the declaration of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _CALMCAR_DDS_CONFIG_DATA_PUBSUBTYPES_H_
#define _CALMCAR_DDS_CONFIG_DATA_PUBSUBTYPES_H_

#include "common.h"

#if !defined(GEN_API_VER) || (GEN_API_VER != 1)
#error Generated config_data is not compatible with current installed Fast DDS. Please, regenerate it with fastddsgen.
#endif  // GEN_API_VER

namespace calmcar
{
    namespace dds
    {
        /*!
         * @brief This class represents the TopicDataType of the type ConfigData defined by the user in the IDL file.
         * @ingroup CONFIG_DATA
         */
        class ConfigDataPubSubType : public eprosima::fastdds::dds::TopicDataType
        {
        public:

            typedef ConfigData type;

            ConfigDataPubSubType();
            ConfigDataPubSubType(const ConfigDataPubSubType& x);
            explicit ConfigDataPubSubType(unsigned char*);
            ConfigDataPubSubType& operator =(const ConfigDataPubSubType&);

            virtual ~ConfigDataPubSubType();

            virtual bool serialize(
                    void* data,
                    eprosima::fastrtps::rtps::SerializedPayload_t* payload) override;

            virtual bool deserialize(
                    eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                    void* data) override;

            virtual std::function<uint32_t()> getSerializedSizeProvider(
                    void* data) override;

            virtual bool getKey(
                    void* data,
                    eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
                    bool force_md5 = false) override;

            virtual void* createData() override;

            virtual void deleteData(
                    void* data) override;

        #ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
            inline bool is_bounded() const override
            {
                return false;
            }

        #endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

        #ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
            inline bool is_plain() const override
            {
                return false;
            }

        #endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

        #ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
            inline bool construct_sample(
                    void* memory) const override
            {
                (void)memory;
                return false;
            }

        #endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

            MD5 m_md5{};
            unsigned char* m_keyBuffer{};
        };
    }  // namespace dds
}  // namespace calmcar

#endif // _CALMCAR_DDS_CONFIG_DATA_PUBSUBTYPES_H_
