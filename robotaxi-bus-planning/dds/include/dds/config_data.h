// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file config_data.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _CALMCAR_DDS_CONFIG_DATA_H_
#define _CALMCAR_DDS_CONFIG_DATA_H_


#include "common.h"

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace calmcar {
    namespace dds {
        /*!
         * @brief This class represents the structure ConfigData defined by the user in the IDL file.
         * @ingroup CONFIG_DATA
         */
        class ConfigData
        {
        public:

            /*!
             * @brief Default constructor.
             */
            ConfigData();

            /*!
             * @brief Default destructor.
             */
            ~ConfigData();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object calmcar::dds::ConfigData that will be copied.
             */
            ConfigData(
                    const ConfigData& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object calmcar::dds::ConfigData that will be copied.
             */
            ConfigData(
                    ConfigData&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object calmcar::dds::ConfigData that will be copied.
             */
            ConfigData& operator =(
                    const ConfigData& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object calmcar::dds::ConfigData that will be copied.
             */
            ConfigData& operator =(
                    ConfigData&& x);

            /*!
             * @brief This function copies the value in member key
             * @param _key New value to be copied in member key
             */
            void key(
                    const std::string& _key);

            /*!
             * @brief This function moves the value in member key
             * @param _key New value to be moved in member key
             */
            void key(
                    std::string&& _key);

            /*!
             * @brief This function returns a constant reference to member key
             * @return Constant reference to member key
             */
            const std::string& key() const;

            /*!
             * @brief This function returns a reference to member key
             * @return Reference to member key
             */
            std::string& key();
            /*!
             * @brief This function sets a value in member methods
             * @param _methods New value for member methods
             */
            void methods(
                    uint32_t _methods);

            /*!
             * @brief This function returns the value of member methods
             * @return Value of member methods
             */
            uint32_t methods() const;

            /*!
             * @brief This function returns a reference to member methods
             * @return Reference to member methods
             */
            uint32_t& methods();

            /*!
             * @brief This function copies the value in member value
             * @param _value New value to be copied in member value
             */
            void value(
                    const std::string& _value);

            /*!
             * @brief This function moves the value in member value
             * @param _value New value to be moved in member value
             */
            void value(
                    std::string&& _value);

            /*!
             * @brief This function returns a constant reference to member value
             * @return Constant reference to member value
             */
            const std::string& value() const;

            /*!
             * @brief This function returns a reference to member value
             * @return Reference to member value
             */
            std::string& value();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            static size_t getCdrSerializedSize(
                    const calmcar::dds::ConfigData& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::string m_key{};
            uint32_t m_methods{};
            std::string m_value{};
        };
    }  // namespace dds
}  // namespace calmcar

#endif // _CALMCAR_DDS_CONFIG_DATA_H_
