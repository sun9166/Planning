// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Vehicle2Cloud.proto

#include "Vehicle2Cloud.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace v2c {
namespace proto {
class PathPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathPoint>
      _instance;
} _PathPoint_default_instance_;
class Vehicle2CloudDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vehicle2Cloud>
      _instance;
} _Vehicle2Cloud_default_instance_;
}  // namespace proto
}  // namespace v2c
namespace protobuf_Vehicle2Cloud_2eproto {
void InitDefaultsPathPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::v2c::proto::_PathPoint_default_instance_;
    new (ptr) ::v2c::proto::PathPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v2c::proto::PathPoint::InitAsDefaultInstance();
}

void InitDefaultsPathPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPathPointImpl);
}

void InitDefaultsVehicle2CloudImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Vehicle2Cloud_2eproto::InitDefaultsPathPoint();
  {
    void* ptr = &::v2c::proto::_Vehicle2Cloud_default_instance_;
    new (ptr) ::v2c::proto::Vehicle2Cloud();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v2c::proto::Vehicle2Cloud::InitAsDefaultInstance();
}

void InitDefaultsVehicle2Cloud() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicle2CloudImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v2c::proto::PathPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v2c::proto::PathPoint, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v2c::proto::PathPoint, lon_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v2c::proto::Vehicle2Cloud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v2c::proto::Vehicle2Cloud, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v2c::proto::Vehicle2Cloud, vehicle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v2c::proto::Vehicle2Cloud, vehicle_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v2c::proto::Vehicle2Cloud, task_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v2c::proto::Vehicle2Cloud, task_total_mileage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v2c::proto::Vehicle2Cloud, task_remain_mileage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v2c::proto::Vehicle2Cloud, vehicle_loc_lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v2c::proto::Vehicle2Cloud, vehicle_loc_lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v2c::proto::Vehicle2Cloud, global_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v2c::proto::Vehicle2Cloud, vehicle_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v2c::proto::Vehicle2Cloud, system_fault_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::v2c::proto::Vehicle2Cloud, turnning_light_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::v2c::proto::PathPoint)},
  { 7, -1, sizeof(::v2c::proto::Vehicle2Cloud)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::v2c::proto::_PathPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::v2c::proto::_Vehicle2Cloud_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Vehicle2Cloud.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023Vehicle2Cloud.proto\022\tv2c.proto\"%\n\tPath"
      "Point\022\013\n\003lat\030\001 \001(\001\022\013\n\003lon\030\002 \001(\001\"\303\002\n\rVehi"
      "cle2Cloud\022\021\n\ttimestamp\030\001 \001(\001\022\022\n\nvehicle_"
      "id\030\002 \001(\t\022\026\n\016vehicle_status\030\003 \001(\005\022\023\n\013task"
      "_status\030\004 \001(\005\022\032\n\022task_total_mileage\030\005 \001("
      "\001\022\033\n\023task_remain_mileage\030\006 \001(\001\022\027\n\017vehicl"
      "e_loc_lat\030\007 \001(\001\022\027\n\017vehicle_loc_lon\030\010 \001(\001"
      "\022)\n\013global_path\030\t \003(\0132\024.v2c.proto.PathPo"
      "int\022\025\n\rvehicle_speed\030\n \001(\002\022\031\n\021system_fau"
      "lt_code\030\013 \003(\005\022\026\n\016turnning_light\030\014 \001(\005b\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 405);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Vehicle2Cloud.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Vehicle2Cloud_2eproto
namespace v2c {
namespace proto {

// ===================================================================

void PathPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPoint::kLatFieldNumber;
const int PathPoint::kLonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPoint::PathPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Vehicle2Cloud_2eproto::InitDefaultsPathPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:v2c.proto.PathPoint)
}
PathPoint::PathPoint(const PathPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&lon_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  // @@protoc_insertion_point(copy_constructor:v2c.proto.PathPoint)
}

void PathPoint::SharedCtor() {
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  _cached_size_ = 0;
}

PathPoint::~PathPoint() {
  // @@protoc_insertion_point(destructor:v2c.proto.PathPoint)
  SharedDtor();
}

void PathPoint::SharedDtor() {
}

void PathPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathPoint::descriptor() {
  ::protobuf_Vehicle2Cloud_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Vehicle2Cloud_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathPoint& PathPoint::default_instance() {
  ::protobuf_Vehicle2Cloud_2eproto::InitDefaultsPathPoint();
  return *internal_default_instance();
}

PathPoint* PathPoint::New(::google::protobuf::Arena* arena) const {
  PathPoint* n = new PathPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:v2c.proto.PathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  _internal_metadata_.Clear();
}

bool PathPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:v2c.proto.PathPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double lat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:v2c.proto.PathPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:v2c.proto.PathPoint)
  return false;
#undef DO_
}

void PathPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:v2c.proto.PathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // double lon = 2;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:v2c.proto.PathPoint)
}

::google::protobuf::uint8* PathPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:v2c.proto.PathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // double lon = 2;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lon(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v2c.proto.PathPoint)
  return target;
}

size_t PathPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v2c.proto.PathPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double lat = 1;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // double lon = 2;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v2c.proto.PathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v2c.proto.PathPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v2c.proto.PathPoint)
    MergeFrom(*source);
  }
}

void PathPoint::MergeFrom(const PathPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v2c.proto.PathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
}

void PathPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v2c.proto.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPoint::CopyFrom(const PathPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v2c.proto.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPoint::IsInitialized() const {
  return true;
}

void PathPoint::Swap(PathPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPoint::InternalSwap(PathPoint* other) {
  using std::swap;
  swap(lat_, other->lat_);
  swap(lon_, other->lon_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathPoint::GetMetadata() const {
  protobuf_Vehicle2Cloud_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Vehicle2Cloud_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vehicle2Cloud::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vehicle2Cloud::kTimestampFieldNumber;
const int Vehicle2Cloud::kVehicleIdFieldNumber;
const int Vehicle2Cloud::kVehicleStatusFieldNumber;
const int Vehicle2Cloud::kTaskStatusFieldNumber;
const int Vehicle2Cloud::kTaskTotalMileageFieldNumber;
const int Vehicle2Cloud::kTaskRemainMileageFieldNumber;
const int Vehicle2Cloud::kVehicleLocLatFieldNumber;
const int Vehicle2Cloud::kVehicleLocLonFieldNumber;
const int Vehicle2Cloud::kGlobalPathFieldNumber;
const int Vehicle2Cloud::kVehicleSpeedFieldNumber;
const int Vehicle2Cloud::kSystemFaultCodeFieldNumber;
const int Vehicle2Cloud::kTurnningLightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vehicle2Cloud::Vehicle2Cloud()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Vehicle2Cloud_2eproto::InitDefaultsVehicle2Cloud();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:v2c.proto.Vehicle2Cloud)
}
Vehicle2Cloud::Vehicle2Cloud(const Vehicle2Cloud& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      global_path_(from.global_path_),
      system_fault_code_(from.system_fault_code_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vehicle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vehicle_id().size() > 0) {
    vehicle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicle_id_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&turnning_light_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(turnning_light_));
  // @@protoc_insertion_point(copy_constructor:v2c.proto.Vehicle2Cloud)
}

void Vehicle2Cloud::SharedCtor() {
  vehicle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turnning_light_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(turnning_light_));
  _cached_size_ = 0;
}

Vehicle2Cloud::~Vehicle2Cloud() {
  // @@protoc_insertion_point(destructor:v2c.proto.Vehicle2Cloud)
  SharedDtor();
}

void Vehicle2Cloud::SharedDtor() {
  vehicle_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Vehicle2Cloud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vehicle2Cloud::descriptor() {
  ::protobuf_Vehicle2Cloud_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Vehicle2Cloud_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vehicle2Cloud& Vehicle2Cloud::default_instance() {
  ::protobuf_Vehicle2Cloud_2eproto::InitDefaultsVehicle2Cloud();
  return *internal_default_instance();
}

Vehicle2Cloud* Vehicle2Cloud::New(::google::protobuf::Arena* arena) const {
  Vehicle2Cloud* n = new Vehicle2Cloud;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vehicle2Cloud::Clear() {
// @@protoc_insertion_point(message_clear_start:v2c.proto.Vehicle2Cloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  global_path_.Clear();
  system_fault_code_.Clear();
  vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turnning_light_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(turnning_light_));
  _internal_metadata_.Clear();
}

bool Vehicle2Cloud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:v2c.proto.Vehicle2Cloud)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vehicle_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicle_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vehicle_id().data(), static_cast<int>(this->vehicle_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "v2c.proto.Vehicle2Cloud.vehicle_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vehicle_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vehicle_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 task_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double task_total_mileage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &task_total_mileage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double task_remain_mileage = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &task_remain_mileage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vehicle_loc_lat = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_loc_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vehicle_loc_lon = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_loc_lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .v2c.proto.PathPoint global_path = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_global_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vehicle_speed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vehicle_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 system_fault_code = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_system_fault_code())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 90u, input, this->mutable_system_fault_code())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 turnning_light = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turnning_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:v2c.proto.Vehicle2Cloud)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:v2c.proto.Vehicle2Cloud)
  return false;
#undef DO_
}

void Vehicle2Cloud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:v2c.proto.Vehicle2Cloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // string vehicle_id = 2;
  if (this->vehicle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vehicle_id().data(), static_cast<int>(this->vehicle_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "v2c.proto.Vehicle2Cloud.vehicle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vehicle_id(), output);
  }

  // int32 vehicle_status = 3;
  if (this->vehicle_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vehicle_status(), output);
  }

  // int32 task_status = 4;
  if (this->task_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->task_status(), output);
  }

  // double task_total_mileage = 5;
  if (this->task_total_mileage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->task_total_mileage(), output);
  }

  // double task_remain_mileage = 6;
  if (this->task_remain_mileage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->task_remain_mileage(), output);
  }

  // double vehicle_loc_lat = 7;
  if (this->vehicle_loc_lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->vehicle_loc_lat(), output);
  }

  // double vehicle_loc_lon = 8;
  if (this->vehicle_loc_lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->vehicle_loc_lon(), output);
  }

  // repeated .v2c.proto.PathPoint global_path = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->global_path_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->global_path(static_cast<int>(i)), output);
  }

  // float vehicle_speed = 10;
  if (this->vehicle_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->vehicle_speed(), output);
  }

  // repeated int32 system_fault_code = 11;
  if (this->system_fault_code_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _system_fault_code_cached_byte_size_));
  }
  for (int i = 0, n = this->system_fault_code_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->system_fault_code(i), output);
  }

  // int32 turnning_light = 12;
  if (this->turnning_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->turnning_light(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:v2c.proto.Vehicle2Cloud)
}

::google::protobuf::uint8* Vehicle2Cloud::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:v2c.proto.Vehicle2Cloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // string vehicle_id = 2;
  if (this->vehicle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vehicle_id().data(), static_cast<int>(this->vehicle_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "v2c.proto.Vehicle2Cloud.vehicle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vehicle_id(), target);
  }

  // int32 vehicle_status = 3;
  if (this->vehicle_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vehicle_status(), target);
  }

  // int32 task_status = 4;
  if (this->task_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->task_status(), target);
  }

  // double task_total_mileage = 5;
  if (this->task_total_mileage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->task_total_mileage(), target);
  }

  // double task_remain_mileage = 6;
  if (this->task_remain_mileage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->task_remain_mileage(), target);
  }

  // double vehicle_loc_lat = 7;
  if (this->vehicle_loc_lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->vehicle_loc_lat(), target);
  }

  // double vehicle_loc_lon = 8;
  if (this->vehicle_loc_lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->vehicle_loc_lon(), target);
  }

  // repeated .v2c.proto.PathPoint global_path = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->global_path_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->global_path(static_cast<int>(i)), deterministic, target);
  }

  // float vehicle_speed = 10;
  if (this->vehicle_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->vehicle_speed(), target);
  }

  // repeated int32 system_fault_code = 11;
  if (this->system_fault_code_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _system_fault_code_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->system_fault_code_, target);
  }

  // int32 turnning_light = 12;
  if (this->turnning_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->turnning_light(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v2c.proto.Vehicle2Cloud)
  return target;
}

size_t Vehicle2Cloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v2c.proto.Vehicle2Cloud)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .v2c.proto.PathPoint global_path = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->global_path_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->global_path(static_cast<int>(i)));
    }
  }

  // repeated int32 system_fault_code = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->system_fault_code_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _system_fault_code_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string vehicle_id = 2;
  if (this->vehicle_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vehicle_id());
  }

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  // int32 vehicle_status = 3;
  if (this->vehicle_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vehicle_status());
  }

  // int32 task_status = 4;
  if (this->task_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_status());
  }

  // double task_total_mileage = 5;
  if (this->task_total_mileage() != 0) {
    total_size += 1 + 8;
  }

  // double task_remain_mileage = 6;
  if (this->task_remain_mileage() != 0) {
    total_size += 1 + 8;
  }

  // double vehicle_loc_lat = 7;
  if (this->vehicle_loc_lat() != 0) {
    total_size += 1 + 8;
  }

  // double vehicle_loc_lon = 8;
  if (this->vehicle_loc_lon() != 0) {
    total_size += 1 + 8;
  }

  // float vehicle_speed = 10;
  if (this->vehicle_speed() != 0) {
    total_size += 1 + 4;
  }

  // int32 turnning_light = 12;
  if (this->turnning_light() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->turnning_light());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vehicle2Cloud::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v2c.proto.Vehicle2Cloud)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle2Cloud* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vehicle2Cloud>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v2c.proto.Vehicle2Cloud)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v2c.proto.Vehicle2Cloud)
    MergeFrom(*source);
  }
}

void Vehicle2Cloud::MergeFrom(const Vehicle2Cloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v2c.proto.Vehicle2Cloud)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  global_path_.MergeFrom(from.global_path_);
  system_fault_code_.MergeFrom(from.system_fault_code_);
  if (from.vehicle_id().size() > 0) {

    vehicle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicle_id_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.vehicle_status() != 0) {
    set_vehicle_status(from.vehicle_status());
  }
  if (from.task_status() != 0) {
    set_task_status(from.task_status());
  }
  if (from.task_total_mileage() != 0) {
    set_task_total_mileage(from.task_total_mileage());
  }
  if (from.task_remain_mileage() != 0) {
    set_task_remain_mileage(from.task_remain_mileage());
  }
  if (from.vehicle_loc_lat() != 0) {
    set_vehicle_loc_lat(from.vehicle_loc_lat());
  }
  if (from.vehicle_loc_lon() != 0) {
    set_vehicle_loc_lon(from.vehicle_loc_lon());
  }
  if (from.vehicle_speed() != 0) {
    set_vehicle_speed(from.vehicle_speed());
  }
  if (from.turnning_light() != 0) {
    set_turnning_light(from.turnning_light());
  }
}

void Vehicle2Cloud::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v2c.proto.Vehicle2Cloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle2Cloud::CopyFrom(const Vehicle2Cloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v2c.proto.Vehicle2Cloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle2Cloud::IsInitialized() const {
  return true;
}

void Vehicle2Cloud::Swap(Vehicle2Cloud* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vehicle2Cloud::InternalSwap(Vehicle2Cloud* other) {
  using std::swap;
  global_path_.InternalSwap(&other->global_path_);
  system_fault_code_.InternalSwap(&other->system_fault_code_);
  vehicle_id_.Swap(&other->vehicle_id_);
  swap(timestamp_, other->timestamp_);
  swap(vehicle_status_, other->vehicle_status_);
  swap(task_status_, other->task_status_);
  swap(task_total_mileage_, other->task_total_mileage_);
  swap(task_remain_mileage_, other->task_remain_mileage_);
  swap(vehicle_loc_lat_, other->vehicle_loc_lat_);
  swap(vehicle_loc_lon_, other->vehicle_loc_lon_);
  swap(vehicle_speed_, other->vehicle_speed_);
  swap(turnning_light_, other->turnning_light_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vehicle2Cloud::GetMetadata() const {
  protobuf_Vehicle2Cloud_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Vehicle2Cloud_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace v2c

// @@protoc_insertion_point(global_scope)
