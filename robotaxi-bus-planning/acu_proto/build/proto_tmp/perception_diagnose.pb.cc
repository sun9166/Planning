// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception_diagnose.proto

#include "perception_diagnose.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace calmcar {
namespace perception {
class PerceptionDiagnoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerceptionDiagnose>
      _instance;
} _PerceptionDiagnose_default_instance_;
class SystemDiagnoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SystemDiagnose>
      _instance;
} _SystemDiagnose_default_instance_;
class DiagnoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Diagnose>
      _instance;
} _Diagnose_default_instance_;
}  // namespace perception
}  // namespace calmcar
namespace protobuf_perception_5fdiagnose_2eproto {
void InitDefaultsPerceptionDiagnoseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::calmcar::perception::_PerceptionDiagnose_default_instance_;
    new (ptr) ::calmcar::perception::PerceptionDiagnose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::PerceptionDiagnose::InitAsDefaultInstance();
}

void InitDefaultsPerceptionDiagnose() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPerceptionDiagnoseImpl);
}

void InitDefaultsSystemDiagnoseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::calmcar::perception::_SystemDiagnose_default_instance_;
    new (ptr) ::calmcar::perception::SystemDiagnose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::SystemDiagnose::InitAsDefaultInstance();
}

void InitDefaultsSystemDiagnose() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSystemDiagnoseImpl);
}

void InitDefaultsDiagnoseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5fdiagnose_2eproto::InitDefaultsPerceptionDiagnose();
  protobuf_perception_5fdiagnose_2eproto::InitDefaultsSystemDiagnose();
  {
    void* ptr = &::calmcar::perception::_Diagnose_default_instance_;
    new (ptr) ::calmcar::perception::Diagnose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::Diagnose::InitAsDefaultInstance();
}

void InitDefaultsDiagnose() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDiagnoseImpl);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[37];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionDiagnose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionDiagnose, frame_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionDiagnose, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionDiagnose, module_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionDiagnose, module_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionDiagnose, sub_module_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionDiagnose, sub_module_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionDiagnose, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionDiagnose, init_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionDiagnose, input_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionDiagnose, running_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionDiagnose, function_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionDiagnose, output_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionDiagnose, process_runtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionDiagnose, infer_runtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionDiagnose, post_runtime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SystemDiagnose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SystemDiagnose, frame_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SystemDiagnose, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SystemDiagnose, module_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SystemDiagnose, module_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SystemDiagnose, sub_module_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SystemDiagnose, sub_module_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SystemDiagnose, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SystemDiagnose, function_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SystemDiagnose, init_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SystemDiagnose, running_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SystemDiagnose, process_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Diagnose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Diagnose, perception_diagnose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Diagnose, system_diagnose_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::calmcar::perception::PerceptionDiagnose)},
  { 20, -1, sizeof(::calmcar::perception::SystemDiagnose)},
  { 36, -1, sizeof(::calmcar::perception::Diagnose)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_PerceptionDiagnose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_SystemDiagnose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_Diagnose_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "perception_diagnose.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031perception_diagnose.proto\022\022calmcar.per"
      "ception\032\036google/protobuf/wrappers.proto\""
      "\201\003\n\022PerceptionDiagnose\022\023\n\013frame_index\030\001 "
      "\001(\r\022\021\n\ttimestamp\030\002 \001(\004\0225\n\tmodule_id\030\003 \001("
      "\0162\".calmcar.perception.DiagnoseModule\022\023\n"
      "\013module_name\030\004 \001(\t\022\025\n\rsub_module_id\030\005 \001("
      "\r\022\027\n\017sub_module_name\030\006 \001(\t\022\016\n\006enable\030\007 \001"
      "(\010\022\023\n\013init_status\030\010 \001(\r\022\024\n\014input_status\030"
      "\t \001(\r\022\026\n\016running_status\030\n \001(\r\022\027\n\017functio"
      "n_status\030\013 \001(\r\022\025\n\routput_status\030\014 \001(\r\022\027\n"
      "\017process_runtime\030\r \001(\r\022\025\n\rinfer_runtime\030"
      "\016 \001(\r\022\024\n\014post_runtime\030\017 \001(\r\"\306G\n\016SystemDi"
      "agnose\022\023\n\013frame_index\030\001 \001(\r\022\021\n\ttimestamp"
      "\030\002 \001(\004\0225\n\tmodule_id\030\003 \001(\0162\".calmcar.perc"
      "eption.DiagnoseModule\022\023\n\013module_name\030\004 \001"
      "(\t\022\025\n\rsub_module_id\030\005 \001(\r\022\027\n\017sub_module_"
      "name\030\006 \001(\t\022\016\n\006enable\030\007 \001(\010\022\027\n\017function_s"
      "tatus\030\010 \001(\r\022\023\n\013init_status\030\t \001(\r\022\026\n\016runn"
      "ing_status\030\n \001(\r\022\024\n\014process_time\030\024 \001(\r\"\246"
      "\001\n\017CameraSubmodule\022\022\n\016CAMERA_INVALID\020\000\022\r"
      "\n\tCAMERA_FC\020\001\022\022\n\016CAMERA_FC_NEAR\020\002\022\r\n\tCAM"
      "ERA_FL\020\003\022\r\n\tCAMERA_FR\020\004\022\r\n\tCAMERA_RC\020\005\022\r"
      "\n\tCAMERA_RL\020\006\022\r\n\tCAMERA_RR\020\007\022\021\n\rCAMERA_F"
      "C_FAR\020\010\"\213\001\n\032CameraCameraFunctionStatus\022\""
      "\n\036CAMERA_CAMERA_FUNC_ENABLE_NONE\020\000\022$\n CA"
      "MERA_CAMERA_FUNC_ENABLE_CAMERA\020\001\022#\n\037CAME"
      "RA_CAMERA_FUNC_ENABLE_VIDEO\020\002\"\307\001\n\026Camera"
      "CameraInitStatus\022\036\n\032CAMERA_CAMERA_INIT_S"
      "UCCESS\020\000\022#\n\037CAMERA_CAMERA_INIT_ERROR_CON"
      "FIG\020\001\022#\n\037CAMERA_CAMERA_INIT_ERROR_DEVICE"
      "\020\002\022!\n\035CAMERA_CAMERA_INIT_ERROR_LINK\020\004\022 \n"
      "\034CAMERA_CAMERA_INIT_ERROR_ISP\020\010\"\251\003\n\025Came"
      "raCameraRunStatus\022\035\n\031CAMERA_CAMERA_RUN_S"
      "UCCESS\020\000\022\031\n\025CAMERA_CAMERA_RUN_EOF\020\001\022#\n\037C"
      "AMERA_CAMERA_RUN_WARN_TOO_SLOW\020\002\022$\n CAME"
      "RA_CAMERA_RUN_WARN_TIMESTAMP\020\004\022\"\n\036CAMERA"
      "_CAMERA_RUN_WARN_TIMEOUT\020\010\022#\n\037CAMERA_CAM"
      "ERA_RUN_ERROR_TIMEOUT\020\020\022+\n\'CAMERA_CAMERA"
      "_RUN_ERROR_INTERNAL_STATUS\020 \022)\n%CAMERA_C"
      "AMERA_RUN_ERROR_OUT_OF_MEMORY\020@\022 \n\033CAMER"
      "A_CAMERA_RUN_ERROR_ISP\020\200\001\022!\n\034CAMERA_CAME"
      "RA_RUN_ERROR_LINK\020\200\002\022%\n CAMERA_CAMERA_RU"
      "N_ERROR_RESOURCE\020\200\004\"O\n\014CanSubmodule\022\017\n\013C"
      "AN_INVALID\020\000\022\017\n\013CAN_CHASSIS\020\001\022\013\n\007CAN_RTK"
      "\020\002\022\020\n\014CAN_RADAR_FC\020\003\"u\n\024CanChassisInitSt"
      "atus\022\034\n\030CAN_CHASSIS_INIT_SUCCESS\020\000\022\036\n\032CA"
      "N_CHASSIS_INIT_DBC_ERROR\020\001\022\037\n\033CAN_CHASSI"
      "S_INIT_PORT_ERROR\020\002\"\254\002\n\023CanChassisRunSta"
      "tus\022\033\n\027CAN_CHASSIS_RUN_SUCCESS\020\000\022!\n\035CAN_"
      "CHASSIS_RUN_WARN_TOO_SLOW\020\001\022\"\n\036CAN_CHASS"
      "IS_RUN_ERROR_CAN_READ\020\002\022 \n\034CAN_CHASSIS_R"
      "UN_HAS_VELOCITY\020\004\022#\n\037CAN_CHASSIS_RUN_HAS"
      "_ACCLERATION\020\010\022 \n\034CAN_CHASSIS_RUN_HAS_YA"
      "W_RATE\020\020\022#\n\037CAN_CHASSIS_RUN_HAS_STEEL_AN"
      "GLE\020 \022#\n\037CAN_CHASSIS_RUN_HAS_WHEEL_ANGLE"
      "\020@\"e\n\020CanRtkInitStatus\022\030\n\024CAN_RTK_INIT_S"
      "UCCESS\020\000\022\032\n\026CAN_RTK_INIT_DBC_ERROR\020\001\022\033\n\027"
      "CAN_RTK_INIT_PORT_ERROR\020\002\"\277\002\n\017CanRtkRunS"
      "tatus\022\027\n\023CAN_RTK_RUN_SUCCESS\020\000\022\035\n\031CAN_RT"
      "K_RUN_WARN_TOO_SLOW\020\001\022\036\n\032CAN_RTK_RUN_ERR"
      "OR_CAN_READ\020\002\022\034\n\030CAN_RTK_RUN_HAS_VELOCIT"
      "Y\020\004\022 \n\034CAN_RTK_RUN_HAS_ACCELERATION\020\010\022\"\n"
      "\036CAN_RTK_RUN_HAS_HORIZONTAL_GPS\020\020\022\034\n\030CAN"
      "_RTK_RUN_HAS_ALTITUDE\020 \022\027\n\023CAN_RTK_RUN_H"
      "AS_YAW\020@\022\034\n\027CAN_RTK_RUN_HAS_GYRO_XY\020\200\001\022\033"
      "\n\026CAN_RTK_RUN_HAS_GYRO_Z\020\200\002\"O\n\026CanRadarF"
      "unctionStatus\022\027\n\023CAN_RADAR_FUNC_NONE\020\000\022\034"
      "\n\030CAN_RADAR_FUNC_ENABLE_FC\020\001\"s\n\022CanRadar"
      "InitStatus\022\032\n\026CAN_RADAR_INIT_SUCCESS\020\000\022\037"
      "\n\033CAN_RADAR_FC_INIT_DBC_ERROR\020\001\022 \n\034CAN_R"
      "ADAR_FC_INIT_PORT_ERROR\020\002\"\227\001\n\021CanRadarRu"
      "nStatus\022\031\n\025CAN_RADAR_RUN_SUCCESS\020\000\022\"\n\036CA"
      "N_RADAR_FC_RUN_WARN_TOO_SLOW\020\001\022#\n\037CAN_RA"
      "DAR_FC_RUN_ERROR_CAN_READ\020\002\022\036\n\032CAN_RADAR"
      "_FC_RUN_NO_OBJECT\020\004\"\303\001\n\017SystemSubmodule\022"
      "\022\n\016SYSTEM_INVALID\020\000\022\021\n\rSYSTEM_SYSTEM\020\001\022\021"
      "\n\rSYSTEM_CAMERA\020\002\022\020\n\014SYSTEM_INPUT\020\003\022\016\n\nS"
      "YSTEM_CAN\020\004\022\025\n\021SYSTEM_PERCEPTION\020\005\022\030\n\024SY"
      "STEM_COMMUNICATION\020\006\022\020\n\014SYSTEM_EVENT\020\007\022\021"
      "\n\rSYSTEM_RECORD\020\010\"\244\002\n\032SystemSystemFuncti"
      "onStatus\022\033\n\027SYSTEM_SYSTEM_FUNC_NONE\020\000\022$\n"
      " SYSTEM_SYSTEM_FUNC_ENABLE_CAMERA\020\001\022(\n$S"
      "YSTEM_SYSTEM_FUNC_ENABLE_PERCEPTION\020\002\022!\n"
      "\035SYSTEM_SYSTEM_FUNC_ENABLE_CAN\020\004\022+\n\'SYST"
      "EM_SYSTEM_FUNC_ENABLE_COMMUNICATION\020\010\022#\n"
      "\037SYSTEM_SYSTEM_FUNC_ENABLE_EVENT\020\020\022$\n SY"
      "STEM_SYSTEM_FUNC_ENABLE_RECORD\020 \"\235\002\n\026Sys"
      "temSystemInitStatus\022\036\n\032SYSTEM_SYSTEM_INI"
      "T_SUCCESS\020\000\022#\n\037SYSTEM_SYSTEM_INIT_ERROR_"
      "CAMERA\020\001\022\'\n#SYSTEM_SYSTEM_INIT_ERROR_PER"
      "CEPTION\020\002\022 \n\034SYSTEM_SYSTEM_INIT_ERROR_CA"
      "N\020\004\022*\n&SYSTEM_SYSTEM_INIT_ERROR_COMMUNIC"
      "ATION\020\010\022\"\n\036SYSTEM_SYSTEM_INIT_ERROR_EVEN"
      "T\020\020\022#\n\037SYSTEM_SYSTEM_INIT_ERROR_RECORD\020 "
      "\"\260\002\n\025SystemSystemRunStatus\022\035\n\031SYSTEM_SYS"
      "TEM_RUN_SUCCESS\020\000\022\031\n\025SYSTEM_SYSTEM_RUN_E"
      "OF\020\001\022\"\n\036SYSTEM_SYSTEM_RUN_ERROR_CAMERA\020\002"
      "\022&\n\"SYSTEM_SYSTEM_RUN_ERROR_PERCEPTION\020\004"
      "\022\037\n\033SYSTEM_SYSTEM_RUN_ERROR_CAN\020\010\022)\n%SYS"
      "TEM_SYSTEM_RUN_ERROR_COMMUNICATION\020\020\022!\n\035"
      "SYSTEM_SYSTEM_RUN_ERROR_EVENT\020 \022\"\n\036SYSTE"
      "M_SYSTEM_RUN_ERROR_RECORD\020@\"\323\002\n\032SystemCa"
      "meraFunctionStatus\022\033\n\027SYSTEM_CAMERA_FUNC"
      "_NONE\020\000\022 \n\034SYSTEM_CAMERA_FUNC_ENABLE_FC\020"
      "\001\022%\n!SYSTEM_CAMERA_FUNC_ENABLE_FC_NEAR\020\002"
      "\022 \n\034SYSTEM_CAMERA_FUNC_ENABLE_FL\020\004\022 \n\034SY"
      "STEM_CAMERA_FUNC_ENABLE_FR\020\010\022 \n\034SYSTEM_C"
      "AMERA_FUNC_ENABLE_RC\020\020\022 \n\034SYSTEM_CAMERA_"
      "FUNC_ENABLE_RL\020 \022 \n\034SYSTEM_CAMERA_FUNC_E"
      "NABLE_RR\020@\022%\n SYSTEM_CAMERA_FUNC_ENABLE_"
      "FC_FAR\020\200\001\"\335\003\n\026SystemCameraInitStatus\022\036\n\032"
      "SYSTEM_CAMERA_INIT_SUCCESS\020\000\022\037\n\033SYSTEM_C"
      "AMERA_INIT_ERROR_FC\020\001\022$\n SYSTEM_CAMERA_I"
      "NIT_ERROR_FC_NEAR\020\002\022\037\n\033SYSTEM_CAMERA_INI"
      "T_ERROR_FL\020\004\022\037\n\033SYSTEM_CAMERA_INIT_ERROR"
      "_FR\020\010\022\037\n\033SYSTEM_CAMERA_INIT_ERROR_RC\020\020\022\037"
      "\n\033SYSTEM_CAMERA_INIT_ERROR_RL\020 \022\037\n\033SYSTE"
      "M_CAMERA_INIT_ERROR_RR\020@\022$\n\037SYSTEM_CAMER"
      "A_INIT_ERROR_FC_FAR\020\200\001\022$\n\037SYSTEM_CAMERA_"
      "INIT_ERROR_CONFIG\020\200\002\022$\n\037SYSTEM_CAMERA_IN"
      "IT_ERROR_DEVICE\020\200\004\022\"\n\035SYSTEM_CAMERA_INIT"
      "_ERROR_LINK\020\200\010\022!\n\034SYSTEM_CAMERA_INIT_ERR"
      "OR_ISP\020\200\020\"\223\004\n\025SystemCameraRunStatus\022\035\n\031S"
      "YSTEM_CAMERA_RUN_SUCCESS\020\000\022\031\n\025SYSTEM_CAM"
      "ERA_RUN_EOF\020\001\022#\n\037SYSTEM_CAMERA_RUN_WARN_"
      "TOO_SLOW\020\002\022$\n SYSTEM_CAMERA_RUN_WARN_TIM"
      "ESTAMP\020\004\022\036\n\032SYSTEM_CAMERA_RUN_ERROR_FC\020\010"
      "\022#\n\037SYSTEM_CAMERA_RUN_ERROR_FC_NEAR\020\020\022\036\n"
      "\032SYSTEM_CAMERA_RUN_ERROR_FL\020 \022\036\n\032SYSTEM_"
      "CAMERA_RUN_ERROR_FR\020@\022\037\n\032SYSTEM_CAMERA_R"
      "UN_ERROR_RC\020\200\001\022\037\n\032SYSTEM_CAMERA_RUN_ERRO"
      "R_RL\020\200\002\022\037\n\032SYSTEM_CAMERA_RUN_ERROR_RR\020\200\004"
      "\022#\n\036SYSTEM_CAMERA_RUN_ERROR_FC_FAR\020\200\010\022 \n"
      "\033SYSTEM_CAMERA_RUN_ERROR_ISP\020\200\020\022!\n\034SYSTE"
      "M_CAMERA_RUN_ERROR_LINK\020\200 \022#\n\036SYSTEM_CAM"
      "ERA_RUN_WARN_TIMEOUT\020\200@\"{\n\031SystemInputFu"
      "nctionStatus\022\032\n\026SYSTEM_INPUT_FUNC_NONE\020\000"
      "\022 \n\034SYSTEM_INPUT_FUNC_ENABLE_CSD\020\001\022 \n\034SY"
      "STEM_INPUT_FUNC_ENABLE_DDS\020\002\"\202\001\n\025SystemI"
      "nputInitStatus\022\035\n\031SYSTEM_INPUT_INIT_SUCC"
      "ESS\020\000\022\037\n\033SYSTEM_INPUT_INIT_CSD_ERROR\020\001\022)"
      "\n%SYSTEM_INPUT_INIT_DDS_ERROR_SUBSCRIBE\020"
      "\002\"\310\002\n\024SystemInputRunStatus\022\034\n\030SYSTEM_INP"
      "UT_RUN_SUCCESS\020\000\022\034\n\030SYSTEM_INPUT_RUN_CSD"
      "_EOF\020\001\022&\n\"SYSTEM_INPUT_RUN_CSD_WARN_TOO_"
      "SLOW\020\002\022#\n\037SYSTEM_INPUT_RUN_CSD_ERROR_SIZ"
      "E\020\004\022&\n\"SYSTEM_INPUT_RUN_CSD_ERROR_CONTEN"
      "T\020\010\022,\n(SYSTEM_INPUT_RUN_CSD_ERROR_OUT_OF"
      "_MEMORY\020\020\022&\n\"SYSTEM_INPUT_RUN_DDS_WARN_T"
      "OO_SLOW\020 \022)\n%SYSTEM_INPUT_RUN_DDS_WARN_P"
      "ILOT_EVENT\020@\"\234\001\n\027SystemCanFunctionStatus"
      "\022\030\n\024SYSTEM_CAN_FUNC_NONE\020\000\022\"\n\036SYSTEM_CAN"
      "_FUNC_ENABLE_CHASSIS\020\001\022\036\n\032SYSTEM_CAN_FUN"
      "C_ENABLE_RTK\020\002\022#\n\037SYSTEM_CAN_FUNC_ENABLE"
      "_RADAR_FC\020\004\"\230\001\n\023SystemCanInitStatus\022\033\n\027S"
      "YSTEM_CAN_INIT_SUCCESS\020\000\022!\n\035SYSTEM_CAN_I"
      "NIT_ERROR_CHASSIS\020\001\022\035\n\031SYSTEM_CAN_INIT_E"
      "RROR_RTK\020\002\022\"\n\036SYSTEM_CAN_INIT_ERROR_RADA"
      "R_FC\020\004\"\265\001\n\022SystemCanRunStatus\022\032\n\026SYSTEM_"
      "CAN_RUN_SUCCESS\020\000\022 \n\034SYSTEM_CAN_RUN_WARN"
      "_TOO_SLOW\020\001\022 \n\034SYSTEM_CAN_RUN_ERROR_CHAS"
      "SIS\020\002\022\034\n\030SYSTEM_CAN_RUN_ERROR_RTK\020\004\022!\n\035S"
      "YSTEM_CAN_RUN_ERROR_RADAR_FC\020\010\"\304\001\n\032Syste"
      "mPerceptionInitStatus\022\"\n\036SYSTEM_PERCEPTI"
      "ON_INIT_SUCCESS\020\000\022,\n(SYSTEM_PERCEPTION_I"
      "NIT_ERROR_CALIBRATION\020\001\022+\n\'SYSTEM_PERCEP"
      "TION_INIT_ERROR_PERCEPTION\020\002\022\'\n#SYSTEM_P"
      "ERCEPTION_INIT_ERROR_DEVICE\020\004\"\272\001\n\031System"
      "PerceptionRunStatus\022!\n\035SYSTEM_PERCEPTION"
      "_RUN_SUCCESS\020\000\022\'\n#SYSTEM_PERCEPTION_RUN_"
      "WARN_TOO_SLOW\020\001\022*\n&SYSTEM_PERCEPTION_RUN"
      "_ERROR_PERCEPTION\020\002\022%\n!SYSTEM_PERCEPTION"
      "_RUN_ERROR_INPUT\020\004\"\331\001\n!SystemCommunicati"
      "onFunctionStatus\022\"\n\036SYSTEM_COMMUNICATION"
      "_FUNC_NONE\020\000\022(\n$SYSTEM_COMMUNICATION_FUN"
      "C_ENABLE_DDS\020\001\0222\n.SYSTEM_COMMUNICATION_F"
      "UNC_ENABLE_SHARED_MEMORY\020\002\0222\n.SYSTEM_COM"
      "MUNICATION_FUNC_ENABLE_REMOTE_RENDER\020\004\"\325"
      "\001\n\035SystemCommunicationInitStatus\022%\n!SYST"
      "EM_COMMUNICATION_INIT_SUCCESS\020\000\022\'\n#SYSTE"
      "M_COMMUNICATION_INIT_ERROR_DDS\020\001\0221\n-SYST"
      "EM_COMMUNICATION_INIT_ERROR_SHARED_MEMOR"
      "Y\020\002\0221\n-SYSTEM_COMMUNICATION_INIT_ERROR_R"
      "EMOTE_RENDER\020\004\"\204\004\n\034SystemCommunicationRu"
      "nStatus\022$\n SYSTEM_COMMUNICATION_RUN_SUCC"
      "ESS\020\000\022+\n\'SYSTEM_COMMUNICATION_RUN_WARN_D"
      "DS_EVENT\020\001\0226\n2SYSTEM_COMMUNICATION_RUN_W"
      "ARN_DDS_PUBLISH_TOO_SLOW\020\002\022.\n*SYSTEM_COM"
      "MUNICATION_RUN_ERROR_DDS_PUBLISH\020\004\022>\n:SY"
      "STEM_COMMUNICATION_RUN_WARN_SHARED_MEMOR"
      "Y_WRITE_TOO_SLOW\020\010\0226\n2SYSTEM_COMMUNICATI"
      "ON_RUN_ERROR_SHARED_MEMORY_WRITE\020\020\022:\n6SY"
      "STEM_COMMUNICATION_RUN_INFO_REMOTE_RENDE"
      "R_HAS_CLIENT\020 \022=\n9SYSTEM_COMMUNICATION_R"
      "UN_WARN_REMOTE_RENDER_SEND_TOO_SLOW\020@\0226\n"
      "1SYSTEM_COMMUNICATION_RUN_ERROR_REMOTE_R"
      "ENDER_SEND\020\200\001\"7\n\031SystemEventFunctionStat"
      "us\022\032\n\026SYSTEM_EVENT_FUNC_NONE\020\000\"S\n\025System"
      "EventInitStatus\022\035\n\031SYSTEM_EVENT_INIT_SUC"
      "CESS\020\000\022\033\n\027SYSTEM_EVENT_INIT_ERROR\020\001\"|\n\024S"
      "ystemEventRunStatus\022\034\n\030SYSTEM_EVENT_RUN_"
      "SUCCESS\020\000\022\"\n\036SYSTEM_EVENT_RUN_WARN_TOO_S"
      "LOW\020\001\022\"\n\036SYSTEM_EVENT_RUN_TRIGGER_EVENT\020"
      "\002\"\364\003\n\032SystemRecordFunctionStatus\022\033\n\027SYST"
      "EM_RECORD_FUNC_NONE\020\000\022)\n%SYSTEM_RECORD_F"
      "UNC_ENABLE_CALIBRATION\020\001\022\'\n#SYSTEM_RECOR"
      "D_FUNC_ENABLE_TIMESTAMP\020\002\022!\n\035SYSTEM_RECO"
      "RD_FUNC_ENABLE_CSD\020\004\022$\n SYSTEM_RECORD_FU"
      "NC_ENABLE_SCREEN\020\010\022 \n\034SYSTEM_RECORD_FUNC"
      "_ENABLE_FC\020\020\022%\n!SYSTEM_RECORD_FUNC_ENABL"
      "E_FC_NEAR\020 \022 \n\034SYSTEM_RECORD_FUNC_ENABLE"
      "_FL\020@\022!\n\034SYSTEM_RECORD_FUNC_ENABLE_FR\020\200\001"
      "\022!\n\034SYSTEM_RECORD_FUNC_ENABLE_RC\020\200\002\022!\n\034S"
      "YSTEM_RECORD_FUNC_ENABLE_RL\020\200\004\022!\n\034SYSTEM"
      "_RECORD_FUNC_ENABLE_RR\020\200\010\022%\n SYSTEM_RECO"
      "RD_FUNC_ENABLE_FC_FAR\020\200\020\"\347\003\n\026SystemRecor"
      "dInitStatus\022\036\n\032SYSTEM_RECORD_INIT_SUCCES"
      "S\020\000\022(\n$SYSTEM_RECORD_INIT_ERROR_CALIBRAT"
      "ION\020\001\022&\n\"SYSTEM_RECORD_INIT_ERROR_TIMEST"
      "AMP\020\002\022 \n\034SYSTEM_RECORD_INIT_ERROR_CSD\020\004\022"
      "#\n\037SYSTEM_RECORD_INIT_ERROR_SCREEN\020\010\022\037\n\033"
      "SYSTEM_RECORD_INIT_ERROR_FC\020\020\022$\n SYSTEM_"
      "RECORD_INIT_ERROR_FC_NEAR\020 \022\037\n\033SYSTEM_RE"
      "CORD_INIT_ERROR_FL\020@\022 \n\033SYSTEM_RECORD_IN"
      "IT_ERROR_FR\020\200\001\022 \n\033SYSTEM_RECORD_INIT_ERR"
      "OR_RC\020\200\002\022 \n\033SYSTEM_RECORD_INIT_ERROR_RL\020"
      "\200\004\022 \n\033SYSTEM_RECORD_INIT_ERROR_RR\020\200\010\022$\n\037"
      "SYSTEM_RECORD_INIT_ERROR_FC_FAR\020\200\020\"\377\003\n\025S"
      "ystemRecordRunStatus\022\035\n\031SYSTEM_RECORD_RU"
      "N_SUCCESS\020\000\022#\n\037SYSTEM_RECORD_RUN_WARN_TO"
      "O_SLOW\020\001\022\'\n#SYSTEM_RECORD_RUN_ERROR_CALI"
      "BRATION\020\002\022%\n!SYSTEM_RECORD_RUN_ERROR_TIM"
      "ESTAMP\020\004\022\037\n\033SYSTEM_RECORD_RUN_ERROR_CSD\020"
      "\010\022\"\n\036SYSTEM_RECORD_RUN_ERROR_SCREEN\020\020\022\036\n"
      "\032SYSTEM_RECORD_RUN_ERROR_FC\020 \022#\n\037SYSTEM_"
      "RECORD_RUN_ERROR_FC_NEAR\020@\022\037\n\032SYSTEM_REC"
      "ORD_RUN_ERROR_FL\020\200\001\022\037\n\032SYSTEM_RECORD_RUN"
      "_ERROR_FR\020\200\002\022\037\n\032SYSTEM_RECORD_RUN_ERROR_"
      "RC\020\200\004\022\037\n\032SYSTEM_RECORD_RUN_ERROR_RL\020\200\010\022\037"
      "\n\032SYSTEM_RECORD_RUN_ERROR_RR\020\200\020\022#\n\036SYSTE"
      "M_RECORD_RUN_ERROR_FC_FAR\020\200 \"\214\001\n\010Diagnos"
      "e\022C\n\023perception_diagnose\030\001 \003(\0132&.calmcar"
      ".perception.PerceptionDiagnose\022;\n\017system"
      "_diagnose\030\002 \003(\0132\".calmcar.perception.Sys"
      "temDiagnose*\236\001\n\016DiagnoseModule\022\033\n\027DIAGNO"
      "SE_MODULE_INVALID\020\000\022\032\n\026DIAGNOSE_MODULE_C"
      "AMERA\020\001\022\027\n\023DIAGNOSE_MODULE_CAN\020\002\022\032\n\026DIAG"
      "NOSE_MODULE_SYSTEM\020\003\022\036\n\032DIAGNOSE_MODULE_"
      "PERCEPTION\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 9940);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception_diagnose.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_perception_5fdiagnose_2eproto
namespace calmcar {
namespace perception {
const ::google::protobuf::EnumDescriptor* SystemDiagnose_CameraSubmodule_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[0];
}
bool SystemDiagnose_CameraSubmodule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_CameraSubmodule SystemDiagnose::CAMERA_INVALID;
const SystemDiagnose_CameraSubmodule SystemDiagnose::CAMERA_FC;
const SystemDiagnose_CameraSubmodule SystemDiagnose::CAMERA_FC_NEAR;
const SystemDiagnose_CameraSubmodule SystemDiagnose::CAMERA_FL;
const SystemDiagnose_CameraSubmodule SystemDiagnose::CAMERA_FR;
const SystemDiagnose_CameraSubmodule SystemDiagnose::CAMERA_RC;
const SystemDiagnose_CameraSubmodule SystemDiagnose::CAMERA_RL;
const SystemDiagnose_CameraSubmodule SystemDiagnose::CAMERA_RR;
const SystemDiagnose_CameraSubmodule SystemDiagnose::CAMERA_FC_FAR;
const SystemDiagnose_CameraSubmodule SystemDiagnose::CameraSubmodule_MIN;
const SystemDiagnose_CameraSubmodule SystemDiagnose::CameraSubmodule_MAX;
const int SystemDiagnose::CameraSubmodule_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_CameraCameraFunctionStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[1];
}
bool SystemDiagnose_CameraCameraFunctionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_CameraCameraFunctionStatus SystemDiagnose::CAMERA_CAMERA_FUNC_ENABLE_NONE;
const SystemDiagnose_CameraCameraFunctionStatus SystemDiagnose::CAMERA_CAMERA_FUNC_ENABLE_CAMERA;
const SystemDiagnose_CameraCameraFunctionStatus SystemDiagnose::CAMERA_CAMERA_FUNC_ENABLE_VIDEO;
const SystemDiagnose_CameraCameraFunctionStatus SystemDiagnose::CameraCameraFunctionStatus_MIN;
const SystemDiagnose_CameraCameraFunctionStatus SystemDiagnose::CameraCameraFunctionStatus_MAX;
const int SystemDiagnose::CameraCameraFunctionStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_CameraCameraInitStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[2];
}
bool SystemDiagnose_CameraCameraInitStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_CameraCameraInitStatus SystemDiagnose::CAMERA_CAMERA_INIT_SUCCESS;
const SystemDiagnose_CameraCameraInitStatus SystemDiagnose::CAMERA_CAMERA_INIT_ERROR_CONFIG;
const SystemDiagnose_CameraCameraInitStatus SystemDiagnose::CAMERA_CAMERA_INIT_ERROR_DEVICE;
const SystemDiagnose_CameraCameraInitStatus SystemDiagnose::CAMERA_CAMERA_INIT_ERROR_LINK;
const SystemDiagnose_CameraCameraInitStatus SystemDiagnose::CAMERA_CAMERA_INIT_ERROR_ISP;
const SystemDiagnose_CameraCameraInitStatus SystemDiagnose::CameraCameraInitStatus_MIN;
const SystemDiagnose_CameraCameraInitStatus SystemDiagnose::CameraCameraInitStatus_MAX;
const int SystemDiagnose::CameraCameraInitStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_CameraCameraRunStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[3];
}
bool SystemDiagnose_CameraCameraRunStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_CameraCameraRunStatus SystemDiagnose::CAMERA_CAMERA_RUN_SUCCESS;
const SystemDiagnose_CameraCameraRunStatus SystemDiagnose::CAMERA_CAMERA_RUN_EOF;
const SystemDiagnose_CameraCameraRunStatus SystemDiagnose::CAMERA_CAMERA_RUN_WARN_TOO_SLOW;
const SystemDiagnose_CameraCameraRunStatus SystemDiagnose::CAMERA_CAMERA_RUN_WARN_TIMESTAMP;
const SystemDiagnose_CameraCameraRunStatus SystemDiagnose::CAMERA_CAMERA_RUN_WARN_TIMEOUT;
const SystemDiagnose_CameraCameraRunStatus SystemDiagnose::CAMERA_CAMERA_RUN_ERROR_TIMEOUT;
const SystemDiagnose_CameraCameraRunStatus SystemDiagnose::CAMERA_CAMERA_RUN_ERROR_INTERNAL_STATUS;
const SystemDiagnose_CameraCameraRunStatus SystemDiagnose::CAMERA_CAMERA_RUN_ERROR_OUT_OF_MEMORY;
const SystemDiagnose_CameraCameraRunStatus SystemDiagnose::CAMERA_CAMERA_RUN_ERROR_ISP;
const SystemDiagnose_CameraCameraRunStatus SystemDiagnose::CAMERA_CAMERA_RUN_ERROR_LINK;
const SystemDiagnose_CameraCameraRunStatus SystemDiagnose::CAMERA_CAMERA_RUN_ERROR_RESOURCE;
const SystemDiagnose_CameraCameraRunStatus SystemDiagnose::CameraCameraRunStatus_MIN;
const SystemDiagnose_CameraCameraRunStatus SystemDiagnose::CameraCameraRunStatus_MAX;
const int SystemDiagnose::CameraCameraRunStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_CanSubmodule_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[4];
}
bool SystemDiagnose_CanSubmodule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_CanSubmodule SystemDiagnose::CAN_INVALID;
const SystemDiagnose_CanSubmodule SystemDiagnose::CAN_CHASSIS;
const SystemDiagnose_CanSubmodule SystemDiagnose::CAN_RTK;
const SystemDiagnose_CanSubmodule SystemDiagnose::CAN_RADAR_FC;
const SystemDiagnose_CanSubmodule SystemDiagnose::CanSubmodule_MIN;
const SystemDiagnose_CanSubmodule SystemDiagnose::CanSubmodule_MAX;
const int SystemDiagnose::CanSubmodule_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_CanChassisInitStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[5];
}
bool SystemDiagnose_CanChassisInitStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_CanChassisInitStatus SystemDiagnose::CAN_CHASSIS_INIT_SUCCESS;
const SystemDiagnose_CanChassisInitStatus SystemDiagnose::CAN_CHASSIS_INIT_DBC_ERROR;
const SystemDiagnose_CanChassisInitStatus SystemDiagnose::CAN_CHASSIS_INIT_PORT_ERROR;
const SystemDiagnose_CanChassisInitStatus SystemDiagnose::CanChassisInitStatus_MIN;
const SystemDiagnose_CanChassisInitStatus SystemDiagnose::CanChassisInitStatus_MAX;
const int SystemDiagnose::CanChassisInitStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_CanChassisRunStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[6];
}
bool SystemDiagnose_CanChassisRunStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_CanChassisRunStatus SystemDiagnose::CAN_CHASSIS_RUN_SUCCESS;
const SystemDiagnose_CanChassisRunStatus SystemDiagnose::CAN_CHASSIS_RUN_WARN_TOO_SLOW;
const SystemDiagnose_CanChassisRunStatus SystemDiagnose::CAN_CHASSIS_RUN_ERROR_CAN_READ;
const SystemDiagnose_CanChassisRunStatus SystemDiagnose::CAN_CHASSIS_RUN_HAS_VELOCITY;
const SystemDiagnose_CanChassisRunStatus SystemDiagnose::CAN_CHASSIS_RUN_HAS_ACCLERATION;
const SystemDiagnose_CanChassisRunStatus SystemDiagnose::CAN_CHASSIS_RUN_HAS_YAW_RATE;
const SystemDiagnose_CanChassisRunStatus SystemDiagnose::CAN_CHASSIS_RUN_HAS_STEEL_ANGLE;
const SystemDiagnose_CanChassisRunStatus SystemDiagnose::CAN_CHASSIS_RUN_HAS_WHEEL_ANGLE;
const SystemDiagnose_CanChassisRunStatus SystemDiagnose::CanChassisRunStatus_MIN;
const SystemDiagnose_CanChassisRunStatus SystemDiagnose::CanChassisRunStatus_MAX;
const int SystemDiagnose::CanChassisRunStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_CanRtkInitStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[7];
}
bool SystemDiagnose_CanRtkInitStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_CanRtkInitStatus SystemDiagnose::CAN_RTK_INIT_SUCCESS;
const SystemDiagnose_CanRtkInitStatus SystemDiagnose::CAN_RTK_INIT_DBC_ERROR;
const SystemDiagnose_CanRtkInitStatus SystemDiagnose::CAN_RTK_INIT_PORT_ERROR;
const SystemDiagnose_CanRtkInitStatus SystemDiagnose::CanRtkInitStatus_MIN;
const SystemDiagnose_CanRtkInitStatus SystemDiagnose::CanRtkInitStatus_MAX;
const int SystemDiagnose::CanRtkInitStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_CanRtkRunStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[8];
}
bool SystemDiagnose_CanRtkRunStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_CanRtkRunStatus SystemDiagnose::CAN_RTK_RUN_SUCCESS;
const SystemDiagnose_CanRtkRunStatus SystemDiagnose::CAN_RTK_RUN_WARN_TOO_SLOW;
const SystemDiagnose_CanRtkRunStatus SystemDiagnose::CAN_RTK_RUN_ERROR_CAN_READ;
const SystemDiagnose_CanRtkRunStatus SystemDiagnose::CAN_RTK_RUN_HAS_VELOCITY;
const SystemDiagnose_CanRtkRunStatus SystemDiagnose::CAN_RTK_RUN_HAS_ACCELERATION;
const SystemDiagnose_CanRtkRunStatus SystemDiagnose::CAN_RTK_RUN_HAS_HORIZONTAL_GPS;
const SystemDiagnose_CanRtkRunStatus SystemDiagnose::CAN_RTK_RUN_HAS_ALTITUDE;
const SystemDiagnose_CanRtkRunStatus SystemDiagnose::CAN_RTK_RUN_HAS_YAW;
const SystemDiagnose_CanRtkRunStatus SystemDiagnose::CAN_RTK_RUN_HAS_GYRO_XY;
const SystemDiagnose_CanRtkRunStatus SystemDiagnose::CAN_RTK_RUN_HAS_GYRO_Z;
const SystemDiagnose_CanRtkRunStatus SystemDiagnose::CanRtkRunStatus_MIN;
const SystemDiagnose_CanRtkRunStatus SystemDiagnose::CanRtkRunStatus_MAX;
const int SystemDiagnose::CanRtkRunStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_CanRadarFunctionStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[9];
}
bool SystemDiagnose_CanRadarFunctionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_CanRadarFunctionStatus SystemDiagnose::CAN_RADAR_FUNC_NONE;
const SystemDiagnose_CanRadarFunctionStatus SystemDiagnose::CAN_RADAR_FUNC_ENABLE_FC;
const SystemDiagnose_CanRadarFunctionStatus SystemDiagnose::CanRadarFunctionStatus_MIN;
const SystemDiagnose_CanRadarFunctionStatus SystemDiagnose::CanRadarFunctionStatus_MAX;
const int SystemDiagnose::CanRadarFunctionStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_CanRadarInitStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[10];
}
bool SystemDiagnose_CanRadarInitStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_CanRadarInitStatus SystemDiagnose::CAN_RADAR_INIT_SUCCESS;
const SystemDiagnose_CanRadarInitStatus SystemDiagnose::CAN_RADAR_FC_INIT_DBC_ERROR;
const SystemDiagnose_CanRadarInitStatus SystemDiagnose::CAN_RADAR_FC_INIT_PORT_ERROR;
const SystemDiagnose_CanRadarInitStatus SystemDiagnose::CanRadarInitStatus_MIN;
const SystemDiagnose_CanRadarInitStatus SystemDiagnose::CanRadarInitStatus_MAX;
const int SystemDiagnose::CanRadarInitStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_CanRadarRunStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[11];
}
bool SystemDiagnose_CanRadarRunStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_CanRadarRunStatus SystemDiagnose::CAN_RADAR_RUN_SUCCESS;
const SystemDiagnose_CanRadarRunStatus SystemDiagnose::CAN_RADAR_FC_RUN_WARN_TOO_SLOW;
const SystemDiagnose_CanRadarRunStatus SystemDiagnose::CAN_RADAR_FC_RUN_ERROR_CAN_READ;
const SystemDiagnose_CanRadarRunStatus SystemDiagnose::CAN_RADAR_FC_RUN_NO_OBJECT;
const SystemDiagnose_CanRadarRunStatus SystemDiagnose::CanRadarRunStatus_MIN;
const SystemDiagnose_CanRadarRunStatus SystemDiagnose::CanRadarRunStatus_MAX;
const int SystemDiagnose::CanRadarRunStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemSubmodule_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[12];
}
bool SystemDiagnose_SystemSubmodule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemSubmodule SystemDiagnose::SYSTEM_INVALID;
const SystemDiagnose_SystemSubmodule SystemDiagnose::SYSTEM_SYSTEM;
const SystemDiagnose_SystemSubmodule SystemDiagnose::SYSTEM_CAMERA;
const SystemDiagnose_SystemSubmodule SystemDiagnose::SYSTEM_INPUT;
const SystemDiagnose_SystemSubmodule SystemDiagnose::SYSTEM_CAN;
const SystemDiagnose_SystemSubmodule SystemDiagnose::SYSTEM_PERCEPTION;
const SystemDiagnose_SystemSubmodule SystemDiagnose::SYSTEM_COMMUNICATION;
const SystemDiagnose_SystemSubmodule SystemDiagnose::SYSTEM_EVENT;
const SystemDiagnose_SystemSubmodule SystemDiagnose::SYSTEM_RECORD;
const SystemDiagnose_SystemSubmodule SystemDiagnose::SystemSubmodule_MIN;
const SystemDiagnose_SystemSubmodule SystemDiagnose::SystemSubmodule_MAX;
const int SystemDiagnose::SystemSubmodule_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemSystemFunctionStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[13];
}
bool SystemDiagnose_SystemSystemFunctionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemSystemFunctionStatus SystemDiagnose::SYSTEM_SYSTEM_FUNC_NONE;
const SystemDiagnose_SystemSystemFunctionStatus SystemDiagnose::SYSTEM_SYSTEM_FUNC_ENABLE_CAMERA;
const SystemDiagnose_SystemSystemFunctionStatus SystemDiagnose::SYSTEM_SYSTEM_FUNC_ENABLE_PERCEPTION;
const SystemDiagnose_SystemSystemFunctionStatus SystemDiagnose::SYSTEM_SYSTEM_FUNC_ENABLE_CAN;
const SystemDiagnose_SystemSystemFunctionStatus SystemDiagnose::SYSTEM_SYSTEM_FUNC_ENABLE_COMMUNICATION;
const SystemDiagnose_SystemSystemFunctionStatus SystemDiagnose::SYSTEM_SYSTEM_FUNC_ENABLE_EVENT;
const SystemDiagnose_SystemSystemFunctionStatus SystemDiagnose::SYSTEM_SYSTEM_FUNC_ENABLE_RECORD;
const SystemDiagnose_SystemSystemFunctionStatus SystemDiagnose::SystemSystemFunctionStatus_MIN;
const SystemDiagnose_SystemSystemFunctionStatus SystemDiagnose::SystemSystemFunctionStatus_MAX;
const int SystemDiagnose::SystemSystemFunctionStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemSystemInitStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[14];
}
bool SystemDiagnose_SystemSystemInitStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemSystemInitStatus SystemDiagnose::SYSTEM_SYSTEM_INIT_SUCCESS;
const SystemDiagnose_SystemSystemInitStatus SystemDiagnose::SYSTEM_SYSTEM_INIT_ERROR_CAMERA;
const SystemDiagnose_SystemSystemInitStatus SystemDiagnose::SYSTEM_SYSTEM_INIT_ERROR_PERCEPTION;
const SystemDiagnose_SystemSystemInitStatus SystemDiagnose::SYSTEM_SYSTEM_INIT_ERROR_CAN;
const SystemDiagnose_SystemSystemInitStatus SystemDiagnose::SYSTEM_SYSTEM_INIT_ERROR_COMMUNICATION;
const SystemDiagnose_SystemSystemInitStatus SystemDiagnose::SYSTEM_SYSTEM_INIT_ERROR_EVENT;
const SystemDiagnose_SystemSystemInitStatus SystemDiagnose::SYSTEM_SYSTEM_INIT_ERROR_RECORD;
const SystemDiagnose_SystemSystemInitStatus SystemDiagnose::SystemSystemInitStatus_MIN;
const SystemDiagnose_SystemSystemInitStatus SystemDiagnose::SystemSystemInitStatus_MAX;
const int SystemDiagnose::SystemSystemInitStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemSystemRunStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[15];
}
bool SystemDiagnose_SystemSystemRunStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemSystemRunStatus SystemDiagnose::SYSTEM_SYSTEM_RUN_SUCCESS;
const SystemDiagnose_SystemSystemRunStatus SystemDiagnose::SYSTEM_SYSTEM_RUN_EOF;
const SystemDiagnose_SystemSystemRunStatus SystemDiagnose::SYSTEM_SYSTEM_RUN_ERROR_CAMERA;
const SystemDiagnose_SystemSystemRunStatus SystemDiagnose::SYSTEM_SYSTEM_RUN_ERROR_PERCEPTION;
const SystemDiagnose_SystemSystemRunStatus SystemDiagnose::SYSTEM_SYSTEM_RUN_ERROR_CAN;
const SystemDiagnose_SystemSystemRunStatus SystemDiagnose::SYSTEM_SYSTEM_RUN_ERROR_COMMUNICATION;
const SystemDiagnose_SystemSystemRunStatus SystemDiagnose::SYSTEM_SYSTEM_RUN_ERROR_EVENT;
const SystemDiagnose_SystemSystemRunStatus SystemDiagnose::SYSTEM_SYSTEM_RUN_ERROR_RECORD;
const SystemDiagnose_SystemSystemRunStatus SystemDiagnose::SystemSystemRunStatus_MIN;
const SystemDiagnose_SystemSystemRunStatus SystemDiagnose::SystemSystemRunStatus_MAX;
const int SystemDiagnose::SystemSystemRunStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemCameraFunctionStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[16];
}
bool SystemDiagnose_SystemCameraFunctionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemCameraFunctionStatus SystemDiagnose::SYSTEM_CAMERA_FUNC_NONE;
const SystemDiagnose_SystemCameraFunctionStatus SystemDiagnose::SYSTEM_CAMERA_FUNC_ENABLE_FC;
const SystemDiagnose_SystemCameraFunctionStatus SystemDiagnose::SYSTEM_CAMERA_FUNC_ENABLE_FC_NEAR;
const SystemDiagnose_SystemCameraFunctionStatus SystemDiagnose::SYSTEM_CAMERA_FUNC_ENABLE_FL;
const SystemDiagnose_SystemCameraFunctionStatus SystemDiagnose::SYSTEM_CAMERA_FUNC_ENABLE_FR;
const SystemDiagnose_SystemCameraFunctionStatus SystemDiagnose::SYSTEM_CAMERA_FUNC_ENABLE_RC;
const SystemDiagnose_SystemCameraFunctionStatus SystemDiagnose::SYSTEM_CAMERA_FUNC_ENABLE_RL;
const SystemDiagnose_SystemCameraFunctionStatus SystemDiagnose::SYSTEM_CAMERA_FUNC_ENABLE_RR;
const SystemDiagnose_SystemCameraFunctionStatus SystemDiagnose::SYSTEM_CAMERA_FUNC_ENABLE_FC_FAR;
const SystemDiagnose_SystemCameraFunctionStatus SystemDiagnose::SystemCameraFunctionStatus_MIN;
const SystemDiagnose_SystemCameraFunctionStatus SystemDiagnose::SystemCameraFunctionStatus_MAX;
const int SystemDiagnose::SystemCameraFunctionStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemCameraInitStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[17];
}
bool SystemDiagnose_SystemCameraInitStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemCameraInitStatus SystemDiagnose::SYSTEM_CAMERA_INIT_SUCCESS;
const SystemDiagnose_SystemCameraInitStatus SystemDiagnose::SYSTEM_CAMERA_INIT_ERROR_FC;
const SystemDiagnose_SystemCameraInitStatus SystemDiagnose::SYSTEM_CAMERA_INIT_ERROR_FC_NEAR;
const SystemDiagnose_SystemCameraInitStatus SystemDiagnose::SYSTEM_CAMERA_INIT_ERROR_FL;
const SystemDiagnose_SystemCameraInitStatus SystemDiagnose::SYSTEM_CAMERA_INIT_ERROR_FR;
const SystemDiagnose_SystemCameraInitStatus SystemDiagnose::SYSTEM_CAMERA_INIT_ERROR_RC;
const SystemDiagnose_SystemCameraInitStatus SystemDiagnose::SYSTEM_CAMERA_INIT_ERROR_RL;
const SystemDiagnose_SystemCameraInitStatus SystemDiagnose::SYSTEM_CAMERA_INIT_ERROR_RR;
const SystemDiagnose_SystemCameraInitStatus SystemDiagnose::SYSTEM_CAMERA_INIT_ERROR_FC_FAR;
const SystemDiagnose_SystemCameraInitStatus SystemDiagnose::SYSTEM_CAMERA_INIT_ERROR_CONFIG;
const SystemDiagnose_SystemCameraInitStatus SystemDiagnose::SYSTEM_CAMERA_INIT_ERROR_DEVICE;
const SystemDiagnose_SystemCameraInitStatus SystemDiagnose::SYSTEM_CAMERA_INIT_ERROR_LINK;
const SystemDiagnose_SystemCameraInitStatus SystemDiagnose::SYSTEM_CAMERA_INIT_ERROR_ISP;
const SystemDiagnose_SystemCameraInitStatus SystemDiagnose::SystemCameraInitStatus_MIN;
const SystemDiagnose_SystemCameraInitStatus SystemDiagnose::SystemCameraInitStatus_MAX;
const int SystemDiagnose::SystemCameraInitStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemCameraRunStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[18];
}
bool SystemDiagnose_SystemCameraRunStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemCameraRunStatus SystemDiagnose::SYSTEM_CAMERA_RUN_SUCCESS;
const SystemDiagnose_SystemCameraRunStatus SystemDiagnose::SYSTEM_CAMERA_RUN_EOF;
const SystemDiagnose_SystemCameraRunStatus SystemDiagnose::SYSTEM_CAMERA_RUN_WARN_TOO_SLOW;
const SystemDiagnose_SystemCameraRunStatus SystemDiagnose::SYSTEM_CAMERA_RUN_WARN_TIMESTAMP;
const SystemDiagnose_SystemCameraRunStatus SystemDiagnose::SYSTEM_CAMERA_RUN_ERROR_FC;
const SystemDiagnose_SystemCameraRunStatus SystemDiagnose::SYSTEM_CAMERA_RUN_ERROR_FC_NEAR;
const SystemDiagnose_SystemCameraRunStatus SystemDiagnose::SYSTEM_CAMERA_RUN_ERROR_FL;
const SystemDiagnose_SystemCameraRunStatus SystemDiagnose::SYSTEM_CAMERA_RUN_ERROR_FR;
const SystemDiagnose_SystemCameraRunStatus SystemDiagnose::SYSTEM_CAMERA_RUN_ERROR_RC;
const SystemDiagnose_SystemCameraRunStatus SystemDiagnose::SYSTEM_CAMERA_RUN_ERROR_RL;
const SystemDiagnose_SystemCameraRunStatus SystemDiagnose::SYSTEM_CAMERA_RUN_ERROR_RR;
const SystemDiagnose_SystemCameraRunStatus SystemDiagnose::SYSTEM_CAMERA_RUN_ERROR_FC_FAR;
const SystemDiagnose_SystemCameraRunStatus SystemDiagnose::SYSTEM_CAMERA_RUN_ERROR_ISP;
const SystemDiagnose_SystemCameraRunStatus SystemDiagnose::SYSTEM_CAMERA_RUN_ERROR_LINK;
const SystemDiagnose_SystemCameraRunStatus SystemDiagnose::SYSTEM_CAMERA_RUN_WARN_TIMEOUT;
const SystemDiagnose_SystemCameraRunStatus SystemDiagnose::SystemCameraRunStatus_MIN;
const SystemDiagnose_SystemCameraRunStatus SystemDiagnose::SystemCameraRunStatus_MAX;
const int SystemDiagnose::SystemCameraRunStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemInputFunctionStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[19];
}
bool SystemDiagnose_SystemInputFunctionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemInputFunctionStatus SystemDiagnose::SYSTEM_INPUT_FUNC_NONE;
const SystemDiagnose_SystemInputFunctionStatus SystemDiagnose::SYSTEM_INPUT_FUNC_ENABLE_CSD;
const SystemDiagnose_SystemInputFunctionStatus SystemDiagnose::SYSTEM_INPUT_FUNC_ENABLE_DDS;
const SystemDiagnose_SystemInputFunctionStatus SystemDiagnose::SystemInputFunctionStatus_MIN;
const SystemDiagnose_SystemInputFunctionStatus SystemDiagnose::SystemInputFunctionStatus_MAX;
const int SystemDiagnose::SystemInputFunctionStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemInputInitStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[20];
}
bool SystemDiagnose_SystemInputInitStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemInputInitStatus SystemDiagnose::SYSTEM_INPUT_INIT_SUCCESS;
const SystemDiagnose_SystemInputInitStatus SystemDiagnose::SYSTEM_INPUT_INIT_CSD_ERROR;
const SystemDiagnose_SystemInputInitStatus SystemDiagnose::SYSTEM_INPUT_INIT_DDS_ERROR_SUBSCRIBE;
const SystemDiagnose_SystemInputInitStatus SystemDiagnose::SystemInputInitStatus_MIN;
const SystemDiagnose_SystemInputInitStatus SystemDiagnose::SystemInputInitStatus_MAX;
const int SystemDiagnose::SystemInputInitStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemInputRunStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[21];
}
bool SystemDiagnose_SystemInputRunStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemInputRunStatus SystemDiagnose::SYSTEM_INPUT_RUN_SUCCESS;
const SystemDiagnose_SystemInputRunStatus SystemDiagnose::SYSTEM_INPUT_RUN_CSD_EOF;
const SystemDiagnose_SystemInputRunStatus SystemDiagnose::SYSTEM_INPUT_RUN_CSD_WARN_TOO_SLOW;
const SystemDiagnose_SystemInputRunStatus SystemDiagnose::SYSTEM_INPUT_RUN_CSD_ERROR_SIZE;
const SystemDiagnose_SystemInputRunStatus SystemDiagnose::SYSTEM_INPUT_RUN_CSD_ERROR_CONTENT;
const SystemDiagnose_SystemInputRunStatus SystemDiagnose::SYSTEM_INPUT_RUN_CSD_ERROR_OUT_OF_MEMORY;
const SystemDiagnose_SystemInputRunStatus SystemDiagnose::SYSTEM_INPUT_RUN_DDS_WARN_TOO_SLOW;
const SystemDiagnose_SystemInputRunStatus SystemDiagnose::SYSTEM_INPUT_RUN_DDS_WARN_PILOT_EVENT;
const SystemDiagnose_SystemInputRunStatus SystemDiagnose::SystemInputRunStatus_MIN;
const SystemDiagnose_SystemInputRunStatus SystemDiagnose::SystemInputRunStatus_MAX;
const int SystemDiagnose::SystemInputRunStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemCanFunctionStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[22];
}
bool SystemDiagnose_SystemCanFunctionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemCanFunctionStatus SystemDiagnose::SYSTEM_CAN_FUNC_NONE;
const SystemDiagnose_SystemCanFunctionStatus SystemDiagnose::SYSTEM_CAN_FUNC_ENABLE_CHASSIS;
const SystemDiagnose_SystemCanFunctionStatus SystemDiagnose::SYSTEM_CAN_FUNC_ENABLE_RTK;
const SystemDiagnose_SystemCanFunctionStatus SystemDiagnose::SYSTEM_CAN_FUNC_ENABLE_RADAR_FC;
const SystemDiagnose_SystemCanFunctionStatus SystemDiagnose::SystemCanFunctionStatus_MIN;
const SystemDiagnose_SystemCanFunctionStatus SystemDiagnose::SystemCanFunctionStatus_MAX;
const int SystemDiagnose::SystemCanFunctionStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemCanInitStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[23];
}
bool SystemDiagnose_SystemCanInitStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemCanInitStatus SystemDiagnose::SYSTEM_CAN_INIT_SUCCESS;
const SystemDiagnose_SystemCanInitStatus SystemDiagnose::SYSTEM_CAN_INIT_ERROR_CHASSIS;
const SystemDiagnose_SystemCanInitStatus SystemDiagnose::SYSTEM_CAN_INIT_ERROR_RTK;
const SystemDiagnose_SystemCanInitStatus SystemDiagnose::SYSTEM_CAN_INIT_ERROR_RADAR_FC;
const SystemDiagnose_SystemCanInitStatus SystemDiagnose::SystemCanInitStatus_MIN;
const SystemDiagnose_SystemCanInitStatus SystemDiagnose::SystemCanInitStatus_MAX;
const int SystemDiagnose::SystemCanInitStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemCanRunStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[24];
}
bool SystemDiagnose_SystemCanRunStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemCanRunStatus SystemDiagnose::SYSTEM_CAN_RUN_SUCCESS;
const SystemDiagnose_SystemCanRunStatus SystemDiagnose::SYSTEM_CAN_RUN_WARN_TOO_SLOW;
const SystemDiagnose_SystemCanRunStatus SystemDiagnose::SYSTEM_CAN_RUN_ERROR_CHASSIS;
const SystemDiagnose_SystemCanRunStatus SystemDiagnose::SYSTEM_CAN_RUN_ERROR_RTK;
const SystemDiagnose_SystemCanRunStatus SystemDiagnose::SYSTEM_CAN_RUN_ERROR_RADAR_FC;
const SystemDiagnose_SystemCanRunStatus SystemDiagnose::SystemCanRunStatus_MIN;
const SystemDiagnose_SystemCanRunStatus SystemDiagnose::SystemCanRunStatus_MAX;
const int SystemDiagnose::SystemCanRunStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemPerceptionInitStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[25];
}
bool SystemDiagnose_SystemPerceptionInitStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemPerceptionInitStatus SystemDiagnose::SYSTEM_PERCEPTION_INIT_SUCCESS;
const SystemDiagnose_SystemPerceptionInitStatus SystemDiagnose::SYSTEM_PERCEPTION_INIT_ERROR_CALIBRATION;
const SystemDiagnose_SystemPerceptionInitStatus SystemDiagnose::SYSTEM_PERCEPTION_INIT_ERROR_PERCEPTION;
const SystemDiagnose_SystemPerceptionInitStatus SystemDiagnose::SYSTEM_PERCEPTION_INIT_ERROR_DEVICE;
const SystemDiagnose_SystemPerceptionInitStatus SystemDiagnose::SystemPerceptionInitStatus_MIN;
const SystemDiagnose_SystemPerceptionInitStatus SystemDiagnose::SystemPerceptionInitStatus_MAX;
const int SystemDiagnose::SystemPerceptionInitStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemPerceptionRunStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[26];
}
bool SystemDiagnose_SystemPerceptionRunStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemPerceptionRunStatus SystemDiagnose::SYSTEM_PERCEPTION_RUN_SUCCESS;
const SystemDiagnose_SystemPerceptionRunStatus SystemDiagnose::SYSTEM_PERCEPTION_RUN_WARN_TOO_SLOW;
const SystemDiagnose_SystemPerceptionRunStatus SystemDiagnose::SYSTEM_PERCEPTION_RUN_ERROR_PERCEPTION;
const SystemDiagnose_SystemPerceptionRunStatus SystemDiagnose::SYSTEM_PERCEPTION_RUN_ERROR_INPUT;
const SystemDiagnose_SystemPerceptionRunStatus SystemDiagnose::SystemPerceptionRunStatus_MIN;
const SystemDiagnose_SystemPerceptionRunStatus SystemDiagnose::SystemPerceptionRunStatus_MAX;
const int SystemDiagnose::SystemPerceptionRunStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemCommunicationFunctionStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[27];
}
bool SystemDiagnose_SystemCommunicationFunctionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemCommunicationFunctionStatus SystemDiagnose::SYSTEM_COMMUNICATION_FUNC_NONE;
const SystemDiagnose_SystemCommunicationFunctionStatus SystemDiagnose::SYSTEM_COMMUNICATION_FUNC_ENABLE_DDS;
const SystemDiagnose_SystemCommunicationFunctionStatus SystemDiagnose::SYSTEM_COMMUNICATION_FUNC_ENABLE_SHARED_MEMORY;
const SystemDiagnose_SystemCommunicationFunctionStatus SystemDiagnose::SYSTEM_COMMUNICATION_FUNC_ENABLE_REMOTE_RENDER;
const SystemDiagnose_SystemCommunicationFunctionStatus SystemDiagnose::SystemCommunicationFunctionStatus_MIN;
const SystemDiagnose_SystemCommunicationFunctionStatus SystemDiagnose::SystemCommunicationFunctionStatus_MAX;
const int SystemDiagnose::SystemCommunicationFunctionStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemCommunicationInitStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[28];
}
bool SystemDiagnose_SystemCommunicationInitStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemCommunicationInitStatus SystemDiagnose::SYSTEM_COMMUNICATION_INIT_SUCCESS;
const SystemDiagnose_SystemCommunicationInitStatus SystemDiagnose::SYSTEM_COMMUNICATION_INIT_ERROR_DDS;
const SystemDiagnose_SystemCommunicationInitStatus SystemDiagnose::SYSTEM_COMMUNICATION_INIT_ERROR_SHARED_MEMORY;
const SystemDiagnose_SystemCommunicationInitStatus SystemDiagnose::SYSTEM_COMMUNICATION_INIT_ERROR_REMOTE_RENDER;
const SystemDiagnose_SystemCommunicationInitStatus SystemDiagnose::SystemCommunicationInitStatus_MIN;
const SystemDiagnose_SystemCommunicationInitStatus SystemDiagnose::SystemCommunicationInitStatus_MAX;
const int SystemDiagnose::SystemCommunicationInitStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemCommunicationRunStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[29];
}
bool SystemDiagnose_SystemCommunicationRunStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemCommunicationRunStatus SystemDiagnose::SYSTEM_COMMUNICATION_RUN_SUCCESS;
const SystemDiagnose_SystemCommunicationRunStatus SystemDiagnose::SYSTEM_COMMUNICATION_RUN_WARN_DDS_EVENT;
const SystemDiagnose_SystemCommunicationRunStatus SystemDiagnose::SYSTEM_COMMUNICATION_RUN_WARN_DDS_PUBLISH_TOO_SLOW;
const SystemDiagnose_SystemCommunicationRunStatus SystemDiagnose::SYSTEM_COMMUNICATION_RUN_ERROR_DDS_PUBLISH;
const SystemDiagnose_SystemCommunicationRunStatus SystemDiagnose::SYSTEM_COMMUNICATION_RUN_WARN_SHARED_MEMORY_WRITE_TOO_SLOW;
const SystemDiagnose_SystemCommunicationRunStatus SystemDiagnose::SYSTEM_COMMUNICATION_RUN_ERROR_SHARED_MEMORY_WRITE;
const SystemDiagnose_SystemCommunicationRunStatus SystemDiagnose::SYSTEM_COMMUNICATION_RUN_INFO_REMOTE_RENDER_HAS_CLIENT;
const SystemDiagnose_SystemCommunicationRunStatus SystemDiagnose::SYSTEM_COMMUNICATION_RUN_WARN_REMOTE_RENDER_SEND_TOO_SLOW;
const SystemDiagnose_SystemCommunicationRunStatus SystemDiagnose::SYSTEM_COMMUNICATION_RUN_ERROR_REMOTE_RENDER_SEND;
const SystemDiagnose_SystemCommunicationRunStatus SystemDiagnose::SystemCommunicationRunStatus_MIN;
const SystemDiagnose_SystemCommunicationRunStatus SystemDiagnose::SystemCommunicationRunStatus_MAX;
const int SystemDiagnose::SystemCommunicationRunStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemEventFunctionStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[30];
}
bool SystemDiagnose_SystemEventFunctionStatus_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemEventFunctionStatus SystemDiagnose::SYSTEM_EVENT_FUNC_NONE;
const SystemDiagnose_SystemEventFunctionStatus SystemDiagnose::SystemEventFunctionStatus_MIN;
const SystemDiagnose_SystemEventFunctionStatus SystemDiagnose::SystemEventFunctionStatus_MAX;
const int SystemDiagnose::SystemEventFunctionStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemEventInitStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[31];
}
bool SystemDiagnose_SystemEventInitStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemEventInitStatus SystemDiagnose::SYSTEM_EVENT_INIT_SUCCESS;
const SystemDiagnose_SystemEventInitStatus SystemDiagnose::SYSTEM_EVENT_INIT_ERROR;
const SystemDiagnose_SystemEventInitStatus SystemDiagnose::SystemEventInitStatus_MIN;
const SystemDiagnose_SystemEventInitStatus SystemDiagnose::SystemEventInitStatus_MAX;
const int SystemDiagnose::SystemEventInitStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemEventRunStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[32];
}
bool SystemDiagnose_SystemEventRunStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemEventRunStatus SystemDiagnose::SYSTEM_EVENT_RUN_SUCCESS;
const SystemDiagnose_SystemEventRunStatus SystemDiagnose::SYSTEM_EVENT_RUN_WARN_TOO_SLOW;
const SystemDiagnose_SystemEventRunStatus SystemDiagnose::SYSTEM_EVENT_RUN_TRIGGER_EVENT;
const SystemDiagnose_SystemEventRunStatus SystemDiagnose::SystemEventRunStatus_MIN;
const SystemDiagnose_SystemEventRunStatus SystemDiagnose::SystemEventRunStatus_MAX;
const int SystemDiagnose::SystemEventRunStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemRecordFunctionStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[33];
}
bool SystemDiagnose_SystemRecordFunctionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemRecordFunctionStatus SystemDiagnose::SYSTEM_RECORD_FUNC_NONE;
const SystemDiagnose_SystemRecordFunctionStatus SystemDiagnose::SYSTEM_RECORD_FUNC_ENABLE_CALIBRATION;
const SystemDiagnose_SystemRecordFunctionStatus SystemDiagnose::SYSTEM_RECORD_FUNC_ENABLE_TIMESTAMP;
const SystemDiagnose_SystemRecordFunctionStatus SystemDiagnose::SYSTEM_RECORD_FUNC_ENABLE_CSD;
const SystemDiagnose_SystemRecordFunctionStatus SystemDiagnose::SYSTEM_RECORD_FUNC_ENABLE_SCREEN;
const SystemDiagnose_SystemRecordFunctionStatus SystemDiagnose::SYSTEM_RECORD_FUNC_ENABLE_FC;
const SystemDiagnose_SystemRecordFunctionStatus SystemDiagnose::SYSTEM_RECORD_FUNC_ENABLE_FC_NEAR;
const SystemDiagnose_SystemRecordFunctionStatus SystemDiagnose::SYSTEM_RECORD_FUNC_ENABLE_FL;
const SystemDiagnose_SystemRecordFunctionStatus SystemDiagnose::SYSTEM_RECORD_FUNC_ENABLE_FR;
const SystemDiagnose_SystemRecordFunctionStatus SystemDiagnose::SYSTEM_RECORD_FUNC_ENABLE_RC;
const SystemDiagnose_SystemRecordFunctionStatus SystemDiagnose::SYSTEM_RECORD_FUNC_ENABLE_RL;
const SystemDiagnose_SystemRecordFunctionStatus SystemDiagnose::SYSTEM_RECORD_FUNC_ENABLE_RR;
const SystemDiagnose_SystemRecordFunctionStatus SystemDiagnose::SYSTEM_RECORD_FUNC_ENABLE_FC_FAR;
const SystemDiagnose_SystemRecordFunctionStatus SystemDiagnose::SystemRecordFunctionStatus_MIN;
const SystemDiagnose_SystemRecordFunctionStatus SystemDiagnose::SystemRecordFunctionStatus_MAX;
const int SystemDiagnose::SystemRecordFunctionStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemRecordInitStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[34];
}
bool SystemDiagnose_SystemRecordInitStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemRecordInitStatus SystemDiagnose::SYSTEM_RECORD_INIT_SUCCESS;
const SystemDiagnose_SystemRecordInitStatus SystemDiagnose::SYSTEM_RECORD_INIT_ERROR_CALIBRATION;
const SystemDiagnose_SystemRecordInitStatus SystemDiagnose::SYSTEM_RECORD_INIT_ERROR_TIMESTAMP;
const SystemDiagnose_SystemRecordInitStatus SystemDiagnose::SYSTEM_RECORD_INIT_ERROR_CSD;
const SystemDiagnose_SystemRecordInitStatus SystemDiagnose::SYSTEM_RECORD_INIT_ERROR_SCREEN;
const SystemDiagnose_SystemRecordInitStatus SystemDiagnose::SYSTEM_RECORD_INIT_ERROR_FC;
const SystemDiagnose_SystemRecordInitStatus SystemDiagnose::SYSTEM_RECORD_INIT_ERROR_FC_NEAR;
const SystemDiagnose_SystemRecordInitStatus SystemDiagnose::SYSTEM_RECORD_INIT_ERROR_FL;
const SystemDiagnose_SystemRecordInitStatus SystemDiagnose::SYSTEM_RECORD_INIT_ERROR_FR;
const SystemDiagnose_SystemRecordInitStatus SystemDiagnose::SYSTEM_RECORD_INIT_ERROR_RC;
const SystemDiagnose_SystemRecordInitStatus SystemDiagnose::SYSTEM_RECORD_INIT_ERROR_RL;
const SystemDiagnose_SystemRecordInitStatus SystemDiagnose::SYSTEM_RECORD_INIT_ERROR_RR;
const SystemDiagnose_SystemRecordInitStatus SystemDiagnose::SYSTEM_RECORD_INIT_ERROR_FC_FAR;
const SystemDiagnose_SystemRecordInitStatus SystemDiagnose::SystemRecordInitStatus_MIN;
const SystemDiagnose_SystemRecordInitStatus SystemDiagnose::SystemRecordInitStatus_MAX;
const int SystemDiagnose::SystemRecordInitStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SystemDiagnose_SystemRecordRunStatus_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[35];
}
bool SystemDiagnose_SystemRecordRunStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SystemDiagnose_SystemRecordRunStatus SystemDiagnose::SYSTEM_RECORD_RUN_SUCCESS;
const SystemDiagnose_SystemRecordRunStatus SystemDiagnose::SYSTEM_RECORD_RUN_WARN_TOO_SLOW;
const SystemDiagnose_SystemRecordRunStatus SystemDiagnose::SYSTEM_RECORD_RUN_ERROR_CALIBRATION;
const SystemDiagnose_SystemRecordRunStatus SystemDiagnose::SYSTEM_RECORD_RUN_ERROR_TIMESTAMP;
const SystemDiagnose_SystemRecordRunStatus SystemDiagnose::SYSTEM_RECORD_RUN_ERROR_CSD;
const SystemDiagnose_SystemRecordRunStatus SystemDiagnose::SYSTEM_RECORD_RUN_ERROR_SCREEN;
const SystemDiagnose_SystemRecordRunStatus SystemDiagnose::SYSTEM_RECORD_RUN_ERROR_FC;
const SystemDiagnose_SystemRecordRunStatus SystemDiagnose::SYSTEM_RECORD_RUN_ERROR_FC_NEAR;
const SystemDiagnose_SystemRecordRunStatus SystemDiagnose::SYSTEM_RECORD_RUN_ERROR_FL;
const SystemDiagnose_SystemRecordRunStatus SystemDiagnose::SYSTEM_RECORD_RUN_ERROR_FR;
const SystemDiagnose_SystemRecordRunStatus SystemDiagnose::SYSTEM_RECORD_RUN_ERROR_RC;
const SystemDiagnose_SystemRecordRunStatus SystemDiagnose::SYSTEM_RECORD_RUN_ERROR_RL;
const SystemDiagnose_SystemRecordRunStatus SystemDiagnose::SYSTEM_RECORD_RUN_ERROR_RR;
const SystemDiagnose_SystemRecordRunStatus SystemDiagnose::SYSTEM_RECORD_RUN_ERROR_FC_FAR;
const SystemDiagnose_SystemRecordRunStatus SystemDiagnose::SystemRecordRunStatus_MIN;
const SystemDiagnose_SystemRecordRunStatus SystemDiagnose::SystemRecordRunStatus_MAX;
const int SystemDiagnose::SystemRecordRunStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DiagnoseModule_descriptor() {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fdiagnose_2eproto::file_level_enum_descriptors[36];
}
bool DiagnoseModule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PerceptionDiagnose::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptionDiagnose::kFrameIndexFieldNumber;
const int PerceptionDiagnose::kTimestampFieldNumber;
const int PerceptionDiagnose::kModuleIdFieldNumber;
const int PerceptionDiagnose::kModuleNameFieldNumber;
const int PerceptionDiagnose::kSubModuleIdFieldNumber;
const int PerceptionDiagnose::kSubModuleNameFieldNumber;
const int PerceptionDiagnose::kEnableFieldNumber;
const int PerceptionDiagnose::kInitStatusFieldNumber;
const int PerceptionDiagnose::kInputStatusFieldNumber;
const int PerceptionDiagnose::kRunningStatusFieldNumber;
const int PerceptionDiagnose::kFunctionStatusFieldNumber;
const int PerceptionDiagnose::kOutputStatusFieldNumber;
const int PerceptionDiagnose::kProcessRuntimeFieldNumber;
const int PerceptionDiagnose::kInferRuntimeFieldNumber;
const int PerceptionDiagnose::kPostRuntimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptionDiagnose::PerceptionDiagnose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fdiagnose_2eproto::InitDefaultsPerceptionDiagnose();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.PerceptionDiagnose)
}
PerceptionDiagnose::PerceptionDiagnose(const PerceptionDiagnose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.module_name().size() > 0) {
    module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
  }
  sub_module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sub_module_name().size() > 0) {
    sub_module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sub_module_name_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&post_runtime_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(post_runtime_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.PerceptionDiagnose)
}

void PerceptionDiagnose::SharedCtor() {
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&post_runtime_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(post_runtime_));
  _cached_size_ = 0;
}

PerceptionDiagnose::~PerceptionDiagnose() {
  // @@protoc_insertion_point(destructor:calmcar.perception.PerceptionDiagnose)
  SharedDtor();
}

void PerceptionDiagnose::SharedDtor() {
  module_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_module_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PerceptionDiagnose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerceptionDiagnose::descriptor() {
  ::protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fdiagnose_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PerceptionDiagnose& PerceptionDiagnose::default_instance() {
  ::protobuf_perception_5fdiagnose_2eproto::InitDefaultsPerceptionDiagnose();
  return *internal_default_instance();
}

PerceptionDiagnose* PerceptionDiagnose::New(::google::protobuf::Arena* arena) const {
  PerceptionDiagnose* n = new PerceptionDiagnose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerceptionDiagnose::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.PerceptionDiagnose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&post_runtime_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(post_runtime_));
  _internal_metadata_.Clear();
}

bool PerceptionDiagnose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.PerceptionDiagnose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 frame_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.DiagnoseModule module_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_id(static_cast< ::calmcar::perception::DiagnoseModule >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string module_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->module_name().data(), static_cast<int>(this->module_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.PerceptionDiagnose.module_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sub_module_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_module_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sub_module_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_module_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sub_module_name().data(), static_cast<int>(this->sub_module_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.PerceptionDiagnose.sub_module_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 init_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &init_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 input_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 running_status = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &running_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 function_status = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &function_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 output_status = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 process_runtime = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_runtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 infer_runtime = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &infer_runtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 post_runtime = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &post_runtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.PerceptionDiagnose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.PerceptionDiagnose)
  return false;
#undef DO_
}

void PerceptionDiagnose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.PerceptionDiagnose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frame_index = 1;
  if (this->frame_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frame_index(), output);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // .calmcar.perception.DiagnoseModule module_id = 3;
  if (this->module_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->module_id(), output);
  }

  // string module_name = 4;
  if (this->module_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_name().data(), static_cast<int>(this->module_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.PerceptionDiagnose.module_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->module_name(), output);
  }

  // uint32 sub_module_id = 5;
  if (this->sub_module_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sub_module_id(), output);
  }

  // string sub_module_name = 6;
  if (this->sub_module_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sub_module_name().data(), static_cast<int>(this->sub_module_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.PerceptionDiagnose.sub_module_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sub_module_name(), output);
  }

  // bool enable = 7;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enable(), output);
  }

  // uint32 init_status = 8;
  if (this->init_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->init_status(), output);
  }

  // uint32 input_status = 9;
  if (this->input_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->input_status(), output);
  }

  // uint32 running_status = 10;
  if (this->running_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->running_status(), output);
  }

  // uint32 function_status = 11;
  if (this->function_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->function_status(), output);
  }

  // uint32 output_status = 12;
  if (this->output_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->output_status(), output);
  }

  // uint32 process_runtime = 13;
  if (this->process_runtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->process_runtime(), output);
  }

  // uint32 infer_runtime = 14;
  if (this->infer_runtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->infer_runtime(), output);
  }

  // uint32 post_runtime = 15;
  if (this->post_runtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->post_runtime(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.PerceptionDiagnose)
}

::google::protobuf::uint8* PerceptionDiagnose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.PerceptionDiagnose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frame_index = 1;
  if (this->frame_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frame_index(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // .calmcar.perception.DiagnoseModule module_id = 3;
  if (this->module_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->module_id(), target);
  }

  // string module_name = 4;
  if (this->module_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_name().data(), static_cast<int>(this->module_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.PerceptionDiagnose.module_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->module_name(), target);
  }

  // uint32 sub_module_id = 5;
  if (this->sub_module_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sub_module_id(), target);
  }

  // string sub_module_name = 6;
  if (this->sub_module_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sub_module_name().data(), static_cast<int>(this->sub_module_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.PerceptionDiagnose.sub_module_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sub_module_name(), target);
  }

  // bool enable = 7;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->enable(), target);
  }

  // uint32 init_status = 8;
  if (this->init_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->init_status(), target);
  }

  // uint32 input_status = 9;
  if (this->input_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->input_status(), target);
  }

  // uint32 running_status = 10;
  if (this->running_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->running_status(), target);
  }

  // uint32 function_status = 11;
  if (this->function_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->function_status(), target);
  }

  // uint32 output_status = 12;
  if (this->output_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->output_status(), target);
  }

  // uint32 process_runtime = 13;
  if (this->process_runtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->process_runtime(), target);
  }

  // uint32 infer_runtime = 14;
  if (this->infer_runtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->infer_runtime(), target);
  }

  // uint32 post_runtime = 15;
  if (this->post_runtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->post_runtime(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.PerceptionDiagnose)
  return target;
}

size_t PerceptionDiagnose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.PerceptionDiagnose)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string module_name = 4;
  if (this->module_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->module_name());
  }

  // string sub_module_name = 6;
  if (this->sub_module_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sub_module_name());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // uint32 frame_index = 1;
  if (this->frame_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame_index());
  }

  // .calmcar.perception.DiagnoseModule module_id = 3;
  if (this->module_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_id());
  }

  // uint32 sub_module_id = 5;
  if (this->sub_module_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sub_module_id());
  }

  // bool enable = 7;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 init_status = 8;
  if (this->init_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->init_status());
  }

  // uint32 input_status = 9;
  if (this->input_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->input_status());
  }

  // uint32 running_status = 10;
  if (this->running_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->running_status());
  }

  // uint32 function_status = 11;
  if (this->function_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->function_status());
  }

  // uint32 output_status = 12;
  if (this->output_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->output_status());
  }

  // uint32 process_runtime = 13;
  if (this->process_runtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->process_runtime());
  }

  // uint32 infer_runtime = 14;
  if (this->infer_runtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->infer_runtime());
  }

  // uint32 post_runtime = 15;
  if (this->post_runtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->post_runtime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerceptionDiagnose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.PerceptionDiagnose)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptionDiagnose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PerceptionDiagnose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.PerceptionDiagnose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.PerceptionDiagnose)
    MergeFrom(*source);
  }
}

void PerceptionDiagnose::MergeFrom(const PerceptionDiagnose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.PerceptionDiagnose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.module_name().size() > 0) {

    module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
  }
  if (from.sub_module_name().size() > 0) {

    sub_module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sub_module_name_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.frame_index() != 0) {
    set_frame_index(from.frame_index());
  }
  if (from.module_id() != 0) {
    set_module_id(from.module_id());
  }
  if (from.sub_module_id() != 0) {
    set_sub_module_id(from.sub_module_id());
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.init_status() != 0) {
    set_init_status(from.init_status());
  }
  if (from.input_status() != 0) {
    set_input_status(from.input_status());
  }
  if (from.running_status() != 0) {
    set_running_status(from.running_status());
  }
  if (from.function_status() != 0) {
    set_function_status(from.function_status());
  }
  if (from.output_status() != 0) {
    set_output_status(from.output_status());
  }
  if (from.process_runtime() != 0) {
    set_process_runtime(from.process_runtime());
  }
  if (from.infer_runtime() != 0) {
    set_infer_runtime(from.infer_runtime());
  }
  if (from.post_runtime() != 0) {
    set_post_runtime(from.post_runtime());
  }
}

void PerceptionDiagnose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.PerceptionDiagnose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionDiagnose::CopyFrom(const PerceptionDiagnose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.PerceptionDiagnose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionDiagnose::IsInitialized() const {
  return true;
}

void PerceptionDiagnose::Swap(PerceptionDiagnose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptionDiagnose::InternalSwap(PerceptionDiagnose* other) {
  using std::swap;
  module_name_.Swap(&other->module_name_);
  sub_module_name_.Swap(&other->sub_module_name_);
  swap(timestamp_, other->timestamp_);
  swap(frame_index_, other->frame_index_);
  swap(module_id_, other->module_id_);
  swap(sub_module_id_, other->sub_module_id_);
  swap(enable_, other->enable_);
  swap(init_status_, other->init_status_);
  swap(input_status_, other->input_status_);
  swap(running_status_, other->running_status_);
  swap(function_status_, other->function_status_);
  swap(output_status_, other->output_status_);
  swap(process_runtime_, other->process_runtime_);
  swap(infer_runtime_, other->infer_runtime_);
  swap(post_runtime_, other->post_runtime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerceptionDiagnose::GetMetadata() const {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fdiagnose_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SystemDiagnose::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemDiagnose::kFrameIndexFieldNumber;
const int SystemDiagnose::kTimestampFieldNumber;
const int SystemDiagnose::kModuleIdFieldNumber;
const int SystemDiagnose::kModuleNameFieldNumber;
const int SystemDiagnose::kSubModuleIdFieldNumber;
const int SystemDiagnose::kSubModuleNameFieldNumber;
const int SystemDiagnose::kEnableFieldNumber;
const int SystemDiagnose::kFunctionStatusFieldNumber;
const int SystemDiagnose::kInitStatusFieldNumber;
const int SystemDiagnose::kRunningStatusFieldNumber;
const int SystemDiagnose::kProcessTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemDiagnose::SystemDiagnose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fdiagnose_2eproto::InitDefaultsSystemDiagnose();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.SystemDiagnose)
}
SystemDiagnose::SystemDiagnose(const SystemDiagnose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.module_name().size() > 0) {
    module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
  }
  sub_module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sub_module_name().size() > 0) {
    sub_module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sub_module_name_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&process_time_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(process_time_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.SystemDiagnose)
}

void SystemDiagnose::SharedCtor() {
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&process_time_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(process_time_));
  _cached_size_ = 0;
}

SystemDiagnose::~SystemDiagnose() {
  // @@protoc_insertion_point(destructor:calmcar.perception.SystemDiagnose)
  SharedDtor();
}

void SystemDiagnose::SharedDtor() {
  module_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_module_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SystemDiagnose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemDiagnose::descriptor() {
  ::protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fdiagnose_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SystemDiagnose& SystemDiagnose::default_instance() {
  ::protobuf_perception_5fdiagnose_2eproto::InitDefaultsSystemDiagnose();
  return *internal_default_instance();
}

SystemDiagnose* SystemDiagnose::New(::google::protobuf::Arena* arena) const {
  SystemDiagnose* n = new SystemDiagnose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SystemDiagnose::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.SystemDiagnose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&process_time_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(process_time_));
  _internal_metadata_.Clear();
}

bool SystemDiagnose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.SystemDiagnose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 frame_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.DiagnoseModule module_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module_id(static_cast< ::calmcar::perception::DiagnoseModule >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string module_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->module_name().data(), static_cast<int>(this->module_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.SystemDiagnose.module_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sub_module_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_module_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sub_module_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_module_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sub_module_name().data(), static_cast<int>(this->sub_module_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.SystemDiagnose.sub_module_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 function_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &function_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 init_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &init_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 running_status = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &running_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 process_time = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.SystemDiagnose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.SystemDiagnose)
  return false;
#undef DO_
}

void SystemDiagnose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.SystemDiagnose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frame_index = 1;
  if (this->frame_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frame_index(), output);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // .calmcar.perception.DiagnoseModule module_id = 3;
  if (this->module_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->module_id(), output);
  }

  // string module_name = 4;
  if (this->module_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_name().data(), static_cast<int>(this->module_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.SystemDiagnose.module_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->module_name(), output);
  }

  // uint32 sub_module_id = 5;
  if (this->sub_module_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sub_module_id(), output);
  }

  // string sub_module_name = 6;
  if (this->sub_module_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sub_module_name().data(), static_cast<int>(this->sub_module_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.SystemDiagnose.sub_module_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sub_module_name(), output);
  }

  // bool enable = 7;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enable(), output);
  }

  // uint32 function_status = 8;
  if (this->function_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->function_status(), output);
  }

  // uint32 init_status = 9;
  if (this->init_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->init_status(), output);
  }

  // uint32 running_status = 10;
  if (this->running_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->running_status(), output);
  }

  // uint32 process_time = 20;
  if (this->process_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->process_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.SystemDiagnose)
}

::google::protobuf::uint8* SystemDiagnose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.SystemDiagnose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 frame_index = 1;
  if (this->frame_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frame_index(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // .calmcar.perception.DiagnoseModule module_id = 3;
  if (this->module_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->module_id(), target);
  }

  // string module_name = 4;
  if (this->module_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_name().data(), static_cast<int>(this->module_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.SystemDiagnose.module_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->module_name(), target);
  }

  // uint32 sub_module_id = 5;
  if (this->sub_module_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sub_module_id(), target);
  }

  // string sub_module_name = 6;
  if (this->sub_module_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sub_module_name().data(), static_cast<int>(this->sub_module_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.SystemDiagnose.sub_module_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sub_module_name(), target);
  }

  // bool enable = 7;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->enable(), target);
  }

  // uint32 function_status = 8;
  if (this->function_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->function_status(), target);
  }

  // uint32 init_status = 9;
  if (this->init_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->init_status(), target);
  }

  // uint32 running_status = 10;
  if (this->running_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->running_status(), target);
  }

  // uint32 process_time = 20;
  if (this->process_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->process_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.SystemDiagnose)
  return target;
}

size_t SystemDiagnose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.SystemDiagnose)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string module_name = 4;
  if (this->module_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->module_name());
  }

  // string sub_module_name = 6;
  if (this->sub_module_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sub_module_name());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // uint32 frame_index = 1;
  if (this->frame_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame_index());
  }

  // .calmcar.perception.DiagnoseModule module_id = 3;
  if (this->module_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->module_id());
  }

  // uint32 sub_module_id = 5;
  if (this->sub_module_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sub_module_id());
  }

  // bool enable = 7;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 function_status = 8;
  if (this->function_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->function_status());
  }

  // uint32 init_status = 9;
  if (this->init_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->init_status());
  }

  // uint32 running_status = 10;
  if (this->running_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->running_status());
  }

  // uint32 process_time = 20;
  if (this->process_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->process_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemDiagnose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.SystemDiagnose)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemDiagnose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SystemDiagnose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.SystemDiagnose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.SystemDiagnose)
    MergeFrom(*source);
  }
}

void SystemDiagnose::MergeFrom(const SystemDiagnose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.SystemDiagnose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.module_name().size() > 0) {

    module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
  }
  if (from.sub_module_name().size() > 0) {

    sub_module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sub_module_name_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.frame_index() != 0) {
    set_frame_index(from.frame_index());
  }
  if (from.module_id() != 0) {
    set_module_id(from.module_id());
  }
  if (from.sub_module_id() != 0) {
    set_sub_module_id(from.sub_module_id());
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.function_status() != 0) {
    set_function_status(from.function_status());
  }
  if (from.init_status() != 0) {
    set_init_status(from.init_status());
  }
  if (from.running_status() != 0) {
    set_running_status(from.running_status());
  }
  if (from.process_time() != 0) {
    set_process_time(from.process_time());
  }
}

void SystemDiagnose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.SystemDiagnose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemDiagnose::CopyFrom(const SystemDiagnose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.SystemDiagnose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemDiagnose::IsInitialized() const {
  return true;
}

void SystemDiagnose::Swap(SystemDiagnose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemDiagnose::InternalSwap(SystemDiagnose* other) {
  using std::swap;
  module_name_.Swap(&other->module_name_);
  sub_module_name_.Swap(&other->sub_module_name_);
  swap(timestamp_, other->timestamp_);
  swap(frame_index_, other->frame_index_);
  swap(module_id_, other->module_id_);
  swap(sub_module_id_, other->sub_module_id_);
  swap(enable_, other->enable_);
  swap(function_status_, other->function_status_);
  swap(init_status_, other->init_status_);
  swap(running_status_, other->running_status_);
  swap(process_time_, other->process_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SystemDiagnose::GetMetadata() const {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fdiagnose_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Diagnose::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Diagnose::kPerceptionDiagnoseFieldNumber;
const int Diagnose::kSystemDiagnoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Diagnose::Diagnose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fdiagnose_2eproto::InitDefaultsDiagnose();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.Diagnose)
}
Diagnose::Diagnose(const Diagnose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      perception_diagnose_(from.perception_diagnose_),
      system_diagnose_(from.system_diagnose_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.Diagnose)
}

void Diagnose::SharedCtor() {
  _cached_size_ = 0;
}

Diagnose::~Diagnose() {
  // @@protoc_insertion_point(destructor:calmcar.perception.Diagnose)
  SharedDtor();
}

void Diagnose::SharedDtor() {
}

void Diagnose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Diagnose::descriptor() {
  ::protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fdiagnose_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Diagnose& Diagnose::default_instance() {
  ::protobuf_perception_5fdiagnose_2eproto::InitDefaultsDiagnose();
  return *internal_default_instance();
}

Diagnose* Diagnose::New(::google::protobuf::Arena* arena) const {
  Diagnose* n = new Diagnose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Diagnose::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.Diagnose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perception_diagnose_.Clear();
  system_diagnose_.Clear();
  _internal_metadata_.Clear();
}

bool Diagnose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.Diagnose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .calmcar.perception.PerceptionDiagnose perception_diagnose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_perception_diagnose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.SystemDiagnose system_diagnose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_system_diagnose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.Diagnose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.Diagnose)
  return false;
#undef DO_
}

void Diagnose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.Diagnose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .calmcar.perception.PerceptionDiagnose perception_diagnose = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perception_diagnose_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->perception_diagnose(static_cast<int>(i)), output);
  }

  // repeated .calmcar.perception.SystemDiagnose system_diagnose = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->system_diagnose_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->system_diagnose(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.Diagnose)
}

::google::protobuf::uint8* Diagnose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.Diagnose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .calmcar.perception.PerceptionDiagnose perception_diagnose = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perception_diagnose_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->perception_diagnose(static_cast<int>(i)), deterministic, target);
  }

  // repeated .calmcar.perception.SystemDiagnose system_diagnose = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->system_diagnose_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->system_diagnose(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.Diagnose)
  return target;
}

size_t Diagnose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.Diagnose)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .calmcar.perception.PerceptionDiagnose perception_diagnose = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->perception_diagnose_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->perception_diagnose(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.SystemDiagnose system_diagnose = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->system_diagnose_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->system_diagnose(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Diagnose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.Diagnose)
  GOOGLE_DCHECK_NE(&from, this);
  const Diagnose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Diagnose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.Diagnose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.Diagnose)
    MergeFrom(*source);
  }
}

void Diagnose::MergeFrom(const Diagnose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.Diagnose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perception_diagnose_.MergeFrom(from.perception_diagnose_);
  system_diagnose_.MergeFrom(from.system_diagnose_);
}

void Diagnose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.Diagnose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Diagnose::CopyFrom(const Diagnose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.Diagnose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diagnose::IsInitialized() const {
  return true;
}

void Diagnose::Swap(Diagnose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Diagnose::InternalSwap(Diagnose* other) {
  using std::swap;
  perception_diagnose_.InternalSwap(&other->perception_diagnose_);
  system_diagnose_.InternalSwap(&other->system_diagnose_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Diagnose::GetMetadata() const {
  protobuf_perception_5fdiagnose_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fdiagnose_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace calmcar

// @@protoc_insertion_point(global_scope)
