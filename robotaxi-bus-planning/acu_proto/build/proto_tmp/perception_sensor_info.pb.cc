// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception_sensor_info.proto

#include "perception_sensor_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace calmcar {
namespace perception {
class CameraInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraInfo>
      _instance;
} _CameraInfo_default_instance_;
class LidarInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LidarInfo>
      _instance;
} _LidarInfo_default_instance_;
class SensorInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorInfo>
      _instance;
} _SensorInfo_default_instance_;
}  // namespace perception
}  // namespace calmcar
namespace protobuf_perception_5fsensor_5finfo_2eproto {
void InitDefaultsCameraInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5ftypes_2eproto::InitDefaultsMatrix2d();
  {
    void* ptr = &::calmcar::perception::_CameraInfo_default_instance_;
    new (ptr) ::calmcar::perception::CameraInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::CameraInfo::InitAsDefaultInstance();
}

void InitDefaultsCameraInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCameraInfoImpl);
}

void InitDefaultsLidarInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::calmcar::perception::_LidarInfo_default_instance_;
    new (ptr) ::calmcar::perception::LidarInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::LidarInfo::InitAsDefaultInstance();
}

void InitDefaultsLidarInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLidarInfoImpl);
}

void InitDefaultsSensorInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5fsensor_5finfo_2eproto::InitDefaultsCameraInfo();
  protobuf_perception_5fsensor_5finfo_2eproto::InitDefaultsLidarInfo();
  {
    void* ptr = &::calmcar::perception::_SensorInfo_default_instance_;
    new (ptr) ::calmcar::perception::SensorInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::SensorInfo::InitAsDefaultInstance();
}

void InitDefaultsSensorInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSensorInfoImpl);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::CameraInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::CameraInfo, camera_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::CameraInfo, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::CameraInfo, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::CameraInfo, intrinsic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::CameraInfo, extrinsic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::CameraInfo, position_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarInfo, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarInfo, property_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarInfo, data_port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SensorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SensorInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SensorInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SensorInfo, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SensorInfo, camera_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SensorInfo, lidar_info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::calmcar::perception::CameraInfo)},
  { 11, -1, sizeof(::calmcar::perception::LidarInfo)},
  { 19, -1, sizeof(::calmcar::perception::SensorInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_CameraInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_LidarInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_SensorInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "perception_sensor_info.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\034perception_sensor_info.proto\022\022calmcar."
      "perception\032\026perception_types.proto\"\354\002\n\nC"
      "ameraInfo\022\021\n\tcamera_id\030\001 \001(\003\022\r\n\005width\030\002 "
      "\001(\005\022\016\n\006height\030\003 \001(\005\022/\n\tintrinsic\030\004 \001(\0132\034"
      ".calmcar.perception.Matrix2d\022/\n\textrinsi"
      "c\030\005 \001(\0132\034.calmcar.perception.Matrix2d\0229\n"
      "\010position\030\006 \001(\0162\'.calmcar.perception.Cam"
      "eraInfo.Position\"\216\001\n\010Position\022\n\n\006CENTER\020"
      "\000\022\017\n\013CENTER_NEAR\020\001\022\016\n\nFRONT_LEFT\020\002\022\017\n\013FR"
      "ONT_RIGHT\020\003\022\017\n\013REAR_CENTER\020\004\022\r\n\tREAR_LEF"
      "T\020\005\022\016\n\nREAR_RIGHT\020\006\022\024\n\020FRONT_CENTER_FAR\020"
      "\007\"D\n\tLidarInfo\022\r\n\005index\030\001 \001(\003\022\025\n\rpropert"
      "y_port\030\002 \001(\005\022\021\n\tdata_port\030\003 \001(\005\"\303\001\n\nSens"
      "orInfo\022,\n\004type\030\001 \001(\0162\036.calmcar.perceptio"
      "n.SensorType\022\014\n\004name\030\002 \001(\t\022\021\n\ttimestamp\030"
      "\003 \001(\003\0223\n\013camera_info\030\004 \001(\0132\036.calmcar.per"
      "ception.CameraInfo\0221\n\nlidar_info\030\005 \001(\0132\035"
      ".calmcar.perception.LidarInfo*\202\001\n\nSensor"
      "Type\022\027\n\023SENSOR_TYPE_UNKNOWN\020\000\022\026\n\022SENSOR_"
      "TYPE_CAMERA\020\001\022\025\n\021SENSOR_TYPE_RADAR\020\002\022\025\n\021"
      "SENSOR_TYPE_LIDAR\020\003\022\025\n\021SENSOR_TYPE_FUSED"
      "\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 850);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception_sensor_info.proto", &protobuf_RegisterTypes);
  ::protobuf_perception_5ftypes_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_perception_5fsensor_5finfo_2eproto
namespace calmcar {
namespace perception {
const ::google::protobuf::EnumDescriptor* CameraInfo_Position_descriptor() {
  protobuf_perception_5fsensor_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fsensor_5finfo_2eproto::file_level_enum_descriptors[0];
}
bool CameraInfo_Position_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CameraInfo_Position CameraInfo::CENTER;
const CameraInfo_Position CameraInfo::CENTER_NEAR;
const CameraInfo_Position CameraInfo::FRONT_LEFT;
const CameraInfo_Position CameraInfo::FRONT_RIGHT;
const CameraInfo_Position CameraInfo::REAR_CENTER;
const CameraInfo_Position CameraInfo::REAR_LEFT;
const CameraInfo_Position CameraInfo::REAR_RIGHT;
const CameraInfo_Position CameraInfo::FRONT_CENTER_FAR;
const CameraInfo_Position CameraInfo::Position_MIN;
const CameraInfo_Position CameraInfo::Position_MAX;
const int CameraInfo::Position_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SensorType_descriptor() {
  protobuf_perception_5fsensor_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fsensor_5finfo_2eproto::file_level_enum_descriptors[1];
}
bool SensorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CameraInfo::InitAsDefaultInstance() {
  ::calmcar::perception::_CameraInfo_default_instance_._instance.get_mutable()->intrinsic_ = const_cast< ::calmcar::perception::Matrix2d*>(
      ::calmcar::perception::Matrix2d::internal_default_instance());
  ::calmcar::perception::_CameraInfo_default_instance_._instance.get_mutable()->extrinsic_ = const_cast< ::calmcar::perception::Matrix2d*>(
      ::calmcar::perception::Matrix2d::internal_default_instance());
}
void CameraInfo::clear_intrinsic() {
  if (GetArenaNoVirtual() == NULL && intrinsic_ != NULL) {
    delete intrinsic_;
  }
  intrinsic_ = NULL;
}
void CameraInfo::clear_extrinsic() {
  if (GetArenaNoVirtual() == NULL && extrinsic_ != NULL) {
    delete extrinsic_;
  }
  extrinsic_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraInfo::kCameraIdFieldNumber;
const int CameraInfo::kWidthFieldNumber;
const int CameraInfo::kHeightFieldNumber;
const int CameraInfo::kIntrinsicFieldNumber;
const int CameraInfo::kExtrinsicFieldNumber;
const int CameraInfo::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraInfo::CameraInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fsensor_5finfo_2eproto::InitDefaultsCameraInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.CameraInfo)
}
CameraInfo::CameraInfo(const CameraInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_intrinsic()) {
    intrinsic_ = new ::calmcar::perception::Matrix2d(*from.intrinsic_);
  } else {
    intrinsic_ = NULL;
  }
  if (from.has_extrinsic()) {
    extrinsic_ = new ::calmcar::perception::Matrix2d(*from.extrinsic_);
  } else {
    extrinsic_ = NULL;
  }
  ::memcpy(&camera_id_, &from.camera_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&camera_id_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.CameraInfo)
}

void CameraInfo::SharedCtor() {
  ::memset(&intrinsic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&intrinsic_)) + sizeof(position_));
  _cached_size_ = 0;
}

CameraInfo::~CameraInfo() {
  // @@protoc_insertion_point(destructor:calmcar.perception.CameraInfo)
  SharedDtor();
}

void CameraInfo::SharedDtor() {
  if (this != internal_default_instance()) delete intrinsic_;
  if (this != internal_default_instance()) delete extrinsic_;
}

void CameraInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraInfo::descriptor() {
  ::protobuf_perception_5fsensor_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fsensor_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraInfo& CameraInfo::default_instance() {
  ::protobuf_perception_5fsensor_5finfo_2eproto::InitDefaultsCameraInfo();
  return *internal_default_instance();
}

CameraInfo* CameraInfo::New(::google::protobuf::Arena* arena) const {
  CameraInfo* n = new CameraInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.CameraInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && intrinsic_ != NULL) {
    delete intrinsic_;
  }
  intrinsic_ = NULL;
  if (GetArenaNoVirtual() == NULL && extrinsic_ != NULL) {
    delete extrinsic_;
  }
  extrinsic_ = NULL;
  ::memset(&camera_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&camera_id_)) + sizeof(position_));
  _internal_metadata_.Clear();
}

bool CameraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.CameraInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 camera_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &camera_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Matrix2d intrinsic = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intrinsic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Matrix2d extrinsic = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_extrinsic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.CameraInfo.Position position = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_position(static_cast< ::calmcar::perception::CameraInfo_Position >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.CameraInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.CameraInfo)
  return false;
#undef DO_
}

void CameraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.CameraInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 camera_id = 1;
  if (this->camera_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->camera_id(), output);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // .calmcar.perception.Matrix2d intrinsic = 4;
  if (this->has_intrinsic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->intrinsic_, output);
  }

  // .calmcar.perception.Matrix2d extrinsic = 5;
  if (this->has_extrinsic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->extrinsic_, output);
  }

  // .calmcar.perception.CameraInfo.Position position = 6;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->position(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.CameraInfo)
}

::google::protobuf::uint8* CameraInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.CameraInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 camera_id = 1;
  if (this->camera_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->camera_id(), target);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // .calmcar.perception.Matrix2d intrinsic = 4;
  if (this->has_intrinsic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->intrinsic_, deterministic, target);
  }

  // .calmcar.perception.Matrix2d extrinsic = 5;
  if (this->has_extrinsic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->extrinsic_, deterministic, target);
  }

  // .calmcar.perception.CameraInfo.Position position = 6;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->position(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.CameraInfo)
  return target;
}

size_t CameraInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.CameraInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .calmcar.perception.Matrix2d intrinsic = 4;
  if (this->has_intrinsic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->intrinsic_);
  }

  // .calmcar.perception.Matrix2d extrinsic = 5;
  if (this->has_extrinsic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->extrinsic_);
  }

  // int64 camera_id = 1;
  if (this->camera_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->camera_id());
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // .calmcar.perception.CameraInfo.Position position = 6;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.CameraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.CameraInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.CameraInfo)
    MergeFrom(*source);
  }
}

void CameraInfo::MergeFrom(const CameraInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.CameraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_intrinsic()) {
    mutable_intrinsic()->::calmcar::perception::Matrix2d::MergeFrom(from.intrinsic());
  }
  if (from.has_extrinsic()) {
    mutable_extrinsic()->::calmcar::perception::Matrix2d::MergeFrom(from.extrinsic());
  }
  if (from.camera_id() != 0) {
    set_camera_id(from.camera_id());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
}

void CameraInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.CameraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraInfo::CopyFrom(const CameraInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.CameraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraInfo::IsInitialized() const {
  return true;
}

void CameraInfo::Swap(CameraInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraInfo::InternalSwap(CameraInfo* other) {
  using std::swap;
  swap(intrinsic_, other->intrinsic_);
  swap(extrinsic_, other->extrinsic_);
  swap(camera_id_, other->camera_id_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(position_, other->position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraInfo::GetMetadata() const {
  protobuf_perception_5fsensor_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fsensor_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LidarInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LidarInfo::kIndexFieldNumber;
const int LidarInfo::kPropertyPortFieldNumber;
const int LidarInfo::kDataPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LidarInfo::LidarInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fsensor_5finfo_2eproto::InitDefaultsLidarInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.LidarInfo)
}
LidarInfo::LidarInfo(const LidarInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_port_) -
    reinterpret_cast<char*>(&index_)) + sizeof(data_port_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.LidarInfo)
}

void LidarInfo::SharedCtor() {
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_port_) -
      reinterpret_cast<char*>(&index_)) + sizeof(data_port_));
  _cached_size_ = 0;
}

LidarInfo::~LidarInfo() {
  // @@protoc_insertion_point(destructor:calmcar.perception.LidarInfo)
  SharedDtor();
}

void LidarInfo::SharedDtor() {
}

void LidarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LidarInfo::descriptor() {
  ::protobuf_perception_5fsensor_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fsensor_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LidarInfo& LidarInfo::default_instance() {
  ::protobuf_perception_5fsensor_5finfo_2eproto::InitDefaultsLidarInfo();
  return *internal_default_instance();
}

LidarInfo* LidarInfo::New(::google::protobuf::Arena* arena) const {
  LidarInfo* n = new LidarInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LidarInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.LidarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_port_) -
      reinterpret_cast<char*>(&index_)) + sizeof(data_port_));
  _internal_metadata_.Clear();
}

bool LidarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.LidarInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 property_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 data_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.LidarInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.LidarInfo)
  return false;
#undef DO_
}

void LidarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.LidarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->index(), output);
  }

  // int32 property_port = 2;
  if (this->property_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->property_port(), output);
  }

  // int32 data_port = 3;
  if (this->data_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->data_port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.LidarInfo)
}

::google::protobuf::uint8* LidarInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.LidarInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->index(), target);
  }

  // int32 property_port = 2;
  if (this->property_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->property_port(), target);
  }

  // int32 data_port = 3;
  if (this->data_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->data_port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.LidarInfo)
  return target;
}

size_t LidarInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.LidarInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  // int32 property_port = 2;
  if (this->property_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->property_port());
  }

  // int32 data_port = 3;
  if (this->data_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->data_port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LidarInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.LidarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LidarInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.LidarInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.LidarInfo)
    MergeFrom(*source);
  }
}

void LidarInfo::MergeFrom(const LidarInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.LidarInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.property_port() != 0) {
    set_property_port(from.property_port());
  }
  if (from.data_port() != 0) {
    set_data_port(from.data_port());
  }
}

void LidarInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.LidarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarInfo::CopyFrom(const LidarInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.LidarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarInfo::IsInitialized() const {
  return true;
}

void LidarInfo::Swap(LidarInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LidarInfo::InternalSwap(LidarInfo* other) {
  using std::swap;
  swap(index_, other->index_);
  swap(property_port_, other->property_port_);
  swap(data_port_, other->data_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LidarInfo::GetMetadata() const {
  protobuf_perception_5fsensor_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fsensor_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorInfo::InitAsDefaultInstance() {
  ::calmcar::perception::_SensorInfo_default_instance_._instance.get_mutable()->camera_info_ = const_cast< ::calmcar::perception::CameraInfo*>(
      ::calmcar::perception::CameraInfo::internal_default_instance());
  ::calmcar::perception::_SensorInfo_default_instance_._instance.get_mutable()->lidar_info_ = const_cast< ::calmcar::perception::LidarInfo*>(
      ::calmcar::perception::LidarInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorInfo::kTypeFieldNumber;
const int SensorInfo::kNameFieldNumber;
const int SensorInfo::kTimestampFieldNumber;
const int SensorInfo::kCameraInfoFieldNumber;
const int SensorInfo::kLidarInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorInfo::SensorInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fsensor_5finfo_2eproto::InitDefaultsSensorInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.SensorInfo)
}
SensorInfo::SensorInfo(const SensorInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_camera_info()) {
    camera_info_ = new ::calmcar::perception::CameraInfo(*from.camera_info_);
  } else {
    camera_info_ = NULL;
  }
  if (from.has_lidar_info()) {
    lidar_info_ = new ::calmcar::perception::LidarInfo(*from.lidar_info_);
  } else {
    lidar_info_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.SensorInfo)
}

void SensorInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&camera_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&camera_info_)) + sizeof(type_));
  _cached_size_ = 0;
}

SensorInfo::~SensorInfo() {
  // @@protoc_insertion_point(destructor:calmcar.perception.SensorInfo)
  SharedDtor();
}

void SensorInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete camera_info_;
  if (this != internal_default_instance()) delete lidar_info_;
}

void SensorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorInfo::descriptor() {
  ::protobuf_perception_5fsensor_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fsensor_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorInfo& SensorInfo::default_instance() {
  ::protobuf_perception_5fsensor_5finfo_2eproto::InitDefaultsSensorInfo();
  return *internal_default_instance();
}

SensorInfo* SensorInfo::New(::google::protobuf::Arena* arena) const {
  SensorInfo* n = new SensorInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.SensorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && camera_info_ != NULL) {
    delete camera_info_;
  }
  camera_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && lidar_info_ != NULL) {
    delete lidar_info_;
  }
  lidar_info_ = NULL;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool SensorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.SensorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.SensorType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::calmcar::perception::SensorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.SensorInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.CameraInfo camera_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.LidarInfo lidar_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lidar_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.SensorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.SensorInfo)
  return false;
#undef DO_
}

void SensorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.SensorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.SensorType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.SensorInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // .calmcar.perception.CameraInfo camera_info = 4;
  if (this->has_camera_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->camera_info_, output);
  }

  // .calmcar.perception.LidarInfo lidar_info = 5;
  if (this->has_lidar_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->lidar_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.SensorInfo)
}

::google::protobuf::uint8* SensorInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.SensorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.SensorType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.SensorInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // .calmcar.perception.CameraInfo camera_info = 4;
  if (this->has_camera_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->camera_info_, deterministic, target);
  }

  // .calmcar.perception.LidarInfo lidar_info = 5;
  if (this->has_lidar_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->lidar_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.SensorInfo)
  return target;
}

size_t SensorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.SensorInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .calmcar.perception.CameraInfo camera_info = 4;
  if (this->has_camera_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->camera_info_);
  }

  // .calmcar.perception.LidarInfo lidar_info = 5;
  if (this->has_lidar_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lidar_info_);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // .calmcar.perception.SensorType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.SensorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.SensorInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.SensorInfo)
    MergeFrom(*source);
  }
}

void SensorInfo::MergeFrom(const SensorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.SensorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_camera_info()) {
    mutable_camera_info()->::calmcar::perception::CameraInfo::MergeFrom(from.camera_info());
  }
  if (from.has_lidar_info()) {
    mutable_lidar_info()->::calmcar::perception::LidarInfo::MergeFrom(from.lidar_info());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SensorInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.SensorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorInfo::CopyFrom(const SensorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.SensorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorInfo::IsInitialized() const {
  return true;
}

void SensorInfo::Swap(SensorInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorInfo::InternalSwap(SensorInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(camera_info_, other->camera_info_);
  swap(lidar_info_, other->lidar_info_);
  swap(timestamp_, other->timestamp_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorInfo::GetMetadata() const {
  protobuf_perception_5fsensor_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fsensor_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace calmcar

// @@protoc_insertion_point(global_scope)
