// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ccperception.proto

#include "ccperception.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace calmcar {
namespace perception {
class PointXYZIDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PointXYZI>
      _instance;
} _PointXYZI_default_instance_;
class SingleLidarDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SingleLidarData>
      _instance;
} _SingleLidarData_default_instance_;
class RawLidarFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RawLidarFrame>
      _instance;
} _RawLidarFrame_default_instance_;
class CCPerceptionFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCPerceptionFrame>
      _instance;
} _CCPerceptionFrame_default_instance_;
}  // namespace perception
}  // namespace calmcar
namespace protobuf_ccperception_2eproto {
void InitDefaultsPointXYZIImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::calmcar::perception::_PointXYZI_default_instance_;
    new (ptr) ::calmcar::perception::PointXYZI();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::PointXYZI::InitAsDefaultInstance();
}

void InitDefaultsPointXYZI() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPointXYZIImpl);
}

void InitDefaultsSingleLidarDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ccperception_2eproto::InitDefaultsPointXYZI();
  {
    void* ptr = &::calmcar::perception::_SingleLidarData_default_instance_;
    new (ptr) ::calmcar::perception::SingleLidarData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::SingleLidarData::InitAsDefaultInstance();
}

void InitDefaultsSingleLidarData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSingleLidarDataImpl);
}

void InitDefaultsRawLidarFrameImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ccperception_2eproto::InitDefaultsSingleLidarData();
  {
    void* ptr = &::calmcar::perception::_RawLidarFrame_default_instance_;
    new (ptr) ::calmcar::perception::RawLidarFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::RawLidarFrame::InitAsDefaultInstance();
}

void InitDefaultsRawLidarFrame() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRawLidarFrameImpl);
}

void InitDefaultsCCPerceptionFrameImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_2eproto::InitDefaultsPerceptionFrame();
  protobuf_lidar_5fperception_2eproto::InitDefaultsLidarPerceptionFrame();
  protobuf_ccperception_2eproto::InitDefaultsRawLidarFrame();
  protobuf_vehicle_5finfo_2eproto::InitDefaultsVehicleInfo();
  {
    void* ptr = &::calmcar::perception::_CCPerceptionFrame_default_instance_;
    new (ptr) ::calmcar::perception::CCPerceptionFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::CCPerceptionFrame::InitAsDefaultInstance();
}

void InitDefaultsCCPerceptionFrame() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCCPerceptionFrameImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PointXYZI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PointXYZI, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PointXYZI, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PointXYZI, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PointXYZI, i_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SingleLidarData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SingleLidarData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SingleLidarData, lidar_sensor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SingleLidarData, lidar_sensor_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SingleLidarData, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SingleLidarData, scan_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SingleLidarData, difop_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SingleLidarData, offset_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SingleLidarData, offset_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SingleLidarData, offset_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SingleLidarData, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SingleLidarData, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SingleLidarData, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::SingleLidarData, lidar_sensor_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RawLidarFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RawLidarFrame, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RawLidarFrame, frame_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RawLidarFrame, single_lidar_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::CCPerceptionFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::CCPerceptionFrame, sync_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::CCPerceptionFrame, camera_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::CCPerceptionFrame, lidar_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::CCPerceptionFrame, enable_camera_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::CCPerceptionFrame, vision_perception_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::CCPerceptionFrame, enable_lidar_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::CCPerceptionFrame, lidar_perception_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::CCPerceptionFrame, enable_fusion_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::CCPerceptionFrame, fusion_perception_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::CCPerceptionFrame, raw_lidar_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::CCPerceptionFrame, vehicle_info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::calmcar::perception::PointXYZI)},
  { 9, -1, sizeof(::calmcar::perception::SingleLidarData)},
  { 27, -1, sizeof(::calmcar::perception::RawLidarFrame)},
  { 35, -1, sizeof(::calmcar::perception::CCPerceptionFrame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_PointXYZI_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_SingleLidarData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_RawLidarFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_CCPerceptionFrame_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ccperception.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022ccperception.proto\022\022calmcar.perception"
      "\032\026perception_types.proto\032\020perception.pro"
      "to\032\026lidar_perception.proto\032\022vehicle_info"
      ".proto\"7\n\tPointXYZI\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001("
      "\002\022\t\n\001z\030\003 \001(\002\022\t\n\001i\030\004 \001(\005\"\247\002\n\017SingleLidarD"
      "ata\022\021\n\ttimestamp\030\001 \001(\003\022\027\n\017lidar_sensor_i"
      "d\030\002 \001(\005\022\031\n\021lidar_sensor_name\030\003 \001(\t\022-\n\006po"
      "ints\030\004 \003(\0132\035.calmcar.perception.PointXYZ"
      "I\022\020\n\010scan_msg\030\005 \003(\014\022\021\n\tdifop_msg\030\006 \001(\014\022\020"
      "\n\010offset_x\030\007 \001(\002\022\020\n\010offset_y\030\010 \001(\002\022\020\n\010of"
      "fset_z\030\t \001(\002\022\013\n\003yaw\030\n \001(\002\022\014\n\004roll\030\013 \001(\002\022"
      "\r\n\005pitch\030\014 \001(\002\022\031\n\021lidar_sensor_type\030\r \001("
      "\t\"w\n\rRawLidarFrame\022\021\n\ttimestamp\030\001 \001(\003\022\023\n"
      "\013frame_index\030\002 \001(\003\022>\n\021single_lidar_data\030"
      "\003 \003(\0132#.calmcar.perception.SingleLidarDa"
      "ta\"\362\003\n\021CCPerceptionFrame\022\026\n\016sync_timesta"
      "mp\030\001 \001(\004\022\030\n\020camera_timestamp\030\002 \001(\004\022\027\n\017li"
      "dar_timestamp\030\003 \001(\004\022\034\n\024enable_camera_out"
      "put\030\004 \001(\010\022>\n\021vision_perception\030\005 \001(\0132#.c"
      "almcar.perception.PerceptionFrame\022\033\n\023ena"
      "ble_lidar_output\030\006 \001(\010\022B\n\020lidar_percepti"
      "on\030\007 \001(\0132(.calmcar.perception.LidarPerce"
      "ptionFrame\022\034\n\024enable_fusion_output\030\010 \001(\010"
      "\022>\n\021fusion_perception\030\t \001(\0132#.calmcar.pe"
      "rception.PerceptionFrame\022:\n\017raw_lidar_fr"
      "ame\030\025 \001(\0132!.calmcar.perception.RawLidarF"
      "rame\0229\n\014vehicle_info\030\026 \001(\0132#.vehicle_inf"
      "o.proto_msg.VehicleInfob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1111);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ccperception.proto", &protobuf_RegisterTypes);
  ::protobuf_perception_5ftypes_2eproto::AddDescriptors();
  ::protobuf_perception_2eproto::AddDescriptors();
  ::protobuf_lidar_5fperception_2eproto::AddDescriptors();
  ::protobuf_vehicle_5finfo_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ccperception_2eproto
namespace calmcar {
namespace perception {

// ===================================================================

void PointXYZI::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointXYZI::kXFieldNumber;
const int PointXYZI::kYFieldNumber;
const int PointXYZI::kZFieldNumber;
const int PointXYZI::kIFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointXYZI::PointXYZI()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ccperception_2eproto::InitDefaultsPointXYZI();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.PointXYZI)
}
PointXYZI::PointXYZI(const PointXYZI& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&i_) -
    reinterpret_cast<char*>(&x_)) + sizeof(i_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.PointXYZI)
}

void PointXYZI::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&i_) -
      reinterpret_cast<char*>(&x_)) + sizeof(i_));
  _cached_size_ = 0;
}

PointXYZI::~PointXYZI() {
  // @@protoc_insertion_point(destructor:calmcar.perception.PointXYZI)
  SharedDtor();
}

void PointXYZI::SharedDtor() {
}

void PointXYZI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointXYZI::descriptor() {
  ::protobuf_ccperception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ccperception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PointXYZI& PointXYZI::default_instance() {
  ::protobuf_ccperception_2eproto::InitDefaultsPointXYZI();
  return *internal_default_instance();
}

PointXYZI* PointXYZI::New(::google::protobuf::Arena* arena) const {
  PointXYZI* n = new PointXYZI;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointXYZI::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.PointXYZI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&i_) -
      reinterpret_cast<char*>(&x_)) + sizeof(i_));
  _internal_metadata_.Clear();
}

bool PointXYZI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.PointXYZI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 i = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.PointXYZI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.PointXYZI)
  return false;
#undef DO_
}

void PointXYZI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.PointXYZI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // int32 i = 4;
  if (this->i() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->i(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.PointXYZI)
}

::google::protobuf::uint8* PointXYZI::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.PointXYZI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // int32 i = 4;
  if (this->i() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->i(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.PointXYZI)
  return target;
}

size_t PointXYZI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.PointXYZI)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // int32 i = 4;
  if (this->i() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->i());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointXYZI::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.PointXYZI)
  GOOGLE_DCHECK_NE(&from, this);
  const PointXYZI* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointXYZI>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.PointXYZI)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.PointXYZI)
    MergeFrom(*source);
  }
}

void PointXYZI::MergeFrom(const PointXYZI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.PointXYZI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.i() != 0) {
    set_i(from.i());
  }
}

void PointXYZI::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.PointXYZI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointXYZI::CopyFrom(const PointXYZI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.PointXYZI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointXYZI::IsInitialized() const {
  return true;
}

void PointXYZI::Swap(PointXYZI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointXYZI::InternalSwap(PointXYZI* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(i_, other->i_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointXYZI::GetMetadata() const {
  protobuf_ccperception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ccperception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SingleLidarData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SingleLidarData::kTimestampFieldNumber;
const int SingleLidarData::kLidarSensorIdFieldNumber;
const int SingleLidarData::kLidarSensorNameFieldNumber;
const int SingleLidarData::kPointsFieldNumber;
const int SingleLidarData::kScanMsgFieldNumber;
const int SingleLidarData::kDifopMsgFieldNumber;
const int SingleLidarData::kOffsetXFieldNumber;
const int SingleLidarData::kOffsetYFieldNumber;
const int SingleLidarData::kOffsetZFieldNumber;
const int SingleLidarData::kYawFieldNumber;
const int SingleLidarData::kRollFieldNumber;
const int SingleLidarData::kPitchFieldNumber;
const int SingleLidarData::kLidarSensorTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SingleLidarData::SingleLidarData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ccperception_2eproto::InitDefaultsSingleLidarData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.SingleLidarData)
}
SingleLidarData::SingleLidarData(const SingleLidarData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_),
      scan_msg_(from.scan_msg_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lidar_sensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lidar_sensor_name().size() > 0) {
    lidar_sensor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lidar_sensor_name_);
  }
  difop_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.difop_msg().size() > 0) {
    difop_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.difop_msg_);
  }
  lidar_sensor_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lidar_sensor_type().size() > 0) {
    lidar_sensor_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lidar_sensor_type_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&pitch_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(pitch_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.SingleLidarData)
}

void SingleLidarData::SharedCtor() {
  lidar_sensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  difop_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lidar_sensor_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(pitch_));
  _cached_size_ = 0;
}

SingleLidarData::~SingleLidarData() {
  // @@protoc_insertion_point(destructor:calmcar.perception.SingleLidarData)
  SharedDtor();
}

void SingleLidarData::SharedDtor() {
  lidar_sensor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  difop_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lidar_sensor_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SingleLidarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleLidarData::descriptor() {
  ::protobuf_ccperception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ccperception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SingleLidarData& SingleLidarData::default_instance() {
  ::protobuf_ccperception_2eproto::InitDefaultsSingleLidarData();
  return *internal_default_instance();
}

SingleLidarData* SingleLidarData::New(::google::protobuf::Arena* arena) const {
  SingleLidarData* n = new SingleLidarData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SingleLidarData::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.SingleLidarData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  scan_msg_.Clear();
  lidar_sensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  difop_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lidar_sensor_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(pitch_));
  _internal_metadata_.Clear();
}

bool SingleLidarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.SingleLidarData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lidar_sensor_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lidar_sensor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lidar_sensor_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lidar_sensor_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lidar_sensor_name().data(), static_cast<int>(this->lidar_sensor_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.SingleLidarData.lidar_sensor_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.PointXYZI points = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes scan_msg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_scan_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes difop_msg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_difop_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float offset_x = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float offset_y = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float offset_z = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lidar_sensor_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lidar_sensor_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lidar_sensor_type().data(), static_cast<int>(this->lidar_sensor_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.SingleLidarData.lidar_sensor_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.SingleLidarData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.SingleLidarData)
  return false;
#undef DO_
}

void SingleLidarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.SingleLidarData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // int32 lidar_sensor_id = 2;
  if (this->lidar_sensor_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lidar_sensor_id(), output);
  }

  // string lidar_sensor_name = 3;
  if (this->lidar_sensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lidar_sensor_name().data(), static_cast<int>(this->lidar_sensor_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.SingleLidarData.lidar_sensor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lidar_sensor_name(), output);
  }

  // repeated .calmcar.perception.PointXYZI points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->points(static_cast<int>(i)), output);
  }

  // repeated bytes scan_msg = 5;
  for (int i = 0, n = this->scan_msg_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->scan_msg(i), output);
  }

  // bytes difop_msg = 6;
  if (this->difop_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->difop_msg(), output);
  }

  // float offset_x = 7;
  if (this->offset_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->offset_x(), output);
  }

  // float offset_y = 8;
  if (this->offset_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->offset_y(), output);
  }

  // float offset_z = 9;
  if (this->offset_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->offset_z(), output);
  }

  // float yaw = 10;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->yaw(), output);
  }

  // float roll = 11;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->roll(), output);
  }

  // float pitch = 12;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->pitch(), output);
  }

  // string lidar_sensor_type = 13;
  if (this->lidar_sensor_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lidar_sensor_type().data(), static_cast<int>(this->lidar_sensor_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.SingleLidarData.lidar_sensor_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->lidar_sensor_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.SingleLidarData)
}

::google::protobuf::uint8* SingleLidarData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.SingleLidarData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // int32 lidar_sensor_id = 2;
  if (this->lidar_sensor_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lidar_sensor_id(), target);
  }

  // string lidar_sensor_name = 3;
  if (this->lidar_sensor_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lidar_sensor_name().data(), static_cast<int>(this->lidar_sensor_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.SingleLidarData.lidar_sensor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lidar_sensor_name(), target);
  }

  // repeated .calmcar.perception.PointXYZI points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->points(static_cast<int>(i)), deterministic, target);
  }

  // repeated bytes scan_msg = 5;
  for (int i = 0, n = this->scan_msg_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->scan_msg(i), target);
  }

  // bytes difop_msg = 6;
  if (this->difop_msg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->difop_msg(), target);
  }

  // float offset_x = 7;
  if (this->offset_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->offset_x(), target);
  }

  // float offset_y = 8;
  if (this->offset_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->offset_y(), target);
  }

  // float offset_z = 9;
  if (this->offset_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->offset_z(), target);
  }

  // float yaw = 10;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->yaw(), target);
  }

  // float roll = 11;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->roll(), target);
  }

  // float pitch = 12;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->pitch(), target);
  }

  // string lidar_sensor_type = 13;
  if (this->lidar_sensor_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lidar_sensor_type().data(), static_cast<int>(this->lidar_sensor_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.SingleLidarData.lidar_sensor_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->lidar_sensor_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.SingleLidarData)
  return target;
}

size_t SingleLidarData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.SingleLidarData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .calmcar.perception.PointXYZI points = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  // repeated bytes scan_msg = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->scan_msg_size());
  for (int i = 0, n = this->scan_msg_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->scan_msg(i));
  }

  // string lidar_sensor_name = 3;
  if (this->lidar_sensor_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lidar_sensor_name());
  }

  // bytes difop_msg = 6;
  if (this->difop_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->difop_msg());
  }

  // string lidar_sensor_type = 13;
  if (this->lidar_sensor_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lidar_sensor_type());
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 lidar_sensor_id = 2;
  if (this->lidar_sensor_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lidar_sensor_id());
  }

  // float offset_x = 7;
  if (this->offset_x() != 0) {
    total_size += 1 + 4;
  }

  // float offset_y = 8;
  if (this->offset_y() != 0) {
    total_size += 1 + 4;
  }

  // float offset_z = 9;
  if (this->offset_z() != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 10;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  // float roll = 11;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 12;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleLidarData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.SingleLidarData)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleLidarData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleLidarData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.SingleLidarData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.SingleLidarData)
    MergeFrom(*source);
  }
}

void SingleLidarData::MergeFrom(const SingleLidarData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.SingleLidarData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  scan_msg_.MergeFrom(from.scan_msg_);
  if (from.lidar_sensor_name().size() > 0) {

    lidar_sensor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lidar_sensor_name_);
  }
  if (from.difop_msg().size() > 0) {

    difop_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.difop_msg_);
  }
  if (from.lidar_sensor_type().size() > 0) {

    lidar_sensor_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lidar_sensor_type_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.lidar_sensor_id() != 0) {
    set_lidar_sensor_id(from.lidar_sensor_id());
  }
  if (from.offset_x() != 0) {
    set_offset_x(from.offset_x());
  }
  if (from.offset_y() != 0) {
    set_offset_y(from.offset_y());
  }
  if (from.offset_z() != 0) {
    set_offset_z(from.offset_z());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
}

void SingleLidarData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.SingleLidarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleLidarData::CopyFrom(const SingleLidarData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.SingleLidarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleLidarData::IsInitialized() const {
  return true;
}

void SingleLidarData::Swap(SingleLidarData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleLidarData::InternalSwap(SingleLidarData* other) {
  using std::swap;
  points_.InternalSwap(&other->points_);
  scan_msg_.InternalSwap(&other->scan_msg_);
  lidar_sensor_name_.Swap(&other->lidar_sensor_name_);
  difop_msg_.Swap(&other->difop_msg_);
  lidar_sensor_type_.Swap(&other->lidar_sensor_type_);
  swap(timestamp_, other->timestamp_);
  swap(lidar_sensor_id_, other->lidar_sensor_id_);
  swap(offset_x_, other->offset_x_);
  swap(offset_y_, other->offset_y_);
  swap(offset_z_, other->offset_z_);
  swap(yaw_, other->yaw_);
  swap(roll_, other->roll_);
  swap(pitch_, other->pitch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SingleLidarData::GetMetadata() const {
  protobuf_ccperception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ccperception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RawLidarFrame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawLidarFrame::kTimestampFieldNumber;
const int RawLidarFrame::kFrameIndexFieldNumber;
const int RawLidarFrame::kSingleLidarDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawLidarFrame::RawLidarFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ccperception_2eproto::InitDefaultsRawLidarFrame();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.RawLidarFrame)
}
RawLidarFrame::RawLidarFrame(const RawLidarFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      single_lidar_data_(from.single_lidar_data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_index_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(frame_index_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.RawLidarFrame)
}

void RawLidarFrame::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_index_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(frame_index_));
  _cached_size_ = 0;
}

RawLidarFrame::~RawLidarFrame() {
  // @@protoc_insertion_point(destructor:calmcar.perception.RawLidarFrame)
  SharedDtor();
}

void RawLidarFrame::SharedDtor() {
}

void RawLidarFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawLidarFrame::descriptor() {
  ::protobuf_ccperception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ccperception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RawLidarFrame& RawLidarFrame::default_instance() {
  ::protobuf_ccperception_2eproto::InitDefaultsRawLidarFrame();
  return *internal_default_instance();
}

RawLidarFrame* RawLidarFrame::New(::google::protobuf::Arena* arena) const {
  RawLidarFrame* n = new RawLidarFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawLidarFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.RawLidarFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  single_lidar_data_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_index_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(frame_index_));
  _internal_metadata_.Clear();
}

bool RawLidarFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.RawLidarFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 frame_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frame_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.SingleLidarData single_lidar_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_single_lidar_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.RawLidarFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.RawLidarFrame)
  return false;
#undef DO_
}

void RawLidarFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.RawLidarFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // int64 frame_index = 2;
  if (this->frame_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->frame_index(), output);
  }

  // repeated .calmcar.perception.SingleLidarData single_lidar_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->single_lidar_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->single_lidar_data(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.RawLidarFrame)
}

::google::protobuf::uint8* RawLidarFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.RawLidarFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // int64 frame_index = 2;
  if (this->frame_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->frame_index(), target);
  }

  // repeated .calmcar.perception.SingleLidarData single_lidar_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->single_lidar_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->single_lidar_data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.RawLidarFrame)
  return target;
}

size_t RawLidarFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.RawLidarFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .calmcar.perception.SingleLidarData single_lidar_data = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->single_lidar_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->single_lidar_data(static_cast<int>(i)));
    }
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 frame_index = 2;
  if (this->frame_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->frame_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawLidarFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.RawLidarFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const RawLidarFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawLidarFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.RawLidarFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.RawLidarFrame)
    MergeFrom(*source);
  }
}

void RawLidarFrame::MergeFrom(const RawLidarFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.RawLidarFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  single_lidar_data_.MergeFrom(from.single_lidar_data_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.frame_index() != 0) {
    set_frame_index(from.frame_index());
  }
}

void RawLidarFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.RawLidarFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawLidarFrame::CopyFrom(const RawLidarFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.RawLidarFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawLidarFrame::IsInitialized() const {
  return true;
}

void RawLidarFrame::Swap(RawLidarFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawLidarFrame::InternalSwap(RawLidarFrame* other) {
  using std::swap;
  single_lidar_data_.InternalSwap(&other->single_lidar_data_);
  swap(timestamp_, other->timestamp_);
  swap(frame_index_, other->frame_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawLidarFrame::GetMetadata() const {
  protobuf_ccperception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ccperception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CCPerceptionFrame::InitAsDefaultInstance() {
  ::calmcar::perception::_CCPerceptionFrame_default_instance_._instance.get_mutable()->vision_perception_ = const_cast< ::calmcar::perception::PerceptionFrame*>(
      ::calmcar::perception::PerceptionFrame::internal_default_instance());
  ::calmcar::perception::_CCPerceptionFrame_default_instance_._instance.get_mutable()->lidar_perception_ = const_cast< ::calmcar::perception::LidarPerceptionFrame*>(
      ::calmcar::perception::LidarPerceptionFrame::internal_default_instance());
  ::calmcar::perception::_CCPerceptionFrame_default_instance_._instance.get_mutable()->fusion_perception_ = const_cast< ::calmcar::perception::PerceptionFrame*>(
      ::calmcar::perception::PerceptionFrame::internal_default_instance());
  ::calmcar::perception::_CCPerceptionFrame_default_instance_._instance.get_mutable()->raw_lidar_frame_ = const_cast< ::calmcar::perception::RawLidarFrame*>(
      ::calmcar::perception::RawLidarFrame::internal_default_instance());
  ::calmcar::perception::_CCPerceptionFrame_default_instance_._instance.get_mutable()->vehicle_info_ = const_cast< ::vehicle_info::proto_msg::VehicleInfo*>(
      ::vehicle_info::proto_msg::VehicleInfo::internal_default_instance());
}
void CCPerceptionFrame::clear_vision_perception() {
  if (GetArenaNoVirtual() == NULL && vision_perception_ != NULL) {
    delete vision_perception_;
  }
  vision_perception_ = NULL;
}
void CCPerceptionFrame::clear_lidar_perception() {
  if (GetArenaNoVirtual() == NULL && lidar_perception_ != NULL) {
    delete lidar_perception_;
  }
  lidar_perception_ = NULL;
}
void CCPerceptionFrame::clear_fusion_perception() {
  if (GetArenaNoVirtual() == NULL && fusion_perception_ != NULL) {
    delete fusion_perception_;
  }
  fusion_perception_ = NULL;
}
void CCPerceptionFrame::clear_vehicle_info() {
  if (GetArenaNoVirtual() == NULL && vehicle_info_ != NULL) {
    delete vehicle_info_;
  }
  vehicle_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCPerceptionFrame::kSyncTimestampFieldNumber;
const int CCPerceptionFrame::kCameraTimestampFieldNumber;
const int CCPerceptionFrame::kLidarTimestampFieldNumber;
const int CCPerceptionFrame::kEnableCameraOutputFieldNumber;
const int CCPerceptionFrame::kVisionPerceptionFieldNumber;
const int CCPerceptionFrame::kEnableLidarOutputFieldNumber;
const int CCPerceptionFrame::kLidarPerceptionFieldNumber;
const int CCPerceptionFrame::kEnableFusionOutputFieldNumber;
const int CCPerceptionFrame::kFusionPerceptionFieldNumber;
const int CCPerceptionFrame::kRawLidarFrameFieldNumber;
const int CCPerceptionFrame::kVehicleInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCPerceptionFrame::CCPerceptionFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ccperception_2eproto::InitDefaultsCCPerceptionFrame();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.CCPerceptionFrame)
}
CCPerceptionFrame::CCPerceptionFrame(const CCPerceptionFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_vision_perception()) {
    vision_perception_ = new ::calmcar::perception::PerceptionFrame(*from.vision_perception_);
  } else {
    vision_perception_ = NULL;
  }
  if (from.has_lidar_perception()) {
    lidar_perception_ = new ::calmcar::perception::LidarPerceptionFrame(*from.lidar_perception_);
  } else {
    lidar_perception_ = NULL;
  }
  if (from.has_fusion_perception()) {
    fusion_perception_ = new ::calmcar::perception::PerceptionFrame(*from.fusion_perception_);
  } else {
    fusion_perception_ = NULL;
  }
  if (from.has_raw_lidar_frame()) {
    raw_lidar_frame_ = new ::calmcar::perception::RawLidarFrame(*from.raw_lidar_frame_);
  } else {
    raw_lidar_frame_ = NULL;
  }
  if (from.has_vehicle_info()) {
    vehicle_info_ = new ::vehicle_info::proto_msg::VehicleInfo(*from.vehicle_info_);
  } else {
    vehicle_info_ = NULL;
  }
  ::memcpy(&sync_timestamp_, &from.sync_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_fusion_output_) -
    reinterpret_cast<char*>(&sync_timestamp_)) + sizeof(enable_fusion_output_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.CCPerceptionFrame)
}

void CCPerceptionFrame::SharedCtor() {
  ::memset(&vision_perception_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_fusion_output_) -
      reinterpret_cast<char*>(&vision_perception_)) + sizeof(enable_fusion_output_));
  _cached_size_ = 0;
}

CCPerceptionFrame::~CCPerceptionFrame() {
  // @@protoc_insertion_point(destructor:calmcar.perception.CCPerceptionFrame)
  SharedDtor();
}

void CCPerceptionFrame::SharedDtor() {
  if (this != internal_default_instance()) delete vision_perception_;
  if (this != internal_default_instance()) delete lidar_perception_;
  if (this != internal_default_instance()) delete fusion_perception_;
  if (this != internal_default_instance()) delete raw_lidar_frame_;
  if (this != internal_default_instance()) delete vehicle_info_;
}

void CCPerceptionFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCPerceptionFrame::descriptor() {
  ::protobuf_ccperception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ccperception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCPerceptionFrame& CCPerceptionFrame::default_instance() {
  ::protobuf_ccperception_2eproto::InitDefaultsCCPerceptionFrame();
  return *internal_default_instance();
}

CCPerceptionFrame* CCPerceptionFrame::New(::google::protobuf::Arena* arena) const {
  CCPerceptionFrame* n = new CCPerceptionFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCPerceptionFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.CCPerceptionFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && vision_perception_ != NULL) {
    delete vision_perception_;
  }
  vision_perception_ = NULL;
  if (GetArenaNoVirtual() == NULL && lidar_perception_ != NULL) {
    delete lidar_perception_;
  }
  lidar_perception_ = NULL;
  if (GetArenaNoVirtual() == NULL && fusion_perception_ != NULL) {
    delete fusion_perception_;
  }
  fusion_perception_ = NULL;
  if (GetArenaNoVirtual() == NULL && raw_lidar_frame_ != NULL) {
    delete raw_lidar_frame_;
  }
  raw_lidar_frame_ = NULL;
  if (GetArenaNoVirtual() == NULL && vehicle_info_ != NULL) {
    delete vehicle_info_;
  }
  vehicle_info_ = NULL;
  ::memset(&sync_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_fusion_output_) -
      reinterpret_cast<char*>(&sync_timestamp_)) + sizeof(enable_fusion_output_));
  _internal_metadata_.Clear();
}

bool CCPerceptionFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.CCPerceptionFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 sync_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sync_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 camera_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &camera_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lidar_timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lidar_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_camera_output = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_camera_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.PerceptionFrame vision_perception = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vision_perception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_lidar_output = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_lidar_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.LidarPerceptionFrame lidar_perception = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lidar_perception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_fusion_output = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_fusion_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.PerceptionFrame fusion_perception = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fusion_perception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.RawLidarFrame raw_lidar_frame = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_raw_lidar_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vehicle_info.proto_msg.VehicleInfo vehicle_info = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.CCPerceptionFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.CCPerceptionFrame)
  return false;
#undef DO_
}

void CCPerceptionFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.CCPerceptionFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sync_timestamp = 1;
  if (this->sync_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sync_timestamp(), output);
  }

  // uint64 camera_timestamp = 2;
  if (this->camera_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->camera_timestamp(), output);
  }

  // uint64 lidar_timestamp = 3;
  if (this->lidar_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lidar_timestamp(), output);
  }

  // bool enable_camera_output = 4;
  if (this->enable_camera_output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enable_camera_output(), output);
  }

  // .calmcar.perception.PerceptionFrame vision_perception = 5;
  if (this->has_vision_perception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->vision_perception_, output);
  }

  // bool enable_lidar_output = 6;
  if (this->enable_lidar_output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->enable_lidar_output(), output);
  }

  // .calmcar.perception.LidarPerceptionFrame lidar_perception = 7;
  if (this->has_lidar_perception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->lidar_perception_, output);
  }

  // bool enable_fusion_output = 8;
  if (this->enable_fusion_output() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->enable_fusion_output(), output);
  }

  // .calmcar.perception.PerceptionFrame fusion_perception = 9;
  if (this->has_fusion_perception()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->fusion_perception_, output);
  }

  // .calmcar.perception.RawLidarFrame raw_lidar_frame = 21;
  if (this->has_raw_lidar_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->raw_lidar_frame_, output);
  }

  // .vehicle_info.proto_msg.VehicleInfo vehicle_info = 22;
  if (this->has_vehicle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->vehicle_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.CCPerceptionFrame)
}

::google::protobuf::uint8* CCPerceptionFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.CCPerceptionFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sync_timestamp = 1;
  if (this->sync_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sync_timestamp(), target);
  }

  // uint64 camera_timestamp = 2;
  if (this->camera_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->camera_timestamp(), target);
  }

  // uint64 lidar_timestamp = 3;
  if (this->lidar_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lidar_timestamp(), target);
  }

  // bool enable_camera_output = 4;
  if (this->enable_camera_output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enable_camera_output(), target);
  }

  // .calmcar.perception.PerceptionFrame vision_perception = 5;
  if (this->has_vision_perception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->vision_perception_, deterministic, target);
  }

  // bool enable_lidar_output = 6;
  if (this->enable_lidar_output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->enable_lidar_output(), target);
  }

  // .calmcar.perception.LidarPerceptionFrame lidar_perception = 7;
  if (this->has_lidar_perception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->lidar_perception_, deterministic, target);
  }

  // bool enable_fusion_output = 8;
  if (this->enable_fusion_output() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->enable_fusion_output(), target);
  }

  // .calmcar.perception.PerceptionFrame fusion_perception = 9;
  if (this->has_fusion_perception()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->fusion_perception_, deterministic, target);
  }

  // .calmcar.perception.RawLidarFrame raw_lidar_frame = 21;
  if (this->has_raw_lidar_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, *this->raw_lidar_frame_, deterministic, target);
  }

  // .vehicle_info.proto_msg.VehicleInfo vehicle_info = 22;
  if (this->has_vehicle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, *this->vehicle_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.CCPerceptionFrame)
  return target;
}

size_t CCPerceptionFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.CCPerceptionFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .calmcar.perception.PerceptionFrame vision_perception = 5;
  if (this->has_vision_perception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vision_perception_);
  }

  // .calmcar.perception.LidarPerceptionFrame lidar_perception = 7;
  if (this->has_lidar_perception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lidar_perception_);
  }

  // .calmcar.perception.PerceptionFrame fusion_perception = 9;
  if (this->has_fusion_perception()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->fusion_perception_);
  }

  // .calmcar.perception.RawLidarFrame raw_lidar_frame = 21;
  if (this->has_raw_lidar_frame()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->raw_lidar_frame_);
  }

  // .vehicle_info.proto_msg.VehicleInfo vehicle_info = 22;
  if (this->has_vehicle_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vehicle_info_);
  }

  // uint64 sync_timestamp = 1;
  if (this->sync_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sync_timestamp());
  }

  // uint64 camera_timestamp = 2;
  if (this->camera_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->camera_timestamp());
  }

  // uint64 lidar_timestamp = 3;
  if (this->lidar_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lidar_timestamp());
  }

  // bool enable_camera_output = 4;
  if (this->enable_camera_output() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_lidar_output = 6;
  if (this->enable_lidar_output() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_fusion_output = 8;
  if (this->enable_fusion_output() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCPerceptionFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.CCPerceptionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const CCPerceptionFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCPerceptionFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.CCPerceptionFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.CCPerceptionFrame)
    MergeFrom(*source);
  }
}

void CCPerceptionFrame::MergeFrom(const CCPerceptionFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.CCPerceptionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vision_perception()) {
    mutable_vision_perception()->::calmcar::perception::PerceptionFrame::MergeFrom(from.vision_perception());
  }
  if (from.has_lidar_perception()) {
    mutable_lidar_perception()->::calmcar::perception::LidarPerceptionFrame::MergeFrom(from.lidar_perception());
  }
  if (from.has_fusion_perception()) {
    mutable_fusion_perception()->::calmcar::perception::PerceptionFrame::MergeFrom(from.fusion_perception());
  }
  if (from.has_raw_lidar_frame()) {
    mutable_raw_lidar_frame()->::calmcar::perception::RawLidarFrame::MergeFrom(from.raw_lidar_frame());
  }
  if (from.has_vehicle_info()) {
    mutable_vehicle_info()->::vehicle_info::proto_msg::VehicleInfo::MergeFrom(from.vehicle_info());
  }
  if (from.sync_timestamp() != 0) {
    set_sync_timestamp(from.sync_timestamp());
  }
  if (from.camera_timestamp() != 0) {
    set_camera_timestamp(from.camera_timestamp());
  }
  if (from.lidar_timestamp() != 0) {
    set_lidar_timestamp(from.lidar_timestamp());
  }
  if (from.enable_camera_output() != 0) {
    set_enable_camera_output(from.enable_camera_output());
  }
  if (from.enable_lidar_output() != 0) {
    set_enable_lidar_output(from.enable_lidar_output());
  }
  if (from.enable_fusion_output() != 0) {
    set_enable_fusion_output(from.enable_fusion_output());
  }
}

void CCPerceptionFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.CCPerceptionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCPerceptionFrame::CopyFrom(const CCPerceptionFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.CCPerceptionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCPerceptionFrame::IsInitialized() const {
  return true;
}

void CCPerceptionFrame::Swap(CCPerceptionFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCPerceptionFrame::InternalSwap(CCPerceptionFrame* other) {
  using std::swap;
  swap(vision_perception_, other->vision_perception_);
  swap(lidar_perception_, other->lidar_perception_);
  swap(fusion_perception_, other->fusion_perception_);
  swap(raw_lidar_frame_, other->raw_lidar_frame_);
  swap(vehicle_info_, other->vehicle_info_);
  swap(sync_timestamp_, other->sync_timestamp_);
  swap(camera_timestamp_, other->camera_timestamp_);
  swap(lidar_timestamp_, other->lidar_timestamp_);
  swap(enable_camera_output_, other->enable_camera_output_);
  swap(enable_lidar_output_, other->enable_lidar_output_);
  swap(enable_fusion_output_, other->enable_fusion_output_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCPerceptionFrame::GetMetadata() const {
  protobuf_ccperception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ccperception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace calmcar

// @@protoc_insertion_point(global_scope)
