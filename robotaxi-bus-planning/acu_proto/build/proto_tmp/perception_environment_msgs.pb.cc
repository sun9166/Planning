// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception_environment_msgs.proto

#include "perception_environment_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class SingleTrafficLightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SingleTrafficLight>
      _instance;
} _SingleTrafficLight_default_instance_;
class TrafficLightDetectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightDetection>
      _instance;
} _TrafficLightDetection_default_instance_;
class PerceptionEnvironmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerceptionEnvironment>
      _instance;
} _PerceptionEnvironment_default_instance_;
namespace protobuf_perception_5fenvironment_5fmsgs_2eproto {
void InitDefaultsSingleTrafficLightImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_SingleTrafficLight_default_instance_;
    new (ptr) ::SingleTrafficLight();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SingleTrafficLight::InitAsDefaultInstance();
}

void InitDefaultsSingleTrafficLight() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSingleTrafficLightImpl);
}

void InitDefaultsTrafficLightDetectionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_5fmsgs_2eproto::InitDefaultsHeader();
  protobuf_perception_5fenvironment_5fmsgs_2eproto::InitDefaultsSingleTrafficLight();
  {
    void* ptr = &::_TrafficLightDetection_default_instance_;
    new (ptr) ::TrafficLightDetection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TrafficLightDetection::InitAsDefaultInstance();
}

void InitDefaultsTrafficLightDetection() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrafficLightDetectionImpl);
}

void InitDefaultsPerceptionEnvironmentImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5fenvironment_5fmsgs_2eproto::InitDefaultsTrafficLightDetection();
  {
    void* ptr = &::_PerceptionEnvironment_default_instance_;
    new (ptr) ::PerceptionEnvironment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PerceptionEnvironment::InitAsDefaultInstance();
}

void InitDefaultsPerceptionEnvironment() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPerceptionEnvironmentImpl);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleTrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleTrafficLight, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleTrafficLight, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleTrafficLight, flicker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleTrafficLight, occlude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleTrafficLight, number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleTrafficLight, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleTrafficLight, tracking_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleTrafficLight, light_cycle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleTrafficLight, using_obu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SingleTrafficLight, light_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrafficLightDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrafficLightDetection, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrafficLightDetection, traffic_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TrafficLightDetection, contain_lights_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PerceptionEnvironment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::PerceptionEnvironment, traffic_light_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SingleTrafficLight)},
  { 15, -1, sizeof(::TrafficLightDetection)},
  { 23, -1, sizeof(::PerceptionEnvironment)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SingleTrafficLight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TrafficLightDetection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_PerceptionEnvironment_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "perception_environment_msgs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!perception_environment_msgs.proto\032\021com"
      "mon_msgs.proto\"\321\003\n\022SingleTrafficLight\022(\n"
      "\005color\030\001 \001(\0162\031.SingleTrafficLight.Color\022"
      "\n\n\002id\030\002 \001(\t\022,\n\007flicker\030\003 \001(\0162\033.SingleTra"
      "fficLight.Flicker\022\017\n\007occlude\030\004 \001(\010\022\016\n\006nu"
      "mber\030\005 \001(\005\022\022\n\nconfidence\030\006 \001(\002\022\025\n\rtracki"
      "ng_time\030\007 \001(\002\022\023\n\013light_cycle\030\010 \003(\005\022\021\n\tus"
      "ing_obu\030\t \001(\010\022\022\n\nlight_type\030\n \001(\005\"E\n\005Col"
      "or\022\021\n\rUNKNOWN_COLOR\020\000\022\007\n\003RED\020\001\022\n\n\006YELLOW"
      "\020\002\022\t\n\005GREEN\020\003\022\t\n\005BLACK\020\004\"\207\001\n\007Flicker\022\n\n\006"
      "NORMAL\020\000\022\017\n\013FLICKER_RED\020\001\022\022\n\016FLICKER_YEL"
      "LOW\020\002\022\021\n\rFLICKER_GREEN\020\003\022\020\n\014LENGTH_BLACK"
      "\020\004\022\031\n\025LENGTH_FLICKER_YELLOW\020\005\022\013\n\007UNORMAL"
      "\020\006\"\200\001\n\025TrafficLightDetection\022#\n\006header\030\001"
      " \001(\0132\023.common_msgs.Header\022*\n\rtraffic_lig"
      "ht\030\002 \003(\0132\023.SingleTrafficLight\022\026\n\016contain"
      "_lights\030\003 \001(\010\"F\n\025PerceptionEnvironment\022-"
      "\n\rtraffic_light\030\001 \001(\0132\026.TrafficLightDete"
      "ctionb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 733);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception_environment_msgs.proto", &protobuf_RegisterTypes);
  ::protobuf_common_5fmsgs_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_perception_5fenvironment_5fmsgs_2eproto
const ::google::protobuf::EnumDescriptor* SingleTrafficLight_Color_descriptor() {
  protobuf_perception_5fenvironment_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fenvironment_5fmsgs_2eproto::file_level_enum_descriptors[0];
}
bool SingleTrafficLight_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SingleTrafficLight_Color SingleTrafficLight::UNKNOWN_COLOR;
const SingleTrafficLight_Color SingleTrafficLight::RED;
const SingleTrafficLight_Color SingleTrafficLight::YELLOW;
const SingleTrafficLight_Color SingleTrafficLight::GREEN;
const SingleTrafficLight_Color SingleTrafficLight::BLACK;
const SingleTrafficLight_Color SingleTrafficLight::Color_MIN;
const SingleTrafficLight_Color SingleTrafficLight::Color_MAX;
const int SingleTrafficLight::Color_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SingleTrafficLight_Flicker_descriptor() {
  protobuf_perception_5fenvironment_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5fenvironment_5fmsgs_2eproto::file_level_enum_descriptors[1];
}
bool SingleTrafficLight_Flicker_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SingleTrafficLight_Flicker SingleTrafficLight::NORMAL;
const SingleTrafficLight_Flicker SingleTrafficLight::FLICKER_RED;
const SingleTrafficLight_Flicker SingleTrafficLight::FLICKER_YELLOW;
const SingleTrafficLight_Flicker SingleTrafficLight::FLICKER_GREEN;
const SingleTrafficLight_Flicker SingleTrafficLight::LENGTH_BLACK;
const SingleTrafficLight_Flicker SingleTrafficLight::LENGTH_FLICKER_YELLOW;
const SingleTrafficLight_Flicker SingleTrafficLight::UNORMAL;
const SingleTrafficLight_Flicker SingleTrafficLight::Flicker_MIN;
const SingleTrafficLight_Flicker SingleTrafficLight::Flicker_MAX;
const int SingleTrafficLight::Flicker_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void SingleTrafficLight::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SingleTrafficLight::kColorFieldNumber;
const int SingleTrafficLight::kIdFieldNumber;
const int SingleTrafficLight::kFlickerFieldNumber;
const int SingleTrafficLight::kOccludeFieldNumber;
const int SingleTrafficLight::kNumberFieldNumber;
const int SingleTrafficLight::kConfidenceFieldNumber;
const int SingleTrafficLight::kTrackingTimeFieldNumber;
const int SingleTrafficLight::kLightCycleFieldNumber;
const int SingleTrafficLight::kUsingObuFieldNumber;
const int SingleTrafficLight::kLightTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SingleTrafficLight::SingleTrafficLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fenvironment_5fmsgs_2eproto::InitDefaultsSingleTrafficLight();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SingleTrafficLight)
}
SingleTrafficLight::SingleTrafficLight(const SingleTrafficLight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      light_cycle_(from.light_cycle_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&light_type_) -
    reinterpret_cast<char*>(&color_)) + sizeof(light_type_));
  // @@protoc_insertion_point(copy_constructor:SingleTrafficLight)
}

void SingleTrafficLight::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&light_type_) -
      reinterpret_cast<char*>(&color_)) + sizeof(light_type_));
  _cached_size_ = 0;
}

SingleTrafficLight::~SingleTrafficLight() {
  // @@protoc_insertion_point(destructor:SingleTrafficLight)
  SharedDtor();
}

void SingleTrafficLight::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SingleTrafficLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleTrafficLight::descriptor() {
  ::protobuf_perception_5fenvironment_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fenvironment_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SingleTrafficLight& SingleTrafficLight::default_instance() {
  ::protobuf_perception_5fenvironment_5fmsgs_2eproto::InitDefaultsSingleTrafficLight();
  return *internal_default_instance();
}

SingleTrafficLight* SingleTrafficLight::New(::google::protobuf::Arena* arena) const {
  SingleTrafficLight* n = new SingleTrafficLight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SingleTrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:SingleTrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  light_cycle_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&light_type_) -
      reinterpret_cast<char*>(&color_)) + sizeof(light_type_));
  _internal_metadata_.Clear();
}

bool SingleTrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SingleTrafficLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .SingleTrafficLight.Color color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::SingleTrafficLight_Color >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SingleTrafficLight.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SingleTrafficLight.Flicker flicker = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_flicker(static_cast< ::SingleTrafficLight_Flicker >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool occlude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &occlude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tracking_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tracking_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 light_cycle = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_light_cycle())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66u, input, this->mutable_light_cycle())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool using_obu = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &using_obu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 light_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &light_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SingleTrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SingleTrafficLight)
  return false;
#undef DO_
}

void SingleTrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SingleTrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SingleTrafficLight.Color color = 1;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->color(), output);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SingleTrafficLight.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // .SingleTrafficLight.Flicker flicker = 3;
  if (this->flicker() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->flicker(), output);
  }

  // bool occlude = 4;
  if (this->occlude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->occlude(), output);
  }

  // int32 number = 5;
  if (this->number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->number(), output);
  }

  // float confidence = 6;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->confidence(), output);
  }

  // float tracking_time = 7;
  if (this->tracking_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->tracking_time(), output);
  }

  // repeated int32 light_cycle = 8;
  if (this->light_cycle_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _light_cycle_cached_byte_size_));
  }
  for (int i = 0, n = this->light_cycle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->light_cycle(i), output);
  }

  // bool using_obu = 9;
  if (this->using_obu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->using_obu(), output);
  }

  // int32 light_type = 10;
  if (this->light_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->light_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SingleTrafficLight)
}

::google::protobuf::uint8* SingleTrafficLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SingleTrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SingleTrafficLight.Color color = 1;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->color(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SingleTrafficLight.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // .SingleTrafficLight.Flicker flicker = 3;
  if (this->flicker() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->flicker(), target);
  }

  // bool occlude = 4;
  if (this->occlude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->occlude(), target);
  }

  // int32 number = 5;
  if (this->number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->number(), target);
  }

  // float confidence = 6;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->confidence(), target);
  }

  // float tracking_time = 7;
  if (this->tracking_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->tracking_time(), target);
  }

  // repeated int32 light_cycle = 8;
  if (this->light_cycle_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _light_cycle_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->light_cycle_, target);
  }

  // bool using_obu = 9;
  if (this->using_obu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->using_obu(), target);
  }

  // int32 light_type = 10;
  if (this->light_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->light_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SingleTrafficLight)
  return target;
}

size_t SingleTrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SingleTrafficLight)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 light_cycle = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->light_cycle_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _light_cycle_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .SingleTrafficLight.Color color = 1;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
  }

  // .SingleTrafficLight.Flicker flicker = 3;
  if (this->flicker() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flicker());
  }

  // int32 number = 5;
  if (this->number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number());
  }

  // float confidence = 6;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // bool occlude = 4;
  if (this->occlude() != 0) {
    total_size += 1 + 1;
  }

  // bool using_obu = 9;
  if (this->using_obu() != 0) {
    total_size += 1 + 1;
  }

  // float tracking_time = 7;
  if (this->tracking_time() != 0) {
    total_size += 1 + 4;
  }

  // int32 light_type = 10;
  if (this->light_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->light_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleTrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SingleTrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleTrafficLight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleTrafficLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SingleTrafficLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SingleTrafficLight)
    MergeFrom(*source);
  }
}

void SingleTrafficLight::MergeFrom(const SingleTrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SingleTrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  light_cycle_.MergeFrom(from.light_cycle_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.flicker() != 0) {
    set_flicker(from.flicker());
  }
  if (from.number() != 0) {
    set_number(from.number());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.occlude() != 0) {
    set_occlude(from.occlude());
  }
  if (from.using_obu() != 0) {
    set_using_obu(from.using_obu());
  }
  if (from.tracking_time() != 0) {
    set_tracking_time(from.tracking_time());
  }
  if (from.light_type() != 0) {
    set_light_type(from.light_type());
  }
}

void SingleTrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SingleTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleTrafficLight::CopyFrom(const SingleTrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SingleTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleTrafficLight::IsInitialized() const {
  return true;
}

void SingleTrafficLight::Swap(SingleTrafficLight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleTrafficLight::InternalSwap(SingleTrafficLight* other) {
  using std::swap;
  light_cycle_.InternalSwap(&other->light_cycle_);
  id_.Swap(&other->id_);
  swap(color_, other->color_);
  swap(flicker_, other->flicker_);
  swap(number_, other->number_);
  swap(confidence_, other->confidence_);
  swap(occlude_, other->occlude_);
  swap(using_obu_, other->using_obu_);
  swap(tracking_time_, other->tracking_time_);
  swap(light_type_, other->light_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SingleTrafficLight::GetMetadata() const {
  protobuf_perception_5fenvironment_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fenvironment_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficLightDetection::InitAsDefaultInstance() {
  ::_TrafficLightDetection_default_instance_._instance.get_mutable()->header_ = const_cast< ::common_msgs::Header*>(
      ::common_msgs::Header::internal_default_instance());
}
void TrafficLightDetection::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightDetection::kHeaderFieldNumber;
const int TrafficLightDetection::kTrafficLightFieldNumber;
const int TrafficLightDetection::kContainLightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightDetection::TrafficLightDetection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fenvironment_5fmsgs_2eproto::InitDefaultsTrafficLightDetection();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrafficLightDetection)
}
TrafficLightDetection::TrafficLightDetection(const TrafficLightDetection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      traffic_light_(from.traffic_light_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::common_msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  contain_lights_ = from.contain_lights_;
  // @@protoc_insertion_point(copy_constructor:TrafficLightDetection)
}

void TrafficLightDetection::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contain_lights_) -
      reinterpret_cast<char*>(&header_)) + sizeof(contain_lights_));
  _cached_size_ = 0;
}

TrafficLightDetection::~TrafficLightDetection() {
  // @@protoc_insertion_point(destructor:TrafficLightDetection)
  SharedDtor();
}

void TrafficLightDetection::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void TrafficLightDetection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLightDetection::descriptor() {
  ::protobuf_perception_5fenvironment_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fenvironment_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightDetection& TrafficLightDetection::default_instance() {
  ::protobuf_perception_5fenvironment_5fmsgs_2eproto::InitDefaultsTrafficLightDetection();
  return *internal_default_instance();
}

TrafficLightDetection* TrafficLightDetection::New(::google::protobuf::Arena* arena) const {
  TrafficLightDetection* n = new TrafficLightDetection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLightDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:TrafficLightDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traffic_light_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  contain_lights_ = false;
  _internal_metadata_.Clear();
}

bool TrafficLightDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrafficLightDetection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common_msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SingleTrafficLight traffic_light = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_traffic_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool contain_lights = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contain_lights_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrafficLightDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrafficLightDetection)
  return false;
#undef DO_
}

void TrafficLightDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrafficLightDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .SingleTrafficLight traffic_light = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_light_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->traffic_light(static_cast<int>(i)), output);
  }

  // bool contain_lights = 3;
  if (this->contain_lights() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->contain_lights(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:TrafficLightDetection)
}

::google::protobuf::uint8* TrafficLightDetection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TrafficLightDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .SingleTrafficLight traffic_light = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_light_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->traffic_light(static_cast<int>(i)), deterministic, target);
  }

  // bool contain_lights = 3;
  if (this->contain_lights() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->contain_lights(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrafficLightDetection)
  return target;
}

size_t TrafficLightDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrafficLightDetection)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .SingleTrafficLight traffic_light = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_light_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->traffic_light(static_cast<int>(i)));
    }
  }

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // bool contain_lights = 3;
  if (this->contain_lights() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLightDetection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TrafficLightDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightDetection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightDetection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TrafficLightDetection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TrafficLightDetection)
    MergeFrom(*source);
  }
}

void TrafficLightDetection::MergeFrom(const TrafficLightDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrafficLightDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traffic_light_.MergeFrom(from.traffic_light_);
  if (from.has_header()) {
    mutable_header()->::common_msgs::Header::MergeFrom(from.header());
  }
  if (from.contain_lights() != 0) {
    set_contain_lights(from.contain_lights());
  }
}

void TrafficLightDetection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TrafficLightDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightDetection::CopyFrom(const TrafficLightDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrafficLightDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightDetection::IsInitialized() const {
  return true;
}

void TrafficLightDetection::Swap(TrafficLightDetection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightDetection::InternalSwap(TrafficLightDetection* other) {
  using std::swap;
  traffic_light_.InternalSwap(&other->traffic_light_);
  swap(header_, other->header_);
  swap(contain_lights_, other->contain_lights_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLightDetection::GetMetadata() const {
  protobuf_perception_5fenvironment_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fenvironment_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PerceptionEnvironment::InitAsDefaultInstance() {
  ::_PerceptionEnvironment_default_instance_._instance.get_mutable()->traffic_light_ = const_cast< ::TrafficLightDetection*>(
      ::TrafficLightDetection::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptionEnvironment::kTrafficLightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptionEnvironment::PerceptionEnvironment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fenvironment_5fmsgs_2eproto::InitDefaultsPerceptionEnvironment();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PerceptionEnvironment)
}
PerceptionEnvironment::PerceptionEnvironment(const PerceptionEnvironment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_traffic_light()) {
    traffic_light_ = new ::TrafficLightDetection(*from.traffic_light_);
  } else {
    traffic_light_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:PerceptionEnvironment)
}

void PerceptionEnvironment::SharedCtor() {
  traffic_light_ = NULL;
  _cached_size_ = 0;
}

PerceptionEnvironment::~PerceptionEnvironment() {
  // @@protoc_insertion_point(destructor:PerceptionEnvironment)
  SharedDtor();
}

void PerceptionEnvironment::SharedDtor() {
  if (this != internal_default_instance()) delete traffic_light_;
}

void PerceptionEnvironment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerceptionEnvironment::descriptor() {
  ::protobuf_perception_5fenvironment_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fenvironment_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PerceptionEnvironment& PerceptionEnvironment::default_instance() {
  ::protobuf_perception_5fenvironment_5fmsgs_2eproto::InitDefaultsPerceptionEnvironment();
  return *internal_default_instance();
}

PerceptionEnvironment* PerceptionEnvironment::New(::google::protobuf::Arena* arena) const {
  PerceptionEnvironment* n = new PerceptionEnvironment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerceptionEnvironment::Clear() {
// @@protoc_insertion_point(message_clear_start:PerceptionEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && traffic_light_ != NULL) {
    delete traffic_light_;
  }
  traffic_light_ = NULL;
  _internal_metadata_.Clear();
}

bool PerceptionEnvironment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PerceptionEnvironment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TrafficLightDetection traffic_light = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_traffic_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PerceptionEnvironment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PerceptionEnvironment)
  return false;
#undef DO_
}

void PerceptionEnvironment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PerceptionEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TrafficLightDetection traffic_light = 1;
  if (this->has_traffic_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->traffic_light_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:PerceptionEnvironment)
}

::google::protobuf::uint8* PerceptionEnvironment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PerceptionEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TrafficLightDetection traffic_light = 1;
  if (this->has_traffic_light()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->traffic_light_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PerceptionEnvironment)
  return target;
}

size_t PerceptionEnvironment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PerceptionEnvironment)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .TrafficLightDetection traffic_light = 1;
  if (this->has_traffic_light()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->traffic_light_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerceptionEnvironment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PerceptionEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptionEnvironment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PerceptionEnvironment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PerceptionEnvironment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PerceptionEnvironment)
    MergeFrom(*source);
  }
}

void PerceptionEnvironment::MergeFrom(const PerceptionEnvironment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PerceptionEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_traffic_light()) {
    mutable_traffic_light()->::TrafficLightDetection::MergeFrom(from.traffic_light());
  }
}

void PerceptionEnvironment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PerceptionEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionEnvironment::CopyFrom(const PerceptionEnvironment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PerceptionEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionEnvironment::IsInitialized() const {
  return true;
}

void PerceptionEnvironment::Swap(PerceptionEnvironment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptionEnvironment::InternalSwap(PerceptionEnvironment* other) {
  using std::swap;
  swap(traffic_light_, other->traffic_light_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerceptionEnvironment::GetMetadata() const {
  protobuf_perception_5fenvironment_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fenvironment_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
