// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception_road.proto

#include "perception_road.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace calmcar {
namespace perception {
class LaneHostDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneHost>
      _instance;
} _LaneHost_default_instance_;
class LaneAdjacentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneAdjacent>
      _instance;
} _LaneAdjacent_default_instance_;
class LaneRoadedgeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneRoadedge>
      _instance;
} _LaneRoadedge_default_instance_;
class LaneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lane>
      _instance;
} _Lane_default_instance_;
class RoadMarkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadMark>
      _instance;
} _RoadMark_default_instance_;
class FreeSpaceImagePointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FreeSpaceImagePoint>
      _instance;
} _FreeSpaceImagePoint_default_instance_;
class FreeSpacePointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FreeSpacePoint>
      _instance;
} _FreeSpacePoint_default_instance_;
class FreeSpaceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FreeSpace>
      _instance;
} _FreeSpace_default_instance_;
}  // namespace perception
}  // namespace calmcar
namespace protobuf_perception_5froad_2eproto {
void InitDefaultsLaneHostImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5ftypes_2eproto::InitDefaultsPoint2i();
  {
    void* ptr = &::calmcar::perception::_LaneHost_default_instance_;
    new (ptr) ::calmcar::perception::LaneHost();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::LaneHost::InitAsDefaultInstance();
}

void InitDefaultsLaneHost() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneHostImpl);
}

void InitDefaultsLaneAdjacentImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5ftypes_2eproto::InitDefaultsPoint2i();
  {
    void* ptr = &::calmcar::perception::_LaneAdjacent_default_instance_;
    new (ptr) ::calmcar::perception::LaneAdjacent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::LaneAdjacent::InitAsDefaultInstance();
}

void InitDefaultsLaneAdjacent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneAdjacentImpl);
}

void InitDefaultsLaneRoadedgeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5ftypes_2eproto::InitDefaultsPoint2i();
  {
    void* ptr = &::calmcar::perception::_LaneRoadedge_default_instance_;
    new (ptr) ::calmcar::perception::LaneRoadedge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::LaneRoadedge::InitAsDefaultInstance();
}

void InitDefaultsLaneRoadedge() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneRoadedgeImpl);
}

void InitDefaultsLaneImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5froad_2eproto::InitDefaultsLaneHost();
  protobuf_perception_5froad_2eproto::InitDefaultsLaneAdjacent();
  protobuf_perception_5froad_2eproto::InitDefaultsLaneRoadedge();
  {
    void* ptr = &::calmcar::perception::_Lane_default_instance_;
    new (ptr) ::calmcar::perception::Lane();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::Lane::InitAsDefaultInstance();
}

void InitDefaultsLane() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneImpl);
}

void InitDefaultsRoadMarkImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5ftypes_2eproto::InitDefaultsRect();
  {
    void* ptr = &::calmcar::perception::_RoadMark_default_instance_;
    new (ptr) ::calmcar::perception::RoadMark();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::RoadMark::InitAsDefaultInstance();
}

void InitDefaultsRoadMark() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoadMarkImpl);
}

void InitDefaultsFreeSpaceImagePointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5ftypes_2eproto::InitDefaultsPoint2i();
  {
    void* ptr = &::calmcar::perception::_FreeSpaceImagePoint_default_instance_;
    new (ptr) ::calmcar::perception::FreeSpaceImagePoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::FreeSpaceImagePoint::InitAsDefaultInstance();
}

void InitDefaultsFreeSpaceImagePoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFreeSpaceImagePointImpl);
}

void InitDefaultsFreeSpacePointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::calmcar::perception::_FreeSpacePoint_default_instance_;
    new (ptr) ::calmcar::perception::FreeSpacePoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::FreeSpacePoint::InitAsDefaultInstance();
}

void InitDefaultsFreeSpacePoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFreeSpacePointImpl);
}

void InitDefaultsFreeSpaceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5froad_2eproto::InitDefaultsFreeSpaceImagePoint();
  protobuf_perception_5froad_2eproto::InitDefaultsFreeSpacePoint();
  {
    void* ptr = &::calmcar::perception::_FreeSpace_default_instance_;
    new (ptr) ::calmcar::perception::FreeSpace();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::FreeSpace::InitAsDefaultInstance();
}

void InitDefaultsFreeSpace() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFreeSpaceImpl);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, track_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, exist_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, prediction_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, prediction_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, color_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, lanemark_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, lanemark_type_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, dlm_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, decel_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, crossing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, marker_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, marker_width_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, dash_average_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, dash_average_gap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, is_multi_clothoid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, first_line_c3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, first_line_c2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, first_line_c1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, first_line_c0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, first_view_range_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, first_view_range_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, first_measured_view_range_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, second_line_c3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, second_line_c2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, second_line_c1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, second_line_c0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, second_view_range_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, second_view_range_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, second_measured_view_range_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, camera_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, is_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, image_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneHost, availability_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, track_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, exist_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, prediction_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, prediction_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, color_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, lanemark_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, lanemark_type_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, dlm_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, role_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, marker_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, marker_width_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, line_c3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, line_c2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, line_c1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, line_c0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, view_range_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, view_range_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, measured_view_range_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, camera_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, is_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, image_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneAdjacent, availability_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, exist_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, prediction_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, height_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, line_c3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, line_c1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, line_c2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, line_c0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, view_range_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, view_range_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, measured_view_range_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, camera_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, is_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, image_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LaneRoadedge, availability_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Lane, sync_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Lane, estimated_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Lane, lane_host_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Lane, lane_host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Lane, lane_adjacent_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Lane, lane_adjacent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Lane, road_edge_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Lane, road_edge_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RoadMark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RoadMark, sync_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RoadMark, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RoadMark, camera_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RoadMark, bbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RoadMark, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RoadMark, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RoadMark, object_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RoadMark, object_class_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RoadMark, object_subclass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RoadMark, object_subclass_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RoadMark, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RoadMark, lat_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RoadMark, lat_distance_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RoadMark, long_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RoadMark, long_distance_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RoadMark, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::RoadMark, length_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreeSpaceImagePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreeSpaceImagePoint, camera_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreeSpaceImagePoint, classification_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreeSpaceImagePoint, image_point_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreeSpacePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreeSpacePoint, camera_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreeSpacePoint, classification_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreeSpacePoint, exist_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreeSpacePoint, azimuth_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreeSpacePoint, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreeSpacePoint, range_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreeSpacePoint, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreeSpacePoint, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreeSpacePoint, is_valid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreeSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreeSpace, sync_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreeSpace, image_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreeSpace, freespace_points_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::calmcar::perception::LaneHost)},
  { 43, -1, sizeof(::calmcar::perception::LaneAdjacent)},
  { 74, -1, sizeof(::calmcar::perception::LaneRoadedge)},
  { 100, -1, sizeof(::calmcar::perception::Lane)},
  { 113, -1, sizeof(::calmcar::perception::RoadMark)},
  { 135, -1, sizeof(::calmcar::perception::FreeSpaceImagePoint)},
  { 143, -1, sizeof(::calmcar::perception::FreeSpacePoint)},
  { 157, -1, sizeof(::calmcar::perception::FreeSpace)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_LaneHost_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_LaneAdjacent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_LaneRoadedge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_Lane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_RoadMark_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_FreeSpaceImagePoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_FreeSpacePoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_FreeSpace_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "perception_road.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025perception_road.proto\022\022calmcar.percept"
      "ion\032\034perception_sensor_info.proto\032\026perce"
      "ption_types.proto\"\256\t\n\010LaneHost\022\021\n\ttimest"
      "amp\030\001 \001(\003\022\020\n\010track_id\030\002 \001(\005\022\013\n\003age\030\003 \001(\005"
      "\022\031\n\021exist_probability\030\004 \001(\002\0220\n\007quality\030\005"
      " \001(\0162\037.calmcar.perception.LineQuality\022\031\n"
      "\021prediction_source\030\006 \001(\003\022\027\n\017prediction_t"
      "ype\030\007 \001(\003\022,\n\005color\030\010 \001(\0162\035.calmcar.perce"
      "ption.LineColor\022\030\n\020color_confidence\030\t \001("
      "\002\0227\n\rlanemark_type\030\n \001(\0162 .calmcar.perce"
      "ption.LanemarkType\022 \n\030lanemark_type_conf"
      "idence\030\013 \001(\002\022-\n\010dlm_type\030\014 \001(\0162\033.calmcar"
      ".perception.DlmType\0221\n\ndecel_type\030\r \001(\0162"
      "\035.calmcar.perception.DecelType\022*\n\004side\030\016"
      " \001(\0162\034.calmcar.perception.LineSide\022\020\n\010cr"
      "ossing\030\017 \001(\010\022\024\n\014marker_width\030\020 \001(\002\022\030\n\020ma"
      "rker_width_std\030\021 \001(\002\022\033\n\023dash_average_len"
      "gth\030\022 \001(\002\022\030\n\020dash_average_gap\030\023 \001(\002\022\031\n\021i"
      "s_multi_clothoid\030\024 \001(\010\022\025\n\rfirst_line_c3\030"
      "\025 \001(\002\022\025\n\rfirst_line_c2\030\026 \001(\002\022\025\n\rfirst_li"
      "ne_c1\030\027 \001(\002\022\025\n\rfirst_line_c0\030\030 \001(\002\022\036\n\026fi"
      "rst_view_range_start\030\031 \001(\002\022\034\n\024first_view"
      "_range_end\030\032 \001(\002\022%\n\035first_measured_view_"
      "range_end\030\033 \001(\002\022\026\n\016second_line_c3\030\034 \001(\002\022"
      "\026\n\016second_line_c2\030\035 \001(\002\022\026\n\016second_line_c"
      "1\030\036 \001(\002\022\026\n\016second_line_c0\030\037 \001(\002\022\037\n\027secon"
      "d_view_range_start\030  \001(\002\022\035\n\025second_view_"
      "range_end\030! \001(\002\022&\n\036second_measured_view_"
      "range_end\030\" \001(\002\022@\n\017camera_position\030# \001(\016"
      "2\'.calmcar.perception.CameraInfo.Positio"
      "n\022\020\n\010is_valid\030$ \001(\010\0221\n\014image_points\030% \003("
      "\0132\033.calmcar.perception.Point2i\022\032\n\022availa"
      "bility_state\030& \001(\010\"\251\006\n\014LaneAdjacent\022\020\n\010t"
      "rack_id\030\001 \001(\005\022\013\n\003age\030\002 \001(\005\022\031\n\021exist_prob"
      "ability\030\003 \001(\002\0220\n\007quality\030\004 \001(\0162\037.calmcar"
      ".perception.LineQuality\022\031\n\021prediction_so"
      "urce\030\005 \001(\003\022\027\n\017prediction_type\030\006 \001(\003\022,\n\005c"
      "olor\030\007 \001(\0162\035.calmcar.perception.LineColo"
      "r\022\030\n\020color_confidence\030\010 \001(\002\0227\n\rlanemark_"
      "type\030\t \001(\0162 .calmcar.perception.Lanemark"
      "Type\022 \n\030lanemark_type_confidence\030\n \001(\002\022-"
      "\n\010dlm_type\030\013 \001(\0162\033.calmcar.perception.Dl"
      "mType\022*\n\004role\030\014 \001(\0162\034.calmcar.perception"
      ".LineRole\022\024\n\014marker_width\030\r \001(\002\022\030\n\020marke"
      "r_width_std\030\016 \001(\002\022\017\n\007line_c3\030\017 \001(\002\022\017\n\007li"
      "ne_c2\030\020 \001(\002\022\017\n\007line_c1\030\021 \001(\002\022\017\n\007line_c0\030"
      "\022 \001(\002\022\030\n\020view_range_start\030\023 \001(\002\022\026\n\016view_"
      "range_end\030\024 \001(\002\022\037\n\027measured_view_range_e"
      "nd\030\025 \001(\002\022\021\n\ttimestamp\030\026 \001(\003\022@\n\017camera_po"
      "sition\030\027 \001(\0162\'.calmcar.perception.Camera"
      "Info.Position\022\020\n\010is_valid\030\030 \001(\010\0221\n\014image"
      "_points\030\031 \003(\0132\033.calmcar.perception.Point"
      "2i\022\032\n\022availability_state\030\032 \001(\010\"\320\004\n\014LaneR"
      "oadedge\022\n\n\002id\030\001 \001(\005\022\013\n\003age\030\002 \001(\005\022\031\n\021exis"
      "t_probability\030\003 \001(\002\022)\n\004type\030\004 \001(\0162\033.calm"
      "car.perception.LreType\022\027\n\017prediction_typ"
      "e\030\005 \001(\005\022*\n\004side\030\006 \001(\0162\034.calmcar.percepti"
      "on.LineSide\022+\n\005index\030\007 \001(\0162\034.calmcar.per"
      "ception.LreIndex\022\016\n\006height\030\010 \001(\002\022\022\n\nheig"
      "ht_std\030\t \001(\002\022\017\n\007line_c3\030\n \001(\002\022\017\n\007line_c1"
      "\030\013 \001(\002\022\017\n\007line_c2\030\014 \001(\002\022\017\n\007line_c0\030\r \001(\002"
      "\022\030\n\020view_range_start\030\016 \001(\002\022\026\n\016view_range"
      "_end\030\017 \001(\002\022\037\n\027measured_view_range_end\030\020 "
      "\001(\002\022\021\n\ttimestamp\030\021 \001(\003\022@\n\017camera_positio"
      "n\030\022 \001(\0162\'.calmcar.perception.CameraInfo."
      "Position\022\020\n\010is_valid\030\023 \001(\010\0221\n\014image_poin"
      "ts\030\024 \003(\0132\033.calmcar.perception.Point2i\022\032\n"
      "\022availability_state\030\025 \001(\010\"\236\002\n\004Lane\022\017\n\007sy"
      "nc_id\030\001 \001(\003\022\027\n\017estimated_width\030\002 \001(\002\022\027\n\017"
      "lane_host_count\030\003 \001(\005\022/\n\tlane_host\030\004 \003(\013"
      "2\034.calmcar.perception.LaneHost\022\033\n\023lane_a"
      "djacent_count\030\005 \001(\005\0227\n\rlane_adjacent\030\006 \003"
      "(\0132 .calmcar.perception.LaneAdjacent\022\027\n\017"
      "road_edge_count\030\007 \001(\005\0223\n\troad_edge\030\010 \003(\013"
      "2 .calmcar.perception.LaneRoadedge\"\256\003\n\010R"
      "oadMark\022\017\n\007sync_id\030\001 \001(\003\022\021\n\ttimestamp\030\002 "
      "\001(\003\022@\n\017camera_position\030\003 \001(\0162\'.calmcar.p"
      "erception.CameraInfo.Position\022&\n\004bbox\030\004 "
      "\001(\0132\030.calmcar.perception.Rect\022\n\n\002id\030\005 \001("
      "\005\022\013\n\003age\030\006 \001(\005\022\024\n\014object_class\030\007 \001(\005\022\031\n\021"
      "object_class_name\030\010 \001(\t\022\027\n\017object_subcla"
      "ss\030\t \001(\005\022\034\n\024object_subclass_name\030\n \001(\t\022\022"
      "\n\nconfidence\030\013 \001(\002\022\024\n\014lat_distance\030\014 \001(\002"
      "\022\030\n\020lat_distance_std\030\r \001(\002\022\025\n\rlong_dista"
      "nce\030\016 \001(\002\022\031\n\021long_distance_std\030\017 \001(\002\022\r\n\005"
      "width\030\020 \001(\002\022\016\n\006length\030\021 \001(\002\"\303\001\n\023FreeSpac"
      "eImagePoint\022@\n\017camera_position\030\001 \001(\0162\'.c"
      "almcar.perception.CameraInfo.Position\0228\n"
      "\023classification_type\030\002 \001(\0162\033.calmcar.per"
      "ception.FSPType\0220\n\013image_point\030\003 \001(\0132\033.c"
      "almcar.perception.Point2i\"\221\002\n\016FreeSpaceP"
      "oint\022@\n\017camera_position\030\001 \001(\0162\'.calmcar."
      "perception.CameraInfo.Position\0228\n\023classi"
      "fication_type\030\002 \001(\0162\033.calmcar.perception"
      ".FSPType\022\031\n\021exist_probability\030\003 \001(\002\022\025\n\ra"
      "zimuth_angle\030\004 \001(\002\022\r\n\005range\030\005 \001(\002\022\021\n\tran"
      "ge_std\030\006 \001(\002\022\n\n\002id\030\007 \001(\005\022\021\n\ttimestamp\030\010 "
      "\001(\003\022\020\n\010is_valid\030\t \001(\010\"\231\001\n\tFreeSpace\022\017\n\007s"
      "ync_id\030\001 \001(\003\022=\n\014image_points\030\002 \003(\0132\'.cal"
      "mcar.perception.FreeSpaceImagePoint\022<\n\020f"
      "reespace_points\030\003 \003(\0132\".calmcar.percepti"
      "on.FreeSpacePoint*\206\001\n\tLineColor\022\026\n\022LINE_"
      "COLOR_UNKNOWN\020\000\022\024\n\020LINE_COLOR_WHITE\020\001\022\025\n"
      "\021LINE_COLOR_YELLOW\020\002\022\031\n\025LINE_COLOR_BLUE_"
      "GREEN\020\003\022\031\n\025LINE_COLOR_ORANGE_RED\020\004*\265\001\n\013L"
      "ineQuality\022\031\n\025LINE_QUALITY_VERY_LOW\020\000\022\024\n"
      "\020LINE_QUALITY_LOW\020\001\022\033\n\027LINE_QUALITY_PRED"
      "ICTION\020\002\022\031\n\025LINE_QUALITY_RELIABLE\020\003\022\036\n\032L"
      "INE_QUALITY_MORE_RELIABLE\020\004\022\035\n\031LINE_QUAL"
      "ITY_HIGH_QUALITY\020\005*\320\001\n\014LanemarkType\022\033\n\027L"
      "ANEMARK_TYPE_UNDECIDED\020\000\022\027\n\023LANEMARK_TYP"
      "E_SOLID\020\001\022\031\n\025LANEMARKE_TYPE_DASHED\020\002\022\025\n\021"
      "LANEMARK_TYPE_DLM\020\003\022\034\n\030LANEMARK_TYPE_BOT"
      "TS_DOTS\020\004\022\036\n\032LANEMARK_TYPE_DECELERATION\020"
      "\005\022\032\n\026LANEMARK_TYPE_HOV_LANE\020\006*\242\001\n\007LreTyp"
      "e\022\026\n\022LRE_TYPE_UNDECIDED\020\000\022\026\n\022LRE_TYPE_RO"
      "AD_EDGE\020\001\022\037\n\033LRE_TYPE_ELEVATED_STRUCTURE"
      "\020\002\022\021\n\rLRE_TYPE_CURB\020\003\022\030\n\024LRE_TYPE_CONES_"
      "POLES\020\004\022\031\n\025LRE_TYPE_PARKING_CARS\020\005*\243\001\n\007D"
      "lmType\022\024\n\020DLM_TYPE_NOT_DLM\020\000\022\031\n\025DLM_TYPE"
      "_SOLID_DASHED\020\001\022\031\n\025DLM_TYPE_DASHED_SOLID"
      "\020\002\022\030\n\024DLM_TYPE_SOLID_SOLID\020\003\022\032\n\026DLM_TYPE"
      "_DASHED_DASHED\020\004\022\026\n\022DLM_TYPE_UNDECIDED\020\005"
      "*k\n\tDecelType\022\030\n\024DECEL_TYPE_NOT_DECEL\020\000\022"
      "\024\n\020DECEL_TYPE_SOLID\020\001\022\025\n\021DECEL_TYPE_DASH"
      "ED\020\002\022\027\n\023DECEL_TYPE_RESERVED\020\003*J\n\010LineSid"
      "e\022\025\n\021LINE_SIDE_UNKNOWN\020\000\022\022\n\016LINE_SIDE_LE"
      "FT\020\001\022\023\n\017LINE_SIDE_RIGHT\020\002*\252\001\n\010LineRole\022\022"
      "\n\016LINE_ROLE_NONE\020\000\022 \n\034LINE_ROLE_LEFT_LEF"
      "T_LANEMARK\020\001\022!\n\035LINE_ROLE_LEFT_RIGHT_LAN"
      "EMARK\020\002\022!\n\035LINE_ROLE_RIGHT_LEFT_LANEMARK"
      "\020\003\022\"\n\036LINE_ROLE_RIGHT_RIGHT_LANEMARK\020\004*M"
      "\n\010LreIndex\022\026\n\022LRE_INDEX_UNFILLED\020\000\022\023\n\017LR"
      "E_INDEX_FIRST\020\001\022\024\n\020LRE_INDEX_SECOND\020\002*h\n"
      "\007FSPType\022\024\n\020FSP_TYPE_UNKNOWN\020\000\022\026\n\022FSP_TY"
      "PE_ROAD_EDGE\020\001\022\027\n\023FSP_TYPE_PARTICIPAN\020\002\022"
      "\026\n\022FSP_TYPE_BARRICADE\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5471);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception_road.proto", &protobuf_RegisterTypes);
  ::protobuf_perception_5fsensor_5finfo_2eproto::AddDescriptors();
  ::protobuf_perception_5ftypes_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_perception_5froad_2eproto
namespace calmcar {
namespace perception {
const ::google::protobuf::EnumDescriptor* LineColor_descriptor() {
  protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5froad_2eproto::file_level_enum_descriptors[0];
}
bool LineColor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LineQuality_descriptor() {
  protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5froad_2eproto::file_level_enum_descriptors[1];
}
bool LineQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LanemarkType_descriptor() {
  protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5froad_2eproto::file_level_enum_descriptors[2];
}
bool LanemarkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LreType_descriptor() {
  protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5froad_2eproto::file_level_enum_descriptors[3];
}
bool LreType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DlmType_descriptor() {
  protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5froad_2eproto::file_level_enum_descriptors[4];
}
bool DlmType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DecelType_descriptor() {
  protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5froad_2eproto::file_level_enum_descriptors[5];
}
bool DecelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LineSide_descriptor() {
  protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5froad_2eproto::file_level_enum_descriptors[6];
}
bool LineSide_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LineRole_descriptor() {
  protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5froad_2eproto::file_level_enum_descriptors[7];
}
bool LineRole_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LreIndex_descriptor() {
  protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5froad_2eproto::file_level_enum_descriptors[8];
}
bool LreIndex_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FSPType_descriptor() {
  protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_5froad_2eproto::file_level_enum_descriptors[9];
}
bool FSPType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LaneHost::InitAsDefaultInstance() {
}
void LaneHost::clear_image_points() {
  image_points_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneHost::kTimestampFieldNumber;
const int LaneHost::kTrackIdFieldNumber;
const int LaneHost::kAgeFieldNumber;
const int LaneHost::kExistProbabilityFieldNumber;
const int LaneHost::kQualityFieldNumber;
const int LaneHost::kPredictionSourceFieldNumber;
const int LaneHost::kPredictionTypeFieldNumber;
const int LaneHost::kColorFieldNumber;
const int LaneHost::kColorConfidenceFieldNumber;
const int LaneHost::kLanemarkTypeFieldNumber;
const int LaneHost::kLanemarkTypeConfidenceFieldNumber;
const int LaneHost::kDlmTypeFieldNumber;
const int LaneHost::kDecelTypeFieldNumber;
const int LaneHost::kSideFieldNumber;
const int LaneHost::kCrossingFieldNumber;
const int LaneHost::kMarkerWidthFieldNumber;
const int LaneHost::kMarkerWidthStdFieldNumber;
const int LaneHost::kDashAverageLengthFieldNumber;
const int LaneHost::kDashAverageGapFieldNumber;
const int LaneHost::kIsMultiClothoidFieldNumber;
const int LaneHost::kFirstLineC3FieldNumber;
const int LaneHost::kFirstLineC2FieldNumber;
const int LaneHost::kFirstLineC1FieldNumber;
const int LaneHost::kFirstLineC0FieldNumber;
const int LaneHost::kFirstViewRangeStartFieldNumber;
const int LaneHost::kFirstViewRangeEndFieldNumber;
const int LaneHost::kFirstMeasuredViewRangeEndFieldNumber;
const int LaneHost::kSecondLineC3FieldNumber;
const int LaneHost::kSecondLineC2FieldNumber;
const int LaneHost::kSecondLineC1FieldNumber;
const int LaneHost::kSecondLineC0FieldNumber;
const int LaneHost::kSecondViewRangeStartFieldNumber;
const int LaneHost::kSecondViewRangeEndFieldNumber;
const int LaneHost::kSecondMeasuredViewRangeEndFieldNumber;
const int LaneHost::kCameraPositionFieldNumber;
const int LaneHost::kIsValidFieldNumber;
const int LaneHost::kImagePointsFieldNumber;
const int LaneHost::kAvailabilityStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneHost::LaneHost()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5froad_2eproto::InitDefaultsLaneHost();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.LaneHost)
}
LaneHost::LaneHost(const LaneHost& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      image_points_(from.image_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&camera_position_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(camera_position_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.LaneHost)
}

void LaneHost::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_position_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(camera_position_));
  _cached_size_ = 0;
}

LaneHost::~LaneHost() {
  // @@protoc_insertion_point(destructor:calmcar.perception.LaneHost)
  SharedDtor();
}

void LaneHost::SharedDtor() {
}

void LaneHost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneHost::descriptor() {
  ::protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneHost& LaneHost::default_instance() {
  ::protobuf_perception_5froad_2eproto::InitDefaultsLaneHost();
  return *internal_default_instance();
}

LaneHost* LaneHost::New(::google::protobuf::Arena* arena) const {
  LaneHost* n = new LaneHost;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneHost::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.LaneHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_points_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_position_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(camera_position_));
  _internal_metadata_.Clear();
}

bool LaneHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.LaneHost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 track_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 age = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float exist_probability = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exist_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.LineQuality quality = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_quality(static_cast< ::calmcar::perception::LineQuality >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 prediction_source = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prediction_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 prediction_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prediction_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.LineColor color = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::calmcar::perception::LineColor >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float color_confidence = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.LanemarkType lanemark_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lanemark_type(static_cast< ::calmcar::perception::LanemarkType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lanemark_type_confidence = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lanemark_type_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.DlmType dlm_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dlm_type(static_cast< ::calmcar::perception::DlmType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.DecelType decel_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_decel_type(static_cast< ::calmcar::perception::DecelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.LineSide side = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_side(static_cast< ::calmcar::perception::LineSide >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool crossing = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crossing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float marker_width = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &marker_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float marker_width_std = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &marker_width_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dash_average_length = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dash_average_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dash_average_gap = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dash_average_gap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_multi_clothoid = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_multi_clothoid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float first_line_c3 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &first_line_c3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float first_line_c2 = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &first_line_c2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float first_line_c1 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &first_line_c1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float first_line_c0 = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 197 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &first_line_c0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float first_view_range_start = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u /* 205 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &first_view_range_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float first_view_range_end = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 213 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &first_view_range_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float first_measured_view_range_end = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u /* 221 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &first_measured_view_range_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float second_line_c3 = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u /* 229 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &second_line_c3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float second_line_c2 = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(237u /* 237 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &second_line_c2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float second_line_c1 = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(245u /* 245 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &second_line_c1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float second_line_c0 = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(253u /* 253 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &second_line_c0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float second_view_range_start = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(5u /* 261 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &second_view_range_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float second_view_range_end = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 269 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &second_view_range_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float second_measured_view_range_end = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 277 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &second_measured_view_range_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.CameraInfo.Position camera_position = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera_position(static_cast< ::calmcar::perception::CameraInfo_Position >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_valid = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.Point2i image_points = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_image_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool availability_state = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &availability_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.LaneHost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.LaneHost)
  return false;
#undef DO_
}

void LaneHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.LaneHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // int32 track_id = 2;
  if (this->track_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->track_id(), output);
  }

  // int32 age = 3;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->age(), output);
  }

  // float exist_probability = 4;
  if (this->exist_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->exist_probability(), output);
  }

  // .calmcar.perception.LineQuality quality = 5;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->quality(), output);
  }

  // int64 prediction_source = 6;
  if (this->prediction_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->prediction_source(), output);
  }

  // int64 prediction_type = 7;
  if (this->prediction_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->prediction_type(), output);
  }

  // .calmcar.perception.LineColor color = 8;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->color(), output);
  }

  // float color_confidence = 9;
  if (this->color_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->color_confidence(), output);
  }

  // .calmcar.perception.LanemarkType lanemark_type = 10;
  if (this->lanemark_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->lanemark_type(), output);
  }

  // float lanemark_type_confidence = 11;
  if (this->lanemark_type_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->lanemark_type_confidence(), output);
  }

  // .calmcar.perception.DlmType dlm_type = 12;
  if (this->dlm_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->dlm_type(), output);
  }

  // .calmcar.perception.DecelType decel_type = 13;
  if (this->decel_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->decel_type(), output);
  }

  // .calmcar.perception.LineSide side = 14;
  if (this->side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->side(), output);
  }

  // bool crossing = 15;
  if (this->crossing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->crossing(), output);
  }

  // float marker_width = 16;
  if (this->marker_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->marker_width(), output);
  }

  // float marker_width_std = 17;
  if (this->marker_width_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->marker_width_std(), output);
  }

  // float dash_average_length = 18;
  if (this->dash_average_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->dash_average_length(), output);
  }

  // float dash_average_gap = 19;
  if (this->dash_average_gap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->dash_average_gap(), output);
  }

  // bool is_multi_clothoid = 20;
  if (this->is_multi_clothoid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->is_multi_clothoid(), output);
  }

  // float first_line_c3 = 21;
  if (this->first_line_c3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->first_line_c3(), output);
  }

  // float first_line_c2 = 22;
  if (this->first_line_c2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->first_line_c2(), output);
  }

  // float first_line_c1 = 23;
  if (this->first_line_c1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->first_line_c1(), output);
  }

  // float first_line_c0 = 24;
  if (this->first_line_c0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->first_line_c0(), output);
  }

  // float first_view_range_start = 25;
  if (this->first_view_range_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->first_view_range_start(), output);
  }

  // float first_view_range_end = 26;
  if (this->first_view_range_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->first_view_range_end(), output);
  }

  // float first_measured_view_range_end = 27;
  if (this->first_measured_view_range_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->first_measured_view_range_end(), output);
  }

  // float second_line_c3 = 28;
  if (this->second_line_c3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->second_line_c3(), output);
  }

  // float second_line_c2 = 29;
  if (this->second_line_c2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->second_line_c2(), output);
  }

  // float second_line_c1 = 30;
  if (this->second_line_c1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->second_line_c1(), output);
  }

  // float second_line_c0 = 31;
  if (this->second_line_c0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->second_line_c0(), output);
  }

  // float second_view_range_start = 32;
  if (this->second_view_range_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->second_view_range_start(), output);
  }

  // float second_view_range_end = 33;
  if (this->second_view_range_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->second_view_range_end(), output);
  }

  // float second_measured_view_range_end = 34;
  if (this->second_measured_view_range_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->second_measured_view_range_end(), output);
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 35;
  if (this->camera_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      35, this->camera_position(), output);
  }

  // bool is_valid = 36;
  if (this->is_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->is_valid(), output);
  }

  // repeated .calmcar.perception.Point2i image_points = 37;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->image_points(static_cast<int>(i)), output);
  }

  // bool availability_state = 38;
  if (this->availability_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->availability_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.LaneHost)
}

::google::protobuf::uint8* LaneHost::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.LaneHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // int32 track_id = 2;
  if (this->track_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->track_id(), target);
  }

  // int32 age = 3;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->age(), target);
  }

  // float exist_probability = 4;
  if (this->exist_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->exist_probability(), target);
  }

  // .calmcar.perception.LineQuality quality = 5;
  if (this->quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->quality(), target);
  }

  // int64 prediction_source = 6;
  if (this->prediction_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->prediction_source(), target);
  }

  // int64 prediction_type = 7;
  if (this->prediction_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->prediction_type(), target);
  }

  // .calmcar.perception.LineColor color = 8;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->color(), target);
  }

  // float color_confidence = 9;
  if (this->color_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->color_confidence(), target);
  }

  // .calmcar.perception.LanemarkType lanemark_type = 10;
  if (this->lanemark_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->lanemark_type(), target);
  }

  // float lanemark_type_confidence = 11;
  if (this->lanemark_type_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->lanemark_type_confidence(), target);
  }

  // .calmcar.perception.DlmType dlm_type = 12;
  if (this->dlm_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->dlm_type(), target);
  }

  // .calmcar.perception.DecelType decel_type = 13;
  if (this->decel_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->decel_type(), target);
  }

  // .calmcar.perception.LineSide side = 14;
  if (this->side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->side(), target);
  }

  // bool crossing = 15;
  if (this->crossing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->crossing(), target);
  }

  // float marker_width = 16;
  if (this->marker_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->marker_width(), target);
  }

  // float marker_width_std = 17;
  if (this->marker_width_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->marker_width_std(), target);
  }

  // float dash_average_length = 18;
  if (this->dash_average_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->dash_average_length(), target);
  }

  // float dash_average_gap = 19;
  if (this->dash_average_gap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->dash_average_gap(), target);
  }

  // bool is_multi_clothoid = 20;
  if (this->is_multi_clothoid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->is_multi_clothoid(), target);
  }

  // float first_line_c3 = 21;
  if (this->first_line_c3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->first_line_c3(), target);
  }

  // float first_line_c2 = 22;
  if (this->first_line_c2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->first_line_c2(), target);
  }

  // float first_line_c1 = 23;
  if (this->first_line_c1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->first_line_c1(), target);
  }

  // float first_line_c0 = 24;
  if (this->first_line_c0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->first_line_c0(), target);
  }

  // float first_view_range_start = 25;
  if (this->first_view_range_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->first_view_range_start(), target);
  }

  // float first_view_range_end = 26;
  if (this->first_view_range_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->first_view_range_end(), target);
  }

  // float first_measured_view_range_end = 27;
  if (this->first_measured_view_range_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->first_measured_view_range_end(), target);
  }

  // float second_line_c3 = 28;
  if (this->second_line_c3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->second_line_c3(), target);
  }

  // float second_line_c2 = 29;
  if (this->second_line_c2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->second_line_c2(), target);
  }

  // float second_line_c1 = 30;
  if (this->second_line_c1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->second_line_c1(), target);
  }

  // float second_line_c0 = 31;
  if (this->second_line_c0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->second_line_c0(), target);
  }

  // float second_view_range_start = 32;
  if (this->second_view_range_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->second_view_range_start(), target);
  }

  // float second_view_range_end = 33;
  if (this->second_view_range_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->second_view_range_end(), target);
  }

  // float second_measured_view_range_end = 34;
  if (this->second_measured_view_range_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->second_measured_view_range_end(), target);
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 35;
  if (this->camera_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      35, this->camera_position(), target);
  }

  // bool is_valid = 36;
  if (this->is_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->is_valid(), target);
  }

  // repeated .calmcar.perception.Point2i image_points = 37;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        37, this->image_points(static_cast<int>(i)), deterministic, target);
  }

  // bool availability_state = 38;
  if (this->availability_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->availability_state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.LaneHost)
  return target;
}

size_t LaneHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.LaneHost)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .calmcar.perception.Point2i image_points = 37;
  {
    unsigned int count = static_cast<unsigned int>(this->image_points_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->image_points(static_cast<int>(i)));
    }
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 track_id = 2;
  if (this->track_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->track_id());
  }

  // int32 age = 3;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->age());
  }

  // float exist_probability = 4;
  if (this->exist_probability() != 0) {
    total_size += 1 + 4;
  }

  // .calmcar.perception.LineQuality quality = 5;
  if (this->quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
  }

  // int64 prediction_source = 6;
  if (this->prediction_source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->prediction_source());
  }

  // int64 prediction_type = 7;
  if (this->prediction_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->prediction_type());
  }

  // .calmcar.perception.LineColor color = 8;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
  }

  // float color_confidence = 9;
  if (this->color_confidence() != 0) {
    total_size += 1 + 4;
  }

  // .calmcar.perception.LanemarkType lanemark_type = 10;
  if (this->lanemark_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lanemark_type());
  }

  // float lanemark_type_confidence = 11;
  if (this->lanemark_type_confidence() != 0) {
    total_size += 1 + 4;
  }

  // .calmcar.perception.DlmType dlm_type = 12;
  if (this->dlm_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dlm_type());
  }

  // .calmcar.perception.DecelType decel_type = 13;
  if (this->decel_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->decel_type());
  }

  // .calmcar.perception.LineSide side = 14;
  if (this->side() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
  }

  // float marker_width = 16;
  if (this->marker_width() != 0) {
    total_size += 2 + 4;
  }

  // float marker_width_std = 17;
  if (this->marker_width_std() != 0) {
    total_size += 2 + 4;
  }

  // float dash_average_length = 18;
  if (this->dash_average_length() != 0) {
    total_size += 2 + 4;
  }

  // float dash_average_gap = 19;
  if (this->dash_average_gap() != 0) {
    total_size += 2 + 4;
  }

  // float first_line_c3 = 21;
  if (this->first_line_c3() != 0) {
    total_size += 2 + 4;
  }

  // float first_line_c2 = 22;
  if (this->first_line_c2() != 0) {
    total_size += 2 + 4;
  }

  // float first_line_c1 = 23;
  if (this->first_line_c1() != 0) {
    total_size += 2 + 4;
  }

  // float first_line_c0 = 24;
  if (this->first_line_c0() != 0) {
    total_size += 2 + 4;
  }

  // float first_view_range_start = 25;
  if (this->first_view_range_start() != 0) {
    total_size += 2 + 4;
  }

  // float first_view_range_end = 26;
  if (this->first_view_range_end() != 0) {
    total_size += 2 + 4;
  }

  // float first_measured_view_range_end = 27;
  if (this->first_measured_view_range_end() != 0) {
    total_size += 2 + 4;
  }

  // bool crossing = 15;
  if (this->crossing() != 0) {
    total_size += 1 + 1;
  }

  // bool is_multi_clothoid = 20;
  if (this->is_multi_clothoid() != 0) {
    total_size += 2 + 1;
  }

  // bool is_valid = 36;
  if (this->is_valid() != 0) {
    total_size += 2 + 1;
  }

  // bool availability_state = 38;
  if (this->availability_state() != 0) {
    total_size += 2 + 1;
  }

  // float second_line_c3 = 28;
  if (this->second_line_c3() != 0) {
    total_size += 2 + 4;
  }

  // float second_line_c2 = 29;
  if (this->second_line_c2() != 0) {
    total_size += 2 + 4;
  }

  // float second_line_c1 = 30;
  if (this->second_line_c1() != 0) {
    total_size += 2 + 4;
  }

  // float second_line_c0 = 31;
  if (this->second_line_c0() != 0) {
    total_size += 2 + 4;
  }

  // float second_view_range_start = 32;
  if (this->second_view_range_start() != 0) {
    total_size += 2 + 4;
  }

  // float second_view_range_end = 33;
  if (this->second_view_range_end() != 0) {
    total_size += 2 + 4;
  }

  // float second_measured_view_range_end = 34;
  if (this->second_measured_view_range_end() != 0) {
    total_size += 2 + 4;
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 35;
  if (this->camera_position() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_position());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneHost::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.LaneHost)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneHost* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneHost>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.LaneHost)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.LaneHost)
    MergeFrom(*source);
  }
}

void LaneHost::MergeFrom(const LaneHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.LaneHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_points_.MergeFrom(from.image_points_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.track_id() != 0) {
    set_track_id(from.track_id());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.exist_probability() != 0) {
    set_exist_probability(from.exist_probability());
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
  if (from.prediction_source() != 0) {
    set_prediction_source(from.prediction_source());
  }
  if (from.prediction_type() != 0) {
    set_prediction_type(from.prediction_type());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.color_confidence() != 0) {
    set_color_confidence(from.color_confidence());
  }
  if (from.lanemark_type() != 0) {
    set_lanemark_type(from.lanemark_type());
  }
  if (from.lanemark_type_confidence() != 0) {
    set_lanemark_type_confidence(from.lanemark_type_confidence());
  }
  if (from.dlm_type() != 0) {
    set_dlm_type(from.dlm_type());
  }
  if (from.decel_type() != 0) {
    set_decel_type(from.decel_type());
  }
  if (from.side() != 0) {
    set_side(from.side());
  }
  if (from.marker_width() != 0) {
    set_marker_width(from.marker_width());
  }
  if (from.marker_width_std() != 0) {
    set_marker_width_std(from.marker_width_std());
  }
  if (from.dash_average_length() != 0) {
    set_dash_average_length(from.dash_average_length());
  }
  if (from.dash_average_gap() != 0) {
    set_dash_average_gap(from.dash_average_gap());
  }
  if (from.first_line_c3() != 0) {
    set_first_line_c3(from.first_line_c3());
  }
  if (from.first_line_c2() != 0) {
    set_first_line_c2(from.first_line_c2());
  }
  if (from.first_line_c1() != 0) {
    set_first_line_c1(from.first_line_c1());
  }
  if (from.first_line_c0() != 0) {
    set_first_line_c0(from.first_line_c0());
  }
  if (from.first_view_range_start() != 0) {
    set_first_view_range_start(from.first_view_range_start());
  }
  if (from.first_view_range_end() != 0) {
    set_first_view_range_end(from.first_view_range_end());
  }
  if (from.first_measured_view_range_end() != 0) {
    set_first_measured_view_range_end(from.first_measured_view_range_end());
  }
  if (from.crossing() != 0) {
    set_crossing(from.crossing());
  }
  if (from.is_multi_clothoid() != 0) {
    set_is_multi_clothoid(from.is_multi_clothoid());
  }
  if (from.is_valid() != 0) {
    set_is_valid(from.is_valid());
  }
  if (from.availability_state() != 0) {
    set_availability_state(from.availability_state());
  }
  if (from.second_line_c3() != 0) {
    set_second_line_c3(from.second_line_c3());
  }
  if (from.second_line_c2() != 0) {
    set_second_line_c2(from.second_line_c2());
  }
  if (from.second_line_c1() != 0) {
    set_second_line_c1(from.second_line_c1());
  }
  if (from.second_line_c0() != 0) {
    set_second_line_c0(from.second_line_c0());
  }
  if (from.second_view_range_start() != 0) {
    set_second_view_range_start(from.second_view_range_start());
  }
  if (from.second_view_range_end() != 0) {
    set_second_view_range_end(from.second_view_range_end());
  }
  if (from.second_measured_view_range_end() != 0) {
    set_second_measured_view_range_end(from.second_measured_view_range_end());
  }
  if (from.camera_position() != 0) {
    set_camera_position(from.camera_position());
  }
}

void LaneHost::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.LaneHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneHost::CopyFrom(const LaneHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.LaneHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneHost::IsInitialized() const {
  return true;
}

void LaneHost::Swap(LaneHost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneHost::InternalSwap(LaneHost* other) {
  using std::swap;
  image_points_.InternalSwap(&other->image_points_);
  swap(timestamp_, other->timestamp_);
  swap(track_id_, other->track_id_);
  swap(age_, other->age_);
  swap(exist_probability_, other->exist_probability_);
  swap(quality_, other->quality_);
  swap(prediction_source_, other->prediction_source_);
  swap(prediction_type_, other->prediction_type_);
  swap(color_, other->color_);
  swap(color_confidence_, other->color_confidence_);
  swap(lanemark_type_, other->lanemark_type_);
  swap(lanemark_type_confidence_, other->lanemark_type_confidence_);
  swap(dlm_type_, other->dlm_type_);
  swap(decel_type_, other->decel_type_);
  swap(side_, other->side_);
  swap(marker_width_, other->marker_width_);
  swap(marker_width_std_, other->marker_width_std_);
  swap(dash_average_length_, other->dash_average_length_);
  swap(dash_average_gap_, other->dash_average_gap_);
  swap(first_line_c3_, other->first_line_c3_);
  swap(first_line_c2_, other->first_line_c2_);
  swap(first_line_c1_, other->first_line_c1_);
  swap(first_line_c0_, other->first_line_c0_);
  swap(first_view_range_start_, other->first_view_range_start_);
  swap(first_view_range_end_, other->first_view_range_end_);
  swap(first_measured_view_range_end_, other->first_measured_view_range_end_);
  swap(crossing_, other->crossing_);
  swap(is_multi_clothoid_, other->is_multi_clothoid_);
  swap(is_valid_, other->is_valid_);
  swap(availability_state_, other->availability_state_);
  swap(second_line_c3_, other->second_line_c3_);
  swap(second_line_c2_, other->second_line_c2_);
  swap(second_line_c1_, other->second_line_c1_);
  swap(second_line_c0_, other->second_line_c0_);
  swap(second_view_range_start_, other->second_view_range_start_);
  swap(second_view_range_end_, other->second_view_range_end_);
  swap(second_measured_view_range_end_, other->second_measured_view_range_end_);
  swap(camera_position_, other->camera_position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneHost::GetMetadata() const {
  protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneAdjacent::InitAsDefaultInstance() {
}
void LaneAdjacent::clear_image_points() {
  image_points_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneAdjacent::kTrackIdFieldNumber;
const int LaneAdjacent::kAgeFieldNumber;
const int LaneAdjacent::kExistProbabilityFieldNumber;
const int LaneAdjacent::kQualityFieldNumber;
const int LaneAdjacent::kPredictionSourceFieldNumber;
const int LaneAdjacent::kPredictionTypeFieldNumber;
const int LaneAdjacent::kColorFieldNumber;
const int LaneAdjacent::kColorConfidenceFieldNumber;
const int LaneAdjacent::kLanemarkTypeFieldNumber;
const int LaneAdjacent::kLanemarkTypeConfidenceFieldNumber;
const int LaneAdjacent::kDlmTypeFieldNumber;
const int LaneAdjacent::kRoleFieldNumber;
const int LaneAdjacent::kMarkerWidthFieldNumber;
const int LaneAdjacent::kMarkerWidthStdFieldNumber;
const int LaneAdjacent::kLineC3FieldNumber;
const int LaneAdjacent::kLineC2FieldNumber;
const int LaneAdjacent::kLineC1FieldNumber;
const int LaneAdjacent::kLineC0FieldNumber;
const int LaneAdjacent::kViewRangeStartFieldNumber;
const int LaneAdjacent::kViewRangeEndFieldNumber;
const int LaneAdjacent::kMeasuredViewRangeEndFieldNumber;
const int LaneAdjacent::kTimestampFieldNumber;
const int LaneAdjacent::kCameraPositionFieldNumber;
const int LaneAdjacent::kIsValidFieldNumber;
const int LaneAdjacent::kImagePointsFieldNumber;
const int LaneAdjacent::kAvailabilityStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneAdjacent::LaneAdjacent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5froad_2eproto::InitDefaultsLaneAdjacent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.LaneAdjacent)
}
LaneAdjacent::LaneAdjacent(const LaneAdjacent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      image_points_(from.image_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&track_id_, &from.track_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&availability_state_) -
    reinterpret_cast<char*>(&track_id_)) + sizeof(availability_state_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.LaneAdjacent)
}

void LaneAdjacent::SharedCtor() {
  ::memset(&track_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&availability_state_) -
      reinterpret_cast<char*>(&track_id_)) + sizeof(availability_state_));
  _cached_size_ = 0;
}

LaneAdjacent::~LaneAdjacent() {
  // @@protoc_insertion_point(destructor:calmcar.perception.LaneAdjacent)
  SharedDtor();
}

void LaneAdjacent::SharedDtor() {
}

void LaneAdjacent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneAdjacent::descriptor() {
  ::protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneAdjacent& LaneAdjacent::default_instance() {
  ::protobuf_perception_5froad_2eproto::InitDefaultsLaneAdjacent();
  return *internal_default_instance();
}

LaneAdjacent* LaneAdjacent::New(::google::protobuf::Arena* arena) const {
  LaneAdjacent* n = new LaneAdjacent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneAdjacent::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.LaneAdjacent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_points_.Clear();
  ::memset(&track_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&availability_state_) -
      reinterpret_cast<char*>(&track_id_)) + sizeof(availability_state_));
  _internal_metadata_.Clear();
}

bool LaneAdjacent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.LaneAdjacent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 track_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 age = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float exist_probability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exist_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.LineQuality quality = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_quality(static_cast< ::calmcar::perception::LineQuality >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 prediction_source = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prediction_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 prediction_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prediction_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.LineColor color = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::calmcar::perception::LineColor >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float color_confidence = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.LanemarkType lanemark_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lanemark_type(static_cast< ::calmcar::perception::LanemarkType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lanemark_type_confidence = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lanemark_type_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.DlmType dlm_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dlm_type(static_cast< ::calmcar::perception::DlmType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.LineRole role = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_role(static_cast< ::calmcar::perception::LineRole >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float marker_width = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &marker_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float marker_width_std = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &marker_width_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float line_c3 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_c3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float line_c2 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_c2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float line_c1 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_c1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float line_c0 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_c0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float view_range_start = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &view_range_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float view_range_end = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &view_range_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float measured_view_range_end = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &measured_view_range_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.CameraInfo.Position camera_position = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera_position(static_cast< ::calmcar::perception::CameraInfo_Position >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_valid = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.Point2i image_points = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_image_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool availability_state = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &availability_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.LaneAdjacent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.LaneAdjacent)
  return false;
#undef DO_
}

void LaneAdjacent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.LaneAdjacent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 track_id = 1;
  if (this->track_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->track_id(), output);
  }

  // int32 age = 2;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->age(), output);
  }

  // float exist_probability = 3;
  if (this->exist_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->exist_probability(), output);
  }

  // .calmcar.perception.LineQuality quality = 4;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->quality(), output);
  }

  // int64 prediction_source = 5;
  if (this->prediction_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->prediction_source(), output);
  }

  // int64 prediction_type = 6;
  if (this->prediction_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->prediction_type(), output);
  }

  // .calmcar.perception.LineColor color = 7;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->color(), output);
  }

  // float color_confidence = 8;
  if (this->color_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->color_confidence(), output);
  }

  // .calmcar.perception.LanemarkType lanemark_type = 9;
  if (this->lanemark_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->lanemark_type(), output);
  }

  // float lanemark_type_confidence = 10;
  if (this->lanemark_type_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->lanemark_type_confidence(), output);
  }

  // .calmcar.perception.DlmType dlm_type = 11;
  if (this->dlm_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->dlm_type(), output);
  }

  // .calmcar.perception.LineRole role = 12;
  if (this->role() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->role(), output);
  }

  // float marker_width = 13;
  if (this->marker_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->marker_width(), output);
  }

  // float marker_width_std = 14;
  if (this->marker_width_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->marker_width_std(), output);
  }

  // float line_c3 = 15;
  if (this->line_c3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->line_c3(), output);
  }

  // float line_c2 = 16;
  if (this->line_c2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->line_c2(), output);
  }

  // float line_c1 = 17;
  if (this->line_c1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->line_c1(), output);
  }

  // float line_c0 = 18;
  if (this->line_c0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->line_c0(), output);
  }

  // float view_range_start = 19;
  if (this->view_range_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->view_range_start(), output);
  }

  // float view_range_end = 20;
  if (this->view_range_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->view_range_end(), output);
  }

  // float measured_view_range_end = 21;
  if (this->measured_view_range_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->measured_view_range_end(), output);
  }

  // int64 timestamp = 22;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->timestamp(), output);
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 23;
  if (this->camera_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->camera_position(), output);
  }

  // bool is_valid = 24;
  if (this->is_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->is_valid(), output);
  }

  // repeated .calmcar.perception.Point2i image_points = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->image_points(static_cast<int>(i)), output);
  }

  // bool availability_state = 26;
  if (this->availability_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->availability_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.LaneAdjacent)
}

::google::protobuf::uint8* LaneAdjacent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.LaneAdjacent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 track_id = 1;
  if (this->track_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->track_id(), target);
  }

  // int32 age = 2;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->age(), target);
  }

  // float exist_probability = 3;
  if (this->exist_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->exist_probability(), target);
  }

  // .calmcar.perception.LineQuality quality = 4;
  if (this->quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->quality(), target);
  }

  // int64 prediction_source = 5;
  if (this->prediction_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->prediction_source(), target);
  }

  // int64 prediction_type = 6;
  if (this->prediction_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->prediction_type(), target);
  }

  // .calmcar.perception.LineColor color = 7;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->color(), target);
  }

  // float color_confidence = 8;
  if (this->color_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->color_confidence(), target);
  }

  // .calmcar.perception.LanemarkType lanemark_type = 9;
  if (this->lanemark_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->lanemark_type(), target);
  }

  // float lanemark_type_confidence = 10;
  if (this->lanemark_type_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->lanemark_type_confidence(), target);
  }

  // .calmcar.perception.DlmType dlm_type = 11;
  if (this->dlm_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->dlm_type(), target);
  }

  // .calmcar.perception.LineRole role = 12;
  if (this->role() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->role(), target);
  }

  // float marker_width = 13;
  if (this->marker_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->marker_width(), target);
  }

  // float marker_width_std = 14;
  if (this->marker_width_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->marker_width_std(), target);
  }

  // float line_c3 = 15;
  if (this->line_c3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->line_c3(), target);
  }

  // float line_c2 = 16;
  if (this->line_c2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->line_c2(), target);
  }

  // float line_c1 = 17;
  if (this->line_c1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->line_c1(), target);
  }

  // float line_c0 = 18;
  if (this->line_c0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->line_c0(), target);
  }

  // float view_range_start = 19;
  if (this->view_range_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->view_range_start(), target);
  }

  // float view_range_end = 20;
  if (this->view_range_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->view_range_end(), target);
  }

  // float measured_view_range_end = 21;
  if (this->measured_view_range_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->measured_view_range_end(), target);
  }

  // int64 timestamp = 22;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->timestamp(), target);
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 23;
  if (this->camera_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->camera_position(), target);
  }

  // bool is_valid = 24;
  if (this->is_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->is_valid(), target);
  }

  // repeated .calmcar.perception.Point2i image_points = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->image_points(static_cast<int>(i)), deterministic, target);
  }

  // bool availability_state = 26;
  if (this->availability_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->availability_state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.LaneAdjacent)
  return target;
}

size_t LaneAdjacent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.LaneAdjacent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .calmcar.perception.Point2i image_points = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->image_points_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->image_points(static_cast<int>(i)));
    }
  }

  // int32 track_id = 1;
  if (this->track_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->track_id());
  }

  // int32 age = 2;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->age());
  }

  // float exist_probability = 3;
  if (this->exist_probability() != 0) {
    total_size += 1 + 4;
  }

  // .calmcar.perception.LineQuality quality = 4;
  if (this->quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
  }

  // int64 prediction_source = 5;
  if (this->prediction_source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->prediction_source());
  }

  // int64 prediction_type = 6;
  if (this->prediction_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->prediction_type());
  }

  // .calmcar.perception.LineColor color = 7;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
  }

  // float color_confidence = 8;
  if (this->color_confidence() != 0) {
    total_size += 1 + 4;
  }

  // .calmcar.perception.LanemarkType lanemark_type = 9;
  if (this->lanemark_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lanemark_type());
  }

  // float lanemark_type_confidence = 10;
  if (this->lanemark_type_confidence() != 0) {
    total_size += 1 + 4;
  }

  // .calmcar.perception.DlmType dlm_type = 11;
  if (this->dlm_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dlm_type());
  }

  // .calmcar.perception.LineRole role = 12;
  if (this->role() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
  }

  // float marker_width = 13;
  if (this->marker_width() != 0) {
    total_size += 1 + 4;
  }

  // float marker_width_std = 14;
  if (this->marker_width_std() != 0) {
    total_size += 1 + 4;
  }

  // float line_c3 = 15;
  if (this->line_c3() != 0) {
    total_size += 1 + 4;
  }

  // float line_c2 = 16;
  if (this->line_c2() != 0) {
    total_size += 2 + 4;
  }

  // float line_c1 = 17;
  if (this->line_c1() != 0) {
    total_size += 2 + 4;
  }

  // float line_c0 = 18;
  if (this->line_c0() != 0) {
    total_size += 2 + 4;
  }

  // float view_range_start = 19;
  if (this->view_range_start() != 0) {
    total_size += 2 + 4;
  }

  // float view_range_end = 20;
  if (this->view_range_end() != 0) {
    total_size += 2 + 4;
  }

  // int64 timestamp = 22;
  if (this->timestamp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // float measured_view_range_end = 21;
  if (this->measured_view_range_end() != 0) {
    total_size += 2 + 4;
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 23;
  if (this->camera_position() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_position());
  }

  // bool is_valid = 24;
  if (this->is_valid() != 0) {
    total_size += 2 + 1;
  }

  // bool availability_state = 26;
  if (this->availability_state() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneAdjacent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.LaneAdjacent)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneAdjacent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneAdjacent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.LaneAdjacent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.LaneAdjacent)
    MergeFrom(*source);
  }
}

void LaneAdjacent::MergeFrom(const LaneAdjacent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.LaneAdjacent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_points_.MergeFrom(from.image_points_);
  if (from.track_id() != 0) {
    set_track_id(from.track_id());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.exist_probability() != 0) {
    set_exist_probability(from.exist_probability());
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
  if (from.prediction_source() != 0) {
    set_prediction_source(from.prediction_source());
  }
  if (from.prediction_type() != 0) {
    set_prediction_type(from.prediction_type());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.color_confidence() != 0) {
    set_color_confidence(from.color_confidence());
  }
  if (from.lanemark_type() != 0) {
    set_lanemark_type(from.lanemark_type());
  }
  if (from.lanemark_type_confidence() != 0) {
    set_lanemark_type_confidence(from.lanemark_type_confidence());
  }
  if (from.dlm_type() != 0) {
    set_dlm_type(from.dlm_type());
  }
  if (from.role() != 0) {
    set_role(from.role());
  }
  if (from.marker_width() != 0) {
    set_marker_width(from.marker_width());
  }
  if (from.marker_width_std() != 0) {
    set_marker_width_std(from.marker_width_std());
  }
  if (from.line_c3() != 0) {
    set_line_c3(from.line_c3());
  }
  if (from.line_c2() != 0) {
    set_line_c2(from.line_c2());
  }
  if (from.line_c1() != 0) {
    set_line_c1(from.line_c1());
  }
  if (from.line_c0() != 0) {
    set_line_c0(from.line_c0());
  }
  if (from.view_range_start() != 0) {
    set_view_range_start(from.view_range_start());
  }
  if (from.view_range_end() != 0) {
    set_view_range_end(from.view_range_end());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.measured_view_range_end() != 0) {
    set_measured_view_range_end(from.measured_view_range_end());
  }
  if (from.camera_position() != 0) {
    set_camera_position(from.camera_position());
  }
  if (from.is_valid() != 0) {
    set_is_valid(from.is_valid());
  }
  if (from.availability_state() != 0) {
    set_availability_state(from.availability_state());
  }
}

void LaneAdjacent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.LaneAdjacent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneAdjacent::CopyFrom(const LaneAdjacent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.LaneAdjacent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneAdjacent::IsInitialized() const {
  return true;
}

void LaneAdjacent::Swap(LaneAdjacent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneAdjacent::InternalSwap(LaneAdjacent* other) {
  using std::swap;
  image_points_.InternalSwap(&other->image_points_);
  swap(track_id_, other->track_id_);
  swap(age_, other->age_);
  swap(exist_probability_, other->exist_probability_);
  swap(quality_, other->quality_);
  swap(prediction_source_, other->prediction_source_);
  swap(prediction_type_, other->prediction_type_);
  swap(color_, other->color_);
  swap(color_confidence_, other->color_confidence_);
  swap(lanemark_type_, other->lanemark_type_);
  swap(lanemark_type_confidence_, other->lanemark_type_confidence_);
  swap(dlm_type_, other->dlm_type_);
  swap(role_, other->role_);
  swap(marker_width_, other->marker_width_);
  swap(marker_width_std_, other->marker_width_std_);
  swap(line_c3_, other->line_c3_);
  swap(line_c2_, other->line_c2_);
  swap(line_c1_, other->line_c1_);
  swap(line_c0_, other->line_c0_);
  swap(view_range_start_, other->view_range_start_);
  swap(view_range_end_, other->view_range_end_);
  swap(timestamp_, other->timestamp_);
  swap(measured_view_range_end_, other->measured_view_range_end_);
  swap(camera_position_, other->camera_position_);
  swap(is_valid_, other->is_valid_);
  swap(availability_state_, other->availability_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneAdjacent::GetMetadata() const {
  protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneRoadedge::InitAsDefaultInstance() {
}
void LaneRoadedge::clear_image_points() {
  image_points_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneRoadedge::kIdFieldNumber;
const int LaneRoadedge::kAgeFieldNumber;
const int LaneRoadedge::kExistProbabilityFieldNumber;
const int LaneRoadedge::kTypeFieldNumber;
const int LaneRoadedge::kPredictionTypeFieldNumber;
const int LaneRoadedge::kSideFieldNumber;
const int LaneRoadedge::kIndexFieldNumber;
const int LaneRoadedge::kHeightFieldNumber;
const int LaneRoadedge::kHeightStdFieldNumber;
const int LaneRoadedge::kLineC3FieldNumber;
const int LaneRoadedge::kLineC1FieldNumber;
const int LaneRoadedge::kLineC2FieldNumber;
const int LaneRoadedge::kLineC0FieldNumber;
const int LaneRoadedge::kViewRangeStartFieldNumber;
const int LaneRoadedge::kViewRangeEndFieldNumber;
const int LaneRoadedge::kMeasuredViewRangeEndFieldNumber;
const int LaneRoadedge::kTimestampFieldNumber;
const int LaneRoadedge::kCameraPositionFieldNumber;
const int LaneRoadedge::kIsValidFieldNumber;
const int LaneRoadedge::kImagePointsFieldNumber;
const int LaneRoadedge::kAvailabilityStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneRoadedge::LaneRoadedge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5froad_2eproto::InitDefaultsLaneRoadedge();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.LaneRoadedge)
}
LaneRoadedge::LaneRoadedge(const LaneRoadedge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      image_points_(from.image_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&availability_state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(availability_state_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.LaneRoadedge)
}

void LaneRoadedge::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&availability_state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(availability_state_));
  _cached_size_ = 0;
}

LaneRoadedge::~LaneRoadedge() {
  // @@protoc_insertion_point(destructor:calmcar.perception.LaneRoadedge)
  SharedDtor();
}

void LaneRoadedge::SharedDtor() {
}

void LaneRoadedge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneRoadedge::descriptor() {
  ::protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneRoadedge& LaneRoadedge::default_instance() {
  ::protobuf_perception_5froad_2eproto::InitDefaultsLaneRoadedge();
  return *internal_default_instance();
}

LaneRoadedge* LaneRoadedge::New(::google::protobuf::Arena* arena) const {
  LaneRoadedge* n = new LaneRoadedge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneRoadedge::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.LaneRoadedge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_points_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&availability_state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(availability_state_));
  _internal_metadata_.Clear();
}

bool LaneRoadedge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.LaneRoadedge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 age = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float exist_probability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exist_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.LreType type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::calmcar::perception::LreType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 prediction_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prediction_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.LineSide side = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_side(static_cast< ::calmcar::perception::LineSide >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.LreIndex index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_index(static_cast< ::calmcar::perception::LreIndex >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height_std = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float line_c3 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_c3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float line_c1 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_c1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float line_c2 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_c2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float line_c0 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_c0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float view_range_start = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &view_range_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float view_range_end = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &view_range_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float measured_view_range_end = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &measured_view_range_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.CameraInfo.Position camera_position = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera_position(static_cast< ::calmcar::perception::CameraInfo_Position >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_valid = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.Point2i image_points = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_image_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool availability_state = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &availability_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.LaneRoadedge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.LaneRoadedge)
  return false;
#undef DO_
}

void LaneRoadedge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.LaneRoadedge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 age = 2;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->age(), output);
  }

  // float exist_probability = 3;
  if (this->exist_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->exist_probability(), output);
  }

  // .calmcar.perception.LreType type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // int32 prediction_type = 5;
  if (this->prediction_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->prediction_type(), output);
  }

  // .calmcar.perception.LineSide side = 6;
  if (this->side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->side(), output);
  }

  // .calmcar.perception.LreIndex index = 7;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->index(), output);
  }

  // float height = 8;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->height(), output);
  }

  // float height_std = 9;
  if (this->height_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->height_std(), output);
  }

  // float line_c3 = 10;
  if (this->line_c3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->line_c3(), output);
  }

  // float line_c1 = 11;
  if (this->line_c1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->line_c1(), output);
  }

  // float line_c2 = 12;
  if (this->line_c2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->line_c2(), output);
  }

  // float line_c0 = 13;
  if (this->line_c0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->line_c0(), output);
  }

  // float view_range_start = 14;
  if (this->view_range_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->view_range_start(), output);
  }

  // float view_range_end = 15;
  if (this->view_range_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->view_range_end(), output);
  }

  // float measured_view_range_end = 16;
  if (this->measured_view_range_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->measured_view_range_end(), output);
  }

  // int64 timestamp = 17;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->timestamp(), output);
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 18;
  if (this->camera_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->camera_position(), output);
  }

  // bool is_valid = 19;
  if (this->is_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_valid(), output);
  }

  // repeated .calmcar.perception.Point2i image_points = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->image_points(static_cast<int>(i)), output);
  }

  // bool availability_state = 21;
  if (this->availability_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->availability_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.LaneRoadedge)
}

::google::protobuf::uint8* LaneRoadedge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.LaneRoadedge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 age = 2;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->age(), target);
  }

  // float exist_probability = 3;
  if (this->exist_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->exist_probability(), target);
  }

  // .calmcar.perception.LreType type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // int32 prediction_type = 5;
  if (this->prediction_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->prediction_type(), target);
  }

  // .calmcar.perception.LineSide side = 6;
  if (this->side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->side(), target);
  }

  // .calmcar.perception.LreIndex index = 7;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->index(), target);
  }

  // float height = 8;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->height(), target);
  }

  // float height_std = 9;
  if (this->height_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->height_std(), target);
  }

  // float line_c3 = 10;
  if (this->line_c3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->line_c3(), target);
  }

  // float line_c1 = 11;
  if (this->line_c1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->line_c1(), target);
  }

  // float line_c2 = 12;
  if (this->line_c2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->line_c2(), target);
  }

  // float line_c0 = 13;
  if (this->line_c0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->line_c0(), target);
  }

  // float view_range_start = 14;
  if (this->view_range_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->view_range_start(), target);
  }

  // float view_range_end = 15;
  if (this->view_range_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->view_range_end(), target);
  }

  // float measured_view_range_end = 16;
  if (this->measured_view_range_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->measured_view_range_end(), target);
  }

  // int64 timestamp = 17;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->timestamp(), target);
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 18;
  if (this->camera_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->camera_position(), target);
  }

  // bool is_valid = 19;
  if (this->is_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_valid(), target);
  }

  // repeated .calmcar.perception.Point2i image_points = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->image_points(static_cast<int>(i)), deterministic, target);
  }

  // bool availability_state = 21;
  if (this->availability_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->availability_state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.LaneRoadedge)
  return target;
}

size_t LaneRoadedge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.LaneRoadedge)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .calmcar.perception.Point2i image_points = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->image_points_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->image_points(static_cast<int>(i)));
    }
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 age = 2;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->age());
  }

  // float exist_probability = 3;
  if (this->exist_probability() != 0) {
    total_size += 1 + 4;
  }

  // .calmcar.perception.LreType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 prediction_type = 5;
  if (this->prediction_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prediction_type());
  }

  // .calmcar.perception.LineSide side = 6;
  if (this->side() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
  }

  // .calmcar.perception.LreIndex index = 7;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->index());
  }

  // float height = 8;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // float height_std = 9;
  if (this->height_std() != 0) {
    total_size += 1 + 4;
  }

  // float line_c3 = 10;
  if (this->line_c3() != 0) {
    total_size += 1 + 4;
  }

  // float line_c1 = 11;
  if (this->line_c1() != 0) {
    total_size += 1 + 4;
  }

  // float line_c2 = 12;
  if (this->line_c2() != 0) {
    total_size += 1 + 4;
  }

  // float line_c0 = 13;
  if (this->line_c0() != 0) {
    total_size += 1 + 4;
  }

  // float view_range_start = 14;
  if (this->view_range_start() != 0) {
    total_size += 1 + 4;
  }

  // float view_range_end = 15;
  if (this->view_range_end() != 0) {
    total_size += 1 + 4;
  }

  // float measured_view_range_end = 16;
  if (this->measured_view_range_end() != 0) {
    total_size += 2 + 4;
  }

  // int64 timestamp = 17;
  if (this->timestamp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 18;
  if (this->camera_position() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_position());
  }

  // bool is_valid = 19;
  if (this->is_valid() != 0) {
    total_size += 2 + 1;
  }

  // bool availability_state = 21;
  if (this->availability_state() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneRoadedge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.LaneRoadedge)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneRoadedge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneRoadedge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.LaneRoadedge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.LaneRoadedge)
    MergeFrom(*source);
  }
}

void LaneRoadedge::MergeFrom(const LaneRoadedge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.LaneRoadedge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_points_.MergeFrom(from.image_points_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.exist_probability() != 0) {
    set_exist_probability(from.exist_probability());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.prediction_type() != 0) {
    set_prediction_type(from.prediction_type());
  }
  if (from.side() != 0) {
    set_side(from.side());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.height_std() != 0) {
    set_height_std(from.height_std());
  }
  if (from.line_c3() != 0) {
    set_line_c3(from.line_c3());
  }
  if (from.line_c1() != 0) {
    set_line_c1(from.line_c1());
  }
  if (from.line_c2() != 0) {
    set_line_c2(from.line_c2());
  }
  if (from.line_c0() != 0) {
    set_line_c0(from.line_c0());
  }
  if (from.view_range_start() != 0) {
    set_view_range_start(from.view_range_start());
  }
  if (from.view_range_end() != 0) {
    set_view_range_end(from.view_range_end());
  }
  if (from.measured_view_range_end() != 0) {
    set_measured_view_range_end(from.measured_view_range_end());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.camera_position() != 0) {
    set_camera_position(from.camera_position());
  }
  if (from.is_valid() != 0) {
    set_is_valid(from.is_valid());
  }
  if (from.availability_state() != 0) {
    set_availability_state(from.availability_state());
  }
}

void LaneRoadedge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.LaneRoadedge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneRoadedge::CopyFrom(const LaneRoadedge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.LaneRoadedge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneRoadedge::IsInitialized() const {
  return true;
}

void LaneRoadedge::Swap(LaneRoadedge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneRoadedge::InternalSwap(LaneRoadedge* other) {
  using std::swap;
  image_points_.InternalSwap(&other->image_points_);
  swap(id_, other->id_);
  swap(age_, other->age_);
  swap(exist_probability_, other->exist_probability_);
  swap(type_, other->type_);
  swap(prediction_type_, other->prediction_type_);
  swap(side_, other->side_);
  swap(index_, other->index_);
  swap(height_, other->height_);
  swap(height_std_, other->height_std_);
  swap(line_c3_, other->line_c3_);
  swap(line_c1_, other->line_c1_);
  swap(line_c2_, other->line_c2_);
  swap(line_c0_, other->line_c0_);
  swap(view_range_start_, other->view_range_start_);
  swap(view_range_end_, other->view_range_end_);
  swap(measured_view_range_end_, other->measured_view_range_end_);
  swap(timestamp_, other->timestamp_);
  swap(camera_position_, other->camera_position_);
  swap(is_valid_, other->is_valid_);
  swap(availability_state_, other->availability_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneRoadedge::GetMetadata() const {
  protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Lane::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane::kSyncIdFieldNumber;
const int Lane::kEstimatedWidthFieldNumber;
const int Lane::kLaneHostCountFieldNumber;
const int Lane::kLaneHostFieldNumber;
const int Lane::kLaneAdjacentCountFieldNumber;
const int Lane::kLaneAdjacentFieldNumber;
const int Lane::kRoadEdgeCountFieldNumber;
const int Lane::kRoadEdgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane::Lane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5froad_2eproto::InitDefaultsLane();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.Lane)
}
Lane::Lane(const Lane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lane_host_(from.lane_host_),
      lane_adjacent_(from.lane_adjacent_),
      road_edge_(from.road_edge_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sync_id_, &from.sync_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&road_edge_count_) -
    reinterpret_cast<char*>(&sync_id_)) + sizeof(road_edge_count_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.Lane)
}

void Lane::SharedCtor() {
  ::memset(&sync_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&road_edge_count_) -
      reinterpret_cast<char*>(&sync_id_)) + sizeof(road_edge_count_));
  _cached_size_ = 0;
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:calmcar.perception.Lane)
  SharedDtor();
}

void Lane::SharedDtor() {
}

void Lane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lane::descriptor() {
  ::protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lane& Lane::default_instance() {
  ::protobuf_perception_5froad_2eproto::InitDefaultsLane();
  return *internal_default_instance();
}

Lane* Lane::New(::google::protobuf::Arena* arena) const {
  Lane* n = new Lane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_host_.Clear();
  lane_adjacent_.Clear();
  road_edge_.Clear();
  ::memset(&sync_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&road_edge_count_) -
      reinterpret_cast<char*>(&sync_id_)) + sizeof(road_edge_count_));
  _internal_metadata_.Clear();
}

bool Lane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.Lane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 sync_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sync_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float estimated_width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &estimated_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_host_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_host_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.LaneHost lane_host = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_lane_host()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_adjacent_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_adjacent_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.LaneAdjacent lane_adjacent = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_lane_adjacent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 road_edge_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &road_edge_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.LaneRoadedge road_edge = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_road_edge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.Lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.Lane)
  return false;
#undef DO_
}

void Lane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sync_id = 1;
  if (this->sync_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sync_id(), output);
  }

  // float estimated_width = 2;
  if (this->estimated_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->estimated_width(), output);
  }

  // int32 lane_host_count = 3;
  if (this->lane_host_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lane_host_count(), output);
  }

  // repeated .calmcar.perception.LaneHost lane_host = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_host_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lane_host(static_cast<int>(i)), output);
  }

  // int32 lane_adjacent_count = 5;
  if (this->lane_adjacent_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lane_adjacent_count(), output);
  }

  // repeated .calmcar.perception.LaneAdjacent lane_adjacent = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_adjacent_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->lane_adjacent(static_cast<int>(i)), output);
  }

  // int32 road_edge_count = 7;
  if (this->road_edge_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->road_edge_count(), output);
  }

  // repeated .calmcar.perception.LaneRoadedge road_edge = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_edge_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->road_edge(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.Lane)
}

::google::protobuf::uint8* Lane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sync_id = 1;
  if (this->sync_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sync_id(), target);
  }

  // float estimated_width = 2;
  if (this->estimated_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->estimated_width(), target);
  }

  // int32 lane_host_count = 3;
  if (this->lane_host_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lane_host_count(), target);
  }

  // repeated .calmcar.perception.LaneHost lane_host = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_host_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->lane_host(static_cast<int>(i)), deterministic, target);
  }

  // int32 lane_adjacent_count = 5;
  if (this->lane_adjacent_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lane_adjacent_count(), target);
  }

  // repeated .calmcar.perception.LaneAdjacent lane_adjacent = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_adjacent_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->lane_adjacent(static_cast<int>(i)), deterministic, target);
  }

  // int32 road_edge_count = 7;
  if (this->road_edge_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->road_edge_count(), target);
  }

  // repeated .calmcar.perception.LaneRoadedge road_edge = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_edge_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->road_edge(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.Lane)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .calmcar.perception.LaneHost lane_host = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_host_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_host(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.LaneAdjacent lane_adjacent = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_adjacent_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_adjacent(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.LaneRoadedge road_edge = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->road_edge_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road_edge(static_cast<int>(i)));
    }
  }

  // int64 sync_id = 1;
  if (this->sync_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sync_id());
  }

  // float estimated_width = 2;
  if (this->estimated_width() != 0) {
    total_size += 1 + 4;
  }

  // int32 lane_host_count = 3;
  if (this->lane_host_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_host_count());
  }

  // int32 lane_adjacent_count = 5;
  if (this->lane_adjacent_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_adjacent_count());
  }

  // int32 road_edge_count = 7;
  if (this->road_edge_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->road_edge_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.Lane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.Lane)
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_host_.MergeFrom(from.lane_host_);
  lane_adjacent_.MergeFrom(from.lane_adjacent_);
  road_edge_.MergeFrom(from.road_edge_);
  if (from.sync_id() != 0) {
    set_sync_id(from.sync_id());
  }
  if (from.estimated_width() != 0) {
    set_estimated_width(from.estimated_width());
  }
  if (from.lane_host_count() != 0) {
    set_lane_host_count(from.lane_host_count());
  }
  if (from.lane_adjacent_count() != 0) {
    set_lane_adjacent_count(from.lane_adjacent_count());
  }
  if (from.road_edge_count() != 0) {
    set_road_edge_count(from.road_edge_count());
  }
}

void Lane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::Swap(Lane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lane::InternalSwap(Lane* other) {
  using std::swap;
  lane_host_.InternalSwap(&other->lane_host_);
  lane_adjacent_.InternalSwap(&other->lane_adjacent_);
  road_edge_.InternalSwap(&other->road_edge_);
  swap(sync_id_, other->sync_id_);
  swap(estimated_width_, other->estimated_width_);
  swap(lane_host_count_, other->lane_host_count_);
  swap(lane_adjacent_count_, other->lane_adjacent_count_);
  swap(road_edge_count_, other->road_edge_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lane::GetMetadata() const {
  protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadMark::InitAsDefaultInstance() {
  ::calmcar::perception::_RoadMark_default_instance_._instance.get_mutable()->bbox_ = const_cast< ::calmcar::perception::Rect*>(
      ::calmcar::perception::Rect::internal_default_instance());
}
void RoadMark::clear_bbox() {
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadMark::kSyncIdFieldNumber;
const int RoadMark::kTimestampFieldNumber;
const int RoadMark::kCameraPositionFieldNumber;
const int RoadMark::kBboxFieldNumber;
const int RoadMark::kIdFieldNumber;
const int RoadMark::kAgeFieldNumber;
const int RoadMark::kObjectClassFieldNumber;
const int RoadMark::kObjectClassNameFieldNumber;
const int RoadMark::kObjectSubclassFieldNumber;
const int RoadMark::kObjectSubclassNameFieldNumber;
const int RoadMark::kConfidenceFieldNumber;
const int RoadMark::kLatDistanceFieldNumber;
const int RoadMark::kLatDistanceStdFieldNumber;
const int RoadMark::kLongDistanceFieldNumber;
const int RoadMark::kLongDistanceStdFieldNumber;
const int RoadMark::kWidthFieldNumber;
const int RoadMark::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadMark::RoadMark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5froad_2eproto::InitDefaultsRoadMark();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.RoadMark)
}
RoadMark::RoadMark(const RoadMark& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_class_name().size() > 0) {
    object_class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_class_name_);
  }
  object_subclass_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object_subclass_name().size() > 0) {
    object_subclass_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_subclass_name_);
  }
  if (from.has_bbox()) {
    bbox_ = new ::calmcar::perception::Rect(*from.bbox_);
  } else {
    bbox_ = NULL;
  }
  ::memcpy(&sync_id_, &from.sync_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&sync_id_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.RoadMark)
}

void RoadMark::SharedCtor() {
  object_class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_subclass_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bbox_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&bbox_)) + sizeof(length_));
  _cached_size_ = 0;
}

RoadMark::~RoadMark() {
  // @@protoc_insertion_point(destructor:calmcar.perception.RoadMark)
  SharedDtor();
}

void RoadMark::SharedDtor() {
  object_class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_subclass_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bbox_;
}

void RoadMark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadMark::descriptor() {
  ::protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadMark& RoadMark::default_instance() {
  ::protobuf_perception_5froad_2eproto::InitDefaultsRoadMark();
  return *internal_default_instance();
}

RoadMark* RoadMark::New(::google::protobuf::Arena* arena) const {
  RoadMark* n = new RoadMark;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoadMark::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.RoadMark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_subclass_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
  ::memset(&sync_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&sync_id_)) + sizeof(length_));
  _internal_metadata_.Clear();
}

bool RoadMark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.RoadMark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 sync_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sync_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.CameraInfo.Position camera_position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera_position(static_cast< ::calmcar::perception::CameraInfo_Position >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Rect bbox = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 age = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 object_class = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &object_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string object_class_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_class_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_class_name().data(), static_cast<int>(this->object_class_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.RoadMark.object_class_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 object_subclass = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &object_subclass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string object_subclass_name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_subclass_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->object_subclass_name().data(), static_cast<int>(this->object_subclass_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.RoadMark.object_subclass_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat_distance = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat_distance_std = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_distance_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float long_distance = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &long_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float long_distance_std = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &long_distance_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.RoadMark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.RoadMark)
  return false;
#undef DO_
}

void RoadMark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.RoadMark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sync_id = 1;
  if (this->sync_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sync_id(), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 3;
  if (this->camera_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->camera_position(), output);
  }

  // .calmcar.perception.Rect bbox = 4;
  if (this->has_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bbox_, output);
  }

  // int32 id = 5;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->id(), output);
  }

  // int32 age = 6;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->age(), output);
  }

  // int32 object_class = 7;
  if (this->object_class() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->object_class(), output);
  }

  // string object_class_name = 8;
  if (this->object_class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_class_name().data(), static_cast<int>(this->object_class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.RoadMark.object_class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->object_class_name(), output);
  }

  // int32 object_subclass = 9;
  if (this->object_subclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->object_subclass(), output);
  }

  // string object_subclass_name = 10;
  if (this->object_subclass_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_subclass_name().data(), static_cast<int>(this->object_subclass_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.RoadMark.object_subclass_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->object_subclass_name(), output);
  }

  // float confidence = 11;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->confidence(), output);
  }

  // float lat_distance = 12;
  if (this->lat_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->lat_distance(), output);
  }

  // float lat_distance_std = 13;
  if (this->lat_distance_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->lat_distance_std(), output);
  }

  // float long_distance = 14;
  if (this->long_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->long_distance(), output);
  }

  // float long_distance_std = 15;
  if (this->long_distance_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->long_distance_std(), output);
  }

  // float width = 16;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->width(), output);
  }

  // float length = 17;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->length(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.RoadMark)
}

::google::protobuf::uint8* RoadMark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.RoadMark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sync_id = 1;
  if (this->sync_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sync_id(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 3;
  if (this->camera_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->camera_position(), target);
  }

  // .calmcar.perception.Rect bbox = 4;
  if (this->has_bbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->bbox_, deterministic, target);
  }

  // int32 id = 5;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->id(), target);
  }

  // int32 age = 6;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->age(), target);
  }

  // int32 object_class = 7;
  if (this->object_class() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->object_class(), target);
  }

  // string object_class_name = 8;
  if (this->object_class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_class_name().data(), static_cast<int>(this->object_class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.RoadMark.object_class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->object_class_name(), target);
  }

  // int32 object_subclass = 9;
  if (this->object_subclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->object_subclass(), target);
  }

  // string object_subclass_name = 10;
  if (this->object_subclass_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->object_subclass_name().data(), static_cast<int>(this->object_subclass_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.RoadMark.object_subclass_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->object_subclass_name(), target);
  }

  // float confidence = 11;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->confidence(), target);
  }

  // float lat_distance = 12;
  if (this->lat_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->lat_distance(), target);
  }

  // float lat_distance_std = 13;
  if (this->lat_distance_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->lat_distance_std(), target);
  }

  // float long_distance = 14;
  if (this->long_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->long_distance(), target);
  }

  // float long_distance_std = 15;
  if (this->long_distance_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->long_distance_std(), target);
  }

  // float width = 16;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->width(), target);
  }

  // float length = 17;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->length(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.RoadMark)
  return target;
}

size_t RoadMark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.RoadMark)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string object_class_name = 8;
  if (this->object_class_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_class_name());
  }

  // string object_subclass_name = 10;
  if (this->object_subclass_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->object_subclass_name());
  }

  // .calmcar.perception.Rect bbox = 4;
  if (this->has_bbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bbox_);
  }

  // int64 sync_id = 1;
  if (this->sync_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sync_id());
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 3;
  if (this->camera_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_position());
  }

  // int32 id = 5;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 age = 6;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->age());
  }

  // int32 object_class = 7;
  if (this->object_class() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->object_class());
  }

  // int32 object_subclass = 9;
  if (this->object_subclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->object_subclass());
  }

  // float confidence = 11;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // float lat_distance = 12;
  if (this->lat_distance() != 0) {
    total_size += 1 + 4;
  }

  // float lat_distance_std = 13;
  if (this->lat_distance_std() != 0) {
    total_size += 1 + 4;
  }

  // float long_distance = 14;
  if (this->long_distance() != 0) {
    total_size += 1 + 4;
  }

  // float long_distance_std = 15;
  if (this->long_distance_std() != 0) {
    total_size += 1 + 4;
  }

  // float width = 16;
  if (this->width() != 0) {
    total_size += 2 + 4;
  }

  // float length = 17;
  if (this->length() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadMark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.RoadMark)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadMark* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadMark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.RoadMark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.RoadMark)
    MergeFrom(*source);
  }
}

void RoadMark::MergeFrom(const RoadMark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.RoadMark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.object_class_name().size() > 0) {

    object_class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_class_name_);
  }
  if (from.object_subclass_name().size() > 0) {

    object_subclass_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_subclass_name_);
  }
  if (from.has_bbox()) {
    mutable_bbox()->::calmcar::perception::Rect::MergeFrom(from.bbox());
  }
  if (from.sync_id() != 0) {
    set_sync_id(from.sync_id());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.camera_position() != 0) {
    set_camera_position(from.camera_position());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.object_class() != 0) {
    set_object_class(from.object_class());
  }
  if (from.object_subclass() != 0) {
    set_object_subclass(from.object_subclass());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.lat_distance() != 0) {
    set_lat_distance(from.lat_distance());
  }
  if (from.lat_distance_std() != 0) {
    set_lat_distance_std(from.lat_distance_std());
  }
  if (from.long_distance() != 0) {
    set_long_distance(from.long_distance());
  }
  if (from.long_distance_std() != 0) {
    set_long_distance_std(from.long_distance_std());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void RoadMark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.RoadMark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadMark::CopyFrom(const RoadMark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.RoadMark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadMark::IsInitialized() const {
  return true;
}

void RoadMark::Swap(RoadMark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadMark::InternalSwap(RoadMark* other) {
  using std::swap;
  object_class_name_.Swap(&other->object_class_name_);
  object_subclass_name_.Swap(&other->object_subclass_name_);
  swap(bbox_, other->bbox_);
  swap(sync_id_, other->sync_id_);
  swap(timestamp_, other->timestamp_);
  swap(camera_position_, other->camera_position_);
  swap(id_, other->id_);
  swap(age_, other->age_);
  swap(object_class_, other->object_class_);
  swap(object_subclass_, other->object_subclass_);
  swap(confidence_, other->confidence_);
  swap(lat_distance_, other->lat_distance_);
  swap(lat_distance_std_, other->lat_distance_std_);
  swap(long_distance_, other->long_distance_);
  swap(long_distance_std_, other->long_distance_std_);
  swap(width_, other->width_);
  swap(length_, other->length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoadMark::GetMetadata() const {
  protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FreeSpaceImagePoint::InitAsDefaultInstance() {
  ::calmcar::perception::_FreeSpaceImagePoint_default_instance_._instance.get_mutable()->image_point_ = const_cast< ::calmcar::perception::Point2i*>(
      ::calmcar::perception::Point2i::internal_default_instance());
}
void FreeSpaceImagePoint::clear_image_point() {
  if (GetArenaNoVirtual() == NULL && image_point_ != NULL) {
    delete image_point_;
  }
  image_point_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FreeSpaceImagePoint::kCameraPositionFieldNumber;
const int FreeSpaceImagePoint::kClassificationTypeFieldNumber;
const int FreeSpaceImagePoint::kImagePointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FreeSpaceImagePoint::FreeSpaceImagePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5froad_2eproto::InitDefaultsFreeSpaceImagePoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.FreeSpaceImagePoint)
}
FreeSpaceImagePoint::FreeSpaceImagePoint(const FreeSpaceImagePoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_image_point()) {
    image_point_ = new ::calmcar::perception::Point2i(*from.image_point_);
  } else {
    image_point_ = NULL;
  }
  ::memcpy(&camera_position_, &from.camera_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&classification_type_) -
    reinterpret_cast<char*>(&camera_position_)) + sizeof(classification_type_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.FreeSpaceImagePoint)
}

void FreeSpaceImagePoint::SharedCtor() {
  ::memset(&image_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_type_) -
      reinterpret_cast<char*>(&image_point_)) + sizeof(classification_type_));
  _cached_size_ = 0;
}

FreeSpaceImagePoint::~FreeSpaceImagePoint() {
  // @@protoc_insertion_point(destructor:calmcar.perception.FreeSpaceImagePoint)
  SharedDtor();
}

void FreeSpaceImagePoint::SharedDtor() {
  if (this != internal_default_instance()) delete image_point_;
}

void FreeSpaceImagePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreeSpaceImagePoint::descriptor() {
  ::protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FreeSpaceImagePoint& FreeSpaceImagePoint::default_instance() {
  ::protobuf_perception_5froad_2eproto::InitDefaultsFreeSpaceImagePoint();
  return *internal_default_instance();
}

FreeSpaceImagePoint* FreeSpaceImagePoint::New(::google::protobuf::Arena* arena) const {
  FreeSpaceImagePoint* n = new FreeSpaceImagePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FreeSpaceImagePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.FreeSpaceImagePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && image_point_ != NULL) {
    delete image_point_;
  }
  image_point_ = NULL;
  ::memset(&camera_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_type_) -
      reinterpret_cast<char*>(&camera_position_)) + sizeof(classification_type_));
  _internal_metadata_.Clear();
}

bool FreeSpaceImagePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.FreeSpaceImagePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.CameraInfo.Position camera_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera_position(static_cast< ::calmcar::perception::CameraInfo_Position >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.FSPType classification_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_classification_type(static_cast< ::calmcar::perception::FSPType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Point2i image_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_image_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.FreeSpaceImagePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.FreeSpaceImagePoint)
  return false;
#undef DO_
}

void FreeSpaceImagePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.FreeSpaceImagePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->camera_position(), output);
  }

  // .calmcar.perception.FSPType classification_type = 2;
  if (this->classification_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->classification_type(), output);
  }

  // .calmcar.perception.Point2i image_point = 3;
  if (this->has_image_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->image_point_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.FreeSpaceImagePoint)
}

::google::protobuf::uint8* FreeSpaceImagePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.FreeSpaceImagePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->camera_position(), target);
  }

  // .calmcar.perception.FSPType classification_type = 2;
  if (this->classification_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->classification_type(), target);
  }

  // .calmcar.perception.Point2i image_point = 3;
  if (this->has_image_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->image_point_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.FreeSpaceImagePoint)
  return target;
}

size_t FreeSpaceImagePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.FreeSpaceImagePoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .calmcar.perception.Point2i image_point = 3;
  if (this->has_image_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->image_point_);
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_position());
  }

  // .calmcar.perception.FSPType classification_type = 2;
  if (this->classification_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->classification_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreeSpaceImagePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.FreeSpaceImagePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const FreeSpaceImagePoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FreeSpaceImagePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.FreeSpaceImagePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.FreeSpaceImagePoint)
    MergeFrom(*source);
  }
}

void FreeSpaceImagePoint::MergeFrom(const FreeSpaceImagePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.FreeSpaceImagePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_image_point()) {
    mutable_image_point()->::calmcar::perception::Point2i::MergeFrom(from.image_point());
  }
  if (from.camera_position() != 0) {
    set_camera_position(from.camera_position());
  }
  if (from.classification_type() != 0) {
    set_classification_type(from.classification_type());
  }
}

void FreeSpaceImagePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.FreeSpaceImagePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreeSpaceImagePoint::CopyFrom(const FreeSpaceImagePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.FreeSpaceImagePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreeSpaceImagePoint::IsInitialized() const {
  return true;
}

void FreeSpaceImagePoint::Swap(FreeSpaceImagePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FreeSpaceImagePoint::InternalSwap(FreeSpaceImagePoint* other) {
  using std::swap;
  swap(image_point_, other->image_point_);
  swap(camera_position_, other->camera_position_);
  swap(classification_type_, other->classification_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FreeSpaceImagePoint::GetMetadata() const {
  protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FreeSpacePoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FreeSpacePoint::kCameraPositionFieldNumber;
const int FreeSpacePoint::kClassificationTypeFieldNumber;
const int FreeSpacePoint::kExistProbabilityFieldNumber;
const int FreeSpacePoint::kAzimuthAngleFieldNumber;
const int FreeSpacePoint::kRangeFieldNumber;
const int FreeSpacePoint::kRangeStdFieldNumber;
const int FreeSpacePoint::kIdFieldNumber;
const int FreeSpacePoint::kTimestampFieldNumber;
const int FreeSpacePoint::kIsValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FreeSpacePoint::FreeSpacePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5froad_2eproto::InitDefaultsFreeSpacePoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.FreeSpacePoint)
}
FreeSpacePoint::FreeSpacePoint(const FreeSpacePoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&camera_position_, &from.camera_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_valid_) -
    reinterpret_cast<char*>(&camera_position_)) + sizeof(is_valid_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.FreeSpacePoint)
}

void FreeSpacePoint::SharedCtor() {
  ::memset(&camera_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_valid_) -
      reinterpret_cast<char*>(&camera_position_)) + sizeof(is_valid_));
  _cached_size_ = 0;
}

FreeSpacePoint::~FreeSpacePoint() {
  // @@protoc_insertion_point(destructor:calmcar.perception.FreeSpacePoint)
  SharedDtor();
}

void FreeSpacePoint::SharedDtor() {
}

void FreeSpacePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreeSpacePoint::descriptor() {
  ::protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FreeSpacePoint& FreeSpacePoint::default_instance() {
  ::protobuf_perception_5froad_2eproto::InitDefaultsFreeSpacePoint();
  return *internal_default_instance();
}

FreeSpacePoint* FreeSpacePoint::New(::google::protobuf::Arena* arena) const {
  FreeSpacePoint* n = new FreeSpacePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FreeSpacePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.FreeSpacePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&camera_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_valid_) -
      reinterpret_cast<char*>(&camera_position_)) + sizeof(is_valid_));
  _internal_metadata_.Clear();
}

bool FreeSpacePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.FreeSpacePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.CameraInfo.Position camera_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera_position(static_cast< ::calmcar::perception::CameraInfo_Position >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.FSPType classification_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_classification_type(static_cast< ::calmcar::perception::FSPType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float exist_probability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exist_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float azimuth_angle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azimuth_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float range = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float range_std = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_valid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.FreeSpacePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.FreeSpacePoint)
  return false;
#undef DO_
}

void FreeSpacePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.FreeSpacePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->camera_position(), output);
  }

  // .calmcar.perception.FSPType classification_type = 2;
  if (this->classification_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->classification_type(), output);
  }

  // float exist_probability = 3;
  if (this->exist_probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->exist_probability(), output);
  }

  // float azimuth_angle = 4;
  if (this->azimuth_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->azimuth_angle(), output);
  }

  // float range = 5;
  if (this->range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->range(), output);
  }

  // float range_std = 6;
  if (this->range_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->range_std(), output);
  }

  // int32 id = 7;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->id(), output);
  }

  // int64 timestamp = 8;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->timestamp(), output);
  }

  // bool is_valid = 9;
  if (this->is_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_valid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.FreeSpacePoint)
}

::google::protobuf::uint8* FreeSpacePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.FreeSpacePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->camera_position(), target);
  }

  // .calmcar.perception.FSPType classification_type = 2;
  if (this->classification_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->classification_type(), target);
  }

  // float exist_probability = 3;
  if (this->exist_probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->exist_probability(), target);
  }

  // float azimuth_angle = 4;
  if (this->azimuth_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->azimuth_angle(), target);
  }

  // float range = 5;
  if (this->range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->range(), target);
  }

  // float range_std = 6;
  if (this->range_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->range_std(), target);
  }

  // int32 id = 7;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->id(), target);
  }

  // int64 timestamp = 8;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->timestamp(), target);
  }

  // bool is_valid = 9;
  if (this->is_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_valid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.FreeSpacePoint)
  return target;
}

size_t FreeSpacePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.FreeSpacePoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_position());
  }

  // .calmcar.perception.FSPType classification_type = 2;
  if (this->classification_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->classification_type());
  }

  // float exist_probability = 3;
  if (this->exist_probability() != 0) {
    total_size += 1 + 4;
  }

  // float azimuth_angle = 4;
  if (this->azimuth_angle() != 0) {
    total_size += 1 + 4;
  }

  // float range = 5;
  if (this->range() != 0) {
    total_size += 1 + 4;
  }

  // float range_std = 6;
  if (this->range_std() != 0) {
    total_size += 1 + 4;
  }

  // int64 timestamp = 8;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 id = 7;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // bool is_valid = 9;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreeSpacePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.FreeSpacePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const FreeSpacePoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FreeSpacePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.FreeSpacePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.FreeSpacePoint)
    MergeFrom(*source);
  }
}

void FreeSpacePoint::MergeFrom(const FreeSpacePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.FreeSpacePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camera_position() != 0) {
    set_camera_position(from.camera_position());
  }
  if (from.classification_type() != 0) {
    set_classification_type(from.classification_type());
  }
  if (from.exist_probability() != 0) {
    set_exist_probability(from.exist_probability());
  }
  if (from.azimuth_angle() != 0) {
    set_azimuth_angle(from.azimuth_angle());
  }
  if (from.range() != 0) {
    set_range(from.range());
  }
  if (from.range_std() != 0) {
    set_range_std(from.range_std());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.is_valid() != 0) {
    set_is_valid(from.is_valid());
  }
}

void FreeSpacePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.FreeSpacePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreeSpacePoint::CopyFrom(const FreeSpacePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.FreeSpacePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreeSpacePoint::IsInitialized() const {
  return true;
}

void FreeSpacePoint::Swap(FreeSpacePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FreeSpacePoint::InternalSwap(FreeSpacePoint* other) {
  using std::swap;
  swap(camera_position_, other->camera_position_);
  swap(classification_type_, other->classification_type_);
  swap(exist_probability_, other->exist_probability_);
  swap(azimuth_angle_, other->azimuth_angle_);
  swap(range_, other->range_);
  swap(range_std_, other->range_std_);
  swap(timestamp_, other->timestamp_);
  swap(id_, other->id_);
  swap(is_valid_, other->is_valid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FreeSpacePoint::GetMetadata() const {
  protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FreeSpace::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FreeSpace::kSyncIdFieldNumber;
const int FreeSpace::kImagePointsFieldNumber;
const int FreeSpace::kFreespacePointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FreeSpace::FreeSpace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5froad_2eproto::InitDefaultsFreeSpace();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.FreeSpace)
}
FreeSpace::FreeSpace(const FreeSpace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      image_points_(from.image_points_),
      freespace_points_(from.freespace_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sync_id_ = from.sync_id_;
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.FreeSpace)
}

void FreeSpace::SharedCtor() {
  sync_id_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

FreeSpace::~FreeSpace() {
  // @@protoc_insertion_point(destructor:calmcar.perception.FreeSpace)
  SharedDtor();
}

void FreeSpace::SharedDtor() {
}

void FreeSpace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreeSpace::descriptor() {
  ::protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FreeSpace& FreeSpace::default_instance() {
  ::protobuf_perception_5froad_2eproto::InitDefaultsFreeSpace();
  return *internal_default_instance();
}

FreeSpace* FreeSpace::New(::google::protobuf::Arena* arena) const {
  FreeSpace* n = new FreeSpace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FreeSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.FreeSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_points_.Clear();
  freespace_points_.Clear();
  sync_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool FreeSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.FreeSpace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 sync_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sync_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.FreeSpaceImagePoint image_points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_image_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.FreeSpacePoint freespace_points = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_freespace_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.FreeSpace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.FreeSpace)
  return false;
#undef DO_
}

void FreeSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.FreeSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sync_id = 1;
  if (this->sync_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sync_id(), output);
  }

  // repeated .calmcar.perception.FreeSpaceImagePoint image_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->image_points(static_cast<int>(i)), output);
  }

  // repeated .calmcar.perception.FreeSpacePoint freespace_points = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->freespace_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->freespace_points(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.FreeSpace)
}

::google::protobuf::uint8* FreeSpace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.FreeSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sync_id = 1;
  if (this->sync_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sync_id(), target);
  }

  // repeated .calmcar.perception.FreeSpaceImagePoint image_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->image_points(static_cast<int>(i)), deterministic, target);
  }

  // repeated .calmcar.perception.FreeSpacePoint freespace_points = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->freespace_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->freespace_points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.FreeSpace)
  return target;
}

size_t FreeSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.FreeSpace)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .calmcar.perception.FreeSpaceImagePoint image_points = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->image_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->image_points(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.FreeSpacePoint freespace_points = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->freespace_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->freespace_points(static_cast<int>(i)));
    }
  }

  // int64 sync_id = 1;
  if (this->sync_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sync_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreeSpace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.FreeSpace)
  GOOGLE_DCHECK_NE(&from, this);
  const FreeSpace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FreeSpace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.FreeSpace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.FreeSpace)
    MergeFrom(*source);
  }
}

void FreeSpace::MergeFrom(const FreeSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.FreeSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_points_.MergeFrom(from.image_points_);
  freespace_points_.MergeFrom(from.freespace_points_);
  if (from.sync_id() != 0) {
    set_sync_id(from.sync_id());
  }
}

void FreeSpace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.FreeSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreeSpace::CopyFrom(const FreeSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.FreeSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreeSpace::IsInitialized() const {
  return true;
}

void FreeSpace::Swap(FreeSpace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FreeSpace::InternalSwap(FreeSpace* other) {
  using std::swap;
  image_points_.InternalSwap(&other->image_points_);
  freespace_points_.InternalSwap(&other->freespace_points_);
  swap(sync_id_, other->sync_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FreeSpace::GetMetadata() const {
  protobuf_perception_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace calmcar

// @@protoc_insertion_point(global_scope)
