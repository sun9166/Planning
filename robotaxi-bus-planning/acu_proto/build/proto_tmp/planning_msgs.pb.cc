// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning_msgs.proto

#include "planning_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace planning_msgs {
class PlanningCmdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlanningCmd>
      _instance;
} _PlanningCmd_default_instance_;
class BehaviorLimitCmdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BehaviorLimitCmd>
      _instance;
} _BehaviorLimitCmd_default_instance_;
class PlanningResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlanningResult>
      _instance;
} _PlanningResult_default_instance_;
class IntegerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Integer>
      _instance;
} _Integer_default_instance_;
class PlanningStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlanningStatus>
      _instance;
} _PlanningStatus_default_instance_;
class TrajectoryPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryPoint>
      _instance;
} _TrajectoryPoint_default_instance_;
class ImuInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImuInfo>
      _instance;
} _ImuInfo_default_instance_;
class BusinessFeedbackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BusinessFeedback>
      _instance;
} _BusinessFeedback_default_instance_;
class BusinessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Business>
      _instance;
} _Business_default_instance_;
class TrajectoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Trajectory>
      _instance;
} _Trajectory_default_instance_;
}  // namespace planning_msgs
namespace protobuf_planning_5fmsgs_2eproto {
void InitDefaultsPlanningCmdImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_msgs::_PlanningCmd_default_instance_;
    new (ptr) ::planning_msgs::PlanningCmd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_msgs::PlanningCmd::InitAsDefaultInstance();
}

void InitDefaultsPlanningCmd() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlanningCmdImpl);
}

void InitDefaultsBehaviorLimitCmdImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_msgs::_BehaviorLimitCmd_default_instance_;
    new (ptr) ::planning_msgs::BehaviorLimitCmd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_msgs::BehaviorLimitCmd::InitAsDefaultInstance();
}

void InitDefaultsBehaviorLimitCmd() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBehaviorLimitCmdImpl);
}

void InitDefaultsPlanningResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_msgs::_PlanningResult_default_instance_;
    new (ptr) ::planning_msgs::PlanningResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_msgs::PlanningResult::InitAsDefaultInstance();
}

void InitDefaultsPlanningResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlanningResultImpl);
}

void InitDefaultsIntegerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_msgs::_Integer_default_instance_;
    new (ptr) ::planning_msgs::Integer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_msgs::Integer::InitAsDefaultInstance();
}

void InitDefaultsInteger() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIntegerImpl);
}

void InitDefaultsPlanningStatusImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_planning_5fmsgs_2eproto::InitDefaultsPlanningResult();
  {
    void* ptr = &::planning_msgs::_PlanningStatus_default_instance_;
    new (ptr) ::planning_msgs::PlanningStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_msgs::PlanningStatus::InitAsDefaultInstance();
}

void InitDefaultsPlanningStatus() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlanningStatusImpl);
}

void InitDefaultsTrajectoryPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_msgs::_TrajectoryPoint_default_instance_;
    new (ptr) ::planning_msgs::TrajectoryPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_msgs::TrajectoryPoint::InitAsDefaultInstance();
}

void InitDefaultsTrajectoryPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrajectoryPointImpl);
}

void InitDefaultsImuInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_msgs::_ImuInfo_default_instance_;
    new (ptr) ::planning_msgs::ImuInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_msgs::ImuInfo::InitAsDefaultInstance();
}

void InitDefaultsImuInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImuInfoImpl);
}

void InitDefaultsBusinessFeedbackImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_5fmsgs_2eproto::InitDefaultsHeader();
  protobuf_planning_5fmsgs_2eproto::InitDefaultsBusiness();
  {
    void* ptr = &::planning_msgs::_BusinessFeedback_default_instance_;
    new (ptr) ::planning_msgs::BusinessFeedback();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_msgs::BusinessFeedback::InitAsDefaultInstance();
}

void InitDefaultsBusinessFeedback() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBusinessFeedbackImpl);
}

void InitDefaultsBusinessImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_msgs::_Business_default_instance_;
    new (ptr) ::planning_msgs::Business();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_msgs::Business::InitAsDefaultInstance();
}

void InitDefaultsBusiness() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBusinessImpl);
}

void InitDefaultsTrajectoryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_5fmsgs_2eproto::InitDefaultsHeader();
  protobuf_planning_5fmsgs_2eproto::InitDefaultsTrajectoryPoint();
  protobuf_planning_5fmsgs_2eproto::InitDefaultsImuInfo();
  {
    void* ptr = &::planning_msgs::_Trajectory_default_instance_;
    new (ptr) ::planning_msgs::Trajectory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_msgs::Trajectory::InitAsDefaultInstance();
}

void InitDefaultsTrajectory() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrajectoryImpl);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::PlanningCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::PlanningCmd, mission_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::PlanningCmd, mission_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::PlanningCmd, mission_command_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::BehaviorLimitCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::BehaviorLimitCmd, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::BehaviorLimitCmd, brake_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::BehaviorLimitCmd, lane_change_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::BehaviorLimitCmd, behaviorlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::BehaviorLimitCmd, behaviorexecutethreshold_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::PlanningResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::PlanningResult, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::PlanningResult, addition_message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Integer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Integer, input_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::PlanningStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::PlanningStatus, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::PlanningStatus, mission_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::PlanningStatus, mission_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::PlanningStatus, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::PlanningStatus, brake_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::PlanningStatus, lane_change_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::PlanningStatus, lane_change_feedback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::PlanningStatus, behaviorlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::PlanningStatus, behaviorexecutethreshold_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::TrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::TrajectoryPoint, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::TrajectoryPoint, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::TrajectoryPoint, xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::TrajectoryPoint, yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::TrajectoryPoint, xg_dr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::TrajectoryPoint, yg_dr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::TrajectoryPoint, angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::TrajectoryPoint, angleglobal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::TrajectoryPoint, angleglobal_dr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::TrajectoryPoint, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::TrajectoryPoint, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::TrajectoryPoint, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::TrajectoryPoint, curvature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::TrajectoryPoint, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::TrajectoryPoint, direction_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::ImuInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::ImuInfo, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::ImuInfo, xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::ImuInfo, yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::ImuInfo, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::ImuInfo, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::ImuInfo, vx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::ImuInfo, vy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::ImuInfo, loc_xg_dr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::ImuInfo, loc_yg_dr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::ImuInfo, loc_yaw_dr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::ImuInfo, correction_flag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::BusinessFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::BusinessFeedback, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::BusinessFeedback, business_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::BusinessFeedback, reference_lane_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::BusinessFeedback, reference_target_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::BusinessFeedback, decision_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::BusinessFeedback, path_in_current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::BusinessFeedback, is_passable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::BusinessFeedback, passable_lane_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::BusinessFeedback, black_road_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Business, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Business, orderreply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Business, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Business, turning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Business, driving_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Business, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Business, impassable_flag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Trajectory, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Trajectory, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Trajectory, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Trajectory, autodrvmodeentry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Trajectory, autodrvmodeexit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Trajectory, lane_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Trajectory, lane_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Trajectory, car_fault_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Trajectory, control_accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Trajectory, imu_loc_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Trajectory, correct_loc_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Trajectory, gear_position_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Trajectory, senario_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_msgs::Trajectory, steeringangle_rate_max_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::planning_msgs::PlanningCmd)},
  { 8, -1, sizeof(::planning_msgs::BehaviorLimitCmd)},
  { 18, -1, sizeof(::planning_msgs::PlanningResult)},
  { 25, -1, sizeof(::planning_msgs::Integer)},
  { 31, -1, sizeof(::planning_msgs::PlanningStatus)},
  { 45, -1, sizeof(::planning_msgs::TrajectoryPoint)},
  { 65, -1, sizeof(::planning_msgs::ImuInfo)},
  { 81, -1, sizeof(::planning_msgs::BusinessFeedback)},
  { 95, -1, sizeof(::planning_msgs::Business)},
  { 106, -1, sizeof(::planning_msgs::Trajectory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_msgs::_PlanningCmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_msgs::_BehaviorLimitCmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_msgs::_PlanningResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_msgs::_Integer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_msgs::_PlanningStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_msgs::_TrajectoryPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_msgs::_ImuInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_msgs::_BusinessFeedback_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_msgs::_Business_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_msgs::_Trajectory_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "planning_msgs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023planning_msgs.proto\022\rplanning_msgs\032\021co"
      "mmon_msgs.proto\"P\n\013PlanningCmd\022\022\n\nmissio"
      "n_id\030\001 \001(\005\022\024\n\014mission_type\030\002 \001(\005\022\027\n\017miss"
      "ion_command\030\003 \001(\005\"\214\001\n\020BehaviorLimitCmd\022\023"
      "\n\013speed_limit\030\001 \001(\002\022\021\n\tbrake_cmd\030\002 \001(\r\022\027"
      "\n\017lane_change_cmd\030\003 \001(\r\022\025\n\rbehaviorlimit"
      "\030\004 \003(\005\022 \n\030behaviorexecutethreshold\030\005 \003(\005"
      "\":\n\016PlanningResult\022\016\n\006result\030\001 \001(\005\022\030\n\020ad"
      "dition_message\030\002 \001(\t\"\030\n\007Integer\022\r\n\005input"
      "\030\001 \001(\r\"\207\002\n\016PlanningStatus\022\016\n\006status\030\001 \001("
      "\005\022\022\n\nmission_id\030\002 \001(\005\022\024\n\014mission_type\030\003 "
      "\001(\005\022\023\n\013speed_limit\030\004 \001(\002\022\024\n\014brake_status"
      "\030\005 \001(\005\022\032\n\022lane_change_status\030\006 \001(\005\022;\n\024la"
      "ne_change_feedback\030\007 \001(\0132\035.planning_msgs"
      ".PlanningResult\022\025\n\rbehaviorlimit\030\010 \003(\005\022 "
      "\n\030behaviorexecutethreshold\030\t \003(\005\"\367\001\n\017Tra"
      "jectoryPoint\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\n\n\002xg"
      "\030\003 \001(\001\022\n\n\002yg\030\004 \001(\001\022\r\n\005xg_dr\030\005 \001(\001\022\r\n\005yg_"
      "dr\030\006 \001(\001\022\r\n\005angle\030\007 \001(\002\022\023\n\013angleglobal\030\010"
      " \001(\002\022\026\n\016angleglobal_dr\030\t \001(\002\022\020\n\010velocity"
      "\030\n \001(\002\022\t\n\001a\030\013 \001(\002\022\t\n\001t\030\014 \001(\002\022\021\n\tcurvatur"
      "e\030\r \001(\002\022\016\n\006length\030\016 \001(\002\022\021\n\tdirection\030\017 \001"
      "(\005\"\277\001\n\007ImuInfo\022\022\n\ntime_stamp\030\001 \001(\001\022\n\n\002xg"
      "\030\002 \001(\001\022\n\n\002yg\030\003 \001(\001\022\013\n\003yaw\030\004 \001(\001\022\020\n\010veloc"
      "ity\030\005 \001(\001\022\n\n\002vx\030\006 \001(\001\022\n\n\002vy\030\007 \001(\001\022\021\n\tloc"
      "_xg_dr\030\010 \001(\001\022\021\n\tloc_yg_dr\030\t \001(\001\022\022\n\nloc_y"
      "aw_dr\030\n \001(\001\022\027\n\017correction_flag\030\013 \001(\010\"\222\002\n"
      "\020BusinessFeedback\022#\n\006header\030\001 \001(\0132\023.comm"
      "on_msgs.Header\022)\n\010business\030\002 \001(\0132\027.plann"
      "ing_msgs.Business\022\032\n\022reference_lane_ids\030"
      "\003 \003(\t\022\034\n\024reference_target_ids\030\004 \003(\t\022\023\n\013d"
      "ecision_id\030\005 \001(\005\022\027\n\017path_in_current\030\006 \001("
      "\010\022\023\n\013is_passable\030\007 \001(\010\022\031\n\021passable_lane_"
      "ids\030\010 \003(\t\022\026\n\016black_road_ids\030\t \003(\t\"\210\001\n\010Bu"
      "siness\022\022\n\norderreply\030\001 \001(\005\022\021\n\tdirection\030"
      "\002 \001(\r\022\017\n\007turning\030\003 \001(\005\022\026\n\016driving_status"
      "\030\004 \001(\005\022\023\n\013speed_limit\030\005 \001(\002\022\027\n\017impassabl"
      "e_flag\030\006 \001(\005\"\264\003\n\nTrajectory\022#\n\006header\030\001 "
      "\001(\0132\023.common_msgs.Header\022.\n\006points\030\002 \003(\013"
      "2\036.planning_msgs.TrajectoryPoint\022\021\n\tdire"
      "ction\030\003 \001(\r\022\030\n\020autodrvmodeentry\030\004 \001(\r\022\027\n"
      "\017autodrvmodeexit\030\005 \001(\r\022\020\n\010lane_ids\030\006 \003(\t"
      "\022\021\n\tlane_type\030\007 \001(\005\022\027\n\017car_fault_level\030\010"
      " \001(\005\022\030\n\020control_accuracy\030\t \001(\002\022,\n\014imu_lo"
      "c_data\030\n \001(\0132\026.planning_msgs.ImuInfo\0220\n\020"
      "correct_loc_data\030\013 \001(\0132\026.planning_msgs.I"
      "muInfo\022\035\n\025gear_position_request\030\014 \001(\005\022\024\n"
      "\014senario_type\030\r \001(\005\022\036\n\026steeringangle_rat"
      "e_max\030\016 \001(\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1939);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning_msgs.proto", &protobuf_RegisterTypes);
  ::protobuf_common_5fmsgs_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_planning_5fmsgs_2eproto
namespace planning_msgs {

// ===================================================================

void PlanningCmd::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningCmd::kMissionIdFieldNumber;
const int PlanningCmd::kMissionTypeFieldNumber;
const int PlanningCmd::kMissionCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningCmd::PlanningCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fmsgs_2eproto::InitDefaultsPlanningCmd();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_msgs.PlanningCmd)
}
PlanningCmd::PlanningCmd(const PlanningCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mission_id_, &from.mission_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mission_command_) -
    reinterpret_cast<char*>(&mission_id_)) + sizeof(mission_command_));
  // @@protoc_insertion_point(copy_constructor:planning_msgs.PlanningCmd)
}

void PlanningCmd::SharedCtor() {
  ::memset(&mission_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mission_command_) -
      reinterpret_cast<char*>(&mission_id_)) + sizeof(mission_command_));
  _cached_size_ = 0;
}

PlanningCmd::~PlanningCmd() {
  // @@protoc_insertion_point(destructor:planning_msgs.PlanningCmd)
  SharedDtor();
}

void PlanningCmd::SharedDtor() {
}

void PlanningCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningCmd::descriptor() {
  ::protobuf_planning_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanningCmd& PlanningCmd::default_instance() {
  ::protobuf_planning_5fmsgs_2eproto::InitDefaultsPlanningCmd();
  return *internal_default_instance();
}

PlanningCmd* PlanningCmd::New(::google::protobuf::Arena* arena) const {
  PlanningCmd* n = new PlanningCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanningCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_msgs.PlanningCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mission_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mission_command_) -
      reinterpret_cast<char*>(&mission_id_)) + sizeof(mission_command_));
  _internal_metadata_.Clear();
}

bool PlanningCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_msgs.PlanningCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 mission_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mission_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mission_command = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_msgs.PlanningCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_msgs.PlanningCmd)
  return false;
#undef DO_
}

void PlanningCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_msgs.PlanningCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mission_id = 1;
  if (this->mission_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mission_id(), output);
  }

  // int32 mission_type = 2;
  if (this->mission_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mission_type(), output);
  }

  // int32 mission_command = 3;
  if (this->mission_command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mission_command(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_msgs.PlanningCmd)
}

::google::protobuf::uint8* PlanningCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_msgs.PlanningCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mission_id = 1;
  if (this->mission_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mission_id(), target);
  }

  // int32 mission_type = 2;
  if (this->mission_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mission_type(), target);
  }

  // int32 mission_command = 3;
  if (this->mission_command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mission_command(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_msgs.PlanningCmd)
  return target;
}

size_t PlanningCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_msgs.PlanningCmd)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 mission_id = 1;
  if (this->mission_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mission_id());
  }

  // int32 mission_type = 2;
  if (this->mission_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mission_type());
  }

  // int32 mission_command = 3;
  if (this->mission_command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mission_command());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_msgs.PlanningCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_msgs.PlanningCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_msgs.PlanningCmd)
    MergeFrom(*source);
  }
}

void PlanningCmd::MergeFrom(const PlanningCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_msgs.PlanningCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mission_id() != 0) {
    set_mission_id(from.mission_id());
  }
  if (from.mission_type() != 0) {
    set_mission_type(from.mission_type());
  }
  if (from.mission_command() != 0) {
    set_mission_command(from.mission_command());
  }
}

void PlanningCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_msgs.PlanningCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningCmd::CopyFrom(const PlanningCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_msgs.PlanningCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningCmd::IsInitialized() const {
  return true;
}

void PlanningCmd::Swap(PlanningCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningCmd::InternalSwap(PlanningCmd* other) {
  using std::swap;
  swap(mission_id_, other->mission_id_);
  swap(mission_type_, other->mission_type_);
  swap(mission_command_, other->mission_command_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanningCmd::GetMetadata() const {
  protobuf_planning_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BehaviorLimitCmd::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BehaviorLimitCmd::kSpeedLimitFieldNumber;
const int BehaviorLimitCmd::kBrakeCmdFieldNumber;
const int BehaviorLimitCmd::kLaneChangeCmdFieldNumber;
const int BehaviorLimitCmd::kBehaviorlimitFieldNumber;
const int BehaviorLimitCmd::kBehaviorexecutethresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BehaviorLimitCmd::BehaviorLimitCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fmsgs_2eproto::InitDefaultsBehaviorLimitCmd();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_msgs.BehaviorLimitCmd)
}
BehaviorLimitCmd::BehaviorLimitCmd(const BehaviorLimitCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      behaviorlimit_(from.behaviorlimit_),
      behaviorexecutethreshold_(from.behaviorexecutethreshold_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_limit_, &from.speed_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_change_cmd_) -
    reinterpret_cast<char*>(&speed_limit_)) + sizeof(lane_change_cmd_));
  // @@protoc_insertion_point(copy_constructor:planning_msgs.BehaviorLimitCmd)
}

void BehaviorLimitCmd::SharedCtor() {
  ::memset(&speed_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_change_cmd_) -
      reinterpret_cast<char*>(&speed_limit_)) + sizeof(lane_change_cmd_));
  _cached_size_ = 0;
}

BehaviorLimitCmd::~BehaviorLimitCmd() {
  // @@protoc_insertion_point(destructor:planning_msgs.BehaviorLimitCmd)
  SharedDtor();
}

void BehaviorLimitCmd::SharedDtor() {
}

void BehaviorLimitCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BehaviorLimitCmd::descriptor() {
  ::protobuf_planning_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BehaviorLimitCmd& BehaviorLimitCmd::default_instance() {
  ::protobuf_planning_5fmsgs_2eproto::InitDefaultsBehaviorLimitCmd();
  return *internal_default_instance();
}

BehaviorLimitCmd* BehaviorLimitCmd::New(::google::protobuf::Arena* arena) const {
  BehaviorLimitCmd* n = new BehaviorLimitCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BehaviorLimitCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_msgs.BehaviorLimitCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  behaviorlimit_.Clear();
  behaviorexecutethreshold_.Clear();
  ::memset(&speed_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_change_cmd_) -
      reinterpret_cast<char*>(&speed_limit_)) + sizeof(lane_change_cmd_));
  _internal_metadata_.Clear();
}

bool BehaviorLimitCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_msgs.BehaviorLimitCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float speed_limit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 brake_cmd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &brake_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lane_change_cmd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_change_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 behaviorlimit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_behaviorlimit())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_behaviorlimit())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 behaviorexecutethreshold = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_behaviorexecutethreshold())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_behaviorexecutethreshold())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_msgs.BehaviorLimitCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_msgs.BehaviorLimitCmd)
  return false;
#undef DO_
}

void BehaviorLimitCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_msgs.BehaviorLimitCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float speed_limit = 1;
  if (this->speed_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->speed_limit(), output);
  }

  // uint32 brake_cmd = 2;
  if (this->brake_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->brake_cmd(), output);
  }

  // uint32 lane_change_cmd = 3;
  if (this->lane_change_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lane_change_cmd(), output);
  }

  // repeated int32 behaviorlimit = 4;
  if (this->behaviorlimit_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _behaviorlimit_cached_byte_size_));
  }
  for (int i = 0, n = this->behaviorlimit_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->behaviorlimit(i), output);
  }

  // repeated int32 behaviorexecutethreshold = 5;
  if (this->behaviorexecutethreshold_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _behaviorexecutethreshold_cached_byte_size_));
  }
  for (int i = 0, n = this->behaviorexecutethreshold_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->behaviorexecutethreshold(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_msgs.BehaviorLimitCmd)
}

::google::protobuf::uint8* BehaviorLimitCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_msgs.BehaviorLimitCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float speed_limit = 1;
  if (this->speed_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->speed_limit(), target);
  }

  // uint32 brake_cmd = 2;
  if (this->brake_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->brake_cmd(), target);
  }

  // uint32 lane_change_cmd = 3;
  if (this->lane_change_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lane_change_cmd(), target);
  }

  // repeated int32 behaviorlimit = 4;
  if (this->behaviorlimit_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _behaviorlimit_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->behaviorlimit_, target);
  }

  // repeated int32 behaviorexecutethreshold = 5;
  if (this->behaviorexecutethreshold_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _behaviorexecutethreshold_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->behaviorexecutethreshold_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_msgs.BehaviorLimitCmd)
  return target;
}

size_t BehaviorLimitCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_msgs.BehaviorLimitCmd)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 behaviorlimit = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->behaviorlimit_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _behaviorlimit_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 behaviorexecutethreshold = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->behaviorexecutethreshold_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _behaviorexecutethreshold_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // float speed_limit = 1;
  if (this->speed_limit() != 0) {
    total_size += 1 + 4;
  }

  // uint32 brake_cmd = 2;
  if (this->brake_cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->brake_cmd());
  }

  // uint32 lane_change_cmd = 3;
  if (this->lane_change_cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lane_change_cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BehaviorLimitCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_msgs.BehaviorLimitCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const BehaviorLimitCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BehaviorLimitCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_msgs.BehaviorLimitCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_msgs.BehaviorLimitCmd)
    MergeFrom(*source);
  }
}

void BehaviorLimitCmd::MergeFrom(const BehaviorLimitCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_msgs.BehaviorLimitCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  behaviorlimit_.MergeFrom(from.behaviorlimit_);
  behaviorexecutethreshold_.MergeFrom(from.behaviorexecutethreshold_);
  if (from.speed_limit() != 0) {
    set_speed_limit(from.speed_limit());
  }
  if (from.brake_cmd() != 0) {
    set_brake_cmd(from.brake_cmd());
  }
  if (from.lane_change_cmd() != 0) {
    set_lane_change_cmd(from.lane_change_cmd());
  }
}

void BehaviorLimitCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_msgs.BehaviorLimitCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BehaviorLimitCmd::CopyFrom(const BehaviorLimitCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_msgs.BehaviorLimitCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BehaviorLimitCmd::IsInitialized() const {
  return true;
}

void BehaviorLimitCmd::Swap(BehaviorLimitCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BehaviorLimitCmd::InternalSwap(BehaviorLimitCmd* other) {
  using std::swap;
  behaviorlimit_.InternalSwap(&other->behaviorlimit_);
  behaviorexecutethreshold_.InternalSwap(&other->behaviorexecutethreshold_);
  swap(speed_limit_, other->speed_limit_);
  swap(brake_cmd_, other->brake_cmd_);
  swap(lane_change_cmd_, other->lane_change_cmd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BehaviorLimitCmd::GetMetadata() const {
  protobuf_planning_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlanningResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningResult::kResultFieldNumber;
const int PlanningResult::kAdditionMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningResult::PlanningResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fmsgs_2eproto::InitDefaultsPlanningResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_msgs.PlanningResult)
}
PlanningResult::PlanningResult(const PlanningResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addition_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addition_message().size() > 0) {
    addition_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addition_message_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:planning_msgs.PlanningResult)
}

void PlanningResult::SharedCtor() {
  addition_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _cached_size_ = 0;
}

PlanningResult::~PlanningResult() {
  // @@protoc_insertion_point(destructor:planning_msgs.PlanningResult)
  SharedDtor();
}

void PlanningResult::SharedDtor() {
  addition_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlanningResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningResult::descriptor() {
  ::protobuf_planning_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanningResult& PlanningResult::default_instance() {
  ::protobuf_planning_5fmsgs_2eproto::InitDefaultsPlanningResult();
  return *internal_default_instance();
}

PlanningResult* PlanningResult::New(::google::protobuf::Arena* arena) const {
  PlanningResult* n = new PlanningResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanningResult::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_msgs.PlanningResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addition_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

bool PlanningResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_msgs.PlanningResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string addition_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addition_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addition_message().data(), static_cast<int>(this->addition_message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_msgs.PlanningResult.addition_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_msgs.PlanningResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_msgs.PlanningResult)
  return false;
#undef DO_
}

void PlanningResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_msgs.PlanningResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // string addition_message = 2;
  if (this->addition_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addition_message().data(), static_cast<int>(this->addition_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_msgs.PlanningResult.addition_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->addition_message(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_msgs.PlanningResult)
}

::google::protobuf::uint8* PlanningResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_msgs.PlanningResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // string addition_message = 2;
  if (this->addition_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addition_message().data(), static_cast<int>(this->addition_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_msgs.PlanningResult.addition_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addition_message(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_msgs.PlanningResult)
  return target;
}

size_t PlanningResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_msgs.PlanningResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string addition_message = 2;
  if (this->addition_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addition_message());
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_msgs.PlanningResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_msgs.PlanningResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_msgs.PlanningResult)
    MergeFrom(*source);
  }
}

void PlanningResult::MergeFrom(const PlanningResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_msgs.PlanningResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addition_message().size() > 0) {

    addition_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addition_message_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void PlanningResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_msgs.PlanningResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningResult::CopyFrom(const PlanningResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_msgs.PlanningResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningResult::IsInitialized() const {
  return true;
}

void PlanningResult::Swap(PlanningResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningResult::InternalSwap(PlanningResult* other) {
  using std::swap;
  addition_message_.Swap(&other->addition_message_);
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanningResult::GetMetadata() const {
  protobuf_planning_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Integer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Integer::kInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Integer::Integer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fmsgs_2eproto::InitDefaultsInteger();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_msgs.Integer)
}
Integer::Integer(const Integer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_ = from.input_;
  // @@protoc_insertion_point(copy_constructor:planning_msgs.Integer)
}

void Integer::SharedCtor() {
  input_ = 0u;
  _cached_size_ = 0;
}

Integer::~Integer() {
  // @@protoc_insertion_point(destructor:planning_msgs.Integer)
  SharedDtor();
}

void Integer::SharedDtor() {
}

void Integer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Integer::descriptor() {
  ::protobuf_planning_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Integer& Integer::default_instance() {
  ::protobuf_planning_5fmsgs_2eproto::InitDefaultsInteger();
  return *internal_default_instance();
}

Integer* Integer::New(::google::protobuf::Arena* arena) const {
  Integer* n = new Integer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Integer::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_msgs.Integer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_ = 0u;
  _internal_metadata_.Clear();
}

bool Integer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_msgs.Integer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 input = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_msgs.Integer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_msgs.Integer)
  return false;
#undef DO_
}

void Integer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_msgs.Integer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 input = 1;
  if (this->input() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->input(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_msgs.Integer)
}

::google::protobuf::uint8* Integer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_msgs.Integer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 input = 1;
  if (this->input() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->input(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_msgs.Integer)
  return target;
}

size_t Integer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_msgs.Integer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 input = 1;
  if (this->input() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->input());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Integer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_msgs.Integer)
  GOOGLE_DCHECK_NE(&from, this);
  const Integer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Integer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_msgs.Integer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_msgs.Integer)
    MergeFrom(*source);
  }
}

void Integer::MergeFrom(const Integer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_msgs.Integer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input() != 0) {
    set_input(from.input());
  }
}

void Integer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_msgs.Integer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Integer::CopyFrom(const Integer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_msgs.Integer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Integer::IsInitialized() const {
  return true;
}

void Integer::Swap(Integer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Integer::InternalSwap(Integer* other) {
  using std::swap;
  swap(input_, other->input_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Integer::GetMetadata() const {
  protobuf_planning_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlanningStatus::InitAsDefaultInstance() {
  ::planning_msgs::_PlanningStatus_default_instance_._instance.get_mutable()->lane_change_feedback_ = const_cast< ::planning_msgs::PlanningResult*>(
      ::planning_msgs::PlanningResult::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningStatus::kStatusFieldNumber;
const int PlanningStatus::kMissionIdFieldNumber;
const int PlanningStatus::kMissionTypeFieldNumber;
const int PlanningStatus::kSpeedLimitFieldNumber;
const int PlanningStatus::kBrakeStatusFieldNumber;
const int PlanningStatus::kLaneChangeStatusFieldNumber;
const int PlanningStatus::kLaneChangeFeedbackFieldNumber;
const int PlanningStatus::kBehaviorlimitFieldNumber;
const int PlanningStatus::kBehaviorexecutethresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningStatus::PlanningStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fmsgs_2eproto::InitDefaultsPlanningStatus();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_msgs.PlanningStatus)
}
PlanningStatus::PlanningStatus(const PlanningStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      behaviorlimit_(from.behaviorlimit_),
      behaviorexecutethreshold_(from.behaviorexecutethreshold_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lane_change_feedback()) {
    lane_change_feedback_ = new ::planning_msgs::PlanningResult(*from.lane_change_feedback_);
  } else {
    lane_change_feedback_ = NULL;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_change_status_) -
    reinterpret_cast<char*>(&status_)) + sizeof(lane_change_status_));
  // @@protoc_insertion_point(copy_constructor:planning_msgs.PlanningStatus)
}

void PlanningStatus::SharedCtor() {
  ::memset(&lane_change_feedback_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_change_status_) -
      reinterpret_cast<char*>(&lane_change_feedback_)) + sizeof(lane_change_status_));
  _cached_size_ = 0;
}

PlanningStatus::~PlanningStatus() {
  // @@protoc_insertion_point(destructor:planning_msgs.PlanningStatus)
  SharedDtor();
}

void PlanningStatus::SharedDtor() {
  if (this != internal_default_instance()) delete lane_change_feedback_;
}

void PlanningStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningStatus::descriptor() {
  ::protobuf_planning_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanningStatus& PlanningStatus::default_instance() {
  ::protobuf_planning_5fmsgs_2eproto::InitDefaultsPlanningStatus();
  return *internal_default_instance();
}

PlanningStatus* PlanningStatus::New(::google::protobuf::Arena* arena) const {
  PlanningStatus* n = new PlanningStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanningStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_msgs.PlanningStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  behaviorlimit_.Clear();
  behaviorexecutethreshold_.Clear();
  if (GetArenaNoVirtual() == NULL && lane_change_feedback_ != NULL) {
    delete lane_change_feedback_;
  }
  lane_change_feedback_ = NULL;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_change_status_) -
      reinterpret_cast<char*>(&status_)) + sizeof(lane_change_status_));
  _internal_metadata_.Clear();
}

bool PlanningStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_msgs.PlanningStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mission_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mission_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 brake_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brake_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_change_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_change_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_msgs.PlanningResult lane_change_feedback = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_change_feedback()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 behaviorlimit = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_behaviorlimit())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66u, input, this->mutable_behaviorlimit())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 behaviorexecutethreshold = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_behaviorexecutethreshold())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74u, input, this->mutable_behaviorexecutethreshold())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_msgs.PlanningStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_msgs.PlanningStatus)
  return false;
#undef DO_
}

void PlanningStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_msgs.PlanningStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // int32 mission_id = 2;
  if (this->mission_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mission_id(), output);
  }

  // int32 mission_type = 3;
  if (this->mission_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mission_type(), output);
  }

  // float speed_limit = 4;
  if (this->speed_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->speed_limit(), output);
  }

  // int32 brake_status = 5;
  if (this->brake_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->brake_status(), output);
  }

  // int32 lane_change_status = 6;
  if (this->lane_change_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lane_change_status(), output);
  }

  // .planning_msgs.PlanningResult lane_change_feedback = 7;
  if (this->has_lane_change_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->lane_change_feedback_, output);
  }

  // repeated int32 behaviorlimit = 8;
  if (this->behaviorlimit_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _behaviorlimit_cached_byte_size_));
  }
  for (int i = 0, n = this->behaviorlimit_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->behaviorlimit(i), output);
  }

  // repeated int32 behaviorexecutethreshold = 9;
  if (this->behaviorexecutethreshold_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _behaviorexecutethreshold_cached_byte_size_));
  }
  for (int i = 0, n = this->behaviorexecutethreshold_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->behaviorexecutethreshold(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_msgs.PlanningStatus)
}

::google::protobuf::uint8* PlanningStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_msgs.PlanningStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // int32 mission_id = 2;
  if (this->mission_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mission_id(), target);
  }

  // int32 mission_type = 3;
  if (this->mission_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mission_type(), target);
  }

  // float speed_limit = 4;
  if (this->speed_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->speed_limit(), target);
  }

  // int32 brake_status = 5;
  if (this->brake_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->brake_status(), target);
  }

  // int32 lane_change_status = 6;
  if (this->lane_change_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lane_change_status(), target);
  }

  // .planning_msgs.PlanningResult lane_change_feedback = 7;
  if (this->has_lane_change_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->lane_change_feedback_, deterministic, target);
  }

  // repeated int32 behaviorlimit = 8;
  if (this->behaviorlimit_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _behaviorlimit_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->behaviorlimit_, target);
  }

  // repeated int32 behaviorexecutethreshold = 9;
  if (this->behaviorexecutethreshold_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _behaviorexecutethreshold_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->behaviorexecutethreshold_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_msgs.PlanningStatus)
  return target;
}

size_t PlanningStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_msgs.PlanningStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 behaviorlimit = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->behaviorlimit_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _behaviorlimit_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 behaviorexecutethreshold = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->behaviorexecutethreshold_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _behaviorexecutethreshold_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .planning_msgs.PlanningResult lane_change_feedback = 7;
  if (this->has_lane_change_feedback()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lane_change_feedback_);
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // int32 mission_id = 2;
  if (this->mission_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mission_id());
  }

  // int32 mission_type = 3;
  if (this->mission_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mission_type());
  }

  // float speed_limit = 4;
  if (this->speed_limit() != 0) {
    total_size += 1 + 4;
  }

  // int32 brake_status = 5;
  if (this->brake_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brake_status());
  }

  // int32 lane_change_status = 6;
  if (this->lane_change_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_change_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_msgs.PlanningStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_msgs.PlanningStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_msgs.PlanningStatus)
    MergeFrom(*source);
  }
}

void PlanningStatus::MergeFrom(const PlanningStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_msgs.PlanningStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  behaviorlimit_.MergeFrom(from.behaviorlimit_);
  behaviorexecutethreshold_.MergeFrom(from.behaviorexecutethreshold_);
  if (from.has_lane_change_feedback()) {
    mutable_lane_change_feedback()->::planning_msgs::PlanningResult::MergeFrom(from.lane_change_feedback());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.mission_id() != 0) {
    set_mission_id(from.mission_id());
  }
  if (from.mission_type() != 0) {
    set_mission_type(from.mission_type());
  }
  if (from.speed_limit() != 0) {
    set_speed_limit(from.speed_limit());
  }
  if (from.brake_status() != 0) {
    set_brake_status(from.brake_status());
  }
  if (from.lane_change_status() != 0) {
    set_lane_change_status(from.lane_change_status());
  }
}

void PlanningStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_msgs.PlanningStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningStatus::CopyFrom(const PlanningStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_msgs.PlanningStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningStatus::IsInitialized() const {
  return true;
}

void PlanningStatus::Swap(PlanningStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningStatus::InternalSwap(PlanningStatus* other) {
  using std::swap;
  behaviorlimit_.InternalSwap(&other->behaviorlimit_);
  behaviorexecutethreshold_.InternalSwap(&other->behaviorexecutethreshold_);
  swap(lane_change_feedback_, other->lane_change_feedback_);
  swap(status_, other->status_);
  swap(mission_id_, other->mission_id_);
  swap(mission_type_, other->mission_type_);
  swap(speed_limit_, other->speed_limit_);
  swap(brake_status_, other->brake_status_);
  swap(lane_change_status_, other->lane_change_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanningStatus::GetMetadata() const {
  protobuf_planning_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrajectoryPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryPoint::kXFieldNumber;
const int TrajectoryPoint::kYFieldNumber;
const int TrajectoryPoint::kXgFieldNumber;
const int TrajectoryPoint::kYgFieldNumber;
const int TrajectoryPoint::kXgDrFieldNumber;
const int TrajectoryPoint::kYgDrFieldNumber;
const int TrajectoryPoint::kAngleFieldNumber;
const int TrajectoryPoint::kAngleglobalFieldNumber;
const int TrajectoryPoint::kAngleglobalDrFieldNumber;
const int TrajectoryPoint::kVelocityFieldNumber;
const int TrajectoryPoint::kAFieldNumber;
const int TrajectoryPoint::kTFieldNumber;
const int TrajectoryPoint::kCurvatureFieldNumber;
const int TrajectoryPoint::kLengthFieldNumber;
const int TrajectoryPoint::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryPoint::TrajectoryPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fmsgs_2eproto::InitDefaultsTrajectoryPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_msgs.TrajectoryPoint)
}
TrajectoryPoint::TrajectoryPoint(const TrajectoryPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&x_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:planning_msgs.TrajectoryPoint)
}

void TrajectoryPoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&x_)) + sizeof(direction_));
  _cached_size_ = 0;
}

TrajectoryPoint::~TrajectoryPoint() {
  // @@protoc_insertion_point(destructor:planning_msgs.TrajectoryPoint)
  SharedDtor();
}

void TrajectoryPoint::SharedDtor() {
}

void TrajectoryPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryPoint::descriptor() {
  ::protobuf_planning_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryPoint& TrajectoryPoint::default_instance() {
  ::protobuf_planning_5fmsgs_2eproto::InitDefaultsTrajectoryPoint();
  return *internal_default_instance();
}

TrajectoryPoint* TrajectoryPoint::New(::google::protobuf::Arena* arena) const {
  TrajectoryPoint* n = new TrajectoryPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_msgs.TrajectoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&x_)) + sizeof(direction_));
  _internal_metadata_.Clear();
}

bool TrajectoryPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_msgs.TrajectoryPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double xg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double xg_dr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xg_dr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yg_dr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yg_dr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angleglobal = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angleglobal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angleglobal_dr = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angleglobal_dr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float velocity = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float a = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float t = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float curvature = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 direction = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_msgs.TrajectoryPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_msgs.TrajectoryPoint)
  return false;
#undef DO_
}

void TrajectoryPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_msgs.TrajectoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // double xg = 3;
  if (this->xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->xg(), output);
  }

  // double yg = 4;
  if (this->yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->yg(), output);
  }

  // double xg_dr = 5;
  if (this->xg_dr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->xg_dr(), output);
  }

  // double yg_dr = 6;
  if (this->yg_dr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->yg_dr(), output);
  }

  // float angle = 7;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->angle(), output);
  }

  // float angleglobal = 8;
  if (this->angleglobal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->angleglobal(), output);
  }

  // float angleglobal_dr = 9;
  if (this->angleglobal_dr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->angleglobal_dr(), output);
  }

  // float velocity = 10;
  if (this->velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->velocity(), output);
  }

  // float a = 11;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->a(), output);
  }

  // float t = 12;
  if (this->t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->t(), output);
  }

  // float curvature = 13;
  if (this->curvature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->curvature(), output);
  }

  // float length = 14;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->length(), output);
  }

  // int32 direction = 15;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->direction(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_msgs.TrajectoryPoint)
}

::google::protobuf::uint8* TrajectoryPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_msgs.TrajectoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // double xg = 3;
  if (this->xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->xg(), target);
  }

  // double yg = 4;
  if (this->yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->yg(), target);
  }

  // double xg_dr = 5;
  if (this->xg_dr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->xg_dr(), target);
  }

  // double yg_dr = 6;
  if (this->yg_dr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->yg_dr(), target);
  }

  // float angle = 7;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->angle(), target);
  }

  // float angleglobal = 8;
  if (this->angleglobal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->angleglobal(), target);
  }

  // float angleglobal_dr = 9;
  if (this->angleglobal_dr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->angleglobal_dr(), target);
  }

  // float velocity = 10;
  if (this->velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->velocity(), target);
  }

  // float a = 11;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->a(), target);
  }

  // float t = 12;
  if (this->t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->t(), target);
  }

  // float curvature = 13;
  if (this->curvature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->curvature(), target);
  }

  // float length = 14;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->length(), target);
  }

  // int32 direction = 15;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->direction(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_msgs.TrajectoryPoint)
  return target;
}

size_t TrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_msgs.TrajectoryPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // double xg = 3;
  if (this->xg() != 0) {
    total_size += 1 + 8;
  }

  // double yg = 4;
  if (this->yg() != 0) {
    total_size += 1 + 8;
  }

  // double xg_dr = 5;
  if (this->xg_dr() != 0) {
    total_size += 1 + 8;
  }

  // double yg_dr = 6;
  if (this->yg_dr() != 0) {
    total_size += 1 + 8;
  }

  // float angle = 7;
  if (this->angle() != 0) {
    total_size += 1 + 4;
  }

  // float angleglobal = 8;
  if (this->angleglobal() != 0) {
    total_size += 1 + 4;
  }

  // float angleglobal_dr = 9;
  if (this->angleglobal_dr() != 0) {
    total_size += 1 + 4;
  }

  // float velocity = 10;
  if (this->velocity() != 0) {
    total_size += 1 + 4;
  }

  // float a = 11;
  if (this->a() != 0) {
    total_size += 1 + 4;
  }

  // float t = 12;
  if (this->t() != 0) {
    total_size += 1 + 4;
  }

  // float curvature = 13;
  if (this->curvature() != 0) {
    total_size += 1 + 4;
  }

  // float length = 14;
  if (this->length() != 0) {
    total_size += 1 + 4;
  }

  // int32 direction = 15;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_msgs.TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_msgs.TrajectoryPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_msgs.TrajectoryPoint)
    MergeFrom(*source);
  }
}

void TrajectoryPoint::MergeFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_msgs.TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.xg() != 0) {
    set_xg(from.xg());
  }
  if (from.yg() != 0) {
    set_yg(from.yg());
  }
  if (from.xg_dr() != 0) {
    set_xg_dr(from.xg_dr());
  }
  if (from.yg_dr() != 0) {
    set_yg_dr(from.yg_dr());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
  if (from.angleglobal() != 0) {
    set_angleglobal(from.angleglobal());
  }
  if (from.angleglobal_dr() != 0) {
    set_angleglobal_dr(from.angleglobal_dr());
  }
  if (from.velocity() != 0) {
    set_velocity(from.velocity());
  }
  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.t() != 0) {
    set_t(from.t());
  }
  if (from.curvature() != 0) {
    set_curvature(from.curvature());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
}

void TrajectoryPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_msgs.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPoint::CopyFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_msgs.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPoint::IsInitialized() const {
  return true;
}

void TrajectoryPoint::Swap(TrajectoryPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryPoint::InternalSwap(TrajectoryPoint* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(xg_, other->xg_);
  swap(yg_, other->yg_);
  swap(xg_dr_, other->xg_dr_);
  swap(yg_dr_, other->yg_dr_);
  swap(angle_, other->angle_);
  swap(angleglobal_, other->angleglobal_);
  swap(angleglobal_dr_, other->angleglobal_dr_);
  swap(velocity_, other->velocity_);
  swap(a_, other->a_);
  swap(t_, other->t_);
  swap(curvature_, other->curvature_);
  swap(length_, other->length_);
  swap(direction_, other->direction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryPoint::GetMetadata() const {
  protobuf_planning_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImuInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImuInfo::kTimeStampFieldNumber;
const int ImuInfo::kXgFieldNumber;
const int ImuInfo::kYgFieldNumber;
const int ImuInfo::kYawFieldNumber;
const int ImuInfo::kVelocityFieldNumber;
const int ImuInfo::kVxFieldNumber;
const int ImuInfo::kVyFieldNumber;
const int ImuInfo::kLocXgDrFieldNumber;
const int ImuInfo::kLocYgDrFieldNumber;
const int ImuInfo::kLocYawDrFieldNumber;
const int ImuInfo::kCorrectionFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImuInfo::ImuInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fmsgs_2eproto::InitDefaultsImuInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_msgs.ImuInfo)
}
ImuInfo::ImuInfo(const ImuInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&correction_flag_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(correction_flag_));
  // @@protoc_insertion_point(copy_constructor:planning_msgs.ImuInfo)
}

void ImuInfo::SharedCtor() {
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&correction_flag_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(correction_flag_));
  _cached_size_ = 0;
}

ImuInfo::~ImuInfo() {
  // @@protoc_insertion_point(destructor:planning_msgs.ImuInfo)
  SharedDtor();
}

void ImuInfo::SharedDtor() {
}

void ImuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImuInfo::descriptor() {
  ::protobuf_planning_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImuInfo& ImuInfo::default_instance() {
  ::protobuf_planning_5fmsgs_2eproto::InitDefaultsImuInfo();
  return *internal_default_instance();
}

ImuInfo* ImuInfo::New(::google::protobuf::Arena* arena) const {
  ImuInfo* n = new ImuInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImuInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_msgs.ImuInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&correction_flag_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(correction_flag_));
  _internal_metadata_.Clear();
}

bool ImuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_msgs.ImuInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double time_stamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double xg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double velocity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vx = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vy = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double loc_xg_dr = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loc_xg_dr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double loc_yg_dr = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loc_yg_dr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double loc_yaw_dr = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loc_yaw_dr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool correction_flag = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &correction_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_msgs.ImuInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_msgs.ImuInfo)
  return false;
#undef DO_
}

void ImuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_msgs.ImuInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_stamp = 1;
  if (this->time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time_stamp(), output);
  }

  // double xg = 2;
  if (this->xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->xg(), output);
  }

  // double yg = 3;
  if (this->yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->yg(), output);
  }

  // double yaw = 4;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->yaw(), output);
  }

  // double velocity = 5;
  if (this->velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->velocity(), output);
  }

  // double vx = 6;
  if (this->vx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->vx(), output);
  }

  // double vy = 7;
  if (this->vy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->vy(), output);
  }

  // double loc_xg_dr = 8;
  if (this->loc_xg_dr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->loc_xg_dr(), output);
  }

  // double loc_yg_dr = 9;
  if (this->loc_yg_dr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->loc_yg_dr(), output);
  }

  // double loc_yaw_dr = 10;
  if (this->loc_yaw_dr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->loc_yaw_dr(), output);
  }

  // bool correction_flag = 11;
  if (this->correction_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->correction_flag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_msgs.ImuInfo)
}

::google::protobuf::uint8* ImuInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_msgs.ImuInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_stamp = 1;
  if (this->time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time_stamp(), target);
  }

  // double xg = 2;
  if (this->xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->xg(), target);
  }

  // double yg = 3;
  if (this->yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->yg(), target);
  }

  // double yaw = 4;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->yaw(), target);
  }

  // double velocity = 5;
  if (this->velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->velocity(), target);
  }

  // double vx = 6;
  if (this->vx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->vx(), target);
  }

  // double vy = 7;
  if (this->vy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->vy(), target);
  }

  // double loc_xg_dr = 8;
  if (this->loc_xg_dr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->loc_xg_dr(), target);
  }

  // double loc_yg_dr = 9;
  if (this->loc_yg_dr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->loc_yg_dr(), target);
  }

  // double loc_yaw_dr = 10;
  if (this->loc_yaw_dr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->loc_yaw_dr(), target);
  }

  // bool correction_flag = 11;
  if (this->correction_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->correction_flag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_msgs.ImuInfo)
  return target;
}

size_t ImuInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_msgs.ImuInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double time_stamp = 1;
  if (this->time_stamp() != 0) {
    total_size += 1 + 8;
  }

  // double xg = 2;
  if (this->xg() != 0) {
    total_size += 1 + 8;
  }

  // double yg = 3;
  if (this->yg() != 0) {
    total_size += 1 + 8;
  }

  // double yaw = 4;
  if (this->yaw() != 0) {
    total_size += 1 + 8;
  }

  // double velocity = 5;
  if (this->velocity() != 0) {
    total_size += 1 + 8;
  }

  // double vx = 6;
  if (this->vx() != 0) {
    total_size += 1 + 8;
  }

  // double vy = 7;
  if (this->vy() != 0) {
    total_size += 1 + 8;
  }

  // double loc_xg_dr = 8;
  if (this->loc_xg_dr() != 0) {
    total_size += 1 + 8;
  }

  // double loc_yg_dr = 9;
  if (this->loc_yg_dr() != 0) {
    total_size += 1 + 8;
  }

  // double loc_yaw_dr = 10;
  if (this->loc_yaw_dr() != 0) {
    total_size += 1 + 8;
  }

  // bool correction_flag = 11;
  if (this->correction_flag() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImuInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_msgs.ImuInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImuInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_msgs.ImuInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_msgs.ImuInfo)
    MergeFrom(*source);
  }
}

void ImuInfo::MergeFrom(const ImuInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_msgs.ImuInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time_stamp() != 0) {
    set_time_stamp(from.time_stamp());
  }
  if (from.xg() != 0) {
    set_xg(from.xg());
  }
  if (from.yg() != 0) {
    set_yg(from.yg());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.velocity() != 0) {
    set_velocity(from.velocity());
  }
  if (from.vx() != 0) {
    set_vx(from.vx());
  }
  if (from.vy() != 0) {
    set_vy(from.vy());
  }
  if (from.loc_xg_dr() != 0) {
    set_loc_xg_dr(from.loc_xg_dr());
  }
  if (from.loc_yg_dr() != 0) {
    set_loc_yg_dr(from.loc_yg_dr());
  }
  if (from.loc_yaw_dr() != 0) {
    set_loc_yaw_dr(from.loc_yaw_dr());
  }
  if (from.correction_flag() != 0) {
    set_correction_flag(from.correction_flag());
  }
}

void ImuInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_msgs.ImuInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuInfo::CopyFrom(const ImuInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_msgs.ImuInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuInfo::IsInitialized() const {
  return true;
}

void ImuInfo::Swap(ImuInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImuInfo::InternalSwap(ImuInfo* other) {
  using std::swap;
  swap(time_stamp_, other->time_stamp_);
  swap(xg_, other->xg_);
  swap(yg_, other->yg_);
  swap(yaw_, other->yaw_);
  swap(velocity_, other->velocity_);
  swap(vx_, other->vx_);
  swap(vy_, other->vy_);
  swap(loc_xg_dr_, other->loc_xg_dr_);
  swap(loc_yg_dr_, other->loc_yg_dr_);
  swap(loc_yaw_dr_, other->loc_yaw_dr_);
  swap(correction_flag_, other->correction_flag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImuInfo::GetMetadata() const {
  protobuf_planning_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BusinessFeedback::InitAsDefaultInstance() {
  ::planning_msgs::_BusinessFeedback_default_instance_._instance.get_mutable()->header_ = const_cast< ::common_msgs::Header*>(
      ::common_msgs::Header::internal_default_instance());
  ::planning_msgs::_BusinessFeedback_default_instance_._instance.get_mutable()->business_ = const_cast< ::planning_msgs::Business*>(
      ::planning_msgs::Business::internal_default_instance());
}
void BusinessFeedback::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BusinessFeedback::kHeaderFieldNumber;
const int BusinessFeedback::kBusinessFieldNumber;
const int BusinessFeedback::kReferenceLaneIdsFieldNumber;
const int BusinessFeedback::kReferenceTargetIdsFieldNumber;
const int BusinessFeedback::kDecisionIdFieldNumber;
const int BusinessFeedback::kPathInCurrentFieldNumber;
const int BusinessFeedback::kIsPassableFieldNumber;
const int BusinessFeedback::kPassableLaneIdsFieldNumber;
const int BusinessFeedback::kBlackRoadIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BusinessFeedback::BusinessFeedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fmsgs_2eproto::InitDefaultsBusinessFeedback();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_msgs.BusinessFeedback)
}
BusinessFeedback::BusinessFeedback(const BusinessFeedback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      reference_lane_ids_(from.reference_lane_ids_),
      reference_target_ids_(from.reference_target_ids_),
      passable_lane_ids_(from.passable_lane_ids_),
      black_road_ids_(from.black_road_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::common_msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_business()) {
    business_ = new ::planning_msgs::Business(*from.business_);
  } else {
    business_ = NULL;
  }
  ::memcpy(&decision_id_, &from.decision_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_passable_) -
    reinterpret_cast<char*>(&decision_id_)) + sizeof(is_passable_));
  // @@protoc_insertion_point(copy_constructor:planning_msgs.BusinessFeedback)
}

void BusinessFeedback::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_passable_) -
      reinterpret_cast<char*>(&header_)) + sizeof(is_passable_));
  _cached_size_ = 0;
}

BusinessFeedback::~BusinessFeedback() {
  // @@protoc_insertion_point(destructor:planning_msgs.BusinessFeedback)
  SharedDtor();
}

void BusinessFeedback::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete business_;
}

void BusinessFeedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BusinessFeedback::descriptor() {
  ::protobuf_planning_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BusinessFeedback& BusinessFeedback::default_instance() {
  ::protobuf_planning_5fmsgs_2eproto::InitDefaultsBusinessFeedback();
  return *internal_default_instance();
}

BusinessFeedback* BusinessFeedback::New(::google::protobuf::Arena* arena) const {
  BusinessFeedback* n = new BusinessFeedback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BusinessFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_msgs.BusinessFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_lane_ids_.Clear();
  reference_target_ids_.Clear();
  passable_lane_ids_.Clear();
  black_road_ids_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && business_ != NULL) {
    delete business_;
  }
  business_ = NULL;
  ::memset(&decision_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_passable_) -
      reinterpret_cast<char*>(&decision_id_)) + sizeof(is_passable_));
  _internal_metadata_.Clear();
}

bool BusinessFeedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_msgs.BusinessFeedback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common_msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_msgs.Business business = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_business()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string reference_lane_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_reference_lane_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_lane_ids(this->reference_lane_ids_size() - 1).data(),
            static_cast<int>(this->reference_lane_ids(this->reference_lane_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_msgs.BusinessFeedback.reference_lane_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string reference_target_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_reference_target_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_target_ids(this->reference_target_ids_size() - 1).data(),
            static_cast<int>(this->reference_target_ids(this->reference_target_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_msgs.BusinessFeedback.reference_target_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 decision_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decision_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool path_in_current = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &path_in_current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_passable = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string passable_lane_ids = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_passable_lane_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->passable_lane_ids(this->passable_lane_ids_size() - 1).data(),
            static_cast<int>(this->passable_lane_ids(this->passable_lane_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_msgs.BusinessFeedback.passable_lane_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string black_road_ids = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_black_road_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->black_road_ids(this->black_road_ids_size() - 1).data(),
            static_cast<int>(this->black_road_ids(this->black_road_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_msgs.BusinessFeedback.black_road_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_msgs.BusinessFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_msgs.BusinessFeedback)
  return false;
#undef DO_
}

void BusinessFeedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_msgs.BusinessFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .planning_msgs.Business business = 2;
  if (this->has_business()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->business_, output);
  }

  // repeated string reference_lane_ids = 3;
  for (int i = 0, n = this->reference_lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_lane_ids(i).data(), static_cast<int>(this->reference_lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_msgs.BusinessFeedback.reference_lane_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->reference_lane_ids(i), output);
  }

  // repeated string reference_target_ids = 4;
  for (int i = 0, n = this->reference_target_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_target_ids(i).data(), static_cast<int>(this->reference_target_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_msgs.BusinessFeedback.reference_target_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->reference_target_ids(i), output);
  }

  // int32 decision_id = 5;
  if (this->decision_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->decision_id(), output);
  }

  // bool path_in_current = 6;
  if (this->path_in_current() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->path_in_current(), output);
  }

  // bool is_passable = 7;
  if (this->is_passable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_passable(), output);
  }

  // repeated string passable_lane_ids = 8;
  for (int i = 0, n = this->passable_lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passable_lane_ids(i).data(), static_cast<int>(this->passable_lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_msgs.BusinessFeedback.passable_lane_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->passable_lane_ids(i), output);
  }

  // repeated string black_road_ids = 9;
  for (int i = 0, n = this->black_road_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->black_road_ids(i).data(), static_cast<int>(this->black_road_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_msgs.BusinessFeedback.black_road_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->black_road_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_msgs.BusinessFeedback)
}

::google::protobuf::uint8* BusinessFeedback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_msgs.BusinessFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .planning_msgs.Business business = 2;
  if (this->has_business()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->business_, deterministic, target);
  }

  // repeated string reference_lane_ids = 3;
  for (int i = 0, n = this->reference_lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_lane_ids(i).data(), static_cast<int>(this->reference_lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_msgs.BusinessFeedback.reference_lane_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->reference_lane_ids(i), target);
  }

  // repeated string reference_target_ids = 4;
  for (int i = 0, n = this->reference_target_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_target_ids(i).data(), static_cast<int>(this->reference_target_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_msgs.BusinessFeedback.reference_target_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->reference_target_ids(i), target);
  }

  // int32 decision_id = 5;
  if (this->decision_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->decision_id(), target);
  }

  // bool path_in_current = 6;
  if (this->path_in_current() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->path_in_current(), target);
  }

  // bool is_passable = 7;
  if (this->is_passable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_passable(), target);
  }

  // repeated string passable_lane_ids = 8;
  for (int i = 0, n = this->passable_lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passable_lane_ids(i).data(), static_cast<int>(this->passable_lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_msgs.BusinessFeedback.passable_lane_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->passable_lane_ids(i), target);
  }

  // repeated string black_road_ids = 9;
  for (int i = 0, n = this->black_road_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->black_road_ids(i).data(), static_cast<int>(this->black_road_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_msgs.BusinessFeedback.black_road_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->black_road_ids(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_msgs.BusinessFeedback)
  return target;
}

size_t BusinessFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_msgs.BusinessFeedback)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string reference_lane_ids = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->reference_lane_ids_size());
  for (int i = 0, n = this->reference_lane_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->reference_lane_ids(i));
  }

  // repeated string reference_target_ids = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->reference_target_ids_size());
  for (int i = 0, n = this->reference_target_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->reference_target_ids(i));
  }

  // repeated string passable_lane_ids = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->passable_lane_ids_size());
  for (int i = 0, n = this->passable_lane_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->passable_lane_ids(i));
  }

  // repeated string black_road_ids = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->black_road_ids_size());
  for (int i = 0, n = this->black_road_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->black_road_ids(i));
  }

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .planning_msgs.Business business = 2;
  if (this->has_business()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->business_);
  }

  // int32 decision_id = 5;
  if (this->decision_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->decision_id());
  }

  // bool path_in_current = 6;
  if (this->path_in_current() != 0) {
    total_size += 1 + 1;
  }

  // bool is_passable = 7;
  if (this->is_passable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BusinessFeedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_msgs.BusinessFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  const BusinessFeedback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BusinessFeedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_msgs.BusinessFeedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_msgs.BusinessFeedback)
    MergeFrom(*source);
  }
}

void BusinessFeedback::MergeFrom(const BusinessFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_msgs.BusinessFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reference_lane_ids_.MergeFrom(from.reference_lane_ids_);
  reference_target_ids_.MergeFrom(from.reference_target_ids_);
  passable_lane_ids_.MergeFrom(from.passable_lane_ids_);
  black_road_ids_.MergeFrom(from.black_road_ids_);
  if (from.has_header()) {
    mutable_header()->::common_msgs::Header::MergeFrom(from.header());
  }
  if (from.has_business()) {
    mutable_business()->::planning_msgs::Business::MergeFrom(from.business());
  }
  if (from.decision_id() != 0) {
    set_decision_id(from.decision_id());
  }
  if (from.path_in_current() != 0) {
    set_path_in_current(from.path_in_current());
  }
  if (from.is_passable() != 0) {
    set_is_passable(from.is_passable());
  }
}

void BusinessFeedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_msgs.BusinessFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusinessFeedback::CopyFrom(const BusinessFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_msgs.BusinessFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusinessFeedback::IsInitialized() const {
  return true;
}

void BusinessFeedback::Swap(BusinessFeedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BusinessFeedback::InternalSwap(BusinessFeedback* other) {
  using std::swap;
  reference_lane_ids_.InternalSwap(&other->reference_lane_ids_);
  reference_target_ids_.InternalSwap(&other->reference_target_ids_);
  passable_lane_ids_.InternalSwap(&other->passable_lane_ids_);
  black_road_ids_.InternalSwap(&other->black_road_ids_);
  swap(header_, other->header_);
  swap(business_, other->business_);
  swap(decision_id_, other->decision_id_);
  swap(path_in_current_, other->path_in_current_);
  swap(is_passable_, other->is_passable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BusinessFeedback::GetMetadata() const {
  protobuf_planning_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Business::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Business::kOrderreplyFieldNumber;
const int Business::kDirectionFieldNumber;
const int Business::kTurningFieldNumber;
const int Business::kDrivingStatusFieldNumber;
const int Business::kSpeedLimitFieldNumber;
const int Business::kImpassableFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Business::Business()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fmsgs_2eproto::InitDefaultsBusiness();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_msgs.Business)
}
Business::Business(const Business& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&orderreply_, &from.orderreply_,
    static_cast<size_t>(reinterpret_cast<char*>(&impassable_flag_) -
    reinterpret_cast<char*>(&orderreply_)) + sizeof(impassable_flag_));
  // @@protoc_insertion_point(copy_constructor:planning_msgs.Business)
}

void Business::SharedCtor() {
  ::memset(&orderreply_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&impassable_flag_) -
      reinterpret_cast<char*>(&orderreply_)) + sizeof(impassable_flag_));
  _cached_size_ = 0;
}

Business::~Business() {
  // @@protoc_insertion_point(destructor:planning_msgs.Business)
  SharedDtor();
}

void Business::SharedDtor() {
}

void Business::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Business::descriptor() {
  ::protobuf_planning_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Business& Business::default_instance() {
  ::protobuf_planning_5fmsgs_2eproto::InitDefaultsBusiness();
  return *internal_default_instance();
}

Business* Business::New(::google::protobuf::Arena* arena) const {
  Business* n = new Business;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Business::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_msgs.Business)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&orderreply_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&impassable_flag_) -
      reinterpret_cast<char*>(&orderreply_)) + sizeof(impassable_flag_));
  _internal_metadata_.Clear();
}

bool Business::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_msgs.Business)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 orderreply = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderreply_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 turning = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 driving_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &driving_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_limit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 impassable_flag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &impassable_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_msgs.Business)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_msgs.Business)
  return false;
#undef DO_
}

void Business::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_msgs.Business)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 orderreply = 1;
  if (this->orderreply() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->orderreply(), output);
  }

  // uint32 direction = 2;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->direction(), output);
  }

  // int32 turning = 3;
  if (this->turning() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->turning(), output);
  }

  // int32 driving_status = 4;
  if (this->driving_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->driving_status(), output);
  }

  // float speed_limit = 5;
  if (this->speed_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed_limit(), output);
  }

  // int32 impassable_flag = 6;
  if (this->impassable_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->impassable_flag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_msgs.Business)
}

::google::protobuf::uint8* Business::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_msgs.Business)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 orderreply = 1;
  if (this->orderreply() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->orderreply(), target);
  }

  // uint32 direction = 2;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->direction(), target);
  }

  // int32 turning = 3;
  if (this->turning() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->turning(), target);
  }

  // int32 driving_status = 4;
  if (this->driving_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->driving_status(), target);
  }

  // float speed_limit = 5;
  if (this->speed_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed_limit(), target);
  }

  // int32 impassable_flag = 6;
  if (this->impassable_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->impassable_flag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_msgs.Business)
  return target;
}

size_t Business::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_msgs.Business)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 orderreply = 1;
  if (this->orderreply() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->orderreply());
  }

  // uint32 direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->direction());
  }

  // int32 turning = 3;
  if (this->turning() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->turning());
  }

  // int32 driving_status = 4;
  if (this->driving_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->driving_status());
  }

  // float speed_limit = 5;
  if (this->speed_limit() != 0) {
    total_size += 1 + 4;
  }

  // int32 impassable_flag = 6;
  if (this->impassable_flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->impassable_flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Business::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_msgs.Business)
  GOOGLE_DCHECK_NE(&from, this);
  const Business* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Business>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_msgs.Business)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_msgs.Business)
    MergeFrom(*source);
  }
}

void Business::MergeFrom(const Business& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_msgs.Business)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderreply() != 0) {
    set_orderreply(from.orderreply());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.turning() != 0) {
    set_turning(from.turning());
  }
  if (from.driving_status() != 0) {
    set_driving_status(from.driving_status());
  }
  if (from.speed_limit() != 0) {
    set_speed_limit(from.speed_limit());
  }
  if (from.impassable_flag() != 0) {
    set_impassable_flag(from.impassable_flag());
  }
}

void Business::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_msgs.Business)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Business::CopyFrom(const Business& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_msgs.Business)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Business::IsInitialized() const {
  return true;
}

void Business::Swap(Business* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Business::InternalSwap(Business* other) {
  using std::swap;
  swap(orderreply_, other->orderreply_);
  swap(direction_, other->direction_);
  swap(turning_, other->turning_);
  swap(driving_status_, other->driving_status_);
  swap(speed_limit_, other->speed_limit_);
  swap(impassable_flag_, other->impassable_flag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Business::GetMetadata() const {
  protobuf_planning_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Trajectory::InitAsDefaultInstance() {
  ::planning_msgs::_Trajectory_default_instance_._instance.get_mutable()->header_ = const_cast< ::common_msgs::Header*>(
      ::common_msgs::Header::internal_default_instance());
  ::planning_msgs::_Trajectory_default_instance_._instance.get_mutable()->imu_loc_data_ = const_cast< ::planning_msgs::ImuInfo*>(
      ::planning_msgs::ImuInfo::internal_default_instance());
  ::planning_msgs::_Trajectory_default_instance_._instance.get_mutable()->correct_loc_data_ = const_cast< ::planning_msgs::ImuInfo*>(
      ::planning_msgs::ImuInfo::internal_default_instance());
}
void Trajectory::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory::kHeaderFieldNumber;
const int Trajectory::kPointsFieldNumber;
const int Trajectory::kDirectionFieldNumber;
const int Trajectory::kAutodrvmodeentryFieldNumber;
const int Trajectory::kAutodrvmodeexitFieldNumber;
const int Trajectory::kLaneIdsFieldNumber;
const int Trajectory::kLaneTypeFieldNumber;
const int Trajectory::kCarFaultLevelFieldNumber;
const int Trajectory::kControlAccuracyFieldNumber;
const int Trajectory::kImuLocDataFieldNumber;
const int Trajectory::kCorrectLocDataFieldNumber;
const int Trajectory::kGearPositionRequestFieldNumber;
const int Trajectory::kSenarioTypeFieldNumber;
const int Trajectory::kSteeringangleRateMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory::Trajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fmsgs_2eproto::InitDefaultsTrajectory();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_msgs.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_),
      lane_ids_(from.lane_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::common_msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_imu_loc_data()) {
    imu_loc_data_ = new ::planning_msgs::ImuInfo(*from.imu_loc_data_);
  } else {
    imu_loc_data_ = NULL;
  }
  if (from.has_correct_loc_data()) {
    correct_loc_data_ = new ::planning_msgs::ImuInfo(*from.correct_loc_data_);
  } else {
    correct_loc_data_ = NULL;
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&steeringangle_rate_max_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(steeringangle_rate_max_));
  // @@protoc_insertion_point(copy_constructor:planning_msgs.Trajectory)
}

void Trajectory::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steeringangle_rate_max_) -
      reinterpret_cast<char*>(&header_)) + sizeof(steeringangle_rate_max_));
  _cached_size_ = 0;
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:planning_msgs.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete imu_loc_data_;
  if (this != internal_default_instance()) delete correct_loc_data_;
}

void Trajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory::descriptor() {
  ::protobuf_planning_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Trajectory& Trajectory::default_instance() {
  ::protobuf_planning_5fmsgs_2eproto::InitDefaultsTrajectory();
  return *internal_default_instance();
}

Trajectory* Trajectory::New(::google::protobuf::Arena* arena) const {
  Trajectory* n = new Trajectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_msgs.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  lane_ids_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && imu_loc_data_ != NULL) {
    delete imu_loc_data_;
  }
  imu_loc_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && correct_loc_data_ != NULL) {
    delete correct_loc_data_;
  }
  correct_loc_data_ = NULL;
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steeringangle_rate_max_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(steeringangle_rate_max_));
  _internal_metadata_.Clear();
}

bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_msgs.Trajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common_msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_msgs.TrajectoryPoint points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 direction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 autodrvmodeentry = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autodrvmodeentry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 autodrvmodeexit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &autodrvmodeexit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string lane_ids = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lane_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lane_ids(this->lane_ids_size() - 1).data(),
            static_cast<int>(this->lane_ids(this->lane_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_msgs.Trajectory.lane_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 car_fault_level = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &car_fault_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float control_accuracy = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &control_accuracy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_msgs.ImuInfo imu_loc_data = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_imu_loc_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_msgs.ImuInfo correct_loc_data = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_correct_loc_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gear_position_request = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_position_request_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 senario_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senario_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float steeringangle_rate_max = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steeringangle_rate_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_msgs.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_msgs.Trajectory)
  return false;
#undef DO_
}

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_msgs.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .planning_msgs.TrajectoryPoint points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->points(static_cast<int>(i)), output);
  }

  // uint32 direction = 3;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->direction(), output);
  }

  // uint32 autodrvmodeentry = 4;
  if (this->autodrvmodeentry() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->autodrvmodeentry(), output);
  }

  // uint32 autodrvmodeexit = 5;
  if (this->autodrvmodeexit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->autodrvmodeexit(), output);
  }

  // repeated string lane_ids = 6;
  for (int i = 0, n = this->lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_ids(i).data(), static_cast<int>(this->lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_msgs.Trajectory.lane_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->lane_ids(i), output);
  }

  // int32 lane_type = 7;
  if (this->lane_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lane_type(), output);
  }

  // int32 car_fault_level = 8;
  if (this->car_fault_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->car_fault_level(), output);
  }

  // float control_accuracy = 9;
  if (this->control_accuracy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->control_accuracy(), output);
  }

  // .planning_msgs.ImuInfo imu_loc_data = 10;
  if (this->has_imu_loc_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->imu_loc_data_, output);
  }

  // .planning_msgs.ImuInfo correct_loc_data = 11;
  if (this->has_correct_loc_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->correct_loc_data_, output);
  }

  // int32 gear_position_request = 12;
  if (this->gear_position_request() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gear_position_request(), output);
  }

  // int32 senario_type = 13;
  if (this->senario_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->senario_type(), output);
  }

  // float steeringangle_rate_max = 14;
  if (this->steeringangle_rate_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->steeringangle_rate_max(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_msgs.Trajectory)
}

::google::protobuf::uint8* Trajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_msgs.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .planning_msgs.TrajectoryPoint points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->points(static_cast<int>(i)), deterministic, target);
  }

  // uint32 direction = 3;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->direction(), target);
  }

  // uint32 autodrvmodeentry = 4;
  if (this->autodrvmodeentry() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->autodrvmodeentry(), target);
  }

  // uint32 autodrvmodeexit = 5;
  if (this->autodrvmodeexit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->autodrvmodeexit(), target);
  }

  // repeated string lane_ids = 6;
  for (int i = 0, n = this->lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_ids(i).data(), static_cast<int>(this->lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_msgs.Trajectory.lane_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->lane_ids(i), target);
  }

  // int32 lane_type = 7;
  if (this->lane_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lane_type(), target);
  }

  // int32 car_fault_level = 8;
  if (this->car_fault_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->car_fault_level(), target);
  }

  // float control_accuracy = 9;
  if (this->control_accuracy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->control_accuracy(), target);
  }

  // .planning_msgs.ImuInfo imu_loc_data = 10;
  if (this->has_imu_loc_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->imu_loc_data_, deterministic, target);
  }

  // .planning_msgs.ImuInfo correct_loc_data = 11;
  if (this->has_correct_loc_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->correct_loc_data_, deterministic, target);
  }

  // int32 gear_position_request = 12;
  if (this->gear_position_request() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gear_position_request(), target);
  }

  // int32 senario_type = 13;
  if (this->senario_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->senario_type(), target);
  }

  // float steeringangle_rate_max = 14;
  if (this->steeringangle_rate_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->steeringangle_rate_max(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_msgs.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_msgs.Trajectory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .planning_msgs.TrajectoryPoint points = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  // repeated string lane_ids = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->lane_ids_size());
  for (int i = 0, n = this->lane_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lane_ids(i));
  }

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .planning_msgs.ImuInfo imu_loc_data = 10;
  if (this->has_imu_loc_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->imu_loc_data_);
  }

  // .planning_msgs.ImuInfo correct_loc_data = 11;
  if (this->has_correct_loc_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->correct_loc_data_);
  }

  // uint32 direction = 3;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->direction());
  }

  // uint32 autodrvmodeentry = 4;
  if (this->autodrvmodeentry() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->autodrvmodeentry());
  }

  // uint32 autodrvmodeexit = 5;
  if (this->autodrvmodeexit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->autodrvmodeexit());
  }

  // int32 lane_type = 7;
  if (this->lane_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_type());
  }

  // int32 car_fault_level = 8;
  if (this->car_fault_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->car_fault_level());
  }

  // float control_accuracy = 9;
  if (this->control_accuracy() != 0) {
    total_size += 1 + 4;
  }

  // int32 gear_position_request = 12;
  if (this->gear_position_request() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gear_position_request());
  }

  // int32 senario_type = 13;
  if (this->senario_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->senario_type());
  }

  // float steeringangle_rate_max = 14;
  if (this->steeringangle_rate_max() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_msgs.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_msgs.Trajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_msgs.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_msgs.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  lane_ids_.MergeFrom(from.lane_ids_);
  if (from.has_header()) {
    mutable_header()->::common_msgs::Header::MergeFrom(from.header());
  }
  if (from.has_imu_loc_data()) {
    mutable_imu_loc_data()->::planning_msgs::ImuInfo::MergeFrom(from.imu_loc_data());
  }
  if (from.has_correct_loc_data()) {
    mutable_correct_loc_data()->::planning_msgs::ImuInfo::MergeFrom(from.correct_loc_data());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.autodrvmodeentry() != 0) {
    set_autodrvmodeentry(from.autodrvmodeentry());
  }
  if (from.autodrvmodeexit() != 0) {
    set_autodrvmodeexit(from.autodrvmodeexit());
  }
  if (from.lane_type() != 0) {
    set_lane_type(from.lane_type());
  }
  if (from.car_fault_level() != 0) {
    set_car_fault_level(from.car_fault_level());
  }
  if (from.control_accuracy() != 0) {
    set_control_accuracy(from.control_accuracy());
  }
  if (from.gear_position_request() != 0) {
    set_gear_position_request(from.gear_position_request());
  }
  if (from.senario_type() != 0) {
    set_senario_type(from.senario_type());
  }
  if (from.steeringangle_rate_max() != 0) {
    set_steeringangle_rate_max(from.steeringangle_rate_max());
  }
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_msgs.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_msgs.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  points_.InternalSwap(&other->points_);
  lane_ids_.InternalSwap(&other->lane_ids_);
  swap(header_, other->header_);
  swap(imu_loc_data_, other->imu_loc_data_);
  swap(correct_loc_data_, other->correct_loc_data_);
  swap(direction_, other->direction_);
  swap(autodrvmodeentry_, other->autodrvmodeentry_);
  swap(autodrvmodeexit_, other->autodrvmodeexit_);
  swap(lane_type_, other->lane_type_);
  swap(car_fault_level_, other->car_fault_level_);
  swap(control_accuracy_, other->control_accuracy_);
  swap(gear_position_request_, other->gear_position_request_);
  swap(senario_type_, other->senario_type_);
  swap(steeringangle_rate_max_, other->steeringangle_rate_max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  protobuf_planning_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning_msgs

// @@protoc_insertion_point(global_scope)
