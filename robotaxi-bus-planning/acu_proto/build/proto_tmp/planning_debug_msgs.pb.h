// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning_debug_msgs.proto

#ifndef PROTOBUF_planning_5fdebug_5fmsgs_2eproto__INCLUDED
#define PROTOBUF_planning_5fdebug_5fmsgs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common_msgs.pb.h"
#include "planning_msgs.pb.h"
#include "perception_objects_msgs.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_planning_5fdebug_5fmsgs_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[32];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsDebugStateImpl();
void InitDefaultsDebugState();
void InitDefaultsSLPointImpl();
void InitDefaultsSLPoint();
void InitDefaultsSpeedPointImpl();
void InitDefaultsSpeedPoint();
void InitDefaultsDebugMotionPlanImpl();
void InitDefaultsDebugMotionPlan();
void InitDefaultsSTpairImpl();
void InitDefaultsSTpair();
void InitDefaultsDebugPdObjectImpl();
void InitDefaultsDebugPdObject();
void InitDefaultsDebugObjectImpl();
void InitDefaultsDebugObject();
void InitDefaultsDebugGapImpl();
void InitDefaultsDebugGap();
void InitDefaultsDebugLineImpl();
void InitDefaultsDebugLine();
void InitDefaultsDebugLightImpl();
void InitDefaultsDebugLight();
void InitDefaultsDebugCognitionImpl();
void InitDefaultsDebugCognition();
void InitDefaultsDecisionPointImpl();
void InitDefaultsDecisionPoint();
void InitDefaultsSTGraphImpl();
void InitDefaultsSTGraph();
void InitDefaultsDebugSTGraphImpl();
void InitDefaultsDebugSTGraph();
void InitDefaultsSentenceImpl();
void InitDefaultsSentence();
void InitDefaultsDebugDecisionImpl();
void InitDefaultsDebugDecision();
void InitDefaultsDebugPredictionImpl();
void InitDefaultsDebugPrediction();
void InitDefaultsDebugImuImpl();
void InitDefaultsDebugImu();
void InitDefaultsPlanningDebugImpl();
void InitDefaultsPlanningDebug();
void InitDefaultsDebugBusinessImpl();
void InitDefaultsDebugBusiness();
void InitDefaultsDebugSTPointImpl();
void InitDefaultsDebugSTPoint();
void InitDefaultsDebugstmapImpl();
void InitDefaultsDebugstmap();
void InitDefaultsDebugObjectByLineImpl();
void InitDefaultsDebugObjectByLine();
void InitDefaultsLBoundsImpl();
void InitDefaultsLBounds();
void InitDefaultsSoftBoundaryImpl();
void InitDefaultsSoftBoundary();
void InitDefaultsBoundaryTypeImpl();
void InitDefaultsBoundaryType();
void InitDefaultsDebugSLBoundaryImpl();
void InitDefaultsDebugSLBoundary();
void InitDefaultsmotion_obstacleImpl();
void InitDefaultsmotion_obstacle();
void InitDefaultsmotion_obstacle_vecImpl();
void InitDefaultsmotion_obstacle_vec();
void InitDefaultsDebugXTBoundImpl();
void InitDefaultsDebugXTBound();
void InitDefaultsXTBoundsImpl();
void InitDefaultsXTBounds();
void InitDefaultsDebugExtraDecisionImpl();
void InitDefaultsDebugExtraDecision();
inline void InitDefaults() {
  InitDefaultsDebugState();
  InitDefaultsSLPoint();
  InitDefaultsSpeedPoint();
  InitDefaultsDebugMotionPlan();
  InitDefaultsSTpair();
  InitDefaultsDebugPdObject();
  InitDefaultsDebugObject();
  InitDefaultsDebugGap();
  InitDefaultsDebugLine();
  InitDefaultsDebugLight();
  InitDefaultsDebugCognition();
  InitDefaultsDecisionPoint();
  InitDefaultsSTGraph();
  InitDefaultsDebugSTGraph();
  InitDefaultsSentence();
  InitDefaultsDebugDecision();
  InitDefaultsDebugPrediction();
  InitDefaultsDebugImu();
  InitDefaultsPlanningDebug();
  InitDefaultsDebugBusiness();
  InitDefaultsDebugSTPoint();
  InitDefaultsDebugstmap();
  InitDefaultsDebugObjectByLine();
  InitDefaultsLBounds();
  InitDefaultsSoftBoundary();
  InitDefaultsBoundaryType();
  InitDefaultsDebugSLBoundary();
  InitDefaultsmotion_obstacle();
  InitDefaultsmotion_obstacle_vec();
  InitDefaultsDebugXTBound();
  InitDefaultsXTBounds();
  InitDefaultsDebugExtraDecision();
}
}  // namespace protobuf_planning_5fdebug_5fmsgs_2eproto
namespace planning_debug_msgs {
class BoundaryType;
class BoundaryTypeDefaultTypeInternal;
extern BoundaryTypeDefaultTypeInternal _BoundaryType_default_instance_;
class DebugBusiness;
class DebugBusinessDefaultTypeInternal;
extern DebugBusinessDefaultTypeInternal _DebugBusiness_default_instance_;
class DebugCognition;
class DebugCognitionDefaultTypeInternal;
extern DebugCognitionDefaultTypeInternal _DebugCognition_default_instance_;
class DebugDecision;
class DebugDecisionDefaultTypeInternal;
extern DebugDecisionDefaultTypeInternal _DebugDecision_default_instance_;
class DebugExtraDecision;
class DebugExtraDecisionDefaultTypeInternal;
extern DebugExtraDecisionDefaultTypeInternal _DebugExtraDecision_default_instance_;
class DebugGap;
class DebugGapDefaultTypeInternal;
extern DebugGapDefaultTypeInternal _DebugGap_default_instance_;
class DebugImu;
class DebugImuDefaultTypeInternal;
extern DebugImuDefaultTypeInternal _DebugImu_default_instance_;
class DebugLight;
class DebugLightDefaultTypeInternal;
extern DebugLightDefaultTypeInternal _DebugLight_default_instance_;
class DebugLine;
class DebugLineDefaultTypeInternal;
extern DebugLineDefaultTypeInternal _DebugLine_default_instance_;
class DebugMotionPlan;
class DebugMotionPlanDefaultTypeInternal;
extern DebugMotionPlanDefaultTypeInternal _DebugMotionPlan_default_instance_;
class DebugObject;
class DebugObjectDefaultTypeInternal;
extern DebugObjectDefaultTypeInternal _DebugObject_default_instance_;
class DebugObjectByLine;
class DebugObjectByLineDefaultTypeInternal;
extern DebugObjectByLineDefaultTypeInternal _DebugObjectByLine_default_instance_;
class DebugPdObject;
class DebugPdObjectDefaultTypeInternal;
extern DebugPdObjectDefaultTypeInternal _DebugPdObject_default_instance_;
class DebugPrediction;
class DebugPredictionDefaultTypeInternal;
extern DebugPredictionDefaultTypeInternal _DebugPrediction_default_instance_;
class DebugSLBoundary;
class DebugSLBoundaryDefaultTypeInternal;
extern DebugSLBoundaryDefaultTypeInternal _DebugSLBoundary_default_instance_;
class DebugSTGraph;
class DebugSTGraphDefaultTypeInternal;
extern DebugSTGraphDefaultTypeInternal _DebugSTGraph_default_instance_;
class DebugSTPoint;
class DebugSTPointDefaultTypeInternal;
extern DebugSTPointDefaultTypeInternal _DebugSTPoint_default_instance_;
class DebugState;
class DebugStateDefaultTypeInternal;
extern DebugStateDefaultTypeInternal _DebugState_default_instance_;
class DebugXTBound;
class DebugXTBoundDefaultTypeInternal;
extern DebugXTBoundDefaultTypeInternal _DebugXTBound_default_instance_;
class Debugstmap;
class DebugstmapDefaultTypeInternal;
extern DebugstmapDefaultTypeInternal _Debugstmap_default_instance_;
class DecisionPoint;
class DecisionPointDefaultTypeInternal;
extern DecisionPointDefaultTypeInternal _DecisionPoint_default_instance_;
class LBounds;
class LBoundsDefaultTypeInternal;
extern LBoundsDefaultTypeInternal _LBounds_default_instance_;
class PlanningDebug;
class PlanningDebugDefaultTypeInternal;
extern PlanningDebugDefaultTypeInternal _PlanningDebug_default_instance_;
class SLPoint;
class SLPointDefaultTypeInternal;
extern SLPointDefaultTypeInternal _SLPoint_default_instance_;
class STGraph;
class STGraphDefaultTypeInternal;
extern STGraphDefaultTypeInternal _STGraph_default_instance_;
class STpair;
class STpairDefaultTypeInternal;
extern STpairDefaultTypeInternal _STpair_default_instance_;
class Sentence;
class SentenceDefaultTypeInternal;
extern SentenceDefaultTypeInternal _Sentence_default_instance_;
class SoftBoundary;
class SoftBoundaryDefaultTypeInternal;
extern SoftBoundaryDefaultTypeInternal _SoftBoundary_default_instance_;
class SpeedPoint;
class SpeedPointDefaultTypeInternal;
extern SpeedPointDefaultTypeInternal _SpeedPoint_default_instance_;
class XTBounds;
class XTBoundsDefaultTypeInternal;
extern XTBoundsDefaultTypeInternal _XTBounds_default_instance_;
class motion_obstacle;
class motion_obstacleDefaultTypeInternal;
extern motion_obstacleDefaultTypeInternal _motion_obstacle_default_instance_;
class motion_obstacle_vec;
class motion_obstacle_vecDefaultTypeInternal;
extern motion_obstacle_vecDefaultTypeInternal _motion_obstacle_vec_default_instance_;
}  // namespace planning_debug_msgs
namespace planning_debug_msgs {

// ===================================================================

class DebugState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.DebugState) */ {
 public:
  DebugState();
  virtual ~DebugState();

  DebugState(const DebugState& from);

  inline DebugState& operator=(const DebugState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugState(DebugState&& from) noexcept
    : DebugState() {
    *this = ::std::move(from);
  }

  inline DebugState& operator=(DebugState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugState* internal_default_instance() {
    return reinterpret_cast<const DebugState*>(
               &_DebugState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DebugState* other);
  friend void swap(DebugState& a, DebugState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugState* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugState& from);
  void MergeFrom(const DebugState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string str = 2;
  void clear_str();
  static const int kStrFieldNumber = 2;
  const ::std::string& str() const;
  void set_str(const ::std::string& value);
  #if LANG_CXX11
  void set_str(::std::string&& value);
  #endif
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  ::std::string* mutable_str();
  ::std::string* release_str();
  void set_allocated_str(::std::string* str);

  // int32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.DebugState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr str_;
  ::google::protobuf::int32 value_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugStateImpl();
};
// -------------------------------------------------------------------

class SLPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.SLPoint) */ {
 public:
  SLPoint();
  virtual ~SLPoint();

  SLPoint(const SLPoint& from);

  inline SLPoint& operator=(const SLPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SLPoint(SLPoint&& from) noexcept
    : SLPoint() {
    *this = ::std::move(from);
  }

  inline SLPoint& operator=(SLPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SLPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SLPoint* internal_default_instance() {
    return reinterpret_cast<const SLPoint*>(
               &_SLPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SLPoint* other);
  friend void swap(SLPoint& a, SLPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SLPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  SLPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SLPoint& from);
  void MergeFrom(const SLPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SLPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double s = 1;
  void clear_s();
  static const int kSFieldNumber = 1;
  double s() const;
  void set_s(double value);

  // double l = 2;
  void clear_l();
  static const int kLFieldNumber = 2;
  double l() const;
  void set_l(double value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.SLPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double s_;
  double l_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSLPointImpl();
};
// -------------------------------------------------------------------

class SpeedPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.SpeedPoint) */ {
 public:
  SpeedPoint();
  virtual ~SpeedPoint();

  SpeedPoint(const SpeedPoint& from);

  inline SpeedPoint& operator=(const SpeedPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeedPoint(SpeedPoint&& from) noexcept
    : SpeedPoint() {
    *this = ::std::move(from);
  }

  inline SpeedPoint& operator=(SpeedPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedPoint* internal_default_instance() {
    return reinterpret_cast<const SpeedPoint*>(
               &_SpeedPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SpeedPoint* other);
  friend void swap(SpeedPoint& a, SpeedPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeedPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  SpeedPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpeedPoint& from);
  void MergeFrom(const SpeedPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpeedPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double t = 1;
  void clear_t();
  static const int kTFieldNumber = 1;
  double t() const;
  void set_t(double value);

  // double s = 2;
  void clear_s();
  static const int kSFieldNumber = 2;
  double s() const;
  void set_s(double value);

  // double v = 3;
  void clear_v();
  static const int kVFieldNumber = 3;
  double v() const;
  void set_v(double value);

  // double a = 4;
  void clear_a();
  static const int kAFieldNumber = 4;
  double a() const;
  void set_a(double value);

  // double da = 5;
  void clear_da();
  static const int kDaFieldNumber = 5;
  double da() const;
  void set_da(double value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.SpeedPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double t_;
  double s_;
  double v_;
  double a_;
  double da_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSpeedPointImpl();
};
// -------------------------------------------------------------------

class DebugMotionPlan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.DebugMotionPlan) */ {
 public:
  DebugMotionPlan();
  virtual ~DebugMotionPlan();

  DebugMotionPlan(const DebugMotionPlan& from);

  inline DebugMotionPlan& operator=(const DebugMotionPlan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugMotionPlan(DebugMotionPlan&& from) noexcept
    : DebugMotionPlan() {
    *this = ::std::move(from);
  }

  inline DebugMotionPlan& operator=(DebugMotionPlan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugMotionPlan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugMotionPlan* internal_default_instance() {
    return reinterpret_cast<const DebugMotionPlan*>(
               &_DebugMotionPlan_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DebugMotionPlan* other);
  friend void swap(DebugMotionPlan& a, DebugMotionPlan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugMotionPlan* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugMotionPlan* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugMotionPlan& from);
  void MergeFrom(const DebugMotionPlan& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugMotionPlan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .planning_debug_msgs.SLPoint path_data = 32;
  int path_data_size() const;
  void clear_path_data();
  static const int kPathDataFieldNumber = 32;
  const ::planning_debug_msgs::SLPoint& path_data(int index) const;
  ::planning_debug_msgs::SLPoint* mutable_path_data(int index);
  ::planning_debug_msgs::SLPoint* add_path_data();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::SLPoint >*
      mutable_path_data();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::SLPoint >&
      path_data() const;

  // repeated .planning_debug_msgs.SpeedPoint speed_data = 33;
  int speed_data_size() const;
  void clear_speed_data();
  static const int kSpeedDataFieldNumber = 33;
  const ::planning_debug_msgs::SpeedPoint& speed_data(int index) const;
  ::planning_debug_msgs::SpeedPoint* mutable_speed_data(int index);
  ::planning_debug_msgs::SpeedPoint* add_speed_data();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::SpeedPoint >*
      mutable_speed_data();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::SpeedPoint >&
      speed_data() const;

  // repeated string speedplan_task = 42;
  int speedplan_task_size() const;
  void clear_speedplan_task();
  static const int kSpeedplanTaskFieldNumber = 42;
  const ::std::string& speedplan_task(int index) const;
  ::std::string* mutable_speedplan_task(int index);
  void set_speedplan_task(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_speedplan_task(int index, ::std::string&& value);
  #endif
  void set_speedplan_task(int index, const char* value);
  void set_speedplan_task(int index, const char* value, size_t size);
  ::std::string* add_speedplan_task();
  void add_speedplan_task(const ::std::string& value);
  #if LANG_CXX11
  void add_speedplan_task(::std::string&& value);
  #endif
  void add_speedplan_task(const char* value);
  void add_speedplan_task(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& speedplan_task() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_speedplan_task();

  // repeated float speedplan_time = 43;
  int speedplan_time_size() const;
  void clear_speedplan_time();
  static const int kSpeedplanTimeFieldNumber = 43;
  float speedplan_time(int index) const;
  void set_speedplan_time(int index, float value);
  void add_speedplan_time(float value);
  const ::google::protobuf::RepeatedField< float >&
      speedplan_time() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_speedplan_time();

  // repeated float speed_upper_constraint = 44;
  int speed_upper_constraint_size() const;
  void clear_speed_upper_constraint();
  static const int kSpeedUpperConstraintFieldNumber = 44;
  float speed_upper_constraint(int index) const;
  void set_speed_upper_constraint(int index, float value);
  void add_speed_upper_constraint(float value);
  const ::google::protobuf::RepeatedField< float >&
      speed_upper_constraint() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_speed_upper_constraint();

  // repeated float speed_lower_constraint = 45;
  int speed_lower_constraint_size() const;
  void clear_speed_lower_constraint();
  static const int kSpeedLowerConstraintFieldNumber = 45;
  float speed_lower_constraint(int index) const;
  void set_speed_lower_constraint(int index, float value);
  void add_speed_lower_constraint(float value);
  const ::google::protobuf::RepeatedField< float >&
      speed_lower_constraint() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_speed_lower_constraint();

  // repeated float s_upper_constraint = 46;
  int s_upper_constraint_size() const;
  void clear_s_upper_constraint();
  static const int kSUpperConstraintFieldNumber = 46;
  float s_upper_constraint(int index) const;
  void set_s_upper_constraint(int index, float value);
  void add_s_upper_constraint(float value);
  const ::google::protobuf::RepeatedField< float >&
      s_upper_constraint() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_s_upper_constraint();

  // repeated float s_lower_constraint = 47;
  int s_lower_constraint_size() const;
  void clear_s_lower_constraint();
  static const int kSLowerConstraintFieldNumber = 47;
  float s_lower_constraint(int index) const;
  void set_s_lower_constraint(int index, float value);
  void add_s_lower_constraint(float value);
  const ::google::protobuf::RepeatedField< float >&
      s_lower_constraint() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_s_lower_constraint();

  // string path_fallback_reason = 21;
  void clear_path_fallback_reason();
  static const int kPathFallbackReasonFieldNumber = 21;
  const ::std::string& path_fallback_reason() const;
  void set_path_fallback_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_path_fallback_reason(::std::string&& value);
  #endif
  void set_path_fallback_reason(const char* value);
  void set_path_fallback_reason(const char* value, size_t size);
  ::std::string* mutable_path_fallback_reason();
  ::std::string* release_path_fallback_reason();
  void set_allocated_path_fallback_reason(::std::string* path_fallback_reason);

  // string speed_fallback_reason = 22;
  void clear_speed_fallback_reason();
  static const int kSpeedFallbackReasonFieldNumber = 22;
  const ::std::string& speed_fallback_reason() const;
  void set_speed_fallback_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_speed_fallback_reason(::std::string&& value);
  #endif
  void set_speed_fallback_reason(const char* value);
  void set_speed_fallback_reason(const char* value, size_t size);
  ::std::string* mutable_speed_fallback_reason();
  ::std::string* release_speed_fallback_reason();
  void set_allocated_speed_fallback_reason(::std::string* speed_fallback_reason);

  // string generate_stop_trajectory_reason = 26;
  void clear_generate_stop_trajectory_reason();
  static const int kGenerateStopTrajectoryReasonFieldNumber = 26;
  const ::std::string& generate_stop_trajectory_reason() const;
  void set_generate_stop_trajectory_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_generate_stop_trajectory_reason(::std::string&& value);
  #endif
  void set_generate_stop_trajectory_reason(const char* value);
  void set_generate_stop_trajectory_reason(const char* value, size_t size);
  ::std::string* mutable_generate_stop_trajectory_reason();
  ::std::string* release_generate_stop_trajectory_reason();
  void set_allocated_generate_stop_trajectory_reason(::std::string* generate_stop_trajectory_reason);

  // double time_stamp = 1;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  double time_stamp() const;
  void set_time_stamp(double value);

  // double v = 2;
  void clear_v();
  static const int kVFieldNumber = 2;
  double v() const;
  void set_v(double value);

  // double kappa = 3;
  void clear_kappa();
  static const int kKappaFieldNumber = 3;
  double kappa() const;
  void set_kappa(double value);

  // double a = 4;
  void clear_a();
  static const int kAFieldNumber = 4;
  double a() const;
  void set_a(double value);

  // double ego_speed = 5;
  void clear_ego_speed();
  static const int kEgoSpeedFieldNumber = 5;
  double ego_speed() const;
  void set_ego_speed(double value);

  // double cruise_speed_max = 6;
  void clear_cruise_speed_max();
  static const int kCruiseSpeedMaxFieldNumber = 6;
  double cruise_speed_max() const;
  void set_cruise_speed_max(double value);

  // double following_object_v = 8;
  void clear_following_object_v();
  static const int kFollowingObjectVFieldNumber = 8;
  double following_object_v() const;
  void set_following_object_v(double value);

  // double following_object_dis = 9;
  void clear_following_object_dis();
  static const int kFollowingObjectDisFieldNumber = 9;
  double following_object_dis() const;
  void set_following_object_dis(double value);

  // double following_object_a = 10;
  void clear_following_object_a();
  static const int kFollowingObjectAFieldNumber = 10;
  double following_object_a() const;
  void set_following_object_a(double value);

  // int32 following_object_id = 7;
  void clear_following_object_id();
  static const int kFollowingObjectIdFieldNumber = 7;
  ::google::protobuf::int32 following_object_id() const;
  void set_following_object_id(::google::protobuf::int32 value);

  // int32 is_new_path = 14;
  void clear_is_new_path();
  static const int kIsNewPathFieldNumber = 14;
  ::google::protobuf::int32 is_new_path() const;
  void set_is_new_path(::google::protobuf::int32 value);

  // double following_object_min_s = 11;
  void clear_following_object_min_s();
  static const int kFollowingObjectMinSFieldNumber = 11;
  double following_object_min_s() const;
  void set_following_object_min_s(double value);

  // double following_object_min_t = 12;
  void clear_following_object_min_t();
  static const int kFollowingObjectMinTFieldNumber = 12;
  double following_object_min_t() const;
  void set_following_object_min_t(double value);

  // double following_object_target_dis = 13;
  void clear_following_object_target_dis();
  static const int kFollowingObjectTargetDisFieldNumber = 13;
  double following_object_target_dis() const;
  void set_following_object_target_dis(double value);

  // double init_point_s = 15;
  void clear_init_point_s();
  static const int kInitPointSFieldNumber = 15;
  double init_point_s() const;
  void set_init_point_s(double value);

  // double init_point_l = 16;
  void clear_init_point_l();
  static const int kInitPointLFieldNumber = 16;
  double init_point_l() const;
  void set_init_point_l(double value);

  // double init_point_dl = 17;
  void clear_init_point_dl();
  static const int kInitPointDlFieldNumber = 17;
  double init_point_dl() const;
  void set_init_point_dl(double value);

  // double init_point_ddl = 18;
  void clear_init_point_ddl();
  static const int kInitPointDdlFieldNumber = 18;
  double init_point_ddl() const;
  void set_init_point_ddl(double value);

  // double locpos_s = 19;
  void clear_locpos_s();
  static const int kLocposSFieldNumber = 19;
  double locpos_s() const;
  void set_locpos_s(double value);

  // int32 is_fallback_trajectory = 20;
  void clear_is_fallback_trajectory();
  static const int kIsFallbackTrajectoryFieldNumber = 20;
  ::google::protobuf::int32 is_fallback_trajectory() const;
  void set_is_fallback_trajectory(::google::protobuf::int32 value);

  // int32 trajectory_type = 23;
  void clear_trajectory_type();
  static const int kTrajectoryTypeFieldNumber = 23;
  ::google::protobuf::int32 trajectory_type() const;
  void set_trajectory_type(::google::protobuf::int32 value);

  // bool is_replan = 24;
  void clear_is_replan();
  static const int kIsReplanFieldNumber = 24;
  bool is_replan() const;
  void set_is_replan(bool value);

  // int32 replan_reason = 25;
  void clear_replan_reason();
  static const int kReplanReasonFieldNumber = 25;
  ::google::protobuf::int32 replan_reason() const;
  void set_replan_reason(::google::protobuf::int32 value);

  // double yield_object_v = 28;
  void clear_yield_object_v();
  static const int kYieldObjectVFieldNumber = 28;
  double yield_object_v() const;
  void set_yield_object_v(double value);

  // double yield_object_current_s = 29;
  void clear_yield_object_current_s();
  static const int kYieldObjectCurrentSFieldNumber = 29;
  double yield_object_current_s() const;
  void set_yield_object_current_s(double value);

  // double yield_object_collision_min_s = 30;
  void clear_yield_object_collision_min_s();
  static const int kYieldObjectCollisionMinSFieldNumber = 30;
  double yield_object_collision_min_s() const;
  void set_yield_object_collision_min_s(double value);

  // int32 yield_object_id = 27;
  void clear_yield_object_id();
  static const int kYieldObjectIdFieldNumber = 27;
  ::google::protobuf::int32 yield_object_id() const;
  void set_yield_object_id(::google::protobuf::int32 value);

  // int32 reference_line_smoothed_status = 34;
  void clear_reference_line_smoothed_status();
  static const int kReferenceLineSmoothedStatusFieldNumber = 34;
  ::google::protobuf::int32 reference_line_smoothed_status() const;
  void set_reference_line_smoothed_status(::google::protobuf::int32 value);

  // double yield_object_collision_min_t = 31;
  void clear_yield_object_collision_min_t();
  static const int kYieldObjectCollisionMinTFieldNumber = 31;
  double yield_object_collision_min_t() const;
  void set_yield_object_collision_min_t(double value);

  // int32 min_kappa_index = 35;
  void clear_min_kappa_index();
  static const int kMinKappaIndexFieldNumber = 35;
  ::google::protobuf::int32 min_kappa_index() const;
  void set_min_kappa_index(::google::protobuf::int32 value);

  // int32 max_kappa_index = 36;
  void clear_max_kappa_index();
  static const int kMaxKappaIndexFieldNumber = 36;
  ::google::protobuf::int32 max_kappa_index() const;
  void set_max_kappa_index(::google::protobuf::int32 value);

  // float kappa_min = 37;
  void clear_kappa_min();
  static const int kKappaMinFieldNumber = 37;
  float kappa_min() const;
  void set_kappa_min(float value);

  // float kappa_max = 38;
  void clear_kappa_max();
  static const int kKappaMaxFieldNumber = 38;
  float kappa_max() const;
  void set_kappa_max(float value);

  // float total_time = 39;
  void clear_total_time();
  static const int kTotalTimeFieldNumber = 39;
  float total_time() const;
  void set_total_time(float value);

  // float pathplan_total_time = 40;
  void clear_pathplan_total_time();
  static const int kPathplanTotalTimeFieldNumber = 40;
  float pathplan_total_time() const;
  void set_pathplan_total_time(float value);

  // float speedplan_total_time = 41;
  void clear_speedplan_total_time();
  static const int kSpeedplanTotalTimeFieldNumber = 41;
  float speedplan_total_time() const;
  void set_speedplan_total_time(float value);

  // float behavior_parser_time_spend = 48;
  void clear_behavior_parser_time_spend();
  static const int kBehaviorParserTimeSpendFieldNumber = 48;
  float behavior_parser_time_spend() const;
  void set_behavior_parser_time_spend(float value);

  // float behavior_parser_Reset_t = 49;
  void clear_behavior_parser_reset_t();
  static const int kBehaviorParserResetTFieldNumber = 49;
  float behavior_parser_reset_t() const;
  void set_behavior_parser_reset_t(float value);

  // float behavior_parser_FindTargetRefLine_t = 50;
  void clear_behavior_parser_findtargetrefline_t();
  static const int kBehaviorParserFindTargetRefLineTFieldNumber = 50;
  float behavior_parser_findtargetrefline_t() const;
  void set_behavior_parser_findtargetrefline_t(float value);

  // int32 borrow_time_count = 51;
  void clear_borrow_time_count();
  static const int kBorrowTimeCountFieldNumber = 51;
  ::google::protobuf::int32 borrow_time_count() const;
  void set_borrow_time_count(::google::protobuf::int32 value);

  // float behavior_parser_CreateReferenceLineData_t = 52;
  void clear_behavior_parser_createreferencelinedata_t();
  static const int kBehaviorParserCreateReferenceLineDataTFieldNumber = 52;
  float behavior_parser_createreferencelinedata_t() const;
  void set_behavior_parser_createreferencelinedata_t(float value);

  // int32 plan_in_lane_ = 53;
  void clear_plan_in_lane_();
  static const int kPlanInLaneFieldNumber = 53;
  ::google::protobuf::int32 plan_in_lane_() const;
  void set_plan_in_lane_(::google::protobuf::int32 value);

  // float frame_time_spend = 54;
  void clear_frame_time_spend();
  static const int kFrameTimeSpendFieldNumber = 54;
  float frame_time_spend() const;
  void set_frame_time_spend(float value);

  // float trajectory_stitcher_time_spend = 55;
  void clear_trajectory_stitcher_time_spend();
  static const int kTrajectoryStitcherTimeSpendFieldNumber = 55;
  float trajectory_stitcher_time_spend() const;
  void set_trajectory_stitcher_time_spend(float value);

  // float generate_trajectory_time_spend = 56;
  void clear_generate_trajectory_time_spend();
  static const int kGenerateTrajectoryTimeSpendFieldNumber = 56;
  float generate_trajectory_time_spend() const;
  void set_generate_trajectory_time_spend(float value);

  // int32 passby_limit_flag = 57;
  void clear_passby_limit_flag();
  static const int kPassbyLimitFlagFieldNumber = 57;
  ::google::protobuf::int32 passby_limit_flag() const;
  void set_passby_limit_flag(::google::protobuf::int32 value);

  // float passby_limit_s = 58;
  void clear_passby_limit_s();
  static const int kPassbyLimitSFieldNumber = 58;
  float passby_limit_s() const;
  void set_passby_limit_s(float value);

  // float passby_limit_v = 59;
  void clear_passby_limit_v();
  static const int kPassbyLimitVFieldNumber = 59;
  float passby_limit_v() const;
  void set_passby_limit_v(float value);

  // float yield_weight_factor = 60;
  void clear_yield_weight_factor();
  static const int kYieldWeightFactorFieldNumber = 60;
  float yield_weight_factor() const;
  void set_yield_weight_factor(float value);

  // float cruise_weight_factor = 61;
  void clear_cruise_weight_factor();
  static const int kCruiseWeightFactorFieldNumber = 61;
  float cruise_weight_factor() const;
  void set_cruise_weight_factor(float value);

  // float follow_weight_factor = 62;
  void clear_follow_weight_factor();
  static const int kFollowWeightFactorFieldNumber = 62;
  float follow_weight_factor() const;
  void set_follow_weight_factor(float value);

  // int32 borrow_lane_type = 63;
  void clear_borrow_lane_type();
  static const int kBorrowLaneTypeFieldNumber = 63;
  ::google::protobuf::int32 borrow_lane_type() const;
  void set_borrow_lane_type(::google::protobuf::int32 value);

  // int32 box_planning_state = 64;
  void clear_box_planning_state();
  static const int kBoxPlanningStateFieldNumber = 64;
  ::google::protobuf::int32 box_planning_state() const;
  void set_box_planning_state(::google::protobuf::int32 value);

  // float jerk_weight_factor = 65;
  void clear_jerk_weight_factor();
  static const int kJerkWeightFactorFieldNumber = 65;
  float jerk_weight_factor() const;
  void set_jerk_weight_factor(float value);

  // float follow_v_weight_factor = 66;
  void clear_follow_v_weight_factor();
  static const int kFollowVWeightFactorFieldNumber = 66;
  float follow_v_weight_factor() const;
  void set_follow_v_weight_factor(float value);

  // int32 acc_dcc_mode = 67;
  void clear_acc_dcc_mode();
  static const int kAccDccModeFieldNumber = 67;
  ::google::protobuf::int32 acc_dcc_mode() const;
  void set_acc_dcc_mode(::google::protobuf::int32 value);

  // float follow_dis_error = 68;
  void clear_follow_dis_error();
  static const int kFollowDisErrorFieldNumber = 68;
  float follow_dis_error() const;
  void set_follow_dis_error(float value);

  // int32 real_time_ob_avoid_state = 69;
  void clear_real_time_ob_avoid_state();
  static const int kRealTimeObAvoidStateFieldNumber = 69;
  ::google::protobuf::int32 real_time_ob_avoid_state() const;
  void set_real_time_ob_avoid_state(::google::protobuf::int32 value);

  // int32 no_real_time_cnt = 70;
  void clear_no_real_time_cnt();
  static const int kNoRealTimeCntFieldNumber = 70;
  ::google::protobuf::int32 no_real_time_cnt() const;
  void set_no_real_time_cnt(::google::protobuf::int32 value);

  // float cog_linear_velocity = 71;
  void clear_cog_linear_velocity();
  static const int kCogLinearVelocityFieldNumber = 71;
  float cog_linear_velocity() const;
  void set_cog_linear_velocity(float value);

  // float dis_to_virtual_wall = 72;
  void clear_dis_to_virtual_wall();
  static const int kDisToVirtualWallFieldNumber = 72;
  float dis_to_virtual_wall() const;
  void set_dis_to_virtual_wall(float value);

  // int32 sentence_action = 73;
  void clear_sentence_action();
  static const int kSentenceActionFieldNumber = 73;
  ::google::protobuf::int32 sentence_action() const;
  void set_sentence_action(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.DebugMotionPlan)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::SLPoint > path_data_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::SpeedPoint > speed_data_;
  ::google::protobuf::RepeatedPtrField< ::std::string> speedplan_task_;
  ::google::protobuf::RepeatedField< float > speedplan_time_;
  mutable int _speedplan_time_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > speed_upper_constraint_;
  mutable int _speed_upper_constraint_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > speed_lower_constraint_;
  mutable int _speed_lower_constraint_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > s_upper_constraint_;
  mutable int _s_upper_constraint_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > s_lower_constraint_;
  mutable int _s_lower_constraint_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr path_fallback_reason_;
  ::google::protobuf::internal::ArenaStringPtr speed_fallback_reason_;
  ::google::protobuf::internal::ArenaStringPtr generate_stop_trajectory_reason_;
  double time_stamp_;
  double v_;
  double kappa_;
  double a_;
  double ego_speed_;
  double cruise_speed_max_;
  double following_object_v_;
  double following_object_dis_;
  double following_object_a_;
  ::google::protobuf::int32 following_object_id_;
  ::google::protobuf::int32 is_new_path_;
  double following_object_min_s_;
  double following_object_min_t_;
  double following_object_target_dis_;
  double init_point_s_;
  double init_point_l_;
  double init_point_dl_;
  double init_point_ddl_;
  double locpos_s_;
  ::google::protobuf::int32 is_fallback_trajectory_;
  ::google::protobuf::int32 trajectory_type_;
  bool is_replan_;
  ::google::protobuf::int32 replan_reason_;
  double yield_object_v_;
  double yield_object_current_s_;
  double yield_object_collision_min_s_;
  ::google::protobuf::int32 yield_object_id_;
  ::google::protobuf::int32 reference_line_smoothed_status_;
  double yield_object_collision_min_t_;
  ::google::protobuf::int32 min_kappa_index_;
  ::google::protobuf::int32 max_kappa_index_;
  float kappa_min_;
  float kappa_max_;
  float total_time_;
  float pathplan_total_time_;
  float speedplan_total_time_;
  float behavior_parser_time_spend_;
  float behavior_parser_reset_t_;
  float behavior_parser_findtargetrefline_t_;
  ::google::protobuf::int32 borrow_time_count_;
  float behavior_parser_createreferencelinedata_t_;
  ::google::protobuf::int32 plan_in_lane__;
  float frame_time_spend_;
  float trajectory_stitcher_time_spend_;
  float generate_trajectory_time_spend_;
  ::google::protobuf::int32 passby_limit_flag_;
  float passby_limit_s_;
  float passby_limit_v_;
  float yield_weight_factor_;
  float cruise_weight_factor_;
  float follow_weight_factor_;
  ::google::protobuf::int32 borrow_lane_type_;
  ::google::protobuf::int32 box_planning_state_;
  float jerk_weight_factor_;
  float follow_v_weight_factor_;
  ::google::protobuf::int32 acc_dcc_mode_;
  float follow_dis_error_;
  ::google::protobuf::int32 real_time_ob_avoid_state_;
  ::google::protobuf::int32 no_real_time_cnt_;
  float cog_linear_velocity_;
  float dis_to_virtual_wall_;
  ::google::protobuf::int32 sentence_action_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugMotionPlanImpl();
};
// -------------------------------------------------------------------

class STpair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.STpair) */ {
 public:
  STpair();
  virtual ~STpair();

  STpair(const STpair& from);

  inline STpair& operator=(const STpair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  STpair(STpair&& from) noexcept
    : STpair() {
    *this = ::std::move(from);
  }

  inline STpair& operator=(STpair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const STpair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const STpair* internal_default_instance() {
    return reinterpret_cast<const STpair*>(
               &_STpair_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(STpair* other);
  friend void swap(STpair& a, STpair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline STpair* New() const PROTOBUF_FINAL { return New(NULL); }

  STpair* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const STpair& from);
  void MergeFrom(const STpair& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(STpair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float t = 1;
  void clear_t();
  static const int kTFieldNumber = 1;
  float t() const;
  void set_t(float value);

  // float min_s = 2;
  void clear_min_s();
  static const int kMinSFieldNumber = 2;
  float min_s() const;
  void set_min_s(float value);

  // float max_s = 3;
  void clear_max_s();
  static const int kMaxSFieldNumber = 3;
  float max_s() const;
  void set_max_s(float value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.STpair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float t_;
  float min_s_;
  float max_s_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSTpairImpl();
};
// -------------------------------------------------------------------

class DebugPdObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.DebugPdObject) */ {
 public:
  DebugPdObject();
  virtual ~DebugPdObject();

  DebugPdObject(const DebugPdObject& from);

  inline DebugPdObject& operator=(const DebugPdObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugPdObject(DebugPdObject&& from) noexcept
    : DebugPdObject() {
    *this = ::std::move(from);
  }

  inline DebugPdObject& operator=(DebugPdObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugPdObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugPdObject* internal_default_instance() {
    return reinterpret_cast<const DebugPdObject*>(
               &_DebugPdObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DebugPdObject* other);
  friend void swap(DebugPdObject& a, DebugPdObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugPdObject* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugPdObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugPdObject& from);
  void MergeFrom(const DebugPdObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugPdObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string lane_ids = 1;
  int lane_ids_size() const;
  void clear_lane_ids();
  static const int kLaneIdsFieldNumber = 1;
  const ::std::string& lane_ids(int index) const;
  ::std::string* mutable_lane_ids(int index);
  void set_lane_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_lane_ids(int index, ::std::string&& value);
  #endif
  void set_lane_ids(int index, const char* value);
  void set_lane_ids(int index, const char* value, size_t size);
  ::std::string* add_lane_ids();
  void add_lane_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_lane_ids(::std::string&& value);
  #endif
  void add_lane_ids(const char* value);
  void add_lane_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& lane_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_lane_ids();

  // repeated .planning_debug_msgs.STpair st = 4;
  int st_size() const;
  void clear_st();
  static const int kStFieldNumber = 4;
  const ::planning_debug_msgs::STpair& st(int index) const;
  ::planning_debug_msgs::STpair* mutable_st(int index);
  ::planning_debug_msgs::STpair* add_st();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::STpair >*
      mutable_st();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::STpair >&
      st() const;

  // repeated float range_a = 5;
  int range_a_size() const;
  void clear_range_a();
  static const int kRangeAFieldNumber = 5;
  float range_a(int index) const;
  void set_range_a(int index, float value);
  void add_range_a(float value);
  const ::google::protobuf::RepeatedField< float >&
      range_a() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_range_a();

  // repeated float range_pd_s = 6;
  int range_pd_s_size() const;
  void clear_range_pd_s();
  static const int kRangePdSFieldNumber = 6;
  float range_pd_s(int index) const;
  void set_range_pd_s(int index, float value);
  void add_range_pd_s(float value);
  const ::google::protobuf::RepeatedField< float >&
      range_pd_s() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_range_pd_s();

  // bool right_of_way = 2;
  void clear_right_of_way();
  static const int kRightOfWayFieldNumber = 2;
  bool right_of_way() const;
  void set_right_of_way(bool value);

  // int32 conflict_type = 3;
  void clear_conflict_type();
  static const int kConflictTypeFieldNumber = 3;
  ::google::protobuf::int32 conflict_type() const;
  void set_conflict_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.DebugPdObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> lane_ids_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::STpair > st_;
  ::google::protobuf::RepeatedField< float > range_a_;
  mutable int _range_a_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > range_pd_s_;
  mutable int _range_pd_s_cached_byte_size_;
  bool right_of_way_;
  ::google::protobuf::int32 conflict_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugPdObjectImpl();
};
// -------------------------------------------------------------------

class DebugObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.DebugObject) */ {
 public:
  DebugObject();
  virtual ~DebugObject();

  DebugObject(const DebugObject& from);

  inline DebugObject& operator=(const DebugObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugObject(DebugObject&& from) noexcept
    : DebugObject() {
    *this = ::std::move(from);
  }

  inline DebugObject& operator=(DebugObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugObject* internal_default_instance() {
    return reinterpret_cast<const DebugObject*>(
               &_DebugObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(DebugObject* other);
  friend void swap(DebugObject& a, DebugObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugObject* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugObject& from);
  void MergeFrom(const DebugObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .planning_debug_msgs.DebugPdObject pd_objs = 18;
  int pd_objs_size() const;
  void clear_pd_objs();
  static const int kPdObjsFieldNumber = 18;
  const ::planning_debug_msgs::DebugPdObject& pd_objs(int index) const;
  ::planning_debug_msgs::DebugPdObject* mutable_pd_objs(int index);
  ::planning_debug_msgs::DebugPdObject* add_pd_objs();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugPdObject >*
      mutable_pd_objs();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugPdObject >&
      pd_objs() const;

  // string lane_id = 5;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 5;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lane_id(::std::string&& value);
  #endif
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 cell_num = 2;
  void clear_cell_num();
  static const int kCellNumFieldNumber = 2;
  ::google::protobuf::int32 cell_num() const;
  void set_cell_num(::google::protobuf::int32 value);

  // float acc = 3;
  void clear_acc();
  static const int kAccFieldNumber = 3;
  float acc() const;
  void set_acc(float value);

  // float speed = 4;
  void clear_speed();
  static const int kSpeedFieldNumber = 4;
  float speed() const;
  void set_speed(float value);

  // bool is_static = 6;
  void clear_is_static();
  static const int kIsStaticFieldNumber = 6;
  bool is_static() const;
  void set_is_static(bool value);

  // bool was_dynamic = 7;
  void clear_was_dynamic();
  static const int kWasDynamicFieldNumber = 7;
  bool was_dynamic() const;
  void set_was_dynamic(bool value);

  // bool need_focus = 8;
  void clear_need_focus();
  static const int kNeedFocusFieldNumber = 8;
  bool need_focus() const;
  void set_need_focus(bool value);

  // bool key_focus = 9;
  void clear_key_focus();
  static const int kKeyFocusFieldNumber = 9;
  bool key_focus() const;
  void set_key_focus(bool value);

  // bool is_reverse_traveling = 10;
  void clear_is_reverse_traveling();
  static const int kIsReverseTravelingFieldNumber = 10;
  bool is_reverse_traveling() const;
  void set_is_reverse_traveling(bool value);

  // float dis_to_junction = 11;
  void clear_dis_to_junction();
  static const int kDisToJunctionFieldNumber = 11;
  float dis_to_junction() const;
  void set_dis_to_junction(float value);

  // float s_l_min_s = 12;
  void clear_s_l_min_s();
  static const int kSLMinSFieldNumber = 12;
  float s_l_min_s() const;
  void set_s_l_min_s(float value);

  // float s_l_max_s = 13;
  void clear_s_l_max_s();
  static const int kSLMaxSFieldNumber = 13;
  float s_l_max_s() const;
  void set_s_l_max_s(float value);

  // float s_l_min_l = 14;
  void clear_s_l_min_l();
  static const int kSLMinLFieldNumber = 14;
  float s_l_min_l() const;
  void set_s_l_min_l(float value);

  // double nearest_xg = 16;
  void clear_nearest_xg();
  static const int kNearestXgFieldNumber = 16;
  double nearest_xg() const;
  void set_nearest_xg(double value);

  // double nearest_yg = 17;
  void clear_nearest_yg();
  static const int kNearestYgFieldNumber = 17;
  double nearest_yg() const;
  void set_nearest_yg(double value);

  // float s_l_max_l = 15;
  void clear_s_l_max_l();
  static const int kSLMaxLFieldNumber = 15;
  float s_l_max_l() const;
  void set_s_l_max_l(float value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.DebugObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugPdObject > pd_objs_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 cell_num_;
  float acc_;
  float speed_;
  bool is_static_;
  bool was_dynamic_;
  bool need_focus_;
  bool key_focus_;
  bool is_reverse_traveling_;
  float dis_to_junction_;
  float s_l_min_s_;
  float s_l_max_s_;
  float s_l_min_l_;
  double nearest_xg_;
  double nearest_yg_;
  float s_l_max_l_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugObjectImpl();
};
// -------------------------------------------------------------------

class DebugGap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.DebugGap) */ {
 public:
  DebugGap();
  virtual ~DebugGap();

  DebugGap(const DebugGap& from);

  inline DebugGap& operator=(const DebugGap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugGap(DebugGap&& from) noexcept
    : DebugGap() {
    *this = ::std::move(from);
  }

  inline DebugGap& operator=(DebugGap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugGap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugGap* internal_default_instance() {
    return reinterpret_cast<const DebugGap*>(
               &_DebugGap_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(DebugGap* other);
  friend void swap(DebugGap& a, DebugGap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugGap* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugGap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugGap& from);
  void MergeFrom(const DebugGap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugGap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 start_id = 1;
  void clear_start_id();
  static const int kStartIdFieldNumber = 1;
  ::google::protobuf::int32 start_id() const;
  void set_start_id(::google::protobuf::int32 value);

  // int32 end_id = 2;
  void clear_end_id();
  static const int kEndIdFieldNumber = 2;
  ::google::protobuf::int32 end_id() const;
  void set_end_id(::google::protobuf::int32 value);

  // float aim_min_s = 3;
  void clear_aim_min_s();
  static const int kAimMinSFieldNumber = 3;
  float aim_min_s() const;
  void set_aim_min_s(float value);

  // float aim_max_s = 4;
  void clear_aim_max_s();
  static const int kAimMaxSFieldNumber = 4;
  float aim_max_s() const;
  void set_aim_max_s(float value);

  // float allow_min_v = 5;
  void clear_allow_min_v();
  static const int kAllowMinVFieldNumber = 5;
  float allow_min_v() const;
  void set_allow_min_v(float value);

  // float allow_max_v = 6;
  void clear_allow_max_v();
  static const int kAllowMaxVFieldNumber = 6;
  float allow_max_v() const;
  void set_allow_max_v(float value);

  // float allow_min_t = 7;
  void clear_allow_min_t();
  static const int kAllowMinTFieldNumber = 7;
  float allow_min_t() const;
  void set_allow_min_t(float value);

  // uint32 feasibility_level = 8;
  void clear_feasibility_level();
  static const int kFeasibilityLevelFieldNumber = 8;
  ::google::protobuf::uint32 feasibility_level() const;
  void set_feasibility_level(::google::protobuf::uint32 value);

  // uint32 safety_level = 9;
  void clear_safety_level();
  static const int kSafetyLevelFieldNumber = 9;
  ::google::protobuf::uint32 safety_level() const;
  void set_safety_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.DebugGap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 start_id_;
  ::google::protobuf::int32 end_id_;
  float aim_min_s_;
  float aim_max_s_;
  float allow_min_v_;
  float allow_max_v_;
  float allow_min_t_;
  ::google::protobuf::uint32 feasibility_level_;
  ::google::protobuf::uint32 safety_level_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugGapImpl();
};
// -------------------------------------------------------------------

class DebugLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.DebugLine) */ {
 public:
  DebugLine();
  virtual ~DebugLine();

  DebugLine(const DebugLine& from);

  inline DebugLine& operator=(const DebugLine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugLine(DebugLine&& from) noexcept
    : DebugLine() {
    *this = ::std::move(from);
  }

  inline DebugLine& operator=(DebugLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugLine* internal_default_instance() {
    return reinterpret_cast<const DebugLine*>(
               &_DebugLine_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(DebugLine* other);
  friend void swap(DebugLine& a, DebugLine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugLine* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugLine* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugLine& from);
  void MergeFrom(const DebugLine& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string lane_ids = 1;
  int lane_ids_size() const;
  void clear_lane_ids();
  static const int kLaneIdsFieldNumber = 1;
  const ::std::string& lane_ids(int index) const;
  ::std::string* mutable_lane_ids(int index);
  void set_lane_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_lane_ids(int index, ::std::string&& value);
  #endif
  void set_lane_ids(int index, const char* value);
  void set_lane_ids(int index, const char* value, size_t size);
  ::std::string* add_lane_ids();
  void add_lane_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_lane_ids(::std::string&& value);
  #endif
  void add_lane_ids(const char* value);
  void add_lane_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& lane_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_lane_ids();

  // repeated .planning_debug_msgs.DebugObject objs = 11;
  int objs_size() const;
  void clear_objs();
  static const int kObjsFieldNumber = 11;
  const ::planning_debug_msgs::DebugObject& objs(int index) const;
  ::planning_debug_msgs::DebugObject* mutable_objs(int index);
  ::planning_debug_msgs::DebugObject* add_objs();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugObject >*
      mutable_objs();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugObject >&
      objs() const;

  // repeated .planning_debug_msgs.DebugGap gaps = 14;
  int gaps_size() const;
  void clear_gaps();
  static const int kGapsFieldNumber = 14;
  const ::planning_debug_msgs::DebugGap& gaps(int index) const;
  ::planning_debug_msgs::DebugGap* mutable_gaps(int index);
  ::planning_debug_msgs::DebugGap* add_gaps();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugGap >*
      mutable_gaps();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugGap >&
      gaps() const;

  // .planning_debug_msgs.DebugState block_state = 5;
  bool has_block_state() const;
  void clear_block_state();
  static const int kBlockStateFieldNumber = 5;
  const ::planning_debug_msgs::DebugState& block_state() const;
  ::planning_debug_msgs::DebugState* release_block_state();
  ::planning_debug_msgs::DebugState* mutable_block_state();
  void set_allocated_block_state(::planning_debug_msgs::DebugState* block_state);

  // .planning_debug_msgs.DebugState slow_state = 6;
  bool has_slow_state() const;
  void clear_slow_state();
  static const int kSlowStateFieldNumber = 6;
  const ::planning_debug_msgs::DebugState& slow_state() const;
  ::planning_debug_msgs::DebugState* release_slow_state();
  ::planning_debug_msgs::DebugState* mutable_slow_state();
  void set_allocated_slow_state(::planning_debug_msgs::DebugState* slow_state);

  // float speed_limit = 2;
  void clear_speed_limit();
  static const int kSpeedLimitFieldNumber = 2;
  float speed_limit() const;
  void set_speed_limit(float value);

  // float dis2line = 3;
  void clear_dis2line();
  static const int kDis2LineFieldNumber = 3;
  float dis2line() const;
  void set_dis2line(float value);

  // float distance_to_mission_point = 4;
  void clear_distance_to_mission_point();
  static const int kDistanceToMissionPointFieldNumber = 4;
  float distance_to_mission_point() const;
  void set_distance_to_mission_point(float value);

  // int32 global_cost = 7;
  void clear_global_cost();
  static const int kGlobalCostFieldNumber = 7;
  ::google::protobuf::int32 global_cost() const;
  void set_global_cost(::google::protobuf::int32 value);

  // float speed_cost = 8;
  void clear_speed_cost();
  static const int kSpeedCostFieldNumber = 8;
  float speed_cost() const;
  void set_speed_cost(float value);

  // float long_term_speed = 9;
  void clear_long_term_speed();
  static const int kLongTermSpeedFieldNumber = 9;
  float long_term_speed() const;
  void set_long_term_speed(float value);

  // float short_term_speed = 10;
  void clear_short_term_speed();
  static const int kShortTermSpeedFieldNumber = 10;
  float short_term_speed() const;
  void set_short_term_speed(float value);

  // bool line_queue = 12;
  void clear_line_queue();
  static const int kLineQueueFieldNumber = 12;
  bool line_queue() const;
  void set_line_queue(bool value);

  // bool is_congestion = 13;
  void clear_is_congestion();
  static const int kIsCongestionFieldNumber = 13;
  bool is_congestion() const;
  void set_is_congestion(bool value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.DebugLine)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> lane_ids_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugObject > objs_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugGap > gaps_;
  ::planning_debug_msgs::DebugState* block_state_;
  ::planning_debug_msgs::DebugState* slow_state_;
  float speed_limit_;
  float dis2line_;
  float distance_to_mission_point_;
  ::google::protobuf::int32 global_cost_;
  float speed_cost_;
  float long_term_speed_;
  float short_term_speed_;
  bool line_queue_;
  bool is_congestion_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugLineImpl();
};
// -------------------------------------------------------------------

class DebugLight : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.DebugLight) */ {
 public:
  DebugLight();
  virtual ~DebugLight();

  DebugLight(const DebugLight& from);

  inline DebugLight& operator=(const DebugLight& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugLight(DebugLight&& from) noexcept
    : DebugLight() {
    *this = ::std::move(from);
  }

  inline DebugLight& operator=(DebugLight&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugLight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugLight* internal_default_instance() {
    return reinterpret_cast<const DebugLight*>(
               &_DebugLight_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(DebugLight* other);
  friend void swap(DebugLight& a, DebugLight& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugLight* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugLight* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugLight& from);
  void MergeFrom(const DebugLight& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugLight* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string lane_ids = 1;
  int lane_ids_size() const;
  void clear_lane_ids();
  static const int kLaneIdsFieldNumber = 1;
  const ::std::string& lane_ids(int index) const;
  ::std::string* mutable_lane_ids(int index);
  void set_lane_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_lane_ids(int index, ::std::string&& value);
  #endif
  void set_lane_ids(int index, const char* value);
  void set_lane_ids(int index, const char* value, size_t size);
  ::std::string* add_lane_ids();
  void add_lane_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_lane_ids(::std::string&& value);
  #endif
  void add_lane_ids(const char* value);
  void add_lane_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& lane_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_lane_ids();

  // string light_id = 6;
  void clear_light_id();
  static const int kLightIdFieldNumber = 6;
  const ::std::string& light_id() const;
  void set_light_id(const ::std::string& value);
  #if LANG_CXX11
  void set_light_id(::std::string&& value);
  #endif
  void set_light_id(const char* value);
  void set_light_id(const char* value, size_t size);
  ::std::string* mutable_light_id();
  ::std::string* release_light_id();
  void set_allocated_light_id(::std::string* light_id);

  // int32 jc_light_state = 2;
  void clear_jc_light_state();
  static const int kJcLightStateFieldNumber = 2;
  ::google::protobuf::int32 jc_light_state() const;
  void set_jc_light_state(::google::protobuf::int32 value);

  // bool response_area_light = 3;
  void clear_response_area_light();
  static const int kResponseAreaLightFieldNumber = 3;
  bool response_area_light() const;
  void set_response_area_light(bool value);

  // int32 unkey_color = 4;
  void clear_unkey_color();
  static const int kUnkeyColorFieldNumber = 4;
  ::google::protobuf::int32 unkey_color() const;
  void set_unkey_color(::google::protobuf::int32 value);

  // int32 area_color = 5;
  void clear_area_color();
  static const int kAreaColorFieldNumber = 5;
  ::google::protobuf::int32 area_color() const;
  void set_area_color(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.DebugLight)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> lane_ids_;
  ::google::protobuf::internal::ArenaStringPtr light_id_;
  ::google::protobuf::int32 jc_light_state_;
  bool response_area_light_;
  ::google::protobuf::int32 unkey_color_;
  ::google::protobuf::int32 area_color_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugLightImpl();
};
// -------------------------------------------------------------------

class DebugCognition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.DebugCognition) */ {
 public:
  DebugCognition();
  virtual ~DebugCognition();

  DebugCognition(const DebugCognition& from);

  inline DebugCognition& operator=(const DebugCognition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugCognition(DebugCognition&& from) noexcept
    : DebugCognition() {
    *this = ::std::move(from);
  }

  inline DebugCognition& operator=(DebugCognition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugCognition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugCognition* internal_default_instance() {
    return reinterpret_cast<const DebugCognition*>(
               &_DebugCognition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(DebugCognition* other);
  friend void swap(DebugCognition& a, DebugCognition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugCognition* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugCognition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugCognition& from);
  void MergeFrom(const DebugCognition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugCognition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string reference_lane_ids = 2;
  int reference_lane_ids_size() const;
  void clear_reference_lane_ids();
  static const int kReferenceLaneIdsFieldNumber = 2;
  const ::std::string& reference_lane_ids(int index) const;
  ::std::string* mutable_reference_lane_ids(int index);
  void set_reference_lane_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_reference_lane_ids(int index, ::std::string&& value);
  #endif
  void set_reference_lane_ids(int index, const char* value);
  void set_reference_lane_ids(int index, const char* value, size_t size);
  ::std::string* add_reference_lane_ids();
  void add_reference_lane_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_reference_lane_ids(::std::string&& value);
  #endif
  void add_reference_lane_ids(const char* value);
  void add_reference_lane_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& reference_lane_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_reference_lane_ids();

  // repeated string reference_target_ids = 3;
  int reference_target_ids_size() const;
  void clear_reference_target_ids();
  static const int kReferenceTargetIdsFieldNumber = 3;
  const ::std::string& reference_target_ids(int index) const;
  ::std::string* mutable_reference_target_ids(int index);
  void set_reference_target_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_reference_target_ids(int index, ::std::string&& value);
  #endif
  void set_reference_target_ids(int index, const char* value);
  void set_reference_target_ids(int index, const char* value, size_t size);
  ::std::string* add_reference_target_ids();
  void add_reference_target_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_reference_target_ids(::std::string&& value);
  #endif
  void add_reference_target_ids(const char* value);
  void add_reference_target_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& reference_target_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_reference_target_ids();

  // repeated uint32 key_line_id = 7;
  int key_line_id_size() const;
  void clear_key_line_id();
  static const int kKeyLineIdFieldNumber = 7;
  ::google::protobuf::uint32 key_line_id(int index) const;
  void set_key_line_id(int index, ::google::protobuf::uint32 value);
  void add_key_line_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      key_line_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_key_line_id();

  // repeated .planning_debug_msgs.DebugLine current_line = 12;
  int current_line_size() const;
  void clear_current_line();
  static const int kCurrentLineFieldNumber = 12;
  const ::planning_debug_msgs::DebugLine& current_line(int index) const;
  ::planning_debug_msgs::DebugLine* mutable_current_line(int index);
  ::planning_debug_msgs::DebugLine* add_current_line();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugLine >*
      mutable_current_line();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugLine >&
      current_line() const;

  // repeated .planning_debug_msgs.DebugLine left_line = 13;
  int left_line_size() const;
  void clear_left_line();
  static const int kLeftLineFieldNumber = 13;
  const ::planning_debug_msgs::DebugLine& left_line(int index) const;
  ::planning_debug_msgs::DebugLine* mutable_left_line(int index);
  ::planning_debug_msgs::DebugLine* add_left_line();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugLine >*
      mutable_left_line();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugLine >&
      left_line() const;

  // repeated .planning_debug_msgs.DebugLine right_line = 14;
  int right_line_size() const;
  void clear_right_line();
  static const int kRightLineFieldNumber = 14;
  const ::planning_debug_msgs::DebugLine& right_line(int index) const;
  ::planning_debug_msgs::DebugLine* mutable_right_line(int index);
  ::planning_debug_msgs::DebugLine* add_right_line();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugLine >*
      mutable_right_line();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugLine >&
      right_line() const;

  // repeated .planning_debug_msgs.DebugLine local_line = 15;
  int local_line_size() const;
  void clear_local_line();
  static const int kLocalLineFieldNumber = 15;
  const ::planning_debug_msgs::DebugLine& local_line(int index) const;
  ::planning_debug_msgs::DebugLine* mutable_local_line(int index);
  ::planning_debug_msgs::DebugLine* add_local_line();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugLine >*
      mutable_local_line();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugLine >&
      local_line() const;

  // .planning_debug_msgs.DebugLight light_info = 16;
  bool has_light_info() const;
  void clear_light_info();
  static const int kLightInfoFieldNumber = 16;
  const ::planning_debug_msgs::DebugLight& light_info() const;
  ::planning_debug_msgs::DebugLight* release_light_info();
  ::planning_debug_msgs::DebugLight* mutable_light_info();
  void set_allocated_light_info(::planning_debug_msgs::DebugLight* light_info);

  // double time_stamp = 1;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  double time_stamp() const;
  void set_time_stamp(double value);

  // uint32 mapengine_index = 4;
  void clear_mapengine_index();
  static const int kMapengineIndexFieldNumber = 4;
  ::google::protobuf::uint32 mapengine_index() const;
  void set_mapengine_index(::google::protobuf::uint32 value);

  // uint32 correction_index = 5;
  void clear_correction_index();
  static const int kCorrectionIndexFieldNumber = 5;
  ::google::protobuf::uint32 correction_index() const;
  void set_correction_index(::google::protobuf::uint32 value);

  // uint32 target_index = 6;
  void clear_target_index();
  static const int kTargetIndexFieldNumber = 6;
  ::google::protobuf::uint32 target_index() const;
  void set_target_index(::google::protobuf::uint32 value);

  // bool in_current = 8;
  void clear_in_current();
  static const int kInCurrentFieldNumber = 8;
  bool in_current() const;
  void set_in_current(bool value);

  // bool in_target = 9;
  void clear_in_target();
  static const int kInTargetFieldNumber = 9;
  bool in_target() const;
  void set_in_target(bool value);

  // float map_delta_time = 10;
  void clear_map_delta_time();
  static const int kMapDeltaTimeFieldNumber = 10;
  float map_delta_time() const;
  void set_map_delta_time(float value);

  // float imu_delta_time = 11;
  void clear_imu_delta_time();
  static const int kImuDeltaTimeFieldNumber = 11;
  float imu_delta_time() const;
  void set_imu_delta_time(float value);

  // uint32 drive_state = 17;
  void clear_drive_state();
  static const int kDriveStateFieldNumber = 17;
  ::google::protobuf::uint32 drive_state() const;
  void set_drive_state(::google::protobuf::uint32 value);

  // float time_cost_ms = 18;
  void clear_time_cost_ms();
  static const int kTimeCostMsFieldNumber = 18;
  float time_cost_ms() const;
  void set_time_cost_ms(float value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.DebugCognition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> reference_lane_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> reference_target_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > key_line_id_;
  mutable int _key_line_id_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugLine > current_line_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugLine > left_line_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugLine > right_line_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugLine > local_line_;
  ::planning_debug_msgs::DebugLight* light_info_;
  double time_stamp_;
  ::google::protobuf::uint32 mapengine_index_;
  ::google::protobuf::uint32 correction_index_;
  ::google::protobuf::uint32 target_index_;
  bool in_current_;
  bool in_target_;
  float map_delta_time_;
  float imu_delta_time_;
  ::google::protobuf::uint32 drive_state_;
  float time_cost_ms_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugCognitionImpl();
};
// -------------------------------------------------------------------

class DecisionPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.DecisionPoint) */ {
 public:
  DecisionPoint();
  virtual ~DecisionPoint();

  DecisionPoint(const DecisionPoint& from);

  inline DecisionPoint& operator=(const DecisionPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DecisionPoint(DecisionPoint&& from) noexcept
    : DecisionPoint() {
    *this = ::std::move(from);
  }

  inline DecisionPoint& operator=(DecisionPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DecisionPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DecisionPoint* internal_default_instance() {
    return reinterpret_cast<const DecisionPoint*>(
               &_DecisionPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(DecisionPoint* other);
  friend void swap(DecisionPoint& a, DecisionPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DecisionPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  DecisionPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DecisionPoint& from);
  void MergeFrom(const DecisionPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DecisionPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 t = 1;
  void clear_t();
  static const int kTFieldNumber = 1;
  ::google::protobuf::int32 t() const;
  void set_t(::google::protobuf::int32 value);

  // int32 s = 2;
  void clear_s();
  static const int kSFieldNumber = 2;
  ::google::protobuf::int32 s() const;
  void set_s(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.DecisionPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 t_;
  ::google::protobuf::int32 s_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDecisionPointImpl();
};
// -------------------------------------------------------------------

class STGraph : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.STGraph) */ {
 public:
  STGraph();
  virtual ~STGraph();

  STGraph(const STGraph& from);

  inline STGraph& operator=(const STGraph& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  STGraph(STGraph&& from) noexcept
    : STGraph() {
    *this = ::std::move(from);
  }

  inline STGraph& operator=(STGraph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const STGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const STGraph* internal_default_instance() {
    return reinterpret_cast<const STGraph*>(
               &_STGraph_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(STGraph* other);
  friend void swap(STGraph& a, STGraph& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline STGraph* New() const PROTOBUF_FINAL { return New(NULL); }

  STGraph* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const STGraph& from);
  void MergeFrom(const STGraph& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(STGraph* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float st_t = 18;
  int st_t_size() const;
  void clear_st_t();
  static const int kStTFieldNumber = 18;
  float st_t(int index) const;
  void set_st_t(int index, float value);
  void add_st_t(float value);
  const ::google::protobuf::RepeatedField< float >&
      st_t() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_st_t();

  // repeated float st_min_s = 19;
  int st_min_s_size() const;
  void clear_st_min_s();
  static const int kStMinSFieldNumber = 19;
  float st_min_s(int index) const;
  void set_st_min_s(int index, float value);
  void add_st_min_s(float value);
  const ::google::protobuf::RepeatedField< float >&
      st_min_s() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_st_min_s();

  // repeated float st_max_s = 20;
  int st_max_s_size() const;
  void clear_st_max_s();
  static const int kStMaxSFieldNumber = 20;
  float st_max_s(int index) const;
  void set_st_max_s(int index, float value);
  void add_st_max_s(float value);
  const ::google::protobuf::RepeatedField< float >&
      st_max_s() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_st_max_s();

  // repeated float t = 22;
  int t_size() const;
  void clear_t();
  static const int kTFieldNumber = 22;
  float t(int index) const;
  void set_t(int index, float value);
  void add_t(float value);
  const ::google::protobuf::RepeatedField< float >&
      t() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_t();

  // repeated float min_s = 23;
  int min_s_size() const;
  void clear_min_s();
  static const int kMinSFieldNumber = 23;
  float min_s(int index) const;
  void set_min_s(int index, float value);
  void add_min_s(float value);
  const ::google::protobuf::RepeatedField< float >&
      min_s() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_min_s();

  // repeated float max_s = 24;
  int max_s_size() const;
  void clear_max_s();
  static const int kMaxSFieldNumber = 24;
  float max_s(int index) const;
  void set_max_s(int index, float value);
  void add_max_s(float value);
  const ::google::protobuf::RepeatedField< float >&
      max_s() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_max_s();

  // string lane_id = 3;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 3;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lane_id(::std::string&& value);
  #endif
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 cell_num = 2;
  void clear_cell_num();
  static const int kCellNumFieldNumber = 2;
  ::google::protobuf::int32 cell_num() const;
  void set_cell_num(::google::protobuf::int32 value);

  // bool is_static = 4;
  void clear_is_static();
  static const int kIsStaticFieldNumber = 4;
  bool is_static() const;
  void set_is_static(bool value);

  // bool was_dynamic = 5;
  void clear_was_dynamic();
  static const int kWasDynamicFieldNumber = 5;
  bool was_dynamic() const;
  void set_was_dynamic(bool value);

  // bool right_of_way = 6;
  void clear_right_of_way();
  static const int kRightOfWayFieldNumber = 6;
  bool right_of_way() const;
  void set_right_of_way(bool value);

  // int32 conflict_type = 7;
  void clear_conflict_type();
  static const int kConflictTypeFieldNumber = 7;
  ::google::protobuf::int32 conflict_type() const;
  void set_conflict_type(::google::protobuf::int32 value);

  // float s_l_min_s = 8;
  void clear_s_l_min_s();
  static const int kSLMinSFieldNumber = 8;
  float s_l_min_s() const;
  void set_s_l_min_s(float value);

  // float s_l_max_s = 9;
  void clear_s_l_max_s();
  static const int kSLMaxSFieldNumber = 9;
  float s_l_max_s() const;
  void set_s_l_max_s(float value);

  // float s_l_min_l = 10;
  void clear_s_l_min_l();
  static const int kSLMinLFieldNumber = 10;
  float s_l_min_l() const;
  void set_s_l_min_l(float value);

  // float s_l_max_l = 11;
  void clear_s_l_max_l();
  static const int kSLMaxLFieldNumber = 11;
  float s_l_max_l() const;
  void set_s_l_max_l(float value);

  // float t_1 = 12;
  void clear_t_1();
  static const int kT1FieldNumber = 12;
  float t_1() const;
  void set_t_1(float value);

  // float min_s_1 = 13;
  void clear_min_s_1();
  static const int kMinS1FieldNumber = 13;
  float min_s_1() const;
  void set_min_s_1(float value);

  // float max_s_1 = 14;
  void clear_max_s_1();
  static const int kMaxS1FieldNumber = 14;
  float max_s_1() const;
  void set_max_s_1(float value);

  // float t_2 = 15;
  void clear_t_2();
  static const int kT2FieldNumber = 15;
  float t_2() const;
  void set_t_2(float value);

  // float min_s_2 = 16;
  void clear_min_s_2();
  static const int kMinS2FieldNumber = 16;
  float min_s_2() const;
  void set_min_s_2(float value);

  // float max_s_2 = 17;
  void clear_max_s_2();
  static const int kMaxS2FieldNumber = 17;
  float max_s_2() const;
  void set_max_s_2(float value);

  // float speed = 21;
  void clear_speed();
  static const int kSpeedFieldNumber = 21;
  float speed() const;
  void set_speed(float value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.STGraph)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > st_t_;
  mutable int _st_t_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > st_min_s_;
  mutable int _st_min_s_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > st_max_s_;
  mutable int _st_max_s_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > t_;
  mutable int _t_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > min_s_;
  mutable int _min_s_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > max_s_;
  mutable int _max_s_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 cell_num_;
  bool is_static_;
  bool was_dynamic_;
  bool right_of_way_;
  ::google::protobuf::int32 conflict_type_;
  float s_l_min_s_;
  float s_l_max_s_;
  float s_l_min_l_;
  float s_l_max_l_;
  float t_1_;
  float min_s_1_;
  float max_s_1_;
  float t_2_;
  float min_s_2_;
  float max_s_2_;
  float speed_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSTGraphImpl();
};
// -------------------------------------------------------------------

class DebugSTGraph : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.DebugSTGraph) */ {
 public:
  DebugSTGraph();
  virtual ~DebugSTGraph();

  DebugSTGraph(const DebugSTGraph& from);

  inline DebugSTGraph& operator=(const DebugSTGraph& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugSTGraph(DebugSTGraph&& from) noexcept
    : DebugSTGraph() {
    *this = ::std::move(from);
  }

  inline DebugSTGraph& operator=(DebugSTGraph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugSTGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugSTGraph* internal_default_instance() {
    return reinterpret_cast<const DebugSTGraph*>(
               &_DebugSTGraph_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(DebugSTGraph* other);
  friend void swap(DebugSTGraph& a, DebugSTGraph& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugSTGraph* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugSTGraph* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugSTGraph& from);
  void MergeFrom(const DebugSTGraph& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugSTGraph* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .planning_debug_msgs.STGraph cognition_objects = 1;
  int cognition_objects_size() const;
  void clear_cognition_objects();
  static const int kCognitionObjectsFieldNumber = 1;
  const ::planning_debug_msgs::STGraph& cognition_objects(int index) const;
  ::planning_debug_msgs::STGraph* mutable_cognition_objects(int index);
  ::planning_debug_msgs::STGraph* add_cognition_objects();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::STGraph >*
      mutable_cognition_objects();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::STGraph >&
      cognition_objects() const;

  // repeated .planning_debug_msgs.DecisionPoint decision_points = 2;
  int decision_points_size() const;
  void clear_decision_points();
  static const int kDecisionPointsFieldNumber = 2;
  const ::planning_debug_msgs::DecisionPoint& decision_points(int index) const;
  ::planning_debug_msgs::DecisionPoint* mutable_decision_points(int index);
  ::planning_debug_msgs::DecisionPoint* add_decision_points();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DecisionPoint >*
      mutable_decision_points();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DecisionPoint >&
      decision_points() const;

  // repeated .planning_debug_msgs.STGraph original_objects = 3;
  int original_objects_size() const;
  void clear_original_objects();
  static const int kOriginalObjectsFieldNumber = 3;
  const ::planning_debug_msgs::STGraph& original_objects(int index) const;
  ::planning_debug_msgs::STGraph* mutable_original_objects(int index);
  ::planning_debug_msgs::STGraph* add_original_objects();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::STGraph >*
      mutable_original_objects();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::STGraph >&
      original_objects() const;

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.DebugSTGraph)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::STGraph > cognition_objects_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DecisionPoint > decision_points_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::STGraph > original_objects_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugSTGraphImpl();
};
// -------------------------------------------------------------------

class Sentence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.Sentence) */ {
 public:
  Sentence();
  virtual ~Sentence();

  Sentence(const Sentence& from);

  inline Sentence& operator=(const Sentence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Sentence(Sentence&& from) noexcept
    : Sentence() {
    *this = ::std::move(from);
  }

  inline Sentence& operator=(Sentence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Sentence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sentence* internal_default_instance() {
    return reinterpret_cast<const Sentence*>(
               &_Sentence_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(Sentence* other);
  friend void swap(Sentence& a, Sentence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Sentence* New() const PROTOBUF_FINAL { return New(NULL); }

  Sentence* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Sentence& from);
  void MergeFrom(const Sentence& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Sentence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string action = 1;
  void clear_action();
  static const int kActionFieldNumber = 1;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  #if LANG_CXX11
  void set_action(::std::string&& value);
  #endif
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // uint32 direction = 2;
  void clear_direction();
  static const int kDirectionFieldNumber = 2;
  ::google::protobuf::uint32 direction() const;
  void set_direction(::google::protobuf::uint32 value);

  // float dis_to_end = 3;
  void clear_dis_to_end();
  static const int kDisToEndFieldNumber = 3;
  float dis_to_end() const;
  void set_dis_to_end(float value);

  // float dis_to_boundary = 4;
  void clear_dis_to_boundary();
  static const int kDisToBoundaryFieldNumber = 4;
  float dis_to_boundary() const;
  void set_dis_to_boundary(float value);

  // float xg = 5;
  void clear_xg();
  static const int kXgFieldNumber = 5;
  float xg() const;
  void set_xg(float value);

  // float yg = 6;
  void clear_yg();
  static const int kYgFieldNumber = 6;
  float yg() const;
  void set_yg(float value);

  // float heading = 7;
  void clear_heading();
  static const int kHeadingFieldNumber = 7;
  float heading() const;
  void set_heading(float value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.Sentence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  ::google::protobuf::uint32 direction_;
  float dis_to_end_;
  float dis_to_boundary_;
  float xg_;
  float yg_;
  float heading_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSentenceImpl();
};
// -------------------------------------------------------------------

class DebugDecision : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.DebugDecision) */ {
 public:
  DebugDecision();
  virtual ~DebugDecision();

  DebugDecision(const DebugDecision& from);

  inline DebugDecision& operator=(const DebugDecision& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugDecision(DebugDecision&& from) noexcept
    : DebugDecision() {
    *this = ::std::move(from);
  }

  inline DebugDecision& operator=(DebugDecision&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugDecision& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugDecision* internal_default_instance() {
    return reinterpret_cast<const DebugDecision*>(
               &_DebugDecision_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(DebugDecision* other);
  friend void swap(DebugDecision& a, DebugDecision& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugDecision* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugDecision* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugDecision& from);
  void MergeFrom(const DebugDecision& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugDecision* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float boundary_s = 5;
  int boundary_s_size() const;
  void clear_boundary_s();
  static const int kBoundarySFieldNumber = 5;
  float boundary_s(int index) const;
  void set_boundary_s(int index, float value);
  void add_boundary_s(float value);
  const ::google::protobuf::RepeatedField< float >&
      boundary_s() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_boundary_s();

  // repeated float left_boundary = 6;
  int left_boundary_size() const;
  void clear_left_boundary();
  static const int kLeftBoundaryFieldNumber = 6;
  float left_boundary(int index) const;
  void set_left_boundary(int index, float value);
  void add_left_boundary(float value);
  const ::google::protobuf::RepeatedField< float >&
      left_boundary() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_left_boundary();

  // repeated float right_boundary = 7;
  int right_boundary_size() const;
  void clear_right_boundary();
  static const int kRightBoundaryFieldNumber = 7;
  float right_boundary(int index) const;
  void set_right_boundary(int index, float value);
  void add_right_boundary(float value);
  const ::google::protobuf::RepeatedField< float >&
      right_boundary() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_right_boundary();

  // repeated int32 object_id = 8;
  int object_id_size() const;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 8;
  ::google::protobuf::int32 object_id(int index) const;
  void set_object_id(int index, ::google::protobuf::int32 value);
  void add_object_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      object_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_object_id();

  // repeated int32 object_decision = 9;
  int object_decision_size() const;
  void clear_object_decision();
  static const int kObjectDecisionFieldNumber = 9;
  ::google::protobuf::int32 object_decision(int index) const;
  void set_object_decision(int index, ::google::protobuf::int32 value);
  void add_object_decision(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      object_decision() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_object_decision();

  // repeated .planning_debug_msgs.Sentence sentences = 10;
  int sentences_size() const;
  void clear_sentences();
  static const int kSentencesFieldNumber = 10;
  const ::planning_debug_msgs::Sentence& sentences(int index) const;
  ::planning_debug_msgs::Sentence* mutable_sentences(int index);
  ::planning_debug_msgs::Sentence* add_sentences();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::Sentence >*
      mutable_sentences();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::Sentence >&
      sentences() const;

  // repeated string passable_lane_ids = 32;
  int passable_lane_ids_size() const;
  void clear_passable_lane_ids();
  static const int kPassableLaneIdsFieldNumber = 32;
  const ::std::string& passable_lane_ids(int index) const;
  ::std::string* mutable_passable_lane_ids(int index);
  void set_passable_lane_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_passable_lane_ids(int index, ::std::string&& value);
  #endif
  void set_passable_lane_ids(int index, const char* value);
  void set_passable_lane_ids(int index, const char* value, size_t size);
  ::std::string* add_passable_lane_ids();
  void add_passable_lane_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_passable_lane_ids(::std::string&& value);
  #endif
  void add_passable_lane_ids(const char* value);
  void add_passable_lane_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& passable_lane_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_passable_lane_ids();

  // repeated string black_road_ids = 33;
  int black_road_ids_size() const;
  void clear_black_road_ids();
  static const int kBlackRoadIdsFieldNumber = 33;
  const ::std::string& black_road_ids(int index) const;
  ::std::string* mutable_black_road_ids(int index);
  void set_black_road_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_black_road_ids(int index, ::std::string&& value);
  #endif
  void set_black_road_ids(int index, const char* value);
  void set_black_road_ids(int index, const char* value, size_t size);
  ::std::string* add_black_road_ids();
  void add_black_road_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_black_road_ids(::std::string&& value);
  #endif
  void add_black_road_ids(const char* value);
  void add_black_road_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& black_road_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_black_road_ids();

  // string cmd_feedback = 12;
  void clear_cmd_feedback();
  static const int kCmdFeedbackFieldNumber = 12;
  const ::std::string& cmd_feedback() const;
  void set_cmd_feedback(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd_feedback(::std::string&& value);
  #endif
  void set_cmd_feedback(const char* value);
  void set_cmd_feedback(const char* value, size_t size);
  ::std::string* mutable_cmd_feedback();
  ::std::string* release_cmd_feedback();
  void set_allocated_cmd_feedback(::std::string* cmd_feedback);

  // .planning_debug_msgs.DebugSTGraph st_graph = 11;
  bool has_st_graph() const;
  void clear_st_graph();
  static const int kStGraphFieldNumber = 11;
  const ::planning_debug_msgs::DebugSTGraph& st_graph() const;
  ::planning_debug_msgs::DebugSTGraph* release_st_graph();
  ::planning_debug_msgs::DebugSTGraph* mutable_st_graph();
  void set_allocated_st_graph(::planning_debug_msgs::DebugSTGraph* st_graph);

  // .planning_msgs.Trajectory trajectory = 30;
  bool has_trajectory() const;
  void clear_trajectory();
  static const int kTrajectoryFieldNumber = 30;
  const ::planning_msgs::Trajectory& trajectory() const;
  ::planning_msgs::Trajectory* release_trajectory();
  ::planning_msgs::Trajectory* mutable_trajectory();
  void set_allocated_trajectory(::planning_msgs::Trajectory* trajectory);

  // double time_stamp = 1;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  double time_stamp() const;
  void set_time_stamp(double value);

  // uint32 target_line = 2;
  void clear_target_line();
  static const int kTargetLineFieldNumber = 2;
  ::google::protobuf::uint32 target_line() const;
  void set_target_line(::google::protobuf::uint32 value);

  // int32 giveway_id = 3;
  void clear_giveway_id();
  static const int kGivewayIdFieldNumber = 3;
  ::google::protobuf::int32 giveway_id() const;
  void set_giveway_id(::google::protobuf::int32 value);

  // float speed_limit = 4;
  void clear_speed_limit();
  static const int kSpeedLimitFieldNumber = 4;
  float speed_limit() const;
  void set_speed_limit(float value);

  // uint32 lc_status = 13;
  void clear_lc_status();
  static const int kLcStatusFieldNumber = 13;
  ::google::protobuf::uint32 lc_status() const;
  void set_lc_status(::google::protobuf::uint32 value);

  // int32 decision_result = 14;
  void clear_decision_result();
  static const int kDecisionResultFieldNumber = 14;
  ::google::protobuf::int32 decision_result() const;
  void set_decision_result(::google::protobuf::int32 value);

  // uint32 scenario_type = 15;
  void clear_scenario_type();
  static const int kScenarioTypeFieldNumber = 15;
  ::google::protobuf::uint32 scenario_type() const;
  void set_scenario_type(::google::protobuf::uint32 value);

  // uint32 intention_type = 16;
  void clear_intention_type();
  static const int kIntentionTypeFieldNumber = 16;
  ::google::protobuf::uint32 intention_type() const;
  void set_intention_type(::google::protobuf::uint32 value);

  // uint32 option_type = 17;
  void clear_option_type();
  static const int kOptionTypeFieldNumber = 17;
  ::google::protobuf::uint32 option_type() const;
  void set_option_type(::google::protobuf::uint32 value);

  // uint32 turning_type = 18;
  void clear_turning_type();
  static const int kTurningTypeFieldNumber = 18;
  ::google::protobuf::uint32 turning_type() const;
  void set_turning_type(::google::protobuf::uint32 value);

  // uint32 stop_type = 19;
  void clear_stop_type();
  static const int kStopTypeFieldNumber = 19;
  ::google::protobuf::uint32 stop_type() const;
  void set_stop_type(::google::protobuf::uint32 value);

  // uint32 lateral_decision = 20;
  void clear_lateral_decision();
  static const int kLateralDecisionFieldNumber = 20;
  ::google::protobuf::uint32 lateral_decision() const;
  void set_lateral_decision(::google::protobuf::uint32 value);

  // uint32 ready_status = 21;
  void clear_ready_status();
  static const int kReadyStatusFieldNumber = 21;
  ::google::protobuf::uint32 ready_status() const;
  void set_ready_status(::google::protobuf::uint32 value);

  // float dis_to_junction = 22;
  void clear_dis_to_junction();
  static const int kDisToJunctionFieldNumber = 22;
  float dis_to_junction() const;
  void set_dis_to_junction(float value);

  // float dis_to_stop = 23;
  void clear_dis_to_stop();
  static const int kDisToStopFieldNumber = 23;
  float dis_to_stop() const;
  void set_dis_to_stop(float value);

  // float light_s = 24;
  void clear_light_s();
  static const int kLightSFieldNumber = 24;
  float light_s() const;
  void set_light_s(float value);

  // float light_time = 25;
  void clear_light_time();
  static const int kLightTimeFieldNumber = 25;
  float light_time() const;
  void set_light_time(float value);

  // float left_time = 26;
  void clear_left_time();
  static const int kLeftTimeFieldNumber = 26;
  float left_time() const;
  void set_left_time(float value);

  // uint32 light_color = 27;
  void clear_light_color();
  static const int kLightColorFieldNumber = 27;
  ::google::protobuf::uint32 light_color() const;
  void set_light_color(::google::protobuf::uint32 value);

  // uint32 turning = 28;
  void clear_turning();
  static const int kTurningFieldNumber = 28;
  ::google::protobuf::uint32 turning() const;
  void set_turning(::google::protobuf::uint32 value);

  // float expand_l = 29;
  void clear_expand_l();
  static const int kExpandLFieldNumber = 29;
  float expand_l() const;
  void set_expand_l(float value);

  // int32 is_passable = 31;
  void clear_is_passable();
  static const int kIsPassableFieldNumber = 31;
  ::google::protobuf::int32 is_passable() const;
  void set_is_passable(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.DebugDecision)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > boundary_s_;
  mutable int _boundary_s_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > left_boundary_;
  mutable int _left_boundary_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > right_boundary_;
  mutable int _right_boundary_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > object_id_;
  mutable int _object_id_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > object_decision_;
  mutable int _object_decision_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::Sentence > sentences_;
  ::google::protobuf::RepeatedPtrField< ::std::string> passable_lane_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> black_road_ids_;
  ::google::protobuf::internal::ArenaStringPtr cmd_feedback_;
  ::planning_debug_msgs::DebugSTGraph* st_graph_;
  ::planning_msgs::Trajectory* trajectory_;
  double time_stamp_;
  ::google::protobuf::uint32 target_line_;
  ::google::protobuf::int32 giveway_id_;
  float speed_limit_;
  ::google::protobuf::uint32 lc_status_;
  ::google::protobuf::int32 decision_result_;
  ::google::protobuf::uint32 scenario_type_;
  ::google::protobuf::uint32 intention_type_;
  ::google::protobuf::uint32 option_type_;
  ::google::protobuf::uint32 turning_type_;
  ::google::protobuf::uint32 stop_type_;
  ::google::protobuf::uint32 lateral_decision_;
  ::google::protobuf::uint32 ready_status_;
  float dis_to_junction_;
  float dis_to_stop_;
  float light_s_;
  float light_time_;
  float left_time_;
  ::google::protobuf::uint32 light_color_;
  ::google::protobuf::uint32 turning_;
  float expand_l_;
  ::google::protobuf::int32 is_passable_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugDecisionImpl();
};
// -------------------------------------------------------------------

class DebugPrediction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.DebugPrediction) */ {
 public:
  DebugPrediction();
  virtual ~DebugPrediction();

  DebugPrediction(const DebugPrediction& from);

  inline DebugPrediction& operator=(const DebugPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugPrediction(DebugPrediction&& from) noexcept
    : DebugPrediction() {
    *this = ::std::move(from);
  }

  inline DebugPrediction& operator=(DebugPrediction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugPrediction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugPrediction* internal_default_instance() {
    return reinterpret_cast<const DebugPrediction*>(
               &_DebugPrediction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(DebugPrediction* other);
  friend void swap(DebugPrediction& a, DebugPrediction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugPrediction* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugPrediction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugPrediction& from);
  void MergeFrom(const DebugPrediction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugPrediction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .planning_msgs.Trajectory points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  const ::planning_msgs::Trajectory& points(int index) const;
  ::planning_msgs::Trajectory* mutable_points(int index);
  ::planning_msgs::Trajectory* add_points();
  ::google::protobuf::RepeatedPtrField< ::planning_msgs::Trajectory >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::planning_msgs::Trajectory >&
      points() const;

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.DebugPrediction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::planning_msgs::Trajectory > points_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugPredictionImpl();
};
// -------------------------------------------------------------------

class DebugImu : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.DebugImu) */ {
 public:
  DebugImu();
  virtual ~DebugImu();

  DebugImu(const DebugImu& from);

  inline DebugImu& operator=(const DebugImu& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugImu(DebugImu&& from) noexcept
    : DebugImu() {
    *this = ::std::move(from);
  }

  inline DebugImu& operator=(DebugImu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugImu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugImu* internal_default_instance() {
    return reinterpret_cast<const DebugImu*>(
               &_DebugImu_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(DebugImu* other);
  friend void swap(DebugImu& a, DebugImu& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugImu* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugImu* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugImu& from);
  void MergeFrom(const DebugImu& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugImu* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double time_stamp = 1;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  double time_stamp() const;
  void set_time_stamp(double value);

  // double xg = 2;
  void clear_xg();
  static const int kXgFieldNumber = 2;
  double xg() const;
  void set_xg(double value);

  // double yg = 3;
  void clear_yg();
  static const int kYgFieldNumber = 3;
  double yg() const;
  void set_yg(double value);

  // double yaw = 4;
  void clear_yaw();
  static const int kYawFieldNumber = 4;
  double yaw() const;
  void set_yaw(double value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.DebugImu)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double time_stamp_;
  double xg_;
  double yg_;
  double yaw_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugImuImpl();
};
// -------------------------------------------------------------------

class PlanningDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.PlanningDebug) */ {
 public:
  PlanningDebug();
  virtual ~PlanningDebug();

  PlanningDebug(const PlanningDebug& from);

  inline PlanningDebug& operator=(const PlanningDebug& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlanningDebug(PlanningDebug&& from) noexcept
    : PlanningDebug() {
    *this = ::std::move(from);
  }

  inline PlanningDebug& operator=(PlanningDebug&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanningDebug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningDebug* internal_default_instance() {
    return reinterpret_cast<const PlanningDebug*>(
               &_PlanningDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(PlanningDebug* other);
  friend void swap(PlanningDebug& a, PlanningDebug& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlanningDebug* New() const PROTOBUF_FINAL { return New(NULL); }

  PlanningDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlanningDebug& from);
  void MergeFrom(const PlanningDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlanningDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Object perception = 17;
  int perception_size() const;
  void clear_perception();
  static const int kPerceptionFieldNumber = 17;
  const ::Object& perception(int index) const;
  ::Object* mutable_perception(int index);
  ::Object* add_perception();
  ::google::protobuf::RepeatedPtrField< ::Object >*
      mutable_perception();
  const ::google::protobuf::RepeatedPtrField< ::Object >&
      perception() const;

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // .common_msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::common_msgs::Header& header() const;
  ::common_msgs::Header* release_header();
  ::common_msgs::Header* mutable_header();
  void set_allocated_header(::common_msgs::Header* header);

  // .planning_debug_msgs.DebugState main_stream_msg = 3;
  bool has_main_stream_msg() const;
  void clear_main_stream_msg();
  static const int kMainStreamMsgFieldNumber = 3;
  const ::planning_debug_msgs::DebugState& main_stream_msg() const;
  ::planning_debug_msgs::DebugState* release_main_stream_msg();
  ::planning_debug_msgs::DebugState* mutable_main_stream_msg();
  void set_allocated_main_stream_msg(::planning_debug_msgs::DebugState* main_stream_msg);

  // .planning_debug_msgs.DebugState task_fsm_condition = 4;
  bool has_task_fsm_condition() const;
  void clear_task_fsm_condition();
  static const int kTaskFsmConditionFieldNumber = 4;
  const ::planning_debug_msgs::DebugState& task_fsm_condition() const;
  ::planning_debug_msgs::DebugState* release_task_fsm_condition();
  ::planning_debug_msgs::DebugState* mutable_task_fsm_condition();
  void set_allocated_task_fsm_condition(::planning_debug_msgs::DebugState* task_fsm_condition);

  // .planning_debug_msgs.DebugState task_fsm_state = 5;
  bool has_task_fsm_state() const;
  void clear_task_fsm_state();
  static const int kTaskFsmStateFieldNumber = 5;
  const ::planning_debug_msgs::DebugState& task_fsm_state() const;
  ::planning_debug_msgs::DebugState* release_task_fsm_state();
  ::planning_debug_msgs::DebugState* mutable_task_fsm_state();
  void set_allocated_task_fsm_state(::planning_debug_msgs::DebugState* task_fsm_state);

  // .planning_debug_msgs.DebugState cognition_msg = 6;
  bool has_cognition_msg() const;
  void clear_cognition_msg();
  static const int kCognitionMsgFieldNumber = 6;
  const ::planning_debug_msgs::DebugState& cognition_msg() const;
  ::planning_debug_msgs::DebugState* release_cognition_msg();
  ::planning_debug_msgs::DebugState* mutable_cognition_msg();
  void set_allocated_cognition_msg(::planning_debug_msgs::DebugState* cognition_msg);

  // .planning_debug_msgs.DebugState business_msg = 7;
  bool has_business_msg() const;
  void clear_business_msg();
  static const int kBusinessMsgFieldNumber = 7;
  const ::planning_debug_msgs::DebugState& business_msg() const;
  ::planning_debug_msgs::DebugState* release_business_msg();
  ::planning_debug_msgs::DebugState* mutable_business_msg();
  void set_allocated_business_msg(::planning_debug_msgs::DebugState* business_msg);

  // .planning_debug_msgs.DebugState behavior_fsm_condition = 8;
  bool has_behavior_fsm_condition() const;
  void clear_behavior_fsm_condition();
  static const int kBehaviorFsmConditionFieldNumber = 8;
  const ::planning_debug_msgs::DebugState& behavior_fsm_condition() const;
  ::planning_debug_msgs::DebugState* release_behavior_fsm_condition();
  ::planning_debug_msgs::DebugState* mutable_behavior_fsm_condition();
  void set_allocated_behavior_fsm_condition(::planning_debug_msgs::DebugState* behavior_fsm_condition);

  // .planning_debug_msgs.DebugState behavior_fsm_state = 9;
  bool has_behavior_fsm_state() const;
  void clear_behavior_fsm_state();
  static const int kBehaviorFsmStateFieldNumber = 9;
  const ::planning_debug_msgs::DebugState& behavior_fsm_state() const;
  ::planning_debug_msgs::DebugState* release_behavior_fsm_state();
  ::planning_debug_msgs::DebugState* mutable_behavior_fsm_state();
  void set_allocated_behavior_fsm_state(::planning_debug_msgs::DebugState* behavior_fsm_state);

  // .planning_debug_msgs.DebugState pathplan_msg = 10;
  bool has_pathplan_msg() const;
  void clear_pathplan_msg();
  static const int kPathplanMsgFieldNumber = 10;
  const ::planning_debug_msgs::DebugState& pathplan_msg() const;
  ::planning_debug_msgs::DebugState* release_pathplan_msg();
  ::planning_debug_msgs::DebugState* mutable_pathplan_msg();
  void set_allocated_pathplan_msg(::planning_debug_msgs::DebugState* pathplan_msg);

  // .planning_debug_msgs.DebugState thread_state = 11;
  bool has_thread_state() const;
  void clear_thread_state();
  static const int kThreadStateFieldNumber = 11;
  const ::planning_debug_msgs::DebugState& thread_state() const;
  ::planning_debug_msgs::DebugState* release_thread_state();
  ::planning_debug_msgs::DebugState* mutable_thread_state();
  void set_allocated_thread_state(::planning_debug_msgs::DebugState* thread_state);

  // .planning_debug_msgs.DebugMotionPlan motionplan = 12;
  bool has_motionplan() const;
  void clear_motionplan();
  static const int kMotionplanFieldNumber = 12;
  const ::planning_debug_msgs::DebugMotionPlan& motionplan() const;
  ::planning_debug_msgs::DebugMotionPlan* release_motionplan();
  ::planning_debug_msgs::DebugMotionPlan* mutable_motionplan();
  void set_allocated_motionplan(::planning_debug_msgs::DebugMotionPlan* motionplan);

  // .planning_debug_msgs.DebugCognition cognition = 13;
  bool has_cognition() const;
  void clear_cognition();
  static const int kCognitionFieldNumber = 13;
  const ::planning_debug_msgs::DebugCognition& cognition() const;
  ::planning_debug_msgs::DebugCognition* release_cognition();
  ::planning_debug_msgs::DebugCognition* mutable_cognition();
  void set_allocated_cognition(::planning_debug_msgs::DebugCognition* cognition);

  // .planning_debug_msgs.DebugDecision decision = 14;
  bool has_decision() const;
  void clear_decision();
  static const int kDecisionFieldNumber = 14;
  const ::planning_debug_msgs::DebugDecision& decision() const;
  ::planning_debug_msgs::DebugDecision* release_decision();
  ::planning_debug_msgs::DebugDecision* mutable_decision();
  void set_allocated_decision(::planning_debug_msgs::DebugDecision* decision);

  // .planning_debug_msgs.DebugPrediction prediction = 15;
  bool has_prediction() const;
  void clear_prediction();
  static const int kPredictionFieldNumber = 15;
  const ::planning_debug_msgs::DebugPrediction& prediction() const;
  ::planning_debug_msgs::DebugPrediction* release_prediction();
  ::planning_debug_msgs::DebugPrediction* mutable_prediction();
  void set_allocated_prediction(::planning_debug_msgs::DebugPrediction* prediction);

  // .planning_debug_msgs.DebugImu locpose = 16;
  bool has_locpose() const;
  void clear_locpose();
  static const int kLocposeFieldNumber = 16;
  const ::planning_debug_msgs::DebugImu& locpose() const;
  ::planning_debug_msgs::DebugImu* release_locpose();
  ::planning_debug_msgs::DebugImu* mutable_locpose();
  void set_allocated_locpose(::planning_debug_msgs::DebugImu* locpose);

  // float time_cost_ms = 18;
  void clear_time_cost_ms();
  static const int kTimeCostMsFieldNumber = 18;
  float time_cost_ms() const;
  void set_time_cost_ms(float value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.PlanningDebug)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Object > perception_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::common_msgs::Header* header_;
  ::planning_debug_msgs::DebugState* main_stream_msg_;
  ::planning_debug_msgs::DebugState* task_fsm_condition_;
  ::planning_debug_msgs::DebugState* task_fsm_state_;
  ::planning_debug_msgs::DebugState* cognition_msg_;
  ::planning_debug_msgs::DebugState* business_msg_;
  ::planning_debug_msgs::DebugState* behavior_fsm_condition_;
  ::planning_debug_msgs::DebugState* behavior_fsm_state_;
  ::planning_debug_msgs::DebugState* pathplan_msg_;
  ::planning_debug_msgs::DebugState* thread_state_;
  ::planning_debug_msgs::DebugMotionPlan* motionplan_;
  ::planning_debug_msgs::DebugCognition* cognition_;
  ::planning_debug_msgs::DebugDecision* decision_;
  ::planning_debug_msgs::DebugPrediction* prediction_;
  ::planning_debug_msgs::DebugImu* locpose_;
  float time_cost_ms_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsPlanningDebugImpl();
};
// -------------------------------------------------------------------

class DebugBusiness : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.DebugBusiness) */ {
 public:
  DebugBusiness();
  virtual ~DebugBusiness();

  DebugBusiness(const DebugBusiness& from);

  inline DebugBusiness& operator=(const DebugBusiness& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugBusiness(DebugBusiness&& from) noexcept
    : DebugBusiness() {
    *this = ::std::move(from);
  }

  inline DebugBusiness& operator=(DebugBusiness&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugBusiness& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugBusiness* internal_default_instance() {
    return reinterpret_cast<const DebugBusiness*>(
               &_DebugBusiness_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(DebugBusiness* other);
  friend void swap(DebugBusiness& a, DebugBusiness& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugBusiness* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugBusiness* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugBusiness& from);
  void MergeFrom(const DebugBusiness& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugBusiness* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float dis_to_mission_point = 1;
  void clear_dis_to_mission_point();
  static const int kDisToMissionPointFieldNumber = 1;
  float dis_to_mission_point() const;
  void set_dis_to_mission_point(float value);

  // float car_velocity = 2;
  void clear_car_velocity();
  static const int kCarVelocityFieldNumber = 2;
  float car_velocity() const;
  void set_car_velocity(float value);

  // int32 process_status = 3;
  void clear_process_status();
  static const int kProcessStatusFieldNumber = 3;
  ::google::protobuf::int32 process_status() const;
  void set_process_status(::google::protobuf::int32 value);

  // int32 is_current_line_null = 4;
  void clear_is_current_line_null();
  static const int kIsCurrentLineNullFieldNumber = 4;
  ::google::protobuf::int32 is_current_line_null() const;
  void set_is_current_line_null(::google::protobuf::int32 value);

  // int32 business_exucute_over = 5;
  void clear_business_exucute_over();
  static const int kBusinessExucuteOverFieldNumber = 5;
  ::google::protobuf::int32 business_exucute_over() const;
  void set_business_exucute_over(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.DebugBusiness)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float dis_to_mission_point_;
  float car_velocity_;
  ::google::protobuf::int32 process_status_;
  ::google::protobuf::int32 is_current_line_null_;
  ::google::protobuf::int32 business_exucute_over_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugBusinessImpl();
};
// -------------------------------------------------------------------

class DebugSTPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.DebugSTPoint) */ {
 public:
  DebugSTPoint();
  virtual ~DebugSTPoint();

  DebugSTPoint(const DebugSTPoint& from);

  inline DebugSTPoint& operator=(const DebugSTPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugSTPoint(DebugSTPoint&& from) noexcept
    : DebugSTPoint() {
    *this = ::std::move(from);
  }

  inline DebugSTPoint& operator=(DebugSTPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugSTPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugSTPoint* internal_default_instance() {
    return reinterpret_cast<const DebugSTPoint*>(
               &_DebugSTPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(DebugSTPoint* other);
  friend void swap(DebugSTPoint& a, DebugSTPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugSTPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugSTPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugSTPoint& from);
  void MergeFrom(const DebugSTPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugSTPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 id = 4;
  int id_size() const;
  void clear_id();
  static const int kIdFieldNumber = 4;
  ::google::protobuf::int32 id(int index) const;
  void set_id(int index, ::google::protobuf::int32 value);
  void add_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id();

  // float p = 1;
  void clear_p();
  static const int kPFieldNumber = 1;
  float p() const;
  void set_p(float value);

  // float s = 2;
  void clear_s();
  static const int kSFieldNumber = 2;
  float s() const;
  void set_s(float value);

  // float t = 3;
  void clear_t();
  static const int kTFieldNumber = 3;
  float t() const;
  void set_t(float value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.DebugSTPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_;
  mutable int _id_cached_byte_size_;
  float p_;
  float s_;
  float t_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugSTPointImpl();
};
// -------------------------------------------------------------------

class Debugstmap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.Debugstmap) */ {
 public:
  Debugstmap();
  virtual ~Debugstmap();

  Debugstmap(const Debugstmap& from);

  inline Debugstmap& operator=(const Debugstmap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Debugstmap(Debugstmap&& from) noexcept
    : Debugstmap() {
    *this = ::std::move(from);
  }

  inline Debugstmap& operator=(Debugstmap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Debugstmap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Debugstmap* internal_default_instance() {
    return reinterpret_cast<const Debugstmap*>(
               &_Debugstmap_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(Debugstmap* other);
  friend void swap(Debugstmap& a, Debugstmap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Debugstmap* New() const PROTOBUF_FINAL { return New(NULL); }

  Debugstmap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Debugstmap& from);
  void MergeFrom(const Debugstmap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Debugstmap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .planning_debug_msgs.DebugSTPoint st_points = 1;
  int st_points_size() const;
  void clear_st_points();
  static const int kStPointsFieldNumber = 1;
  const ::planning_debug_msgs::DebugSTPoint& st_points(int index) const;
  ::planning_debug_msgs::DebugSTPoint* mutable_st_points(int index);
  ::planning_debug_msgs::DebugSTPoint* add_st_points();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugSTPoint >*
      mutable_st_points();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugSTPoint >&
      st_points() const;

  // repeated .planning_debug_msgs.DebugSTPoint decision_st_points = 2;
  int decision_st_points_size() const;
  void clear_decision_st_points();
  static const int kDecisionStPointsFieldNumber = 2;
  const ::planning_debug_msgs::DebugSTPoint& decision_st_points(int index) const;
  ::planning_debug_msgs::DebugSTPoint* mutable_decision_st_points(int index);
  ::planning_debug_msgs::DebugSTPoint* add_decision_st_points();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugSTPoint >*
      mutable_decision_st_points();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugSTPoint >&
      decision_st_points() const;

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.Debugstmap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugSTPoint > st_points_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugSTPoint > decision_st_points_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugstmapImpl();
};
// -------------------------------------------------------------------

class DebugObjectByLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.DebugObjectByLine) */ {
 public:
  DebugObjectByLine();
  virtual ~DebugObjectByLine();

  DebugObjectByLine(const DebugObjectByLine& from);

  inline DebugObjectByLine& operator=(const DebugObjectByLine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugObjectByLine(DebugObjectByLine&& from) noexcept
    : DebugObjectByLine() {
    *this = ::std::move(from);
  }

  inline DebugObjectByLine& operator=(DebugObjectByLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugObjectByLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugObjectByLine* internal_default_instance() {
    return reinterpret_cast<const DebugObjectByLine*>(
               &_DebugObjectByLine_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(DebugObjectByLine* other);
  friend void swap(DebugObjectByLine& a, DebugObjectByLine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugObjectByLine* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugObjectByLine* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugObjectByLine& from);
  void MergeFrom(const DebugObjectByLine& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugObjectByLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .planning_debug_msgs.DebugObject object_debug = 1;
  int object_debug_size() const;
  void clear_object_debug();
  static const int kObjectDebugFieldNumber = 1;
  const ::planning_debug_msgs::DebugObject& object_debug(int index) const;
  ::planning_debug_msgs::DebugObject* mutable_object_debug(int index);
  ::planning_debug_msgs::DebugObject* add_object_debug();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugObject >*
      mutable_object_debug();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugObject >&
      object_debug() const;

  // int32 object_decision = 2;
  void clear_object_decision();
  static const int kObjectDecisionFieldNumber = 2;
  ::google::protobuf::int32 object_decision() const;
  void set_object_decision(::google::protobuf::int32 value);

  // float max_p = 3;
  void clear_max_p();
  static const int kMaxPFieldNumber = 3;
  float max_p() const;
  void set_max_p(float value);

  // float limit_v = 4;
  void clear_limit_v();
  static const int kLimitVFieldNumber = 4;
  float limit_v() const;
  void set_limit_v(float value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.DebugObjectByLine)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugObject > object_debug_;
  ::google::protobuf::int32 object_decision_;
  float max_p_;
  float limit_v_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugObjectByLineImpl();
};
// -------------------------------------------------------------------

class LBounds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.LBounds) */ {
 public:
  LBounds();
  virtual ~LBounds();

  LBounds(const LBounds& from);

  inline LBounds& operator=(const LBounds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LBounds(LBounds&& from) noexcept
    : LBounds() {
    *this = ::std::move(from);
  }

  inline LBounds& operator=(LBounds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LBounds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LBounds* internal_default_instance() {
    return reinterpret_cast<const LBounds*>(
               &_LBounds_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(LBounds* other);
  friend void swap(LBounds& a, LBounds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LBounds* New() const PROTOBUF_FINAL { return New(NULL); }

  LBounds* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LBounds& from);
  void MergeFrom(const LBounds& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LBounds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double right_boundary = 1;
  void clear_right_boundary();
  static const int kRightBoundaryFieldNumber = 1;
  double right_boundary() const;
  void set_right_boundary(double value);

  // double left_boundary = 2;
  void clear_left_boundary();
  static const int kLeftBoundaryFieldNumber = 2;
  double left_boundary() const;
  void set_left_boundary(double value);

  // double right_boundary_xg = 3;
  void clear_right_boundary_xg();
  static const int kRightBoundaryXgFieldNumber = 3;
  double right_boundary_xg() const;
  void set_right_boundary_xg(double value);

  // double right_boundary_yg = 4;
  void clear_right_boundary_yg();
  static const int kRightBoundaryYgFieldNumber = 4;
  double right_boundary_yg() const;
  void set_right_boundary_yg(double value);

  // double right_boundary_globalangle = 5;
  void clear_right_boundary_globalangle();
  static const int kRightBoundaryGlobalangleFieldNumber = 5;
  double right_boundary_globalangle() const;
  void set_right_boundary_globalangle(double value);

  // double right_boundary_x = 6;
  void clear_right_boundary_x();
  static const int kRightBoundaryXFieldNumber = 6;
  double right_boundary_x() const;
  void set_right_boundary_x(double value);

  // double right_boundary_y = 7;
  void clear_right_boundary_y();
  static const int kRightBoundaryYFieldNumber = 7;
  double right_boundary_y() const;
  void set_right_boundary_y(double value);

  // double right_boundary_angle = 8;
  void clear_right_boundary_angle();
  static const int kRightBoundaryAngleFieldNumber = 8;
  double right_boundary_angle() const;
  void set_right_boundary_angle(double value);

  // double left_boundary_xg = 9;
  void clear_left_boundary_xg();
  static const int kLeftBoundaryXgFieldNumber = 9;
  double left_boundary_xg() const;
  void set_left_boundary_xg(double value);

  // double left_boundary_yg = 10;
  void clear_left_boundary_yg();
  static const int kLeftBoundaryYgFieldNumber = 10;
  double left_boundary_yg() const;
  void set_left_boundary_yg(double value);

  // double left_boundary_globalangle = 11;
  void clear_left_boundary_globalangle();
  static const int kLeftBoundaryGlobalangleFieldNumber = 11;
  double left_boundary_globalangle() const;
  void set_left_boundary_globalangle(double value);

  // double left_boundary_x = 12;
  void clear_left_boundary_x();
  static const int kLeftBoundaryXFieldNumber = 12;
  double left_boundary_x() const;
  void set_left_boundary_x(double value);

  // double left_boundary_y = 13;
  void clear_left_boundary_y();
  static const int kLeftBoundaryYFieldNumber = 13;
  double left_boundary_y() const;
  void set_left_boundary_y(double value);

  // double left_boundary_angle = 14;
  void clear_left_boundary_angle();
  static const int kLeftBoundaryAngleFieldNumber = 14;
  double left_boundary_angle() const;
  void set_left_boundary_angle(double value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.LBounds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double right_boundary_;
  double left_boundary_;
  double right_boundary_xg_;
  double right_boundary_yg_;
  double right_boundary_globalangle_;
  double right_boundary_x_;
  double right_boundary_y_;
  double right_boundary_angle_;
  double left_boundary_xg_;
  double left_boundary_yg_;
  double left_boundary_globalangle_;
  double left_boundary_x_;
  double left_boundary_y_;
  double left_boundary_angle_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsLBoundsImpl();
};
// -------------------------------------------------------------------

class SoftBoundary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.SoftBoundary) */ {
 public:
  SoftBoundary();
  virtual ~SoftBoundary();

  SoftBoundary(const SoftBoundary& from);

  inline SoftBoundary& operator=(const SoftBoundary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SoftBoundary(SoftBoundary&& from) noexcept
    : SoftBoundary() {
    *this = ::std::move(from);
  }

  inline SoftBoundary& operator=(SoftBoundary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftBoundary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoftBoundary* internal_default_instance() {
    return reinterpret_cast<const SoftBoundary*>(
               &_SoftBoundary_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(SoftBoundary* other);
  friend void swap(SoftBoundary& a, SoftBoundary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SoftBoundary* New() const PROTOBUF_FINAL { return New(NULL); }

  SoftBoundary* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SoftBoundary& from);
  void MergeFrom(const SoftBoundary& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SoftBoundary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string obj_id = 4;
  void clear_obj_id();
  static const int kObjIdFieldNumber = 4;
  const ::std::string& obj_id() const;
  void set_obj_id(const ::std::string& value);
  #if LANG_CXX11
  void set_obj_id(::std::string&& value);
  #endif
  void set_obj_id(const char* value);
  void set_obj_id(const char* value, size_t size);
  ::std::string* mutable_obj_id();
  ::std::string* release_obj_id();
  void set_allocated_obj_id(::std::string* obj_id);

  // .planning_debug_msgs.LBounds l_bounds = 1;
  bool has_l_bounds() const;
  void clear_l_bounds();
  static const int kLBoundsFieldNumber = 1;
  const ::planning_debug_msgs::LBounds& l_bounds() const;
  ::planning_debug_msgs::LBounds* release_l_bounds();
  ::planning_debug_msgs::LBounds* mutable_l_bounds();
  void set_allocated_l_bounds(::planning_debug_msgs::LBounds* l_bounds);

  // double probability = 2;
  void clear_probability();
  static const int kProbabilityFieldNumber = 2;
  double probability() const;
  void set_probability(double value);

  // double obj_occupy_delt_l = 3;
  void clear_obj_occupy_delt_l();
  static const int kObjOccupyDeltLFieldNumber = 3;
  double obj_occupy_delt_l() const;
  void set_obj_occupy_delt_l(double value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.SoftBoundary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr obj_id_;
  ::planning_debug_msgs::LBounds* l_bounds_;
  double probability_;
  double obj_occupy_delt_l_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSoftBoundaryImpl();
};
// -------------------------------------------------------------------

class BoundaryType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.BoundaryType) */ {
 public:
  BoundaryType();
  virtual ~BoundaryType();

  BoundaryType(const BoundaryType& from);

  inline BoundaryType& operator=(const BoundaryType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BoundaryType(BoundaryType&& from) noexcept
    : BoundaryType() {
    *this = ::std::move(from);
  }

  inline BoundaryType& operator=(BoundaryType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BoundaryType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoundaryType* internal_default_instance() {
    return reinterpret_cast<const BoundaryType*>(
               &_BoundaryType_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(BoundaryType* other);
  friend void swap(BoundaryType& a, BoundaryType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BoundaryType* New() const PROTOBUF_FINAL { return New(NULL); }

  BoundaryType* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BoundaryType& from);
  void MergeFrom(const BoundaryType& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BoundaryType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 right_bound_type = 1;
  void clear_right_bound_type();
  static const int kRightBoundTypeFieldNumber = 1;
  ::google::protobuf::int32 right_bound_type() const;
  void set_right_bound_type(::google::protobuf::int32 value);

  // int32 left_bound_type = 2;
  void clear_left_bound_type();
  static const int kLeftBoundTypeFieldNumber = 2;
  ::google::protobuf::int32 left_bound_type() const;
  void set_left_bound_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.BoundaryType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 right_bound_type_;
  ::google::protobuf::int32 left_bound_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsBoundaryTypeImpl();
};
// -------------------------------------------------------------------

class DebugSLBoundary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.DebugSLBoundary) */ {
 public:
  DebugSLBoundary();
  virtual ~DebugSLBoundary();

  DebugSLBoundary(const DebugSLBoundary& from);

  inline DebugSLBoundary& operator=(const DebugSLBoundary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugSLBoundary(DebugSLBoundary&& from) noexcept
    : DebugSLBoundary() {
    *this = ::std::move(from);
  }

  inline DebugSLBoundary& operator=(DebugSLBoundary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugSLBoundary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugSLBoundary* internal_default_instance() {
    return reinterpret_cast<const DebugSLBoundary*>(
               &_DebugSLBoundary_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(DebugSLBoundary* other);
  friend void swap(DebugSLBoundary& a, DebugSLBoundary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugSLBoundary* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugSLBoundary* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugSLBoundary& from);
  void MergeFrom(const DebugSLBoundary& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugSLBoundary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .planning_debug_msgs.LBounds boundary = 3;
  int boundary_size() const;
  void clear_boundary();
  static const int kBoundaryFieldNumber = 3;
  const ::planning_debug_msgs::LBounds& boundary(int index) const;
  ::planning_debug_msgs::LBounds* mutable_boundary(int index);
  ::planning_debug_msgs::LBounds* add_boundary();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::LBounds >*
      mutable_boundary();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::LBounds >&
      boundary() const;

  // repeated .planning_debug_msgs.LBounds box_modified_boundary = 4;
  int box_modified_boundary_size() const;
  void clear_box_modified_boundary();
  static const int kBoxModifiedBoundaryFieldNumber = 4;
  const ::planning_debug_msgs::LBounds& box_modified_boundary(int index) const;
  ::planning_debug_msgs::LBounds* mutable_box_modified_boundary(int index);
  ::planning_debug_msgs::LBounds* add_box_modified_boundary();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::LBounds >*
      mutable_box_modified_boundary();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::LBounds >&
      box_modified_boundary() const;

  // repeated .planning_debug_msgs.LBounds dynamic_obstacle_boundary = 5;
  int dynamic_obstacle_boundary_size() const;
  void clear_dynamic_obstacle_boundary();
  static const int kDynamicObstacleBoundaryFieldNumber = 5;
  const ::planning_debug_msgs::LBounds& dynamic_obstacle_boundary(int index) const;
  ::planning_debug_msgs::LBounds* mutable_dynamic_obstacle_boundary(int index);
  ::planning_debug_msgs::LBounds* add_dynamic_obstacle_boundary();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::LBounds >*
      mutable_dynamic_obstacle_boundary();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::LBounds >&
      dynamic_obstacle_boundary() const;

  // repeated .planning_debug_msgs.SoftBoundary soft_boundary = 6;
  int soft_boundary_size() const;
  void clear_soft_boundary();
  static const int kSoftBoundaryFieldNumber = 6;
  const ::planning_debug_msgs::SoftBoundary& soft_boundary(int index) const;
  ::planning_debug_msgs::SoftBoundary* mutable_soft_boundary(int index);
  ::planning_debug_msgs::SoftBoundary* add_soft_boundary();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::SoftBoundary >*
      mutable_soft_boundary();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::SoftBoundary >&
      soft_boundary() const;

  // repeated .planning_debug_msgs.BoundaryType boundary_type = 7;
  int boundary_type_size() const;
  void clear_boundary_type();
  static const int kBoundaryTypeFieldNumber = 7;
  const ::planning_debug_msgs::BoundaryType& boundary_type(int index) const;
  ::planning_debug_msgs::BoundaryType* mutable_boundary_type(int index);
  ::planning_debug_msgs::BoundaryType* add_boundary_type();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::BoundaryType >*
      mutable_boundary_type();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::BoundaryType >&
      boundary_type() const;

  // string label = 8;
  void clear_label();
  static const int kLabelFieldNumber = 8;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // string blocking_obstacle_id = 9;
  void clear_blocking_obstacle_id();
  static const int kBlockingObstacleIdFieldNumber = 9;
  const ::std::string& blocking_obstacle_id() const;
  void set_blocking_obstacle_id(const ::std::string& value);
  #if LANG_CXX11
  void set_blocking_obstacle_id(::std::string&& value);
  #endif
  void set_blocking_obstacle_id(const char* value);
  void set_blocking_obstacle_id(const char* value, size_t size);
  ::std::string* mutable_blocking_obstacle_id();
  ::std::string* release_blocking_obstacle_id();
  void set_allocated_blocking_obstacle_id(::std::string* blocking_obstacle_id);

  // double start_s = 1;
  void clear_start_s();
  static const int kStartSFieldNumber = 1;
  double start_s() const;
  void set_start_s(double value);

  // double delta_s = 2;
  void clear_delta_s();
  static const int kDeltaSFieldNumber = 2;
  double delta_s() const;
  void set_delta_s(double value);

  // bool is_blocked = 10;
  void clear_is_blocked();
  static const int kIsBlockedFieldNumber = 10;
  bool is_blocked() const;
  void set_is_blocked(bool value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.DebugSLBoundary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::LBounds > boundary_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::LBounds > box_modified_boundary_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::LBounds > dynamic_obstacle_boundary_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::SoftBoundary > soft_boundary_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::BoundaryType > boundary_type_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr blocking_obstacle_id_;
  double start_s_;
  double delta_s_;
  bool is_blocked_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugSLBoundaryImpl();
};
// -------------------------------------------------------------------

class motion_obstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.motion_obstacle) */ {
 public:
  motion_obstacle();
  virtual ~motion_obstacle();

  motion_obstacle(const motion_obstacle& from);

  inline motion_obstacle& operator=(const motion_obstacle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  motion_obstacle(motion_obstacle&& from) noexcept
    : motion_obstacle() {
    *this = ::std::move(from);
  }

  inline motion_obstacle& operator=(motion_obstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const motion_obstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const motion_obstacle* internal_default_instance() {
    return reinterpret_cast<const motion_obstacle*>(
               &_motion_obstacle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(motion_obstacle* other);
  friend void swap(motion_obstacle& a, motion_obstacle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline motion_obstacle* New() const PROTOBUF_FINAL { return New(NULL); }

  motion_obstacle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const motion_obstacle& from);
  void MergeFrom(const motion_obstacle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(motion_obstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // double Perception_xg = 3;
  void clear_perception_xg();
  static const int kPerceptionXgFieldNumber = 3;
  double perception_xg() const;
  void set_perception_xg(double value);

  // int32 PerceptionId = 2;
  void clear_perceptionid();
  static const int kPerceptionIdFieldNumber = 2;
  ::google::protobuf::int32 perceptionid() const;
  void set_perceptionid(::google::protobuf::int32 value);

  // int32 IsStatic = 5;
  void clear_isstatic();
  static const int kIsStaticFieldNumber = 5;
  ::google::protobuf::int32 isstatic() const;
  void set_isstatic(::google::protobuf::int32 value);

  // double Perception_yg = 4;
  void clear_perception_yg();
  static const int kPerceptionYgFieldNumber = 4;
  double perception_yg() const;
  void set_perception_yg(double value);

  // int32 IsVirtual = 6;
  void clear_isvirtual();
  static const int kIsVirtualFieldNumber = 6;
  ::google::protobuf::int32 isvirtual() const;
  void set_isvirtual(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.motion_obstacle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  double perception_xg_;
  ::google::protobuf::int32 perceptionid_;
  ::google::protobuf::int32 isstatic_;
  double perception_yg_;
  ::google::protobuf::int32 isvirtual_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsmotion_obstacleImpl();
};
// -------------------------------------------------------------------

class motion_obstacle_vec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.motion_obstacle_vec) */ {
 public:
  motion_obstacle_vec();
  virtual ~motion_obstacle_vec();

  motion_obstacle_vec(const motion_obstacle_vec& from);

  inline motion_obstacle_vec& operator=(const motion_obstacle_vec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  motion_obstacle_vec(motion_obstacle_vec&& from) noexcept
    : motion_obstacle_vec() {
    *this = ::std::move(from);
  }

  inline motion_obstacle_vec& operator=(motion_obstacle_vec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const motion_obstacle_vec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const motion_obstacle_vec* internal_default_instance() {
    return reinterpret_cast<const motion_obstacle_vec*>(
               &_motion_obstacle_vec_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(motion_obstacle_vec* other);
  friend void swap(motion_obstacle_vec& a, motion_obstacle_vec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline motion_obstacle_vec* New() const PROTOBUF_FINAL { return New(NULL); }

  motion_obstacle_vec* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const motion_obstacle_vec& from);
  void MergeFrom(const motion_obstacle_vec& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(motion_obstacle_vec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .planning_debug_msgs.motion_obstacle motion_obstacles = 1;
  int motion_obstacles_size() const;
  void clear_motion_obstacles();
  static const int kMotionObstaclesFieldNumber = 1;
  const ::planning_debug_msgs::motion_obstacle& motion_obstacles(int index) const;
  ::planning_debug_msgs::motion_obstacle* mutable_motion_obstacles(int index);
  ::planning_debug_msgs::motion_obstacle* add_motion_obstacles();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::motion_obstacle >*
      mutable_motion_obstacles();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::motion_obstacle >&
      motion_obstacles() const;

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.motion_obstacle_vec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::motion_obstacle > motion_obstacles_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsmotion_obstacle_vecImpl();
};
// -------------------------------------------------------------------

class DebugXTBound : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.DebugXTBound) */ {
 public:
  DebugXTBound();
  virtual ~DebugXTBound();

  DebugXTBound(const DebugXTBound& from);

  inline DebugXTBound& operator=(const DebugXTBound& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugXTBound(DebugXTBound&& from) noexcept
    : DebugXTBound() {
    *this = ::std::move(from);
  }

  inline DebugXTBound& operator=(DebugXTBound&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugXTBound& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugXTBound* internal_default_instance() {
    return reinterpret_cast<const DebugXTBound*>(
               &_DebugXTBound_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(DebugXTBound* other);
  friend void swap(DebugXTBound& a, DebugXTBound& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugXTBound* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugXTBound* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugXTBound& from);
  void MergeFrom(const DebugXTBound& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugXTBound* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float t = 1;
  void clear_t();
  static const int kTFieldNumber = 1;
  float t() const;
  void set_t(float value);

  // float min_bound = 2;
  void clear_min_bound();
  static const int kMinBoundFieldNumber = 2;
  float min_bound() const;
  void set_min_bound(float value);

  // float max_bound = 3;
  void clear_max_bound();
  static const int kMaxBoundFieldNumber = 3;
  float max_bound() const;
  void set_max_bound(float value);

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.DebugXTBound)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float t_;
  float min_bound_;
  float max_bound_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugXTBoundImpl();
};
// -------------------------------------------------------------------

class XTBounds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.XTBounds) */ {
 public:
  XTBounds();
  virtual ~XTBounds();

  XTBounds(const XTBounds& from);

  inline XTBounds& operator=(const XTBounds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XTBounds(XTBounds&& from) noexcept
    : XTBounds() {
    *this = ::std::move(from);
  }

  inline XTBounds& operator=(XTBounds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XTBounds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XTBounds* internal_default_instance() {
    return reinterpret_cast<const XTBounds*>(
               &_XTBounds_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(XTBounds* other);
  friend void swap(XTBounds& a, XTBounds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XTBounds* New() const PROTOBUF_FINAL { return New(NULL); }

  XTBounds* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XTBounds& from);
  void MergeFrom(const XTBounds& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XTBounds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .planning_debug_msgs.DebugXTBound st_bounds = 1;
  int st_bounds_size() const;
  void clear_st_bounds();
  static const int kStBoundsFieldNumber = 1;
  const ::planning_debug_msgs::DebugXTBound& st_bounds(int index) const;
  ::planning_debug_msgs::DebugXTBound* mutable_st_bounds(int index);
  ::planning_debug_msgs::DebugXTBound* add_st_bounds();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugXTBound >*
      mutable_st_bounds();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugXTBound >&
      st_bounds() const;

  // repeated .planning_debug_msgs.DebugXTBound dst_bounds = 2;
  int dst_bounds_size() const;
  void clear_dst_bounds();
  static const int kDstBoundsFieldNumber = 2;
  const ::planning_debug_msgs::DebugXTBound& dst_bounds(int index) const;
  ::planning_debug_msgs::DebugXTBound* mutable_dst_bounds(int index);
  ::planning_debug_msgs::DebugXTBound* add_dst_bounds();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugXTBound >*
      mutable_dst_bounds();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugXTBound >&
      dst_bounds() const;

  // repeated .planning_debug_msgs.DebugXTBound ddst_bounds = 3;
  int ddst_bounds_size() const;
  void clear_ddst_bounds();
  static const int kDdstBoundsFieldNumber = 3;
  const ::planning_debug_msgs::DebugXTBound& ddst_bounds(int index) const;
  ::planning_debug_msgs::DebugXTBound* mutable_ddst_bounds(int index);
  ::planning_debug_msgs::DebugXTBound* add_ddst_bounds();
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugXTBound >*
      mutable_ddst_bounds();
  const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugXTBound >&
      ddst_bounds() const;

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.XTBounds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugXTBound > st_bounds_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugXTBound > dst_bounds_;
  ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugXTBound > ddst_bounds_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsXTBoundsImpl();
};
// -------------------------------------------------------------------

class DebugExtraDecision : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning_debug_msgs.DebugExtraDecision) */ {
 public:
  DebugExtraDecision();
  virtual ~DebugExtraDecision();

  DebugExtraDecision(const DebugExtraDecision& from);

  inline DebugExtraDecision& operator=(const DebugExtraDecision& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DebugExtraDecision(DebugExtraDecision&& from) noexcept
    : DebugExtraDecision() {
    *this = ::std::move(from);
  }

  inline DebugExtraDecision& operator=(DebugExtraDecision&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugExtraDecision& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugExtraDecision* internal_default_instance() {
    return reinterpret_cast<const DebugExtraDecision*>(
               &_DebugExtraDecision_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(DebugExtraDecision* other);
  friend void swap(DebugExtraDecision& a, DebugExtraDecision& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DebugExtraDecision* New() const PROTOBUF_FINAL { return New(NULL); }

  DebugExtraDecision* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DebugExtraDecision& from);
  void MergeFrom(const DebugExtraDecision& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DebugExtraDecision* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float dist_to_ends_xg = 1;
  int dist_to_ends_xg_size() const;
  void clear_dist_to_ends_xg();
  static const int kDistToEndsXgFieldNumber = 1;
  float dist_to_ends_xg(int index) const;
  void set_dist_to_ends_xg(int index, float value);
  void add_dist_to_ends_xg(float value);
  const ::google::protobuf::RepeatedField< float >&
      dist_to_ends_xg() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_dist_to_ends_xg();

  // repeated float dist_to_ends_yg = 2;
  int dist_to_ends_yg_size() const;
  void clear_dist_to_ends_yg();
  static const int kDistToEndsYgFieldNumber = 2;
  float dist_to_ends_yg(int index) const;
  void set_dist_to_ends_yg(int index, float value);
  void add_dist_to_ends_yg(float value);
  const ::google::protobuf::RepeatedField< float >&
      dist_to_ends_yg() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_dist_to_ends_yg();

  // @@protoc_insertion_point(class_scope:planning_debug_msgs.DebugExtraDecision)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > dist_to_ends_xg_;
  mutable int _dist_to_ends_xg_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > dist_to_ends_yg_;
  mutable int _dist_to_ends_yg_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_planning_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugExtraDecisionImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DebugState

// int32 value = 1;
inline void DebugState::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 DebugState::value() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugState.value)
  return value_;
}
inline void DebugState::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugState.value)
}

// string str = 2;
inline void DebugState::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DebugState::str() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugState.str)
  return str_.GetNoArena();
}
inline void DebugState::set_str(const ::std::string& value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugState.str)
}
#if LANG_CXX11
inline void DebugState::set_str(::std::string&& value) {
  
  str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning_debug_msgs.DebugState.str)
}
#endif
inline void DebugState::set_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.DebugState.str)
}
inline void DebugState::set_str(const char* value, size_t size) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.DebugState.str)
}
inline ::std::string* DebugState::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugState.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DebugState::release_str() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.DebugState.str)
  
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DebugState::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.DebugState.str)
}

// -------------------------------------------------------------------

// SLPoint

// double s = 1;
inline void SLPoint::clear_s() {
  s_ = 0;
}
inline double SLPoint::s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.SLPoint.s)
  return s_;
}
inline void SLPoint::set_s(double value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.SLPoint.s)
}

// double l = 2;
inline void SLPoint::clear_l() {
  l_ = 0;
}
inline double SLPoint::l() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.SLPoint.l)
  return l_;
}
inline void SLPoint::set_l(double value) {
  
  l_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.SLPoint.l)
}

// -------------------------------------------------------------------

// SpeedPoint

// double t = 1;
inline void SpeedPoint::clear_t() {
  t_ = 0;
}
inline double SpeedPoint::t() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.SpeedPoint.t)
  return t_;
}
inline void SpeedPoint::set_t(double value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.SpeedPoint.t)
}

// double s = 2;
inline void SpeedPoint::clear_s() {
  s_ = 0;
}
inline double SpeedPoint::s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.SpeedPoint.s)
  return s_;
}
inline void SpeedPoint::set_s(double value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.SpeedPoint.s)
}

// double v = 3;
inline void SpeedPoint::clear_v() {
  v_ = 0;
}
inline double SpeedPoint::v() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.SpeedPoint.v)
  return v_;
}
inline void SpeedPoint::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.SpeedPoint.v)
}

// double a = 4;
inline void SpeedPoint::clear_a() {
  a_ = 0;
}
inline double SpeedPoint::a() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.SpeedPoint.a)
  return a_;
}
inline void SpeedPoint::set_a(double value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.SpeedPoint.a)
}

// double da = 5;
inline void SpeedPoint::clear_da() {
  da_ = 0;
}
inline double SpeedPoint::da() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.SpeedPoint.da)
  return da_;
}
inline void SpeedPoint::set_da(double value) {
  
  da_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.SpeedPoint.da)
}

// -------------------------------------------------------------------

// DebugMotionPlan

// double time_stamp = 1;
inline void DebugMotionPlan::clear_time_stamp() {
  time_stamp_ = 0;
}
inline double DebugMotionPlan::time_stamp() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.time_stamp)
  return time_stamp_;
}
inline void DebugMotionPlan::set_time_stamp(double value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.time_stamp)
}

// double v = 2;
inline void DebugMotionPlan::clear_v() {
  v_ = 0;
}
inline double DebugMotionPlan::v() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.v)
  return v_;
}
inline void DebugMotionPlan::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.v)
}

// double kappa = 3;
inline void DebugMotionPlan::clear_kappa() {
  kappa_ = 0;
}
inline double DebugMotionPlan::kappa() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.kappa)
  return kappa_;
}
inline void DebugMotionPlan::set_kappa(double value) {
  
  kappa_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.kappa)
}

// double a = 4;
inline void DebugMotionPlan::clear_a() {
  a_ = 0;
}
inline double DebugMotionPlan::a() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.a)
  return a_;
}
inline void DebugMotionPlan::set_a(double value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.a)
}

// double ego_speed = 5;
inline void DebugMotionPlan::clear_ego_speed() {
  ego_speed_ = 0;
}
inline double DebugMotionPlan::ego_speed() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.ego_speed)
  return ego_speed_;
}
inline void DebugMotionPlan::set_ego_speed(double value) {
  
  ego_speed_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.ego_speed)
}

// double cruise_speed_max = 6;
inline void DebugMotionPlan::clear_cruise_speed_max() {
  cruise_speed_max_ = 0;
}
inline double DebugMotionPlan::cruise_speed_max() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.cruise_speed_max)
  return cruise_speed_max_;
}
inline void DebugMotionPlan::set_cruise_speed_max(double value) {
  
  cruise_speed_max_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.cruise_speed_max)
}

// int32 following_object_id = 7;
inline void DebugMotionPlan::clear_following_object_id() {
  following_object_id_ = 0;
}
inline ::google::protobuf::int32 DebugMotionPlan::following_object_id() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.following_object_id)
  return following_object_id_;
}
inline void DebugMotionPlan::set_following_object_id(::google::protobuf::int32 value) {
  
  following_object_id_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.following_object_id)
}

// double following_object_v = 8;
inline void DebugMotionPlan::clear_following_object_v() {
  following_object_v_ = 0;
}
inline double DebugMotionPlan::following_object_v() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.following_object_v)
  return following_object_v_;
}
inline void DebugMotionPlan::set_following_object_v(double value) {
  
  following_object_v_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.following_object_v)
}

// double following_object_dis = 9;
inline void DebugMotionPlan::clear_following_object_dis() {
  following_object_dis_ = 0;
}
inline double DebugMotionPlan::following_object_dis() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.following_object_dis)
  return following_object_dis_;
}
inline void DebugMotionPlan::set_following_object_dis(double value) {
  
  following_object_dis_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.following_object_dis)
}

// double following_object_a = 10;
inline void DebugMotionPlan::clear_following_object_a() {
  following_object_a_ = 0;
}
inline double DebugMotionPlan::following_object_a() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.following_object_a)
  return following_object_a_;
}
inline void DebugMotionPlan::set_following_object_a(double value) {
  
  following_object_a_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.following_object_a)
}

// double following_object_min_s = 11;
inline void DebugMotionPlan::clear_following_object_min_s() {
  following_object_min_s_ = 0;
}
inline double DebugMotionPlan::following_object_min_s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.following_object_min_s)
  return following_object_min_s_;
}
inline void DebugMotionPlan::set_following_object_min_s(double value) {
  
  following_object_min_s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.following_object_min_s)
}

// double following_object_min_t = 12;
inline void DebugMotionPlan::clear_following_object_min_t() {
  following_object_min_t_ = 0;
}
inline double DebugMotionPlan::following_object_min_t() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.following_object_min_t)
  return following_object_min_t_;
}
inline void DebugMotionPlan::set_following_object_min_t(double value) {
  
  following_object_min_t_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.following_object_min_t)
}

// double following_object_target_dis = 13;
inline void DebugMotionPlan::clear_following_object_target_dis() {
  following_object_target_dis_ = 0;
}
inline double DebugMotionPlan::following_object_target_dis() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.following_object_target_dis)
  return following_object_target_dis_;
}
inline void DebugMotionPlan::set_following_object_target_dis(double value) {
  
  following_object_target_dis_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.following_object_target_dis)
}

// int32 is_new_path = 14;
inline void DebugMotionPlan::clear_is_new_path() {
  is_new_path_ = 0;
}
inline ::google::protobuf::int32 DebugMotionPlan::is_new_path() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.is_new_path)
  return is_new_path_;
}
inline void DebugMotionPlan::set_is_new_path(::google::protobuf::int32 value) {
  
  is_new_path_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.is_new_path)
}

// double init_point_s = 15;
inline void DebugMotionPlan::clear_init_point_s() {
  init_point_s_ = 0;
}
inline double DebugMotionPlan::init_point_s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.init_point_s)
  return init_point_s_;
}
inline void DebugMotionPlan::set_init_point_s(double value) {
  
  init_point_s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.init_point_s)
}

// double init_point_l = 16;
inline void DebugMotionPlan::clear_init_point_l() {
  init_point_l_ = 0;
}
inline double DebugMotionPlan::init_point_l() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.init_point_l)
  return init_point_l_;
}
inline void DebugMotionPlan::set_init_point_l(double value) {
  
  init_point_l_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.init_point_l)
}

// double init_point_dl = 17;
inline void DebugMotionPlan::clear_init_point_dl() {
  init_point_dl_ = 0;
}
inline double DebugMotionPlan::init_point_dl() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.init_point_dl)
  return init_point_dl_;
}
inline void DebugMotionPlan::set_init_point_dl(double value) {
  
  init_point_dl_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.init_point_dl)
}

// double init_point_ddl = 18;
inline void DebugMotionPlan::clear_init_point_ddl() {
  init_point_ddl_ = 0;
}
inline double DebugMotionPlan::init_point_ddl() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.init_point_ddl)
  return init_point_ddl_;
}
inline void DebugMotionPlan::set_init_point_ddl(double value) {
  
  init_point_ddl_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.init_point_ddl)
}

// double locpos_s = 19;
inline void DebugMotionPlan::clear_locpos_s() {
  locpos_s_ = 0;
}
inline double DebugMotionPlan::locpos_s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.locpos_s)
  return locpos_s_;
}
inline void DebugMotionPlan::set_locpos_s(double value) {
  
  locpos_s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.locpos_s)
}

// int32 is_fallback_trajectory = 20;
inline void DebugMotionPlan::clear_is_fallback_trajectory() {
  is_fallback_trajectory_ = 0;
}
inline ::google::protobuf::int32 DebugMotionPlan::is_fallback_trajectory() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.is_fallback_trajectory)
  return is_fallback_trajectory_;
}
inline void DebugMotionPlan::set_is_fallback_trajectory(::google::protobuf::int32 value) {
  
  is_fallback_trajectory_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.is_fallback_trajectory)
}

// string path_fallback_reason = 21;
inline void DebugMotionPlan::clear_path_fallback_reason() {
  path_fallback_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DebugMotionPlan::path_fallback_reason() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.path_fallback_reason)
  return path_fallback_reason_.GetNoArena();
}
inline void DebugMotionPlan::set_path_fallback_reason(const ::std::string& value) {
  
  path_fallback_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.path_fallback_reason)
}
#if LANG_CXX11
inline void DebugMotionPlan::set_path_fallback_reason(::std::string&& value) {
  
  path_fallback_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning_debug_msgs.DebugMotionPlan.path_fallback_reason)
}
#endif
inline void DebugMotionPlan::set_path_fallback_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_fallback_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.DebugMotionPlan.path_fallback_reason)
}
inline void DebugMotionPlan::set_path_fallback_reason(const char* value, size_t size) {
  
  path_fallback_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.DebugMotionPlan.path_fallback_reason)
}
inline ::std::string* DebugMotionPlan::mutable_path_fallback_reason() {
  
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugMotionPlan.path_fallback_reason)
  return path_fallback_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DebugMotionPlan::release_path_fallback_reason() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.DebugMotionPlan.path_fallback_reason)
  
  return path_fallback_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DebugMotionPlan::set_allocated_path_fallback_reason(::std::string* path_fallback_reason) {
  if (path_fallback_reason != NULL) {
    
  } else {
    
  }
  path_fallback_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path_fallback_reason);
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.DebugMotionPlan.path_fallback_reason)
}

// string speed_fallback_reason = 22;
inline void DebugMotionPlan::clear_speed_fallback_reason() {
  speed_fallback_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DebugMotionPlan::speed_fallback_reason() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.speed_fallback_reason)
  return speed_fallback_reason_.GetNoArena();
}
inline void DebugMotionPlan::set_speed_fallback_reason(const ::std::string& value) {
  
  speed_fallback_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.speed_fallback_reason)
}
#if LANG_CXX11
inline void DebugMotionPlan::set_speed_fallback_reason(::std::string&& value) {
  
  speed_fallback_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning_debug_msgs.DebugMotionPlan.speed_fallback_reason)
}
#endif
inline void DebugMotionPlan::set_speed_fallback_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  speed_fallback_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.DebugMotionPlan.speed_fallback_reason)
}
inline void DebugMotionPlan::set_speed_fallback_reason(const char* value, size_t size) {
  
  speed_fallback_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.DebugMotionPlan.speed_fallback_reason)
}
inline ::std::string* DebugMotionPlan::mutable_speed_fallback_reason() {
  
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugMotionPlan.speed_fallback_reason)
  return speed_fallback_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DebugMotionPlan::release_speed_fallback_reason() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.DebugMotionPlan.speed_fallback_reason)
  
  return speed_fallback_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DebugMotionPlan::set_allocated_speed_fallback_reason(::std::string* speed_fallback_reason) {
  if (speed_fallback_reason != NULL) {
    
  } else {
    
  }
  speed_fallback_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), speed_fallback_reason);
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.DebugMotionPlan.speed_fallback_reason)
}

// int32 trajectory_type = 23;
inline void DebugMotionPlan::clear_trajectory_type() {
  trajectory_type_ = 0;
}
inline ::google::protobuf::int32 DebugMotionPlan::trajectory_type() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.trajectory_type)
  return trajectory_type_;
}
inline void DebugMotionPlan::set_trajectory_type(::google::protobuf::int32 value) {
  
  trajectory_type_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.trajectory_type)
}

// bool is_replan = 24;
inline void DebugMotionPlan::clear_is_replan() {
  is_replan_ = false;
}
inline bool DebugMotionPlan::is_replan() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.is_replan)
  return is_replan_;
}
inline void DebugMotionPlan::set_is_replan(bool value) {
  
  is_replan_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.is_replan)
}

// int32 replan_reason = 25;
inline void DebugMotionPlan::clear_replan_reason() {
  replan_reason_ = 0;
}
inline ::google::protobuf::int32 DebugMotionPlan::replan_reason() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.replan_reason)
  return replan_reason_;
}
inline void DebugMotionPlan::set_replan_reason(::google::protobuf::int32 value) {
  
  replan_reason_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.replan_reason)
}

// string generate_stop_trajectory_reason = 26;
inline void DebugMotionPlan::clear_generate_stop_trajectory_reason() {
  generate_stop_trajectory_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DebugMotionPlan::generate_stop_trajectory_reason() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.generate_stop_trajectory_reason)
  return generate_stop_trajectory_reason_.GetNoArena();
}
inline void DebugMotionPlan::set_generate_stop_trajectory_reason(const ::std::string& value) {
  
  generate_stop_trajectory_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.generate_stop_trajectory_reason)
}
#if LANG_CXX11
inline void DebugMotionPlan::set_generate_stop_trajectory_reason(::std::string&& value) {
  
  generate_stop_trajectory_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning_debug_msgs.DebugMotionPlan.generate_stop_trajectory_reason)
}
#endif
inline void DebugMotionPlan::set_generate_stop_trajectory_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  generate_stop_trajectory_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.DebugMotionPlan.generate_stop_trajectory_reason)
}
inline void DebugMotionPlan::set_generate_stop_trajectory_reason(const char* value, size_t size) {
  
  generate_stop_trajectory_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.DebugMotionPlan.generate_stop_trajectory_reason)
}
inline ::std::string* DebugMotionPlan::mutable_generate_stop_trajectory_reason() {
  
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugMotionPlan.generate_stop_trajectory_reason)
  return generate_stop_trajectory_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DebugMotionPlan::release_generate_stop_trajectory_reason() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.DebugMotionPlan.generate_stop_trajectory_reason)
  
  return generate_stop_trajectory_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DebugMotionPlan::set_allocated_generate_stop_trajectory_reason(::std::string* generate_stop_trajectory_reason) {
  if (generate_stop_trajectory_reason != NULL) {
    
  } else {
    
  }
  generate_stop_trajectory_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), generate_stop_trajectory_reason);
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.DebugMotionPlan.generate_stop_trajectory_reason)
}

// int32 yield_object_id = 27;
inline void DebugMotionPlan::clear_yield_object_id() {
  yield_object_id_ = 0;
}
inline ::google::protobuf::int32 DebugMotionPlan::yield_object_id() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.yield_object_id)
  return yield_object_id_;
}
inline void DebugMotionPlan::set_yield_object_id(::google::protobuf::int32 value) {
  
  yield_object_id_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.yield_object_id)
}

// double yield_object_v = 28;
inline void DebugMotionPlan::clear_yield_object_v() {
  yield_object_v_ = 0;
}
inline double DebugMotionPlan::yield_object_v() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.yield_object_v)
  return yield_object_v_;
}
inline void DebugMotionPlan::set_yield_object_v(double value) {
  
  yield_object_v_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.yield_object_v)
}

// double yield_object_current_s = 29;
inline void DebugMotionPlan::clear_yield_object_current_s() {
  yield_object_current_s_ = 0;
}
inline double DebugMotionPlan::yield_object_current_s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.yield_object_current_s)
  return yield_object_current_s_;
}
inline void DebugMotionPlan::set_yield_object_current_s(double value) {
  
  yield_object_current_s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.yield_object_current_s)
}

// double yield_object_collision_min_s = 30;
inline void DebugMotionPlan::clear_yield_object_collision_min_s() {
  yield_object_collision_min_s_ = 0;
}
inline double DebugMotionPlan::yield_object_collision_min_s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.yield_object_collision_min_s)
  return yield_object_collision_min_s_;
}
inline void DebugMotionPlan::set_yield_object_collision_min_s(double value) {
  
  yield_object_collision_min_s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.yield_object_collision_min_s)
}

// double yield_object_collision_min_t = 31;
inline void DebugMotionPlan::clear_yield_object_collision_min_t() {
  yield_object_collision_min_t_ = 0;
}
inline double DebugMotionPlan::yield_object_collision_min_t() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.yield_object_collision_min_t)
  return yield_object_collision_min_t_;
}
inline void DebugMotionPlan::set_yield_object_collision_min_t(double value) {
  
  yield_object_collision_min_t_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.yield_object_collision_min_t)
}

// repeated .planning_debug_msgs.SLPoint path_data = 32;
inline int DebugMotionPlan::path_data_size() const {
  return path_data_.size();
}
inline void DebugMotionPlan::clear_path_data() {
  path_data_.Clear();
}
inline const ::planning_debug_msgs::SLPoint& DebugMotionPlan::path_data(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.path_data)
  return path_data_.Get(index);
}
inline ::planning_debug_msgs::SLPoint* DebugMotionPlan::mutable_path_data(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugMotionPlan.path_data)
  return path_data_.Mutable(index);
}
inline ::planning_debug_msgs::SLPoint* DebugMotionPlan::add_path_data() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugMotionPlan.path_data)
  return path_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::SLPoint >*
DebugMotionPlan::mutable_path_data() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugMotionPlan.path_data)
  return &path_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::SLPoint >&
DebugMotionPlan::path_data() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugMotionPlan.path_data)
  return path_data_;
}

// repeated .planning_debug_msgs.SpeedPoint speed_data = 33;
inline int DebugMotionPlan::speed_data_size() const {
  return speed_data_.size();
}
inline void DebugMotionPlan::clear_speed_data() {
  speed_data_.Clear();
}
inline const ::planning_debug_msgs::SpeedPoint& DebugMotionPlan::speed_data(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.speed_data)
  return speed_data_.Get(index);
}
inline ::planning_debug_msgs::SpeedPoint* DebugMotionPlan::mutable_speed_data(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugMotionPlan.speed_data)
  return speed_data_.Mutable(index);
}
inline ::planning_debug_msgs::SpeedPoint* DebugMotionPlan::add_speed_data() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugMotionPlan.speed_data)
  return speed_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::SpeedPoint >*
DebugMotionPlan::mutable_speed_data() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugMotionPlan.speed_data)
  return &speed_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::SpeedPoint >&
DebugMotionPlan::speed_data() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugMotionPlan.speed_data)
  return speed_data_;
}

// int32 reference_line_smoothed_status = 34;
inline void DebugMotionPlan::clear_reference_line_smoothed_status() {
  reference_line_smoothed_status_ = 0;
}
inline ::google::protobuf::int32 DebugMotionPlan::reference_line_smoothed_status() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.reference_line_smoothed_status)
  return reference_line_smoothed_status_;
}
inline void DebugMotionPlan::set_reference_line_smoothed_status(::google::protobuf::int32 value) {
  
  reference_line_smoothed_status_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.reference_line_smoothed_status)
}

// int32 min_kappa_index = 35;
inline void DebugMotionPlan::clear_min_kappa_index() {
  min_kappa_index_ = 0;
}
inline ::google::protobuf::int32 DebugMotionPlan::min_kappa_index() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.min_kappa_index)
  return min_kappa_index_;
}
inline void DebugMotionPlan::set_min_kappa_index(::google::protobuf::int32 value) {
  
  min_kappa_index_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.min_kappa_index)
}

// int32 max_kappa_index = 36;
inline void DebugMotionPlan::clear_max_kappa_index() {
  max_kappa_index_ = 0;
}
inline ::google::protobuf::int32 DebugMotionPlan::max_kappa_index() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.max_kappa_index)
  return max_kappa_index_;
}
inline void DebugMotionPlan::set_max_kappa_index(::google::protobuf::int32 value) {
  
  max_kappa_index_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.max_kappa_index)
}

// float kappa_min = 37;
inline void DebugMotionPlan::clear_kappa_min() {
  kappa_min_ = 0;
}
inline float DebugMotionPlan::kappa_min() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.kappa_min)
  return kappa_min_;
}
inline void DebugMotionPlan::set_kappa_min(float value) {
  
  kappa_min_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.kappa_min)
}

// float kappa_max = 38;
inline void DebugMotionPlan::clear_kappa_max() {
  kappa_max_ = 0;
}
inline float DebugMotionPlan::kappa_max() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.kappa_max)
  return kappa_max_;
}
inline void DebugMotionPlan::set_kappa_max(float value) {
  
  kappa_max_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.kappa_max)
}

// float total_time = 39;
inline void DebugMotionPlan::clear_total_time() {
  total_time_ = 0;
}
inline float DebugMotionPlan::total_time() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.total_time)
  return total_time_;
}
inline void DebugMotionPlan::set_total_time(float value) {
  
  total_time_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.total_time)
}

// float pathplan_total_time = 40;
inline void DebugMotionPlan::clear_pathplan_total_time() {
  pathplan_total_time_ = 0;
}
inline float DebugMotionPlan::pathplan_total_time() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.pathplan_total_time)
  return pathplan_total_time_;
}
inline void DebugMotionPlan::set_pathplan_total_time(float value) {
  
  pathplan_total_time_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.pathplan_total_time)
}

// float speedplan_total_time = 41;
inline void DebugMotionPlan::clear_speedplan_total_time() {
  speedplan_total_time_ = 0;
}
inline float DebugMotionPlan::speedplan_total_time() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.speedplan_total_time)
  return speedplan_total_time_;
}
inline void DebugMotionPlan::set_speedplan_total_time(float value) {
  
  speedplan_total_time_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.speedplan_total_time)
}

// repeated string speedplan_task = 42;
inline int DebugMotionPlan::speedplan_task_size() const {
  return speedplan_task_.size();
}
inline void DebugMotionPlan::clear_speedplan_task() {
  speedplan_task_.Clear();
}
inline const ::std::string& DebugMotionPlan::speedplan_task(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.speedplan_task)
  return speedplan_task_.Get(index);
}
inline ::std::string* DebugMotionPlan::mutable_speedplan_task(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugMotionPlan.speedplan_task)
  return speedplan_task_.Mutable(index);
}
inline void DebugMotionPlan::set_speedplan_task(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.speedplan_task)
  speedplan_task_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DebugMotionPlan::set_speedplan_task(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.speedplan_task)
  speedplan_task_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DebugMotionPlan::set_speedplan_task(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  speedplan_task_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.DebugMotionPlan.speedplan_task)
}
inline void DebugMotionPlan::set_speedplan_task(int index, const char* value, size_t size) {
  speedplan_task_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.DebugMotionPlan.speedplan_task)
}
inline ::std::string* DebugMotionPlan::add_speedplan_task() {
  // @@protoc_insertion_point(field_add_mutable:planning_debug_msgs.DebugMotionPlan.speedplan_task)
  return speedplan_task_.Add();
}
inline void DebugMotionPlan::add_speedplan_task(const ::std::string& value) {
  speedplan_task_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugMotionPlan.speedplan_task)
}
#if LANG_CXX11
inline void DebugMotionPlan::add_speedplan_task(::std::string&& value) {
  speedplan_task_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugMotionPlan.speedplan_task)
}
#endif
inline void DebugMotionPlan::add_speedplan_task(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  speedplan_task_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:planning_debug_msgs.DebugMotionPlan.speedplan_task)
}
inline void DebugMotionPlan::add_speedplan_task(const char* value, size_t size) {
  speedplan_task_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:planning_debug_msgs.DebugMotionPlan.speedplan_task)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DebugMotionPlan::speedplan_task() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugMotionPlan.speedplan_task)
  return speedplan_task_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DebugMotionPlan::mutable_speedplan_task() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugMotionPlan.speedplan_task)
  return &speedplan_task_;
}

// repeated float speedplan_time = 43;
inline int DebugMotionPlan::speedplan_time_size() const {
  return speedplan_time_.size();
}
inline void DebugMotionPlan::clear_speedplan_time() {
  speedplan_time_.Clear();
}
inline float DebugMotionPlan::speedplan_time(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.speedplan_time)
  return speedplan_time_.Get(index);
}
inline void DebugMotionPlan::set_speedplan_time(int index, float value) {
  speedplan_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.speedplan_time)
}
inline void DebugMotionPlan::add_speedplan_time(float value) {
  speedplan_time_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugMotionPlan.speedplan_time)
}
inline const ::google::protobuf::RepeatedField< float >&
DebugMotionPlan::speedplan_time() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugMotionPlan.speedplan_time)
  return speedplan_time_;
}
inline ::google::protobuf::RepeatedField< float >*
DebugMotionPlan::mutable_speedplan_time() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugMotionPlan.speedplan_time)
  return &speedplan_time_;
}

// repeated float speed_upper_constraint = 44;
inline int DebugMotionPlan::speed_upper_constraint_size() const {
  return speed_upper_constraint_.size();
}
inline void DebugMotionPlan::clear_speed_upper_constraint() {
  speed_upper_constraint_.Clear();
}
inline float DebugMotionPlan::speed_upper_constraint(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.speed_upper_constraint)
  return speed_upper_constraint_.Get(index);
}
inline void DebugMotionPlan::set_speed_upper_constraint(int index, float value) {
  speed_upper_constraint_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.speed_upper_constraint)
}
inline void DebugMotionPlan::add_speed_upper_constraint(float value) {
  speed_upper_constraint_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugMotionPlan.speed_upper_constraint)
}
inline const ::google::protobuf::RepeatedField< float >&
DebugMotionPlan::speed_upper_constraint() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugMotionPlan.speed_upper_constraint)
  return speed_upper_constraint_;
}
inline ::google::protobuf::RepeatedField< float >*
DebugMotionPlan::mutable_speed_upper_constraint() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugMotionPlan.speed_upper_constraint)
  return &speed_upper_constraint_;
}

// repeated float speed_lower_constraint = 45;
inline int DebugMotionPlan::speed_lower_constraint_size() const {
  return speed_lower_constraint_.size();
}
inline void DebugMotionPlan::clear_speed_lower_constraint() {
  speed_lower_constraint_.Clear();
}
inline float DebugMotionPlan::speed_lower_constraint(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.speed_lower_constraint)
  return speed_lower_constraint_.Get(index);
}
inline void DebugMotionPlan::set_speed_lower_constraint(int index, float value) {
  speed_lower_constraint_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.speed_lower_constraint)
}
inline void DebugMotionPlan::add_speed_lower_constraint(float value) {
  speed_lower_constraint_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugMotionPlan.speed_lower_constraint)
}
inline const ::google::protobuf::RepeatedField< float >&
DebugMotionPlan::speed_lower_constraint() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugMotionPlan.speed_lower_constraint)
  return speed_lower_constraint_;
}
inline ::google::protobuf::RepeatedField< float >*
DebugMotionPlan::mutable_speed_lower_constraint() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugMotionPlan.speed_lower_constraint)
  return &speed_lower_constraint_;
}

// repeated float s_upper_constraint = 46;
inline int DebugMotionPlan::s_upper_constraint_size() const {
  return s_upper_constraint_.size();
}
inline void DebugMotionPlan::clear_s_upper_constraint() {
  s_upper_constraint_.Clear();
}
inline float DebugMotionPlan::s_upper_constraint(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.s_upper_constraint)
  return s_upper_constraint_.Get(index);
}
inline void DebugMotionPlan::set_s_upper_constraint(int index, float value) {
  s_upper_constraint_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.s_upper_constraint)
}
inline void DebugMotionPlan::add_s_upper_constraint(float value) {
  s_upper_constraint_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugMotionPlan.s_upper_constraint)
}
inline const ::google::protobuf::RepeatedField< float >&
DebugMotionPlan::s_upper_constraint() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugMotionPlan.s_upper_constraint)
  return s_upper_constraint_;
}
inline ::google::protobuf::RepeatedField< float >*
DebugMotionPlan::mutable_s_upper_constraint() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugMotionPlan.s_upper_constraint)
  return &s_upper_constraint_;
}

// repeated float s_lower_constraint = 47;
inline int DebugMotionPlan::s_lower_constraint_size() const {
  return s_lower_constraint_.size();
}
inline void DebugMotionPlan::clear_s_lower_constraint() {
  s_lower_constraint_.Clear();
}
inline float DebugMotionPlan::s_lower_constraint(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.s_lower_constraint)
  return s_lower_constraint_.Get(index);
}
inline void DebugMotionPlan::set_s_lower_constraint(int index, float value) {
  s_lower_constraint_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.s_lower_constraint)
}
inline void DebugMotionPlan::add_s_lower_constraint(float value) {
  s_lower_constraint_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugMotionPlan.s_lower_constraint)
}
inline const ::google::protobuf::RepeatedField< float >&
DebugMotionPlan::s_lower_constraint() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugMotionPlan.s_lower_constraint)
  return s_lower_constraint_;
}
inline ::google::protobuf::RepeatedField< float >*
DebugMotionPlan::mutable_s_lower_constraint() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugMotionPlan.s_lower_constraint)
  return &s_lower_constraint_;
}

// float behavior_parser_time_spend = 48;
inline void DebugMotionPlan::clear_behavior_parser_time_spend() {
  behavior_parser_time_spend_ = 0;
}
inline float DebugMotionPlan::behavior_parser_time_spend() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.behavior_parser_time_spend)
  return behavior_parser_time_spend_;
}
inline void DebugMotionPlan::set_behavior_parser_time_spend(float value) {
  
  behavior_parser_time_spend_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.behavior_parser_time_spend)
}

// float behavior_parser_Reset_t = 49;
inline void DebugMotionPlan::clear_behavior_parser_reset_t() {
  behavior_parser_reset_t_ = 0;
}
inline float DebugMotionPlan::behavior_parser_reset_t() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.behavior_parser_Reset_t)
  return behavior_parser_reset_t_;
}
inline void DebugMotionPlan::set_behavior_parser_reset_t(float value) {
  
  behavior_parser_reset_t_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.behavior_parser_Reset_t)
}

// float behavior_parser_FindTargetRefLine_t = 50;
inline void DebugMotionPlan::clear_behavior_parser_findtargetrefline_t() {
  behavior_parser_findtargetrefline_t_ = 0;
}
inline float DebugMotionPlan::behavior_parser_findtargetrefline_t() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.behavior_parser_FindTargetRefLine_t)
  return behavior_parser_findtargetrefline_t_;
}
inline void DebugMotionPlan::set_behavior_parser_findtargetrefline_t(float value) {
  
  behavior_parser_findtargetrefline_t_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.behavior_parser_FindTargetRefLine_t)
}

// int32 borrow_time_count = 51;
inline void DebugMotionPlan::clear_borrow_time_count() {
  borrow_time_count_ = 0;
}
inline ::google::protobuf::int32 DebugMotionPlan::borrow_time_count() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.borrow_time_count)
  return borrow_time_count_;
}
inline void DebugMotionPlan::set_borrow_time_count(::google::protobuf::int32 value) {
  
  borrow_time_count_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.borrow_time_count)
}

// float behavior_parser_CreateReferenceLineData_t = 52;
inline void DebugMotionPlan::clear_behavior_parser_createreferencelinedata_t() {
  behavior_parser_createreferencelinedata_t_ = 0;
}
inline float DebugMotionPlan::behavior_parser_createreferencelinedata_t() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.behavior_parser_CreateReferenceLineData_t)
  return behavior_parser_createreferencelinedata_t_;
}
inline void DebugMotionPlan::set_behavior_parser_createreferencelinedata_t(float value) {
  
  behavior_parser_createreferencelinedata_t_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.behavior_parser_CreateReferenceLineData_t)
}

// int32 plan_in_lane_ = 53;
inline void DebugMotionPlan::clear_plan_in_lane_() {
  plan_in_lane__ = 0;
}
inline ::google::protobuf::int32 DebugMotionPlan::plan_in_lane_() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.plan_in_lane_)
  return plan_in_lane__;
}
inline void DebugMotionPlan::set_plan_in_lane_(::google::protobuf::int32 value) {
  
  plan_in_lane__ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.plan_in_lane_)
}

// float frame_time_spend = 54;
inline void DebugMotionPlan::clear_frame_time_spend() {
  frame_time_spend_ = 0;
}
inline float DebugMotionPlan::frame_time_spend() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.frame_time_spend)
  return frame_time_spend_;
}
inline void DebugMotionPlan::set_frame_time_spend(float value) {
  
  frame_time_spend_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.frame_time_spend)
}

// float trajectory_stitcher_time_spend = 55;
inline void DebugMotionPlan::clear_trajectory_stitcher_time_spend() {
  trajectory_stitcher_time_spend_ = 0;
}
inline float DebugMotionPlan::trajectory_stitcher_time_spend() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.trajectory_stitcher_time_spend)
  return trajectory_stitcher_time_spend_;
}
inline void DebugMotionPlan::set_trajectory_stitcher_time_spend(float value) {
  
  trajectory_stitcher_time_spend_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.trajectory_stitcher_time_spend)
}

// float generate_trajectory_time_spend = 56;
inline void DebugMotionPlan::clear_generate_trajectory_time_spend() {
  generate_trajectory_time_spend_ = 0;
}
inline float DebugMotionPlan::generate_trajectory_time_spend() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.generate_trajectory_time_spend)
  return generate_trajectory_time_spend_;
}
inline void DebugMotionPlan::set_generate_trajectory_time_spend(float value) {
  
  generate_trajectory_time_spend_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.generate_trajectory_time_spend)
}

// int32 passby_limit_flag = 57;
inline void DebugMotionPlan::clear_passby_limit_flag() {
  passby_limit_flag_ = 0;
}
inline ::google::protobuf::int32 DebugMotionPlan::passby_limit_flag() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.passby_limit_flag)
  return passby_limit_flag_;
}
inline void DebugMotionPlan::set_passby_limit_flag(::google::protobuf::int32 value) {
  
  passby_limit_flag_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.passby_limit_flag)
}

// float passby_limit_s = 58;
inline void DebugMotionPlan::clear_passby_limit_s() {
  passby_limit_s_ = 0;
}
inline float DebugMotionPlan::passby_limit_s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.passby_limit_s)
  return passby_limit_s_;
}
inline void DebugMotionPlan::set_passby_limit_s(float value) {
  
  passby_limit_s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.passby_limit_s)
}

// float passby_limit_v = 59;
inline void DebugMotionPlan::clear_passby_limit_v() {
  passby_limit_v_ = 0;
}
inline float DebugMotionPlan::passby_limit_v() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.passby_limit_v)
  return passby_limit_v_;
}
inline void DebugMotionPlan::set_passby_limit_v(float value) {
  
  passby_limit_v_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.passby_limit_v)
}

// float yield_weight_factor = 60;
inline void DebugMotionPlan::clear_yield_weight_factor() {
  yield_weight_factor_ = 0;
}
inline float DebugMotionPlan::yield_weight_factor() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.yield_weight_factor)
  return yield_weight_factor_;
}
inline void DebugMotionPlan::set_yield_weight_factor(float value) {
  
  yield_weight_factor_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.yield_weight_factor)
}

// float cruise_weight_factor = 61;
inline void DebugMotionPlan::clear_cruise_weight_factor() {
  cruise_weight_factor_ = 0;
}
inline float DebugMotionPlan::cruise_weight_factor() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.cruise_weight_factor)
  return cruise_weight_factor_;
}
inline void DebugMotionPlan::set_cruise_weight_factor(float value) {
  
  cruise_weight_factor_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.cruise_weight_factor)
}

// float follow_weight_factor = 62;
inline void DebugMotionPlan::clear_follow_weight_factor() {
  follow_weight_factor_ = 0;
}
inline float DebugMotionPlan::follow_weight_factor() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.follow_weight_factor)
  return follow_weight_factor_;
}
inline void DebugMotionPlan::set_follow_weight_factor(float value) {
  
  follow_weight_factor_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.follow_weight_factor)
}

// int32 borrow_lane_type = 63;
inline void DebugMotionPlan::clear_borrow_lane_type() {
  borrow_lane_type_ = 0;
}
inline ::google::protobuf::int32 DebugMotionPlan::borrow_lane_type() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.borrow_lane_type)
  return borrow_lane_type_;
}
inline void DebugMotionPlan::set_borrow_lane_type(::google::protobuf::int32 value) {
  
  borrow_lane_type_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.borrow_lane_type)
}

// int32 box_planning_state = 64;
inline void DebugMotionPlan::clear_box_planning_state() {
  box_planning_state_ = 0;
}
inline ::google::protobuf::int32 DebugMotionPlan::box_planning_state() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.box_planning_state)
  return box_planning_state_;
}
inline void DebugMotionPlan::set_box_planning_state(::google::protobuf::int32 value) {
  
  box_planning_state_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.box_planning_state)
}

// float jerk_weight_factor = 65;
inline void DebugMotionPlan::clear_jerk_weight_factor() {
  jerk_weight_factor_ = 0;
}
inline float DebugMotionPlan::jerk_weight_factor() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.jerk_weight_factor)
  return jerk_weight_factor_;
}
inline void DebugMotionPlan::set_jerk_weight_factor(float value) {
  
  jerk_weight_factor_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.jerk_weight_factor)
}

// float follow_v_weight_factor = 66;
inline void DebugMotionPlan::clear_follow_v_weight_factor() {
  follow_v_weight_factor_ = 0;
}
inline float DebugMotionPlan::follow_v_weight_factor() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.follow_v_weight_factor)
  return follow_v_weight_factor_;
}
inline void DebugMotionPlan::set_follow_v_weight_factor(float value) {
  
  follow_v_weight_factor_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.follow_v_weight_factor)
}

// int32 acc_dcc_mode = 67;
inline void DebugMotionPlan::clear_acc_dcc_mode() {
  acc_dcc_mode_ = 0;
}
inline ::google::protobuf::int32 DebugMotionPlan::acc_dcc_mode() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.acc_dcc_mode)
  return acc_dcc_mode_;
}
inline void DebugMotionPlan::set_acc_dcc_mode(::google::protobuf::int32 value) {
  
  acc_dcc_mode_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.acc_dcc_mode)
}

// float follow_dis_error = 68;
inline void DebugMotionPlan::clear_follow_dis_error() {
  follow_dis_error_ = 0;
}
inline float DebugMotionPlan::follow_dis_error() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.follow_dis_error)
  return follow_dis_error_;
}
inline void DebugMotionPlan::set_follow_dis_error(float value) {
  
  follow_dis_error_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.follow_dis_error)
}

// int32 real_time_ob_avoid_state = 69;
inline void DebugMotionPlan::clear_real_time_ob_avoid_state() {
  real_time_ob_avoid_state_ = 0;
}
inline ::google::protobuf::int32 DebugMotionPlan::real_time_ob_avoid_state() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.real_time_ob_avoid_state)
  return real_time_ob_avoid_state_;
}
inline void DebugMotionPlan::set_real_time_ob_avoid_state(::google::protobuf::int32 value) {
  
  real_time_ob_avoid_state_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.real_time_ob_avoid_state)
}

// int32 no_real_time_cnt = 70;
inline void DebugMotionPlan::clear_no_real_time_cnt() {
  no_real_time_cnt_ = 0;
}
inline ::google::protobuf::int32 DebugMotionPlan::no_real_time_cnt() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.no_real_time_cnt)
  return no_real_time_cnt_;
}
inline void DebugMotionPlan::set_no_real_time_cnt(::google::protobuf::int32 value) {
  
  no_real_time_cnt_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.no_real_time_cnt)
}

// float cog_linear_velocity = 71;
inline void DebugMotionPlan::clear_cog_linear_velocity() {
  cog_linear_velocity_ = 0;
}
inline float DebugMotionPlan::cog_linear_velocity() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.cog_linear_velocity)
  return cog_linear_velocity_;
}
inline void DebugMotionPlan::set_cog_linear_velocity(float value) {
  
  cog_linear_velocity_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.cog_linear_velocity)
}

// float dis_to_virtual_wall = 72;
inline void DebugMotionPlan::clear_dis_to_virtual_wall() {
  dis_to_virtual_wall_ = 0;
}
inline float DebugMotionPlan::dis_to_virtual_wall() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.dis_to_virtual_wall)
  return dis_to_virtual_wall_;
}
inline void DebugMotionPlan::set_dis_to_virtual_wall(float value) {
  
  dis_to_virtual_wall_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.dis_to_virtual_wall)
}

// int32 sentence_action = 73;
inline void DebugMotionPlan::clear_sentence_action() {
  sentence_action_ = 0;
}
inline ::google::protobuf::int32 DebugMotionPlan::sentence_action() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugMotionPlan.sentence_action)
  return sentence_action_;
}
inline void DebugMotionPlan::set_sentence_action(::google::protobuf::int32 value) {
  
  sentence_action_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugMotionPlan.sentence_action)
}

// -------------------------------------------------------------------

// STpair

// float t = 1;
inline void STpair::clear_t() {
  t_ = 0;
}
inline float STpair::t() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STpair.t)
  return t_;
}
inline void STpair::set_t(float value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STpair.t)
}

// float min_s = 2;
inline void STpair::clear_min_s() {
  min_s_ = 0;
}
inline float STpair::min_s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STpair.min_s)
  return min_s_;
}
inline void STpair::set_min_s(float value) {
  
  min_s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STpair.min_s)
}

// float max_s = 3;
inline void STpair::clear_max_s() {
  max_s_ = 0;
}
inline float STpair::max_s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STpair.max_s)
  return max_s_;
}
inline void STpair::set_max_s(float value) {
  
  max_s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STpair.max_s)
}

// -------------------------------------------------------------------

// DebugPdObject

// repeated string lane_ids = 1;
inline int DebugPdObject::lane_ids_size() const {
  return lane_ids_.size();
}
inline void DebugPdObject::clear_lane_ids() {
  lane_ids_.Clear();
}
inline const ::std::string& DebugPdObject::lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugPdObject.lane_ids)
  return lane_ids_.Get(index);
}
inline ::std::string* DebugPdObject::mutable_lane_ids(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugPdObject.lane_ids)
  return lane_ids_.Mutable(index);
}
inline void DebugPdObject::set_lane_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugPdObject.lane_ids)
  lane_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DebugPdObject::set_lane_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugPdObject.lane_ids)
  lane_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DebugPdObject::set_lane_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  lane_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.DebugPdObject.lane_ids)
}
inline void DebugPdObject::set_lane_ids(int index, const char* value, size_t size) {
  lane_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.DebugPdObject.lane_ids)
}
inline ::std::string* DebugPdObject::add_lane_ids() {
  // @@protoc_insertion_point(field_add_mutable:planning_debug_msgs.DebugPdObject.lane_ids)
  return lane_ids_.Add();
}
inline void DebugPdObject::add_lane_ids(const ::std::string& value) {
  lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugPdObject.lane_ids)
}
#if LANG_CXX11
inline void DebugPdObject::add_lane_ids(::std::string&& value) {
  lane_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugPdObject.lane_ids)
}
#endif
inline void DebugPdObject::add_lane_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:planning_debug_msgs.DebugPdObject.lane_ids)
}
inline void DebugPdObject::add_lane_ids(const char* value, size_t size) {
  lane_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:planning_debug_msgs.DebugPdObject.lane_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DebugPdObject::lane_ids() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugPdObject.lane_ids)
  return lane_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DebugPdObject::mutable_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugPdObject.lane_ids)
  return &lane_ids_;
}

// bool right_of_way = 2;
inline void DebugPdObject::clear_right_of_way() {
  right_of_way_ = false;
}
inline bool DebugPdObject::right_of_way() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugPdObject.right_of_way)
  return right_of_way_;
}
inline void DebugPdObject::set_right_of_way(bool value) {
  
  right_of_way_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugPdObject.right_of_way)
}

// int32 conflict_type = 3;
inline void DebugPdObject::clear_conflict_type() {
  conflict_type_ = 0;
}
inline ::google::protobuf::int32 DebugPdObject::conflict_type() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugPdObject.conflict_type)
  return conflict_type_;
}
inline void DebugPdObject::set_conflict_type(::google::protobuf::int32 value) {
  
  conflict_type_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugPdObject.conflict_type)
}

// repeated .planning_debug_msgs.STpair st = 4;
inline int DebugPdObject::st_size() const {
  return st_.size();
}
inline void DebugPdObject::clear_st() {
  st_.Clear();
}
inline const ::planning_debug_msgs::STpair& DebugPdObject::st(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugPdObject.st)
  return st_.Get(index);
}
inline ::planning_debug_msgs::STpair* DebugPdObject::mutable_st(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugPdObject.st)
  return st_.Mutable(index);
}
inline ::planning_debug_msgs::STpair* DebugPdObject::add_st() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugPdObject.st)
  return st_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::STpair >*
DebugPdObject::mutable_st() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugPdObject.st)
  return &st_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::STpair >&
DebugPdObject::st() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugPdObject.st)
  return st_;
}

// repeated float range_a = 5;
inline int DebugPdObject::range_a_size() const {
  return range_a_.size();
}
inline void DebugPdObject::clear_range_a() {
  range_a_.Clear();
}
inline float DebugPdObject::range_a(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugPdObject.range_a)
  return range_a_.Get(index);
}
inline void DebugPdObject::set_range_a(int index, float value) {
  range_a_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugPdObject.range_a)
}
inline void DebugPdObject::add_range_a(float value) {
  range_a_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugPdObject.range_a)
}
inline const ::google::protobuf::RepeatedField< float >&
DebugPdObject::range_a() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugPdObject.range_a)
  return range_a_;
}
inline ::google::protobuf::RepeatedField< float >*
DebugPdObject::mutable_range_a() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugPdObject.range_a)
  return &range_a_;
}

// repeated float range_pd_s = 6;
inline int DebugPdObject::range_pd_s_size() const {
  return range_pd_s_.size();
}
inline void DebugPdObject::clear_range_pd_s() {
  range_pd_s_.Clear();
}
inline float DebugPdObject::range_pd_s(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugPdObject.range_pd_s)
  return range_pd_s_.Get(index);
}
inline void DebugPdObject::set_range_pd_s(int index, float value) {
  range_pd_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugPdObject.range_pd_s)
}
inline void DebugPdObject::add_range_pd_s(float value) {
  range_pd_s_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugPdObject.range_pd_s)
}
inline const ::google::protobuf::RepeatedField< float >&
DebugPdObject::range_pd_s() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugPdObject.range_pd_s)
  return range_pd_s_;
}
inline ::google::protobuf::RepeatedField< float >*
DebugPdObject::mutable_range_pd_s() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugPdObject.range_pd_s)
  return &range_pd_s_;
}

// -------------------------------------------------------------------

// DebugObject

// int32 id = 1;
inline void DebugObject::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 DebugObject::id() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObject.id)
  return id_;
}
inline void DebugObject::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugObject.id)
}

// int32 cell_num = 2;
inline void DebugObject::clear_cell_num() {
  cell_num_ = 0;
}
inline ::google::protobuf::int32 DebugObject::cell_num() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObject.cell_num)
  return cell_num_;
}
inline void DebugObject::set_cell_num(::google::protobuf::int32 value) {
  
  cell_num_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugObject.cell_num)
}

// float acc = 3;
inline void DebugObject::clear_acc() {
  acc_ = 0;
}
inline float DebugObject::acc() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObject.acc)
  return acc_;
}
inline void DebugObject::set_acc(float value) {
  
  acc_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugObject.acc)
}

// float speed = 4;
inline void DebugObject::clear_speed() {
  speed_ = 0;
}
inline float DebugObject::speed() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObject.speed)
  return speed_;
}
inline void DebugObject::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugObject.speed)
}

// string lane_id = 5;
inline void DebugObject::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DebugObject::lane_id() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObject.lane_id)
  return lane_id_.GetNoArena();
}
inline void DebugObject::set_lane_id(const ::std::string& value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugObject.lane_id)
}
#if LANG_CXX11
inline void DebugObject::set_lane_id(::std::string&& value) {
  
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning_debug_msgs.DebugObject.lane_id)
}
#endif
inline void DebugObject::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.DebugObject.lane_id)
}
inline void DebugObject::set_lane_id(const char* value, size_t size) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.DebugObject.lane_id)
}
inline ::std::string* DebugObject::mutable_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugObject.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DebugObject::release_lane_id() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.DebugObject.lane_id)
  
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DebugObject::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    
  } else {
    
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.DebugObject.lane_id)
}

// bool is_static = 6;
inline void DebugObject::clear_is_static() {
  is_static_ = false;
}
inline bool DebugObject::is_static() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObject.is_static)
  return is_static_;
}
inline void DebugObject::set_is_static(bool value) {
  
  is_static_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugObject.is_static)
}

// bool was_dynamic = 7;
inline void DebugObject::clear_was_dynamic() {
  was_dynamic_ = false;
}
inline bool DebugObject::was_dynamic() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObject.was_dynamic)
  return was_dynamic_;
}
inline void DebugObject::set_was_dynamic(bool value) {
  
  was_dynamic_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugObject.was_dynamic)
}

// bool need_focus = 8;
inline void DebugObject::clear_need_focus() {
  need_focus_ = false;
}
inline bool DebugObject::need_focus() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObject.need_focus)
  return need_focus_;
}
inline void DebugObject::set_need_focus(bool value) {
  
  need_focus_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugObject.need_focus)
}

// bool key_focus = 9;
inline void DebugObject::clear_key_focus() {
  key_focus_ = false;
}
inline bool DebugObject::key_focus() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObject.key_focus)
  return key_focus_;
}
inline void DebugObject::set_key_focus(bool value) {
  
  key_focus_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugObject.key_focus)
}

// bool is_reverse_traveling = 10;
inline void DebugObject::clear_is_reverse_traveling() {
  is_reverse_traveling_ = false;
}
inline bool DebugObject::is_reverse_traveling() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObject.is_reverse_traveling)
  return is_reverse_traveling_;
}
inline void DebugObject::set_is_reverse_traveling(bool value) {
  
  is_reverse_traveling_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugObject.is_reverse_traveling)
}

// float dis_to_junction = 11;
inline void DebugObject::clear_dis_to_junction() {
  dis_to_junction_ = 0;
}
inline float DebugObject::dis_to_junction() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObject.dis_to_junction)
  return dis_to_junction_;
}
inline void DebugObject::set_dis_to_junction(float value) {
  
  dis_to_junction_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugObject.dis_to_junction)
}

// float s_l_min_s = 12;
inline void DebugObject::clear_s_l_min_s() {
  s_l_min_s_ = 0;
}
inline float DebugObject::s_l_min_s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObject.s_l_min_s)
  return s_l_min_s_;
}
inline void DebugObject::set_s_l_min_s(float value) {
  
  s_l_min_s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugObject.s_l_min_s)
}

// float s_l_max_s = 13;
inline void DebugObject::clear_s_l_max_s() {
  s_l_max_s_ = 0;
}
inline float DebugObject::s_l_max_s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObject.s_l_max_s)
  return s_l_max_s_;
}
inline void DebugObject::set_s_l_max_s(float value) {
  
  s_l_max_s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugObject.s_l_max_s)
}

// float s_l_min_l = 14;
inline void DebugObject::clear_s_l_min_l() {
  s_l_min_l_ = 0;
}
inline float DebugObject::s_l_min_l() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObject.s_l_min_l)
  return s_l_min_l_;
}
inline void DebugObject::set_s_l_min_l(float value) {
  
  s_l_min_l_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugObject.s_l_min_l)
}

// float s_l_max_l = 15;
inline void DebugObject::clear_s_l_max_l() {
  s_l_max_l_ = 0;
}
inline float DebugObject::s_l_max_l() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObject.s_l_max_l)
  return s_l_max_l_;
}
inline void DebugObject::set_s_l_max_l(float value) {
  
  s_l_max_l_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugObject.s_l_max_l)
}

// double nearest_xg = 16;
inline void DebugObject::clear_nearest_xg() {
  nearest_xg_ = 0;
}
inline double DebugObject::nearest_xg() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObject.nearest_xg)
  return nearest_xg_;
}
inline void DebugObject::set_nearest_xg(double value) {
  
  nearest_xg_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugObject.nearest_xg)
}

// double nearest_yg = 17;
inline void DebugObject::clear_nearest_yg() {
  nearest_yg_ = 0;
}
inline double DebugObject::nearest_yg() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObject.nearest_yg)
  return nearest_yg_;
}
inline void DebugObject::set_nearest_yg(double value) {
  
  nearest_yg_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugObject.nearest_yg)
}

// repeated .planning_debug_msgs.DebugPdObject pd_objs = 18;
inline int DebugObject::pd_objs_size() const {
  return pd_objs_.size();
}
inline void DebugObject::clear_pd_objs() {
  pd_objs_.Clear();
}
inline const ::planning_debug_msgs::DebugPdObject& DebugObject::pd_objs(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObject.pd_objs)
  return pd_objs_.Get(index);
}
inline ::planning_debug_msgs::DebugPdObject* DebugObject::mutable_pd_objs(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugObject.pd_objs)
  return pd_objs_.Mutable(index);
}
inline ::planning_debug_msgs::DebugPdObject* DebugObject::add_pd_objs() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugObject.pd_objs)
  return pd_objs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugPdObject >*
DebugObject::mutable_pd_objs() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugObject.pd_objs)
  return &pd_objs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugPdObject >&
DebugObject::pd_objs() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugObject.pd_objs)
  return pd_objs_;
}

// -------------------------------------------------------------------

// DebugGap

// int32 start_id = 1;
inline void DebugGap::clear_start_id() {
  start_id_ = 0;
}
inline ::google::protobuf::int32 DebugGap::start_id() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugGap.start_id)
  return start_id_;
}
inline void DebugGap::set_start_id(::google::protobuf::int32 value) {
  
  start_id_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugGap.start_id)
}

// int32 end_id = 2;
inline void DebugGap::clear_end_id() {
  end_id_ = 0;
}
inline ::google::protobuf::int32 DebugGap::end_id() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugGap.end_id)
  return end_id_;
}
inline void DebugGap::set_end_id(::google::protobuf::int32 value) {
  
  end_id_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugGap.end_id)
}

// float aim_min_s = 3;
inline void DebugGap::clear_aim_min_s() {
  aim_min_s_ = 0;
}
inline float DebugGap::aim_min_s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugGap.aim_min_s)
  return aim_min_s_;
}
inline void DebugGap::set_aim_min_s(float value) {
  
  aim_min_s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugGap.aim_min_s)
}

// float aim_max_s = 4;
inline void DebugGap::clear_aim_max_s() {
  aim_max_s_ = 0;
}
inline float DebugGap::aim_max_s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugGap.aim_max_s)
  return aim_max_s_;
}
inline void DebugGap::set_aim_max_s(float value) {
  
  aim_max_s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugGap.aim_max_s)
}

// float allow_min_v = 5;
inline void DebugGap::clear_allow_min_v() {
  allow_min_v_ = 0;
}
inline float DebugGap::allow_min_v() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugGap.allow_min_v)
  return allow_min_v_;
}
inline void DebugGap::set_allow_min_v(float value) {
  
  allow_min_v_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugGap.allow_min_v)
}

// float allow_max_v = 6;
inline void DebugGap::clear_allow_max_v() {
  allow_max_v_ = 0;
}
inline float DebugGap::allow_max_v() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugGap.allow_max_v)
  return allow_max_v_;
}
inline void DebugGap::set_allow_max_v(float value) {
  
  allow_max_v_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugGap.allow_max_v)
}

// float allow_min_t = 7;
inline void DebugGap::clear_allow_min_t() {
  allow_min_t_ = 0;
}
inline float DebugGap::allow_min_t() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugGap.allow_min_t)
  return allow_min_t_;
}
inline void DebugGap::set_allow_min_t(float value) {
  
  allow_min_t_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugGap.allow_min_t)
}

// uint32 feasibility_level = 8;
inline void DebugGap::clear_feasibility_level() {
  feasibility_level_ = 0u;
}
inline ::google::protobuf::uint32 DebugGap::feasibility_level() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugGap.feasibility_level)
  return feasibility_level_;
}
inline void DebugGap::set_feasibility_level(::google::protobuf::uint32 value) {
  
  feasibility_level_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugGap.feasibility_level)
}

// uint32 safety_level = 9;
inline void DebugGap::clear_safety_level() {
  safety_level_ = 0u;
}
inline ::google::protobuf::uint32 DebugGap::safety_level() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugGap.safety_level)
  return safety_level_;
}
inline void DebugGap::set_safety_level(::google::protobuf::uint32 value) {
  
  safety_level_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugGap.safety_level)
}

// -------------------------------------------------------------------

// DebugLine

// repeated string lane_ids = 1;
inline int DebugLine::lane_ids_size() const {
  return lane_ids_.size();
}
inline void DebugLine::clear_lane_ids() {
  lane_ids_.Clear();
}
inline const ::std::string& DebugLine::lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugLine.lane_ids)
  return lane_ids_.Get(index);
}
inline ::std::string* DebugLine::mutable_lane_ids(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugLine.lane_ids)
  return lane_ids_.Mutable(index);
}
inline void DebugLine::set_lane_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugLine.lane_ids)
  lane_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DebugLine::set_lane_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugLine.lane_ids)
  lane_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DebugLine::set_lane_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  lane_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.DebugLine.lane_ids)
}
inline void DebugLine::set_lane_ids(int index, const char* value, size_t size) {
  lane_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.DebugLine.lane_ids)
}
inline ::std::string* DebugLine::add_lane_ids() {
  // @@protoc_insertion_point(field_add_mutable:planning_debug_msgs.DebugLine.lane_ids)
  return lane_ids_.Add();
}
inline void DebugLine::add_lane_ids(const ::std::string& value) {
  lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugLine.lane_ids)
}
#if LANG_CXX11
inline void DebugLine::add_lane_ids(::std::string&& value) {
  lane_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugLine.lane_ids)
}
#endif
inline void DebugLine::add_lane_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:planning_debug_msgs.DebugLine.lane_ids)
}
inline void DebugLine::add_lane_ids(const char* value, size_t size) {
  lane_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:planning_debug_msgs.DebugLine.lane_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DebugLine::lane_ids() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugLine.lane_ids)
  return lane_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DebugLine::mutable_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugLine.lane_ids)
  return &lane_ids_;
}

// float speed_limit = 2;
inline void DebugLine::clear_speed_limit() {
  speed_limit_ = 0;
}
inline float DebugLine::speed_limit() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugLine.speed_limit)
  return speed_limit_;
}
inline void DebugLine::set_speed_limit(float value) {
  
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugLine.speed_limit)
}

// float dis2line = 3;
inline void DebugLine::clear_dis2line() {
  dis2line_ = 0;
}
inline float DebugLine::dis2line() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugLine.dis2line)
  return dis2line_;
}
inline void DebugLine::set_dis2line(float value) {
  
  dis2line_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugLine.dis2line)
}

// float distance_to_mission_point = 4;
inline void DebugLine::clear_distance_to_mission_point() {
  distance_to_mission_point_ = 0;
}
inline float DebugLine::distance_to_mission_point() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugLine.distance_to_mission_point)
  return distance_to_mission_point_;
}
inline void DebugLine::set_distance_to_mission_point(float value) {
  
  distance_to_mission_point_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugLine.distance_to_mission_point)
}

// .planning_debug_msgs.DebugState block_state = 5;
inline bool DebugLine::has_block_state() const {
  return this != internal_default_instance() && block_state_ != NULL;
}
inline void DebugLine::clear_block_state() {
  if (GetArenaNoVirtual() == NULL && block_state_ != NULL) {
    delete block_state_;
  }
  block_state_ = NULL;
}
inline const ::planning_debug_msgs::DebugState& DebugLine::block_state() const {
  const ::planning_debug_msgs::DebugState* p = block_state_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugLine.block_state)
  return p != NULL ? *p : *reinterpret_cast<const ::planning_debug_msgs::DebugState*>(
      &::planning_debug_msgs::_DebugState_default_instance_);
}
inline ::planning_debug_msgs::DebugState* DebugLine::release_block_state() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.DebugLine.block_state)
  
  ::planning_debug_msgs::DebugState* temp = block_state_;
  block_state_ = NULL;
  return temp;
}
inline ::planning_debug_msgs::DebugState* DebugLine::mutable_block_state() {
  
  if (block_state_ == NULL) {
    block_state_ = new ::planning_debug_msgs::DebugState;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugLine.block_state)
  return block_state_;
}
inline void DebugLine::set_allocated_block_state(::planning_debug_msgs::DebugState* block_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete block_state_;
  }
  if (block_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      block_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, block_state, submessage_arena);
    }
    
  } else {
    
  }
  block_state_ = block_state;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.DebugLine.block_state)
}

// .planning_debug_msgs.DebugState slow_state = 6;
inline bool DebugLine::has_slow_state() const {
  return this != internal_default_instance() && slow_state_ != NULL;
}
inline void DebugLine::clear_slow_state() {
  if (GetArenaNoVirtual() == NULL && slow_state_ != NULL) {
    delete slow_state_;
  }
  slow_state_ = NULL;
}
inline const ::planning_debug_msgs::DebugState& DebugLine::slow_state() const {
  const ::planning_debug_msgs::DebugState* p = slow_state_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugLine.slow_state)
  return p != NULL ? *p : *reinterpret_cast<const ::planning_debug_msgs::DebugState*>(
      &::planning_debug_msgs::_DebugState_default_instance_);
}
inline ::planning_debug_msgs::DebugState* DebugLine::release_slow_state() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.DebugLine.slow_state)
  
  ::planning_debug_msgs::DebugState* temp = slow_state_;
  slow_state_ = NULL;
  return temp;
}
inline ::planning_debug_msgs::DebugState* DebugLine::mutable_slow_state() {
  
  if (slow_state_ == NULL) {
    slow_state_ = new ::planning_debug_msgs::DebugState;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugLine.slow_state)
  return slow_state_;
}
inline void DebugLine::set_allocated_slow_state(::planning_debug_msgs::DebugState* slow_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete slow_state_;
  }
  if (slow_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      slow_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, slow_state, submessage_arena);
    }
    
  } else {
    
  }
  slow_state_ = slow_state;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.DebugLine.slow_state)
}

// int32 global_cost = 7;
inline void DebugLine::clear_global_cost() {
  global_cost_ = 0;
}
inline ::google::protobuf::int32 DebugLine::global_cost() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugLine.global_cost)
  return global_cost_;
}
inline void DebugLine::set_global_cost(::google::protobuf::int32 value) {
  
  global_cost_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugLine.global_cost)
}

// float speed_cost = 8;
inline void DebugLine::clear_speed_cost() {
  speed_cost_ = 0;
}
inline float DebugLine::speed_cost() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugLine.speed_cost)
  return speed_cost_;
}
inline void DebugLine::set_speed_cost(float value) {
  
  speed_cost_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugLine.speed_cost)
}

// float long_term_speed = 9;
inline void DebugLine::clear_long_term_speed() {
  long_term_speed_ = 0;
}
inline float DebugLine::long_term_speed() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugLine.long_term_speed)
  return long_term_speed_;
}
inline void DebugLine::set_long_term_speed(float value) {
  
  long_term_speed_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugLine.long_term_speed)
}

// float short_term_speed = 10;
inline void DebugLine::clear_short_term_speed() {
  short_term_speed_ = 0;
}
inline float DebugLine::short_term_speed() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugLine.short_term_speed)
  return short_term_speed_;
}
inline void DebugLine::set_short_term_speed(float value) {
  
  short_term_speed_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugLine.short_term_speed)
}

// repeated .planning_debug_msgs.DebugObject objs = 11;
inline int DebugLine::objs_size() const {
  return objs_.size();
}
inline void DebugLine::clear_objs() {
  objs_.Clear();
}
inline const ::planning_debug_msgs::DebugObject& DebugLine::objs(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugLine.objs)
  return objs_.Get(index);
}
inline ::planning_debug_msgs::DebugObject* DebugLine::mutable_objs(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugLine.objs)
  return objs_.Mutable(index);
}
inline ::planning_debug_msgs::DebugObject* DebugLine::add_objs() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugLine.objs)
  return objs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugObject >*
DebugLine::mutable_objs() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugLine.objs)
  return &objs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugObject >&
DebugLine::objs() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugLine.objs)
  return objs_;
}

// bool line_queue = 12;
inline void DebugLine::clear_line_queue() {
  line_queue_ = false;
}
inline bool DebugLine::line_queue() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugLine.line_queue)
  return line_queue_;
}
inline void DebugLine::set_line_queue(bool value) {
  
  line_queue_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugLine.line_queue)
}

// bool is_congestion = 13;
inline void DebugLine::clear_is_congestion() {
  is_congestion_ = false;
}
inline bool DebugLine::is_congestion() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugLine.is_congestion)
  return is_congestion_;
}
inline void DebugLine::set_is_congestion(bool value) {
  
  is_congestion_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugLine.is_congestion)
}

// repeated .planning_debug_msgs.DebugGap gaps = 14;
inline int DebugLine::gaps_size() const {
  return gaps_.size();
}
inline void DebugLine::clear_gaps() {
  gaps_.Clear();
}
inline const ::planning_debug_msgs::DebugGap& DebugLine::gaps(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugLine.gaps)
  return gaps_.Get(index);
}
inline ::planning_debug_msgs::DebugGap* DebugLine::mutable_gaps(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugLine.gaps)
  return gaps_.Mutable(index);
}
inline ::planning_debug_msgs::DebugGap* DebugLine::add_gaps() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugLine.gaps)
  return gaps_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugGap >*
DebugLine::mutable_gaps() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugLine.gaps)
  return &gaps_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugGap >&
DebugLine::gaps() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugLine.gaps)
  return gaps_;
}

// -------------------------------------------------------------------

// DebugLight

// repeated string lane_ids = 1;
inline int DebugLight::lane_ids_size() const {
  return lane_ids_.size();
}
inline void DebugLight::clear_lane_ids() {
  lane_ids_.Clear();
}
inline const ::std::string& DebugLight::lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugLight.lane_ids)
  return lane_ids_.Get(index);
}
inline ::std::string* DebugLight::mutable_lane_ids(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugLight.lane_ids)
  return lane_ids_.Mutable(index);
}
inline void DebugLight::set_lane_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugLight.lane_ids)
  lane_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DebugLight::set_lane_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugLight.lane_ids)
  lane_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DebugLight::set_lane_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  lane_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.DebugLight.lane_ids)
}
inline void DebugLight::set_lane_ids(int index, const char* value, size_t size) {
  lane_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.DebugLight.lane_ids)
}
inline ::std::string* DebugLight::add_lane_ids() {
  // @@protoc_insertion_point(field_add_mutable:planning_debug_msgs.DebugLight.lane_ids)
  return lane_ids_.Add();
}
inline void DebugLight::add_lane_ids(const ::std::string& value) {
  lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugLight.lane_ids)
}
#if LANG_CXX11
inline void DebugLight::add_lane_ids(::std::string&& value) {
  lane_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugLight.lane_ids)
}
#endif
inline void DebugLight::add_lane_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:planning_debug_msgs.DebugLight.lane_ids)
}
inline void DebugLight::add_lane_ids(const char* value, size_t size) {
  lane_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:planning_debug_msgs.DebugLight.lane_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DebugLight::lane_ids() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugLight.lane_ids)
  return lane_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DebugLight::mutable_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugLight.lane_ids)
  return &lane_ids_;
}

// int32 jc_light_state = 2;
inline void DebugLight::clear_jc_light_state() {
  jc_light_state_ = 0;
}
inline ::google::protobuf::int32 DebugLight::jc_light_state() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugLight.jc_light_state)
  return jc_light_state_;
}
inline void DebugLight::set_jc_light_state(::google::protobuf::int32 value) {
  
  jc_light_state_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugLight.jc_light_state)
}

// bool response_area_light = 3;
inline void DebugLight::clear_response_area_light() {
  response_area_light_ = false;
}
inline bool DebugLight::response_area_light() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugLight.response_area_light)
  return response_area_light_;
}
inline void DebugLight::set_response_area_light(bool value) {
  
  response_area_light_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugLight.response_area_light)
}

// int32 unkey_color = 4;
inline void DebugLight::clear_unkey_color() {
  unkey_color_ = 0;
}
inline ::google::protobuf::int32 DebugLight::unkey_color() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugLight.unkey_color)
  return unkey_color_;
}
inline void DebugLight::set_unkey_color(::google::protobuf::int32 value) {
  
  unkey_color_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugLight.unkey_color)
}

// int32 area_color = 5;
inline void DebugLight::clear_area_color() {
  area_color_ = 0;
}
inline ::google::protobuf::int32 DebugLight::area_color() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugLight.area_color)
  return area_color_;
}
inline void DebugLight::set_area_color(::google::protobuf::int32 value) {
  
  area_color_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugLight.area_color)
}

// string light_id = 6;
inline void DebugLight::clear_light_id() {
  light_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DebugLight::light_id() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugLight.light_id)
  return light_id_.GetNoArena();
}
inline void DebugLight::set_light_id(const ::std::string& value) {
  
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugLight.light_id)
}
#if LANG_CXX11
inline void DebugLight::set_light_id(::std::string&& value) {
  
  light_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning_debug_msgs.DebugLight.light_id)
}
#endif
inline void DebugLight::set_light_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.DebugLight.light_id)
}
inline void DebugLight::set_light_id(const char* value, size_t size) {
  
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.DebugLight.light_id)
}
inline ::std::string* DebugLight::mutable_light_id() {
  
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugLight.light_id)
  return light_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DebugLight::release_light_id() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.DebugLight.light_id)
  
  return light_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DebugLight::set_allocated_light_id(::std::string* light_id) {
  if (light_id != NULL) {
    
  } else {
    
  }
  light_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), light_id);
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.DebugLight.light_id)
}

// -------------------------------------------------------------------

// DebugCognition

// double time_stamp = 1;
inline void DebugCognition::clear_time_stamp() {
  time_stamp_ = 0;
}
inline double DebugCognition::time_stamp() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugCognition.time_stamp)
  return time_stamp_;
}
inline void DebugCognition::set_time_stamp(double value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugCognition.time_stamp)
}

// repeated string reference_lane_ids = 2;
inline int DebugCognition::reference_lane_ids_size() const {
  return reference_lane_ids_.size();
}
inline void DebugCognition::clear_reference_lane_ids() {
  reference_lane_ids_.Clear();
}
inline const ::std::string& DebugCognition::reference_lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugCognition.reference_lane_ids)
  return reference_lane_ids_.Get(index);
}
inline ::std::string* DebugCognition::mutable_reference_lane_ids(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugCognition.reference_lane_ids)
  return reference_lane_ids_.Mutable(index);
}
inline void DebugCognition::set_reference_lane_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugCognition.reference_lane_ids)
  reference_lane_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DebugCognition::set_reference_lane_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugCognition.reference_lane_ids)
  reference_lane_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DebugCognition::set_reference_lane_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  reference_lane_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.DebugCognition.reference_lane_ids)
}
inline void DebugCognition::set_reference_lane_ids(int index, const char* value, size_t size) {
  reference_lane_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.DebugCognition.reference_lane_ids)
}
inline ::std::string* DebugCognition::add_reference_lane_ids() {
  // @@protoc_insertion_point(field_add_mutable:planning_debug_msgs.DebugCognition.reference_lane_ids)
  return reference_lane_ids_.Add();
}
inline void DebugCognition::add_reference_lane_ids(const ::std::string& value) {
  reference_lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugCognition.reference_lane_ids)
}
#if LANG_CXX11
inline void DebugCognition::add_reference_lane_ids(::std::string&& value) {
  reference_lane_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugCognition.reference_lane_ids)
}
#endif
inline void DebugCognition::add_reference_lane_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  reference_lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:planning_debug_msgs.DebugCognition.reference_lane_ids)
}
inline void DebugCognition::add_reference_lane_ids(const char* value, size_t size) {
  reference_lane_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:planning_debug_msgs.DebugCognition.reference_lane_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DebugCognition::reference_lane_ids() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugCognition.reference_lane_ids)
  return reference_lane_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DebugCognition::mutable_reference_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugCognition.reference_lane_ids)
  return &reference_lane_ids_;
}

// repeated string reference_target_ids = 3;
inline int DebugCognition::reference_target_ids_size() const {
  return reference_target_ids_.size();
}
inline void DebugCognition::clear_reference_target_ids() {
  reference_target_ids_.Clear();
}
inline const ::std::string& DebugCognition::reference_target_ids(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugCognition.reference_target_ids)
  return reference_target_ids_.Get(index);
}
inline ::std::string* DebugCognition::mutable_reference_target_ids(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugCognition.reference_target_ids)
  return reference_target_ids_.Mutable(index);
}
inline void DebugCognition::set_reference_target_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugCognition.reference_target_ids)
  reference_target_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DebugCognition::set_reference_target_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugCognition.reference_target_ids)
  reference_target_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DebugCognition::set_reference_target_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  reference_target_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.DebugCognition.reference_target_ids)
}
inline void DebugCognition::set_reference_target_ids(int index, const char* value, size_t size) {
  reference_target_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.DebugCognition.reference_target_ids)
}
inline ::std::string* DebugCognition::add_reference_target_ids() {
  // @@protoc_insertion_point(field_add_mutable:planning_debug_msgs.DebugCognition.reference_target_ids)
  return reference_target_ids_.Add();
}
inline void DebugCognition::add_reference_target_ids(const ::std::string& value) {
  reference_target_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugCognition.reference_target_ids)
}
#if LANG_CXX11
inline void DebugCognition::add_reference_target_ids(::std::string&& value) {
  reference_target_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugCognition.reference_target_ids)
}
#endif
inline void DebugCognition::add_reference_target_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  reference_target_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:planning_debug_msgs.DebugCognition.reference_target_ids)
}
inline void DebugCognition::add_reference_target_ids(const char* value, size_t size) {
  reference_target_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:planning_debug_msgs.DebugCognition.reference_target_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DebugCognition::reference_target_ids() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugCognition.reference_target_ids)
  return reference_target_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DebugCognition::mutable_reference_target_ids() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugCognition.reference_target_ids)
  return &reference_target_ids_;
}

// uint32 mapengine_index = 4;
inline void DebugCognition::clear_mapengine_index() {
  mapengine_index_ = 0u;
}
inline ::google::protobuf::uint32 DebugCognition::mapengine_index() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugCognition.mapengine_index)
  return mapengine_index_;
}
inline void DebugCognition::set_mapengine_index(::google::protobuf::uint32 value) {
  
  mapengine_index_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugCognition.mapengine_index)
}

// uint32 correction_index = 5;
inline void DebugCognition::clear_correction_index() {
  correction_index_ = 0u;
}
inline ::google::protobuf::uint32 DebugCognition::correction_index() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugCognition.correction_index)
  return correction_index_;
}
inline void DebugCognition::set_correction_index(::google::protobuf::uint32 value) {
  
  correction_index_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugCognition.correction_index)
}

// uint32 target_index = 6;
inline void DebugCognition::clear_target_index() {
  target_index_ = 0u;
}
inline ::google::protobuf::uint32 DebugCognition::target_index() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugCognition.target_index)
  return target_index_;
}
inline void DebugCognition::set_target_index(::google::protobuf::uint32 value) {
  
  target_index_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugCognition.target_index)
}

// repeated uint32 key_line_id = 7;
inline int DebugCognition::key_line_id_size() const {
  return key_line_id_.size();
}
inline void DebugCognition::clear_key_line_id() {
  key_line_id_.Clear();
}
inline ::google::protobuf::uint32 DebugCognition::key_line_id(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugCognition.key_line_id)
  return key_line_id_.Get(index);
}
inline void DebugCognition::set_key_line_id(int index, ::google::protobuf::uint32 value) {
  key_line_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugCognition.key_line_id)
}
inline void DebugCognition::add_key_line_id(::google::protobuf::uint32 value) {
  key_line_id_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugCognition.key_line_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DebugCognition::key_line_id() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugCognition.key_line_id)
  return key_line_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DebugCognition::mutable_key_line_id() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugCognition.key_line_id)
  return &key_line_id_;
}

// bool in_current = 8;
inline void DebugCognition::clear_in_current() {
  in_current_ = false;
}
inline bool DebugCognition::in_current() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugCognition.in_current)
  return in_current_;
}
inline void DebugCognition::set_in_current(bool value) {
  
  in_current_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugCognition.in_current)
}

// bool in_target = 9;
inline void DebugCognition::clear_in_target() {
  in_target_ = false;
}
inline bool DebugCognition::in_target() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugCognition.in_target)
  return in_target_;
}
inline void DebugCognition::set_in_target(bool value) {
  
  in_target_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugCognition.in_target)
}

// float map_delta_time = 10;
inline void DebugCognition::clear_map_delta_time() {
  map_delta_time_ = 0;
}
inline float DebugCognition::map_delta_time() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugCognition.map_delta_time)
  return map_delta_time_;
}
inline void DebugCognition::set_map_delta_time(float value) {
  
  map_delta_time_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugCognition.map_delta_time)
}

// float imu_delta_time = 11;
inline void DebugCognition::clear_imu_delta_time() {
  imu_delta_time_ = 0;
}
inline float DebugCognition::imu_delta_time() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugCognition.imu_delta_time)
  return imu_delta_time_;
}
inline void DebugCognition::set_imu_delta_time(float value) {
  
  imu_delta_time_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugCognition.imu_delta_time)
}

// repeated .planning_debug_msgs.DebugLine current_line = 12;
inline int DebugCognition::current_line_size() const {
  return current_line_.size();
}
inline void DebugCognition::clear_current_line() {
  current_line_.Clear();
}
inline const ::planning_debug_msgs::DebugLine& DebugCognition::current_line(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugCognition.current_line)
  return current_line_.Get(index);
}
inline ::planning_debug_msgs::DebugLine* DebugCognition::mutable_current_line(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugCognition.current_line)
  return current_line_.Mutable(index);
}
inline ::planning_debug_msgs::DebugLine* DebugCognition::add_current_line() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugCognition.current_line)
  return current_line_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugLine >*
DebugCognition::mutable_current_line() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugCognition.current_line)
  return &current_line_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugLine >&
DebugCognition::current_line() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugCognition.current_line)
  return current_line_;
}

// repeated .planning_debug_msgs.DebugLine left_line = 13;
inline int DebugCognition::left_line_size() const {
  return left_line_.size();
}
inline void DebugCognition::clear_left_line() {
  left_line_.Clear();
}
inline const ::planning_debug_msgs::DebugLine& DebugCognition::left_line(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugCognition.left_line)
  return left_line_.Get(index);
}
inline ::planning_debug_msgs::DebugLine* DebugCognition::mutable_left_line(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugCognition.left_line)
  return left_line_.Mutable(index);
}
inline ::planning_debug_msgs::DebugLine* DebugCognition::add_left_line() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugCognition.left_line)
  return left_line_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugLine >*
DebugCognition::mutable_left_line() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugCognition.left_line)
  return &left_line_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugLine >&
DebugCognition::left_line() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugCognition.left_line)
  return left_line_;
}

// repeated .planning_debug_msgs.DebugLine right_line = 14;
inline int DebugCognition::right_line_size() const {
  return right_line_.size();
}
inline void DebugCognition::clear_right_line() {
  right_line_.Clear();
}
inline const ::planning_debug_msgs::DebugLine& DebugCognition::right_line(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugCognition.right_line)
  return right_line_.Get(index);
}
inline ::planning_debug_msgs::DebugLine* DebugCognition::mutable_right_line(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugCognition.right_line)
  return right_line_.Mutable(index);
}
inline ::planning_debug_msgs::DebugLine* DebugCognition::add_right_line() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugCognition.right_line)
  return right_line_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugLine >*
DebugCognition::mutable_right_line() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugCognition.right_line)
  return &right_line_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugLine >&
DebugCognition::right_line() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugCognition.right_line)
  return right_line_;
}

// repeated .planning_debug_msgs.DebugLine local_line = 15;
inline int DebugCognition::local_line_size() const {
  return local_line_.size();
}
inline void DebugCognition::clear_local_line() {
  local_line_.Clear();
}
inline const ::planning_debug_msgs::DebugLine& DebugCognition::local_line(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugCognition.local_line)
  return local_line_.Get(index);
}
inline ::planning_debug_msgs::DebugLine* DebugCognition::mutable_local_line(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugCognition.local_line)
  return local_line_.Mutable(index);
}
inline ::planning_debug_msgs::DebugLine* DebugCognition::add_local_line() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugCognition.local_line)
  return local_line_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugLine >*
DebugCognition::mutable_local_line() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugCognition.local_line)
  return &local_line_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugLine >&
DebugCognition::local_line() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugCognition.local_line)
  return local_line_;
}

// .planning_debug_msgs.DebugLight light_info = 16;
inline bool DebugCognition::has_light_info() const {
  return this != internal_default_instance() && light_info_ != NULL;
}
inline void DebugCognition::clear_light_info() {
  if (GetArenaNoVirtual() == NULL && light_info_ != NULL) {
    delete light_info_;
  }
  light_info_ = NULL;
}
inline const ::planning_debug_msgs::DebugLight& DebugCognition::light_info() const {
  const ::planning_debug_msgs::DebugLight* p = light_info_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugCognition.light_info)
  return p != NULL ? *p : *reinterpret_cast<const ::planning_debug_msgs::DebugLight*>(
      &::planning_debug_msgs::_DebugLight_default_instance_);
}
inline ::planning_debug_msgs::DebugLight* DebugCognition::release_light_info() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.DebugCognition.light_info)
  
  ::planning_debug_msgs::DebugLight* temp = light_info_;
  light_info_ = NULL;
  return temp;
}
inline ::planning_debug_msgs::DebugLight* DebugCognition::mutable_light_info() {
  
  if (light_info_ == NULL) {
    light_info_ = new ::planning_debug_msgs::DebugLight;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugCognition.light_info)
  return light_info_;
}
inline void DebugCognition::set_allocated_light_info(::planning_debug_msgs::DebugLight* light_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete light_info_;
  }
  if (light_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      light_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, light_info, submessage_arena);
    }
    
  } else {
    
  }
  light_info_ = light_info;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.DebugCognition.light_info)
}

// uint32 drive_state = 17;
inline void DebugCognition::clear_drive_state() {
  drive_state_ = 0u;
}
inline ::google::protobuf::uint32 DebugCognition::drive_state() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugCognition.drive_state)
  return drive_state_;
}
inline void DebugCognition::set_drive_state(::google::protobuf::uint32 value) {
  
  drive_state_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugCognition.drive_state)
}

// float time_cost_ms = 18;
inline void DebugCognition::clear_time_cost_ms() {
  time_cost_ms_ = 0;
}
inline float DebugCognition::time_cost_ms() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugCognition.time_cost_ms)
  return time_cost_ms_;
}
inline void DebugCognition::set_time_cost_ms(float value) {
  
  time_cost_ms_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugCognition.time_cost_ms)
}

// -------------------------------------------------------------------

// DecisionPoint

// int32 t = 1;
inline void DecisionPoint::clear_t() {
  t_ = 0;
}
inline ::google::protobuf::int32 DecisionPoint::t() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DecisionPoint.t)
  return t_;
}
inline void DecisionPoint::set_t(::google::protobuf::int32 value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DecisionPoint.t)
}

// int32 s = 2;
inline void DecisionPoint::clear_s() {
  s_ = 0;
}
inline ::google::protobuf::int32 DecisionPoint::s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DecisionPoint.s)
  return s_;
}
inline void DecisionPoint::set_s(::google::protobuf::int32 value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DecisionPoint.s)
}

// -------------------------------------------------------------------

// STGraph

// int32 id = 1;
inline void STGraph::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 STGraph::id() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.id)
  return id_;
}
inline void STGraph::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.id)
}

// int32 cell_num = 2;
inline void STGraph::clear_cell_num() {
  cell_num_ = 0;
}
inline ::google::protobuf::int32 STGraph::cell_num() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.cell_num)
  return cell_num_;
}
inline void STGraph::set_cell_num(::google::protobuf::int32 value) {
  
  cell_num_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.cell_num)
}

// string lane_id = 3;
inline void STGraph::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& STGraph::lane_id() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.lane_id)
  return lane_id_.GetNoArena();
}
inline void STGraph::set_lane_id(const ::std::string& value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.lane_id)
}
#if LANG_CXX11
inline void STGraph::set_lane_id(::std::string&& value) {
  
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning_debug_msgs.STGraph.lane_id)
}
#endif
inline void STGraph::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.STGraph.lane_id)
}
inline void STGraph::set_lane_id(const char* value, size_t size) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.STGraph.lane_id)
}
inline ::std::string* STGraph::mutable_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.STGraph.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* STGraph::release_lane_id() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.STGraph.lane_id)
  
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void STGraph::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    
  } else {
    
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.STGraph.lane_id)
}

// bool is_static = 4;
inline void STGraph::clear_is_static() {
  is_static_ = false;
}
inline bool STGraph::is_static() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.is_static)
  return is_static_;
}
inline void STGraph::set_is_static(bool value) {
  
  is_static_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.is_static)
}

// bool was_dynamic = 5;
inline void STGraph::clear_was_dynamic() {
  was_dynamic_ = false;
}
inline bool STGraph::was_dynamic() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.was_dynamic)
  return was_dynamic_;
}
inline void STGraph::set_was_dynamic(bool value) {
  
  was_dynamic_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.was_dynamic)
}

// bool right_of_way = 6;
inline void STGraph::clear_right_of_way() {
  right_of_way_ = false;
}
inline bool STGraph::right_of_way() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.right_of_way)
  return right_of_way_;
}
inline void STGraph::set_right_of_way(bool value) {
  
  right_of_way_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.right_of_way)
}

// int32 conflict_type = 7;
inline void STGraph::clear_conflict_type() {
  conflict_type_ = 0;
}
inline ::google::protobuf::int32 STGraph::conflict_type() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.conflict_type)
  return conflict_type_;
}
inline void STGraph::set_conflict_type(::google::protobuf::int32 value) {
  
  conflict_type_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.conflict_type)
}

// float s_l_min_s = 8;
inline void STGraph::clear_s_l_min_s() {
  s_l_min_s_ = 0;
}
inline float STGraph::s_l_min_s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.s_l_min_s)
  return s_l_min_s_;
}
inline void STGraph::set_s_l_min_s(float value) {
  
  s_l_min_s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.s_l_min_s)
}

// float s_l_max_s = 9;
inline void STGraph::clear_s_l_max_s() {
  s_l_max_s_ = 0;
}
inline float STGraph::s_l_max_s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.s_l_max_s)
  return s_l_max_s_;
}
inline void STGraph::set_s_l_max_s(float value) {
  
  s_l_max_s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.s_l_max_s)
}

// float s_l_min_l = 10;
inline void STGraph::clear_s_l_min_l() {
  s_l_min_l_ = 0;
}
inline float STGraph::s_l_min_l() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.s_l_min_l)
  return s_l_min_l_;
}
inline void STGraph::set_s_l_min_l(float value) {
  
  s_l_min_l_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.s_l_min_l)
}

// float s_l_max_l = 11;
inline void STGraph::clear_s_l_max_l() {
  s_l_max_l_ = 0;
}
inline float STGraph::s_l_max_l() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.s_l_max_l)
  return s_l_max_l_;
}
inline void STGraph::set_s_l_max_l(float value) {
  
  s_l_max_l_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.s_l_max_l)
}

// float t_1 = 12;
inline void STGraph::clear_t_1() {
  t_1_ = 0;
}
inline float STGraph::t_1() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.t_1)
  return t_1_;
}
inline void STGraph::set_t_1(float value) {
  
  t_1_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.t_1)
}

// float min_s_1 = 13;
inline void STGraph::clear_min_s_1() {
  min_s_1_ = 0;
}
inline float STGraph::min_s_1() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.min_s_1)
  return min_s_1_;
}
inline void STGraph::set_min_s_1(float value) {
  
  min_s_1_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.min_s_1)
}

// float max_s_1 = 14;
inline void STGraph::clear_max_s_1() {
  max_s_1_ = 0;
}
inline float STGraph::max_s_1() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.max_s_1)
  return max_s_1_;
}
inline void STGraph::set_max_s_1(float value) {
  
  max_s_1_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.max_s_1)
}

// float t_2 = 15;
inline void STGraph::clear_t_2() {
  t_2_ = 0;
}
inline float STGraph::t_2() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.t_2)
  return t_2_;
}
inline void STGraph::set_t_2(float value) {
  
  t_2_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.t_2)
}

// float min_s_2 = 16;
inline void STGraph::clear_min_s_2() {
  min_s_2_ = 0;
}
inline float STGraph::min_s_2() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.min_s_2)
  return min_s_2_;
}
inline void STGraph::set_min_s_2(float value) {
  
  min_s_2_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.min_s_2)
}

// float max_s_2 = 17;
inline void STGraph::clear_max_s_2() {
  max_s_2_ = 0;
}
inline float STGraph::max_s_2() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.max_s_2)
  return max_s_2_;
}
inline void STGraph::set_max_s_2(float value) {
  
  max_s_2_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.max_s_2)
}

// repeated float st_t = 18;
inline int STGraph::st_t_size() const {
  return st_t_.size();
}
inline void STGraph::clear_st_t() {
  st_t_.Clear();
}
inline float STGraph::st_t(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.st_t)
  return st_t_.Get(index);
}
inline void STGraph::set_st_t(int index, float value) {
  st_t_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.st_t)
}
inline void STGraph::add_st_t(float value) {
  st_t_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.STGraph.st_t)
}
inline const ::google::protobuf::RepeatedField< float >&
STGraph::st_t() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.STGraph.st_t)
  return st_t_;
}
inline ::google::protobuf::RepeatedField< float >*
STGraph::mutable_st_t() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.STGraph.st_t)
  return &st_t_;
}

// repeated float st_min_s = 19;
inline int STGraph::st_min_s_size() const {
  return st_min_s_.size();
}
inline void STGraph::clear_st_min_s() {
  st_min_s_.Clear();
}
inline float STGraph::st_min_s(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.st_min_s)
  return st_min_s_.Get(index);
}
inline void STGraph::set_st_min_s(int index, float value) {
  st_min_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.st_min_s)
}
inline void STGraph::add_st_min_s(float value) {
  st_min_s_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.STGraph.st_min_s)
}
inline const ::google::protobuf::RepeatedField< float >&
STGraph::st_min_s() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.STGraph.st_min_s)
  return st_min_s_;
}
inline ::google::protobuf::RepeatedField< float >*
STGraph::mutable_st_min_s() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.STGraph.st_min_s)
  return &st_min_s_;
}

// repeated float st_max_s = 20;
inline int STGraph::st_max_s_size() const {
  return st_max_s_.size();
}
inline void STGraph::clear_st_max_s() {
  st_max_s_.Clear();
}
inline float STGraph::st_max_s(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.st_max_s)
  return st_max_s_.Get(index);
}
inline void STGraph::set_st_max_s(int index, float value) {
  st_max_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.st_max_s)
}
inline void STGraph::add_st_max_s(float value) {
  st_max_s_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.STGraph.st_max_s)
}
inline const ::google::protobuf::RepeatedField< float >&
STGraph::st_max_s() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.STGraph.st_max_s)
  return st_max_s_;
}
inline ::google::protobuf::RepeatedField< float >*
STGraph::mutable_st_max_s() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.STGraph.st_max_s)
  return &st_max_s_;
}

// float speed = 21;
inline void STGraph::clear_speed() {
  speed_ = 0;
}
inline float STGraph::speed() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.speed)
  return speed_;
}
inline void STGraph::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.speed)
}

// repeated float t = 22;
inline int STGraph::t_size() const {
  return t_.size();
}
inline void STGraph::clear_t() {
  t_.Clear();
}
inline float STGraph::t(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.t)
  return t_.Get(index);
}
inline void STGraph::set_t(int index, float value) {
  t_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.t)
}
inline void STGraph::add_t(float value) {
  t_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.STGraph.t)
}
inline const ::google::protobuf::RepeatedField< float >&
STGraph::t() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.STGraph.t)
  return t_;
}
inline ::google::protobuf::RepeatedField< float >*
STGraph::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.STGraph.t)
  return &t_;
}

// repeated float min_s = 23;
inline int STGraph::min_s_size() const {
  return min_s_.size();
}
inline void STGraph::clear_min_s() {
  min_s_.Clear();
}
inline float STGraph::min_s(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.min_s)
  return min_s_.Get(index);
}
inline void STGraph::set_min_s(int index, float value) {
  min_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.min_s)
}
inline void STGraph::add_min_s(float value) {
  min_s_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.STGraph.min_s)
}
inline const ::google::protobuf::RepeatedField< float >&
STGraph::min_s() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.STGraph.min_s)
  return min_s_;
}
inline ::google::protobuf::RepeatedField< float >*
STGraph::mutable_min_s() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.STGraph.min_s)
  return &min_s_;
}

// repeated float max_s = 24;
inline int STGraph::max_s_size() const {
  return max_s_.size();
}
inline void STGraph::clear_max_s() {
  max_s_.Clear();
}
inline float STGraph::max_s(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.STGraph.max_s)
  return max_s_.Get(index);
}
inline void STGraph::set_max_s(int index, float value) {
  max_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.STGraph.max_s)
}
inline void STGraph::add_max_s(float value) {
  max_s_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.STGraph.max_s)
}
inline const ::google::protobuf::RepeatedField< float >&
STGraph::max_s() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.STGraph.max_s)
  return max_s_;
}
inline ::google::protobuf::RepeatedField< float >*
STGraph::mutable_max_s() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.STGraph.max_s)
  return &max_s_;
}

// -------------------------------------------------------------------

// DebugSTGraph

// repeated .planning_debug_msgs.STGraph cognition_objects = 1;
inline int DebugSTGraph::cognition_objects_size() const {
  return cognition_objects_.size();
}
inline void DebugSTGraph::clear_cognition_objects() {
  cognition_objects_.Clear();
}
inline const ::planning_debug_msgs::STGraph& DebugSTGraph::cognition_objects(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugSTGraph.cognition_objects)
  return cognition_objects_.Get(index);
}
inline ::planning_debug_msgs::STGraph* DebugSTGraph::mutable_cognition_objects(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugSTGraph.cognition_objects)
  return cognition_objects_.Mutable(index);
}
inline ::planning_debug_msgs::STGraph* DebugSTGraph::add_cognition_objects() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugSTGraph.cognition_objects)
  return cognition_objects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::STGraph >*
DebugSTGraph::mutable_cognition_objects() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugSTGraph.cognition_objects)
  return &cognition_objects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::STGraph >&
DebugSTGraph::cognition_objects() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugSTGraph.cognition_objects)
  return cognition_objects_;
}

// repeated .planning_debug_msgs.DecisionPoint decision_points = 2;
inline int DebugSTGraph::decision_points_size() const {
  return decision_points_.size();
}
inline void DebugSTGraph::clear_decision_points() {
  decision_points_.Clear();
}
inline const ::planning_debug_msgs::DecisionPoint& DebugSTGraph::decision_points(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugSTGraph.decision_points)
  return decision_points_.Get(index);
}
inline ::planning_debug_msgs::DecisionPoint* DebugSTGraph::mutable_decision_points(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugSTGraph.decision_points)
  return decision_points_.Mutable(index);
}
inline ::planning_debug_msgs::DecisionPoint* DebugSTGraph::add_decision_points() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugSTGraph.decision_points)
  return decision_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DecisionPoint >*
DebugSTGraph::mutable_decision_points() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugSTGraph.decision_points)
  return &decision_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DecisionPoint >&
DebugSTGraph::decision_points() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugSTGraph.decision_points)
  return decision_points_;
}

// repeated .planning_debug_msgs.STGraph original_objects = 3;
inline int DebugSTGraph::original_objects_size() const {
  return original_objects_.size();
}
inline void DebugSTGraph::clear_original_objects() {
  original_objects_.Clear();
}
inline const ::planning_debug_msgs::STGraph& DebugSTGraph::original_objects(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugSTGraph.original_objects)
  return original_objects_.Get(index);
}
inline ::planning_debug_msgs::STGraph* DebugSTGraph::mutable_original_objects(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugSTGraph.original_objects)
  return original_objects_.Mutable(index);
}
inline ::planning_debug_msgs::STGraph* DebugSTGraph::add_original_objects() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugSTGraph.original_objects)
  return original_objects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::STGraph >*
DebugSTGraph::mutable_original_objects() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugSTGraph.original_objects)
  return &original_objects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::STGraph >&
DebugSTGraph::original_objects() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugSTGraph.original_objects)
  return original_objects_;
}

// -------------------------------------------------------------------

// Sentence

// string action = 1;
inline void Sentence::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Sentence::action() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.Sentence.action)
  return action_.GetNoArena();
}
inline void Sentence::set_action(const ::std::string& value) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.Sentence.action)
}
#if LANG_CXX11
inline void Sentence::set_action(::std::string&& value) {
  
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning_debug_msgs.Sentence.action)
}
#endif
inline void Sentence::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.Sentence.action)
}
inline void Sentence::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.Sentence.action)
}
inline ::std::string* Sentence::mutable_action() {
  
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.Sentence.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sentence::release_action() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.Sentence.action)
  
  return action_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sentence::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.Sentence.action)
}

// uint32 direction = 2;
inline void Sentence::clear_direction() {
  direction_ = 0u;
}
inline ::google::protobuf::uint32 Sentence::direction() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.Sentence.direction)
  return direction_;
}
inline void Sentence::set_direction(::google::protobuf::uint32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.Sentence.direction)
}

// float dis_to_end = 3;
inline void Sentence::clear_dis_to_end() {
  dis_to_end_ = 0;
}
inline float Sentence::dis_to_end() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.Sentence.dis_to_end)
  return dis_to_end_;
}
inline void Sentence::set_dis_to_end(float value) {
  
  dis_to_end_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.Sentence.dis_to_end)
}

// float dis_to_boundary = 4;
inline void Sentence::clear_dis_to_boundary() {
  dis_to_boundary_ = 0;
}
inline float Sentence::dis_to_boundary() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.Sentence.dis_to_boundary)
  return dis_to_boundary_;
}
inline void Sentence::set_dis_to_boundary(float value) {
  
  dis_to_boundary_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.Sentence.dis_to_boundary)
}

// float xg = 5;
inline void Sentence::clear_xg() {
  xg_ = 0;
}
inline float Sentence::xg() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.Sentence.xg)
  return xg_;
}
inline void Sentence::set_xg(float value) {
  
  xg_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.Sentence.xg)
}

// float yg = 6;
inline void Sentence::clear_yg() {
  yg_ = 0;
}
inline float Sentence::yg() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.Sentence.yg)
  return yg_;
}
inline void Sentence::set_yg(float value) {
  
  yg_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.Sentence.yg)
}

// float heading = 7;
inline void Sentence::clear_heading() {
  heading_ = 0;
}
inline float Sentence::heading() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.Sentence.heading)
  return heading_;
}
inline void Sentence::set_heading(float value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.Sentence.heading)
}

// -------------------------------------------------------------------

// DebugDecision

// double time_stamp = 1;
inline void DebugDecision::clear_time_stamp() {
  time_stamp_ = 0;
}
inline double DebugDecision::time_stamp() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.time_stamp)
  return time_stamp_;
}
inline void DebugDecision::set_time_stamp(double value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.time_stamp)
}

// uint32 target_line = 2;
inline void DebugDecision::clear_target_line() {
  target_line_ = 0u;
}
inline ::google::protobuf::uint32 DebugDecision::target_line() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.target_line)
  return target_line_;
}
inline void DebugDecision::set_target_line(::google::protobuf::uint32 value) {
  
  target_line_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.target_line)
}

// int32 giveway_id = 3;
inline void DebugDecision::clear_giveway_id() {
  giveway_id_ = 0;
}
inline ::google::protobuf::int32 DebugDecision::giveway_id() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.giveway_id)
  return giveway_id_;
}
inline void DebugDecision::set_giveway_id(::google::protobuf::int32 value) {
  
  giveway_id_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.giveway_id)
}

// float speed_limit = 4;
inline void DebugDecision::clear_speed_limit() {
  speed_limit_ = 0;
}
inline float DebugDecision::speed_limit() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.speed_limit)
  return speed_limit_;
}
inline void DebugDecision::set_speed_limit(float value) {
  
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.speed_limit)
}

// repeated float boundary_s = 5;
inline int DebugDecision::boundary_s_size() const {
  return boundary_s_.size();
}
inline void DebugDecision::clear_boundary_s() {
  boundary_s_.Clear();
}
inline float DebugDecision::boundary_s(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.boundary_s)
  return boundary_s_.Get(index);
}
inline void DebugDecision::set_boundary_s(int index, float value) {
  boundary_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.boundary_s)
}
inline void DebugDecision::add_boundary_s(float value) {
  boundary_s_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugDecision.boundary_s)
}
inline const ::google::protobuf::RepeatedField< float >&
DebugDecision::boundary_s() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugDecision.boundary_s)
  return boundary_s_;
}
inline ::google::protobuf::RepeatedField< float >*
DebugDecision::mutable_boundary_s() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugDecision.boundary_s)
  return &boundary_s_;
}

// repeated float left_boundary = 6;
inline int DebugDecision::left_boundary_size() const {
  return left_boundary_.size();
}
inline void DebugDecision::clear_left_boundary() {
  left_boundary_.Clear();
}
inline float DebugDecision::left_boundary(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.left_boundary)
  return left_boundary_.Get(index);
}
inline void DebugDecision::set_left_boundary(int index, float value) {
  left_boundary_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.left_boundary)
}
inline void DebugDecision::add_left_boundary(float value) {
  left_boundary_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugDecision.left_boundary)
}
inline const ::google::protobuf::RepeatedField< float >&
DebugDecision::left_boundary() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugDecision.left_boundary)
  return left_boundary_;
}
inline ::google::protobuf::RepeatedField< float >*
DebugDecision::mutable_left_boundary() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugDecision.left_boundary)
  return &left_boundary_;
}

// repeated float right_boundary = 7;
inline int DebugDecision::right_boundary_size() const {
  return right_boundary_.size();
}
inline void DebugDecision::clear_right_boundary() {
  right_boundary_.Clear();
}
inline float DebugDecision::right_boundary(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.right_boundary)
  return right_boundary_.Get(index);
}
inline void DebugDecision::set_right_boundary(int index, float value) {
  right_boundary_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.right_boundary)
}
inline void DebugDecision::add_right_boundary(float value) {
  right_boundary_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugDecision.right_boundary)
}
inline const ::google::protobuf::RepeatedField< float >&
DebugDecision::right_boundary() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugDecision.right_boundary)
  return right_boundary_;
}
inline ::google::protobuf::RepeatedField< float >*
DebugDecision::mutable_right_boundary() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugDecision.right_boundary)
  return &right_boundary_;
}

// repeated int32 object_id = 8;
inline int DebugDecision::object_id_size() const {
  return object_id_.size();
}
inline void DebugDecision::clear_object_id() {
  object_id_.Clear();
}
inline ::google::protobuf::int32 DebugDecision::object_id(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.object_id)
  return object_id_.Get(index);
}
inline void DebugDecision::set_object_id(int index, ::google::protobuf::int32 value) {
  object_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.object_id)
}
inline void DebugDecision::add_object_id(::google::protobuf::int32 value) {
  object_id_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugDecision.object_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DebugDecision::object_id() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugDecision.object_id)
  return object_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DebugDecision::mutable_object_id() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugDecision.object_id)
  return &object_id_;
}

// repeated int32 object_decision = 9;
inline int DebugDecision::object_decision_size() const {
  return object_decision_.size();
}
inline void DebugDecision::clear_object_decision() {
  object_decision_.Clear();
}
inline ::google::protobuf::int32 DebugDecision::object_decision(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.object_decision)
  return object_decision_.Get(index);
}
inline void DebugDecision::set_object_decision(int index, ::google::protobuf::int32 value) {
  object_decision_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.object_decision)
}
inline void DebugDecision::add_object_decision(::google::protobuf::int32 value) {
  object_decision_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugDecision.object_decision)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DebugDecision::object_decision() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugDecision.object_decision)
  return object_decision_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DebugDecision::mutable_object_decision() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugDecision.object_decision)
  return &object_decision_;
}

// repeated .planning_debug_msgs.Sentence sentences = 10;
inline int DebugDecision::sentences_size() const {
  return sentences_.size();
}
inline void DebugDecision::clear_sentences() {
  sentences_.Clear();
}
inline const ::planning_debug_msgs::Sentence& DebugDecision::sentences(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.sentences)
  return sentences_.Get(index);
}
inline ::planning_debug_msgs::Sentence* DebugDecision::mutable_sentences(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugDecision.sentences)
  return sentences_.Mutable(index);
}
inline ::planning_debug_msgs::Sentence* DebugDecision::add_sentences() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugDecision.sentences)
  return sentences_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::Sentence >*
DebugDecision::mutable_sentences() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugDecision.sentences)
  return &sentences_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::Sentence >&
DebugDecision::sentences() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugDecision.sentences)
  return sentences_;
}

// .planning_debug_msgs.DebugSTGraph st_graph = 11;
inline bool DebugDecision::has_st_graph() const {
  return this != internal_default_instance() && st_graph_ != NULL;
}
inline void DebugDecision::clear_st_graph() {
  if (GetArenaNoVirtual() == NULL && st_graph_ != NULL) {
    delete st_graph_;
  }
  st_graph_ = NULL;
}
inline const ::planning_debug_msgs::DebugSTGraph& DebugDecision::st_graph() const {
  const ::planning_debug_msgs::DebugSTGraph* p = st_graph_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.st_graph)
  return p != NULL ? *p : *reinterpret_cast<const ::planning_debug_msgs::DebugSTGraph*>(
      &::planning_debug_msgs::_DebugSTGraph_default_instance_);
}
inline ::planning_debug_msgs::DebugSTGraph* DebugDecision::release_st_graph() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.DebugDecision.st_graph)
  
  ::planning_debug_msgs::DebugSTGraph* temp = st_graph_;
  st_graph_ = NULL;
  return temp;
}
inline ::planning_debug_msgs::DebugSTGraph* DebugDecision::mutable_st_graph() {
  
  if (st_graph_ == NULL) {
    st_graph_ = new ::planning_debug_msgs::DebugSTGraph;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugDecision.st_graph)
  return st_graph_;
}
inline void DebugDecision::set_allocated_st_graph(::planning_debug_msgs::DebugSTGraph* st_graph) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete st_graph_;
  }
  if (st_graph) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      st_graph = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, st_graph, submessage_arena);
    }
    
  } else {
    
  }
  st_graph_ = st_graph;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.DebugDecision.st_graph)
}

// string cmd_feedback = 12;
inline void DebugDecision::clear_cmd_feedback() {
  cmd_feedback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DebugDecision::cmd_feedback() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.cmd_feedback)
  return cmd_feedback_.GetNoArena();
}
inline void DebugDecision::set_cmd_feedback(const ::std::string& value) {
  
  cmd_feedback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.cmd_feedback)
}
#if LANG_CXX11
inline void DebugDecision::set_cmd_feedback(::std::string&& value) {
  
  cmd_feedback_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning_debug_msgs.DebugDecision.cmd_feedback)
}
#endif
inline void DebugDecision::set_cmd_feedback(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cmd_feedback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.DebugDecision.cmd_feedback)
}
inline void DebugDecision::set_cmd_feedback(const char* value, size_t size) {
  
  cmd_feedback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.DebugDecision.cmd_feedback)
}
inline ::std::string* DebugDecision::mutable_cmd_feedback() {
  
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugDecision.cmd_feedback)
  return cmd_feedback_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DebugDecision::release_cmd_feedback() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.DebugDecision.cmd_feedback)
  
  return cmd_feedback_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DebugDecision::set_allocated_cmd_feedback(::std::string* cmd_feedback) {
  if (cmd_feedback != NULL) {
    
  } else {
    
  }
  cmd_feedback_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd_feedback);
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.DebugDecision.cmd_feedback)
}

// uint32 lc_status = 13;
inline void DebugDecision::clear_lc_status() {
  lc_status_ = 0u;
}
inline ::google::protobuf::uint32 DebugDecision::lc_status() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.lc_status)
  return lc_status_;
}
inline void DebugDecision::set_lc_status(::google::protobuf::uint32 value) {
  
  lc_status_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.lc_status)
}

// int32 decision_result = 14;
inline void DebugDecision::clear_decision_result() {
  decision_result_ = 0;
}
inline ::google::protobuf::int32 DebugDecision::decision_result() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.decision_result)
  return decision_result_;
}
inline void DebugDecision::set_decision_result(::google::protobuf::int32 value) {
  
  decision_result_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.decision_result)
}

// uint32 scenario_type = 15;
inline void DebugDecision::clear_scenario_type() {
  scenario_type_ = 0u;
}
inline ::google::protobuf::uint32 DebugDecision::scenario_type() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.scenario_type)
  return scenario_type_;
}
inline void DebugDecision::set_scenario_type(::google::protobuf::uint32 value) {
  
  scenario_type_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.scenario_type)
}

// uint32 intention_type = 16;
inline void DebugDecision::clear_intention_type() {
  intention_type_ = 0u;
}
inline ::google::protobuf::uint32 DebugDecision::intention_type() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.intention_type)
  return intention_type_;
}
inline void DebugDecision::set_intention_type(::google::protobuf::uint32 value) {
  
  intention_type_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.intention_type)
}

// uint32 option_type = 17;
inline void DebugDecision::clear_option_type() {
  option_type_ = 0u;
}
inline ::google::protobuf::uint32 DebugDecision::option_type() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.option_type)
  return option_type_;
}
inline void DebugDecision::set_option_type(::google::protobuf::uint32 value) {
  
  option_type_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.option_type)
}

// uint32 turning_type = 18;
inline void DebugDecision::clear_turning_type() {
  turning_type_ = 0u;
}
inline ::google::protobuf::uint32 DebugDecision::turning_type() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.turning_type)
  return turning_type_;
}
inline void DebugDecision::set_turning_type(::google::protobuf::uint32 value) {
  
  turning_type_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.turning_type)
}

// uint32 stop_type = 19;
inline void DebugDecision::clear_stop_type() {
  stop_type_ = 0u;
}
inline ::google::protobuf::uint32 DebugDecision::stop_type() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.stop_type)
  return stop_type_;
}
inline void DebugDecision::set_stop_type(::google::protobuf::uint32 value) {
  
  stop_type_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.stop_type)
}

// uint32 lateral_decision = 20;
inline void DebugDecision::clear_lateral_decision() {
  lateral_decision_ = 0u;
}
inline ::google::protobuf::uint32 DebugDecision::lateral_decision() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.lateral_decision)
  return lateral_decision_;
}
inline void DebugDecision::set_lateral_decision(::google::protobuf::uint32 value) {
  
  lateral_decision_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.lateral_decision)
}

// uint32 ready_status = 21;
inline void DebugDecision::clear_ready_status() {
  ready_status_ = 0u;
}
inline ::google::protobuf::uint32 DebugDecision::ready_status() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.ready_status)
  return ready_status_;
}
inline void DebugDecision::set_ready_status(::google::protobuf::uint32 value) {
  
  ready_status_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.ready_status)
}

// float dis_to_junction = 22;
inline void DebugDecision::clear_dis_to_junction() {
  dis_to_junction_ = 0;
}
inline float DebugDecision::dis_to_junction() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.dis_to_junction)
  return dis_to_junction_;
}
inline void DebugDecision::set_dis_to_junction(float value) {
  
  dis_to_junction_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.dis_to_junction)
}

// float dis_to_stop = 23;
inline void DebugDecision::clear_dis_to_stop() {
  dis_to_stop_ = 0;
}
inline float DebugDecision::dis_to_stop() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.dis_to_stop)
  return dis_to_stop_;
}
inline void DebugDecision::set_dis_to_stop(float value) {
  
  dis_to_stop_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.dis_to_stop)
}

// float light_s = 24;
inline void DebugDecision::clear_light_s() {
  light_s_ = 0;
}
inline float DebugDecision::light_s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.light_s)
  return light_s_;
}
inline void DebugDecision::set_light_s(float value) {
  
  light_s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.light_s)
}

// float light_time = 25;
inline void DebugDecision::clear_light_time() {
  light_time_ = 0;
}
inline float DebugDecision::light_time() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.light_time)
  return light_time_;
}
inline void DebugDecision::set_light_time(float value) {
  
  light_time_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.light_time)
}

// float left_time = 26;
inline void DebugDecision::clear_left_time() {
  left_time_ = 0;
}
inline float DebugDecision::left_time() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.left_time)
  return left_time_;
}
inline void DebugDecision::set_left_time(float value) {
  
  left_time_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.left_time)
}

// uint32 light_color = 27;
inline void DebugDecision::clear_light_color() {
  light_color_ = 0u;
}
inline ::google::protobuf::uint32 DebugDecision::light_color() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.light_color)
  return light_color_;
}
inline void DebugDecision::set_light_color(::google::protobuf::uint32 value) {
  
  light_color_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.light_color)
}

// uint32 turning = 28;
inline void DebugDecision::clear_turning() {
  turning_ = 0u;
}
inline ::google::protobuf::uint32 DebugDecision::turning() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.turning)
  return turning_;
}
inline void DebugDecision::set_turning(::google::protobuf::uint32 value) {
  
  turning_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.turning)
}

// float expand_l = 29;
inline void DebugDecision::clear_expand_l() {
  expand_l_ = 0;
}
inline float DebugDecision::expand_l() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.expand_l)
  return expand_l_;
}
inline void DebugDecision::set_expand_l(float value) {
  
  expand_l_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.expand_l)
}

// .planning_msgs.Trajectory trajectory = 30;
inline bool DebugDecision::has_trajectory() const {
  return this != internal_default_instance() && trajectory_ != NULL;
}
inline const ::planning_msgs::Trajectory& DebugDecision::trajectory() const {
  const ::planning_msgs::Trajectory* p = trajectory_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.trajectory)
  return p != NULL ? *p : *reinterpret_cast<const ::planning_msgs::Trajectory*>(
      &::planning_msgs::_Trajectory_default_instance_);
}
inline ::planning_msgs::Trajectory* DebugDecision::release_trajectory() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.DebugDecision.trajectory)
  
  ::planning_msgs::Trajectory* temp = trajectory_;
  trajectory_ = NULL;
  return temp;
}
inline ::planning_msgs::Trajectory* DebugDecision::mutable_trajectory() {
  
  if (trajectory_ == NULL) {
    trajectory_ = new ::planning_msgs::Trajectory;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugDecision.trajectory)
  return trajectory_;
}
inline void DebugDecision::set_allocated_trajectory(::planning_msgs::Trajectory* trajectory) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(trajectory_);
  }
  if (trajectory) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trajectory = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trajectory, submessage_arena);
    }
    
  } else {
    
  }
  trajectory_ = trajectory;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.DebugDecision.trajectory)
}

// int32 is_passable = 31;
inline void DebugDecision::clear_is_passable() {
  is_passable_ = 0;
}
inline ::google::protobuf::int32 DebugDecision::is_passable() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.is_passable)
  return is_passable_;
}
inline void DebugDecision::set_is_passable(::google::protobuf::int32 value) {
  
  is_passable_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.is_passable)
}

// repeated string passable_lane_ids = 32;
inline int DebugDecision::passable_lane_ids_size() const {
  return passable_lane_ids_.size();
}
inline void DebugDecision::clear_passable_lane_ids() {
  passable_lane_ids_.Clear();
}
inline const ::std::string& DebugDecision::passable_lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.passable_lane_ids)
  return passable_lane_ids_.Get(index);
}
inline ::std::string* DebugDecision::mutable_passable_lane_ids(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugDecision.passable_lane_ids)
  return passable_lane_ids_.Mutable(index);
}
inline void DebugDecision::set_passable_lane_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.passable_lane_ids)
  passable_lane_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DebugDecision::set_passable_lane_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.passable_lane_ids)
  passable_lane_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DebugDecision::set_passable_lane_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  passable_lane_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.DebugDecision.passable_lane_ids)
}
inline void DebugDecision::set_passable_lane_ids(int index, const char* value, size_t size) {
  passable_lane_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.DebugDecision.passable_lane_ids)
}
inline ::std::string* DebugDecision::add_passable_lane_ids() {
  // @@protoc_insertion_point(field_add_mutable:planning_debug_msgs.DebugDecision.passable_lane_ids)
  return passable_lane_ids_.Add();
}
inline void DebugDecision::add_passable_lane_ids(const ::std::string& value) {
  passable_lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugDecision.passable_lane_ids)
}
#if LANG_CXX11
inline void DebugDecision::add_passable_lane_ids(::std::string&& value) {
  passable_lane_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugDecision.passable_lane_ids)
}
#endif
inline void DebugDecision::add_passable_lane_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  passable_lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:planning_debug_msgs.DebugDecision.passable_lane_ids)
}
inline void DebugDecision::add_passable_lane_ids(const char* value, size_t size) {
  passable_lane_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:planning_debug_msgs.DebugDecision.passable_lane_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DebugDecision::passable_lane_ids() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugDecision.passable_lane_ids)
  return passable_lane_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DebugDecision::mutable_passable_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugDecision.passable_lane_ids)
  return &passable_lane_ids_;
}

// repeated string black_road_ids = 33;
inline int DebugDecision::black_road_ids_size() const {
  return black_road_ids_.size();
}
inline void DebugDecision::clear_black_road_ids() {
  black_road_ids_.Clear();
}
inline const ::std::string& DebugDecision::black_road_ids(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugDecision.black_road_ids)
  return black_road_ids_.Get(index);
}
inline ::std::string* DebugDecision::mutable_black_road_ids(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugDecision.black_road_ids)
  return black_road_ids_.Mutable(index);
}
inline void DebugDecision::set_black_road_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.black_road_ids)
  black_road_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void DebugDecision::set_black_road_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugDecision.black_road_ids)
  black_road_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void DebugDecision::set_black_road_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  black_road_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.DebugDecision.black_road_ids)
}
inline void DebugDecision::set_black_road_ids(int index, const char* value, size_t size) {
  black_road_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.DebugDecision.black_road_ids)
}
inline ::std::string* DebugDecision::add_black_road_ids() {
  // @@protoc_insertion_point(field_add_mutable:planning_debug_msgs.DebugDecision.black_road_ids)
  return black_road_ids_.Add();
}
inline void DebugDecision::add_black_road_ids(const ::std::string& value) {
  black_road_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugDecision.black_road_ids)
}
#if LANG_CXX11
inline void DebugDecision::add_black_road_ids(::std::string&& value) {
  black_road_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugDecision.black_road_ids)
}
#endif
inline void DebugDecision::add_black_road_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  black_road_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:planning_debug_msgs.DebugDecision.black_road_ids)
}
inline void DebugDecision::add_black_road_ids(const char* value, size_t size) {
  black_road_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:planning_debug_msgs.DebugDecision.black_road_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DebugDecision::black_road_ids() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugDecision.black_road_ids)
  return black_road_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DebugDecision::mutable_black_road_ids() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugDecision.black_road_ids)
  return &black_road_ids_;
}

// -------------------------------------------------------------------

// DebugPrediction

// repeated .planning_msgs.Trajectory points = 1;
inline int DebugPrediction::points_size() const {
  return points_.size();
}
inline const ::planning_msgs::Trajectory& DebugPrediction::points(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugPrediction.points)
  return points_.Get(index);
}
inline ::planning_msgs::Trajectory* DebugPrediction::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugPrediction.points)
  return points_.Mutable(index);
}
inline ::planning_msgs::Trajectory* DebugPrediction::add_points() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugPrediction.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_msgs::Trajectory >*
DebugPrediction::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugPrediction.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_msgs::Trajectory >&
DebugPrediction::points() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugPrediction.points)
  return points_;
}

// -------------------------------------------------------------------

// DebugImu

// double time_stamp = 1;
inline void DebugImu::clear_time_stamp() {
  time_stamp_ = 0;
}
inline double DebugImu::time_stamp() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugImu.time_stamp)
  return time_stamp_;
}
inline void DebugImu::set_time_stamp(double value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugImu.time_stamp)
}

// double xg = 2;
inline void DebugImu::clear_xg() {
  xg_ = 0;
}
inline double DebugImu::xg() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugImu.xg)
  return xg_;
}
inline void DebugImu::set_xg(double value) {
  
  xg_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugImu.xg)
}

// double yg = 3;
inline void DebugImu::clear_yg() {
  yg_ = 0;
}
inline double DebugImu::yg() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugImu.yg)
  return yg_;
}
inline void DebugImu::set_yg(double value) {
  
  yg_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugImu.yg)
}

// double yaw = 4;
inline void DebugImu::clear_yaw() {
  yaw_ = 0;
}
inline double DebugImu::yaw() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugImu.yaw)
  return yaw_;
}
inline void DebugImu::set_yaw(double value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugImu.yaw)
}

// -------------------------------------------------------------------

// PlanningDebug

// .common_msgs.Header header = 1;
inline bool PlanningDebug::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::common_msgs::Header& PlanningDebug::header() const {
  const ::common_msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.PlanningDebug.header)
  return p != NULL ? *p : *reinterpret_cast<const ::common_msgs::Header*>(
      &::common_msgs::_Header_default_instance_);
}
inline ::common_msgs::Header* PlanningDebug::release_header() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.PlanningDebug.header)
  
  ::common_msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::common_msgs::Header* PlanningDebug::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::common_msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.PlanningDebug.header)
  return header_;
}
inline void PlanningDebug::set_allocated_header(::common_msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.PlanningDebug.header)
}

// string version = 2;
inline void PlanningDebug::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlanningDebug::version() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.PlanningDebug.version)
  return version_.GetNoArena();
}
inline void PlanningDebug::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.PlanningDebug.version)
}
#if LANG_CXX11
inline void PlanningDebug::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning_debug_msgs.PlanningDebug.version)
}
#endif
inline void PlanningDebug::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.PlanningDebug.version)
}
inline void PlanningDebug::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.PlanningDebug.version)
}
inline ::std::string* PlanningDebug::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.PlanningDebug.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlanningDebug::release_version() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.PlanningDebug.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlanningDebug::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.PlanningDebug.version)
}

// .planning_debug_msgs.DebugState main_stream_msg = 3;
inline bool PlanningDebug::has_main_stream_msg() const {
  return this != internal_default_instance() && main_stream_msg_ != NULL;
}
inline void PlanningDebug::clear_main_stream_msg() {
  if (GetArenaNoVirtual() == NULL && main_stream_msg_ != NULL) {
    delete main_stream_msg_;
  }
  main_stream_msg_ = NULL;
}
inline const ::planning_debug_msgs::DebugState& PlanningDebug::main_stream_msg() const {
  const ::planning_debug_msgs::DebugState* p = main_stream_msg_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.PlanningDebug.main_stream_msg)
  return p != NULL ? *p : *reinterpret_cast<const ::planning_debug_msgs::DebugState*>(
      &::planning_debug_msgs::_DebugState_default_instance_);
}
inline ::planning_debug_msgs::DebugState* PlanningDebug::release_main_stream_msg() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.PlanningDebug.main_stream_msg)
  
  ::planning_debug_msgs::DebugState* temp = main_stream_msg_;
  main_stream_msg_ = NULL;
  return temp;
}
inline ::planning_debug_msgs::DebugState* PlanningDebug::mutable_main_stream_msg() {
  
  if (main_stream_msg_ == NULL) {
    main_stream_msg_ = new ::planning_debug_msgs::DebugState;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.PlanningDebug.main_stream_msg)
  return main_stream_msg_;
}
inline void PlanningDebug::set_allocated_main_stream_msg(::planning_debug_msgs::DebugState* main_stream_msg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete main_stream_msg_;
  }
  if (main_stream_msg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      main_stream_msg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, main_stream_msg, submessage_arena);
    }
    
  } else {
    
  }
  main_stream_msg_ = main_stream_msg;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.PlanningDebug.main_stream_msg)
}

// .planning_debug_msgs.DebugState task_fsm_condition = 4;
inline bool PlanningDebug::has_task_fsm_condition() const {
  return this != internal_default_instance() && task_fsm_condition_ != NULL;
}
inline void PlanningDebug::clear_task_fsm_condition() {
  if (GetArenaNoVirtual() == NULL && task_fsm_condition_ != NULL) {
    delete task_fsm_condition_;
  }
  task_fsm_condition_ = NULL;
}
inline const ::planning_debug_msgs::DebugState& PlanningDebug::task_fsm_condition() const {
  const ::planning_debug_msgs::DebugState* p = task_fsm_condition_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.PlanningDebug.task_fsm_condition)
  return p != NULL ? *p : *reinterpret_cast<const ::planning_debug_msgs::DebugState*>(
      &::planning_debug_msgs::_DebugState_default_instance_);
}
inline ::planning_debug_msgs::DebugState* PlanningDebug::release_task_fsm_condition() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.PlanningDebug.task_fsm_condition)
  
  ::planning_debug_msgs::DebugState* temp = task_fsm_condition_;
  task_fsm_condition_ = NULL;
  return temp;
}
inline ::planning_debug_msgs::DebugState* PlanningDebug::mutable_task_fsm_condition() {
  
  if (task_fsm_condition_ == NULL) {
    task_fsm_condition_ = new ::planning_debug_msgs::DebugState;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.PlanningDebug.task_fsm_condition)
  return task_fsm_condition_;
}
inline void PlanningDebug::set_allocated_task_fsm_condition(::planning_debug_msgs::DebugState* task_fsm_condition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete task_fsm_condition_;
  }
  if (task_fsm_condition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      task_fsm_condition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_fsm_condition, submessage_arena);
    }
    
  } else {
    
  }
  task_fsm_condition_ = task_fsm_condition;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.PlanningDebug.task_fsm_condition)
}

// .planning_debug_msgs.DebugState task_fsm_state = 5;
inline bool PlanningDebug::has_task_fsm_state() const {
  return this != internal_default_instance() && task_fsm_state_ != NULL;
}
inline void PlanningDebug::clear_task_fsm_state() {
  if (GetArenaNoVirtual() == NULL && task_fsm_state_ != NULL) {
    delete task_fsm_state_;
  }
  task_fsm_state_ = NULL;
}
inline const ::planning_debug_msgs::DebugState& PlanningDebug::task_fsm_state() const {
  const ::planning_debug_msgs::DebugState* p = task_fsm_state_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.PlanningDebug.task_fsm_state)
  return p != NULL ? *p : *reinterpret_cast<const ::planning_debug_msgs::DebugState*>(
      &::planning_debug_msgs::_DebugState_default_instance_);
}
inline ::planning_debug_msgs::DebugState* PlanningDebug::release_task_fsm_state() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.PlanningDebug.task_fsm_state)
  
  ::planning_debug_msgs::DebugState* temp = task_fsm_state_;
  task_fsm_state_ = NULL;
  return temp;
}
inline ::planning_debug_msgs::DebugState* PlanningDebug::mutable_task_fsm_state() {
  
  if (task_fsm_state_ == NULL) {
    task_fsm_state_ = new ::planning_debug_msgs::DebugState;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.PlanningDebug.task_fsm_state)
  return task_fsm_state_;
}
inline void PlanningDebug::set_allocated_task_fsm_state(::planning_debug_msgs::DebugState* task_fsm_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete task_fsm_state_;
  }
  if (task_fsm_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      task_fsm_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_fsm_state, submessage_arena);
    }
    
  } else {
    
  }
  task_fsm_state_ = task_fsm_state;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.PlanningDebug.task_fsm_state)
}

// .planning_debug_msgs.DebugState cognition_msg = 6;
inline bool PlanningDebug::has_cognition_msg() const {
  return this != internal_default_instance() && cognition_msg_ != NULL;
}
inline void PlanningDebug::clear_cognition_msg() {
  if (GetArenaNoVirtual() == NULL && cognition_msg_ != NULL) {
    delete cognition_msg_;
  }
  cognition_msg_ = NULL;
}
inline const ::planning_debug_msgs::DebugState& PlanningDebug::cognition_msg() const {
  const ::planning_debug_msgs::DebugState* p = cognition_msg_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.PlanningDebug.cognition_msg)
  return p != NULL ? *p : *reinterpret_cast<const ::planning_debug_msgs::DebugState*>(
      &::planning_debug_msgs::_DebugState_default_instance_);
}
inline ::planning_debug_msgs::DebugState* PlanningDebug::release_cognition_msg() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.PlanningDebug.cognition_msg)
  
  ::planning_debug_msgs::DebugState* temp = cognition_msg_;
  cognition_msg_ = NULL;
  return temp;
}
inline ::planning_debug_msgs::DebugState* PlanningDebug::mutable_cognition_msg() {
  
  if (cognition_msg_ == NULL) {
    cognition_msg_ = new ::planning_debug_msgs::DebugState;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.PlanningDebug.cognition_msg)
  return cognition_msg_;
}
inline void PlanningDebug::set_allocated_cognition_msg(::planning_debug_msgs::DebugState* cognition_msg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cognition_msg_;
  }
  if (cognition_msg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cognition_msg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cognition_msg, submessage_arena);
    }
    
  } else {
    
  }
  cognition_msg_ = cognition_msg;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.PlanningDebug.cognition_msg)
}

// .planning_debug_msgs.DebugState business_msg = 7;
inline bool PlanningDebug::has_business_msg() const {
  return this != internal_default_instance() && business_msg_ != NULL;
}
inline void PlanningDebug::clear_business_msg() {
  if (GetArenaNoVirtual() == NULL && business_msg_ != NULL) {
    delete business_msg_;
  }
  business_msg_ = NULL;
}
inline const ::planning_debug_msgs::DebugState& PlanningDebug::business_msg() const {
  const ::planning_debug_msgs::DebugState* p = business_msg_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.PlanningDebug.business_msg)
  return p != NULL ? *p : *reinterpret_cast<const ::planning_debug_msgs::DebugState*>(
      &::planning_debug_msgs::_DebugState_default_instance_);
}
inline ::planning_debug_msgs::DebugState* PlanningDebug::release_business_msg() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.PlanningDebug.business_msg)
  
  ::planning_debug_msgs::DebugState* temp = business_msg_;
  business_msg_ = NULL;
  return temp;
}
inline ::planning_debug_msgs::DebugState* PlanningDebug::mutable_business_msg() {
  
  if (business_msg_ == NULL) {
    business_msg_ = new ::planning_debug_msgs::DebugState;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.PlanningDebug.business_msg)
  return business_msg_;
}
inline void PlanningDebug::set_allocated_business_msg(::planning_debug_msgs::DebugState* business_msg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete business_msg_;
  }
  if (business_msg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      business_msg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, business_msg, submessage_arena);
    }
    
  } else {
    
  }
  business_msg_ = business_msg;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.PlanningDebug.business_msg)
}

// .planning_debug_msgs.DebugState behavior_fsm_condition = 8;
inline bool PlanningDebug::has_behavior_fsm_condition() const {
  return this != internal_default_instance() && behavior_fsm_condition_ != NULL;
}
inline void PlanningDebug::clear_behavior_fsm_condition() {
  if (GetArenaNoVirtual() == NULL && behavior_fsm_condition_ != NULL) {
    delete behavior_fsm_condition_;
  }
  behavior_fsm_condition_ = NULL;
}
inline const ::planning_debug_msgs::DebugState& PlanningDebug::behavior_fsm_condition() const {
  const ::planning_debug_msgs::DebugState* p = behavior_fsm_condition_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.PlanningDebug.behavior_fsm_condition)
  return p != NULL ? *p : *reinterpret_cast<const ::planning_debug_msgs::DebugState*>(
      &::planning_debug_msgs::_DebugState_default_instance_);
}
inline ::planning_debug_msgs::DebugState* PlanningDebug::release_behavior_fsm_condition() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.PlanningDebug.behavior_fsm_condition)
  
  ::planning_debug_msgs::DebugState* temp = behavior_fsm_condition_;
  behavior_fsm_condition_ = NULL;
  return temp;
}
inline ::planning_debug_msgs::DebugState* PlanningDebug::mutable_behavior_fsm_condition() {
  
  if (behavior_fsm_condition_ == NULL) {
    behavior_fsm_condition_ = new ::planning_debug_msgs::DebugState;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.PlanningDebug.behavior_fsm_condition)
  return behavior_fsm_condition_;
}
inline void PlanningDebug::set_allocated_behavior_fsm_condition(::planning_debug_msgs::DebugState* behavior_fsm_condition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete behavior_fsm_condition_;
  }
  if (behavior_fsm_condition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      behavior_fsm_condition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, behavior_fsm_condition, submessage_arena);
    }
    
  } else {
    
  }
  behavior_fsm_condition_ = behavior_fsm_condition;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.PlanningDebug.behavior_fsm_condition)
}

// .planning_debug_msgs.DebugState behavior_fsm_state = 9;
inline bool PlanningDebug::has_behavior_fsm_state() const {
  return this != internal_default_instance() && behavior_fsm_state_ != NULL;
}
inline void PlanningDebug::clear_behavior_fsm_state() {
  if (GetArenaNoVirtual() == NULL && behavior_fsm_state_ != NULL) {
    delete behavior_fsm_state_;
  }
  behavior_fsm_state_ = NULL;
}
inline const ::planning_debug_msgs::DebugState& PlanningDebug::behavior_fsm_state() const {
  const ::planning_debug_msgs::DebugState* p = behavior_fsm_state_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.PlanningDebug.behavior_fsm_state)
  return p != NULL ? *p : *reinterpret_cast<const ::planning_debug_msgs::DebugState*>(
      &::planning_debug_msgs::_DebugState_default_instance_);
}
inline ::planning_debug_msgs::DebugState* PlanningDebug::release_behavior_fsm_state() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.PlanningDebug.behavior_fsm_state)
  
  ::planning_debug_msgs::DebugState* temp = behavior_fsm_state_;
  behavior_fsm_state_ = NULL;
  return temp;
}
inline ::planning_debug_msgs::DebugState* PlanningDebug::mutable_behavior_fsm_state() {
  
  if (behavior_fsm_state_ == NULL) {
    behavior_fsm_state_ = new ::planning_debug_msgs::DebugState;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.PlanningDebug.behavior_fsm_state)
  return behavior_fsm_state_;
}
inline void PlanningDebug::set_allocated_behavior_fsm_state(::planning_debug_msgs::DebugState* behavior_fsm_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete behavior_fsm_state_;
  }
  if (behavior_fsm_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      behavior_fsm_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, behavior_fsm_state, submessage_arena);
    }
    
  } else {
    
  }
  behavior_fsm_state_ = behavior_fsm_state;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.PlanningDebug.behavior_fsm_state)
}

// .planning_debug_msgs.DebugState pathplan_msg = 10;
inline bool PlanningDebug::has_pathplan_msg() const {
  return this != internal_default_instance() && pathplan_msg_ != NULL;
}
inline void PlanningDebug::clear_pathplan_msg() {
  if (GetArenaNoVirtual() == NULL && pathplan_msg_ != NULL) {
    delete pathplan_msg_;
  }
  pathplan_msg_ = NULL;
}
inline const ::planning_debug_msgs::DebugState& PlanningDebug::pathplan_msg() const {
  const ::planning_debug_msgs::DebugState* p = pathplan_msg_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.PlanningDebug.pathplan_msg)
  return p != NULL ? *p : *reinterpret_cast<const ::planning_debug_msgs::DebugState*>(
      &::planning_debug_msgs::_DebugState_default_instance_);
}
inline ::planning_debug_msgs::DebugState* PlanningDebug::release_pathplan_msg() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.PlanningDebug.pathplan_msg)
  
  ::planning_debug_msgs::DebugState* temp = pathplan_msg_;
  pathplan_msg_ = NULL;
  return temp;
}
inline ::planning_debug_msgs::DebugState* PlanningDebug::mutable_pathplan_msg() {
  
  if (pathplan_msg_ == NULL) {
    pathplan_msg_ = new ::planning_debug_msgs::DebugState;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.PlanningDebug.pathplan_msg)
  return pathplan_msg_;
}
inline void PlanningDebug::set_allocated_pathplan_msg(::planning_debug_msgs::DebugState* pathplan_msg) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pathplan_msg_;
  }
  if (pathplan_msg) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pathplan_msg = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pathplan_msg, submessage_arena);
    }
    
  } else {
    
  }
  pathplan_msg_ = pathplan_msg;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.PlanningDebug.pathplan_msg)
}

// .planning_debug_msgs.DebugState thread_state = 11;
inline bool PlanningDebug::has_thread_state() const {
  return this != internal_default_instance() && thread_state_ != NULL;
}
inline void PlanningDebug::clear_thread_state() {
  if (GetArenaNoVirtual() == NULL && thread_state_ != NULL) {
    delete thread_state_;
  }
  thread_state_ = NULL;
}
inline const ::planning_debug_msgs::DebugState& PlanningDebug::thread_state() const {
  const ::planning_debug_msgs::DebugState* p = thread_state_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.PlanningDebug.thread_state)
  return p != NULL ? *p : *reinterpret_cast<const ::planning_debug_msgs::DebugState*>(
      &::planning_debug_msgs::_DebugState_default_instance_);
}
inline ::planning_debug_msgs::DebugState* PlanningDebug::release_thread_state() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.PlanningDebug.thread_state)
  
  ::planning_debug_msgs::DebugState* temp = thread_state_;
  thread_state_ = NULL;
  return temp;
}
inline ::planning_debug_msgs::DebugState* PlanningDebug::mutable_thread_state() {
  
  if (thread_state_ == NULL) {
    thread_state_ = new ::planning_debug_msgs::DebugState;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.PlanningDebug.thread_state)
  return thread_state_;
}
inline void PlanningDebug::set_allocated_thread_state(::planning_debug_msgs::DebugState* thread_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete thread_state_;
  }
  if (thread_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      thread_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, thread_state, submessage_arena);
    }
    
  } else {
    
  }
  thread_state_ = thread_state;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.PlanningDebug.thread_state)
}

// .planning_debug_msgs.DebugMotionPlan motionplan = 12;
inline bool PlanningDebug::has_motionplan() const {
  return this != internal_default_instance() && motionplan_ != NULL;
}
inline void PlanningDebug::clear_motionplan() {
  if (GetArenaNoVirtual() == NULL && motionplan_ != NULL) {
    delete motionplan_;
  }
  motionplan_ = NULL;
}
inline const ::planning_debug_msgs::DebugMotionPlan& PlanningDebug::motionplan() const {
  const ::planning_debug_msgs::DebugMotionPlan* p = motionplan_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.PlanningDebug.motionplan)
  return p != NULL ? *p : *reinterpret_cast<const ::planning_debug_msgs::DebugMotionPlan*>(
      &::planning_debug_msgs::_DebugMotionPlan_default_instance_);
}
inline ::planning_debug_msgs::DebugMotionPlan* PlanningDebug::release_motionplan() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.PlanningDebug.motionplan)
  
  ::planning_debug_msgs::DebugMotionPlan* temp = motionplan_;
  motionplan_ = NULL;
  return temp;
}
inline ::planning_debug_msgs::DebugMotionPlan* PlanningDebug::mutable_motionplan() {
  
  if (motionplan_ == NULL) {
    motionplan_ = new ::planning_debug_msgs::DebugMotionPlan;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.PlanningDebug.motionplan)
  return motionplan_;
}
inline void PlanningDebug::set_allocated_motionplan(::planning_debug_msgs::DebugMotionPlan* motionplan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete motionplan_;
  }
  if (motionplan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      motionplan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, motionplan, submessage_arena);
    }
    
  } else {
    
  }
  motionplan_ = motionplan;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.PlanningDebug.motionplan)
}

// .planning_debug_msgs.DebugCognition cognition = 13;
inline bool PlanningDebug::has_cognition() const {
  return this != internal_default_instance() && cognition_ != NULL;
}
inline void PlanningDebug::clear_cognition() {
  if (GetArenaNoVirtual() == NULL && cognition_ != NULL) {
    delete cognition_;
  }
  cognition_ = NULL;
}
inline const ::planning_debug_msgs::DebugCognition& PlanningDebug::cognition() const {
  const ::planning_debug_msgs::DebugCognition* p = cognition_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.PlanningDebug.cognition)
  return p != NULL ? *p : *reinterpret_cast<const ::planning_debug_msgs::DebugCognition*>(
      &::planning_debug_msgs::_DebugCognition_default_instance_);
}
inline ::planning_debug_msgs::DebugCognition* PlanningDebug::release_cognition() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.PlanningDebug.cognition)
  
  ::planning_debug_msgs::DebugCognition* temp = cognition_;
  cognition_ = NULL;
  return temp;
}
inline ::planning_debug_msgs::DebugCognition* PlanningDebug::mutable_cognition() {
  
  if (cognition_ == NULL) {
    cognition_ = new ::planning_debug_msgs::DebugCognition;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.PlanningDebug.cognition)
  return cognition_;
}
inline void PlanningDebug::set_allocated_cognition(::planning_debug_msgs::DebugCognition* cognition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cognition_;
  }
  if (cognition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cognition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cognition, submessage_arena);
    }
    
  } else {
    
  }
  cognition_ = cognition;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.PlanningDebug.cognition)
}

// .planning_debug_msgs.DebugDecision decision = 14;
inline bool PlanningDebug::has_decision() const {
  return this != internal_default_instance() && decision_ != NULL;
}
inline void PlanningDebug::clear_decision() {
  if (GetArenaNoVirtual() == NULL && decision_ != NULL) {
    delete decision_;
  }
  decision_ = NULL;
}
inline const ::planning_debug_msgs::DebugDecision& PlanningDebug::decision() const {
  const ::planning_debug_msgs::DebugDecision* p = decision_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.PlanningDebug.decision)
  return p != NULL ? *p : *reinterpret_cast<const ::planning_debug_msgs::DebugDecision*>(
      &::planning_debug_msgs::_DebugDecision_default_instance_);
}
inline ::planning_debug_msgs::DebugDecision* PlanningDebug::release_decision() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.PlanningDebug.decision)
  
  ::planning_debug_msgs::DebugDecision* temp = decision_;
  decision_ = NULL;
  return temp;
}
inline ::planning_debug_msgs::DebugDecision* PlanningDebug::mutable_decision() {
  
  if (decision_ == NULL) {
    decision_ = new ::planning_debug_msgs::DebugDecision;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.PlanningDebug.decision)
  return decision_;
}
inline void PlanningDebug::set_allocated_decision(::planning_debug_msgs::DebugDecision* decision) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete decision_;
  }
  if (decision) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      decision = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, decision, submessage_arena);
    }
    
  } else {
    
  }
  decision_ = decision;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.PlanningDebug.decision)
}

// .planning_debug_msgs.DebugPrediction prediction = 15;
inline bool PlanningDebug::has_prediction() const {
  return this != internal_default_instance() && prediction_ != NULL;
}
inline void PlanningDebug::clear_prediction() {
  if (GetArenaNoVirtual() == NULL && prediction_ != NULL) {
    delete prediction_;
  }
  prediction_ = NULL;
}
inline const ::planning_debug_msgs::DebugPrediction& PlanningDebug::prediction() const {
  const ::planning_debug_msgs::DebugPrediction* p = prediction_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.PlanningDebug.prediction)
  return p != NULL ? *p : *reinterpret_cast<const ::planning_debug_msgs::DebugPrediction*>(
      &::planning_debug_msgs::_DebugPrediction_default_instance_);
}
inline ::planning_debug_msgs::DebugPrediction* PlanningDebug::release_prediction() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.PlanningDebug.prediction)
  
  ::planning_debug_msgs::DebugPrediction* temp = prediction_;
  prediction_ = NULL;
  return temp;
}
inline ::planning_debug_msgs::DebugPrediction* PlanningDebug::mutable_prediction() {
  
  if (prediction_ == NULL) {
    prediction_ = new ::planning_debug_msgs::DebugPrediction;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.PlanningDebug.prediction)
  return prediction_;
}
inline void PlanningDebug::set_allocated_prediction(::planning_debug_msgs::DebugPrediction* prediction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete prediction_;
  }
  if (prediction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      prediction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prediction, submessage_arena);
    }
    
  } else {
    
  }
  prediction_ = prediction;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.PlanningDebug.prediction)
}

// .planning_debug_msgs.DebugImu locpose = 16;
inline bool PlanningDebug::has_locpose() const {
  return this != internal_default_instance() && locpose_ != NULL;
}
inline void PlanningDebug::clear_locpose() {
  if (GetArenaNoVirtual() == NULL && locpose_ != NULL) {
    delete locpose_;
  }
  locpose_ = NULL;
}
inline const ::planning_debug_msgs::DebugImu& PlanningDebug::locpose() const {
  const ::planning_debug_msgs::DebugImu* p = locpose_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.PlanningDebug.locpose)
  return p != NULL ? *p : *reinterpret_cast<const ::planning_debug_msgs::DebugImu*>(
      &::planning_debug_msgs::_DebugImu_default_instance_);
}
inline ::planning_debug_msgs::DebugImu* PlanningDebug::release_locpose() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.PlanningDebug.locpose)
  
  ::planning_debug_msgs::DebugImu* temp = locpose_;
  locpose_ = NULL;
  return temp;
}
inline ::planning_debug_msgs::DebugImu* PlanningDebug::mutable_locpose() {
  
  if (locpose_ == NULL) {
    locpose_ = new ::planning_debug_msgs::DebugImu;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.PlanningDebug.locpose)
  return locpose_;
}
inline void PlanningDebug::set_allocated_locpose(::planning_debug_msgs::DebugImu* locpose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete locpose_;
  }
  if (locpose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      locpose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, locpose, submessage_arena);
    }
    
  } else {
    
  }
  locpose_ = locpose;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.PlanningDebug.locpose)
}

// repeated .Object perception = 17;
inline int PlanningDebug::perception_size() const {
  return perception_.size();
}
inline const ::Object& PlanningDebug::perception(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.PlanningDebug.perception)
  return perception_.Get(index);
}
inline ::Object* PlanningDebug::mutable_perception(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.PlanningDebug.perception)
  return perception_.Mutable(index);
}
inline ::Object* PlanningDebug::add_perception() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.PlanningDebug.perception)
  return perception_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Object >*
PlanningDebug::mutable_perception() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.PlanningDebug.perception)
  return &perception_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Object >&
PlanningDebug::perception() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.PlanningDebug.perception)
  return perception_;
}

// float time_cost_ms = 18;
inline void PlanningDebug::clear_time_cost_ms() {
  time_cost_ms_ = 0;
}
inline float PlanningDebug::time_cost_ms() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.PlanningDebug.time_cost_ms)
  return time_cost_ms_;
}
inline void PlanningDebug::set_time_cost_ms(float value) {
  
  time_cost_ms_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.PlanningDebug.time_cost_ms)
}

// -------------------------------------------------------------------

// DebugBusiness

// float dis_to_mission_point = 1;
inline void DebugBusiness::clear_dis_to_mission_point() {
  dis_to_mission_point_ = 0;
}
inline float DebugBusiness::dis_to_mission_point() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugBusiness.dis_to_mission_point)
  return dis_to_mission_point_;
}
inline void DebugBusiness::set_dis_to_mission_point(float value) {
  
  dis_to_mission_point_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugBusiness.dis_to_mission_point)
}

// float car_velocity = 2;
inline void DebugBusiness::clear_car_velocity() {
  car_velocity_ = 0;
}
inline float DebugBusiness::car_velocity() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugBusiness.car_velocity)
  return car_velocity_;
}
inline void DebugBusiness::set_car_velocity(float value) {
  
  car_velocity_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugBusiness.car_velocity)
}

// int32 process_status = 3;
inline void DebugBusiness::clear_process_status() {
  process_status_ = 0;
}
inline ::google::protobuf::int32 DebugBusiness::process_status() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugBusiness.process_status)
  return process_status_;
}
inline void DebugBusiness::set_process_status(::google::protobuf::int32 value) {
  
  process_status_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugBusiness.process_status)
}

// int32 is_current_line_null = 4;
inline void DebugBusiness::clear_is_current_line_null() {
  is_current_line_null_ = 0;
}
inline ::google::protobuf::int32 DebugBusiness::is_current_line_null() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugBusiness.is_current_line_null)
  return is_current_line_null_;
}
inline void DebugBusiness::set_is_current_line_null(::google::protobuf::int32 value) {
  
  is_current_line_null_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugBusiness.is_current_line_null)
}

// int32 business_exucute_over = 5;
inline void DebugBusiness::clear_business_exucute_over() {
  business_exucute_over_ = 0;
}
inline ::google::protobuf::int32 DebugBusiness::business_exucute_over() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugBusiness.business_exucute_over)
  return business_exucute_over_;
}
inline void DebugBusiness::set_business_exucute_over(::google::protobuf::int32 value) {
  
  business_exucute_over_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugBusiness.business_exucute_over)
}

// -------------------------------------------------------------------

// DebugSTPoint

// float p = 1;
inline void DebugSTPoint::clear_p() {
  p_ = 0;
}
inline float DebugSTPoint::p() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugSTPoint.p)
  return p_;
}
inline void DebugSTPoint::set_p(float value) {
  
  p_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugSTPoint.p)
}

// float s = 2;
inline void DebugSTPoint::clear_s() {
  s_ = 0;
}
inline float DebugSTPoint::s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugSTPoint.s)
  return s_;
}
inline void DebugSTPoint::set_s(float value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugSTPoint.s)
}

// float t = 3;
inline void DebugSTPoint::clear_t() {
  t_ = 0;
}
inline float DebugSTPoint::t() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugSTPoint.t)
  return t_;
}
inline void DebugSTPoint::set_t(float value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugSTPoint.t)
}

// repeated int32 id = 4;
inline int DebugSTPoint::id_size() const {
  return id_.size();
}
inline void DebugSTPoint::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int32 DebugSTPoint::id(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugSTPoint.id)
  return id_.Get(index);
}
inline void DebugSTPoint::set_id(int index, ::google::protobuf::int32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugSTPoint.id)
}
inline void DebugSTPoint::add_id(::google::protobuf::int32 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugSTPoint.id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DebugSTPoint::id() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugSTPoint.id)
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DebugSTPoint::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugSTPoint.id)
  return &id_;
}

// -------------------------------------------------------------------

// Debugstmap

// repeated .planning_debug_msgs.DebugSTPoint st_points = 1;
inline int Debugstmap::st_points_size() const {
  return st_points_.size();
}
inline void Debugstmap::clear_st_points() {
  st_points_.Clear();
}
inline const ::planning_debug_msgs::DebugSTPoint& Debugstmap::st_points(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.Debugstmap.st_points)
  return st_points_.Get(index);
}
inline ::planning_debug_msgs::DebugSTPoint* Debugstmap::mutable_st_points(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.Debugstmap.st_points)
  return st_points_.Mutable(index);
}
inline ::planning_debug_msgs::DebugSTPoint* Debugstmap::add_st_points() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.Debugstmap.st_points)
  return st_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugSTPoint >*
Debugstmap::mutable_st_points() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.Debugstmap.st_points)
  return &st_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugSTPoint >&
Debugstmap::st_points() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.Debugstmap.st_points)
  return st_points_;
}

// repeated .planning_debug_msgs.DebugSTPoint decision_st_points = 2;
inline int Debugstmap::decision_st_points_size() const {
  return decision_st_points_.size();
}
inline void Debugstmap::clear_decision_st_points() {
  decision_st_points_.Clear();
}
inline const ::planning_debug_msgs::DebugSTPoint& Debugstmap::decision_st_points(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.Debugstmap.decision_st_points)
  return decision_st_points_.Get(index);
}
inline ::planning_debug_msgs::DebugSTPoint* Debugstmap::mutable_decision_st_points(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.Debugstmap.decision_st_points)
  return decision_st_points_.Mutable(index);
}
inline ::planning_debug_msgs::DebugSTPoint* Debugstmap::add_decision_st_points() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.Debugstmap.decision_st_points)
  return decision_st_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugSTPoint >*
Debugstmap::mutable_decision_st_points() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.Debugstmap.decision_st_points)
  return &decision_st_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugSTPoint >&
Debugstmap::decision_st_points() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.Debugstmap.decision_st_points)
  return decision_st_points_;
}

// -------------------------------------------------------------------

// DebugObjectByLine

// repeated .planning_debug_msgs.DebugObject object_debug = 1;
inline int DebugObjectByLine::object_debug_size() const {
  return object_debug_.size();
}
inline void DebugObjectByLine::clear_object_debug() {
  object_debug_.Clear();
}
inline const ::planning_debug_msgs::DebugObject& DebugObjectByLine::object_debug(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObjectByLine.object_debug)
  return object_debug_.Get(index);
}
inline ::planning_debug_msgs::DebugObject* DebugObjectByLine::mutable_object_debug(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugObjectByLine.object_debug)
  return object_debug_.Mutable(index);
}
inline ::planning_debug_msgs::DebugObject* DebugObjectByLine::add_object_debug() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugObjectByLine.object_debug)
  return object_debug_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugObject >*
DebugObjectByLine::mutable_object_debug() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugObjectByLine.object_debug)
  return &object_debug_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugObject >&
DebugObjectByLine::object_debug() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugObjectByLine.object_debug)
  return object_debug_;
}

// int32 object_decision = 2;
inline void DebugObjectByLine::clear_object_decision() {
  object_decision_ = 0;
}
inline ::google::protobuf::int32 DebugObjectByLine::object_decision() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObjectByLine.object_decision)
  return object_decision_;
}
inline void DebugObjectByLine::set_object_decision(::google::protobuf::int32 value) {
  
  object_decision_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugObjectByLine.object_decision)
}

// float max_p = 3;
inline void DebugObjectByLine::clear_max_p() {
  max_p_ = 0;
}
inline float DebugObjectByLine::max_p() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObjectByLine.max_p)
  return max_p_;
}
inline void DebugObjectByLine::set_max_p(float value) {
  
  max_p_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugObjectByLine.max_p)
}

// float limit_v = 4;
inline void DebugObjectByLine::clear_limit_v() {
  limit_v_ = 0;
}
inline float DebugObjectByLine::limit_v() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugObjectByLine.limit_v)
  return limit_v_;
}
inline void DebugObjectByLine::set_limit_v(float value) {
  
  limit_v_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugObjectByLine.limit_v)
}

// -------------------------------------------------------------------

// LBounds

// double right_boundary = 1;
inline void LBounds::clear_right_boundary() {
  right_boundary_ = 0;
}
inline double LBounds::right_boundary() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.LBounds.right_boundary)
  return right_boundary_;
}
inline void LBounds::set_right_boundary(double value) {
  
  right_boundary_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.LBounds.right_boundary)
}

// double left_boundary = 2;
inline void LBounds::clear_left_boundary() {
  left_boundary_ = 0;
}
inline double LBounds::left_boundary() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.LBounds.left_boundary)
  return left_boundary_;
}
inline void LBounds::set_left_boundary(double value) {
  
  left_boundary_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.LBounds.left_boundary)
}

// double right_boundary_xg = 3;
inline void LBounds::clear_right_boundary_xg() {
  right_boundary_xg_ = 0;
}
inline double LBounds::right_boundary_xg() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.LBounds.right_boundary_xg)
  return right_boundary_xg_;
}
inline void LBounds::set_right_boundary_xg(double value) {
  
  right_boundary_xg_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.LBounds.right_boundary_xg)
}

// double right_boundary_yg = 4;
inline void LBounds::clear_right_boundary_yg() {
  right_boundary_yg_ = 0;
}
inline double LBounds::right_boundary_yg() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.LBounds.right_boundary_yg)
  return right_boundary_yg_;
}
inline void LBounds::set_right_boundary_yg(double value) {
  
  right_boundary_yg_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.LBounds.right_boundary_yg)
}

// double right_boundary_globalangle = 5;
inline void LBounds::clear_right_boundary_globalangle() {
  right_boundary_globalangle_ = 0;
}
inline double LBounds::right_boundary_globalangle() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.LBounds.right_boundary_globalangle)
  return right_boundary_globalangle_;
}
inline void LBounds::set_right_boundary_globalangle(double value) {
  
  right_boundary_globalangle_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.LBounds.right_boundary_globalangle)
}

// double right_boundary_x = 6;
inline void LBounds::clear_right_boundary_x() {
  right_boundary_x_ = 0;
}
inline double LBounds::right_boundary_x() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.LBounds.right_boundary_x)
  return right_boundary_x_;
}
inline void LBounds::set_right_boundary_x(double value) {
  
  right_boundary_x_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.LBounds.right_boundary_x)
}

// double right_boundary_y = 7;
inline void LBounds::clear_right_boundary_y() {
  right_boundary_y_ = 0;
}
inline double LBounds::right_boundary_y() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.LBounds.right_boundary_y)
  return right_boundary_y_;
}
inline void LBounds::set_right_boundary_y(double value) {
  
  right_boundary_y_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.LBounds.right_boundary_y)
}

// double right_boundary_angle = 8;
inline void LBounds::clear_right_boundary_angle() {
  right_boundary_angle_ = 0;
}
inline double LBounds::right_boundary_angle() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.LBounds.right_boundary_angle)
  return right_boundary_angle_;
}
inline void LBounds::set_right_boundary_angle(double value) {
  
  right_boundary_angle_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.LBounds.right_boundary_angle)
}

// double left_boundary_xg = 9;
inline void LBounds::clear_left_boundary_xg() {
  left_boundary_xg_ = 0;
}
inline double LBounds::left_boundary_xg() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.LBounds.left_boundary_xg)
  return left_boundary_xg_;
}
inline void LBounds::set_left_boundary_xg(double value) {
  
  left_boundary_xg_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.LBounds.left_boundary_xg)
}

// double left_boundary_yg = 10;
inline void LBounds::clear_left_boundary_yg() {
  left_boundary_yg_ = 0;
}
inline double LBounds::left_boundary_yg() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.LBounds.left_boundary_yg)
  return left_boundary_yg_;
}
inline void LBounds::set_left_boundary_yg(double value) {
  
  left_boundary_yg_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.LBounds.left_boundary_yg)
}

// double left_boundary_globalangle = 11;
inline void LBounds::clear_left_boundary_globalangle() {
  left_boundary_globalangle_ = 0;
}
inline double LBounds::left_boundary_globalangle() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.LBounds.left_boundary_globalangle)
  return left_boundary_globalangle_;
}
inline void LBounds::set_left_boundary_globalangle(double value) {
  
  left_boundary_globalangle_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.LBounds.left_boundary_globalangle)
}

// double left_boundary_x = 12;
inline void LBounds::clear_left_boundary_x() {
  left_boundary_x_ = 0;
}
inline double LBounds::left_boundary_x() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.LBounds.left_boundary_x)
  return left_boundary_x_;
}
inline void LBounds::set_left_boundary_x(double value) {
  
  left_boundary_x_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.LBounds.left_boundary_x)
}

// double left_boundary_y = 13;
inline void LBounds::clear_left_boundary_y() {
  left_boundary_y_ = 0;
}
inline double LBounds::left_boundary_y() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.LBounds.left_boundary_y)
  return left_boundary_y_;
}
inline void LBounds::set_left_boundary_y(double value) {
  
  left_boundary_y_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.LBounds.left_boundary_y)
}

// double left_boundary_angle = 14;
inline void LBounds::clear_left_boundary_angle() {
  left_boundary_angle_ = 0;
}
inline double LBounds::left_boundary_angle() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.LBounds.left_boundary_angle)
  return left_boundary_angle_;
}
inline void LBounds::set_left_boundary_angle(double value) {
  
  left_boundary_angle_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.LBounds.left_boundary_angle)
}

// -------------------------------------------------------------------

// SoftBoundary

// .planning_debug_msgs.LBounds l_bounds = 1;
inline bool SoftBoundary::has_l_bounds() const {
  return this != internal_default_instance() && l_bounds_ != NULL;
}
inline void SoftBoundary::clear_l_bounds() {
  if (GetArenaNoVirtual() == NULL && l_bounds_ != NULL) {
    delete l_bounds_;
  }
  l_bounds_ = NULL;
}
inline const ::planning_debug_msgs::LBounds& SoftBoundary::l_bounds() const {
  const ::planning_debug_msgs::LBounds* p = l_bounds_;
  // @@protoc_insertion_point(field_get:planning_debug_msgs.SoftBoundary.l_bounds)
  return p != NULL ? *p : *reinterpret_cast<const ::planning_debug_msgs::LBounds*>(
      &::planning_debug_msgs::_LBounds_default_instance_);
}
inline ::planning_debug_msgs::LBounds* SoftBoundary::release_l_bounds() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.SoftBoundary.l_bounds)
  
  ::planning_debug_msgs::LBounds* temp = l_bounds_;
  l_bounds_ = NULL;
  return temp;
}
inline ::planning_debug_msgs::LBounds* SoftBoundary::mutable_l_bounds() {
  
  if (l_bounds_ == NULL) {
    l_bounds_ = new ::planning_debug_msgs::LBounds;
  }
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.SoftBoundary.l_bounds)
  return l_bounds_;
}
inline void SoftBoundary::set_allocated_l_bounds(::planning_debug_msgs::LBounds* l_bounds) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete l_bounds_;
  }
  if (l_bounds) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      l_bounds = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, l_bounds, submessage_arena);
    }
    
  } else {
    
  }
  l_bounds_ = l_bounds;
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.SoftBoundary.l_bounds)
}

// double probability = 2;
inline void SoftBoundary::clear_probability() {
  probability_ = 0;
}
inline double SoftBoundary::probability() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.SoftBoundary.probability)
  return probability_;
}
inline void SoftBoundary::set_probability(double value) {
  
  probability_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.SoftBoundary.probability)
}

// double obj_occupy_delt_l = 3;
inline void SoftBoundary::clear_obj_occupy_delt_l() {
  obj_occupy_delt_l_ = 0;
}
inline double SoftBoundary::obj_occupy_delt_l() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.SoftBoundary.obj_occupy_delt_l)
  return obj_occupy_delt_l_;
}
inline void SoftBoundary::set_obj_occupy_delt_l(double value) {
  
  obj_occupy_delt_l_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.SoftBoundary.obj_occupy_delt_l)
}

// string obj_id = 4;
inline void SoftBoundary::clear_obj_id() {
  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SoftBoundary::obj_id() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.SoftBoundary.obj_id)
  return obj_id_.GetNoArena();
}
inline void SoftBoundary::set_obj_id(const ::std::string& value) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.SoftBoundary.obj_id)
}
#if LANG_CXX11
inline void SoftBoundary::set_obj_id(::std::string&& value) {
  
  obj_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning_debug_msgs.SoftBoundary.obj_id)
}
#endif
inline void SoftBoundary::set_obj_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.SoftBoundary.obj_id)
}
inline void SoftBoundary::set_obj_id(const char* value, size_t size) {
  
  obj_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.SoftBoundary.obj_id)
}
inline ::std::string* SoftBoundary::mutable_obj_id() {
  
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.SoftBoundary.obj_id)
  return obj_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SoftBoundary::release_obj_id() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.SoftBoundary.obj_id)
  
  return obj_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoftBoundary::set_allocated_obj_id(::std::string* obj_id) {
  if (obj_id != NULL) {
    
  } else {
    
  }
  obj_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obj_id);
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.SoftBoundary.obj_id)
}

// -------------------------------------------------------------------

// BoundaryType

// int32 right_bound_type = 1;
inline void BoundaryType::clear_right_bound_type() {
  right_bound_type_ = 0;
}
inline ::google::protobuf::int32 BoundaryType::right_bound_type() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.BoundaryType.right_bound_type)
  return right_bound_type_;
}
inline void BoundaryType::set_right_bound_type(::google::protobuf::int32 value) {
  
  right_bound_type_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.BoundaryType.right_bound_type)
}

// int32 left_bound_type = 2;
inline void BoundaryType::clear_left_bound_type() {
  left_bound_type_ = 0;
}
inline ::google::protobuf::int32 BoundaryType::left_bound_type() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.BoundaryType.left_bound_type)
  return left_bound_type_;
}
inline void BoundaryType::set_left_bound_type(::google::protobuf::int32 value) {
  
  left_bound_type_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.BoundaryType.left_bound_type)
}

// -------------------------------------------------------------------

// DebugSLBoundary

// double start_s = 1;
inline void DebugSLBoundary::clear_start_s() {
  start_s_ = 0;
}
inline double DebugSLBoundary::start_s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugSLBoundary.start_s)
  return start_s_;
}
inline void DebugSLBoundary::set_start_s(double value) {
  
  start_s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugSLBoundary.start_s)
}

// double delta_s = 2;
inline void DebugSLBoundary::clear_delta_s() {
  delta_s_ = 0;
}
inline double DebugSLBoundary::delta_s() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugSLBoundary.delta_s)
  return delta_s_;
}
inline void DebugSLBoundary::set_delta_s(double value) {
  
  delta_s_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugSLBoundary.delta_s)
}

// repeated .planning_debug_msgs.LBounds boundary = 3;
inline int DebugSLBoundary::boundary_size() const {
  return boundary_.size();
}
inline void DebugSLBoundary::clear_boundary() {
  boundary_.Clear();
}
inline const ::planning_debug_msgs::LBounds& DebugSLBoundary::boundary(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugSLBoundary.boundary)
  return boundary_.Get(index);
}
inline ::planning_debug_msgs::LBounds* DebugSLBoundary::mutable_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugSLBoundary.boundary)
  return boundary_.Mutable(index);
}
inline ::planning_debug_msgs::LBounds* DebugSLBoundary::add_boundary() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugSLBoundary.boundary)
  return boundary_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::LBounds >*
DebugSLBoundary::mutable_boundary() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugSLBoundary.boundary)
  return &boundary_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::LBounds >&
DebugSLBoundary::boundary() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugSLBoundary.boundary)
  return boundary_;
}

// repeated .planning_debug_msgs.LBounds box_modified_boundary = 4;
inline int DebugSLBoundary::box_modified_boundary_size() const {
  return box_modified_boundary_.size();
}
inline void DebugSLBoundary::clear_box_modified_boundary() {
  box_modified_boundary_.Clear();
}
inline const ::planning_debug_msgs::LBounds& DebugSLBoundary::box_modified_boundary(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugSLBoundary.box_modified_boundary)
  return box_modified_boundary_.Get(index);
}
inline ::planning_debug_msgs::LBounds* DebugSLBoundary::mutable_box_modified_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugSLBoundary.box_modified_boundary)
  return box_modified_boundary_.Mutable(index);
}
inline ::planning_debug_msgs::LBounds* DebugSLBoundary::add_box_modified_boundary() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugSLBoundary.box_modified_boundary)
  return box_modified_boundary_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::LBounds >*
DebugSLBoundary::mutable_box_modified_boundary() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugSLBoundary.box_modified_boundary)
  return &box_modified_boundary_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::LBounds >&
DebugSLBoundary::box_modified_boundary() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugSLBoundary.box_modified_boundary)
  return box_modified_boundary_;
}

// repeated .planning_debug_msgs.LBounds dynamic_obstacle_boundary = 5;
inline int DebugSLBoundary::dynamic_obstacle_boundary_size() const {
  return dynamic_obstacle_boundary_.size();
}
inline void DebugSLBoundary::clear_dynamic_obstacle_boundary() {
  dynamic_obstacle_boundary_.Clear();
}
inline const ::planning_debug_msgs::LBounds& DebugSLBoundary::dynamic_obstacle_boundary(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugSLBoundary.dynamic_obstacle_boundary)
  return dynamic_obstacle_boundary_.Get(index);
}
inline ::planning_debug_msgs::LBounds* DebugSLBoundary::mutable_dynamic_obstacle_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugSLBoundary.dynamic_obstacle_boundary)
  return dynamic_obstacle_boundary_.Mutable(index);
}
inline ::planning_debug_msgs::LBounds* DebugSLBoundary::add_dynamic_obstacle_boundary() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugSLBoundary.dynamic_obstacle_boundary)
  return dynamic_obstacle_boundary_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::LBounds >*
DebugSLBoundary::mutable_dynamic_obstacle_boundary() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugSLBoundary.dynamic_obstacle_boundary)
  return &dynamic_obstacle_boundary_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::LBounds >&
DebugSLBoundary::dynamic_obstacle_boundary() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugSLBoundary.dynamic_obstacle_boundary)
  return dynamic_obstacle_boundary_;
}

// repeated .planning_debug_msgs.SoftBoundary soft_boundary = 6;
inline int DebugSLBoundary::soft_boundary_size() const {
  return soft_boundary_.size();
}
inline void DebugSLBoundary::clear_soft_boundary() {
  soft_boundary_.Clear();
}
inline const ::planning_debug_msgs::SoftBoundary& DebugSLBoundary::soft_boundary(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugSLBoundary.soft_boundary)
  return soft_boundary_.Get(index);
}
inline ::planning_debug_msgs::SoftBoundary* DebugSLBoundary::mutable_soft_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugSLBoundary.soft_boundary)
  return soft_boundary_.Mutable(index);
}
inline ::planning_debug_msgs::SoftBoundary* DebugSLBoundary::add_soft_boundary() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugSLBoundary.soft_boundary)
  return soft_boundary_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::SoftBoundary >*
DebugSLBoundary::mutable_soft_boundary() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugSLBoundary.soft_boundary)
  return &soft_boundary_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::SoftBoundary >&
DebugSLBoundary::soft_boundary() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugSLBoundary.soft_boundary)
  return soft_boundary_;
}

// repeated .planning_debug_msgs.BoundaryType boundary_type = 7;
inline int DebugSLBoundary::boundary_type_size() const {
  return boundary_type_.size();
}
inline void DebugSLBoundary::clear_boundary_type() {
  boundary_type_.Clear();
}
inline const ::planning_debug_msgs::BoundaryType& DebugSLBoundary::boundary_type(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugSLBoundary.boundary_type)
  return boundary_type_.Get(index);
}
inline ::planning_debug_msgs::BoundaryType* DebugSLBoundary::mutable_boundary_type(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugSLBoundary.boundary_type)
  return boundary_type_.Mutable(index);
}
inline ::planning_debug_msgs::BoundaryType* DebugSLBoundary::add_boundary_type() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugSLBoundary.boundary_type)
  return boundary_type_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::BoundaryType >*
DebugSLBoundary::mutable_boundary_type() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugSLBoundary.boundary_type)
  return &boundary_type_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::BoundaryType >&
DebugSLBoundary::boundary_type() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugSLBoundary.boundary_type)
  return boundary_type_;
}

// string label = 8;
inline void DebugSLBoundary::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DebugSLBoundary::label() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugSLBoundary.label)
  return label_.GetNoArena();
}
inline void DebugSLBoundary::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugSLBoundary.label)
}
#if LANG_CXX11
inline void DebugSLBoundary::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning_debug_msgs.DebugSLBoundary.label)
}
#endif
inline void DebugSLBoundary::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.DebugSLBoundary.label)
}
inline void DebugSLBoundary::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.DebugSLBoundary.label)
}
inline ::std::string* DebugSLBoundary::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugSLBoundary.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DebugSLBoundary::release_label() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.DebugSLBoundary.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DebugSLBoundary::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.DebugSLBoundary.label)
}

// string blocking_obstacle_id = 9;
inline void DebugSLBoundary::clear_blocking_obstacle_id() {
  blocking_obstacle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DebugSLBoundary::blocking_obstacle_id() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugSLBoundary.blocking_obstacle_id)
  return blocking_obstacle_id_.GetNoArena();
}
inline void DebugSLBoundary::set_blocking_obstacle_id(const ::std::string& value) {
  
  blocking_obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugSLBoundary.blocking_obstacle_id)
}
#if LANG_CXX11
inline void DebugSLBoundary::set_blocking_obstacle_id(::std::string&& value) {
  
  blocking_obstacle_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning_debug_msgs.DebugSLBoundary.blocking_obstacle_id)
}
#endif
inline void DebugSLBoundary::set_blocking_obstacle_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  blocking_obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.DebugSLBoundary.blocking_obstacle_id)
}
inline void DebugSLBoundary::set_blocking_obstacle_id(const char* value, size_t size) {
  
  blocking_obstacle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.DebugSLBoundary.blocking_obstacle_id)
}
inline ::std::string* DebugSLBoundary::mutable_blocking_obstacle_id() {
  
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.DebugSLBoundary.blocking_obstacle_id)
  return blocking_obstacle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DebugSLBoundary::release_blocking_obstacle_id() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.DebugSLBoundary.blocking_obstacle_id)
  
  return blocking_obstacle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DebugSLBoundary::set_allocated_blocking_obstacle_id(::std::string* blocking_obstacle_id) {
  if (blocking_obstacle_id != NULL) {
    
  } else {
    
  }
  blocking_obstacle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blocking_obstacle_id);
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.DebugSLBoundary.blocking_obstacle_id)
}

// bool is_blocked = 10;
inline void DebugSLBoundary::clear_is_blocked() {
  is_blocked_ = false;
}
inline bool DebugSLBoundary::is_blocked() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugSLBoundary.is_blocked)
  return is_blocked_;
}
inline void DebugSLBoundary::set_is_blocked(bool value) {
  
  is_blocked_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugSLBoundary.is_blocked)
}

// -------------------------------------------------------------------

// motion_obstacle

// string Id = 1;
inline void motion_obstacle::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& motion_obstacle::id() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.motion_obstacle.Id)
  return id_.GetNoArena();
}
inline void motion_obstacle::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.motion_obstacle.Id)
}
#if LANG_CXX11
inline void motion_obstacle::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning_debug_msgs.motion_obstacle.Id)
}
#endif
inline void motion_obstacle::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning_debug_msgs.motion_obstacle.Id)
}
inline void motion_obstacle::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning_debug_msgs.motion_obstacle.Id)
}
inline ::std::string* motion_obstacle::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.motion_obstacle.Id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* motion_obstacle::release_id() {
  // @@protoc_insertion_point(field_release:planning_debug_msgs.motion_obstacle.Id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void motion_obstacle::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:planning_debug_msgs.motion_obstacle.Id)
}

// int32 PerceptionId = 2;
inline void motion_obstacle::clear_perceptionid() {
  perceptionid_ = 0;
}
inline ::google::protobuf::int32 motion_obstacle::perceptionid() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.motion_obstacle.PerceptionId)
  return perceptionid_;
}
inline void motion_obstacle::set_perceptionid(::google::protobuf::int32 value) {
  
  perceptionid_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.motion_obstacle.PerceptionId)
}

// double Perception_xg = 3;
inline void motion_obstacle::clear_perception_xg() {
  perception_xg_ = 0;
}
inline double motion_obstacle::perception_xg() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.motion_obstacle.Perception_xg)
  return perception_xg_;
}
inline void motion_obstacle::set_perception_xg(double value) {
  
  perception_xg_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.motion_obstacle.Perception_xg)
}

// double Perception_yg = 4;
inline void motion_obstacle::clear_perception_yg() {
  perception_yg_ = 0;
}
inline double motion_obstacle::perception_yg() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.motion_obstacle.Perception_yg)
  return perception_yg_;
}
inline void motion_obstacle::set_perception_yg(double value) {
  
  perception_yg_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.motion_obstacle.Perception_yg)
}

// int32 IsStatic = 5;
inline void motion_obstacle::clear_isstatic() {
  isstatic_ = 0;
}
inline ::google::protobuf::int32 motion_obstacle::isstatic() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.motion_obstacle.IsStatic)
  return isstatic_;
}
inline void motion_obstacle::set_isstatic(::google::protobuf::int32 value) {
  
  isstatic_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.motion_obstacle.IsStatic)
}

// int32 IsVirtual = 6;
inline void motion_obstacle::clear_isvirtual() {
  isvirtual_ = 0;
}
inline ::google::protobuf::int32 motion_obstacle::isvirtual() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.motion_obstacle.IsVirtual)
  return isvirtual_;
}
inline void motion_obstacle::set_isvirtual(::google::protobuf::int32 value) {
  
  isvirtual_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.motion_obstacle.IsVirtual)
}

// -------------------------------------------------------------------

// motion_obstacle_vec

// repeated .planning_debug_msgs.motion_obstacle motion_obstacles = 1;
inline int motion_obstacle_vec::motion_obstacles_size() const {
  return motion_obstacles_.size();
}
inline void motion_obstacle_vec::clear_motion_obstacles() {
  motion_obstacles_.Clear();
}
inline const ::planning_debug_msgs::motion_obstacle& motion_obstacle_vec::motion_obstacles(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.motion_obstacle_vec.motion_obstacles)
  return motion_obstacles_.Get(index);
}
inline ::planning_debug_msgs::motion_obstacle* motion_obstacle_vec::mutable_motion_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.motion_obstacle_vec.motion_obstacles)
  return motion_obstacles_.Mutable(index);
}
inline ::planning_debug_msgs::motion_obstacle* motion_obstacle_vec::add_motion_obstacles() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.motion_obstacle_vec.motion_obstacles)
  return motion_obstacles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::motion_obstacle >*
motion_obstacle_vec::mutable_motion_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.motion_obstacle_vec.motion_obstacles)
  return &motion_obstacles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::motion_obstacle >&
motion_obstacle_vec::motion_obstacles() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.motion_obstacle_vec.motion_obstacles)
  return motion_obstacles_;
}

// -------------------------------------------------------------------

// DebugXTBound

// float t = 1;
inline void DebugXTBound::clear_t() {
  t_ = 0;
}
inline float DebugXTBound::t() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugXTBound.t)
  return t_;
}
inline void DebugXTBound::set_t(float value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugXTBound.t)
}

// float min_bound = 2;
inline void DebugXTBound::clear_min_bound() {
  min_bound_ = 0;
}
inline float DebugXTBound::min_bound() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugXTBound.min_bound)
  return min_bound_;
}
inline void DebugXTBound::set_min_bound(float value) {
  
  min_bound_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugXTBound.min_bound)
}

// float max_bound = 3;
inline void DebugXTBound::clear_max_bound() {
  max_bound_ = 0;
}
inline float DebugXTBound::max_bound() const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugXTBound.max_bound)
  return max_bound_;
}
inline void DebugXTBound::set_max_bound(float value) {
  
  max_bound_ = value;
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugXTBound.max_bound)
}

// -------------------------------------------------------------------

// XTBounds

// repeated .planning_debug_msgs.DebugXTBound st_bounds = 1;
inline int XTBounds::st_bounds_size() const {
  return st_bounds_.size();
}
inline void XTBounds::clear_st_bounds() {
  st_bounds_.Clear();
}
inline const ::planning_debug_msgs::DebugXTBound& XTBounds::st_bounds(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.XTBounds.st_bounds)
  return st_bounds_.Get(index);
}
inline ::planning_debug_msgs::DebugXTBound* XTBounds::mutable_st_bounds(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.XTBounds.st_bounds)
  return st_bounds_.Mutable(index);
}
inline ::planning_debug_msgs::DebugXTBound* XTBounds::add_st_bounds() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.XTBounds.st_bounds)
  return st_bounds_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugXTBound >*
XTBounds::mutable_st_bounds() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.XTBounds.st_bounds)
  return &st_bounds_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugXTBound >&
XTBounds::st_bounds() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.XTBounds.st_bounds)
  return st_bounds_;
}

// repeated .planning_debug_msgs.DebugXTBound dst_bounds = 2;
inline int XTBounds::dst_bounds_size() const {
  return dst_bounds_.size();
}
inline void XTBounds::clear_dst_bounds() {
  dst_bounds_.Clear();
}
inline const ::planning_debug_msgs::DebugXTBound& XTBounds::dst_bounds(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.XTBounds.dst_bounds)
  return dst_bounds_.Get(index);
}
inline ::planning_debug_msgs::DebugXTBound* XTBounds::mutable_dst_bounds(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.XTBounds.dst_bounds)
  return dst_bounds_.Mutable(index);
}
inline ::planning_debug_msgs::DebugXTBound* XTBounds::add_dst_bounds() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.XTBounds.dst_bounds)
  return dst_bounds_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugXTBound >*
XTBounds::mutable_dst_bounds() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.XTBounds.dst_bounds)
  return &dst_bounds_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugXTBound >&
XTBounds::dst_bounds() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.XTBounds.dst_bounds)
  return dst_bounds_;
}

// repeated .planning_debug_msgs.DebugXTBound ddst_bounds = 3;
inline int XTBounds::ddst_bounds_size() const {
  return ddst_bounds_.size();
}
inline void XTBounds::clear_ddst_bounds() {
  ddst_bounds_.Clear();
}
inline const ::planning_debug_msgs::DebugXTBound& XTBounds::ddst_bounds(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.XTBounds.ddst_bounds)
  return ddst_bounds_.Get(index);
}
inline ::planning_debug_msgs::DebugXTBound* XTBounds::mutable_ddst_bounds(int index) {
  // @@protoc_insertion_point(field_mutable:planning_debug_msgs.XTBounds.ddst_bounds)
  return ddst_bounds_.Mutable(index);
}
inline ::planning_debug_msgs::DebugXTBound* XTBounds::add_ddst_bounds() {
  // @@protoc_insertion_point(field_add:planning_debug_msgs.XTBounds.ddst_bounds)
  return ddst_bounds_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugXTBound >*
XTBounds::mutable_ddst_bounds() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.XTBounds.ddst_bounds)
  return &ddst_bounds_;
}
inline const ::google::protobuf::RepeatedPtrField< ::planning_debug_msgs::DebugXTBound >&
XTBounds::ddst_bounds() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.XTBounds.ddst_bounds)
  return ddst_bounds_;
}

// -------------------------------------------------------------------

// DebugExtraDecision

// repeated float dist_to_ends_xg = 1;
inline int DebugExtraDecision::dist_to_ends_xg_size() const {
  return dist_to_ends_xg_.size();
}
inline void DebugExtraDecision::clear_dist_to_ends_xg() {
  dist_to_ends_xg_.Clear();
}
inline float DebugExtraDecision::dist_to_ends_xg(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugExtraDecision.dist_to_ends_xg)
  return dist_to_ends_xg_.Get(index);
}
inline void DebugExtraDecision::set_dist_to_ends_xg(int index, float value) {
  dist_to_ends_xg_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugExtraDecision.dist_to_ends_xg)
}
inline void DebugExtraDecision::add_dist_to_ends_xg(float value) {
  dist_to_ends_xg_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugExtraDecision.dist_to_ends_xg)
}
inline const ::google::protobuf::RepeatedField< float >&
DebugExtraDecision::dist_to_ends_xg() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugExtraDecision.dist_to_ends_xg)
  return dist_to_ends_xg_;
}
inline ::google::protobuf::RepeatedField< float >*
DebugExtraDecision::mutable_dist_to_ends_xg() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugExtraDecision.dist_to_ends_xg)
  return &dist_to_ends_xg_;
}

// repeated float dist_to_ends_yg = 2;
inline int DebugExtraDecision::dist_to_ends_yg_size() const {
  return dist_to_ends_yg_.size();
}
inline void DebugExtraDecision::clear_dist_to_ends_yg() {
  dist_to_ends_yg_.Clear();
}
inline float DebugExtraDecision::dist_to_ends_yg(int index) const {
  // @@protoc_insertion_point(field_get:planning_debug_msgs.DebugExtraDecision.dist_to_ends_yg)
  return dist_to_ends_yg_.Get(index);
}
inline void DebugExtraDecision::set_dist_to_ends_yg(int index, float value) {
  dist_to_ends_yg_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning_debug_msgs.DebugExtraDecision.dist_to_ends_yg)
}
inline void DebugExtraDecision::add_dist_to_ends_yg(float value) {
  dist_to_ends_yg_.Add(value);
  // @@protoc_insertion_point(field_add:planning_debug_msgs.DebugExtraDecision.dist_to_ends_yg)
}
inline const ::google::protobuf::RepeatedField< float >&
DebugExtraDecision::dist_to_ends_yg() const {
  // @@protoc_insertion_point(field_list:planning_debug_msgs.DebugExtraDecision.dist_to_ends_yg)
  return dist_to_ends_yg_;
}
inline ::google::protobuf::RepeatedField< float >*
DebugExtraDecision::mutable_dist_to_ends_yg() {
  // @@protoc_insertion_point(field_mutable_list:planning_debug_msgs.DebugExtraDecision.dist_to_ends_yg)
  return &dist_to_ends_yg_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning_debug_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_planning_5fdebug_5fmsgs_2eproto__INCLUDED
