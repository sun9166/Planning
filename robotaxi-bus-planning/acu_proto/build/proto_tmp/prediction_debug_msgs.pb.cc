// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction_debug_msgs.proto

#include "prediction_debug_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace prediction_debug_msgs {
class ExitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Exit>
      _instance;
} _Exit_default_instance_;
class InteractiveCrossWalkInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InteractiveCrossWalkInfo>
      _instance;
} _InteractiveCrossWalkInfo_default_instance_;
class InteractiveIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InteractiveId>
      _instance;
} _InteractiveId_default_instance_;
class InteractiveLaneInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InteractiveLaneInfo>
      _instance;
} _InteractiveLaneInfo_default_instance_;
class JunctionnetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Junctionnet>
      _instance;
} _Junctionnet_default_instance_;
class JunctionPropertyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JunctionProperty>
      _instance;
} _JunctionProperty_default_instance_;
class KeyJunctionObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyJunctionObject>
      _instance;
} _KeyJunctionObject_default_instance_;
class KeyObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyObject>
      _instance;
} _KeyObject_default_instance_;
class LaneInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneInfo>
      _instance;
} _LaneInfo_default_instance_;
class LanePropertyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneProperty>
      _instance;
} _LaneProperty_default_instance_;
class LanenetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lanenet>
      _instance;
} _Lanenet_default_instance_;
class ObjectFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectFeature>
      _instance;
} _ObjectFeature_default_instance_;
class SingleInteractiveCrossWalkInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SingleInteractiveCrossWalkInfo>
      _instance;
} _SingleInteractiveCrossWalkInfo_default_instance_;
class SingleInteractiveLaneInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SingleInteractiveLaneInfo>
      _instance;
} _SingleInteractiveLaneInfo_default_instance_;
class TrafficLightFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightFeature>
      _instance;
} _TrafficLightFeature_default_instance_;
class SignalFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignalFeature>
      _instance;
} _SignalFeature_default_instance_;
class ObjectsFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectsFeature>
      _instance;
} _ObjectsFeature_default_instance_;
}  // namespace prediction_debug_msgs
namespace protobuf_prediction_5fdebug_5fmsgs_2eproto {
void InitDefaultsExitImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::prediction_debug_msgs::_Exit_default_instance_;
    new (ptr) ::prediction_debug_msgs::Exit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction_debug_msgs::Exit::InitAsDefaultInstance();
}

void InitDefaultsExit() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsExitImpl);
}

void InitDefaultsInteractiveCrossWalkInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::prediction_debug_msgs::_InteractiveCrossWalkInfo_default_instance_;
    new (ptr) ::prediction_debug_msgs::InteractiveCrossWalkInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction_debug_msgs::InteractiveCrossWalkInfo::InitAsDefaultInstance();
}

void InitDefaultsInteractiveCrossWalkInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInteractiveCrossWalkInfoImpl);
}

void InitDefaultsInteractiveIdImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::prediction_debug_msgs::_InteractiveId_default_instance_;
    new (ptr) ::prediction_debug_msgs::InteractiveId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction_debug_msgs::InteractiveId::InitAsDefaultInstance();
}

void InitDefaultsInteractiveId() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInteractiveIdImpl);
}

void InitDefaultsInteractiveLaneInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::prediction_debug_msgs::_InteractiveLaneInfo_default_instance_;
    new (ptr) ::prediction_debug_msgs::InteractiveLaneInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction_debug_msgs::InteractiveLaneInfo::InitAsDefaultInstance();
}

void InitDefaultsInteractiveLaneInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsInteractiveLaneInfoImpl);
}

void InitDefaultsJunctionnetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::prediction_debug_msgs::_Junctionnet_default_instance_;
    new (ptr) ::prediction_debug_msgs::Junctionnet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction_debug_msgs::Junctionnet::InitAsDefaultInstance();
}

void InitDefaultsJunctionnet() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsJunctionnetImpl);
}

void InitDefaultsJunctionPropertyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::prediction_debug_msgs::_JunctionProperty_default_instance_;
    new (ptr) ::prediction_debug_msgs::JunctionProperty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction_debug_msgs::JunctionProperty::InitAsDefaultInstance();
}

void InitDefaultsJunctionProperty() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsJunctionPropertyImpl);
}

void InitDefaultsKeyJunctionObjectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::prediction_debug_msgs::_KeyJunctionObject_default_instance_;
    new (ptr) ::prediction_debug_msgs::KeyJunctionObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction_debug_msgs::KeyJunctionObject::InitAsDefaultInstance();
}

void InitDefaultsKeyJunctionObject() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsKeyJunctionObjectImpl);
}

void InitDefaultsKeyObjectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::prediction_debug_msgs::_KeyObject_default_instance_;
    new (ptr) ::prediction_debug_msgs::KeyObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction_debug_msgs::KeyObject::InitAsDefaultInstance();
}

void InitDefaultsKeyObject() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsKeyObjectImpl);
}

void InitDefaultsLaneInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::prediction_debug_msgs::_LaneInfo_default_instance_;
    new (ptr) ::prediction_debug_msgs::LaneInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction_debug_msgs::LaneInfo::InitAsDefaultInstance();
}

void InitDefaultsLaneInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLaneInfoImpl);
}

void InitDefaultsLanePropertyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::prediction_debug_msgs::_LaneProperty_default_instance_;
    new (ptr) ::prediction_debug_msgs::LaneProperty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction_debug_msgs::LaneProperty::InitAsDefaultInstance();
}

void InitDefaultsLaneProperty() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLanePropertyImpl);
}

void InitDefaultsLanenetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsLaneProperty();
  protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsKeyObject();
  {
    void* ptr = &::prediction_debug_msgs::_Lanenet_default_instance_;
    new (ptr) ::prediction_debug_msgs::Lanenet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction_debug_msgs::Lanenet::InitAsDefaultInstance();
}

void InitDefaultsLanenet() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLanenetImpl);
}

void InitDefaultsObjectFeatureImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsExit();
  {
    void* ptr = &::prediction_debug_msgs::_ObjectFeature_default_instance_;
    new (ptr) ::prediction_debug_msgs::ObjectFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction_debug_msgs::ObjectFeature::InitAsDefaultInstance();
}

void InitDefaultsObjectFeature() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObjectFeatureImpl);
}

void InitDefaultsSingleInteractiveCrossWalkInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsInteractiveCrossWalkInfo();
  {
    void* ptr = &::prediction_debug_msgs::_SingleInteractiveCrossWalkInfo_default_instance_;
    new (ptr) ::prediction_debug_msgs::SingleInteractiveCrossWalkInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction_debug_msgs::SingleInteractiveCrossWalkInfo::InitAsDefaultInstance();
}

void InitDefaultsSingleInteractiveCrossWalkInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSingleInteractiveCrossWalkInfoImpl);
}

void InitDefaultsSingleInteractiveLaneInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsInteractiveLaneInfo();
  {
    void* ptr = &::prediction_debug_msgs::_SingleInteractiveLaneInfo_default_instance_;
    new (ptr) ::prediction_debug_msgs::SingleInteractiveLaneInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction_debug_msgs::SingleInteractiveLaneInfo::InitAsDefaultInstance();
}

void InitDefaultsSingleInteractiveLaneInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSingleInteractiveLaneInfoImpl);
}

void InitDefaultsTrafficLightFeatureImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::prediction_debug_msgs::_TrafficLightFeature_default_instance_;
    new (ptr) ::prediction_debug_msgs::TrafficLightFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction_debug_msgs::TrafficLightFeature::InitAsDefaultInstance();
}

void InitDefaultsTrafficLightFeature() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrafficLightFeatureImpl);
}

void InitDefaultsSignalFeatureImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsTrafficLightFeature();
  protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsSingleInteractiveLaneInfo();
  protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsSingleInteractiveCrossWalkInfo();
  {
    void* ptr = &::prediction_debug_msgs::_SignalFeature_default_instance_;
    new (ptr) ::prediction_debug_msgs::SignalFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction_debug_msgs::SignalFeature::InitAsDefaultInstance();
}

void InitDefaultsSignalFeature() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSignalFeatureImpl);
}

void InitDefaultsObjectsFeatureImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsObjectFeature();
  protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsSignalFeature();
  {
    void* ptr = &::prediction_debug_msgs::_ObjectsFeature_default_instance_;
    new (ptr) ::prediction_debug_msgs::ObjectsFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::prediction_debug_msgs::ObjectsFeature::InitAsDefaultInstance();
}

void InitDefaultsObjectsFeature() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObjectsFeatureImpl);
}

::google::protobuf::Metadata file_level_metadata[17];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::Exit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::Exit, exit_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::Exit, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::Exit, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::Exit, prob_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::InteractiveCrossWalkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::InteractiveCrossWalkInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::InteractiveCrossWalkInfo, start_pos_xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::InteractiveCrossWalkInfo, start_pos_yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::InteractiveCrossWalkInfo, end_pos_xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::InteractiveCrossWalkInfo, end_pos_yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::InteractiveCrossWalkInfo, has_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::InteractiveCrossWalkInfo, has_pos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::InteractiveId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::InteractiveId, ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::InteractiveLaneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::InteractiveLaneInfo, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::InteractiveLaneInfo, cross_pos_xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::InteractiveLaneInfo, cross_pos_yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::InteractiveLaneInfo, start_pos_xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::InteractiveLaneInfo, start_pos_yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::InteractiveLaneInfo, cross_s_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::Junctionnet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::Junctionnet, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::Junctionnet, cross_pos_xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::Junctionnet, cross_pos_yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::Junctionnet, start_pos_xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::Junctionnet, start_pos_yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::Junctionnet, cross_s_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::JunctionProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::JunctionProperty, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::JunctionProperty, is_exit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::JunctionProperty, is_overlap_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::KeyJunctionObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::KeyJunctionObject, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::KeyJunctionObject, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::KeyJunctionObject, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::KeyJunctionObject, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::KeyJunctionObject, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::KeyJunctionObject, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::KeyJunctionObject, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::KeyJunctionObject, consider_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::KeyObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::KeyObject, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::KeyObject, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::KeyObject, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::KeyObject, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::KeyObject, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::KeyObject, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::KeyObject, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::KeyObject, need_consider_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneInfo, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneInfo, pos_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneInfo, pos_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneInfo, heading_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneInfo, dist_to_left_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneInfo, dist_to_right_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneInfo, is_on_lane_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneProperty, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneProperty, total_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneProperty, start_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneProperty, end_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneProperty, forward_history_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneProperty, backward_history_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneProperty, forward_obs_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneProperty, backward_obs_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneProperty, is_lane_checked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneProperty, is_object_checked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneProperty, obs_start_to_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::LaneProperty, obs_end_to_start_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::Lanenet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::Lanenet, lane_net_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::Lanenet, objects_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, final_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, is_static_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, is_illegal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, is_ultra_static_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, current_lane_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, nearby_lane_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, enter_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, exits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, off_lane_exit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, evaluator_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, sub_evaluator_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, predictor_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectFeature, need_exception_handling_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::SingleInteractiveCrossWalkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::SingleInteractiveCrossWalkInfo, light_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::SingleInteractiveCrossWalkInfo, crosswalks_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::SingleInteractiveLaneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::SingleInteractiveLaneInfo, light_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::SingleInteractiveLaneInfo, cross_lanes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::TrafficLightFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::TrafficLightFeature, light_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::TrafficLightFeature, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::TrafficLightFeature, lane_turn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::TrafficLightFeature, signal_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::TrafficLightFeature, last_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::TrafficLightFeature, current_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::TrafficLightFeature, detect_keep_frames_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::TrafficLightFeature, infer_keep_frames_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::TrafficLightFeature, is_seen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::TrafficLightFeature, is_passable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::TrafficLightFeature, associated_lane_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::TrafficLightFeature, start_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::TrafficLightFeature, end_heading_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::SignalFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::SignalFeature, candidate_lights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::SignalFeature, assistant_lights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::SignalFeature, candidate_cross_lanes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::SignalFeature, candidate_crosswalks_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectsFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectsFeature, self_pos_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectsFeature, objects_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectsFeature, signal_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectsFeature, cost_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::prediction_debug_msgs::ObjectsFeature, err_msg_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::prediction_debug_msgs::Exit)},
  { 9, -1, sizeof(::prediction_debug_msgs::InteractiveCrossWalkInfo)},
  { 21, -1, sizeof(::prediction_debug_msgs::InteractiveId)},
  { 27, -1, sizeof(::prediction_debug_msgs::InteractiveLaneInfo)},
  { 38, -1, sizeof(::prediction_debug_msgs::Junctionnet)},
  { 49, -1, sizeof(::prediction_debug_msgs::JunctionProperty)},
  { 57, -1, sizeof(::prediction_debug_msgs::KeyJunctionObject)},
  { 70, -1, sizeof(::prediction_debug_msgs::KeyObject)},
  { 83, -1, sizeof(::prediction_debug_msgs::LaneInfo)},
  { 95, -1, sizeof(::prediction_debug_msgs::LaneProperty)},
  { 112, -1, sizeof(::prediction_debug_msgs::Lanenet)},
  { 119, -1, sizeof(::prediction_debug_msgs::ObjectFeature)},
  { 149, -1, sizeof(::prediction_debug_msgs::SingleInteractiveCrossWalkInfo)},
  { 156, -1, sizeof(::prediction_debug_msgs::SingleInteractiveLaneInfo)},
  { 163, -1, sizeof(::prediction_debug_msgs::TrafficLightFeature)},
  { 181, -1, sizeof(::prediction_debug_msgs::SignalFeature)},
  { 190, -1, sizeof(::prediction_debug_msgs::ObjectsFeature)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction_debug_msgs::_Exit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction_debug_msgs::_InteractiveCrossWalkInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction_debug_msgs::_InteractiveId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction_debug_msgs::_InteractiveLaneInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction_debug_msgs::_Junctionnet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction_debug_msgs::_JunctionProperty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction_debug_msgs::_KeyJunctionObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction_debug_msgs::_KeyObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction_debug_msgs::_LaneInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction_debug_msgs::_LaneProperty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction_debug_msgs::_Lanenet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction_debug_msgs::_ObjectFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction_debug_msgs::_SingleInteractiveCrossWalkInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction_debug_msgs::_SingleInteractiveLaneInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction_debug_msgs::_TrafficLightFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction_debug_msgs::_SignalFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::prediction_debug_msgs::_ObjectsFeature_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "prediction_debug_msgs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033prediction_debug_msgs.proto\022\025predictio"
      "n_debug_msgs\"@\n\004Exit\022\024\n\014exit_lane_id\030\001 \001"
      "(\t\022\t\n\001x\030\002 \001(\001\022\t\n\001y\030\003 \001(\001\022\014\n\004prob\030\004 \001(\002\"\233"
      "\001\n\030InteractiveCrossWalkInfo\022\n\n\002id\030\001 \001(\t\022"
      "\024\n\014start_pos_xg\030\002 \001(\001\022\024\n\014start_pos_yg\030\003 "
      "\001(\001\022\022\n\nend_pos_xg\030\004 \001(\001\022\022\n\nend_pos_yg\030\005 "
      "\001(\001\022\016\n\006has_id\030\006 \001(\010\022\017\n\007has_pos\030\007 \001(\010\"\034\n\r"
      "InteractiveId\022\013\n\003ids\030\001 \003(\t\"\217\001\n\023Interacti"
      "veLaneInfo\022\017\n\007lane_id\030\001 \001(\t\022\024\n\014cross_pos"
      "_xg\030\002 \001(\001\022\024\n\014cross_pos_yg\030\003 \001(\001\022\024\n\014start"
      "_pos_xg\030\004 \001(\001\022\024\n\014start_pos_yg\030\005 \001(\001\022\017\n\007c"
      "ross_s\030\006 \001(\001\"\207\001\n\013Junctionnet\022\017\n\007lane_id\030"
      "\001 \001(\t\022\024\n\014cross_pos_xg\030\002 \001(\001\022\024\n\014cross_pos"
      "_yg\030\003 \001(\001\022\024\n\014start_pos_xg\030\004 \001(\001\022\024\n\014start"
      "_pos_yg\030\005 \001(\001\022\017\n\007cross_s\030\006 \001(\001\"H\n\020Juncti"
      "onProperty\022\017\n\007lane_id\030\001 \001(\t\022\017\n\007is_exit\030\002"
      " \001(\005\022\022\n\nis_overlap\030\003 \001(\005\"\212\001\n\021KeyJunction"
      "Object\022\n\n\002id\030\001 \001(\005\022\t\n\001x\030\002 \001(\001\022\t\n\001y\030\003 \001(\001"
      "\022\r\n\005theta\030\004 \001(\002\022\016\n\006length\030\005 \001(\002\022\r\n\005width"
      "\030\006 \001(\002\022\016\n\006height\030\007 \001(\002\022\025\n\rconsider_type\030"
      "\010 \001(\005\"\202\001\n\tKeyObject\022\n\n\002id\030\001 \001(\005\022\t\n\001x\030\002 \001"
      "(\001\022\t\n\001y\030\003 \001(\001\022\r\n\005theta\030\004 \001(\002\022\016\n\006length\030\005"
      " \001(\002\022\r\n\005width\030\006 \001(\002\022\016\n\006height\030\007 \001(\002\022\025\n\rn"
      "eed_consider\030\010 \001(\010\"\242\001\n\010LaneInfo\022\017\n\007lane_"
      "id\030\001 \001(\t\022\r\n\005pos_s\030\002 \001(\001\022\r\n\005pos_l\030\003 \001(\001\022\024"
      "\n\014heading_diff\030\004 \001(\001\022\035\n\025dist_to_left_bou"
      "ndary\030\005 \001(\001\022\036\n\026dist_to_right_boundary\030\006 "
      "\001(\001\022\022\n\nis_on_lane\030\007 \001(\010\"\253\002\n\014LaneProperty"
      "\022\017\n\007lane_id\030\001 \001(\t\022\024\n\014total_length\030\002 \001(\002\022"
      "\017\n\007start_s\030\003 \001(\002\022\r\n\005end_s\030\004 \001(\002\022\033\n\023forwa"
      "rd_history_num\030\005 \001(\005\022\034\n\024backward_history"
      "_num\030\006 \001(\005\022\027\n\017forward_obs_num\030\007 \001(\005\022\030\n\020b"
      "ackward_obs_num\030\010 \001(\005\022\027\n\017is_lane_checked"
      "\030\t \001(\010\022\031\n\021is_object_checked\030\n \001(\010\022\030\n\020obs"
      "_start_to_end\030\013 \003(\005\022\030\n\020obs_end_to_start\030"
      "\014 \003(\005\"s\n\007Lanenet\0225\n\010lane_net\030\001 \003(\0132#.pre"
      "diction_debug_msgs.LaneProperty\0221\n\007objec"
      "ts\030\002 \003(\0132 .prediction_debug_msgs.KeyObje"
      "ct\"\243\004\n\rObjectFeature\022\n\n\002id\030\001 \001(\r\022\014\n\004type"
      "\030\002 \001(\005\022\t\n\001x\030\003 \001(\001\022\t\n\001y\030\004 \001(\001\022\t\n\001z\030\005 \001(\001\022"
      "\016\n\006length\030\006 \001(\001\022\r\n\005width\030\007 \001(\001\022\016\n\006height"
      "\030\010 \001(\001\022\r\n\005speed\030\t \001(\001\022\013\n\003acc\030\n \001(\001\022\025\n\rfi"
      "nal_heading\030\013 \001(\001\022\021\n\tis_static\030\014 \001(\010\022\022\n\n"
      "is_illegal\030\r \001(\010\022\027\n\017is_ultra_static\030\016 \001("
      "\005\022\020\n\010priority\030\017 \001(\005\022\017\n\007lane_id\030\020 \001(\t\022\030\n\020"
      "current_lane_ids\030\021 \003(\t\022\027\n\017nearby_lane_id"
      "s\030\022 \003(\t\022\022\n\nenter_lane\030\023 \001(\t\022*\n\005exits\030\024 \003"
      "(\0132\033.prediction_debug_msgs.Exit\0222\n\roff_l"
      "ane_exit\030\025 \001(\0132\033.prediction_debug_msgs.E"
      "xit\022\026\n\016evaluator_type\030\026 \001(\005\022\032\n\022sub_evalu"
      "ator_type\030\027 \001(\005\022\026\n\016predictor_type\030\030 \001(\005\022"
      "\037\n\027need_exception_handling\030\031 \001(\010\"w\n\036Sing"
      "leInteractiveCrossWalkInfo\022\020\n\010light_id\030\001"
      " \001(\t\022C\n\ncrosswalks\030\002 \003(\0132/.prediction_de"
      "bug_msgs.InteractiveCrossWalkInfo\"n\n\031Sin"
      "gleInteractiveLaneInfo\022\020\n\010light_id\030\001 \001(\t"
      "\022\?\n\013cross_lanes\030\002 \003(\0132*.prediction_debug"
      "_msgs.InteractiveLaneInfo\"\261\002\n\023TrafficLig"
      "htFeature\022\020\n\010light_id\030\001 \001(\t\022\017\n\007lane_id\030\002"
      " \001(\t\022\021\n\tlane_turn\030\003 \001(\005\022\023\n\013signal_type\030\004"
      " \001(\005\022\022\n\nlast_color\030\005 \001(\005\022\025\n\rcurrent_colo"
      "r\030\006 \001(\005\022\032\n\022detect_keep_frames\030\007 \001(\005\022\031\n\021i"
      "nfer_keep_frames\030\010 \001(\005\022\017\n\007is_seen\030\t \001(\010\022"
      "\023\n\013is_passable\030\n \001(\010\022\033\n\023associated_lane_"
      "ids\030\013 \003(\t\022\025\n\rstart_heading\030\014 \001(\001\022\023\n\013end_"
      "heading\030\r \001(\001\"\301\002\n\rSignalFeature\022D\n\020candi"
      "date_lights\030\001 \003(\0132*.prediction_debug_msg"
      "s.TrafficLightFeature\022D\n\020assistant_light"
      "s\030\002 \003(\0132*.prediction_debug_msgs.TrafficL"
      "ightFeature\022O\n\025candidate_cross_lanes\030\003 \003"
      "(\01320.prediction_debug_msgs.SingleInterac"
      "tiveLaneInfo\022S\n\024candidate_crosswalks\030\004 \003"
      "(\01325.prediction_debug_msgs.SingleInterac"
      "tiveCrossWalkInfo\"\361\001\n\016ObjectsFeature\022>\n\020"
      "self_pos_feature\030\001 \001(\0132$.prediction_debu"
      "g_msgs.ObjectFeature\022=\n\017objects_feature\030"
      "\002 \003(\0132$.prediction_debug_msgs.ObjectFeat"
      "ure\022<\n\016signal_feature\030\003 \001(\0132$.prediction"
      "_debug_msgs.SignalFeature\022\021\n\tcost_time\030\004"
      " \001(\001\022\017\n\007err_msg\030\005 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3189);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "prediction_debug_msgs.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_prediction_5fdebug_5fmsgs_2eproto
namespace prediction_debug_msgs {

// ===================================================================

void Exit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Exit::kExitLaneIdFieldNumber;
const int Exit::kXFieldNumber;
const int Exit::kYFieldNumber;
const int Exit::kProbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Exit::Exit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsExit();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction_debug_msgs.Exit)
}
Exit::Exit(const Exit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exit_lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exit_lane_id().size() > 0) {
    exit_lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exit_lane_id_);
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&prob_) -
    reinterpret_cast<char*>(&x_)) + sizeof(prob_));
  // @@protoc_insertion_point(copy_constructor:prediction_debug_msgs.Exit)
}

void Exit::SharedCtor() {
  exit_lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prob_) -
      reinterpret_cast<char*>(&x_)) + sizeof(prob_));
  _cached_size_ = 0;
}

Exit::~Exit() {
  // @@protoc_insertion_point(destructor:prediction_debug_msgs.Exit)
  SharedDtor();
}

void Exit::SharedDtor() {
  exit_lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Exit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Exit::descriptor() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Exit& Exit::default_instance() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsExit();
  return *internal_default_instance();
}

Exit* Exit::New(::google::protobuf::Arena* arena) const {
  Exit* n = new Exit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Exit::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction_debug_msgs.Exit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exit_lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prob_) -
      reinterpret_cast<char*>(&x_)) + sizeof(prob_));
  _internal_metadata_.Clear();
}

bool Exit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction_debug_msgs.Exit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string exit_lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exit_lane_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exit_lane_id().data(), static_cast<int>(this->exit_lane_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prediction_debug_msgs.Exit.exit_lane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float prob = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction_debug_msgs.Exit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction_debug_msgs.Exit)
  return false;
#undef DO_
}

void Exit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction_debug_msgs.Exit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string exit_lane_id = 1;
  if (this->exit_lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exit_lane_id().data(), static_cast<int>(this->exit_lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.Exit.exit_lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->exit_lane_id(), output);
  }

  // double x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }

  // double y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }

  // float prob = 4;
  if (this->prob() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->prob(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction_debug_msgs.Exit)
}

::google::protobuf::uint8* Exit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prediction_debug_msgs.Exit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string exit_lane_id = 1;
  if (this->exit_lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exit_lane_id().data(), static_cast<int>(this->exit_lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.Exit.exit_lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->exit_lane_id(), target);
  }

  // double x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }

  // double y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }

  // float prob = 4;
  if (this->prob() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->prob(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction_debug_msgs.Exit)
  return target;
}

size_t Exit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction_debug_msgs.Exit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string exit_lane_id = 1;
  if (this->exit_lane_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exit_lane_id());
  }

  // double x = 2;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 3;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // float prob = 4;
  if (this->prob() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Exit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction_debug_msgs.Exit)
  GOOGLE_DCHECK_NE(&from, this);
  const Exit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Exit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction_debug_msgs.Exit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction_debug_msgs.Exit)
    MergeFrom(*source);
  }
}

void Exit::MergeFrom(const Exit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction_debug_msgs.Exit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exit_lane_id().size() > 0) {

    exit_lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exit_lane_id_);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.prob() != 0) {
    set_prob(from.prob());
  }
}

void Exit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction_debug_msgs.Exit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Exit::CopyFrom(const Exit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction_debug_msgs.Exit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Exit::IsInitialized() const {
  return true;
}

void Exit::Swap(Exit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Exit::InternalSwap(Exit* other) {
  using std::swap;
  exit_lane_id_.Swap(&other->exit_lane_id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(prob_, other->prob_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Exit::GetMetadata() const {
  protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InteractiveCrossWalkInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InteractiveCrossWalkInfo::kIdFieldNumber;
const int InteractiveCrossWalkInfo::kStartPosXgFieldNumber;
const int InteractiveCrossWalkInfo::kStartPosYgFieldNumber;
const int InteractiveCrossWalkInfo::kEndPosXgFieldNumber;
const int InteractiveCrossWalkInfo::kEndPosYgFieldNumber;
const int InteractiveCrossWalkInfo::kHasIdFieldNumber;
const int InteractiveCrossWalkInfo::kHasPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InteractiveCrossWalkInfo::InteractiveCrossWalkInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsInteractiveCrossWalkInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction_debug_msgs.InteractiveCrossWalkInfo)
}
InteractiveCrossWalkInfo::InteractiveCrossWalkInfo(const InteractiveCrossWalkInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&start_pos_xg_, &from.start_pos_xg_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_pos_) -
    reinterpret_cast<char*>(&start_pos_xg_)) + sizeof(has_pos_));
  // @@protoc_insertion_point(copy_constructor:prediction_debug_msgs.InteractiveCrossWalkInfo)
}

void InteractiveCrossWalkInfo::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_pos_xg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_pos_) -
      reinterpret_cast<char*>(&start_pos_xg_)) + sizeof(has_pos_));
  _cached_size_ = 0;
}

InteractiveCrossWalkInfo::~InteractiveCrossWalkInfo() {
  // @@protoc_insertion_point(destructor:prediction_debug_msgs.InteractiveCrossWalkInfo)
  SharedDtor();
}

void InteractiveCrossWalkInfo::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InteractiveCrossWalkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InteractiveCrossWalkInfo::descriptor() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InteractiveCrossWalkInfo& InteractiveCrossWalkInfo::default_instance() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsInteractiveCrossWalkInfo();
  return *internal_default_instance();
}

InteractiveCrossWalkInfo* InteractiveCrossWalkInfo::New(::google::protobuf::Arena* arena) const {
  InteractiveCrossWalkInfo* n = new InteractiveCrossWalkInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InteractiveCrossWalkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction_debug_msgs.InteractiveCrossWalkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_pos_xg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_pos_) -
      reinterpret_cast<char*>(&start_pos_xg_)) + sizeof(has_pos_));
  _internal_metadata_.Clear();
}

bool InteractiveCrossWalkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction_debug_msgs.InteractiveCrossWalkInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prediction_debug_msgs.InteractiveCrossWalkInfo.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_pos_xg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_pos_xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_pos_yg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_pos_yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double end_pos_xg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_pos_xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double end_pos_yg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_pos_yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_pos = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction_debug_msgs.InteractiveCrossWalkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction_debug_msgs.InteractiveCrossWalkInfo)
  return false;
#undef DO_
}

void InteractiveCrossWalkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction_debug_msgs.InteractiveCrossWalkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.InteractiveCrossWalkInfo.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // double start_pos_xg = 2;
  if (this->start_pos_xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->start_pos_xg(), output);
  }

  // double start_pos_yg = 3;
  if (this->start_pos_yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->start_pos_yg(), output);
  }

  // double end_pos_xg = 4;
  if (this->end_pos_xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->end_pos_xg(), output);
  }

  // double end_pos_yg = 5;
  if (this->end_pos_yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->end_pos_yg(), output);
  }

  // bool has_id = 6;
  if (this->has_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->has_id(), output);
  }

  // bool has_pos = 7;
  if (this->has_pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_pos(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction_debug_msgs.InteractiveCrossWalkInfo)
}

::google::protobuf::uint8* InteractiveCrossWalkInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prediction_debug_msgs.InteractiveCrossWalkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.InteractiveCrossWalkInfo.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // double start_pos_xg = 2;
  if (this->start_pos_xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->start_pos_xg(), target);
  }

  // double start_pos_yg = 3;
  if (this->start_pos_yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->start_pos_yg(), target);
  }

  // double end_pos_xg = 4;
  if (this->end_pos_xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->end_pos_xg(), target);
  }

  // double end_pos_yg = 5;
  if (this->end_pos_yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->end_pos_yg(), target);
  }

  // bool has_id = 6;
  if (this->has_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->has_id(), target);
  }

  // bool has_pos = 7;
  if (this->has_pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_pos(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction_debug_msgs.InteractiveCrossWalkInfo)
  return target;
}

size_t InteractiveCrossWalkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction_debug_msgs.InteractiveCrossWalkInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // double start_pos_xg = 2;
  if (this->start_pos_xg() != 0) {
    total_size += 1 + 8;
  }

  // double start_pos_yg = 3;
  if (this->start_pos_yg() != 0) {
    total_size += 1 + 8;
  }

  // double end_pos_xg = 4;
  if (this->end_pos_xg() != 0) {
    total_size += 1 + 8;
  }

  // double end_pos_yg = 5;
  if (this->end_pos_yg() != 0) {
    total_size += 1 + 8;
  }

  // bool has_id = 6;
  if (this->has_id() != 0) {
    total_size += 1 + 1;
  }

  // bool has_pos = 7;
  if (this->has_pos() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InteractiveCrossWalkInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction_debug_msgs.InteractiveCrossWalkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InteractiveCrossWalkInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InteractiveCrossWalkInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction_debug_msgs.InteractiveCrossWalkInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction_debug_msgs.InteractiveCrossWalkInfo)
    MergeFrom(*source);
  }
}

void InteractiveCrossWalkInfo::MergeFrom(const InteractiveCrossWalkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction_debug_msgs.InteractiveCrossWalkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.start_pos_xg() != 0) {
    set_start_pos_xg(from.start_pos_xg());
  }
  if (from.start_pos_yg() != 0) {
    set_start_pos_yg(from.start_pos_yg());
  }
  if (from.end_pos_xg() != 0) {
    set_end_pos_xg(from.end_pos_xg());
  }
  if (from.end_pos_yg() != 0) {
    set_end_pos_yg(from.end_pos_yg());
  }
  if (from.has_id() != 0) {
    set_has_id(from.has_id());
  }
  if (from.has_pos() != 0) {
    set_has_pos(from.has_pos());
  }
}

void InteractiveCrossWalkInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction_debug_msgs.InteractiveCrossWalkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InteractiveCrossWalkInfo::CopyFrom(const InteractiveCrossWalkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction_debug_msgs.InteractiveCrossWalkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InteractiveCrossWalkInfo::IsInitialized() const {
  return true;
}

void InteractiveCrossWalkInfo::Swap(InteractiveCrossWalkInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InteractiveCrossWalkInfo::InternalSwap(InteractiveCrossWalkInfo* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(start_pos_xg_, other->start_pos_xg_);
  swap(start_pos_yg_, other->start_pos_yg_);
  swap(end_pos_xg_, other->end_pos_xg_);
  swap(end_pos_yg_, other->end_pos_yg_);
  swap(has_id_, other->has_id_);
  swap(has_pos_, other->has_pos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InteractiveCrossWalkInfo::GetMetadata() const {
  protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InteractiveId::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InteractiveId::kIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InteractiveId::InteractiveId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsInteractiveId();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction_debug_msgs.InteractiveId)
}
InteractiveId::InteractiveId(const InteractiveId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ids_(from.ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:prediction_debug_msgs.InteractiveId)
}

void InteractiveId::SharedCtor() {
  _cached_size_ = 0;
}

InteractiveId::~InteractiveId() {
  // @@protoc_insertion_point(destructor:prediction_debug_msgs.InteractiveId)
  SharedDtor();
}

void InteractiveId::SharedDtor() {
}

void InteractiveId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InteractiveId::descriptor() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InteractiveId& InteractiveId::default_instance() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsInteractiveId();
  return *internal_default_instance();
}

InteractiveId* InteractiveId::New(::google::protobuf::Arena* arena) const {
  InteractiveId* n = new InteractiveId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InteractiveId::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction_debug_msgs.InteractiveId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _internal_metadata_.Clear();
}

bool InteractiveId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction_debug_msgs.InteractiveId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ids(this->ids_size() - 1).data(),
            static_cast<int>(this->ids(this->ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prediction_debug_msgs.InteractiveId.ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction_debug_msgs.InteractiveId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction_debug_msgs.InteractiveId)
  return false;
#undef DO_
}

void InteractiveId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction_debug_msgs.InteractiveId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ids(i).data(), static_cast<int>(this->ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.InteractiveId.ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction_debug_msgs.InteractiveId)
}

::google::protobuf::uint8* InteractiveId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prediction_debug_msgs.InteractiveId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ids(i).data(), static_cast<int>(this->ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.InteractiveId.ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ids(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction_debug_msgs.InteractiveId)
  return target;
}

size_t InteractiveId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction_debug_msgs.InteractiveId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ids_size());
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InteractiveId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction_debug_msgs.InteractiveId)
  GOOGLE_DCHECK_NE(&from, this);
  const InteractiveId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InteractiveId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction_debug_msgs.InteractiveId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction_debug_msgs.InteractiveId)
    MergeFrom(*source);
  }
}

void InteractiveId::MergeFrom(const InteractiveId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction_debug_msgs.InteractiveId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void InteractiveId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction_debug_msgs.InteractiveId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InteractiveId::CopyFrom(const InteractiveId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction_debug_msgs.InteractiveId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InteractiveId::IsInitialized() const {
  return true;
}

void InteractiveId::Swap(InteractiveId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InteractiveId::InternalSwap(InteractiveId* other) {
  using std::swap;
  ids_.InternalSwap(&other->ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InteractiveId::GetMetadata() const {
  protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InteractiveLaneInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InteractiveLaneInfo::kLaneIdFieldNumber;
const int InteractiveLaneInfo::kCrossPosXgFieldNumber;
const int InteractiveLaneInfo::kCrossPosYgFieldNumber;
const int InteractiveLaneInfo::kStartPosXgFieldNumber;
const int InteractiveLaneInfo::kStartPosYgFieldNumber;
const int InteractiveLaneInfo::kCrossSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InteractiveLaneInfo::InteractiveLaneInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsInteractiveLaneInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction_debug_msgs.InteractiveLaneInfo)
}
InteractiveLaneInfo::InteractiveLaneInfo(const InteractiveLaneInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lane_id().size() > 0) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&cross_pos_xg_, &from.cross_pos_xg_,
    static_cast<size_t>(reinterpret_cast<char*>(&cross_s_) -
    reinterpret_cast<char*>(&cross_pos_xg_)) + sizeof(cross_s_));
  // @@protoc_insertion_point(copy_constructor:prediction_debug_msgs.InteractiveLaneInfo)
}

void InteractiveLaneInfo::SharedCtor() {
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cross_pos_xg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cross_s_) -
      reinterpret_cast<char*>(&cross_pos_xg_)) + sizeof(cross_s_));
  _cached_size_ = 0;
}

InteractiveLaneInfo::~InteractiveLaneInfo() {
  // @@protoc_insertion_point(destructor:prediction_debug_msgs.InteractiveLaneInfo)
  SharedDtor();
}

void InteractiveLaneInfo::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InteractiveLaneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InteractiveLaneInfo::descriptor() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InteractiveLaneInfo& InteractiveLaneInfo::default_instance() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsInteractiveLaneInfo();
  return *internal_default_instance();
}

InteractiveLaneInfo* InteractiveLaneInfo::New(::google::protobuf::Arena* arena) const {
  InteractiveLaneInfo* n = new InteractiveLaneInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InteractiveLaneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction_debug_msgs.InteractiveLaneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cross_pos_xg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cross_s_) -
      reinterpret_cast<char*>(&cross_pos_xg_)) + sizeof(cross_s_));
  _internal_metadata_.Clear();
}

bool InteractiveLaneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction_debug_msgs.InteractiveLaneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prediction_debug_msgs.InteractiveLaneInfo.lane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cross_pos_xg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cross_pos_xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cross_pos_yg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cross_pos_yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_pos_xg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_pos_xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_pos_yg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_pos_yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cross_s = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cross_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction_debug_msgs.InteractiveLaneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction_debug_msgs.InteractiveLaneInfo)
  return false;
#undef DO_
}

void InteractiveLaneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction_debug_msgs.InteractiveLaneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lane_id = 1;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.InteractiveLaneInfo.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lane_id(), output);
  }

  // double cross_pos_xg = 2;
  if (this->cross_pos_xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cross_pos_xg(), output);
  }

  // double cross_pos_yg = 3;
  if (this->cross_pos_yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cross_pos_yg(), output);
  }

  // double start_pos_xg = 4;
  if (this->start_pos_xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->start_pos_xg(), output);
  }

  // double start_pos_yg = 5;
  if (this->start_pos_yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->start_pos_yg(), output);
  }

  // double cross_s = 6;
  if (this->cross_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->cross_s(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction_debug_msgs.InteractiveLaneInfo)
}

::google::protobuf::uint8* InteractiveLaneInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prediction_debug_msgs.InteractiveLaneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lane_id = 1;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.InteractiveLaneInfo.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lane_id(), target);
  }

  // double cross_pos_xg = 2;
  if (this->cross_pos_xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cross_pos_xg(), target);
  }

  // double cross_pos_yg = 3;
  if (this->cross_pos_yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cross_pos_yg(), target);
  }

  // double start_pos_xg = 4;
  if (this->start_pos_xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->start_pos_xg(), target);
  }

  // double start_pos_yg = 5;
  if (this->start_pos_yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->start_pos_yg(), target);
  }

  // double cross_s = 6;
  if (this->cross_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->cross_s(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction_debug_msgs.InteractiveLaneInfo)
  return target;
}

size_t InteractiveLaneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction_debug_msgs.InteractiveLaneInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string lane_id = 1;
  if (this->lane_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lane_id());
  }

  // double cross_pos_xg = 2;
  if (this->cross_pos_xg() != 0) {
    total_size += 1 + 8;
  }

  // double cross_pos_yg = 3;
  if (this->cross_pos_yg() != 0) {
    total_size += 1 + 8;
  }

  // double start_pos_xg = 4;
  if (this->start_pos_xg() != 0) {
    total_size += 1 + 8;
  }

  // double start_pos_yg = 5;
  if (this->start_pos_yg() != 0) {
    total_size += 1 + 8;
  }

  // double cross_s = 6;
  if (this->cross_s() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InteractiveLaneInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction_debug_msgs.InteractiveLaneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InteractiveLaneInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InteractiveLaneInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction_debug_msgs.InteractiveLaneInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction_debug_msgs.InteractiveLaneInfo)
    MergeFrom(*source);
  }
}

void InteractiveLaneInfo::MergeFrom(const InteractiveLaneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction_debug_msgs.InteractiveLaneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lane_id().size() > 0) {

    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  if (from.cross_pos_xg() != 0) {
    set_cross_pos_xg(from.cross_pos_xg());
  }
  if (from.cross_pos_yg() != 0) {
    set_cross_pos_yg(from.cross_pos_yg());
  }
  if (from.start_pos_xg() != 0) {
    set_start_pos_xg(from.start_pos_xg());
  }
  if (from.start_pos_yg() != 0) {
    set_start_pos_yg(from.start_pos_yg());
  }
  if (from.cross_s() != 0) {
    set_cross_s(from.cross_s());
  }
}

void InteractiveLaneInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction_debug_msgs.InteractiveLaneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InteractiveLaneInfo::CopyFrom(const InteractiveLaneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction_debug_msgs.InteractiveLaneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InteractiveLaneInfo::IsInitialized() const {
  return true;
}

void InteractiveLaneInfo::Swap(InteractiveLaneInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InteractiveLaneInfo::InternalSwap(InteractiveLaneInfo* other) {
  using std::swap;
  lane_id_.Swap(&other->lane_id_);
  swap(cross_pos_xg_, other->cross_pos_xg_);
  swap(cross_pos_yg_, other->cross_pos_yg_);
  swap(start_pos_xg_, other->start_pos_xg_);
  swap(start_pos_yg_, other->start_pos_yg_);
  swap(cross_s_, other->cross_s_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InteractiveLaneInfo::GetMetadata() const {
  protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Junctionnet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Junctionnet::kLaneIdFieldNumber;
const int Junctionnet::kCrossPosXgFieldNumber;
const int Junctionnet::kCrossPosYgFieldNumber;
const int Junctionnet::kStartPosXgFieldNumber;
const int Junctionnet::kStartPosYgFieldNumber;
const int Junctionnet::kCrossSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Junctionnet::Junctionnet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsJunctionnet();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction_debug_msgs.Junctionnet)
}
Junctionnet::Junctionnet(const Junctionnet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lane_id().size() > 0) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&cross_pos_xg_, &from.cross_pos_xg_,
    static_cast<size_t>(reinterpret_cast<char*>(&cross_s_) -
    reinterpret_cast<char*>(&cross_pos_xg_)) + sizeof(cross_s_));
  // @@protoc_insertion_point(copy_constructor:prediction_debug_msgs.Junctionnet)
}

void Junctionnet::SharedCtor() {
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cross_pos_xg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cross_s_) -
      reinterpret_cast<char*>(&cross_pos_xg_)) + sizeof(cross_s_));
  _cached_size_ = 0;
}

Junctionnet::~Junctionnet() {
  // @@protoc_insertion_point(destructor:prediction_debug_msgs.Junctionnet)
  SharedDtor();
}

void Junctionnet::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Junctionnet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Junctionnet::descriptor() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Junctionnet& Junctionnet::default_instance() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsJunctionnet();
  return *internal_default_instance();
}

Junctionnet* Junctionnet::New(::google::protobuf::Arena* arena) const {
  Junctionnet* n = new Junctionnet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Junctionnet::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction_debug_msgs.Junctionnet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cross_pos_xg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cross_s_) -
      reinterpret_cast<char*>(&cross_pos_xg_)) + sizeof(cross_s_));
  _internal_metadata_.Clear();
}

bool Junctionnet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction_debug_msgs.Junctionnet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prediction_debug_msgs.Junctionnet.lane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cross_pos_xg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cross_pos_xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cross_pos_yg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cross_pos_yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_pos_xg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_pos_xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_pos_yg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_pos_yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cross_s = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cross_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction_debug_msgs.Junctionnet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction_debug_msgs.Junctionnet)
  return false;
#undef DO_
}

void Junctionnet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction_debug_msgs.Junctionnet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lane_id = 1;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.Junctionnet.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lane_id(), output);
  }

  // double cross_pos_xg = 2;
  if (this->cross_pos_xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cross_pos_xg(), output);
  }

  // double cross_pos_yg = 3;
  if (this->cross_pos_yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cross_pos_yg(), output);
  }

  // double start_pos_xg = 4;
  if (this->start_pos_xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->start_pos_xg(), output);
  }

  // double start_pos_yg = 5;
  if (this->start_pos_yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->start_pos_yg(), output);
  }

  // double cross_s = 6;
  if (this->cross_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->cross_s(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction_debug_msgs.Junctionnet)
}

::google::protobuf::uint8* Junctionnet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prediction_debug_msgs.Junctionnet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lane_id = 1;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.Junctionnet.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lane_id(), target);
  }

  // double cross_pos_xg = 2;
  if (this->cross_pos_xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cross_pos_xg(), target);
  }

  // double cross_pos_yg = 3;
  if (this->cross_pos_yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cross_pos_yg(), target);
  }

  // double start_pos_xg = 4;
  if (this->start_pos_xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->start_pos_xg(), target);
  }

  // double start_pos_yg = 5;
  if (this->start_pos_yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->start_pos_yg(), target);
  }

  // double cross_s = 6;
  if (this->cross_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->cross_s(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction_debug_msgs.Junctionnet)
  return target;
}

size_t Junctionnet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction_debug_msgs.Junctionnet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string lane_id = 1;
  if (this->lane_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lane_id());
  }

  // double cross_pos_xg = 2;
  if (this->cross_pos_xg() != 0) {
    total_size += 1 + 8;
  }

  // double cross_pos_yg = 3;
  if (this->cross_pos_yg() != 0) {
    total_size += 1 + 8;
  }

  // double start_pos_xg = 4;
  if (this->start_pos_xg() != 0) {
    total_size += 1 + 8;
  }

  // double start_pos_yg = 5;
  if (this->start_pos_yg() != 0) {
    total_size += 1 + 8;
  }

  // double cross_s = 6;
  if (this->cross_s() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Junctionnet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction_debug_msgs.Junctionnet)
  GOOGLE_DCHECK_NE(&from, this);
  const Junctionnet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Junctionnet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction_debug_msgs.Junctionnet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction_debug_msgs.Junctionnet)
    MergeFrom(*source);
  }
}

void Junctionnet::MergeFrom(const Junctionnet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction_debug_msgs.Junctionnet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lane_id().size() > 0) {

    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  if (from.cross_pos_xg() != 0) {
    set_cross_pos_xg(from.cross_pos_xg());
  }
  if (from.cross_pos_yg() != 0) {
    set_cross_pos_yg(from.cross_pos_yg());
  }
  if (from.start_pos_xg() != 0) {
    set_start_pos_xg(from.start_pos_xg());
  }
  if (from.start_pos_yg() != 0) {
    set_start_pos_yg(from.start_pos_yg());
  }
  if (from.cross_s() != 0) {
    set_cross_s(from.cross_s());
  }
}

void Junctionnet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction_debug_msgs.Junctionnet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Junctionnet::CopyFrom(const Junctionnet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction_debug_msgs.Junctionnet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Junctionnet::IsInitialized() const {
  return true;
}

void Junctionnet::Swap(Junctionnet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Junctionnet::InternalSwap(Junctionnet* other) {
  using std::swap;
  lane_id_.Swap(&other->lane_id_);
  swap(cross_pos_xg_, other->cross_pos_xg_);
  swap(cross_pos_yg_, other->cross_pos_yg_);
  swap(start_pos_xg_, other->start_pos_xg_);
  swap(start_pos_yg_, other->start_pos_yg_);
  swap(cross_s_, other->cross_s_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Junctionnet::GetMetadata() const {
  protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JunctionProperty::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JunctionProperty::kLaneIdFieldNumber;
const int JunctionProperty::kIsExitFieldNumber;
const int JunctionProperty::kIsOverlapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JunctionProperty::JunctionProperty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsJunctionProperty();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction_debug_msgs.JunctionProperty)
}
JunctionProperty::JunctionProperty(const JunctionProperty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lane_id().size() > 0) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&is_exit_, &from.is_exit_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_overlap_) -
    reinterpret_cast<char*>(&is_exit_)) + sizeof(is_overlap_));
  // @@protoc_insertion_point(copy_constructor:prediction_debug_msgs.JunctionProperty)
}

void JunctionProperty::SharedCtor() {
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_exit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_overlap_) -
      reinterpret_cast<char*>(&is_exit_)) + sizeof(is_overlap_));
  _cached_size_ = 0;
}

JunctionProperty::~JunctionProperty() {
  // @@protoc_insertion_point(destructor:prediction_debug_msgs.JunctionProperty)
  SharedDtor();
}

void JunctionProperty::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JunctionProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JunctionProperty::descriptor() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JunctionProperty& JunctionProperty::default_instance() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsJunctionProperty();
  return *internal_default_instance();
}

JunctionProperty* JunctionProperty::New(::google::protobuf::Arena* arena) const {
  JunctionProperty* n = new JunctionProperty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JunctionProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction_debug_msgs.JunctionProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_exit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_overlap_) -
      reinterpret_cast<char*>(&is_exit_)) + sizeof(is_overlap_));
  _internal_metadata_.Clear();
}

bool JunctionProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction_debug_msgs.JunctionProperty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prediction_debug_msgs.JunctionProperty.lane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_exit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_exit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_overlap = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_overlap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction_debug_msgs.JunctionProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction_debug_msgs.JunctionProperty)
  return false;
#undef DO_
}

void JunctionProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction_debug_msgs.JunctionProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lane_id = 1;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.JunctionProperty.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lane_id(), output);
  }

  // int32 is_exit = 2;
  if (this->is_exit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_exit(), output);
  }

  // int32 is_overlap = 3;
  if (this->is_overlap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_overlap(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction_debug_msgs.JunctionProperty)
}

::google::protobuf::uint8* JunctionProperty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prediction_debug_msgs.JunctionProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lane_id = 1;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.JunctionProperty.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lane_id(), target);
  }

  // int32 is_exit = 2;
  if (this->is_exit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_exit(), target);
  }

  // int32 is_overlap = 3;
  if (this->is_overlap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_overlap(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction_debug_msgs.JunctionProperty)
  return target;
}

size_t JunctionProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction_debug_msgs.JunctionProperty)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string lane_id = 1;
  if (this->lane_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lane_id());
  }

  // int32 is_exit = 2;
  if (this->is_exit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_exit());
  }

  // int32 is_overlap = 3;
  if (this->is_overlap() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_overlap());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JunctionProperty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction_debug_msgs.JunctionProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const JunctionProperty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JunctionProperty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction_debug_msgs.JunctionProperty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction_debug_msgs.JunctionProperty)
    MergeFrom(*source);
  }
}

void JunctionProperty::MergeFrom(const JunctionProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction_debug_msgs.JunctionProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lane_id().size() > 0) {

    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  if (from.is_exit() != 0) {
    set_is_exit(from.is_exit());
  }
  if (from.is_overlap() != 0) {
    set_is_overlap(from.is_overlap());
  }
}

void JunctionProperty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction_debug_msgs.JunctionProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JunctionProperty::CopyFrom(const JunctionProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction_debug_msgs.JunctionProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunctionProperty::IsInitialized() const {
  return true;
}

void JunctionProperty::Swap(JunctionProperty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JunctionProperty::InternalSwap(JunctionProperty* other) {
  using std::swap;
  lane_id_.Swap(&other->lane_id_);
  swap(is_exit_, other->is_exit_);
  swap(is_overlap_, other->is_overlap_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JunctionProperty::GetMetadata() const {
  protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KeyJunctionObject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyJunctionObject::kIdFieldNumber;
const int KeyJunctionObject::kXFieldNumber;
const int KeyJunctionObject::kYFieldNumber;
const int KeyJunctionObject::kThetaFieldNumber;
const int KeyJunctionObject::kLengthFieldNumber;
const int KeyJunctionObject::kWidthFieldNumber;
const int KeyJunctionObject::kHeightFieldNumber;
const int KeyJunctionObject::kConsiderTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyJunctionObject::KeyJunctionObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsKeyJunctionObject();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction_debug_msgs.KeyJunctionObject)
}
KeyJunctionObject::KeyJunctionObject(const KeyJunctionObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&consider_type_) -
    reinterpret_cast<char*>(&x_)) + sizeof(consider_type_));
  // @@protoc_insertion_point(copy_constructor:prediction_debug_msgs.KeyJunctionObject)
}

void KeyJunctionObject::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&consider_type_) -
      reinterpret_cast<char*>(&x_)) + sizeof(consider_type_));
  _cached_size_ = 0;
}

KeyJunctionObject::~KeyJunctionObject() {
  // @@protoc_insertion_point(destructor:prediction_debug_msgs.KeyJunctionObject)
  SharedDtor();
}

void KeyJunctionObject::SharedDtor() {
}

void KeyJunctionObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyJunctionObject::descriptor() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyJunctionObject& KeyJunctionObject::default_instance() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsKeyJunctionObject();
  return *internal_default_instance();
}

KeyJunctionObject* KeyJunctionObject::New(::google::protobuf::Arena* arena) const {
  KeyJunctionObject* n = new KeyJunctionObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyJunctionObject::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction_debug_msgs.KeyJunctionObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&consider_type_) -
      reinterpret_cast<char*>(&x_)) + sizeof(consider_type_));
  _internal_metadata_.Clear();
}

bool KeyJunctionObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction_debug_msgs.KeyJunctionObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float theta = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 consider_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consider_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction_debug_msgs.KeyJunctionObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction_debug_msgs.KeyJunctionObject)
  return false;
#undef DO_
}

void KeyJunctionObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction_debug_msgs.KeyJunctionObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // double x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }

  // double y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }

  // float theta = 4;
  if (this->theta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->theta(), output);
  }

  // float length = 5;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->length(), output);
  }

  // float width = 6;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->width(), output);
  }

  // float height = 7;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->height(), output);
  }

  // int32 consider_type = 8;
  if (this->consider_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->consider_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction_debug_msgs.KeyJunctionObject)
}

::google::protobuf::uint8* KeyJunctionObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prediction_debug_msgs.KeyJunctionObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // double x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }

  // double y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }

  // float theta = 4;
  if (this->theta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->theta(), target);
  }

  // float length = 5;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->length(), target);
  }

  // float width = 6;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->width(), target);
  }

  // float height = 7;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->height(), target);
  }

  // int32 consider_type = 8;
  if (this->consider_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->consider_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction_debug_msgs.KeyJunctionObject)
  return target;
}

size_t KeyJunctionObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction_debug_msgs.KeyJunctionObject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x = 2;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // float theta = 4;
  if (this->theta() != 0) {
    total_size += 1 + 4;
  }

  // double y = 3;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // float length = 5;
  if (this->length() != 0) {
    total_size += 1 + 4;
  }

  // float width = 6;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // float height = 7;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // int32 consider_type = 8;
  if (this->consider_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->consider_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyJunctionObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction_debug_msgs.KeyJunctionObject)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyJunctionObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyJunctionObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction_debug_msgs.KeyJunctionObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction_debug_msgs.KeyJunctionObject)
    MergeFrom(*source);
  }
}

void KeyJunctionObject::MergeFrom(const KeyJunctionObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction_debug_msgs.KeyJunctionObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.theta() != 0) {
    set_theta(from.theta());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.consider_type() != 0) {
    set_consider_type(from.consider_type());
  }
}

void KeyJunctionObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction_debug_msgs.KeyJunctionObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyJunctionObject::CopyFrom(const KeyJunctionObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction_debug_msgs.KeyJunctionObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyJunctionObject::IsInitialized() const {
  return true;
}

void KeyJunctionObject::Swap(KeyJunctionObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyJunctionObject::InternalSwap(KeyJunctionObject* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(id_, other->id_);
  swap(theta_, other->theta_);
  swap(y_, other->y_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(consider_type_, other->consider_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyJunctionObject::GetMetadata() const {
  protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KeyObject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyObject::kIdFieldNumber;
const int KeyObject::kXFieldNumber;
const int KeyObject::kYFieldNumber;
const int KeyObject::kThetaFieldNumber;
const int KeyObject::kLengthFieldNumber;
const int KeyObject::kWidthFieldNumber;
const int KeyObject::kHeightFieldNumber;
const int KeyObject::kNeedConsiderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyObject::KeyObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsKeyObject();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction_debug_msgs.KeyObject)
}
KeyObject::KeyObject(const KeyObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&need_consider_) -
    reinterpret_cast<char*>(&x_)) + sizeof(need_consider_));
  // @@protoc_insertion_point(copy_constructor:prediction_debug_msgs.KeyObject)
}

void KeyObject::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&need_consider_) -
      reinterpret_cast<char*>(&x_)) + sizeof(need_consider_));
  _cached_size_ = 0;
}

KeyObject::~KeyObject() {
  // @@protoc_insertion_point(destructor:prediction_debug_msgs.KeyObject)
  SharedDtor();
}

void KeyObject::SharedDtor() {
}

void KeyObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyObject::descriptor() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyObject& KeyObject::default_instance() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsKeyObject();
  return *internal_default_instance();
}

KeyObject* KeyObject::New(::google::protobuf::Arena* arena) const {
  KeyObject* n = new KeyObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyObject::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction_debug_msgs.KeyObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&need_consider_) -
      reinterpret_cast<char*>(&x_)) + sizeof(need_consider_));
  _internal_metadata_.Clear();
}

bool KeyObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction_debug_msgs.KeyObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float theta = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool need_consider = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_consider_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction_debug_msgs.KeyObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction_debug_msgs.KeyObject)
  return false;
#undef DO_
}

void KeyObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction_debug_msgs.KeyObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // double x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }

  // double y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }

  // float theta = 4;
  if (this->theta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->theta(), output);
  }

  // float length = 5;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->length(), output);
  }

  // float width = 6;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->width(), output);
  }

  // float height = 7;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->height(), output);
  }

  // bool need_consider = 8;
  if (this->need_consider() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->need_consider(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction_debug_msgs.KeyObject)
}

::google::protobuf::uint8* KeyObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prediction_debug_msgs.KeyObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // double x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }

  // double y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }

  // float theta = 4;
  if (this->theta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->theta(), target);
  }

  // float length = 5;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->length(), target);
  }

  // float width = 6;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->width(), target);
  }

  // float height = 7;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->height(), target);
  }

  // bool need_consider = 8;
  if (this->need_consider() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->need_consider(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction_debug_msgs.KeyObject)
  return target;
}

size_t KeyObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction_debug_msgs.KeyObject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x = 2;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // float theta = 4;
  if (this->theta() != 0) {
    total_size += 1 + 4;
  }

  // double y = 3;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // float length = 5;
  if (this->length() != 0) {
    total_size += 1 + 4;
  }

  // float width = 6;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // float height = 7;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // bool need_consider = 8;
  if (this->need_consider() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction_debug_msgs.KeyObject)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction_debug_msgs.KeyObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction_debug_msgs.KeyObject)
    MergeFrom(*source);
  }
}

void KeyObject::MergeFrom(const KeyObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction_debug_msgs.KeyObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.theta() != 0) {
    set_theta(from.theta());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.need_consider() != 0) {
    set_need_consider(from.need_consider());
  }
}

void KeyObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction_debug_msgs.KeyObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyObject::CopyFrom(const KeyObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction_debug_msgs.KeyObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyObject::IsInitialized() const {
  return true;
}

void KeyObject::Swap(KeyObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyObject::InternalSwap(KeyObject* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(id_, other->id_);
  swap(theta_, other->theta_);
  swap(y_, other->y_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(need_consider_, other->need_consider_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyObject::GetMetadata() const {
  protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneInfo::kLaneIdFieldNumber;
const int LaneInfo::kPosSFieldNumber;
const int LaneInfo::kPosLFieldNumber;
const int LaneInfo::kHeadingDiffFieldNumber;
const int LaneInfo::kDistToLeftBoundaryFieldNumber;
const int LaneInfo::kDistToRightBoundaryFieldNumber;
const int LaneInfo::kIsOnLaneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneInfo::LaneInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsLaneInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction_debug_msgs.LaneInfo)
}
LaneInfo::LaneInfo(const LaneInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lane_id().size() > 0) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&pos_s_, &from.pos_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_on_lane_) -
    reinterpret_cast<char*>(&pos_s_)) + sizeof(is_on_lane_));
  // @@protoc_insertion_point(copy_constructor:prediction_debug_msgs.LaneInfo)
}

void LaneInfo::SharedCtor() {
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_on_lane_) -
      reinterpret_cast<char*>(&pos_s_)) + sizeof(is_on_lane_));
  _cached_size_ = 0;
}

LaneInfo::~LaneInfo() {
  // @@protoc_insertion_point(destructor:prediction_debug_msgs.LaneInfo)
  SharedDtor();
}

void LaneInfo::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LaneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneInfo::descriptor() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneInfo& LaneInfo::default_instance() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsLaneInfo();
  return *internal_default_instance();
}

LaneInfo* LaneInfo::New(::google::protobuf::Arena* arena) const {
  LaneInfo* n = new LaneInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction_debug_msgs.LaneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_on_lane_) -
      reinterpret_cast<char*>(&pos_s_)) + sizeof(is_on_lane_));
  _internal_metadata_.Clear();
}

bool LaneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction_debug_msgs.LaneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prediction_debug_msgs.LaneInfo.lane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pos_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pos_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pos_l = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pos_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading_diff = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dist_to_left_boundary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_to_left_boundary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dist_to_right_boundary = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_to_right_boundary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_on_lane = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_on_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction_debug_msgs.LaneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction_debug_msgs.LaneInfo)
  return false;
#undef DO_
}

void LaneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction_debug_msgs.LaneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lane_id = 1;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.LaneInfo.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lane_id(), output);
  }

  // double pos_s = 2;
  if (this->pos_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pos_s(), output);
  }

  // double pos_l = 3;
  if (this->pos_l() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->pos_l(), output);
  }

  // double heading_diff = 4;
  if (this->heading_diff() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->heading_diff(), output);
  }

  // double dist_to_left_boundary = 5;
  if (this->dist_to_left_boundary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->dist_to_left_boundary(), output);
  }

  // double dist_to_right_boundary = 6;
  if (this->dist_to_right_boundary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->dist_to_right_boundary(), output);
  }

  // bool is_on_lane = 7;
  if (this->is_on_lane() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_on_lane(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction_debug_msgs.LaneInfo)
}

::google::protobuf::uint8* LaneInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prediction_debug_msgs.LaneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lane_id = 1;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.LaneInfo.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lane_id(), target);
  }

  // double pos_s = 2;
  if (this->pos_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pos_s(), target);
  }

  // double pos_l = 3;
  if (this->pos_l() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->pos_l(), target);
  }

  // double heading_diff = 4;
  if (this->heading_diff() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->heading_diff(), target);
  }

  // double dist_to_left_boundary = 5;
  if (this->dist_to_left_boundary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->dist_to_left_boundary(), target);
  }

  // double dist_to_right_boundary = 6;
  if (this->dist_to_right_boundary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->dist_to_right_boundary(), target);
  }

  // bool is_on_lane = 7;
  if (this->is_on_lane() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_on_lane(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction_debug_msgs.LaneInfo)
  return target;
}

size_t LaneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction_debug_msgs.LaneInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string lane_id = 1;
  if (this->lane_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lane_id());
  }

  // double pos_s = 2;
  if (this->pos_s() != 0) {
    total_size += 1 + 8;
  }

  // double pos_l = 3;
  if (this->pos_l() != 0) {
    total_size += 1 + 8;
  }

  // double heading_diff = 4;
  if (this->heading_diff() != 0) {
    total_size += 1 + 8;
  }

  // double dist_to_left_boundary = 5;
  if (this->dist_to_left_boundary() != 0) {
    total_size += 1 + 8;
  }

  // double dist_to_right_boundary = 6;
  if (this->dist_to_right_boundary() != 0) {
    total_size += 1 + 8;
  }

  // bool is_on_lane = 7;
  if (this->is_on_lane() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction_debug_msgs.LaneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction_debug_msgs.LaneInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction_debug_msgs.LaneInfo)
    MergeFrom(*source);
  }
}

void LaneInfo::MergeFrom(const LaneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction_debug_msgs.LaneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lane_id().size() > 0) {

    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  if (from.pos_s() != 0) {
    set_pos_s(from.pos_s());
  }
  if (from.pos_l() != 0) {
    set_pos_l(from.pos_l());
  }
  if (from.heading_diff() != 0) {
    set_heading_diff(from.heading_diff());
  }
  if (from.dist_to_left_boundary() != 0) {
    set_dist_to_left_boundary(from.dist_to_left_boundary());
  }
  if (from.dist_to_right_boundary() != 0) {
    set_dist_to_right_boundary(from.dist_to_right_boundary());
  }
  if (from.is_on_lane() != 0) {
    set_is_on_lane(from.is_on_lane());
  }
}

void LaneInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction_debug_msgs.LaneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneInfo::CopyFrom(const LaneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction_debug_msgs.LaneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneInfo::IsInitialized() const {
  return true;
}

void LaneInfo::Swap(LaneInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneInfo::InternalSwap(LaneInfo* other) {
  using std::swap;
  lane_id_.Swap(&other->lane_id_);
  swap(pos_s_, other->pos_s_);
  swap(pos_l_, other->pos_l_);
  swap(heading_diff_, other->heading_diff_);
  swap(dist_to_left_boundary_, other->dist_to_left_boundary_);
  swap(dist_to_right_boundary_, other->dist_to_right_boundary_);
  swap(is_on_lane_, other->is_on_lane_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneInfo::GetMetadata() const {
  protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneProperty::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneProperty::kLaneIdFieldNumber;
const int LaneProperty::kTotalLengthFieldNumber;
const int LaneProperty::kStartSFieldNumber;
const int LaneProperty::kEndSFieldNumber;
const int LaneProperty::kForwardHistoryNumFieldNumber;
const int LaneProperty::kBackwardHistoryNumFieldNumber;
const int LaneProperty::kForwardObsNumFieldNumber;
const int LaneProperty::kBackwardObsNumFieldNumber;
const int LaneProperty::kIsLaneCheckedFieldNumber;
const int LaneProperty::kIsObjectCheckedFieldNumber;
const int LaneProperty::kObsStartToEndFieldNumber;
const int LaneProperty::kObsEndToStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneProperty::LaneProperty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsLaneProperty();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction_debug_msgs.LaneProperty)
}
LaneProperty::LaneProperty(const LaneProperty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      obs_start_to_end_(from.obs_start_to_end_),
      obs_end_to_start_(from.obs_end_to_start_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lane_id().size() > 0) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&total_length_, &from.total_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_object_checked_) -
    reinterpret_cast<char*>(&total_length_)) + sizeof(is_object_checked_));
  // @@protoc_insertion_point(copy_constructor:prediction_debug_msgs.LaneProperty)
}

void LaneProperty::SharedCtor() {
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_object_checked_) -
      reinterpret_cast<char*>(&total_length_)) + sizeof(is_object_checked_));
  _cached_size_ = 0;
}

LaneProperty::~LaneProperty() {
  // @@protoc_insertion_point(destructor:prediction_debug_msgs.LaneProperty)
  SharedDtor();
}

void LaneProperty::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LaneProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneProperty::descriptor() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneProperty& LaneProperty::default_instance() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsLaneProperty();
  return *internal_default_instance();
}

LaneProperty* LaneProperty::New(::google::protobuf::Arena* arena) const {
  LaneProperty* n = new LaneProperty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction_debug_msgs.LaneProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obs_start_to_end_.Clear();
  obs_end_to_start_.Clear();
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_object_checked_) -
      reinterpret_cast<char*>(&total_length_)) + sizeof(is_object_checked_));
  _internal_metadata_.Clear();
}

bool LaneProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction_debug_msgs.LaneProperty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prediction_debug_msgs.LaneProperty.lane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float total_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float start_s = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float end_s = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 forward_history_num = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forward_history_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 backward_history_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backward_history_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 forward_obs_num = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forward_obs_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 backward_obs_num = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backward_obs_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_lane_checked = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_lane_checked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_object_checked = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_object_checked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 obs_start_to_end = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_obs_start_to_end())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 90u, input, this->mutable_obs_start_to_end())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 obs_end_to_start = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_obs_end_to_start())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 98u, input, this->mutable_obs_end_to_start())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction_debug_msgs.LaneProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction_debug_msgs.LaneProperty)
  return false;
#undef DO_
}

void LaneProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction_debug_msgs.LaneProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lane_id = 1;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.LaneProperty.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lane_id(), output);
  }

  // float total_length = 2;
  if (this->total_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->total_length(), output);
  }

  // float start_s = 3;
  if (this->start_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->start_s(), output);
  }

  // float end_s = 4;
  if (this->end_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->end_s(), output);
  }

  // int32 forward_history_num = 5;
  if (this->forward_history_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->forward_history_num(), output);
  }

  // int32 backward_history_num = 6;
  if (this->backward_history_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->backward_history_num(), output);
  }

  // int32 forward_obs_num = 7;
  if (this->forward_obs_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->forward_obs_num(), output);
  }

  // int32 backward_obs_num = 8;
  if (this->backward_obs_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->backward_obs_num(), output);
  }

  // bool is_lane_checked = 9;
  if (this->is_lane_checked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_lane_checked(), output);
  }

  // bool is_object_checked = 10;
  if (this->is_object_checked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_object_checked(), output);
  }

  // repeated int32 obs_start_to_end = 11;
  if (this->obs_start_to_end_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _obs_start_to_end_cached_byte_size_));
  }
  for (int i = 0, n = this->obs_start_to_end_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->obs_start_to_end(i), output);
  }

  // repeated int32 obs_end_to_start = 12;
  if (this->obs_end_to_start_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _obs_end_to_start_cached_byte_size_));
  }
  for (int i = 0, n = this->obs_end_to_start_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->obs_end_to_start(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction_debug_msgs.LaneProperty)
}

::google::protobuf::uint8* LaneProperty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prediction_debug_msgs.LaneProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lane_id = 1;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.LaneProperty.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lane_id(), target);
  }

  // float total_length = 2;
  if (this->total_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->total_length(), target);
  }

  // float start_s = 3;
  if (this->start_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->start_s(), target);
  }

  // float end_s = 4;
  if (this->end_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->end_s(), target);
  }

  // int32 forward_history_num = 5;
  if (this->forward_history_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->forward_history_num(), target);
  }

  // int32 backward_history_num = 6;
  if (this->backward_history_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->backward_history_num(), target);
  }

  // int32 forward_obs_num = 7;
  if (this->forward_obs_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->forward_obs_num(), target);
  }

  // int32 backward_obs_num = 8;
  if (this->backward_obs_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->backward_obs_num(), target);
  }

  // bool is_lane_checked = 9;
  if (this->is_lane_checked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_lane_checked(), target);
  }

  // bool is_object_checked = 10;
  if (this->is_object_checked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_object_checked(), target);
  }

  // repeated int32 obs_start_to_end = 11;
  if (this->obs_start_to_end_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _obs_start_to_end_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->obs_start_to_end_, target);
  }

  // repeated int32 obs_end_to_start = 12;
  if (this->obs_end_to_start_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _obs_end_to_start_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->obs_end_to_start_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction_debug_msgs.LaneProperty)
  return target;
}

size_t LaneProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction_debug_msgs.LaneProperty)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 obs_start_to_end = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->obs_start_to_end_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _obs_start_to_end_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 obs_end_to_start = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->obs_end_to_start_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _obs_end_to_start_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string lane_id = 1;
  if (this->lane_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lane_id());
  }

  // float total_length = 2;
  if (this->total_length() != 0) {
    total_size += 1 + 4;
  }

  // float start_s = 3;
  if (this->start_s() != 0) {
    total_size += 1 + 4;
  }

  // float end_s = 4;
  if (this->end_s() != 0) {
    total_size += 1 + 4;
  }

  // int32 forward_history_num = 5;
  if (this->forward_history_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->forward_history_num());
  }

  // int32 backward_history_num = 6;
  if (this->backward_history_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->backward_history_num());
  }

  // int32 forward_obs_num = 7;
  if (this->forward_obs_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->forward_obs_num());
  }

  // int32 backward_obs_num = 8;
  if (this->backward_obs_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->backward_obs_num());
  }

  // bool is_lane_checked = 9;
  if (this->is_lane_checked() != 0) {
    total_size += 1 + 1;
  }

  // bool is_object_checked = 10;
  if (this->is_object_checked() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneProperty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction_debug_msgs.LaneProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneProperty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneProperty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction_debug_msgs.LaneProperty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction_debug_msgs.LaneProperty)
    MergeFrom(*source);
  }
}

void LaneProperty::MergeFrom(const LaneProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction_debug_msgs.LaneProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obs_start_to_end_.MergeFrom(from.obs_start_to_end_);
  obs_end_to_start_.MergeFrom(from.obs_end_to_start_);
  if (from.lane_id().size() > 0) {

    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  if (from.total_length() != 0) {
    set_total_length(from.total_length());
  }
  if (from.start_s() != 0) {
    set_start_s(from.start_s());
  }
  if (from.end_s() != 0) {
    set_end_s(from.end_s());
  }
  if (from.forward_history_num() != 0) {
    set_forward_history_num(from.forward_history_num());
  }
  if (from.backward_history_num() != 0) {
    set_backward_history_num(from.backward_history_num());
  }
  if (from.forward_obs_num() != 0) {
    set_forward_obs_num(from.forward_obs_num());
  }
  if (from.backward_obs_num() != 0) {
    set_backward_obs_num(from.backward_obs_num());
  }
  if (from.is_lane_checked() != 0) {
    set_is_lane_checked(from.is_lane_checked());
  }
  if (from.is_object_checked() != 0) {
    set_is_object_checked(from.is_object_checked());
  }
}

void LaneProperty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction_debug_msgs.LaneProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneProperty::CopyFrom(const LaneProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction_debug_msgs.LaneProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneProperty::IsInitialized() const {
  return true;
}

void LaneProperty::Swap(LaneProperty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneProperty::InternalSwap(LaneProperty* other) {
  using std::swap;
  obs_start_to_end_.InternalSwap(&other->obs_start_to_end_);
  obs_end_to_start_.InternalSwap(&other->obs_end_to_start_);
  lane_id_.Swap(&other->lane_id_);
  swap(total_length_, other->total_length_);
  swap(start_s_, other->start_s_);
  swap(end_s_, other->end_s_);
  swap(forward_history_num_, other->forward_history_num_);
  swap(backward_history_num_, other->backward_history_num_);
  swap(forward_obs_num_, other->forward_obs_num_);
  swap(backward_obs_num_, other->backward_obs_num_);
  swap(is_lane_checked_, other->is_lane_checked_);
  swap(is_object_checked_, other->is_object_checked_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneProperty::GetMetadata() const {
  protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Lanenet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lanenet::kLaneNetFieldNumber;
const int Lanenet::kObjectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lanenet::Lanenet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsLanenet();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction_debug_msgs.Lanenet)
}
Lanenet::Lanenet(const Lanenet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lane_net_(from.lane_net_),
      objects_(from.objects_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:prediction_debug_msgs.Lanenet)
}

void Lanenet::SharedCtor() {
  _cached_size_ = 0;
}

Lanenet::~Lanenet() {
  // @@protoc_insertion_point(destructor:prediction_debug_msgs.Lanenet)
  SharedDtor();
}

void Lanenet::SharedDtor() {
}

void Lanenet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lanenet::descriptor() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lanenet& Lanenet::default_instance() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsLanenet();
  return *internal_default_instance();
}

Lanenet* Lanenet::New(::google::protobuf::Arena* arena) const {
  Lanenet* n = new Lanenet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lanenet::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction_debug_msgs.Lanenet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_net_.Clear();
  objects_.Clear();
  _internal_metadata_.Clear();
}

bool Lanenet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction_debug_msgs.Lanenet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .prediction_debug_msgs.LaneProperty lane_net = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_lane_net()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .prediction_debug_msgs.KeyObject objects = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction_debug_msgs.Lanenet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction_debug_msgs.Lanenet)
  return false;
#undef DO_
}

void Lanenet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction_debug_msgs.Lanenet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prediction_debug_msgs.LaneProperty lane_net = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_net_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lane_net(static_cast<int>(i)), output);
  }

  // repeated .prediction_debug_msgs.KeyObject objects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objects(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction_debug_msgs.Lanenet)
}

::google::protobuf::uint8* Lanenet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prediction_debug_msgs.Lanenet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prediction_debug_msgs.LaneProperty lane_net = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_net_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lane_net(static_cast<int>(i)), deterministic, target);
  }

  // repeated .prediction_debug_msgs.KeyObject objects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->objects(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction_debug_msgs.Lanenet)
  return target;
}

size_t Lanenet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction_debug_msgs.Lanenet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .prediction_debug_msgs.LaneProperty lane_net = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_net_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_net(static_cast<int>(i)));
    }
  }

  // repeated .prediction_debug_msgs.KeyObject objects = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->objects(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lanenet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction_debug_msgs.Lanenet)
  GOOGLE_DCHECK_NE(&from, this);
  const Lanenet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lanenet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction_debug_msgs.Lanenet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction_debug_msgs.Lanenet)
    MergeFrom(*source);
  }
}

void Lanenet::MergeFrom(const Lanenet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction_debug_msgs.Lanenet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_net_.MergeFrom(from.lane_net_);
  objects_.MergeFrom(from.objects_);
}

void Lanenet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction_debug_msgs.Lanenet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lanenet::CopyFrom(const Lanenet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction_debug_msgs.Lanenet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lanenet::IsInitialized() const {
  return true;
}

void Lanenet::Swap(Lanenet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lanenet::InternalSwap(Lanenet* other) {
  using std::swap;
  lane_net_.InternalSwap(&other->lane_net_);
  objects_.InternalSwap(&other->objects_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lanenet::GetMetadata() const {
  protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObjectFeature::InitAsDefaultInstance() {
  ::prediction_debug_msgs::_ObjectFeature_default_instance_._instance.get_mutable()->off_lane_exit_ = const_cast< ::prediction_debug_msgs::Exit*>(
      ::prediction_debug_msgs::Exit::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectFeature::kIdFieldNumber;
const int ObjectFeature::kTypeFieldNumber;
const int ObjectFeature::kXFieldNumber;
const int ObjectFeature::kYFieldNumber;
const int ObjectFeature::kZFieldNumber;
const int ObjectFeature::kLengthFieldNumber;
const int ObjectFeature::kWidthFieldNumber;
const int ObjectFeature::kHeightFieldNumber;
const int ObjectFeature::kSpeedFieldNumber;
const int ObjectFeature::kAccFieldNumber;
const int ObjectFeature::kFinalHeadingFieldNumber;
const int ObjectFeature::kIsStaticFieldNumber;
const int ObjectFeature::kIsIllegalFieldNumber;
const int ObjectFeature::kIsUltraStaticFieldNumber;
const int ObjectFeature::kPriorityFieldNumber;
const int ObjectFeature::kLaneIdFieldNumber;
const int ObjectFeature::kCurrentLaneIdsFieldNumber;
const int ObjectFeature::kNearbyLaneIdsFieldNumber;
const int ObjectFeature::kEnterLaneFieldNumber;
const int ObjectFeature::kExitsFieldNumber;
const int ObjectFeature::kOffLaneExitFieldNumber;
const int ObjectFeature::kEvaluatorTypeFieldNumber;
const int ObjectFeature::kSubEvaluatorTypeFieldNumber;
const int ObjectFeature::kPredictorTypeFieldNumber;
const int ObjectFeature::kNeedExceptionHandlingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectFeature::ObjectFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsObjectFeature();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction_debug_msgs.ObjectFeature)
}
ObjectFeature::ObjectFeature(const ObjectFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      current_lane_ids_(from.current_lane_ids_),
      nearby_lane_ids_(from.nearby_lane_ids_),
      exits_(from.exits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lane_id().size() > 0) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  enter_lane_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.enter_lane().size() > 0) {
    enter_lane_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enter_lane_);
  }
  if (from.has_off_lane_exit()) {
    off_lane_exit_ = new ::prediction_debug_msgs::Exit(*from.off_lane_exit_);
  } else {
    off_lane_exit_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&predictor_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(predictor_type_));
  // @@protoc_insertion_point(copy_constructor:prediction_debug_msgs.ObjectFeature)
}

void ObjectFeature::SharedCtor() {
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enter_lane_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&off_lane_exit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&predictor_type_) -
      reinterpret_cast<char*>(&off_lane_exit_)) + sizeof(predictor_type_));
  _cached_size_ = 0;
}

ObjectFeature::~ObjectFeature() {
  // @@protoc_insertion_point(destructor:prediction_debug_msgs.ObjectFeature)
  SharedDtor();
}

void ObjectFeature::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enter_lane_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete off_lane_exit_;
}

void ObjectFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectFeature::descriptor() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectFeature& ObjectFeature::default_instance() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsObjectFeature();
  return *internal_default_instance();
}

ObjectFeature* ObjectFeature::New(::google::protobuf::Arena* arena) const {
  ObjectFeature* n = new ObjectFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction_debug_msgs.ObjectFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_lane_ids_.Clear();
  nearby_lane_ids_.Clear();
  exits_.Clear();
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enter_lane_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && off_lane_exit_ != NULL) {
    delete off_lane_exit_;
  }
  off_lane_exit_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&predictor_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(predictor_type_));
  _internal_metadata_.Clear();
}

bool ObjectFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction_debug_msgs.ObjectFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double length = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acc = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double final_heading = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &final_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_static = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_static_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_illegal = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_illegal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_ultra_static = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_ultra_static_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lane_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prediction_debug_msgs.ObjectFeature.lane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string current_lane_ids = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_current_lane_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->current_lane_ids(this->current_lane_ids_size() - 1).data(),
            static_cast<int>(this->current_lane_ids(this->current_lane_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prediction_debug_msgs.ObjectFeature.current_lane_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string nearby_lane_ids = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nearby_lane_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nearby_lane_ids(this->nearby_lane_ids_size() - 1).data(),
            static_cast<int>(this->nearby_lane_ids(this->nearby_lane_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prediction_debug_msgs.ObjectFeature.nearby_lane_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string enter_lane = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enter_lane()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->enter_lane().data(), static_cast<int>(this->enter_lane().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prediction_debug_msgs.ObjectFeature.enter_lane"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .prediction_debug_msgs.Exit exits = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_exits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .prediction_debug_msgs.Exit off_lane_exit = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_off_lane_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 evaluator_type = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &evaluator_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sub_evaluator_type = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_evaluator_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 predictor_type = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &predictor_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool need_exception_handling = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_exception_handling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction_debug_msgs.ObjectFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction_debug_msgs.ObjectFeature)
  return false;
#undef DO_
}

void ObjectFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction_debug_msgs.ObjectFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // double x = 3;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // double y = 4;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // double z = 5;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->z(), output);
  }

  // double length = 6;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->length(), output);
  }

  // double width = 7;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->width(), output);
  }

  // double height = 8;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->height(), output);
  }

  // double speed = 9;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->speed(), output);
  }

  // double acc = 10;
  if (this->acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->acc(), output);
  }

  // double final_heading = 11;
  if (this->final_heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->final_heading(), output);
  }

  // bool is_static = 12;
  if (this->is_static() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_static(), output);
  }

  // bool is_illegal = 13;
  if (this->is_illegal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_illegal(), output);
  }

  // int32 is_ultra_static = 14;
  if (this->is_ultra_static() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->is_ultra_static(), output);
  }

  // int32 priority = 15;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->priority(), output);
  }

  // string lane_id = 16;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.ObjectFeature.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->lane_id(), output);
  }

  // repeated string current_lane_ids = 17;
  for (int i = 0, n = this->current_lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->current_lane_ids(i).data(), static_cast<int>(this->current_lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.ObjectFeature.current_lane_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->current_lane_ids(i), output);
  }

  // repeated string nearby_lane_ids = 18;
  for (int i = 0, n = this->nearby_lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nearby_lane_ids(i).data(), static_cast<int>(this->nearby_lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.ObjectFeature.nearby_lane_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->nearby_lane_ids(i), output);
  }

  // string enter_lane = 19;
  if (this->enter_lane().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enter_lane().data(), static_cast<int>(this->enter_lane().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.ObjectFeature.enter_lane");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->enter_lane(), output);
  }

  // repeated .prediction_debug_msgs.Exit exits = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->exits(static_cast<int>(i)), output);
  }

  // .prediction_debug_msgs.Exit off_lane_exit = 21;
  if (this->has_off_lane_exit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->off_lane_exit_, output);
  }

  // int32 evaluator_type = 22;
  if (this->evaluator_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->evaluator_type(), output);
  }

  // int32 sub_evaluator_type = 23;
  if (this->sub_evaluator_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->sub_evaluator_type(), output);
  }

  // int32 predictor_type = 24;
  if (this->predictor_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->predictor_type(), output);
  }

  // bool need_exception_handling = 25;
  if (this->need_exception_handling() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->need_exception_handling(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction_debug_msgs.ObjectFeature)
}

::google::protobuf::uint8* ObjectFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prediction_debug_msgs.ObjectFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // double x = 3;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // double y = 4;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // double z = 5;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->z(), target);
  }

  // double length = 6;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->length(), target);
  }

  // double width = 7;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->width(), target);
  }

  // double height = 8;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->height(), target);
  }

  // double speed = 9;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->speed(), target);
  }

  // double acc = 10;
  if (this->acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->acc(), target);
  }

  // double final_heading = 11;
  if (this->final_heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->final_heading(), target);
  }

  // bool is_static = 12;
  if (this->is_static() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_static(), target);
  }

  // bool is_illegal = 13;
  if (this->is_illegal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_illegal(), target);
  }

  // int32 is_ultra_static = 14;
  if (this->is_ultra_static() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->is_ultra_static(), target);
  }

  // int32 priority = 15;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->priority(), target);
  }

  // string lane_id = 16;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.ObjectFeature.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->lane_id(), target);
  }

  // repeated string current_lane_ids = 17;
  for (int i = 0, n = this->current_lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->current_lane_ids(i).data(), static_cast<int>(this->current_lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.ObjectFeature.current_lane_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->current_lane_ids(i), target);
  }

  // repeated string nearby_lane_ids = 18;
  for (int i = 0, n = this->nearby_lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nearby_lane_ids(i).data(), static_cast<int>(this->nearby_lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.ObjectFeature.nearby_lane_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(18, this->nearby_lane_ids(i), target);
  }

  // string enter_lane = 19;
  if (this->enter_lane().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->enter_lane().data(), static_cast<int>(this->enter_lane().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.ObjectFeature.enter_lane");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->enter_lane(), target);
  }

  // repeated .prediction_debug_msgs.Exit exits = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->exits(static_cast<int>(i)), deterministic, target);
  }

  // .prediction_debug_msgs.Exit off_lane_exit = 21;
  if (this->has_off_lane_exit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, *this->off_lane_exit_, deterministic, target);
  }

  // int32 evaluator_type = 22;
  if (this->evaluator_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->evaluator_type(), target);
  }

  // int32 sub_evaluator_type = 23;
  if (this->sub_evaluator_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->sub_evaluator_type(), target);
  }

  // int32 predictor_type = 24;
  if (this->predictor_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->predictor_type(), target);
  }

  // bool need_exception_handling = 25;
  if (this->need_exception_handling() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->need_exception_handling(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction_debug_msgs.ObjectFeature)
  return target;
}

size_t ObjectFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction_debug_msgs.ObjectFeature)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string current_lane_ids = 17;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->current_lane_ids_size());
  for (int i = 0, n = this->current_lane_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->current_lane_ids(i));
  }

  // repeated string nearby_lane_ids = 18;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->nearby_lane_ids_size());
  for (int i = 0, n = this->nearby_lane_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nearby_lane_ids(i));
  }

  // repeated .prediction_debug_msgs.Exit exits = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->exits_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->exits(static_cast<int>(i)));
    }
  }

  // string lane_id = 16;
  if (this->lane_id().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lane_id());
  }

  // string enter_lane = 19;
  if (this->enter_lane().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->enter_lane());
  }

  // .prediction_debug_msgs.Exit off_lane_exit = 21;
  if (this->has_off_lane_exit()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->off_lane_exit_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // double x = 3;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 4;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 5;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // double length = 6;
  if (this->length() != 0) {
    total_size += 1 + 8;
  }

  // double width = 7;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // double height = 8;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // double speed = 9;
  if (this->speed() != 0) {
    total_size += 1 + 8;
  }

  // double acc = 10;
  if (this->acc() != 0) {
    total_size += 1 + 8;
  }

  // double final_heading = 11;
  if (this->final_heading() != 0) {
    total_size += 1 + 8;
  }

  // int32 is_ultra_static = 14;
  if (this->is_ultra_static() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_ultra_static());
  }

  // int32 priority = 15;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  // bool is_static = 12;
  if (this->is_static() != 0) {
    total_size += 1 + 1;
  }

  // bool is_illegal = 13;
  if (this->is_illegal() != 0) {
    total_size += 1 + 1;
  }

  // bool need_exception_handling = 25;
  if (this->need_exception_handling() != 0) {
    total_size += 2 + 1;
  }

  // int32 evaluator_type = 22;
  if (this->evaluator_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->evaluator_type());
  }

  // int32 sub_evaluator_type = 23;
  if (this->sub_evaluator_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sub_evaluator_type());
  }

  // int32 predictor_type = 24;
  if (this->predictor_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->predictor_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction_debug_msgs.ObjectFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction_debug_msgs.ObjectFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction_debug_msgs.ObjectFeature)
    MergeFrom(*source);
  }
}

void ObjectFeature::MergeFrom(const ObjectFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction_debug_msgs.ObjectFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  current_lane_ids_.MergeFrom(from.current_lane_ids_);
  nearby_lane_ids_.MergeFrom(from.nearby_lane_ids_);
  exits_.MergeFrom(from.exits_);
  if (from.lane_id().size() > 0) {

    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  if (from.enter_lane().size() > 0) {

    enter_lane_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enter_lane_);
  }
  if (from.has_off_lane_exit()) {
    mutable_off_lane_exit()->::prediction_debug_msgs::Exit::MergeFrom(from.off_lane_exit());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.acc() != 0) {
    set_acc(from.acc());
  }
  if (from.final_heading() != 0) {
    set_final_heading(from.final_heading());
  }
  if (from.is_ultra_static() != 0) {
    set_is_ultra_static(from.is_ultra_static());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.is_static() != 0) {
    set_is_static(from.is_static());
  }
  if (from.is_illegal() != 0) {
    set_is_illegal(from.is_illegal());
  }
  if (from.need_exception_handling() != 0) {
    set_need_exception_handling(from.need_exception_handling());
  }
  if (from.evaluator_type() != 0) {
    set_evaluator_type(from.evaluator_type());
  }
  if (from.sub_evaluator_type() != 0) {
    set_sub_evaluator_type(from.sub_evaluator_type());
  }
  if (from.predictor_type() != 0) {
    set_predictor_type(from.predictor_type());
  }
}

void ObjectFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction_debug_msgs.ObjectFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectFeature::CopyFrom(const ObjectFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction_debug_msgs.ObjectFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectFeature::IsInitialized() const {
  return true;
}

void ObjectFeature::Swap(ObjectFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectFeature::InternalSwap(ObjectFeature* other) {
  using std::swap;
  current_lane_ids_.InternalSwap(&other->current_lane_ids_);
  nearby_lane_ids_.InternalSwap(&other->nearby_lane_ids_);
  exits_.InternalSwap(&other->exits_);
  lane_id_.Swap(&other->lane_id_);
  enter_lane_.Swap(&other->enter_lane_);
  swap(off_lane_exit_, other->off_lane_exit_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(speed_, other->speed_);
  swap(acc_, other->acc_);
  swap(final_heading_, other->final_heading_);
  swap(is_ultra_static_, other->is_ultra_static_);
  swap(priority_, other->priority_);
  swap(is_static_, other->is_static_);
  swap(is_illegal_, other->is_illegal_);
  swap(need_exception_handling_, other->need_exception_handling_);
  swap(evaluator_type_, other->evaluator_type_);
  swap(sub_evaluator_type_, other->sub_evaluator_type_);
  swap(predictor_type_, other->predictor_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectFeature::GetMetadata() const {
  protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SingleInteractiveCrossWalkInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SingleInteractiveCrossWalkInfo::kLightIdFieldNumber;
const int SingleInteractiveCrossWalkInfo::kCrosswalksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SingleInteractiveCrossWalkInfo::SingleInteractiveCrossWalkInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsSingleInteractiveCrossWalkInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction_debug_msgs.SingleInteractiveCrossWalkInfo)
}
SingleInteractiveCrossWalkInfo::SingleInteractiveCrossWalkInfo(const SingleInteractiveCrossWalkInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      crosswalks_(from.crosswalks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  light_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.light_id().size() > 0) {
    light_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.light_id_);
  }
  // @@protoc_insertion_point(copy_constructor:prediction_debug_msgs.SingleInteractiveCrossWalkInfo)
}

void SingleInteractiveCrossWalkInfo::SharedCtor() {
  light_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SingleInteractiveCrossWalkInfo::~SingleInteractiveCrossWalkInfo() {
  // @@protoc_insertion_point(destructor:prediction_debug_msgs.SingleInteractiveCrossWalkInfo)
  SharedDtor();
}

void SingleInteractiveCrossWalkInfo::SharedDtor() {
  light_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SingleInteractiveCrossWalkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleInteractiveCrossWalkInfo::descriptor() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SingleInteractiveCrossWalkInfo& SingleInteractiveCrossWalkInfo::default_instance() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsSingleInteractiveCrossWalkInfo();
  return *internal_default_instance();
}

SingleInteractiveCrossWalkInfo* SingleInteractiveCrossWalkInfo::New(::google::protobuf::Arena* arena) const {
  SingleInteractiveCrossWalkInfo* n = new SingleInteractiveCrossWalkInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SingleInteractiveCrossWalkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction_debug_msgs.SingleInteractiveCrossWalkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crosswalks_.Clear();
  light_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SingleInteractiveCrossWalkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction_debug_msgs.SingleInteractiveCrossWalkInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string light_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_light_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->light_id().data(), static_cast<int>(this->light_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prediction_debug_msgs.SingleInteractiveCrossWalkInfo.light_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .prediction_debug_msgs.InteractiveCrossWalkInfo crosswalks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_crosswalks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction_debug_msgs.SingleInteractiveCrossWalkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction_debug_msgs.SingleInteractiveCrossWalkInfo)
  return false;
#undef DO_
}

void SingleInteractiveCrossWalkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction_debug_msgs.SingleInteractiveCrossWalkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string light_id = 1;
  if (this->light_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->light_id().data(), static_cast<int>(this->light_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.SingleInteractiveCrossWalkInfo.light_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->light_id(), output);
  }

  // repeated .prediction_debug_msgs.InteractiveCrossWalkInfo crosswalks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crosswalks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->crosswalks(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction_debug_msgs.SingleInteractiveCrossWalkInfo)
}

::google::protobuf::uint8* SingleInteractiveCrossWalkInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prediction_debug_msgs.SingleInteractiveCrossWalkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string light_id = 1;
  if (this->light_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->light_id().data(), static_cast<int>(this->light_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.SingleInteractiveCrossWalkInfo.light_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->light_id(), target);
  }

  // repeated .prediction_debug_msgs.InteractiveCrossWalkInfo crosswalks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crosswalks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->crosswalks(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction_debug_msgs.SingleInteractiveCrossWalkInfo)
  return target;
}

size_t SingleInteractiveCrossWalkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction_debug_msgs.SingleInteractiveCrossWalkInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .prediction_debug_msgs.InteractiveCrossWalkInfo crosswalks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->crosswalks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->crosswalks(static_cast<int>(i)));
    }
  }

  // string light_id = 1;
  if (this->light_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->light_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleInteractiveCrossWalkInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction_debug_msgs.SingleInteractiveCrossWalkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleInteractiveCrossWalkInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleInteractiveCrossWalkInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction_debug_msgs.SingleInteractiveCrossWalkInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction_debug_msgs.SingleInteractiveCrossWalkInfo)
    MergeFrom(*source);
  }
}

void SingleInteractiveCrossWalkInfo::MergeFrom(const SingleInteractiveCrossWalkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction_debug_msgs.SingleInteractiveCrossWalkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  crosswalks_.MergeFrom(from.crosswalks_);
  if (from.light_id().size() > 0) {

    light_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.light_id_);
  }
}

void SingleInteractiveCrossWalkInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction_debug_msgs.SingleInteractiveCrossWalkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleInteractiveCrossWalkInfo::CopyFrom(const SingleInteractiveCrossWalkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction_debug_msgs.SingleInteractiveCrossWalkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleInteractiveCrossWalkInfo::IsInitialized() const {
  return true;
}

void SingleInteractiveCrossWalkInfo::Swap(SingleInteractiveCrossWalkInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleInteractiveCrossWalkInfo::InternalSwap(SingleInteractiveCrossWalkInfo* other) {
  using std::swap;
  crosswalks_.InternalSwap(&other->crosswalks_);
  light_id_.Swap(&other->light_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SingleInteractiveCrossWalkInfo::GetMetadata() const {
  protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SingleInteractiveLaneInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SingleInteractiveLaneInfo::kLightIdFieldNumber;
const int SingleInteractiveLaneInfo::kCrossLanesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SingleInteractiveLaneInfo::SingleInteractiveLaneInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsSingleInteractiveLaneInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction_debug_msgs.SingleInteractiveLaneInfo)
}
SingleInteractiveLaneInfo::SingleInteractiveLaneInfo(const SingleInteractiveLaneInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cross_lanes_(from.cross_lanes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  light_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.light_id().size() > 0) {
    light_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.light_id_);
  }
  // @@protoc_insertion_point(copy_constructor:prediction_debug_msgs.SingleInteractiveLaneInfo)
}

void SingleInteractiveLaneInfo::SharedCtor() {
  light_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SingleInteractiveLaneInfo::~SingleInteractiveLaneInfo() {
  // @@protoc_insertion_point(destructor:prediction_debug_msgs.SingleInteractiveLaneInfo)
  SharedDtor();
}

void SingleInteractiveLaneInfo::SharedDtor() {
  light_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SingleInteractiveLaneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleInteractiveLaneInfo::descriptor() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SingleInteractiveLaneInfo& SingleInteractiveLaneInfo::default_instance() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsSingleInteractiveLaneInfo();
  return *internal_default_instance();
}

SingleInteractiveLaneInfo* SingleInteractiveLaneInfo::New(::google::protobuf::Arena* arena) const {
  SingleInteractiveLaneInfo* n = new SingleInteractiveLaneInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SingleInteractiveLaneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction_debug_msgs.SingleInteractiveLaneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cross_lanes_.Clear();
  light_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SingleInteractiveLaneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction_debug_msgs.SingleInteractiveLaneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string light_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_light_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->light_id().data(), static_cast<int>(this->light_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prediction_debug_msgs.SingleInteractiveLaneInfo.light_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .prediction_debug_msgs.InteractiveLaneInfo cross_lanes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_cross_lanes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction_debug_msgs.SingleInteractiveLaneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction_debug_msgs.SingleInteractiveLaneInfo)
  return false;
#undef DO_
}

void SingleInteractiveLaneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction_debug_msgs.SingleInteractiveLaneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string light_id = 1;
  if (this->light_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->light_id().data(), static_cast<int>(this->light_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.SingleInteractiveLaneInfo.light_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->light_id(), output);
  }

  // repeated .prediction_debug_msgs.InteractiveLaneInfo cross_lanes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cross_lanes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cross_lanes(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction_debug_msgs.SingleInteractiveLaneInfo)
}

::google::protobuf::uint8* SingleInteractiveLaneInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prediction_debug_msgs.SingleInteractiveLaneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string light_id = 1;
  if (this->light_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->light_id().data(), static_cast<int>(this->light_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.SingleInteractiveLaneInfo.light_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->light_id(), target);
  }

  // repeated .prediction_debug_msgs.InteractiveLaneInfo cross_lanes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cross_lanes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->cross_lanes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction_debug_msgs.SingleInteractiveLaneInfo)
  return target;
}

size_t SingleInteractiveLaneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction_debug_msgs.SingleInteractiveLaneInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .prediction_debug_msgs.InteractiveLaneInfo cross_lanes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->cross_lanes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cross_lanes(static_cast<int>(i)));
    }
  }

  // string light_id = 1;
  if (this->light_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->light_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleInteractiveLaneInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction_debug_msgs.SingleInteractiveLaneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleInteractiveLaneInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleInteractiveLaneInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction_debug_msgs.SingleInteractiveLaneInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction_debug_msgs.SingleInteractiveLaneInfo)
    MergeFrom(*source);
  }
}

void SingleInteractiveLaneInfo::MergeFrom(const SingleInteractiveLaneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction_debug_msgs.SingleInteractiveLaneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cross_lanes_.MergeFrom(from.cross_lanes_);
  if (from.light_id().size() > 0) {

    light_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.light_id_);
  }
}

void SingleInteractiveLaneInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction_debug_msgs.SingleInteractiveLaneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleInteractiveLaneInfo::CopyFrom(const SingleInteractiveLaneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction_debug_msgs.SingleInteractiveLaneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleInteractiveLaneInfo::IsInitialized() const {
  return true;
}

void SingleInteractiveLaneInfo::Swap(SingleInteractiveLaneInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleInteractiveLaneInfo::InternalSwap(SingleInteractiveLaneInfo* other) {
  using std::swap;
  cross_lanes_.InternalSwap(&other->cross_lanes_);
  light_id_.Swap(&other->light_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SingleInteractiveLaneInfo::GetMetadata() const {
  protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficLightFeature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightFeature::kLightIdFieldNumber;
const int TrafficLightFeature::kLaneIdFieldNumber;
const int TrafficLightFeature::kLaneTurnFieldNumber;
const int TrafficLightFeature::kSignalTypeFieldNumber;
const int TrafficLightFeature::kLastColorFieldNumber;
const int TrafficLightFeature::kCurrentColorFieldNumber;
const int TrafficLightFeature::kDetectKeepFramesFieldNumber;
const int TrafficLightFeature::kInferKeepFramesFieldNumber;
const int TrafficLightFeature::kIsSeenFieldNumber;
const int TrafficLightFeature::kIsPassableFieldNumber;
const int TrafficLightFeature::kAssociatedLaneIdsFieldNumber;
const int TrafficLightFeature::kStartHeadingFieldNumber;
const int TrafficLightFeature::kEndHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightFeature::TrafficLightFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsTrafficLightFeature();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction_debug_msgs.TrafficLightFeature)
}
TrafficLightFeature::TrafficLightFeature(const TrafficLightFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      associated_lane_ids_(from.associated_lane_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  light_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.light_id().size() > 0) {
    light_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.light_id_);
  }
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lane_id().size() > 0) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&lane_turn_, &from.lane_turn_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_passable_) -
    reinterpret_cast<char*>(&lane_turn_)) + sizeof(is_passable_));
  // @@protoc_insertion_point(copy_constructor:prediction_debug_msgs.TrafficLightFeature)
}

void TrafficLightFeature::SharedCtor() {
  light_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lane_turn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_passable_) -
      reinterpret_cast<char*>(&lane_turn_)) + sizeof(is_passable_));
  _cached_size_ = 0;
}

TrafficLightFeature::~TrafficLightFeature() {
  // @@protoc_insertion_point(destructor:prediction_debug_msgs.TrafficLightFeature)
  SharedDtor();
}

void TrafficLightFeature::SharedDtor() {
  light_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrafficLightFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLightFeature::descriptor() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightFeature& TrafficLightFeature::default_instance() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsTrafficLightFeature();
  return *internal_default_instance();
}

TrafficLightFeature* TrafficLightFeature::New(::google::protobuf::Arena* arena) const {
  TrafficLightFeature* n = new TrafficLightFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLightFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction_debug_msgs.TrafficLightFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  associated_lane_ids_.Clear();
  light_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lane_turn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_passable_) -
      reinterpret_cast<char*>(&lane_turn_)) + sizeof(is_passable_));
  _internal_metadata_.Clear();
}

bool TrafficLightFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction_debug_msgs.TrafficLightFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string light_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_light_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->light_id().data(), static_cast<int>(this->light_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prediction_debug_msgs.TrafficLightFeature.light_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lane_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prediction_debug_msgs.TrafficLightFeature.lane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_turn = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_turn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 signal_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signal_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 last_color = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 current_color = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 detect_keep_frames = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &detect_keep_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 infer_keep_frames = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infer_keep_frames_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_seen = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_seen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_passable = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string associated_lane_ids = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_associated_lane_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->associated_lane_ids(this->associated_lane_ids_size() - 1).data(),
            static_cast<int>(this->associated_lane_ids(this->associated_lane_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prediction_debug_msgs.TrafficLightFeature.associated_lane_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_heading = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double end_heading = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction_debug_msgs.TrafficLightFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction_debug_msgs.TrafficLightFeature)
  return false;
#undef DO_
}

void TrafficLightFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction_debug_msgs.TrafficLightFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string light_id = 1;
  if (this->light_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->light_id().data(), static_cast<int>(this->light_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.TrafficLightFeature.light_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->light_id(), output);
  }

  // string lane_id = 2;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.TrafficLightFeature.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lane_id(), output);
  }

  // int32 lane_turn = 3;
  if (this->lane_turn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lane_turn(), output);
  }

  // int32 signal_type = 4;
  if (this->signal_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->signal_type(), output);
  }

  // int32 last_color = 5;
  if (this->last_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->last_color(), output);
  }

  // int32 current_color = 6;
  if (this->current_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->current_color(), output);
  }

  // int32 detect_keep_frames = 7;
  if (this->detect_keep_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->detect_keep_frames(), output);
  }

  // int32 infer_keep_frames = 8;
  if (this->infer_keep_frames() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->infer_keep_frames(), output);
  }

  // bool is_seen = 9;
  if (this->is_seen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_seen(), output);
  }

  // bool is_passable = 10;
  if (this->is_passable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_passable(), output);
  }

  // repeated string associated_lane_ids = 11;
  for (int i = 0, n = this->associated_lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->associated_lane_ids(i).data(), static_cast<int>(this->associated_lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.TrafficLightFeature.associated_lane_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->associated_lane_ids(i), output);
  }

  // double start_heading = 12;
  if (this->start_heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->start_heading(), output);
  }

  // double end_heading = 13;
  if (this->end_heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->end_heading(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction_debug_msgs.TrafficLightFeature)
}

::google::protobuf::uint8* TrafficLightFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prediction_debug_msgs.TrafficLightFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string light_id = 1;
  if (this->light_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->light_id().data(), static_cast<int>(this->light_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.TrafficLightFeature.light_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->light_id(), target);
  }

  // string lane_id = 2;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.TrafficLightFeature.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lane_id(), target);
  }

  // int32 lane_turn = 3;
  if (this->lane_turn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lane_turn(), target);
  }

  // int32 signal_type = 4;
  if (this->signal_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->signal_type(), target);
  }

  // int32 last_color = 5;
  if (this->last_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->last_color(), target);
  }

  // int32 current_color = 6;
  if (this->current_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->current_color(), target);
  }

  // int32 detect_keep_frames = 7;
  if (this->detect_keep_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->detect_keep_frames(), target);
  }

  // int32 infer_keep_frames = 8;
  if (this->infer_keep_frames() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->infer_keep_frames(), target);
  }

  // bool is_seen = 9;
  if (this->is_seen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_seen(), target);
  }

  // bool is_passable = 10;
  if (this->is_passable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_passable(), target);
  }

  // repeated string associated_lane_ids = 11;
  for (int i = 0, n = this->associated_lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->associated_lane_ids(i).data(), static_cast<int>(this->associated_lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.TrafficLightFeature.associated_lane_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->associated_lane_ids(i), target);
  }

  // double start_heading = 12;
  if (this->start_heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->start_heading(), target);
  }

  // double end_heading = 13;
  if (this->end_heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->end_heading(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction_debug_msgs.TrafficLightFeature)
  return target;
}

size_t TrafficLightFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction_debug_msgs.TrafficLightFeature)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string associated_lane_ids = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->associated_lane_ids_size());
  for (int i = 0, n = this->associated_lane_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->associated_lane_ids(i));
  }

  // string light_id = 1;
  if (this->light_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->light_id());
  }

  // string lane_id = 2;
  if (this->lane_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lane_id());
  }

  // int32 lane_turn = 3;
  if (this->lane_turn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_turn());
  }

  // int32 signal_type = 4;
  if (this->signal_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->signal_type());
  }

  // int32 last_color = 5;
  if (this->last_color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_color());
  }

  // int32 current_color = 6;
  if (this->current_color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_color());
  }

  // int32 detect_keep_frames = 7;
  if (this->detect_keep_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->detect_keep_frames());
  }

  // int32 infer_keep_frames = 8;
  if (this->infer_keep_frames() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->infer_keep_frames());
  }

  // double start_heading = 12;
  if (this->start_heading() != 0) {
    total_size += 1 + 8;
  }

  // double end_heading = 13;
  if (this->end_heading() != 0) {
    total_size += 1 + 8;
  }

  // bool is_seen = 9;
  if (this->is_seen() != 0) {
    total_size += 1 + 1;
  }

  // bool is_passable = 10;
  if (this->is_passable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLightFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction_debug_msgs.TrafficLightFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction_debug_msgs.TrafficLightFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction_debug_msgs.TrafficLightFeature)
    MergeFrom(*source);
  }
}

void TrafficLightFeature::MergeFrom(const TrafficLightFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction_debug_msgs.TrafficLightFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  associated_lane_ids_.MergeFrom(from.associated_lane_ids_);
  if (from.light_id().size() > 0) {

    light_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.light_id_);
  }
  if (from.lane_id().size() > 0) {

    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  if (from.lane_turn() != 0) {
    set_lane_turn(from.lane_turn());
  }
  if (from.signal_type() != 0) {
    set_signal_type(from.signal_type());
  }
  if (from.last_color() != 0) {
    set_last_color(from.last_color());
  }
  if (from.current_color() != 0) {
    set_current_color(from.current_color());
  }
  if (from.detect_keep_frames() != 0) {
    set_detect_keep_frames(from.detect_keep_frames());
  }
  if (from.infer_keep_frames() != 0) {
    set_infer_keep_frames(from.infer_keep_frames());
  }
  if (from.start_heading() != 0) {
    set_start_heading(from.start_heading());
  }
  if (from.end_heading() != 0) {
    set_end_heading(from.end_heading());
  }
  if (from.is_seen() != 0) {
    set_is_seen(from.is_seen());
  }
  if (from.is_passable() != 0) {
    set_is_passable(from.is_passable());
  }
}

void TrafficLightFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction_debug_msgs.TrafficLightFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightFeature::CopyFrom(const TrafficLightFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction_debug_msgs.TrafficLightFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightFeature::IsInitialized() const {
  return true;
}

void TrafficLightFeature::Swap(TrafficLightFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightFeature::InternalSwap(TrafficLightFeature* other) {
  using std::swap;
  associated_lane_ids_.InternalSwap(&other->associated_lane_ids_);
  light_id_.Swap(&other->light_id_);
  lane_id_.Swap(&other->lane_id_);
  swap(lane_turn_, other->lane_turn_);
  swap(signal_type_, other->signal_type_);
  swap(last_color_, other->last_color_);
  swap(current_color_, other->current_color_);
  swap(detect_keep_frames_, other->detect_keep_frames_);
  swap(infer_keep_frames_, other->infer_keep_frames_);
  swap(start_heading_, other->start_heading_);
  swap(end_heading_, other->end_heading_);
  swap(is_seen_, other->is_seen_);
  swap(is_passable_, other->is_passable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLightFeature::GetMetadata() const {
  protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SignalFeature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignalFeature::kCandidateLightsFieldNumber;
const int SignalFeature::kAssistantLightsFieldNumber;
const int SignalFeature::kCandidateCrossLanesFieldNumber;
const int SignalFeature::kCandidateCrosswalksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignalFeature::SignalFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsSignalFeature();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction_debug_msgs.SignalFeature)
}
SignalFeature::SignalFeature(const SignalFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      candidate_lights_(from.candidate_lights_),
      assistant_lights_(from.assistant_lights_),
      candidate_cross_lanes_(from.candidate_cross_lanes_),
      candidate_crosswalks_(from.candidate_crosswalks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:prediction_debug_msgs.SignalFeature)
}

void SignalFeature::SharedCtor() {
  _cached_size_ = 0;
}

SignalFeature::~SignalFeature() {
  // @@protoc_insertion_point(destructor:prediction_debug_msgs.SignalFeature)
  SharedDtor();
}

void SignalFeature::SharedDtor() {
}

void SignalFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalFeature::descriptor() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignalFeature& SignalFeature::default_instance() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsSignalFeature();
  return *internal_default_instance();
}

SignalFeature* SignalFeature::New(::google::protobuf::Arena* arena) const {
  SignalFeature* n = new SignalFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignalFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction_debug_msgs.SignalFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_lights_.Clear();
  assistant_lights_.Clear();
  candidate_cross_lanes_.Clear();
  candidate_crosswalks_.Clear();
  _internal_metadata_.Clear();
}

bool SignalFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction_debug_msgs.SignalFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .prediction_debug_msgs.TrafficLightFeature candidate_lights = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_candidate_lights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .prediction_debug_msgs.TrafficLightFeature assistant_lights = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_assistant_lights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .prediction_debug_msgs.SingleInteractiveLaneInfo candidate_cross_lanes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_candidate_cross_lanes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .prediction_debug_msgs.SingleInteractiveCrossWalkInfo candidate_crosswalks = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_candidate_crosswalks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction_debug_msgs.SignalFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction_debug_msgs.SignalFeature)
  return false;
#undef DO_
}

void SignalFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction_debug_msgs.SignalFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prediction_debug_msgs.TrafficLightFeature candidate_lights = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_lights_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->candidate_lights(static_cast<int>(i)), output);
  }

  // repeated .prediction_debug_msgs.TrafficLightFeature assistant_lights = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assistant_lights_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->assistant_lights(static_cast<int>(i)), output);
  }

  // repeated .prediction_debug_msgs.SingleInteractiveLaneInfo candidate_cross_lanes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_cross_lanes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->candidate_cross_lanes(static_cast<int>(i)), output);
  }

  // repeated .prediction_debug_msgs.SingleInteractiveCrossWalkInfo candidate_crosswalks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_crosswalks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->candidate_crosswalks(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction_debug_msgs.SignalFeature)
}

::google::protobuf::uint8* SignalFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prediction_debug_msgs.SignalFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prediction_debug_msgs.TrafficLightFeature candidate_lights = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_lights_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->candidate_lights(static_cast<int>(i)), deterministic, target);
  }

  // repeated .prediction_debug_msgs.TrafficLightFeature assistant_lights = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assistant_lights_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->assistant_lights(static_cast<int>(i)), deterministic, target);
  }

  // repeated .prediction_debug_msgs.SingleInteractiveLaneInfo candidate_cross_lanes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_cross_lanes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->candidate_cross_lanes(static_cast<int>(i)), deterministic, target);
  }

  // repeated .prediction_debug_msgs.SingleInteractiveCrossWalkInfo candidate_crosswalks = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_crosswalks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->candidate_crosswalks(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction_debug_msgs.SignalFeature)
  return target;
}

size_t SignalFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction_debug_msgs.SignalFeature)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .prediction_debug_msgs.TrafficLightFeature candidate_lights = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->candidate_lights_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->candidate_lights(static_cast<int>(i)));
    }
  }

  // repeated .prediction_debug_msgs.TrafficLightFeature assistant_lights = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->assistant_lights_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->assistant_lights(static_cast<int>(i)));
    }
  }

  // repeated .prediction_debug_msgs.SingleInteractiveLaneInfo candidate_cross_lanes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->candidate_cross_lanes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->candidate_cross_lanes(static_cast<int>(i)));
    }
  }

  // repeated .prediction_debug_msgs.SingleInteractiveCrossWalkInfo candidate_crosswalks = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->candidate_crosswalks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->candidate_crosswalks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction_debug_msgs.SignalFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignalFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction_debug_msgs.SignalFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction_debug_msgs.SignalFeature)
    MergeFrom(*source);
  }
}

void SignalFeature::MergeFrom(const SignalFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction_debug_msgs.SignalFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidate_lights_.MergeFrom(from.candidate_lights_);
  assistant_lights_.MergeFrom(from.assistant_lights_);
  candidate_cross_lanes_.MergeFrom(from.candidate_cross_lanes_);
  candidate_crosswalks_.MergeFrom(from.candidate_crosswalks_);
}

void SignalFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction_debug_msgs.SignalFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalFeature::CopyFrom(const SignalFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction_debug_msgs.SignalFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalFeature::IsInitialized() const {
  return true;
}

void SignalFeature::Swap(SignalFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignalFeature::InternalSwap(SignalFeature* other) {
  using std::swap;
  candidate_lights_.InternalSwap(&other->candidate_lights_);
  assistant_lights_.InternalSwap(&other->assistant_lights_);
  candidate_cross_lanes_.InternalSwap(&other->candidate_cross_lanes_);
  candidate_crosswalks_.InternalSwap(&other->candidate_crosswalks_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignalFeature::GetMetadata() const {
  protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObjectsFeature::InitAsDefaultInstance() {
  ::prediction_debug_msgs::_ObjectsFeature_default_instance_._instance.get_mutable()->self_pos_feature_ = const_cast< ::prediction_debug_msgs::ObjectFeature*>(
      ::prediction_debug_msgs::ObjectFeature::internal_default_instance());
  ::prediction_debug_msgs::_ObjectsFeature_default_instance_._instance.get_mutable()->signal_feature_ = const_cast< ::prediction_debug_msgs::SignalFeature*>(
      ::prediction_debug_msgs::SignalFeature::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectsFeature::kSelfPosFeatureFieldNumber;
const int ObjectsFeature::kObjectsFeatureFieldNumber;
const int ObjectsFeature::kSignalFeatureFieldNumber;
const int ObjectsFeature::kCostTimeFieldNumber;
const int ObjectsFeature::kErrMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectsFeature::ObjectsFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsObjectsFeature();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:prediction_debug_msgs.ObjectsFeature)
}
ObjectsFeature::ObjectsFeature(const ObjectsFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      objects_feature_(from.objects_feature_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  err_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.err_msg().size() > 0) {
    err_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_msg_);
  }
  if (from.has_self_pos_feature()) {
    self_pos_feature_ = new ::prediction_debug_msgs::ObjectFeature(*from.self_pos_feature_);
  } else {
    self_pos_feature_ = NULL;
  }
  if (from.has_signal_feature()) {
    signal_feature_ = new ::prediction_debug_msgs::SignalFeature(*from.signal_feature_);
  } else {
    signal_feature_ = NULL;
  }
  cost_time_ = from.cost_time_;
  // @@protoc_insertion_point(copy_constructor:prediction_debug_msgs.ObjectsFeature)
}

void ObjectsFeature::SharedCtor() {
  err_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&self_pos_feature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_time_) -
      reinterpret_cast<char*>(&self_pos_feature_)) + sizeof(cost_time_));
  _cached_size_ = 0;
}

ObjectsFeature::~ObjectsFeature() {
  // @@protoc_insertion_point(destructor:prediction_debug_msgs.ObjectsFeature)
  SharedDtor();
}

void ObjectsFeature::SharedDtor() {
  err_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete self_pos_feature_;
  if (this != internal_default_instance()) delete signal_feature_;
}

void ObjectsFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectsFeature::descriptor() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectsFeature& ObjectsFeature::default_instance() {
  ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsObjectsFeature();
  return *internal_default_instance();
}

ObjectsFeature* ObjectsFeature::New(::google::protobuf::Arena* arena) const {
  ObjectsFeature* n = new ObjectsFeature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectsFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:prediction_debug_msgs.ObjectsFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_feature_.Clear();
  err_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && self_pos_feature_ != NULL) {
    delete self_pos_feature_;
  }
  self_pos_feature_ = NULL;
  if (GetArenaNoVirtual() == NULL && signal_feature_ != NULL) {
    delete signal_feature_;
  }
  signal_feature_ = NULL;
  cost_time_ = 0;
  _internal_metadata_.Clear();
}

bool ObjectsFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:prediction_debug_msgs.ObjectsFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .prediction_debug_msgs.ObjectFeature self_pos_feature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_self_pos_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .prediction_debug_msgs.ObjectFeature objects_feature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_objects_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .prediction_debug_msgs.SignalFeature signal_feature = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signal_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cost_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cost_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string err_msg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->err_msg().data(), static_cast<int>(this->err_msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "prediction_debug_msgs.ObjectsFeature.err_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:prediction_debug_msgs.ObjectsFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:prediction_debug_msgs.ObjectsFeature)
  return false;
#undef DO_
}

void ObjectsFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:prediction_debug_msgs.ObjectsFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .prediction_debug_msgs.ObjectFeature self_pos_feature = 1;
  if (this->has_self_pos_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->self_pos_feature_, output);
  }

  // repeated .prediction_debug_msgs.ObjectFeature objects_feature = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_feature_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objects_feature(static_cast<int>(i)), output);
  }

  // .prediction_debug_msgs.SignalFeature signal_feature = 3;
  if (this->has_signal_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->signal_feature_, output);
  }

  // double cost_time = 4;
  if (this->cost_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->cost_time(), output);
  }

  // string err_msg = 5;
  if (this->err_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err_msg().data(), static_cast<int>(this->err_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.ObjectsFeature.err_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->err_msg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:prediction_debug_msgs.ObjectsFeature)
}

::google::protobuf::uint8* ObjectsFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:prediction_debug_msgs.ObjectsFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .prediction_debug_msgs.ObjectFeature self_pos_feature = 1;
  if (this->has_self_pos_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->self_pos_feature_, deterministic, target);
  }

  // repeated .prediction_debug_msgs.ObjectFeature objects_feature = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_feature_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->objects_feature(static_cast<int>(i)), deterministic, target);
  }

  // .prediction_debug_msgs.SignalFeature signal_feature = 3;
  if (this->has_signal_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->signal_feature_, deterministic, target);
  }

  // double cost_time = 4;
  if (this->cost_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->cost_time(), target);
  }

  // string err_msg = 5;
  if (this->err_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err_msg().data(), static_cast<int>(this->err_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "prediction_debug_msgs.ObjectsFeature.err_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->err_msg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prediction_debug_msgs.ObjectsFeature)
  return target;
}

size_t ObjectsFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prediction_debug_msgs.ObjectsFeature)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .prediction_debug_msgs.ObjectFeature objects_feature = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->objects_feature_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->objects_feature(static_cast<int>(i)));
    }
  }

  // string err_msg = 5;
  if (this->err_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->err_msg());
  }

  // .prediction_debug_msgs.ObjectFeature self_pos_feature = 1;
  if (this->has_self_pos_feature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->self_pos_feature_);
  }

  // .prediction_debug_msgs.SignalFeature signal_feature = 3;
  if (this->has_signal_feature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->signal_feature_);
  }

  // double cost_time = 4;
  if (this->cost_time() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectsFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prediction_debug_msgs.ObjectsFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectsFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectsFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prediction_debug_msgs.ObjectsFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prediction_debug_msgs.ObjectsFeature)
    MergeFrom(*source);
  }
}

void ObjectsFeature::MergeFrom(const ObjectsFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prediction_debug_msgs.ObjectsFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_feature_.MergeFrom(from.objects_feature_);
  if (from.err_msg().size() > 0) {

    err_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_msg_);
  }
  if (from.has_self_pos_feature()) {
    mutable_self_pos_feature()->::prediction_debug_msgs::ObjectFeature::MergeFrom(from.self_pos_feature());
  }
  if (from.has_signal_feature()) {
    mutable_signal_feature()->::prediction_debug_msgs::SignalFeature::MergeFrom(from.signal_feature());
  }
  if (from.cost_time() != 0) {
    set_cost_time(from.cost_time());
  }
}

void ObjectsFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prediction_debug_msgs.ObjectsFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectsFeature::CopyFrom(const ObjectsFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prediction_debug_msgs.ObjectsFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectsFeature::IsInitialized() const {
  return true;
}

void ObjectsFeature::Swap(ObjectsFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectsFeature::InternalSwap(ObjectsFeature* other) {
  using std::swap;
  objects_feature_.InternalSwap(&other->objects_feature_);
  err_msg_.Swap(&other->err_msg_);
  swap(self_pos_feature_, other->self_pos_feature_);
  swap(signal_feature_, other->signal_feature_);
  swap(cost_time_, other->cost_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectsFeature::GetMetadata() const {
  protobuf_prediction_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_prediction_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction_debug_msgs

// @@protoc_insertion_point(global_scope)
