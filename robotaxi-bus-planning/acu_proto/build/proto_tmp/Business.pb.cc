// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Business.proto

#include "Business.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace business {
namespace proto {
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
class LocPosDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocPos>
      _instance;
} _LocPos_default_instance_;
class BusinessStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BusinessStatus>
      _instance;
} _BusinessStatus_default_instance_;
class BusinessCmdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BusinessCmd>
      _instance;
} _BusinessCmd_default_instance_;
}  // namespace proto
}  // namespace business
namespace protobuf_Business_2eproto {
void InitDefaultsHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::business::proto::_Header_default_instance_;
    new (ptr) ::business::proto::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::business::proto::Header::InitAsDefaultInstance();
}

void InitDefaultsHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHeaderImpl);
}

void InitDefaultsLocPosImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::business::proto::_LocPos_default_instance_;
    new (ptr) ::business::proto::LocPos();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::business::proto::LocPos::InitAsDefaultInstance();
}

void InitDefaultsLocPos() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLocPosImpl);
}

void InitDefaultsBusinessStatusImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Business_2eproto::InitDefaultsHeader();
  protobuf_Business_2eproto::InitDefaultsLocPos();
  {
    void* ptr = &::business::proto::_BusinessStatus_default_instance_;
    new (ptr) ::business::proto::BusinessStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::business::proto::BusinessStatus::InitAsDefaultInstance();
}

void InitDefaultsBusinessStatus() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBusinessStatusImpl);
}

void InitDefaultsBusinessCmdImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::business::proto::_BusinessCmd_default_instance_;
    new (ptr) ::business::proto::BusinessCmd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::business::proto::BusinessCmd::InitAsDefaultInstance();
}

void InitDefaultsBusinessCmd() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBusinessCmdImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::Header, timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::Header, module_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::Header, sequence_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::Header, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::LocPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::LocPos, xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::LocPos, yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::LocPos, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::LocPos, lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::LocPos, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::LocPos, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::LocPos, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::LocPos, loc_fault_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::LocPos, loc_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::LocPos, gps_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::LocPos, time_stamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessStatus, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessStatus, business_mode_st_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessStatus, task_st_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessStatus, auto_ready_st_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessStatus, task_total_mileage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessStatus, task_remain_mileage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessStatus, cur_mission_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessStatus, task_dist2nextstop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessStatus, locpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessStatus, ad_mode_disp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessStatus, ad_sysstat_disp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, brake_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, tail_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, double_flash_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, low_beam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, high_beam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, auto_horn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, front_fog_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, rear_fog_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, wiper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, doorlock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, turn_left_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, turn_right_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, steer_ctrl_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, accl_ctrl_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, brak_ctrl_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, ebp_ctrl_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, bcm_ctrl_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, recovery_brak_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, ambient_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, roof_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::business::proto::BusinessCmd, washer_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::business::proto::Header)},
  { 9, -1, sizeof(::business::proto::LocPos)},
  { 25, -1, sizeof(::business::proto::BusinessStatus)},
  { 41, -1, sizeof(::business::proto::BusinessCmd)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::business::proto::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::business::proto::_LocPos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::business::proto::_BusinessStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::business::proto::_BusinessCmd_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Business.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016Business.proto\022\016business.proto\"[\n\006Head"
      "er\022\025\n\rtimestamp_sec\030\001 \001(\001\022\023\n\013module_name"
      "\030\002 \001(\t\022\024\n\014sequence_num\030\003 \001(\r\022\017\n\007version\030"
      "\004 \001(\t\"\273\001\n\006LocPos\022\n\n\002xg\030\001 \001(\001\022\n\n\002yg\030\002 \001(\001"
      "\022\013\n\003lat\030\003 \001(\001\022\013\n\003lon\030\004 \001(\001\022\t\n\001v\030\005 \001(\002\022\016\n"
      "\006height\030\006 \001(\002\022\017\n\007heading\030\007 \001(\002\022\027\n\017loc_fa"
      "ult_level\030\010 \001(\005\022\022\n\nloc_status\030\t \001(\005\022\022\n\ng"
      "ps_status\030\n \001(\005\022\022\n\ntime_stamp\030\013 \001(\002\"\276\002\n\016"
      "BusinessStatus\022&\n\006header\030\001 \001(\0132\026.busines"
      "s.proto.Header\022\030\n\020business_mode_st\030\002 \001(\005"
      "\022\017\n\007task_st\030\003 \001(\005\022\025\n\rauto_ready_st\030\004 \001(\005"
      "\022\032\n\022task_total_mileage\030\005 \001(\002\022\033\n\023task_rem"
      "ain_mileage\030\006 \001(\002\022\026\n\016cur_mission_id\030\007 \001("
      "\005\022\032\n\022task_dist2nextstop\030\010 \001(\002\022&\n\006locpos\030"
      "\t \001(\0132\026.business.proto.LocPos\022\024\n\014ad_mode"
      "_disp\030\n \001(\005\022\027\n\017ad_sysstat_disp\030\013 \001(\005\"\337\003\n"
      "\013BusinessCmd\022\023\n\013brake_light\030\001 \001(\005\022\022\n\ntai"
      "l_light\030\002 \001(\005\022\032\n\022double_flash_light\030\003 \001("
      "\005\022\020\n\010low_beam\030\004 \001(\005\022\021\n\thigh_beam\030\005 \001(\005\022\021"
      "\n\tauto_horn\030\006 \001(\005\022\027\n\017front_fog_light\030\007 \001"
      "(\005\022\026\n\016rear_fog_light\030\010 \001(\005\022\r\n\005wiper\030\t \001("
      "\005\022\020\n\010doorlock\030\n \001(\005\022\027\n\017turn_left_light\030\013"
      " \001(\005\022\030\n\020turn_right_light\030\014 \001(\005\022\027\n\017steer_"
      "ctrl_mode\030\r \001(\005\022\026\n\016accl_ctrl_mode\030\016 \001(\005\022"
      "\026\n\016brak_ctrl_mode\030\017 \001(\005\022\025\n\rebp_ctrl_mode"
      "\030\020 \001(\005\022\025\n\rbcm_ctrl_mode\030\021 \001(\005\022\034\n\024recover"
      "y_brak_enable\030\022 \001(\005\022\025\n\rambient_light\030\023 \001"
      "(\005\022\022\n\nroof_light\030\024 \001(\005\022\016\n\006washer\030\025 \001(\005b\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1126);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Business.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Business_2eproto
namespace business {
namespace proto {

// ===================================================================

void Header::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kTimestampSecFieldNumber;
const int Header::kModuleNameFieldNumber;
const int Header::kSequenceNumFieldNumber;
const int Header::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Business_2eproto::InitDefaultsHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:business.proto.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.module_name().size() > 0) {
    module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&timestamp_sec_, &from.timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_num_) -
    reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(sequence_num_));
  // @@protoc_insertion_point(copy_constructor:business.proto.Header)
}

void Header::SharedCtor() {
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_num_) -
      reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(sequence_num_));
  _cached_size_ = 0;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:business.proto.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  module_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_Business_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Business_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::protobuf_Business_2eproto::InitDefaultsHeader();
  return *internal_default_instance();
}

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:business.proto.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_num_) -
      reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(sequence_num_));
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:business.proto.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string module_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->module_name().data(), static_cast<int>(this->module_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "business.proto.Header.module_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sequence_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "business.proto.Header.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:business.proto.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:business.proto.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:business.proto.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp_sec = 1;
  if (this->timestamp_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp_sec(), output);
  }

  // string module_name = 2;
  if (this->module_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_name().data(), static_cast<int>(this->module_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "business.proto.Header.module_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->module_name(), output);
  }

  // uint32 sequence_num = 3;
  if (this->sequence_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence_num(), output);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "business.proto.Header.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:business.proto.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:business.proto.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp_sec = 1;
  if (this->timestamp_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp_sec(), target);
  }

  // string module_name = 2;
  if (this->module_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_name().data(), static_cast<int>(this->module_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "business.proto.Header.module_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->module_name(), target);
  }

  // uint32 sequence_num = 3;
  if (this->sequence_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence_num(), target);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "business.proto.Header.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:business.proto.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:business.proto.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string module_name = 2;
  if (this->module_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->module_name());
  }

  // string version = 4;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // double timestamp_sec = 1;
  if (this->timestamp_sec() != 0) {
    total_size += 1 + 8;
  }

  // uint32 sequence_num = 3;
  if (this->sequence_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sequence_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:business.proto.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:business.proto.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:business.proto.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:business.proto.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.module_name().size() > 0) {

    module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.timestamp_sec() != 0) {
    set_timestamp_sec(from.timestamp_sec());
  }
  if (from.sequence_num() != 0) {
    set_sequence_num(from.sequence_num());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:business.proto.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:business.proto.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  module_name_.Swap(&other->module_name_);
  version_.Swap(&other->version_);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(sequence_num_, other->sequence_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_Business_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Business_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LocPos::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocPos::kXgFieldNumber;
const int LocPos::kYgFieldNumber;
const int LocPos::kLatFieldNumber;
const int LocPos::kLonFieldNumber;
const int LocPos::kVFieldNumber;
const int LocPos::kHeightFieldNumber;
const int LocPos::kHeadingFieldNumber;
const int LocPos::kLocFaultLevelFieldNumber;
const int LocPos::kLocStatusFieldNumber;
const int LocPos::kGpsStatusFieldNumber;
const int LocPos::kTimeStampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocPos::LocPos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Business_2eproto::InitDefaultsLocPos();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:business.proto.LocPos)
}
LocPos::LocPos(const LocPos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&xg_, &from.xg_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_stamp_) -
    reinterpret_cast<char*>(&xg_)) + sizeof(time_stamp_));
  // @@protoc_insertion_point(copy_constructor:business.proto.LocPos)
}

void LocPos::SharedCtor() {
  ::memset(&xg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_stamp_) -
      reinterpret_cast<char*>(&xg_)) + sizeof(time_stamp_));
  _cached_size_ = 0;
}

LocPos::~LocPos() {
  // @@protoc_insertion_point(destructor:business.proto.LocPos)
  SharedDtor();
}

void LocPos::SharedDtor() {
}

void LocPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocPos::descriptor() {
  ::protobuf_Business_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Business_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocPos& LocPos::default_instance() {
  ::protobuf_Business_2eproto::InitDefaultsLocPos();
  return *internal_default_instance();
}

LocPos* LocPos::New(::google::protobuf::Arena* arena) const {
  LocPos* n = new LocPos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocPos::Clear() {
// @@protoc_insertion_point(message_clear_start:business.proto.LocPos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&xg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_stamp_) -
      reinterpret_cast<char*>(&xg_)) + sizeof(time_stamp_));
  _internal_metadata_.Clear();
}

bool LocPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:business.proto.LocPos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double xg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lon = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float v = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 loc_fault_level = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loc_fault_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 loc_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loc_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gps_status = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gps_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time_stamp = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:business.proto.LocPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:business.proto.LocPos)
  return false;
#undef DO_
}

void LocPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:business.proto.LocPos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double xg = 1;
  if (this->xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->xg(), output);
  }

  // double yg = 2;
  if (this->yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->yg(), output);
  }

  // double lat = 3;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lat(), output);
  }

  // double lon = 4;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lon(), output);
  }

  // float v = 5;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->v(), output);
  }

  // float height = 6;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->height(), output);
  }

  // float heading = 7;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->heading(), output);
  }

  // int32 loc_fault_level = 8;
  if (this->loc_fault_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->loc_fault_level(), output);
  }

  // int32 loc_status = 9;
  if (this->loc_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->loc_status(), output);
  }

  // int32 gps_status = 10;
  if (this->gps_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gps_status(), output);
  }

  // float time_stamp = 11;
  if (this->time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->time_stamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:business.proto.LocPos)
}

::google::protobuf::uint8* LocPos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:business.proto.LocPos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double xg = 1;
  if (this->xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->xg(), target);
  }

  // double yg = 2;
  if (this->yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->yg(), target);
  }

  // double lat = 3;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lat(), target);
  }

  // double lon = 4;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lon(), target);
  }

  // float v = 5;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->v(), target);
  }

  // float height = 6;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->height(), target);
  }

  // float heading = 7;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->heading(), target);
  }

  // int32 loc_fault_level = 8;
  if (this->loc_fault_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->loc_fault_level(), target);
  }

  // int32 loc_status = 9;
  if (this->loc_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->loc_status(), target);
  }

  // int32 gps_status = 10;
  if (this->gps_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gps_status(), target);
  }

  // float time_stamp = 11;
  if (this->time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->time_stamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:business.proto.LocPos)
  return target;
}

size_t LocPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:business.proto.LocPos)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double xg = 1;
  if (this->xg() != 0) {
    total_size += 1 + 8;
  }

  // double yg = 2;
  if (this->yg() != 0) {
    total_size += 1 + 8;
  }

  // double lat = 3;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // double lon = 4;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  // float v = 5;
  if (this->v() != 0) {
    total_size += 1 + 4;
  }

  // float height = 6;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // float heading = 7;
  if (this->heading() != 0) {
    total_size += 1 + 4;
  }

  // int32 loc_fault_level = 8;
  if (this->loc_fault_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->loc_fault_level());
  }

  // int32 loc_status = 9;
  if (this->loc_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->loc_status());
  }

  // int32 gps_status = 10;
  if (this->gps_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gps_status());
  }

  // float time_stamp = 11;
  if (this->time_stamp() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocPos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:business.proto.LocPos)
  GOOGLE_DCHECK_NE(&from, this);
  const LocPos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocPos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:business.proto.LocPos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:business.proto.LocPos)
    MergeFrom(*source);
  }
}

void LocPos::MergeFrom(const LocPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:business.proto.LocPos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.xg() != 0) {
    set_xg(from.xg());
  }
  if (from.yg() != 0) {
    set_yg(from.yg());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.loc_fault_level() != 0) {
    set_loc_fault_level(from.loc_fault_level());
  }
  if (from.loc_status() != 0) {
    set_loc_status(from.loc_status());
  }
  if (from.gps_status() != 0) {
    set_gps_status(from.gps_status());
  }
  if (from.time_stamp() != 0) {
    set_time_stamp(from.time_stamp());
  }
}

void LocPos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:business.proto.LocPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocPos::CopyFrom(const LocPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:business.proto.LocPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocPos::IsInitialized() const {
  return true;
}

void LocPos::Swap(LocPos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocPos::InternalSwap(LocPos* other) {
  using std::swap;
  swap(xg_, other->xg_);
  swap(yg_, other->yg_);
  swap(lat_, other->lat_);
  swap(lon_, other->lon_);
  swap(v_, other->v_);
  swap(height_, other->height_);
  swap(heading_, other->heading_);
  swap(loc_fault_level_, other->loc_fault_level_);
  swap(loc_status_, other->loc_status_);
  swap(gps_status_, other->gps_status_);
  swap(time_stamp_, other->time_stamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocPos::GetMetadata() const {
  protobuf_Business_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Business_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BusinessStatus::InitAsDefaultInstance() {
  ::business::proto::_BusinessStatus_default_instance_._instance.get_mutable()->header_ = const_cast< ::business::proto::Header*>(
      ::business::proto::Header::internal_default_instance());
  ::business::proto::_BusinessStatus_default_instance_._instance.get_mutable()->locpos_ = const_cast< ::business::proto::LocPos*>(
      ::business::proto::LocPos::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BusinessStatus::kHeaderFieldNumber;
const int BusinessStatus::kBusinessModeStFieldNumber;
const int BusinessStatus::kTaskStFieldNumber;
const int BusinessStatus::kAutoReadyStFieldNumber;
const int BusinessStatus::kTaskTotalMileageFieldNumber;
const int BusinessStatus::kTaskRemainMileageFieldNumber;
const int BusinessStatus::kCurMissionIdFieldNumber;
const int BusinessStatus::kTaskDist2NextstopFieldNumber;
const int BusinessStatus::kLocposFieldNumber;
const int BusinessStatus::kAdModeDispFieldNumber;
const int BusinessStatus::kAdSysstatDispFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BusinessStatus::BusinessStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Business_2eproto::InitDefaultsBusinessStatus();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:business.proto.BusinessStatus)
}
BusinessStatus::BusinessStatus(const BusinessStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::business::proto::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_locpos()) {
    locpos_ = new ::business::proto::LocPos(*from.locpos_);
  } else {
    locpos_ = NULL;
  }
  ::memcpy(&business_mode_st_, &from.business_mode_st_,
    static_cast<size_t>(reinterpret_cast<char*>(&ad_sysstat_disp_) -
    reinterpret_cast<char*>(&business_mode_st_)) + sizeof(ad_sysstat_disp_));
  // @@protoc_insertion_point(copy_constructor:business.proto.BusinessStatus)
}

void BusinessStatus::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ad_sysstat_disp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(ad_sysstat_disp_));
  _cached_size_ = 0;
}

BusinessStatus::~BusinessStatus() {
  // @@protoc_insertion_point(destructor:business.proto.BusinessStatus)
  SharedDtor();
}

void BusinessStatus::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete locpos_;
}

void BusinessStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BusinessStatus::descriptor() {
  ::protobuf_Business_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Business_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BusinessStatus& BusinessStatus::default_instance() {
  ::protobuf_Business_2eproto::InitDefaultsBusinessStatus();
  return *internal_default_instance();
}

BusinessStatus* BusinessStatus::New(::google::protobuf::Arena* arena) const {
  BusinessStatus* n = new BusinessStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BusinessStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:business.proto.BusinessStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && locpos_ != NULL) {
    delete locpos_;
  }
  locpos_ = NULL;
  ::memset(&business_mode_st_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ad_sysstat_disp_) -
      reinterpret_cast<char*>(&business_mode_st_)) + sizeof(ad_sysstat_disp_));
  _internal_metadata_.Clear();
}

bool BusinessStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:business.proto.BusinessStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .business.proto.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 business_mode_st = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &business_mode_st_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 task_st = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_st_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 auto_ready_st = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_ready_st_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float task_total_mileage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &task_total_mileage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float task_remain_mileage = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &task_remain_mileage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cur_mission_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_mission_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float task_dist2nextstop = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &task_dist2nextstop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .business.proto.LocPos locpos = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_locpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ad_mode_disp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ad_mode_disp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ad_sysstat_disp = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ad_sysstat_disp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:business.proto.BusinessStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:business.proto.BusinessStatus)
  return false;
#undef DO_
}

void BusinessStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:business.proto.BusinessStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .business.proto.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 business_mode_st = 2;
  if (this->business_mode_st() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->business_mode_st(), output);
  }

  // int32 task_st = 3;
  if (this->task_st() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_st(), output);
  }

  // int32 auto_ready_st = 4;
  if (this->auto_ready_st() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->auto_ready_st(), output);
  }

  // float task_total_mileage = 5;
  if (this->task_total_mileage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->task_total_mileage(), output);
  }

  // float task_remain_mileage = 6;
  if (this->task_remain_mileage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->task_remain_mileage(), output);
  }

  // int32 cur_mission_id = 7;
  if (this->cur_mission_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cur_mission_id(), output);
  }

  // float task_dist2nextstop = 8;
  if (this->task_dist2nextstop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->task_dist2nextstop(), output);
  }

  // .business.proto.LocPos locpos = 9;
  if (this->has_locpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->locpos_, output);
  }

  // int32 ad_mode_disp = 10;
  if (this->ad_mode_disp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ad_mode_disp(), output);
  }

  // int32 ad_sysstat_disp = 11;
  if (this->ad_sysstat_disp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ad_sysstat_disp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:business.proto.BusinessStatus)
}

::google::protobuf::uint8* BusinessStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:business.proto.BusinessStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .business.proto.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // int32 business_mode_st = 2;
  if (this->business_mode_st() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->business_mode_st(), target);
  }

  // int32 task_st = 3;
  if (this->task_st() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->task_st(), target);
  }

  // int32 auto_ready_st = 4;
  if (this->auto_ready_st() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->auto_ready_st(), target);
  }

  // float task_total_mileage = 5;
  if (this->task_total_mileage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->task_total_mileage(), target);
  }

  // float task_remain_mileage = 6;
  if (this->task_remain_mileage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->task_remain_mileage(), target);
  }

  // int32 cur_mission_id = 7;
  if (this->cur_mission_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cur_mission_id(), target);
  }

  // float task_dist2nextstop = 8;
  if (this->task_dist2nextstop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->task_dist2nextstop(), target);
  }

  // .business.proto.LocPos locpos = 9;
  if (this->has_locpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->locpos_, deterministic, target);
  }

  // int32 ad_mode_disp = 10;
  if (this->ad_mode_disp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ad_mode_disp(), target);
  }

  // int32 ad_sysstat_disp = 11;
  if (this->ad_sysstat_disp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ad_sysstat_disp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:business.proto.BusinessStatus)
  return target;
}

size_t BusinessStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:business.proto.BusinessStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .business.proto.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .business.proto.LocPos locpos = 9;
  if (this->has_locpos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->locpos_);
  }

  // int32 business_mode_st = 2;
  if (this->business_mode_st() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->business_mode_st());
  }

  // int32 task_st = 3;
  if (this->task_st() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_st());
  }

  // int32 auto_ready_st = 4;
  if (this->auto_ready_st() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->auto_ready_st());
  }

  // float task_total_mileage = 5;
  if (this->task_total_mileage() != 0) {
    total_size += 1 + 4;
  }

  // float task_remain_mileage = 6;
  if (this->task_remain_mileage() != 0) {
    total_size += 1 + 4;
  }

  // int32 cur_mission_id = 7;
  if (this->cur_mission_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cur_mission_id());
  }

  // float task_dist2nextstop = 8;
  if (this->task_dist2nextstop() != 0) {
    total_size += 1 + 4;
  }

  // int32 ad_mode_disp = 10;
  if (this->ad_mode_disp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ad_mode_disp());
  }

  // int32 ad_sysstat_disp = 11;
  if (this->ad_sysstat_disp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ad_sysstat_disp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BusinessStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:business.proto.BusinessStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const BusinessStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BusinessStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:business.proto.BusinessStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:business.proto.BusinessStatus)
    MergeFrom(*source);
  }
}

void BusinessStatus::MergeFrom(const BusinessStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:business.proto.BusinessStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::business::proto::Header::MergeFrom(from.header());
  }
  if (from.has_locpos()) {
    mutable_locpos()->::business::proto::LocPos::MergeFrom(from.locpos());
  }
  if (from.business_mode_st() != 0) {
    set_business_mode_st(from.business_mode_st());
  }
  if (from.task_st() != 0) {
    set_task_st(from.task_st());
  }
  if (from.auto_ready_st() != 0) {
    set_auto_ready_st(from.auto_ready_st());
  }
  if (from.task_total_mileage() != 0) {
    set_task_total_mileage(from.task_total_mileage());
  }
  if (from.task_remain_mileage() != 0) {
    set_task_remain_mileage(from.task_remain_mileage());
  }
  if (from.cur_mission_id() != 0) {
    set_cur_mission_id(from.cur_mission_id());
  }
  if (from.task_dist2nextstop() != 0) {
    set_task_dist2nextstop(from.task_dist2nextstop());
  }
  if (from.ad_mode_disp() != 0) {
    set_ad_mode_disp(from.ad_mode_disp());
  }
  if (from.ad_sysstat_disp() != 0) {
    set_ad_sysstat_disp(from.ad_sysstat_disp());
  }
}

void BusinessStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:business.proto.BusinessStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusinessStatus::CopyFrom(const BusinessStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:business.proto.BusinessStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusinessStatus::IsInitialized() const {
  return true;
}

void BusinessStatus::Swap(BusinessStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BusinessStatus::InternalSwap(BusinessStatus* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(locpos_, other->locpos_);
  swap(business_mode_st_, other->business_mode_st_);
  swap(task_st_, other->task_st_);
  swap(auto_ready_st_, other->auto_ready_st_);
  swap(task_total_mileage_, other->task_total_mileage_);
  swap(task_remain_mileage_, other->task_remain_mileage_);
  swap(cur_mission_id_, other->cur_mission_id_);
  swap(task_dist2nextstop_, other->task_dist2nextstop_);
  swap(ad_mode_disp_, other->ad_mode_disp_);
  swap(ad_sysstat_disp_, other->ad_sysstat_disp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BusinessStatus::GetMetadata() const {
  protobuf_Business_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Business_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BusinessCmd::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BusinessCmd::kBrakeLightFieldNumber;
const int BusinessCmd::kTailLightFieldNumber;
const int BusinessCmd::kDoubleFlashLightFieldNumber;
const int BusinessCmd::kLowBeamFieldNumber;
const int BusinessCmd::kHighBeamFieldNumber;
const int BusinessCmd::kAutoHornFieldNumber;
const int BusinessCmd::kFrontFogLightFieldNumber;
const int BusinessCmd::kRearFogLightFieldNumber;
const int BusinessCmd::kWiperFieldNumber;
const int BusinessCmd::kDoorlockFieldNumber;
const int BusinessCmd::kTurnLeftLightFieldNumber;
const int BusinessCmd::kTurnRightLightFieldNumber;
const int BusinessCmd::kSteerCtrlModeFieldNumber;
const int BusinessCmd::kAcclCtrlModeFieldNumber;
const int BusinessCmd::kBrakCtrlModeFieldNumber;
const int BusinessCmd::kEbpCtrlModeFieldNumber;
const int BusinessCmd::kBcmCtrlModeFieldNumber;
const int BusinessCmd::kRecoveryBrakEnableFieldNumber;
const int BusinessCmd::kAmbientLightFieldNumber;
const int BusinessCmd::kRoofLightFieldNumber;
const int BusinessCmd::kWasherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BusinessCmd::BusinessCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Business_2eproto::InitDefaultsBusinessCmd();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:business.proto.BusinessCmd)
}
BusinessCmd::BusinessCmd(const BusinessCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brake_light_, &from.brake_light_,
    static_cast<size_t>(reinterpret_cast<char*>(&washer_) -
    reinterpret_cast<char*>(&brake_light_)) + sizeof(washer_));
  // @@protoc_insertion_point(copy_constructor:business.proto.BusinessCmd)
}

void BusinessCmd::SharedCtor() {
  ::memset(&brake_light_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&washer_) -
      reinterpret_cast<char*>(&brake_light_)) + sizeof(washer_));
  _cached_size_ = 0;
}

BusinessCmd::~BusinessCmd() {
  // @@protoc_insertion_point(destructor:business.proto.BusinessCmd)
  SharedDtor();
}

void BusinessCmd::SharedDtor() {
}

void BusinessCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BusinessCmd::descriptor() {
  ::protobuf_Business_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Business_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BusinessCmd& BusinessCmd::default_instance() {
  ::protobuf_Business_2eproto::InitDefaultsBusinessCmd();
  return *internal_default_instance();
}

BusinessCmd* BusinessCmd::New(::google::protobuf::Arena* arena) const {
  BusinessCmd* n = new BusinessCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BusinessCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:business.proto.BusinessCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&brake_light_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&washer_) -
      reinterpret_cast<char*>(&brake_light_)) + sizeof(washer_));
  _internal_metadata_.Clear();
}

bool BusinessCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:business.proto.BusinessCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 brake_light = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brake_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tail_light = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tail_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 double_flash_light = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &double_flash_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 low_beam = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &low_beam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 high_beam = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &high_beam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 auto_horn = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_horn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 front_fog_light = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_fog_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rear_fog_light = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rear_fog_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wiper = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wiper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 doorlock = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorlock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 turn_left_light = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turn_left_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 turn_right_light = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turn_right_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 steer_ctrl_mode = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steer_ctrl_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 accl_ctrl_mode = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accl_ctrl_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 brak_ctrl_mode = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brak_ctrl_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ebp_ctrl_mode = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ebp_ctrl_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bcm_ctrl_mode = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bcm_ctrl_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 recovery_brak_enable = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recovery_brak_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ambient_light = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ambient_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 roof_light = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roof_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 washer = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &washer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:business.proto.BusinessCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:business.proto.BusinessCmd)
  return false;
#undef DO_
}

void BusinessCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:business.proto.BusinessCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 brake_light = 1;
  if (this->brake_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->brake_light(), output);
  }

  // int32 tail_light = 2;
  if (this->tail_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tail_light(), output);
  }

  // int32 double_flash_light = 3;
  if (this->double_flash_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->double_flash_light(), output);
  }

  // int32 low_beam = 4;
  if (this->low_beam() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->low_beam(), output);
  }

  // int32 high_beam = 5;
  if (this->high_beam() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->high_beam(), output);
  }

  // int32 auto_horn = 6;
  if (this->auto_horn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->auto_horn(), output);
  }

  // int32 front_fog_light = 7;
  if (this->front_fog_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->front_fog_light(), output);
  }

  // int32 rear_fog_light = 8;
  if (this->rear_fog_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rear_fog_light(), output);
  }

  // int32 wiper = 9;
  if (this->wiper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->wiper(), output);
  }

  // int32 doorlock = 10;
  if (this->doorlock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->doorlock(), output);
  }

  // int32 turn_left_light = 11;
  if (this->turn_left_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->turn_left_light(), output);
  }

  // int32 turn_right_light = 12;
  if (this->turn_right_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->turn_right_light(), output);
  }

  // int32 steer_ctrl_mode = 13;
  if (this->steer_ctrl_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->steer_ctrl_mode(), output);
  }

  // int32 accl_ctrl_mode = 14;
  if (this->accl_ctrl_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->accl_ctrl_mode(), output);
  }

  // int32 brak_ctrl_mode = 15;
  if (this->brak_ctrl_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->brak_ctrl_mode(), output);
  }

  // int32 ebp_ctrl_mode = 16;
  if (this->ebp_ctrl_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->ebp_ctrl_mode(), output);
  }

  // int32 bcm_ctrl_mode = 17;
  if (this->bcm_ctrl_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->bcm_ctrl_mode(), output);
  }

  // int32 recovery_brak_enable = 18;
  if (this->recovery_brak_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->recovery_brak_enable(), output);
  }

  // int32 ambient_light = 19;
  if (this->ambient_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->ambient_light(), output);
  }

  // int32 roof_light = 20;
  if (this->roof_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->roof_light(), output);
  }

  // int32 washer = 21;
  if (this->washer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->washer(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:business.proto.BusinessCmd)
}

::google::protobuf::uint8* BusinessCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:business.proto.BusinessCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 brake_light = 1;
  if (this->brake_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->brake_light(), target);
  }

  // int32 tail_light = 2;
  if (this->tail_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tail_light(), target);
  }

  // int32 double_flash_light = 3;
  if (this->double_flash_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->double_flash_light(), target);
  }

  // int32 low_beam = 4;
  if (this->low_beam() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->low_beam(), target);
  }

  // int32 high_beam = 5;
  if (this->high_beam() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->high_beam(), target);
  }

  // int32 auto_horn = 6;
  if (this->auto_horn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->auto_horn(), target);
  }

  // int32 front_fog_light = 7;
  if (this->front_fog_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->front_fog_light(), target);
  }

  // int32 rear_fog_light = 8;
  if (this->rear_fog_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rear_fog_light(), target);
  }

  // int32 wiper = 9;
  if (this->wiper() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->wiper(), target);
  }

  // int32 doorlock = 10;
  if (this->doorlock() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->doorlock(), target);
  }

  // int32 turn_left_light = 11;
  if (this->turn_left_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->turn_left_light(), target);
  }

  // int32 turn_right_light = 12;
  if (this->turn_right_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->turn_right_light(), target);
  }

  // int32 steer_ctrl_mode = 13;
  if (this->steer_ctrl_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->steer_ctrl_mode(), target);
  }

  // int32 accl_ctrl_mode = 14;
  if (this->accl_ctrl_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->accl_ctrl_mode(), target);
  }

  // int32 brak_ctrl_mode = 15;
  if (this->brak_ctrl_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->brak_ctrl_mode(), target);
  }

  // int32 ebp_ctrl_mode = 16;
  if (this->ebp_ctrl_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->ebp_ctrl_mode(), target);
  }

  // int32 bcm_ctrl_mode = 17;
  if (this->bcm_ctrl_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->bcm_ctrl_mode(), target);
  }

  // int32 recovery_brak_enable = 18;
  if (this->recovery_brak_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->recovery_brak_enable(), target);
  }

  // int32 ambient_light = 19;
  if (this->ambient_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->ambient_light(), target);
  }

  // int32 roof_light = 20;
  if (this->roof_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->roof_light(), target);
  }

  // int32 washer = 21;
  if (this->washer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->washer(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:business.proto.BusinessCmd)
  return target;
}

size_t BusinessCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:business.proto.BusinessCmd)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 brake_light = 1;
  if (this->brake_light() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brake_light());
  }

  // int32 tail_light = 2;
  if (this->tail_light() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tail_light());
  }

  // int32 double_flash_light = 3;
  if (this->double_flash_light() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->double_flash_light());
  }

  // int32 low_beam = 4;
  if (this->low_beam() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->low_beam());
  }

  // int32 high_beam = 5;
  if (this->high_beam() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->high_beam());
  }

  // int32 auto_horn = 6;
  if (this->auto_horn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->auto_horn());
  }

  // int32 front_fog_light = 7;
  if (this->front_fog_light() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->front_fog_light());
  }

  // int32 rear_fog_light = 8;
  if (this->rear_fog_light() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rear_fog_light());
  }

  // int32 wiper = 9;
  if (this->wiper() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wiper());
  }

  // int32 doorlock = 10;
  if (this->doorlock() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->doorlock());
  }

  // int32 turn_left_light = 11;
  if (this->turn_left_light() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->turn_left_light());
  }

  // int32 turn_right_light = 12;
  if (this->turn_right_light() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->turn_right_light());
  }

  // int32 steer_ctrl_mode = 13;
  if (this->steer_ctrl_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->steer_ctrl_mode());
  }

  // int32 accl_ctrl_mode = 14;
  if (this->accl_ctrl_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->accl_ctrl_mode());
  }

  // int32 brak_ctrl_mode = 15;
  if (this->brak_ctrl_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brak_ctrl_mode());
  }

  // int32 ebp_ctrl_mode = 16;
  if (this->ebp_ctrl_mode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ebp_ctrl_mode());
  }

  // int32 bcm_ctrl_mode = 17;
  if (this->bcm_ctrl_mode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bcm_ctrl_mode());
  }

  // int32 recovery_brak_enable = 18;
  if (this->recovery_brak_enable() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->recovery_brak_enable());
  }

  // int32 ambient_light = 19;
  if (this->ambient_light() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ambient_light());
  }

  // int32 roof_light = 20;
  if (this->roof_light() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roof_light());
  }

  // int32 washer = 21;
  if (this->washer() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->washer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BusinessCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:business.proto.BusinessCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const BusinessCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BusinessCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:business.proto.BusinessCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:business.proto.BusinessCmd)
    MergeFrom(*source);
  }
}

void BusinessCmd::MergeFrom(const BusinessCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:business.proto.BusinessCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.brake_light() != 0) {
    set_brake_light(from.brake_light());
  }
  if (from.tail_light() != 0) {
    set_tail_light(from.tail_light());
  }
  if (from.double_flash_light() != 0) {
    set_double_flash_light(from.double_flash_light());
  }
  if (from.low_beam() != 0) {
    set_low_beam(from.low_beam());
  }
  if (from.high_beam() != 0) {
    set_high_beam(from.high_beam());
  }
  if (from.auto_horn() != 0) {
    set_auto_horn(from.auto_horn());
  }
  if (from.front_fog_light() != 0) {
    set_front_fog_light(from.front_fog_light());
  }
  if (from.rear_fog_light() != 0) {
    set_rear_fog_light(from.rear_fog_light());
  }
  if (from.wiper() != 0) {
    set_wiper(from.wiper());
  }
  if (from.doorlock() != 0) {
    set_doorlock(from.doorlock());
  }
  if (from.turn_left_light() != 0) {
    set_turn_left_light(from.turn_left_light());
  }
  if (from.turn_right_light() != 0) {
    set_turn_right_light(from.turn_right_light());
  }
  if (from.steer_ctrl_mode() != 0) {
    set_steer_ctrl_mode(from.steer_ctrl_mode());
  }
  if (from.accl_ctrl_mode() != 0) {
    set_accl_ctrl_mode(from.accl_ctrl_mode());
  }
  if (from.brak_ctrl_mode() != 0) {
    set_brak_ctrl_mode(from.brak_ctrl_mode());
  }
  if (from.ebp_ctrl_mode() != 0) {
    set_ebp_ctrl_mode(from.ebp_ctrl_mode());
  }
  if (from.bcm_ctrl_mode() != 0) {
    set_bcm_ctrl_mode(from.bcm_ctrl_mode());
  }
  if (from.recovery_brak_enable() != 0) {
    set_recovery_brak_enable(from.recovery_brak_enable());
  }
  if (from.ambient_light() != 0) {
    set_ambient_light(from.ambient_light());
  }
  if (from.roof_light() != 0) {
    set_roof_light(from.roof_light());
  }
  if (from.washer() != 0) {
    set_washer(from.washer());
  }
}

void BusinessCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:business.proto.BusinessCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusinessCmd::CopyFrom(const BusinessCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:business.proto.BusinessCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusinessCmd::IsInitialized() const {
  return true;
}

void BusinessCmd::Swap(BusinessCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BusinessCmd::InternalSwap(BusinessCmd* other) {
  using std::swap;
  swap(brake_light_, other->brake_light_);
  swap(tail_light_, other->tail_light_);
  swap(double_flash_light_, other->double_flash_light_);
  swap(low_beam_, other->low_beam_);
  swap(high_beam_, other->high_beam_);
  swap(auto_horn_, other->auto_horn_);
  swap(front_fog_light_, other->front_fog_light_);
  swap(rear_fog_light_, other->rear_fog_light_);
  swap(wiper_, other->wiper_);
  swap(doorlock_, other->doorlock_);
  swap(turn_left_light_, other->turn_left_light_);
  swap(turn_right_light_, other->turn_right_light_);
  swap(steer_ctrl_mode_, other->steer_ctrl_mode_);
  swap(accl_ctrl_mode_, other->accl_ctrl_mode_);
  swap(brak_ctrl_mode_, other->brak_ctrl_mode_);
  swap(ebp_ctrl_mode_, other->ebp_ctrl_mode_);
  swap(bcm_ctrl_mode_, other->bcm_ctrl_mode_);
  swap(recovery_brak_enable_, other->recovery_brak_enable_);
  swap(ambient_light_, other->ambient_light_);
  swap(roof_light_, other->roof_light_);
  swap(washer_, other->washer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BusinessCmd::GetMetadata() const {
  protobuf_Business_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Business_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace business

// @@protoc_insertion_point(global_scope)
