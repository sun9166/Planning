// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception_vehicle.proto

#include "perception_vehicle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace calmcar {
namespace perception {
class DashBoardDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DashBoard>
      _instance;
} _DashBoard_default_instance_;
class VehicleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vehicle>
      _instance;
} _Vehicle_default_instance_;
}  // namespace perception
}  // namespace calmcar
namespace protobuf_perception_5fvehicle_2eproto {
void InitDefaultsDashBoardImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::calmcar::perception::_DashBoard_default_instance_;
    new (ptr) ::calmcar::perception::DashBoard();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::DashBoard::InitAsDefaultInstance();
}

void InitDefaultsDashBoard() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDashBoardImpl);
}

void InitDefaultsVehicleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5fvehicle_2eproto::InitDefaultsDashBoard();
  {
    void* ptr = &::calmcar::perception::_Vehicle_default_instance_;
    new (ptr) ::calmcar::perception::Vehicle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::Vehicle::InitAsDefaultInstance();
}

void InitDefaultsVehicle() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicleImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::DashBoard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::DashBoard, speed_mps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::DashBoard, yaw_rate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Vehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Vehicle, dash_board_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::calmcar::perception::DashBoard)},
  { 7, -1, sizeof(::calmcar::perception::Vehicle)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_DashBoard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_Vehicle_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "perception_vehicle.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030perception_vehicle.proto\022\022calmcar.perc"
      "eption\"0\n\tDashBoard\022\021\n\tspeed_mps\030\001 \001(\002\022\020"
      "\n\010yaw_rate\030\002 \001(\002\"<\n\007Vehicle\0221\n\ndash_boar"
      "d\030\001 \001(\0132\035.calmcar.perception.DashBoardb\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 166);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception_vehicle.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_perception_5fvehicle_2eproto
namespace calmcar {
namespace perception {

// ===================================================================

void DashBoard::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DashBoard::kSpeedMpsFieldNumber;
const int DashBoard::kYawRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DashBoard::DashBoard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fvehicle_2eproto::InitDefaultsDashBoard();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.DashBoard)
}
DashBoard::DashBoard(const DashBoard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_mps_, &from.speed_mps_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_rate_) -
    reinterpret_cast<char*>(&speed_mps_)) + sizeof(yaw_rate_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.DashBoard)
}

void DashBoard::SharedCtor() {
  ::memset(&speed_mps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rate_) -
      reinterpret_cast<char*>(&speed_mps_)) + sizeof(yaw_rate_));
  _cached_size_ = 0;
}

DashBoard::~DashBoard() {
  // @@protoc_insertion_point(destructor:calmcar.perception.DashBoard)
  SharedDtor();
}

void DashBoard::SharedDtor() {
}

void DashBoard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DashBoard::descriptor() {
  ::protobuf_perception_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DashBoard& DashBoard::default_instance() {
  ::protobuf_perception_5fvehicle_2eproto::InitDefaultsDashBoard();
  return *internal_default_instance();
}

DashBoard* DashBoard::New(::google::protobuf::Arena* arena) const {
  DashBoard* n = new DashBoard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DashBoard::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.DashBoard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&speed_mps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rate_) -
      reinterpret_cast<char*>(&speed_mps_)) + sizeof(yaw_rate_));
  _internal_metadata_.Clear();
}

bool DashBoard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.DashBoard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float speed_mps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_mps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.DashBoard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.DashBoard)
  return false;
#undef DO_
}

void DashBoard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.DashBoard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float speed_mps = 1;
  if (this->speed_mps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->speed_mps(), output);
  }

  // float yaw_rate = 2;
  if (this->yaw_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->yaw_rate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.DashBoard)
}

::google::protobuf::uint8* DashBoard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.DashBoard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float speed_mps = 1;
  if (this->speed_mps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->speed_mps(), target);
  }

  // float yaw_rate = 2;
  if (this->yaw_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->yaw_rate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.DashBoard)
  return target;
}

size_t DashBoard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.DashBoard)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float speed_mps = 1;
  if (this->speed_mps() != 0) {
    total_size += 1 + 4;
  }

  // float yaw_rate = 2;
  if (this->yaw_rate() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DashBoard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.DashBoard)
  GOOGLE_DCHECK_NE(&from, this);
  const DashBoard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DashBoard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.DashBoard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.DashBoard)
    MergeFrom(*source);
  }
}

void DashBoard::MergeFrom(const DashBoard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.DashBoard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.speed_mps() != 0) {
    set_speed_mps(from.speed_mps());
  }
  if (from.yaw_rate() != 0) {
    set_yaw_rate(from.yaw_rate());
  }
}

void DashBoard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.DashBoard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DashBoard::CopyFrom(const DashBoard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.DashBoard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DashBoard::IsInitialized() const {
  return true;
}

void DashBoard::Swap(DashBoard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DashBoard::InternalSwap(DashBoard* other) {
  using std::swap;
  swap(speed_mps_, other->speed_mps_);
  swap(yaw_rate_, other->yaw_rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DashBoard::GetMetadata() const {
  protobuf_perception_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vehicle::InitAsDefaultInstance() {
  ::calmcar::perception::_Vehicle_default_instance_._instance.get_mutable()->dash_board_ = const_cast< ::calmcar::perception::DashBoard*>(
      ::calmcar::perception::DashBoard::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vehicle::kDashBoardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vehicle::Vehicle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_5fvehicle_2eproto::InitDefaultsVehicle();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.Vehicle)
}
Vehicle::Vehicle(const Vehicle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dash_board()) {
    dash_board_ = new ::calmcar::perception::DashBoard(*from.dash_board_);
  } else {
    dash_board_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.Vehicle)
}

void Vehicle::SharedCtor() {
  dash_board_ = NULL;
  _cached_size_ = 0;
}

Vehicle::~Vehicle() {
  // @@protoc_insertion_point(destructor:calmcar.perception.Vehicle)
  SharedDtor();
}

void Vehicle::SharedDtor() {
  if (this != internal_default_instance()) delete dash_board_;
}

void Vehicle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vehicle::descriptor() {
  ::protobuf_perception_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vehicle& Vehicle::default_instance() {
  ::protobuf_perception_5fvehicle_2eproto::InitDefaultsVehicle();
  return *internal_default_instance();
}

Vehicle* Vehicle::New(::google::protobuf::Arena* arena) const {
  Vehicle* n = new Vehicle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.Vehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && dash_board_ != NULL) {
    delete dash_board_;
  }
  dash_board_ = NULL;
  _internal_metadata_.Clear();
}

bool Vehicle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.Vehicle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.DashBoard dash_board = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dash_board()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.Vehicle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.Vehicle)
  return false;
#undef DO_
}

void Vehicle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.Vehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.DashBoard dash_board = 1;
  if (this->has_dash_board()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->dash_board_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.Vehicle)
}

::google::protobuf::uint8* Vehicle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.Vehicle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.DashBoard dash_board = 1;
  if (this->has_dash_board()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->dash_board_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.Vehicle)
  return target;
}

size_t Vehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.Vehicle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .calmcar.perception.DashBoard dash_board = 1;
  if (this->has_dash_board()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dash_board_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vehicle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.Vehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vehicle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.Vehicle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.Vehicle)
    MergeFrom(*source);
  }
}

void Vehicle::MergeFrom(const Vehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.Vehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dash_board()) {
    mutable_dash_board()->::calmcar::perception::DashBoard::MergeFrom(from.dash_board());
  }
}

void Vehicle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.Vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle::CopyFrom(const Vehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.Vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle::IsInitialized() const {
  return true;
}

void Vehicle::Swap(Vehicle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vehicle::InternalSwap(Vehicle* other) {
  using std::swap;
  swap(dash_board_, other->dash_board_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vehicle::GetMetadata() const {
  protobuf_perception_5fvehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_5fvehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace calmcar

// @@protoc_insertion_point(global_scope)
