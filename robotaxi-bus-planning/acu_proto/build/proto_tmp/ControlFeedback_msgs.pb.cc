// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ControlFeedback_msgs.proto

#include "ControlFeedback_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace ControlFeedback_msgs {
class VehicleInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleInfo>
      _instance;
} _VehicleInfo_default_instance_;
class TimeStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimeStatus>
      _instance;
} _TimeStatus_default_instance_;
class TimeStatisticsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimeStatistics>
      _instance;
} _TimeStatistics_default_instance_;
class FaultInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaultInfo>
      _instance;
} _FaultInfo_default_instance_;
class FaultVecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaultVec>
      _instance;
} _FaultVec_default_instance_;
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
class ControlFeedbackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlFeedback>
      _instance;
} _ControlFeedback_default_instance_;
}  // namespace ControlFeedback_msgs
namespace protobuf_ControlFeedback_5fmsgs_2eproto {
void InitDefaultsVehicleInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ControlFeedback_msgs::_VehicleInfo_default_instance_;
    new (ptr) ::ControlFeedback_msgs::VehicleInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ControlFeedback_msgs::VehicleInfo::InitAsDefaultInstance();
}

void InitDefaultsVehicleInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicleInfoImpl);
}

void InitDefaultsTimeStatusImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ControlFeedback_msgs::_TimeStatus_default_instance_;
    new (ptr) ::ControlFeedback_msgs::TimeStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ControlFeedback_msgs::TimeStatus::InitAsDefaultInstance();
}

void InitDefaultsTimeStatus() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTimeStatusImpl);
}

void InitDefaultsTimeStatisticsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ControlFeedback_5fmsgs_2eproto::InitDefaultsTimeStatus();
  {
    void* ptr = &::ControlFeedback_msgs::_TimeStatistics_default_instance_;
    new (ptr) ::ControlFeedback_msgs::TimeStatistics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ControlFeedback_msgs::TimeStatistics::InitAsDefaultInstance();
}

void InitDefaultsTimeStatistics() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTimeStatisticsImpl);
}

void InitDefaultsFaultInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ControlFeedback_msgs::_FaultInfo_default_instance_;
    new (ptr) ::ControlFeedback_msgs::FaultInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ControlFeedback_msgs::FaultInfo::InitAsDefaultInstance();
}

void InitDefaultsFaultInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFaultInfoImpl);
}

void InitDefaultsFaultVecImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ControlFeedback_5fmsgs_2eproto::InitDefaultsFaultInfo();
  {
    void* ptr = &::ControlFeedback_msgs::_FaultVec_default_instance_;
    new (ptr) ::ControlFeedback_msgs::FaultVec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ControlFeedback_msgs::FaultVec::InitAsDefaultInstance();
}

void InitDefaultsFaultVec() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFaultVecImpl);
}

void InitDefaultsHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ControlFeedback_5fmsgs_2eproto::InitDefaultsFaultVec();
  protobuf_ControlFeedback_5fmsgs_2eproto::InitDefaultsTimeStatistics();
  {
    void* ptr = &::ControlFeedback_msgs::_Header_default_instance_;
    new (ptr) ::ControlFeedback_msgs::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ControlFeedback_msgs::Header::InitAsDefaultInstance();
}

void InitDefaultsHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHeaderImpl);
}

void InitDefaultsControlFeedbackImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_ControlFeedback_5fmsgs_2eproto::InitDefaultsHeader();
  protobuf_ControlFeedback_5fmsgs_2eproto::InitDefaultsVehicleInfo();
  {
    void* ptr = &::ControlFeedback_msgs::_ControlFeedback_default_instance_;
    new (ptr) ::ControlFeedback_msgs::ControlFeedback();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ControlFeedback_msgs::ControlFeedback::InitAsDefaultInstance();
}

void InitDefaultsControlFeedback() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsControlFeedbackImpl);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::VehicleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::VehicleInfo, steerangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::VehicleInfo, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::VehicleInfo, vehicle_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::VehicleInfo, brake_pressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::VehicleInfo, shift_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::VehicleInfo, epb_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::VehicleInfo, current_drive_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::VehicleInfo, sys_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::VehicleInfo, vehicle_auto_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::VehicleInfo, vehicle_lat_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::VehicleInfo, vehicle_lon_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::VehicleInfo, vehicle_epb_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::VehicleInfo, on_accpedal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::VehicleInfo, steer_left_down_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::TimeStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::TimeStatus, dtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::TimeStatus, source_node_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::TimeStatus, destination_node_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::TimeStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::TimeStatistics, dev_time_status_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::TimeStatistics, sending_timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::FaultInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::FaultInfo, timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::FaultInfo, module_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::FaultInfo, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::FaultInfo, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::FaultInfo, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::FaultInfo, fault_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::FaultInfo, fault_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::FaultVec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::FaultVec, info_vec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::FaultVec, module_fault_level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::Header, sequence_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::Header, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::Header, module_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::Header, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::Header, fault_vec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::Header, time_statistics_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::ControlFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::ControlFeedback, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::ControlFeedback, vehicle_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ControlFeedback_msgs::ControlFeedback, brake_state_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ControlFeedback_msgs::VehicleInfo)},
  { 19, -1, sizeof(::ControlFeedback_msgs::TimeStatus)},
  { 27, -1, sizeof(::ControlFeedback_msgs::TimeStatistics)},
  { 34, -1, sizeof(::ControlFeedback_msgs::FaultInfo)},
  { 46, -1, sizeof(::ControlFeedback_msgs::FaultVec)},
  { 53, -1, sizeof(::ControlFeedback_msgs::Header)},
  { 64, -1, sizeof(::ControlFeedback_msgs::ControlFeedback)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ControlFeedback_msgs::_VehicleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ControlFeedback_msgs::_TimeStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ControlFeedback_msgs::_TimeStatistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ControlFeedback_msgs::_FaultInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ControlFeedback_msgs::_FaultVec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ControlFeedback_msgs::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ControlFeedback_msgs::_ControlFeedback_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ControlFeedback_msgs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032ControlFeedback_msgs.proto\022\024ControlFee"
      "dback_msgs\"\331\002\n\013VehicleInfo\022\022\n\nsteerangle"
      "\030\001 \001(\002\022\r\n\005speed\030\002 \001(\002\022\025\n\rvehicle_accel\030\003"
      " \001(\002\022\026\n\016brake_pressure\030\004 \001(\002\022\026\n\016shift_po"
      "sition\030\005 \001(\005\022\022\n\nepb_status\030\006 \001(\005\022\032\n\022curr"
      "ent_drive_mode\030\007 \001(\005\022\021\n\tsys_state\030\010 \001(\005\022"
      "\033\n\023vehicle_auto_enable\030\t \001(\010\022\032\n\022vehicle_"
      "lat_enable\030\n \001(\010\022\032\n\022vehicle_lon_enable\030\013"
      " \001(\010\022\032\n\022vehicle_epb_status\030\014 \001(\010\022\023\n\013on_a"
      "ccpedal\030\r \001(\005\022\027\n\017steer_left_down\030\016 \001(\010\"T"
      "\n\nTimeStatus\022\r\n\005dtime\030\001 \001(\001\022\030\n\020source_no"
      "de_name\030\002 \001(\t\022\035\n\025destination_node_name\030\003"
      " \001(\t\"j\n\016TimeStatistics\022=\n\023dev_time_statu"
      "s_msg\030\001 \003(\0132 .ControlFeedback_msgs.TimeS"
      "tatus\022\031\n\021sending_timestamp\030\002 \001(\001\"\222\001\n\tFau"
      "ltInfo\022\025\n\rtimestamp_sec\030\001 \001(\001\022\023\n\013module_"
      "name\030\002 \001(\t\022\017\n\007version\030\003 \001(\t\022\022\n\nerror_cod"
      "e\030\004 \001(\005\022\013\n\003msg\030\005 \001(\t\022\023\n\013fault_level\030\006 \001("
      "\005\022\022\n\nfault_type\030\007 \001(\005\"Y\n\010FaultVec\0221\n\010inf"
      "o_vec\030\001 \003(\0132\037.ControlFeedback_msgs.Fault"
      "Info\022\032\n\022module_fault_level\030\002 \001(\005\"\312\001\n\006Hea"
      "der\022\024\n\014sequence_num\030\001 \001(\005\022\022\n\ntime_stamp\030"
      "\002 \001(\001\022\023\n\013module_name\030\003 \001(\t\022\017\n\007version\030\004 "
      "\001(\t\0221\n\tfault_vec\030\005 \001(\0132\036.ControlFeedback"
      "_msgs.FaultVec\022=\n\017time_statistics\030\006 \001(\0132"
      "$.ControlFeedback_msgs.TimeStatistics\"\215\001"
      "\n\017ControlFeedback\022,\n\006header\030\001 \001(\0132\034.Cont"
      "rolFeedback_msgs.Header\0227\n\014vehicle_info\030"
      "\002 \001(\0132!.ControlFeedback_msgs.VehicleInfo"
      "\022\023\n\013brake_state\030\003 \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1189);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ControlFeedback_msgs.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ControlFeedback_5fmsgs_2eproto
namespace ControlFeedback_msgs {

// ===================================================================

void VehicleInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleInfo::kSteerangleFieldNumber;
const int VehicleInfo::kSpeedFieldNumber;
const int VehicleInfo::kVehicleAccelFieldNumber;
const int VehicleInfo::kBrakePressureFieldNumber;
const int VehicleInfo::kShiftPositionFieldNumber;
const int VehicleInfo::kEpbStatusFieldNumber;
const int VehicleInfo::kCurrentDriveModeFieldNumber;
const int VehicleInfo::kSysStateFieldNumber;
const int VehicleInfo::kVehicleAutoEnableFieldNumber;
const int VehicleInfo::kVehicleLatEnableFieldNumber;
const int VehicleInfo::kVehicleLonEnableFieldNumber;
const int VehicleInfo::kVehicleEpbStatusFieldNumber;
const int VehicleInfo::kOnAccpedalFieldNumber;
const int VehicleInfo::kSteerLeftDownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleInfo::VehicleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ControlFeedback_5fmsgs_2eproto::InitDefaultsVehicleInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ControlFeedback_msgs.VehicleInfo)
}
VehicleInfo::VehicleInfo(const VehicleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steerangle_, &from.steerangle_,
    static_cast<size_t>(reinterpret_cast<char*>(&steer_left_down_) -
    reinterpret_cast<char*>(&steerangle_)) + sizeof(steer_left_down_));
  // @@protoc_insertion_point(copy_constructor:ControlFeedback_msgs.VehicleInfo)
}

void VehicleInfo::SharedCtor() {
  ::memset(&steerangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steer_left_down_) -
      reinterpret_cast<char*>(&steerangle_)) + sizeof(steer_left_down_));
  _cached_size_ = 0;
}

VehicleInfo::~VehicleInfo() {
  // @@protoc_insertion_point(destructor:ControlFeedback_msgs.VehicleInfo)
  SharedDtor();
}

void VehicleInfo::SharedDtor() {
}

void VehicleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleInfo::descriptor() {
  ::protobuf_ControlFeedback_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ControlFeedback_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleInfo& VehicleInfo::default_instance() {
  ::protobuf_ControlFeedback_5fmsgs_2eproto::InitDefaultsVehicleInfo();
  return *internal_default_instance();
}

VehicleInfo* VehicleInfo::New(::google::protobuf::Arena* arena) const {
  VehicleInfo* n = new VehicleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlFeedback_msgs.VehicleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&steerangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steer_left_down_) -
      reinterpret_cast<char*>(&steerangle_)) + sizeof(steer_left_down_));
  _internal_metadata_.Clear();
}

bool VehicleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ControlFeedback_msgs.VehicleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float steerangle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steerangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vehicle_accel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vehicle_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float brake_pressure = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brake_pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 shift_position = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shift_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 epb_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epb_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 current_drive_mode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_drive_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sys_state = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sys_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool vehicle_auto_enable = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vehicle_auto_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool vehicle_lat_enable = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vehicle_lat_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool vehicle_lon_enable = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vehicle_lon_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool vehicle_epb_status = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vehicle_epb_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 on_accpedal = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &on_accpedal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool steer_left_down = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steer_left_down_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ControlFeedback_msgs.VehicleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ControlFeedback_msgs.VehicleInfo)
  return false;
#undef DO_
}

void VehicleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ControlFeedback_msgs.VehicleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float steerangle = 1;
  if (this->steerangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->steerangle(), output);
  }

  // float speed = 2;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->speed(), output);
  }

  // float vehicle_accel = 3;
  if (this->vehicle_accel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->vehicle_accel(), output);
  }

  // float brake_pressure = 4;
  if (this->brake_pressure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->brake_pressure(), output);
  }

  // int32 shift_position = 5;
  if (this->shift_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->shift_position(), output);
  }

  // int32 epb_status = 6;
  if (this->epb_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->epb_status(), output);
  }

  // int32 current_drive_mode = 7;
  if (this->current_drive_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->current_drive_mode(), output);
  }

  // int32 sys_state = 8;
  if (this->sys_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sys_state(), output);
  }

  // bool vehicle_auto_enable = 9;
  if (this->vehicle_auto_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->vehicle_auto_enable(), output);
  }

  // bool vehicle_lat_enable = 10;
  if (this->vehicle_lat_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->vehicle_lat_enable(), output);
  }

  // bool vehicle_lon_enable = 11;
  if (this->vehicle_lon_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->vehicle_lon_enable(), output);
  }

  // bool vehicle_epb_status = 12;
  if (this->vehicle_epb_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->vehicle_epb_status(), output);
  }

  // int32 on_accpedal = 13;
  if (this->on_accpedal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->on_accpedal(), output);
  }

  // bool steer_left_down = 14;
  if (this->steer_left_down() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->steer_left_down(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ControlFeedback_msgs.VehicleInfo)
}

::google::protobuf::uint8* VehicleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ControlFeedback_msgs.VehicleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float steerangle = 1;
  if (this->steerangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->steerangle(), target);
  }

  // float speed = 2;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->speed(), target);
  }

  // float vehicle_accel = 3;
  if (this->vehicle_accel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->vehicle_accel(), target);
  }

  // float brake_pressure = 4;
  if (this->brake_pressure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->brake_pressure(), target);
  }

  // int32 shift_position = 5;
  if (this->shift_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->shift_position(), target);
  }

  // int32 epb_status = 6;
  if (this->epb_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->epb_status(), target);
  }

  // int32 current_drive_mode = 7;
  if (this->current_drive_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->current_drive_mode(), target);
  }

  // int32 sys_state = 8;
  if (this->sys_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sys_state(), target);
  }

  // bool vehicle_auto_enable = 9;
  if (this->vehicle_auto_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->vehicle_auto_enable(), target);
  }

  // bool vehicle_lat_enable = 10;
  if (this->vehicle_lat_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->vehicle_lat_enable(), target);
  }

  // bool vehicle_lon_enable = 11;
  if (this->vehicle_lon_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->vehicle_lon_enable(), target);
  }

  // bool vehicle_epb_status = 12;
  if (this->vehicle_epb_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->vehicle_epb_status(), target);
  }

  // int32 on_accpedal = 13;
  if (this->on_accpedal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->on_accpedal(), target);
  }

  // bool steer_left_down = 14;
  if (this->steer_left_down() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->steer_left_down(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlFeedback_msgs.VehicleInfo)
  return target;
}

size_t VehicleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlFeedback_msgs.VehicleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float steerangle = 1;
  if (this->steerangle() != 0) {
    total_size += 1 + 4;
  }

  // float speed = 2;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  // float vehicle_accel = 3;
  if (this->vehicle_accel() != 0) {
    total_size += 1 + 4;
  }

  // float brake_pressure = 4;
  if (this->brake_pressure() != 0) {
    total_size += 1 + 4;
  }

  // int32 shift_position = 5;
  if (this->shift_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shift_position());
  }

  // int32 epb_status = 6;
  if (this->epb_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->epb_status());
  }

  // int32 current_drive_mode = 7;
  if (this->current_drive_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_drive_mode());
  }

  // int32 sys_state = 8;
  if (this->sys_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sys_state());
  }

  // bool vehicle_auto_enable = 9;
  if (this->vehicle_auto_enable() != 0) {
    total_size += 1 + 1;
  }

  // bool vehicle_lat_enable = 10;
  if (this->vehicle_lat_enable() != 0) {
    total_size += 1 + 1;
  }

  // bool vehicle_lon_enable = 11;
  if (this->vehicle_lon_enable() != 0) {
    total_size += 1 + 1;
  }

  // bool vehicle_epb_status = 12;
  if (this->vehicle_epb_status() != 0) {
    total_size += 1 + 1;
  }

  // int32 on_accpedal = 13;
  if (this->on_accpedal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->on_accpedal());
  }

  // bool steer_left_down = 14;
  if (this->steer_left_down() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControlFeedback_msgs.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControlFeedback_msgs.VehicleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControlFeedback_msgs.VehicleInfo)
    MergeFrom(*source);
  }
}

void VehicleInfo::MergeFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlFeedback_msgs.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.steerangle() != 0) {
    set_steerangle(from.steerangle());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.vehicle_accel() != 0) {
    set_vehicle_accel(from.vehicle_accel());
  }
  if (from.brake_pressure() != 0) {
    set_brake_pressure(from.brake_pressure());
  }
  if (from.shift_position() != 0) {
    set_shift_position(from.shift_position());
  }
  if (from.epb_status() != 0) {
    set_epb_status(from.epb_status());
  }
  if (from.current_drive_mode() != 0) {
    set_current_drive_mode(from.current_drive_mode());
  }
  if (from.sys_state() != 0) {
    set_sys_state(from.sys_state());
  }
  if (from.vehicle_auto_enable() != 0) {
    set_vehicle_auto_enable(from.vehicle_auto_enable());
  }
  if (from.vehicle_lat_enable() != 0) {
    set_vehicle_lat_enable(from.vehicle_lat_enable());
  }
  if (from.vehicle_lon_enable() != 0) {
    set_vehicle_lon_enable(from.vehicle_lon_enable());
  }
  if (from.vehicle_epb_status() != 0) {
    set_vehicle_epb_status(from.vehicle_epb_status());
  }
  if (from.on_accpedal() != 0) {
    set_on_accpedal(from.on_accpedal());
  }
  if (from.steer_left_down() != 0) {
    set_steer_left_down(from.steer_left_down());
  }
}

void VehicleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControlFeedback_msgs.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleInfo::CopyFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlFeedback_msgs.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleInfo::IsInitialized() const {
  return true;
}

void VehicleInfo::Swap(VehicleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleInfo::InternalSwap(VehicleInfo* other) {
  using std::swap;
  swap(steerangle_, other->steerangle_);
  swap(speed_, other->speed_);
  swap(vehicle_accel_, other->vehicle_accel_);
  swap(brake_pressure_, other->brake_pressure_);
  swap(shift_position_, other->shift_position_);
  swap(epb_status_, other->epb_status_);
  swap(current_drive_mode_, other->current_drive_mode_);
  swap(sys_state_, other->sys_state_);
  swap(vehicle_auto_enable_, other->vehicle_auto_enable_);
  swap(vehicle_lat_enable_, other->vehicle_lat_enable_);
  swap(vehicle_lon_enable_, other->vehicle_lon_enable_);
  swap(vehicle_epb_status_, other->vehicle_epb_status_);
  swap(on_accpedal_, other->on_accpedal_);
  swap(steer_left_down_, other->steer_left_down_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleInfo::GetMetadata() const {
  protobuf_ControlFeedback_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ControlFeedback_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimeStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeStatus::kDtimeFieldNumber;
const int TimeStatus::kSourceNodeNameFieldNumber;
const int TimeStatus::kDestinationNodeNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeStatus::TimeStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ControlFeedback_5fmsgs_2eproto::InitDefaultsTimeStatus();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ControlFeedback_msgs.TimeStatus)
}
TimeStatus::TimeStatus(const TimeStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_node_name().size() > 0) {
    source_node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_node_name_);
  }
  destination_node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.destination_node_name().size() > 0) {
    destination_node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_node_name_);
  }
  dtime_ = from.dtime_;
  // @@protoc_insertion_point(copy_constructor:ControlFeedback_msgs.TimeStatus)
}

void TimeStatus::SharedCtor() {
  source_node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dtime_ = 0;
  _cached_size_ = 0;
}

TimeStatus::~TimeStatus() {
  // @@protoc_insertion_point(destructor:ControlFeedback_msgs.TimeStatus)
  SharedDtor();
}

void TimeStatus::SharedDtor() {
  source_node_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_node_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TimeStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeStatus::descriptor() {
  ::protobuf_ControlFeedback_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ControlFeedback_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeStatus& TimeStatus::default_instance() {
  ::protobuf_ControlFeedback_5fmsgs_2eproto::InitDefaultsTimeStatus();
  return *internal_default_instance();
}

TimeStatus* TimeStatus::New(::google::protobuf::Arena* arena) const {
  TimeStatus* n = new TimeStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlFeedback_msgs.TimeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dtime_ = 0;
  _internal_metadata_.Clear();
}

bool TimeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ControlFeedback_msgs.TimeStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double dtime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_node_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_node_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_node_name().data(), static_cast<int>(this->source_node_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ControlFeedback_msgs.TimeStatus.source_node_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string destination_node_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_node_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->destination_node_name().data(), static_cast<int>(this->destination_node_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ControlFeedback_msgs.TimeStatus.destination_node_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ControlFeedback_msgs.TimeStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ControlFeedback_msgs.TimeStatus)
  return false;
#undef DO_
}

void TimeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ControlFeedback_msgs.TimeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dtime = 1;
  if (this->dtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->dtime(), output);
  }

  // string source_node_name = 2;
  if (this->source_node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_node_name().data(), static_cast<int>(this->source_node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ControlFeedback_msgs.TimeStatus.source_node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source_node_name(), output);
  }

  // string destination_node_name = 3;
  if (this->destination_node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_node_name().data(), static_cast<int>(this->destination_node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ControlFeedback_msgs.TimeStatus.destination_node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->destination_node_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ControlFeedback_msgs.TimeStatus)
}

::google::protobuf::uint8* TimeStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ControlFeedback_msgs.TimeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dtime = 1;
  if (this->dtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->dtime(), target);
  }

  // string source_node_name = 2;
  if (this->source_node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_node_name().data(), static_cast<int>(this->source_node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ControlFeedback_msgs.TimeStatus.source_node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source_node_name(), target);
  }

  // string destination_node_name = 3;
  if (this->destination_node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->destination_node_name().data(), static_cast<int>(this->destination_node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ControlFeedback_msgs.TimeStatus.destination_node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->destination_node_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlFeedback_msgs.TimeStatus)
  return target;
}

size_t TimeStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlFeedback_msgs.TimeStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string source_node_name = 2;
  if (this->source_node_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_node_name());
  }

  // string destination_node_name = 3;
  if (this->destination_node_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination_node_name());
  }

  // double dtime = 1;
  if (this->dtime() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControlFeedback_msgs.TimeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControlFeedback_msgs.TimeStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControlFeedback_msgs.TimeStatus)
    MergeFrom(*source);
  }
}

void TimeStatus::MergeFrom(const TimeStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlFeedback_msgs.TimeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_node_name().size() > 0) {

    source_node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_node_name_);
  }
  if (from.destination_node_name().size() > 0) {

    destination_node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_node_name_);
  }
  if (from.dtime() != 0) {
    set_dtime(from.dtime());
  }
}

void TimeStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControlFeedback_msgs.TimeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeStatus::CopyFrom(const TimeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlFeedback_msgs.TimeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeStatus::IsInitialized() const {
  return true;
}

void TimeStatus::Swap(TimeStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeStatus::InternalSwap(TimeStatus* other) {
  using std::swap;
  source_node_name_.Swap(&other->source_node_name_);
  destination_node_name_.Swap(&other->destination_node_name_);
  swap(dtime_, other->dtime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeStatus::GetMetadata() const {
  protobuf_ControlFeedback_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ControlFeedback_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TimeStatistics::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeStatistics::kDevTimeStatusMsgFieldNumber;
const int TimeStatistics::kSendingTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeStatistics::TimeStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ControlFeedback_5fmsgs_2eproto::InitDefaultsTimeStatistics();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ControlFeedback_msgs.TimeStatistics)
}
TimeStatistics::TimeStatistics(const TimeStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dev_time_status_msg_(from.dev_time_status_msg_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sending_timestamp_ = from.sending_timestamp_;
  // @@protoc_insertion_point(copy_constructor:ControlFeedback_msgs.TimeStatistics)
}

void TimeStatistics::SharedCtor() {
  sending_timestamp_ = 0;
  _cached_size_ = 0;
}

TimeStatistics::~TimeStatistics() {
  // @@protoc_insertion_point(destructor:ControlFeedback_msgs.TimeStatistics)
  SharedDtor();
}

void TimeStatistics::SharedDtor() {
}

void TimeStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeStatistics::descriptor() {
  ::protobuf_ControlFeedback_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ControlFeedback_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeStatistics& TimeStatistics::default_instance() {
  ::protobuf_ControlFeedback_5fmsgs_2eproto::InitDefaultsTimeStatistics();
  return *internal_default_instance();
}

TimeStatistics* TimeStatistics::New(::google::protobuf::Arena* arena) const {
  TimeStatistics* n = new TimeStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlFeedback_msgs.TimeStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_time_status_msg_.Clear();
  sending_timestamp_ = 0;
  _internal_metadata_.Clear();
}

bool TimeStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ControlFeedback_msgs.TimeStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ControlFeedback_msgs.TimeStatus dev_time_status_msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_dev_time_status_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sending_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sending_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ControlFeedback_msgs.TimeStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ControlFeedback_msgs.TimeStatistics)
  return false;
#undef DO_
}

void TimeStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ControlFeedback_msgs.TimeStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ControlFeedback_msgs.TimeStatus dev_time_status_msg = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dev_time_status_msg_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dev_time_status_msg(static_cast<int>(i)), output);
  }

  // double sending_timestamp = 2;
  if (this->sending_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sending_timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ControlFeedback_msgs.TimeStatistics)
}

::google::protobuf::uint8* TimeStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ControlFeedback_msgs.TimeStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ControlFeedback_msgs.TimeStatus dev_time_status_msg = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dev_time_status_msg_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->dev_time_status_msg(static_cast<int>(i)), deterministic, target);
  }

  // double sending_timestamp = 2;
  if (this->sending_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sending_timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlFeedback_msgs.TimeStatistics)
  return target;
}

size_t TimeStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlFeedback_msgs.TimeStatistics)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ControlFeedback_msgs.TimeStatus dev_time_status_msg = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->dev_time_status_msg_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dev_time_status_msg(static_cast<int>(i)));
    }
  }

  // double sending_timestamp = 2;
  if (this->sending_timestamp() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControlFeedback_msgs.TimeStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeStatistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControlFeedback_msgs.TimeStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControlFeedback_msgs.TimeStatistics)
    MergeFrom(*source);
  }
}

void TimeStatistics::MergeFrom(const TimeStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlFeedback_msgs.TimeStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dev_time_status_msg_.MergeFrom(from.dev_time_status_msg_);
  if (from.sending_timestamp() != 0) {
    set_sending_timestamp(from.sending_timestamp());
  }
}

void TimeStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControlFeedback_msgs.TimeStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeStatistics::CopyFrom(const TimeStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlFeedback_msgs.TimeStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeStatistics::IsInitialized() const {
  return true;
}

void TimeStatistics::Swap(TimeStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeStatistics::InternalSwap(TimeStatistics* other) {
  using std::swap;
  dev_time_status_msg_.InternalSwap(&other->dev_time_status_msg_);
  swap(sending_timestamp_, other->sending_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeStatistics::GetMetadata() const {
  protobuf_ControlFeedback_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ControlFeedback_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FaultInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaultInfo::kTimestampSecFieldNumber;
const int FaultInfo::kModuleNameFieldNumber;
const int FaultInfo::kVersionFieldNumber;
const int FaultInfo::kErrorCodeFieldNumber;
const int FaultInfo::kMsgFieldNumber;
const int FaultInfo::kFaultLevelFieldNumber;
const int FaultInfo::kFaultTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaultInfo::FaultInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ControlFeedback_5fmsgs_2eproto::InitDefaultsFaultInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ControlFeedback_msgs.FaultInfo)
}
FaultInfo::FaultInfo(const FaultInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.module_name().size() > 0) {
    module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&timestamp_sec_, &from.timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&fault_type_) -
    reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(fault_type_));
  // @@protoc_insertion_point(copy_constructor:ControlFeedback_msgs.FaultInfo)
}

void FaultInfo::SharedCtor() {
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fault_type_) -
      reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(fault_type_));
  _cached_size_ = 0;
}

FaultInfo::~FaultInfo() {
  // @@protoc_insertion_point(destructor:ControlFeedback_msgs.FaultInfo)
  SharedDtor();
}

void FaultInfo::SharedDtor() {
  module_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FaultInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaultInfo::descriptor() {
  ::protobuf_ControlFeedback_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ControlFeedback_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaultInfo& FaultInfo::default_instance() {
  ::protobuf_ControlFeedback_5fmsgs_2eproto::InitDefaultsFaultInfo();
  return *internal_default_instance();
}

FaultInfo* FaultInfo::New(::google::protobuf::Arena* arena) const {
  FaultInfo* n = new FaultInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaultInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlFeedback_msgs.FaultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fault_type_) -
      reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(fault_type_));
  _internal_metadata_.Clear();
}

bool FaultInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ControlFeedback_msgs.FaultInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string module_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->module_name().data(), static_cast<int>(this->module_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ControlFeedback_msgs.FaultInfo.module_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ControlFeedback_msgs.FaultInfo.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 error_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ControlFeedback_msgs.FaultInfo.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fault_level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fault_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fault_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fault_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ControlFeedback_msgs.FaultInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ControlFeedback_msgs.FaultInfo)
  return false;
#undef DO_
}

void FaultInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ControlFeedback_msgs.FaultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp_sec = 1;
  if (this->timestamp_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp_sec(), output);
  }

  // string module_name = 2;
  if (this->module_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_name().data(), static_cast<int>(this->module_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ControlFeedback_msgs.FaultInfo.module_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->module_name(), output);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ControlFeedback_msgs.FaultInfo.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // int32 error_code = 4;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->error_code(), output);
  }

  // string msg = 5;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ControlFeedback_msgs.FaultInfo.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->msg(), output);
  }

  // int32 fault_level = 6;
  if (this->fault_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fault_level(), output);
  }

  // int32 fault_type = 7;
  if (this->fault_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fault_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ControlFeedback_msgs.FaultInfo)
}

::google::protobuf::uint8* FaultInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ControlFeedback_msgs.FaultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp_sec = 1;
  if (this->timestamp_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp_sec(), target);
  }

  // string module_name = 2;
  if (this->module_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_name().data(), static_cast<int>(this->module_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ControlFeedback_msgs.FaultInfo.module_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->module_name(), target);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ControlFeedback_msgs.FaultInfo.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // int32 error_code = 4;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->error_code(), target);
  }

  // string msg = 5;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ControlFeedback_msgs.FaultInfo.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->msg(), target);
  }

  // int32 fault_level = 6;
  if (this->fault_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fault_level(), target);
  }

  // int32 fault_type = 7;
  if (this->fault_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fault_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlFeedback_msgs.FaultInfo)
  return target;
}

size_t FaultInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlFeedback_msgs.FaultInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string module_name = 2;
  if (this->module_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->module_name());
  }

  // string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string msg = 5;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // double timestamp_sec = 1;
  if (this->timestamp_sec() != 0) {
    total_size += 1 + 8;
  }

  // int32 error_code = 4;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  // int32 fault_level = 6;
  if (this->fault_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fault_level());
  }

  // int32 fault_type = 7;
  if (this->fault_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fault_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaultInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControlFeedback_msgs.FaultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FaultInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaultInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControlFeedback_msgs.FaultInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControlFeedback_msgs.FaultInfo)
    MergeFrom(*source);
  }
}

void FaultInfo::MergeFrom(const FaultInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlFeedback_msgs.FaultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.module_name().size() > 0) {

    module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.timestamp_sec() != 0) {
    set_timestamp_sec(from.timestamp_sec());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.fault_level() != 0) {
    set_fault_level(from.fault_level());
  }
  if (from.fault_type() != 0) {
    set_fault_type(from.fault_type());
  }
}

void FaultInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControlFeedback_msgs.FaultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaultInfo::CopyFrom(const FaultInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlFeedback_msgs.FaultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaultInfo::IsInitialized() const {
  return true;
}

void FaultInfo::Swap(FaultInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaultInfo::InternalSwap(FaultInfo* other) {
  using std::swap;
  module_name_.Swap(&other->module_name_);
  version_.Swap(&other->version_);
  msg_.Swap(&other->msg_);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(error_code_, other->error_code_);
  swap(fault_level_, other->fault_level_);
  swap(fault_type_, other->fault_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaultInfo::GetMetadata() const {
  protobuf_ControlFeedback_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ControlFeedback_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FaultVec::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaultVec::kInfoVecFieldNumber;
const int FaultVec::kModuleFaultLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaultVec::FaultVec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ControlFeedback_5fmsgs_2eproto::InitDefaultsFaultVec();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ControlFeedback_msgs.FaultVec)
}
FaultVec::FaultVec(const FaultVec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      info_vec_(from.info_vec_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_fault_level_ = from.module_fault_level_;
  // @@protoc_insertion_point(copy_constructor:ControlFeedback_msgs.FaultVec)
}

void FaultVec::SharedCtor() {
  module_fault_level_ = 0;
  _cached_size_ = 0;
}

FaultVec::~FaultVec() {
  // @@protoc_insertion_point(destructor:ControlFeedback_msgs.FaultVec)
  SharedDtor();
}

void FaultVec::SharedDtor() {
}

void FaultVec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaultVec::descriptor() {
  ::protobuf_ControlFeedback_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ControlFeedback_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaultVec& FaultVec::default_instance() {
  ::protobuf_ControlFeedback_5fmsgs_2eproto::InitDefaultsFaultVec();
  return *internal_default_instance();
}

FaultVec* FaultVec::New(::google::protobuf::Arena* arena) const {
  FaultVec* n = new FaultVec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaultVec::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlFeedback_msgs.FaultVec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_vec_.Clear();
  module_fault_level_ = 0;
  _internal_metadata_.Clear();
}

bool FaultVec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ControlFeedback_msgs.FaultVec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ControlFeedback_msgs.FaultInfo info_vec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_info_vec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 module_fault_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_fault_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ControlFeedback_msgs.FaultVec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ControlFeedback_msgs.FaultVec)
  return false;
#undef DO_
}

void FaultVec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ControlFeedback_msgs.FaultVec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ControlFeedback_msgs.FaultInfo info_vec = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_vec_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_vec(static_cast<int>(i)), output);
  }

  // int32 module_fault_level = 2;
  if (this->module_fault_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->module_fault_level(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ControlFeedback_msgs.FaultVec)
}

::google::protobuf::uint8* FaultVec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ControlFeedback_msgs.FaultVec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ControlFeedback_msgs.FaultInfo info_vec = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_vec_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->info_vec(static_cast<int>(i)), deterministic, target);
  }

  // int32 module_fault_level = 2;
  if (this->module_fault_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->module_fault_level(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlFeedback_msgs.FaultVec)
  return target;
}

size_t FaultVec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlFeedback_msgs.FaultVec)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ControlFeedback_msgs.FaultInfo info_vec = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->info_vec_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->info_vec(static_cast<int>(i)));
    }
  }

  // int32 module_fault_level = 2;
  if (this->module_fault_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->module_fault_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaultVec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControlFeedback_msgs.FaultVec)
  GOOGLE_DCHECK_NE(&from, this);
  const FaultVec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaultVec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControlFeedback_msgs.FaultVec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControlFeedback_msgs.FaultVec)
    MergeFrom(*source);
  }
}

void FaultVec::MergeFrom(const FaultVec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlFeedback_msgs.FaultVec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_vec_.MergeFrom(from.info_vec_);
  if (from.module_fault_level() != 0) {
    set_module_fault_level(from.module_fault_level());
  }
}

void FaultVec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControlFeedback_msgs.FaultVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaultVec::CopyFrom(const FaultVec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlFeedback_msgs.FaultVec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaultVec::IsInitialized() const {
  return true;
}

void FaultVec::Swap(FaultVec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaultVec::InternalSwap(FaultVec* other) {
  using std::swap;
  info_vec_.InternalSwap(&other->info_vec_);
  swap(module_fault_level_, other->module_fault_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaultVec::GetMetadata() const {
  protobuf_ControlFeedback_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ControlFeedback_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Header::InitAsDefaultInstance() {
  ::ControlFeedback_msgs::_Header_default_instance_._instance.get_mutable()->fault_vec_ = const_cast< ::ControlFeedback_msgs::FaultVec*>(
      ::ControlFeedback_msgs::FaultVec::internal_default_instance());
  ::ControlFeedback_msgs::_Header_default_instance_._instance.get_mutable()->time_statistics_ = const_cast< ::ControlFeedback_msgs::TimeStatistics*>(
      ::ControlFeedback_msgs::TimeStatistics::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kSequenceNumFieldNumber;
const int Header::kTimeStampFieldNumber;
const int Header::kModuleNameFieldNumber;
const int Header::kVersionFieldNumber;
const int Header::kFaultVecFieldNumber;
const int Header::kTimeStatisticsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ControlFeedback_5fmsgs_2eproto::InitDefaultsHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ControlFeedback_msgs.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.module_name().size() > 0) {
    module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_fault_vec()) {
    fault_vec_ = new ::ControlFeedback_msgs::FaultVec(*from.fault_vec_);
  } else {
    fault_vec_ = NULL;
  }
  if (from.has_time_statistics()) {
    time_statistics_ = new ::ControlFeedback_msgs::TimeStatistics(*from.time_statistics_);
  } else {
    time_statistics_ = NULL;
  }
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_num_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(sequence_num_));
  // @@protoc_insertion_point(copy_constructor:ControlFeedback_msgs.Header)
}

void Header::SharedCtor() {
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fault_vec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_num_) -
      reinterpret_cast<char*>(&fault_vec_)) + sizeof(sequence_num_));
  _cached_size_ = 0;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:ControlFeedback_msgs.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  module_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fault_vec_;
  if (this != internal_default_instance()) delete time_statistics_;
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_ControlFeedback_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ControlFeedback_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::protobuf_ControlFeedback_5fmsgs_2eproto::InitDefaultsHeader();
  return *internal_default_instance();
}

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlFeedback_msgs.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && fault_vec_ != NULL) {
    delete fault_vec_;
  }
  fault_vec_ = NULL;
  if (GetArenaNoVirtual() == NULL && time_statistics_ != NULL) {
    delete time_statistics_;
  }
  time_statistics_ = NULL;
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_num_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(sequence_num_));
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ControlFeedback_msgs.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double time_stamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string module_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->module_name().data(), static_cast<int>(this->module_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ControlFeedback_msgs.Header.module_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ControlFeedback_msgs.Header.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ControlFeedback_msgs.FaultVec fault_vec = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fault_vec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ControlFeedback_msgs.TimeStatistics time_statistics = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time_statistics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ControlFeedback_msgs.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ControlFeedback_msgs.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ControlFeedback_msgs.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_num = 1;
  if (this->sequence_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_num(), output);
  }

  // double time_stamp = 2;
  if (this->time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time_stamp(), output);
  }

  // string module_name = 3;
  if (this->module_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_name().data(), static_cast<int>(this->module_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ControlFeedback_msgs.Header.module_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->module_name(), output);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ControlFeedback_msgs.Header.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  // .ControlFeedback_msgs.FaultVec fault_vec = 5;
  if (this->has_fault_vec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->fault_vec_, output);
  }

  // .ControlFeedback_msgs.TimeStatistics time_statistics = 6;
  if (this->has_time_statistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->time_statistics_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ControlFeedback_msgs.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ControlFeedback_msgs.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_num = 1;
  if (this->sequence_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_num(), target);
  }

  // double time_stamp = 2;
  if (this->time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time_stamp(), target);
  }

  // string module_name = 3;
  if (this->module_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_name().data(), static_cast<int>(this->module_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ControlFeedback_msgs.Header.module_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->module_name(), target);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ControlFeedback_msgs.Header.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  // .ControlFeedback_msgs.FaultVec fault_vec = 5;
  if (this->has_fault_vec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->fault_vec_, deterministic, target);
  }

  // .ControlFeedback_msgs.TimeStatistics time_statistics = 6;
  if (this->has_time_statistics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->time_statistics_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlFeedback_msgs.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlFeedback_msgs.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string module_name = 3;
  if (this->module_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->module_name());
  }

  // string version = 4;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // .ControlFeedback_msgs.FaultVec fault_vec = 5;
  if (this->has_fault_vec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->fault_vec_);
  }

  // .ControlFeedback_msgs.TimeStatistics time_statistics = 6;
  if (this->has_time_statistics()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->time_statistics_);
  }

  // double time_stamp = 2;
  if (this->time_stamp() != 0) {
    total_size += 1 + 8;
  }

  // int32 sequence_num = 1;
  if (this->sequence_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControlFeedback_msgs.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControlFeedback_msgs.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControlFeedback_msgs.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlFeedback_msgs.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.module_name().size() > 0) {

    module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_fault_vec()) {
    mutable_fault_vec()->::ControlFeedback_msgs::FaultVec::MergeFrom(from.fault_vec());
  }
  if (from.has_time_statistics()) {
    mutable_time_statistics()->::ControlFeedback_msgs::TimeStatistics::MergeFrom(from.time_statistics());
  }
  if (from.time_stamp() != 0) {
    set_time_stamp(from.time_stamp());
  }
  if (from.sequence_num() != 0) {
    set_sequence_num(from.sequence_num());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControlFeedback_msgs.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlFeedback_msgs.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  module_name_.Swap(&other->module_name_);
  version_.Swap(&other->version_);
  swap(fault_vec_, other->fault_vec_);
  swap(time_statistics_, other->time_statistics_);
  swap(time_stamp_, other->time_stamp_);
  swap(sequence_num_, other->sequence_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_ControlFeedback_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ControlFeedback_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControlFeedback::InitAsDefaultInstance() {
  ::ControlFeedback_msgs::_ControlFeedback_default_instance_._instance.get_mutable()->header_ = const_cast< ::ControlFeedback_msgs::Header*>(
      ::ControlFeedback_msgs::Header::internal_default_instance());
  ::ControlFeedback_msgs::_ControlFeedback_default_instance_._instance.get_mutable()->vehicle_info_ = const_cast< ::ControlFeedback_msgs::VehicleInfo*>(
      ::ControlFeedback_msgs::VehicleInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlFeedback::kHeaderFieldNumber;
const int ControlFeedback::kVehicleInfoFieldNumber;
const int ControlFeedback::kBrakeStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlFeedback::ControlFeedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ControlFeedback_5fmsgs_2eproto::InitDefaultsControlFeedback();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ControlFeedback_msgs.ControlFeedback)
}
ControlFeedback::ControlFeedback(const ControlFeedback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::ControlFeedback_msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_vehicle_info()) {
    vehicle_info_ = new ::ControlFeedback_msgs::VehicleInfo(*from.vehicle_info_);
  } else {
    vehicle_info_ = NULL;
  }
  brake_state_ = from.brake_state_;
  // @@protoc_insertion_point(copy_constructor:ControlFeedback_msgs.ControlFeedback)
}

void ControlFeedback::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_state_) -
      reinterpret_cast<char*>(&header_)) + sizeof(brake_state_));
  _cached_size_ = 0;
}

ControlFeedback::~ControlFeedback() {
  // @@protoc_insertion_point(destructor:ControlFeedback_msgs.ControlFeedback)
  SharedDtor();
}

void ControlFeedback::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete vehicle_info_;
}

void ControlFeedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlFeedback::descriptor() {
  ::protobuf_ControlFeedback_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ControlFeedback_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControlFeedback& ControlFeedback::default_instance() {
  ::protobuf_ControlFeedback_5fmsgs_2eproto::InitDefaultsControlFeedback();
  return *internal_default_instance();
}

ControlFeedback* ControlFeedback::New(::google::protobuf::Arena* arena) const {
  ControlFeedback* n = new ControlFeedback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControlFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:ControlFeedback_msgs.ControlFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && vehicle_info_ != NULL) {
    delete vehicle_info_;
  }
  vehicle_info_ = NULL;
  brake_state_ = 0;
  _internal_metadata_.Clear();
}

bool ControlFeedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ControlFeedback_msgs.ControlFeedback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ControlFeedback_msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ControlFeedback_msgs.VehicleInfo vehicle_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 brake_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brake_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ControlFeedback_msgs.ControlFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ControlFeedback_msgs.ControlFeedback)
  return false;
#undef DO_
}

void ControlFeedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ControlFeedback_msgs.ControlFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ControlFeedback_msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .ControlFeedback_msgs.VehicleInfo vehicle_info = 2;
  if (this->has_vehicle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->vehicle_info_, output);
  }

  // int32 brake_state = 3;
  if (this->brake_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->brake_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ControlFeedback_msgs.ControlFeedback)
}

::google::protobuf::uint8* ControlFeedback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ControlFeedback_msgs.ControlFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ControlFeedback_msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .ControlFeedback_msgs.VehicleInfo vehicle_info = 2;
  if (this->has_vehicle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->vehicle_info_, deterministic, target);
  }

  // int32 brake_state = 3;
  if (this->brake_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->brake_state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ControlFeedback_msgs.ControlFeedback)
  return target;
}

size_t ControlFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ControlFeedback_msgs.ControlFeedback)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ControlFeedback_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .ControlFeedback_msgs.VehicleInfo vehicle_info = 2;
  if (this->has_vehicle_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vehicle_info_);
  }

  // int32 brake_state = 3;
  if (this->brake_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brake_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlFeedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ControlFeedback_msgs.ControlFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlFeedback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlFeedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ControlFeedback_msgs.ControlFeedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ControlFeedback_msgs.ControlFeedback)
    MergeFrom(*source);
  }
}

void ControlFeedback::MergeFrom(const ControlFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ControlFeedback_msgs.ControlFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::ControlFeedback_msgs::Header::MergeFrom(from.header());
  }
  if (from.has_vehicle_info()) {
    mutable_vehicle_info()->::ControlFeedback_msgs::VehicleInfo::MergeFrom(from.vehicle_info());
  }
  if (from.brake_state() != 0) {
    set_brake_state(from.brake_state());
  }
}

void ControlFeedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ControlFeedback_msgs.ControlFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlFeedback::CopyFrom(const ControlFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ControlFeedback_msgs.ControlFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlFeedback::IsInitialized() const {
  return true;
}

void ControlFeedback::Swap(ControlFeedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlFeedback::InternalSwap(ControlFeedback* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(vehicle_info_, other->vehicle_info_);
  swap(brake_state_, other->brake_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControlFeedback::GetMetadata() const {
  protobuf_ControlFeedback_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ControlFeedback_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ControlFeedback_msgs

// @@protoc_insertion_point(global_scope)
