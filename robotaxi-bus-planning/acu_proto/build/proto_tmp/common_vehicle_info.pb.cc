// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_vehicle_info.proto

#include "common_vehicle_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace vehicle {
namespace perception {
class CommonVehicleInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommonVehicleInfo>
      _instance;
} _CommonVehicleInfo_default_instance_;
}  // namespace perception
}  // namespace vehicle
namespace protobuf_common_5fvehicle_5finfo_2eproto {
void InitDefaultsCommonVehicleInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vehicle::perception::_CommonVehicleInfo_default_instance_;
    new (ptr) ::vehicle::perception::CommonVehicleInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vehicle::perception::CommonVehicleInfo::InitAsDefaultInstance();
}

void InitDefaultsCommonVehicleInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCommonVehicleInfoImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle::perception::CommonVehicleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle::perception::CommonVehicleInfo, vehiclespd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle::perception::CommonVehicleInfo, wheel_speed_fl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle::perception::CommonVehicleInfo, wheel_speed_fr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle::perception::CommonVehicleInfo, wheel_speed_rl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle::perception::CommonVehicleInfo, wheel_speed_rr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle::perception::CommonVehicleInfo, gear_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle::perception::CommonVehicleInfo, steering_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle::perception::CommonVehicleInfo, steering_angle_spd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle::perception::CommonVehicleInfo, longitudinal_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle::perception::CommonVehicleInfo, lateral_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle::perception::CommonVehicleInfo, yaw_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle::perception::CommonVehicleInfo, pitch_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle::perception::CommonVehicleInfo, roll_rate_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vehicle::perception::CommonVehicleInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::vehicle::perception::_CommonVehicleInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "common_vehicle_info.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031common_vehicle_info.proto\022\022vehicle.per"
      "ception\"\276\002\n\021CommonVehicleInfo\022\022\n\nvehicle"
      "spd\030\001 \001(\002\022\026\n\016wheel_speed_fl\030\002 \001(\002\022\026\n\016whe"
      "el_speed_fr\030\003 \001(\002\022\026\n\016wheel_speed_rl\030\004 \001("
      "\002\022\026\n\016wheel_speed_rr\030\005 \001(\002\022\025\n\rgear_locati"
      "on\030\006 \001(\005\022\026\n\016steering_angle\030\007 \001(\002\022\032\n\022stee"
      "ring_angle_spd\030\010 \001(\002\022\032\n\022longitudinal_acc"
      "el\030\t \001(\002\022\025\n\rlateral_accel\030\n \001(\002\022\020\n\010yaw_r"
      "ate\030\013 \001(\002\022\022\n\npitch_rate\030\014 \001(\002\022\021\n\troll_ra"
      "te\030\r \001(\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 376);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common_vehicle_info.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_common_5fvehicle_5finfo_2eproto
namespace vehicle {
namespace perception {

// ===================================================================

void CommonVehicleInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonVehicleInfo::kVehiclespdFieldNumber;
const int CommonVehicleInfo::kWheelSpeedFlFieldNumber;
const int CommonVehicleInfo::kWheelSpeedFrFieldNumber;
const int CommonVehicleInfo::kWheelSpeedRlFieldNumber;
const int CommonVehicleInfo::kWheelSpeedRrFieldNumber;
const int CommonVehicleInfo::kGearLocationFieldNumber;
const int CommonVehicleInfo::kSteeringAngleFieldNumber;
const int CommonVehicleInfo::kSteeringAngleSpdFieldNumber;
const int CommonVehicleInfo::kLongitudinalAccelFieldNumber;
const int CommonVehicleInfo::kLateralAccelFieldNumber;
const int CommonVehicleInfo::kYawRateFieldNumber;
const int CommonVehicleInfo::kPitchRateFieldNumber;
const int CommonVehicleInfo::kRollRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonVehicleInfo::CommonVehicleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_common_5fvehicle_5finfo_2eproto::InitDefaultsCommonVehicleInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vehicle.perception.CommonVehicleInfo)
}
CommonVehicleInfo::CommonVehicleInfo(const CommonVehicleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehiclespd_, &from.vehiclespd_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_rate_) -
    reinterpret_cast<char*>(&vehiclespd_)) + sizeof(roll_rate_));
  // @@protoc_insertion_point(copy_constructor:vehicle.perception.CommonVehicleInfo)
}

void CommonVehicleInfo::SharedCtor() {
  ::memset(&vehiclespd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_rate_) -
      reinterpret_cast<char*>(&vehiclespd_)) + sizeof(roll_rate_));
  _cached_size_ = 0;
}

CommonVehicleInfo::~CommonVehicleInfo() {
  // @@protoc_insertion_point(destructor:vehicle.perception.CommonVehicleInfo)
  SharedDtor();
}

void CommonVehicleInfo::SharedDtor() {
}

void CommonVehicleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonVehicleInfo::descriptor() {
  ::protobuf_common_5fvehicle_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_5fvehicle_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommonVehicleInfo& CommonVehicleInfo::default_instance() {
  ::protobuf_common_5fvehicle_5finfo_2eproto::InitDefaultsCommonVehicleInfo();
  return *internal_default_instance();
}

CommonVehicleInfo* CommonVehicleInfo::New(::google::protobuf::Arena* arena) const {
  CommonVehicleInfo* n = new CommonVehicleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommonVehicleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:vehicle.perception.CommonVehicleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehiclespd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_rate_) -
      reinterpret_cast<char*>(&vehiclespd_)) + sizeof(roll_rate_));
  _internal_metadata_.Clear();
}

bool CommonVehicleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vehicle.perception.CommonVehicleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float vehiclespd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vehiclespd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float wheel_speed_fl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_speed_fl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float wheel_speed_fr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_speed_fr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float wheel_speed_rl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_speed_rl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float wheel_speed_rr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_speed_rr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gear_location = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_location_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float steering_angle = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float steering_angle_spd = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_angle_spd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float longitudinal_accel = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitudinal_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lateral_accel = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lateral_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw_rate = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch_rate = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float roll_rate = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vehicle.perception.CommonVehicleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vehicle.perception.CommonVehicleInfo)
  return false;
#undef DO_
}

void CommonVehicleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vehicle.perception.CommonVehicleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float vehiclespd = 1;
  if (this->vehiclespd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->vehiclespd(), output);
  }

  // float wheel_speed_fl = 2;
  if (this->wheel_speed_fl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->wheel_speed_fl(), output);
  }

  // float wheel_speed_fr = 3;
  if (this->wheel_speed_fr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->wheel_speed_fr(), output);
  }

  // float wheel_speed_rl = 4;
  if (this->wheel_speed_rl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->wheel_speed_rl(), output);
  }

  // float wheel_speed_rr = 5;
  if (this->wheel_speed_rr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->wheel_speed_rr(), output);
  }

  // int32 gear_location = 6;
  if (this->gear_location() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gear_location(), output);
  }

  // float steering_angle = 7;
  if (this->steering_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->steering_angle(), output);
  }

  // float steering_angle_spd = 8;
  if (this->steering_angle_spd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->steering_angle_spd(), output);
  }

  // float longitudinal_accel = 9;
  if (this->longitudinal_accel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->longitudinal_accel(), output);
  }

  // float lateral_accel = 10;
  if (this->lateral_accel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->lateral_accel(), output);
  }

  // float yaw_rate = 11;
  if (this->yaw_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->yaw_rate(), output);
  }

  // float pitch_rate = 12;
  if (this->pitch_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->pitch_rate(), output);
  }

  // float roll_rate = 13;
  if (this->roll_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->roll_rate(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vehicle.perception.CommonVehicleInfo)
}

::google::protobuf::uint8* CommonVehicleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vehicle.perception.CommonVehicleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float vehiclespd = 1;
  if (this->vehiclespd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->vehiclespd(), target);
  }

  // float wheel_speed_fl = 2;
  if (this->wheel_speed_fl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->wheel_speed_fl(), target);
  }

  // float wheel_speed_fr = 3;
  if (this->wheel_speed_fr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->wheel_speed_fr(), target);
  }

  // float wheel_speed_rl = 4;
  if (this->wheel_speed_rl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->wheel_speed_rl(), target);
  }

  // float wheel_speed_rr = 5;
  if (this->wheel_speed_rr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->wheel_speed_rr(), target);
  }

  // int32 gear_location = 6;
  if (this->gear_location() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gear_location(), target);
  }

  // float steering_angle = 7;
  if (this->steering_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->steering_angle(), target);
  }

  // float steering_angle_spd = 8;
  if (this->steering_angle_spd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->steering_angle_spd(), target);
  }

  // float longitudinal_accel = 9;
  if (this->longitudinal_accel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->longitudinal_accel(), target);
  }

  // float lateral_accel = 10;
  if (this->lateral_accel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->lateral_accel(), target);
  }

  // float yaw_rate = 11;
  if (this->yaw_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->yaw_rate(), target);
  }

  // float pitch_rate = 12;
  if (this->pitch_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->pitch_rate(), target);
  }

  // float roll_rate = 13;
  if (this->roll_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->roll_rate(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vehicle.perception.CommonVehicleInfo)
  return target;
}

size_t CommonVehicleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vehicle.perception.CommonVehicleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float vehiclespd = 1;
  if (this->vehiclespd() != 0) {
    total_size += 1 + 4;
  }

  // float wheel_speed_fl = 2;
  if (this->wheel_speed_fl() != 0) {
    total_size += 1 + 4;
  }

  // float wheel_speed_fr = 3;
  if (this->wheel_speed_fr() != 0) {
    total_size += 1 + 4;
  }

  // float wheel_speed_rl = 4;
  if (this->wheel_speed_rl() != 0) {
    total_size += 1 + 4;
  }

  // float wheel_speed_rr = 5;
  if (this->wheel_speed_rr() != 0) {
    total_size += 1 + 4;
  }

  // int32 gear_location = 6;
  if (this->gear_location() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gear_location());
  }

  // float steering_angle = 7;
  if (this->steering_angle() != 0) {
    total_size += 1 + 4;
  }

  // float steering_angle_spd = 8;
  if (this->steering_angle_spd() != 0) {
    total_size += 1 + 4;
  }

  // float longitudinal_accel = 9;
  if (this->longitudinal_accel() != 0) {
    total_size += 1 + 4;
  }

  // float lateral_accel = 10;
  if (this->lateral_accel() != 0) {
    total_size += 1 + 4;
  }

  // float yaw_rate = 11;
  if (this->yaw_rate() != 0) {
    total_size += 1 + 4;
  }

  // float pitch_rate = 12;
  if (this->pitch_rate() != 0) {
    total_size += 1 + 4;
  }

  // float roll_rate = 13;
  if (this->roll_rate() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonVehicleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vehicle.perception.CommonVehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonVehicleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonVehicleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vehicle.perception.CommonVehicleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vehicle.perception.CommonVehicleInfo)
    MergeFrom(*source);
  }
}

void CommonVehicleInfo::MergeFrom(const CommonVehicleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vehicle.perception.CommonVehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehiclespd() != 0) {
    set_vehiclespd(from.vehiclespd());
  }
  if (from.wheel_speed_fl() != 0) {
    set_wheel_speed_fl(from.wheel_speed_fl());
  }
  if (from.wheel_speed_fr() != 0) {
    set_wheel_speed_fr(from.wheel_speed_fr());
  }
  if (from.wheel_speed_rl() != 0) {
    set_wheel_speed_rl(from.wheel_speed_rl());
  }
  if (from.wheel_speed_rr() != 0) {
    set_wheel_speed_rr(from.wheel_speed_rr());
  }
  if (from.gear_location() != 0) {
    set_gear_location(from.gear_location());
  }
  if (from.steering_angle() != 0) {
    set_steering_angle(from.steering_angle());
  }
  if (from.steering_angle_spd() != 0) {
    set_steering_angle_spd(from.steering_angle_spd());
  }
  if (from.longitudinal_accel() != 0) {
    set_longitudinal_accel(from.longitudinal_accel());
  }
  if (from.lateral_accel() != 0) {
    set_lateral_accel(from.lateral_accel());
  }
  if (from.yaw_rate() != 0) {
    set_yaw_rate(from.yaw_rate());
  }
  if (from.pitch_rate() != 0) {
    set_pitch_rate(from.pitch_rate());
  }
  if (from.roll_rate() != 0) {
    set_roll_rate(from.roll_rate());
  }
}

void CommonVehicleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vehicle.perception.CommonVehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonVehicleInfo::CopyFrom(const CommonVehicleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vehicle.perception.CommonVehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonVehicleInfo::IsInitialized() const {
  return true;
}

void CommonVehicleInfo::Swap(CommonVehicleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonVehicleInfo::InternalSwap(CommonVehicleInfo* other) {
  using std::swap;
  swap(vehiclespd_, other->vehiclespd_);
  swap(wheel_speed_fl_, other->wheel_speed_fl_);
  swap(wheel_speed_fr_, other->wheel_speed_fr_);
  swap(wheel_speed_rl_, other->wheel_speed_rl_);
  swap(wheel_speed_rr_, other->wheel_speed_rr_);
  swap(gear_location_, other->gear_location_);
  swap(steering_angle_, other->steering_angle_);
  swap(steering_angle_spd_, other->steering_angle_spd_);
  swap(longitudinal_accel_, other->longitudinal_accel_);
  swap(lateral_accel_, other->lateral_accel_);
  swap(yaw_rate_, other->yaw_rate_);
  swap(pitch_rate_, other->pitch_rate_);
  swap(roll_rate_, other->roll_rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonVehicleInfo::GetMetadata() const {
  protobuf_common_5fvehicle_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_5fvehicle_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace vehicle

// @@protoc_insertion_point(global_scope)
