// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception.proto

#include "perception.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace calmcar {
namespace perception {
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
class MeasuringStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MeasuringStatus>
      _instance;
} _MeasuringStatus_default_instance_;
class ObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Object>
      _instance;
} _Object_default_instance_;
class TrafficLightSpotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightSpot>
      _instance;
} _TrafficLightSpot_default_instance_;
class TrafficLightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficLight>
      _instance;
} _TrafficLight_default_instance_;
class TrafficSignDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSign>
      _instance;
} _TrafficSign_default_instance_;
class TrafficSignTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSignType>
      _instance;
} _TrafficSignType_default_instance_;
class TrafficSignStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficSignStatus>
      _instance;
} _TrafficSignStatus_default_instance_;
class AebObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AebObject>
      _instance;
} _AebObject_default_instance_;
class VehiclePredictPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehiclePredictPoint>
      _instance;
} _VehiclePredictPoint_default_instance_;
class Vehicle_StateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vehicle_State>
      _instance;
} _Vehicle_State_default_instance_;
class Signal_InputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signal_Input>
      _instance;
} _Signal_Input_default_instance_;
class Signal_OutputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Signal_Output>
      _instance;
} _Signal_Output_default_instance_;
class Fault_SignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Fault_Signal>
      _instance;
} _Fault_Signal_default_instance_;
class Vehicle_SignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vehicle_Signal>
      _instance;
} _Vehicle_Signal_default_instance_;
class AebOutputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AebOutput>
      _instance;
} _AebOutput_default_instance_;
class AebInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AebInput>
      _instance;
} _AebInput_default_instance_;
class AebInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AebInfo>
      _instance;
} _AebInfo_default_instance_;
class FailsafeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Failsafe>
      _instance;
} _Failsafe_default_instance_;
class PerceptionFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerceptionFrame>
      _instance;
} _PerceptionFrame_default_instance_;
}  // namespace perception
}  // namespace calmcar
namespace protobuf_perception_2eproto {
void InitDefaultsHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::calmcar::perception::_Header_default_instance_;
    new (ptr) ::calmcar::perception::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::Header::InitAsDefaultInstance();
}

void InitDefaultsHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHeaderImpl);
}

void InitDefaultsMeasuringStatusImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::calmcar::perception::_MeasuringStatus_default_instance_;
    new (ptr) ::calmcar::perception::MeasuringStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::MeasuringStatus::InitAsDefaultInstance();
}

void InitDefaultsMeasuringStatus() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMeasuringStatusImpl);
}

void InitDefaultsObjectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5ftypes_2eproto::InitDefaultsRect();
  protobuf_perception_2eproto::InitDefaultsMeasuringStatus();
  {
    void* ptr = &::calmcar::perception::_Object_default_instance_;
    new (ptr) ::calmcar::perception::Object();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::Object::InitAsDefaultInstance();
}

void InitDefaultsObject() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObjectImpl);
}

void InitDefaultsTrafficLightSpotImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5ftypes_2eproto::InitDefaultsRect();
  {
    void* ptr = &::calmcar::perception::_TrafficLightSpot_default_instance_;
    new (ptr) ::calmcar::perception::TrafficLightSpot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::TrafficLightSpot::InitAsDefaultInstance();
}

void InitDefaultsTrafficLightSpot() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrafficLightSpotImpl);
}

void InitDefaultsTrafficLightImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5ftypes_2eproto::InitDefaultsRect();
  protobuf_perception_2eproto::InitDefaultsTrafficLightSpot();
  {
    void* ptr = &::calmcar::perception::_TrafficLight_default_instance_;
    new (ptr) ::calmcar::perception::TrafficLight();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::TrafficLight::InitAsDefaultInstance();
}

void InitDefaultsTrafficLight() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrafficLightImpl);
}

void InitDefaultsTrafficSignImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5ftypes_2eproto::InitDefaultsRect();
  {
    void* ptr = &::calmcar::perception::_TrafficSign_default_instance_;
    new (ptr) ::calmcar::perception::TrafficSign();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::TrafficSign::InitAsDefaultInstance();
}

void InitDefaultsTrafficSign() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrafficSignImpl);
}

void InitDefaultsTrafficSignTypeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaultsInt32Value();
  {
    void* ptr = &::calmcar::perception::_TrafficSignType_default_instance_;
    new (ptr) ::calmcar::perception::TrafficSignType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::TrafficSignType::InitAsDefaultInstance();
}

void InitDefaultsTrafficSignType() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrafficSignTypeImpl);
}

void InitDefaultsTrafficSignStatusImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_2eproto::InitDefaultsTrafficSignType();
  protobuf_perception_5ftypes_2eproto::InitDefaultsRect();
  protobuf_google_2fprotobuf_2fwrappers_2eproto::InitDefaultsFloatValue();
  {
    void* ptr = &::calmcar::perception::_TrafficSignStatus_default_instance_;
    new (ptr) ::calmcar::perception::TrafficSignStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::TrafficSignStatus::InitAsDefaultInstance();
}

void InitDefaultsTrafficSignStatus() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrafficSignStatusImpl);
}

void InitDefaultsAebObjectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::calmcar::perception::_AebObject_default_instance_;
    new (ptr) ::calmcar::perception::AebObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::AebObject::InitAsDefaultInstance();
}

void InitDefaultsAebObject() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAebObjectImpl);
}

void InitDefaultsVehiclePredictPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::calmcar::perception::_VehiclePredictPoint_default_instance_;
    new (ptr) ::calmcar::perception::VehiclePredictPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::VehiclePredictPoint::InitAsDefaultInstance();
}

void InitDefaultsVehiclePredictPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehiclePredictPointImpl);
}

void InitDefaultsVehicle_StateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::calmcar::perception::_Vehicle_State_default_instance_;
    new (ptr) ::calmcar::perception::Vehicle_State();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::Vehicle_State::InitAsDefaultInstance();
}

void InitDefaultsVehicle_State() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicle_StateImpl);
}

void InitDefaultsSignal_InputImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_2eproto::InitDefaultsVehicle_State();
  {
    void* ptr = &::calmcar::perception::_Signal_Input_default_instance_;
    new (ptr) ::calmcar::perception::Signal_Input();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::Signal_Input::InitAsDefaultInstance();
}

void InitDefaultsSignal_Input() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSignal_InputImpl);
}

void InitDefaultsSignal_OutputImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::calmcar::perception::_Signal_Output_default_instance_;
    new (ptr) ::calmcar::perception::Signal_Output();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::Signal_Output::InitAsDefaultInstance();
}

void InitDefaultsSignal_Output() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSignal_OutputImpl);
}

void InitDefaultsFault_SignalImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::calmcar::perception::_Fault_Signal_default_instance_;
    new (ptr) ::calmcar::perception::Fault_Signal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::Fault_Signal::InitAsDefaultInstance();
}

void InitDefaultsFault_Signal() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFault_SignalImpl);
}

void InitDefaultsVehicle_SignalImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_2eproto::InitDefaultsSignal_Output();
  protobuf_perception_2eproto::InitDefaultsFault_Signal();
  {
    void* ptr = &::calmcar::perception::_Vehicle_Signal_default_instance_;
    new (ptr) ::calmcar::perception::Vehicle_Signal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::Vehicle_Signal::InitAsDefaultInstance();
}

void InitDefaultsVehicle_Signal() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicle_SignalImpl);
}

void InitDefaultsAebOutputImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_2eproto::InitDefaultsAebObject();
  protobuf_perception_2eproto::InitDefaultsVehiclePredictPoint();
  protobuf_perception_2eproto::InitDefaultsVehicle_Signal();
  {
    void* ptr = &::calmcar::perception::_AebOutput_default_instance_;
    new (ptr) ::calmcar::perception::AebOutput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::AebOutput::InitAsDefaultInstance();
}

void InitDefaultsAebOutput() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAebOutputImpl);
}

void InitDefaultsAebInputImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_2eproto::InitDefaultsSignal_Input();
  {
    void* ptr = &::calmcar::perception::_AebInput_default_instance_;
    new (ptr) ::calmcar::perception::AebInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::AebInput::InitAsDefaultInstance();
}

void InitDefaultsAebInput() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAebInputImpl);
}

void InitDefaultsAebInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_2eproto::InitDefaultsAebInput();
  protobuf_perception_2eproto::InitDefaultsAebOutput();
  {
    void* ptr = &::calmcar::perception::_AebInfo_default_instance_;
    new (ptr) ::calmcar::perception::AebInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::AebInfo::InitAsDefaultInstance();
}

void InitDefaultsAebInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAebInfoImpl);
}

void InitDefaultsFailsafeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::calmcar::perception::_Failsafe_default_instance_;
    new (ptr) ::calmcar::perception::Failsafe();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::Failsafe::InitAsDefaultInstance();
}

void InitDefaultsFailsafe() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFailsafeImpl);
}

void InitDefaultsPerceptionFrameImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_2eproto::InitDefaultsHeader();
  protobuf_perception_2eproto::InitDefaultsObject();
  protobuf_perception_5froad_2eproto::InitDefaultsRoadMark();
  protobuf_perception_5froad_2eproto::InitDefaultsLane();
  protobuf_perception_5froad_2eproto::InitDefaultsFreeSpace();
  protobuf_perception_2eproto::InitDefaultsTrafficLight();
  protobuf_perception_2eproto::InitDefaultsTrafficSign();
  protobuf_perception_2eproto::InitDefaultsTrafficSignStatus();
  protobuf_perception_2eproto::InitDefaultsFailsafe();
  protobuf_perception_5fvehicle_2eproto::InitDefaultsVehicle();
  protobuf_perception_5fbarricade_2eproto::InitDefaultsBarricade();
  protobuf_perception_5ftypes_2eproto::InitDefaultsPoint();
  protobuf_perception_5fdiagnose_2eproto::InitDefaultsDiagnose();
  protobuf_perception_2eproto::InitDefaultsAebInfo();
  {
    void* ptr = &::calmcar::perception::_PerceptionFrame_default_instance_;
    new (ptr) ::calmcar::perception::PerceptionFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::PerceptionFrame::InitAsDefaultInstance();
}

void InitDefaultsPerceptionFrame() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPerceptionFrameImpl);
}

::google::protobuf::Metadata file_level_metadata[20];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[37];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, frame_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, perception_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, protobuf_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, object_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, tfl_struct_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, tfl_spot_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, traffic_sign_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, fail_safe_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, lane_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, road_mark_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, free_space_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Header, barricade_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::MeasuringStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::MeasuringStatus, measuring_status_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::MeasuringStatus, measuring_status_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::MeasuringStatus, measuring_status_2_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, frame_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, camera_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, class__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, class_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, subclass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, subclass_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, bbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, length_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, width_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, height_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, age_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, age_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, visibility_side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, lat_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, lat_distance_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, long_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, long_distance_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, relative_lat_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, relative_lat_velocity_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, relative_long_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, relative_long_velocity_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_lat_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_lat_velocity_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_long_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_long_velocity_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, relative_lat_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, relative_lat_acc_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, relative_long_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, relative_long_acc_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_lat_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_lat_acc_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_long_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_long_acc_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_speed_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, abs_acceleration_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, heading_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, inverse_ttc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, inverse_ttc_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, angle_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, angle_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, angle_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, angle_side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, top_out_of_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, bottom_out_of_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, left_out_of_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, right_out_of_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, brake_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, turn_indicator_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, turn_indicator_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, measuring_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, motion_orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, motion_category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, motion_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, cutin_cutout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, lane_assignment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, lane_assignment_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Object, is_bev_object_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLightSpot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLightSpot, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLightSpot, color_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLightSpot, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLightSpot, dir_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLightSpot, bbox_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, camera_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, struct_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, spot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, class__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, class_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, tracking_age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, bbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, lat_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, lat_distance_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, long_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, long_distance_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, rel_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, rel_height_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, color_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, type_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficLight, spots_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, camera_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, class__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, subclass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, class_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, subclass_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, bbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, lat_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, long_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, tracking_age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSign, relevance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignType, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignType, sign_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, derived_signs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, bbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, lat_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, long_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, panel_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, panel_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, height_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::TrafficSignStatus, weight_limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebObject, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebObject, appear_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebObject, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebObject, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebObject, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebObject, speed_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebObject, speed_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebObject, cur_distance_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebObject, cur_distance_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebObject, last_1s_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebObject, last_1s_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebObject, last_1s_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebObject, last_record_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebObject, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::VehiclePredictPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::VehiclePredictPoint, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::VehiclePredictPoint, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::VehiclePredictPoint, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::VehiclePredictPoint, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Vehicle_State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Vehicle_State, vehicle_spd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Vehicle_State, vehicle_yaw_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Vehicle_State, lateral_acce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Vehicle_State, longitude_acce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Vehicle_State, throttle_report_driver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Vehicle_State, steering_torque_nm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Vehicle_State, steer_angle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Input, fcw_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Input, aeb_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Input, fcwsensitivelevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Input, aebsensitivelevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Input, tirecomplexitylevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Input, envtemperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Input, envhumidity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Input, vehicle_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Output, fcw_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Output, aeb_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Output, fcwstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Output, fcwsensitivelevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Output, fcw_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Output, aebstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Output, aebsensitivelevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Output, aeb_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Output, aebvehicleholdreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Output, aebfullbrake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Output, aebdbslevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Output, aebprefillreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Output, aebjerkreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Output, aebtargetdeceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Signal_Output, aebjerklevel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Fault_Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Fault_Signal, fcwsystemfaultstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Fault_Signal, aebsystemfaultstatus_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Vehicle_Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Vehicle_Signal, signal_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Vehicle_Signal, fault_signal_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebOutput, is_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebOutput, aeb_out_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebOutput, aeb_decision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebOutput, follow_objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebOutput, predict_pts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebOutput, vehicle_signal_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebInput, signal_input_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebInfo, aeb_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::AebInfo, aeb_output_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, camera_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, blockage_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, blockage_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, weather_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, weather_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, illumination_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, illumination_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, image_limited_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, image_limited_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, out_of_focus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::Failsafe, impacted_technologies_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, vd_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, vru_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, num_of_objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, cipv_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, vd_niv_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, vd_niv_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, cipv_lost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, allow_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, road_mark_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, free_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, tfl_structure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, tfl_struct_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, tfl_struct_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, tfl_spot_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, traffic_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, traffic_sign_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, failsafe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, vehicle_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, barricade_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, barricade_object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, self_lane_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, diagnose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, perception_end_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::PerceptionFrame, aeb_info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::calmcar::perception::Header)},
  { 18, -1, sizeof(::calmcar::perception::MeasuringStatus)},
  { 26, -1, sizeof(::calmcar::perception::Object)},
  { 97, -1, sizeof(::calmcar::perception::TrafficLightSpot)},
  { 107, -1, sizeof(::calmcar::perception::TrafficLight)},
  { 134, -1, sizeof(::calmcar::perception::TrafficSign)},
  { 153, -1, sizeof(::calmcar::perception::TrafficSignType)},
  { 160, -1, sizeof(::calmcar::perception::TrafficSignStatus)},
  { 176, -1, sizeof(::calmcar::perception::AebObject)},
  { 195, -1, sizeof(::calmcar::perception::VehiclePredictPoint)},
  { 204, -1, sizeof(::calmcar::perception::Vehicle_State)},
  { 216, -1, sizeof(::calmcar::perception::Signal_Input)},
  { 229, -1, sizeof(::calmcar::perception::Signal_Output)},
  { 249, -1, sizeof(::calmcar::perception::Fault_Signal)},
  { 256, -1, sizeof(::calmcar::perception::Vehicle_Signal)},
  { 263, -1, sizeof(::calmcar::perception::AebOutput)},
  { 274, -1, sizeof(::calmcar::perception::AebInput)},
  { 280, -1, sizeof(::calmcar::perception::AebInfo)},
  { 287, -1, sizeof(::calmcar::perception::Failsafe)},
  { 304, -1, sizeof(::calmcar::perception::PerceptionFrame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_MeasuringStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_Object_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_TrafficLightSpot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_TrafficLight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_TrafficSign_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_TrafficSignType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_TrafficSignStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_AebObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_VehiclePredictPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_Vehicle_State_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_Signal_Input_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_Signal_Output_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_Fault_Signal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_Vehicle_Signal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_AebOutput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_AebInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_AebInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_Failsafe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_PerceptionFrame_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "perception.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 20);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020perception.proto\022\022calmcar.perception\032\036"
      "google/protobuf/wrappers.proto\032\026percepti"
      "on_types.proto\032\034perception_sensor_info.p"
      "roto\032\030perception_vehicle.proto\032\025percepti"
      "on_road.proto\032\032perception_barricade.prot"
      "o\032\031perception_diagnose.proto\"\231\016\n\006Header\022"
      "\023\n\013frame_index\030\001 \001(\003\022\021\n\ttimestamp\030\002 \001(\003\022"
      "\032\n\022perception_version\030\003 \001(\t\022D\n\020protobuf_"
      "version\030\004 \001(\0162*.calmcar.perception.Heade"
      "r.ProtobufVersion\022@\n\016object_version\030\005 \001("
      "\0162(.calmcar.perception.Header.ObjectVers"
      "ion\022P\n\022tfl_struct_version\030\006 \001(\01624.calmca"
      "r.perception.Header.TrafficLightStructVe"
      "rsion\022L\n\020tfl_spot_version\030\007 \001(\01622.calmca"
      "r.perception.Header.TrafficLightSpotVers"
      "ion\022K\n\024traffic_sign_version\030\010 \001(\0162-.calm"
      "car.perception.Header.TrafficSignVersion"
      "\022E\n\021fail_safe_version\030\t \001(\0162*.calmcar.pe"
      "rception.Header.FailSafeVersion\022<\n\014lane_"
      "version\030\n \001(\0162&.calmcar.perception.Heade"
      "r.LaneVersion\022E\n\021road_mark_version\030\013 \001(\016"
      "2*.calmcar.perception.Header.RoadMarkVer"
      "sion\022G\n\022free_space_version\030\014 \001(\0162+.calmc"
      "ar.perception.Header.FreeSpaceVersion\022F\n"
      "\021barricade_version\030\r \001(\0162+.calmcar.perce"
      "ption.Header.BarricadeVersion\"\234\002\n\017Protob"
      "ufVersion\022\013\n\007V_1_0_0\020\000\022\013\n\007V_1_0_1\020\001\022\013\n\007V"
      "_1_0_2\020\002\022\013\n\007V_1_0_3\020\003\022\013\n\007V_1_0_4\020\004\022\013\n\007V_"
      "1_0_5\020\005\022\013\n\007V_1_0_6\020\006\022\013\n\007V_1_0_7\020\007\022\013\n\007V_1"
      "_0_8\020\010\022\013\n\007V_1_0_9\020\t\022\014\n\010V_1_0_10\020\n\022\014\n\010V_1"
      "_0_11\020\013\022\014\n\010V_1_0_12\020\014\022\014\n\010V_1_0_13\020\r\022\014\n\010V"
      "_1_0_14\020\016\022\014\n\010V_1_0_15\020\017\022\014\n\010V_1_0_16\020\020\022\014\n"
      "\010V_1_0_17\020\021\022\023\n\017CURRENT_VERSION\020\021\032\002\020\001\"G\n\r"
      "ObjectVersion\022\014\n\010OD_V_1_0\020\000\022\014\n\010OD_V_1_1\020"
      "\001\022\026\n\022OD_CURRENT_VERSION\020\001\032\002\020\001\"k\n\031Traffic"
      "LightStructVersion\022\024\n\020TFL_STRUCT_V_1_0\020\000"
      "\022\024\n\020TFL_STRUCT_V_1_1\020\001\022\036\n\032TFL_STRUCT_CUR"
      "RENT_VERSION\020\001\032\002\020\001\"c\n\027TrafficLightSpotVe"
      "rsion\022\022\n\016TFL_SPOT_V_1_0\020\000\022\022\n\016TFL_SPOT_V_"
      "1_1\020\001\022\034\n\030TFL_SPOT_CURRENT_VERSION\020\001\032\002\020\001\""
      "O\n\022TrafficSignVersion\022\r\n\tTSR_V_1_0\020\000\022\r\n\t"
      "TSR_V_1_1\020\001\022\027\n\023TSR_CURRENT_VERSION\020\001\032\002\020\001"
      "\"I\n\017FailSafeVersion\022\014\n\010FS_V_1_0\020\000\022\014\n\010FS_"
      "V_1_1\020\001\022\026\n\022FS_CURRENT_VERSION\020\001\032\002\020\001\"K\n\013L"
      "aneVersion\022\016\n\nLANE_V_1_0\020\000\022\016\n\nLANE_V_1_1"
      "\020\001\022\030\n\024LANE_CURRENT_VERSION\020\001\032\002\020\001\"I\n\017Road"
      "MarkVersion\022\014\n\010RM_V_1_0\020\000\022\014\n\010RM_V_1_1\020\001\022"
      "\026\n\022RM_CURRENT_VERSION\020\001\032\002\020\001\"M\n\020FreeSpace"
      "Version\022\r\n\tFSP_V_1_0\020\000\022\r\n\tFSP_V_1_1\020\001\022\027\n"
      "\023FSP_CURRENT_VERSION\020\001\032\002\020\001\"<\n\020BarricadeV"
      "ersion\022\014\n\010BA_V_1_0\020\000\022\026\n\022BA_CURRENT_VERSI"
      "ON\020\000\032\002\020\001\"\327\001\n\017MeasuringStatus\022@\n\022measurin"
      "g_status_0\030\001 \001(\0162$.calmcar.perception.Me"
      "asuringStatus0\022@\n\022measuring_status_1\030\002 \001"
      "(\0162$.calmcar.perception.MeasuringStatus1"
      "\022@\n\022measuring_status_2\030\003 \001(\0162$.calmcar.p"
      "erception.MeasuringStatus2\"\301\016\n\006Object\022\023\n"
      "\013frame_index\030\001 \001(\003\022\021\n\ttimestamp\030\002 \001(\003\022@\n"
      "\017camera_position\030\003 \001(\0162\'.calmcar.percept"
      "ion.CameraInfo.Position\022\n\n\002id\030\004 \001(\003\022\016\n\006c"
      "lass_\030\005 \001(\003\022\022\n\nclass_name\030\006 \001(\t\022\020\n\010subcl"
      "ass\030\007 \001(\003\022\025\n\rsubclass_name\030\010 \001(\t\022\022\n\nconf"
      "idence\030\t \001(\002\022&\n\004bbox\030\n \001(\0132\030.calmcar.per"
      "ception.Rect\022\016\n\006length\030\013 \001(\002\022\022\n\nlength_s"
      "td\030\014 \001(\002\022\r\n\005width\030\r \001(\002\022\021\n\twidth_std\030\016 \001"
      "(\002\022\016\n\006height\030\017 \001(\002\022\022\n\nheight_std\030\020 \001(\002\022\021"
      "\n\tage_count\030\021 \001(\003\022\023\n\013age_seconds\030\022 \001(\002\022;"
      "\n\017visibility_side\030\023 \001(\0162\".calmcar.percep"
      "tion.VisibilitySide\022\024\n\014lat_distance\030\024 \001("
      "\002\022\030\n\020lat_distance_std\030\025 \001(\002\022\025\n\rlong_dist"
      "ance\030\026 \001(\002\022\031\n\021long_distance_std\030\027 \001(\002\022\035\n"
      "\025relative_lat_velocity\030\030 \001(\002\022!\n\031relative"
      "_lat_velocity_std\030\031 \001(\002\022\036\n\026relative_long"
      "_velocity\030\032 \001(\002\022\"\n\032relative_long_velocit"
      "y_std\030\033 \001(\002\022\030\n\020abs_lat_velocity\030\034 \001(\002\022\034\n"
      "\024abs_lat_velocity_std\030\035 \001(\002\022\031\n\021abs_long_"
      "velocity\030\036 \001(\002\022\035\n\025abs_long_velocity_std\030"
      "\037 \001(\002\022\030\n\020relative_lat_acc\030  \001(\002\022\034\n\024relat"
      "ive_lat_acc_std\030! \001(\002\022\031\n\021relative_long_a"
      "cc\030\" \001(\002\022\035\n\025relative_long_acc_std\030# \001(\002\022"
      "\023\n\013abs_lat_acc\030$ \001(\002\022\027\n\017abs_lat_acc_std\030"
      "% \001(\002\022\024\n\014abs_long_acc\030& \001(\002\022\030\n\020abs_long_"
      "acc_std\030\' \001(\002\022\021\n\tabs_speed\030( \001(\002\022\025\n\rabs_"
      "speed_std\030) \001(\002\022\030\n\020abs_acceleration\030* \001("
      "\002\022\034\n\024abs_acceleration_std\030+ \001(\002\022\017\n\007headi"
      "ng\030, \001(\002\022\023\n\013heading_std\030- \001(\002\022\023\n\013inverse"
      "_ttc\030. \001(\002\022\027\n\017inverse_ttc_std\030/ \001(\002\022\022\n\na"
      "ngle_left\0300 \001(\002\022\023\n\013angle_right\0301 \001(\002\022\022\n\n"
      "angle_rate\0302 \001(\002\022\022\n\nangle_side\0303 \001(\002\022\030\n\020"
      "top_out_of_image\0304 \001(\010\022\033\n\023bottom_out_of_"
      "image\0305 \001(\010\022\031\n\021left_out_of_image\0306 \001(\010\022\032"
      "\n\022right_out_of_image\0307 \001(\010\022\023\n\013brake_ligh"
      "t\0308 \001(\010\022\033\n\023turn_indicator_left\0309 \001(\010\022\034\n\024"
      "turn_indicator_right\030: \001(\010\022=\n\020measuring_"
      "status\030; \001(\0132#.calmcar.perception.Measur"
      "ingStatus\022A\n\022motion_orientation\030< \001(\0162%."
      "calmcar.perception.MotionOrientation\022;\n\017"
      "motion_category\030= \001(\0162\".calmcar.percepti"
      "on.MotionCategory\0229\n\rmotion_status\030> \001(\016"
      "2\".calmcar.perception.MotionStatusV2\0225\n\014"
      "cutin_cutout\030\? \001(\0162\037.calmcar.perception."
      "CutInCutOut\022\027\n\017lane_assignment\030@ \001(\005\022\031\n\021"
      "lane_assignment_v\030A \001(\010\022\025\n\ris_bev_object"
      "\030B \001(\010\"\302\003\n\020TrafficLightSpot\0229\n\005color\030\001 \001"
      "(\0162*.calmcar.perception.TrafficLightSpot"
      ".Color\022\030\n\020color_confidence\030\002 \001(\002\0227\n\004type"
      "\030\003 \001(\0162).calmcar.perception.TrafficLight"
      "Spot.Type\022\026\n\016dir_confidence\030\004 \001(\002\022&\n\004bbo"
      "x\030\005 \001(\0132\030.calmcar.perception.Rect\"L\n\005Col"
      "or\022\021\n\rCOLOR_UNKNOWN\020\000\022\017\n\013COLOR_GREEN\020\001\022\r"
      "\n\tCOLOR_RED\020\002\022\020\n\014COLOR_YELLOW\020\003\"\221\001\n\004Type"
      "\022\020\n\014TYPE_UNKNOWN\020\000\022\027\n\023TYPE_ARROW_STRAIGH"
      "T\020\001\022\023\n\017TYPE_ARROW_LEFT\020\002\022\024\n\020TYPE_ARROW_R"
      "IGHT\020\003\022\024\n\020TYPE_ARROW_UTURN\020\004\022\017\n\013TYPE_CIR"
      "CLE\020\005\022\014\n\010TYPE_NUM\020\006\"\266\007\n\014TrafficLight\022@\n\017"
      "camera_position\030\001 \001(\0162\'.calmcar.percepti"
      "on.CameraInfo.Position\022\021\n\ttimestamp\030\002 \001("
      "\003\022\021\n\tstruct_id\030\003 \001(\003\022\017\n\007spot_id\030\004 \001(\003\022\016\n"
      "\006class_\030\005 \001(\003\022\022\n\nclass_name\030\006 \001(\t\022\024\n\014tra"
      "cking_age\030\007 \001(\003\022&\n\004bbox\030\010 \001(\0132\030.calmcar."
      "perception.Rect\022\016\n\006height\030\t \001(\002\022\r\n\005width"
      "\030\n \001(\002\022\024\n\014lat_distance\030\013 \001(\002\022\030\n\020lat_dist"
      "ance_std\030\014 \001(\002\022\025\n\rlong_distance\030\r \001(\002\022\031\n"
      "\021long_distance_std\030\016 \001(\002\022\022\n\nrel_height\030\017"
      " \001(\002\022\026\n\016rel_height_std\030\020 \001(\002\0225\n\005color\030\021 "
      "\001(\0162&.calmcar.perception.TrafficLight.Co"
      "lor\022\030\n\020color_confidence\030\022 \001(\002\0223\n\004type\030\023 "
      "\001(\0162%.calmcar.perception.TrafficLight.Ty"
      "pe\022\027\n\017type_confidence\030\024 \001(\002\0223\n\004mode\030\025 \001("
      "\0162%.calmcar.perception.TrafficLight.Mode"
      "\0223\n\005spots\030\026 \003(\0132$.calmcar.perception.Tra"
      "fficLightSpot\"L\n\005Color\022\021\n\rCOLOR_UNKNOWN\020"
      "\000\022\017\n\013COLOR_GREEN\020\001\022\r\n\tCOLOR_RED\020\002\022\020\n\014COL"
      "OR_YELLOW\020\003\"\221\001\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\027"
      "\n\023TYPE_ARROW_STRAIGHT\020\001\022\023\n\017TYPE_ARROW_LE"
      "FT\020\002\022\024\n\020TYPE_ARROW_RIGHT\020\003\022\024\n\020TYPE_ARROW"
      "_UTURN\020\004\022\017\n\013TYPE_CIRCLE\020\005\022\014\n\010TYPE_NUM\020\006\""
      "3\n\004Mode\022\r\n\tNO_BRIGHT\020\000\022\021\n\rALWAYS_BRIGHT\020"
      "\001\022\t\n\005FLASH\020\002\"\320\003\n\013TrafficSign\022@\n\017camera_p"
      "osition\030\001 \001(\0162\'.calmcar.perception.Camer"
      "aInfo.Position\022\021\n\ttimestamp\030\002 \001(\003\022\n\n\002id\030"
      "\003 \001(\003\022\016\n\006class_\030\004 \001(\003\022\020\n\010subclass\030\005 \001(\003\022"
      "\022\n\nclass_name\030\006 \001(\t\022\025\n\rsubclass_name\030\007 \001"
      "(\t\022&\n\004bbox\030\010 \001(\0132\030.calmcar.perception.Re"
      "ct\022\016\n\006height\030\t \001(\002\022\r\n\005width\030\n \001(\002\022\024\n\014lat"
      "_distance\030\013 \001(\002\022\025\n\rlong_distance\030\014 \001(\002\022\024"
      "\n\014tracking_age\030\r \001(\003\022G\n\trelevance\030\016 \001(\0162"
      "4.calmcar.perception.TrafficSign.Traffic"
      "SIgnRelevancy\"@\n\024TrafficSIgnRelevancy\022\n\n"
      "\006Unknow\020\000\022\014\n\010RELEVANT\020\001\022\016\n\nUNRELEVANT\020\002\""
      "\322\016\n\017TrafficSignType\0226\n\004type\030\001 \001(\0162(.calm"
      "car.perception.TrafficSignType.Type\022)\n\004s"
      "ign\030\002 \001(\0132\033.google.protobuf.Int32Value\">"
      "\n\004Type\022\013\n\007UNKNOWN\020\000\022\013\n\007WARNING\020\006\022\014\n\010PROH"
      "IBIT\020\007\022\016\n\nSUPPLEMENT\020\013\"\241\006\n\017ProhibitionSi"
      "gn\022\020\n\014SPEED_LIMIT5\020\000\022\021\n\rSPEED_LIMIT10\020\001\022"
      "\021\n\rSPEED_LIMIT15\020\002\022\021\n\rSPEED_LIMIT20\020\003\022\021\n"
      "\rSPEED_LIMIT30\020\004\022\021\n\rSPEED_LIMIT35\020\005\022\021\n\rS"
      "PEED_LIMIT40\020\006\022\021\n\rSPEED_LIMIT50\020\007\022\021\n\rSPE"
      "ED_LIMIT60\020\010\022\021\n\rSPEED_LIMIT70\020\t\022\021\n\rSPEED"
      "_LIMIT80\020\n\022\021\n\rSPEED_LIMIT90\020\013\022\022\n\016SPEED_L"
      "IMIT100\020\014\022\022\n\016SPEED_LIMIT110\020\r\022\022\n\016SPEED_L"
      "IMIT120\020\016\022\010\n\004STOP\020\017\022\t\n\005YIELD\020\020\022\014\n\010NO_ENT"
      "RY\020\021\022\017\n\013DONOT_ENTER\020\022\022\025\n\021NO_MOTOR_VEHICL"
      "ES\020\023\022\r\n\tNO_TRUCKS\020\024\022\022\n\016NO_LARGE_BUESE\020\025\022"
      "\022\n\016NO_MOTORCYCLES\020\026\022\027\n\023ONLY_MOTOR_VEHICL"
      "ES\020\027\022\022\n\016NO_PEDESTRIANS\020\030\022\020\n\014NO_LEFT_TURN"
      "\020\031\022\021\n\rNO_RIGHT_TURN\020\032\022\r\n\tNO_U_TURN\020\033\022\021\n\r"
      "NO_OVERTAKING\020\034\022\017\n\013NO_STOPPING\020\035\022\016\n\nNO_H"
      "ONKING\020\036\022\021\n\rMAX_CLEARANCE\020\037\022\020\n\014WEIGHT_LI"
      "MIT\020 \022\025\n\021AXLE_WEIGHT_LIMIT\020!\022\023\n\017SPEED_LI"
      "MIT_END\020\"\022\020\n\014NO_MINIBUSES\020#\022\016\n\nNO_TRACTO"
      "R\020$\022\017\n\013NO_STRAIGHT\020%\022\026\n\022NO_LEFT_RIGHT_TU"
      "RN\020&\022\025\n\021NO_OVERTAKING_END\020\'\022\r\n\tMAX_WIDTH"
      "\020(\022\026\n\022HAZARDOUS_VEHICLES\020)\"\217\005\n\013WarningSi"
      "gn\022\016\n\nCROSSROADS\020\000\022\017\n\013SHARP_CURVE\020\001\022\021\n\rR"
      "EVERSE_CURVE\020\002\022\022\n\016WINDING_CURVES\020\003\022\021\n\rST"
      "EEP_DESCENT\020\004\022\017\n\013NARROW_ROAD\020\005\022\021\n\rNARROW"
      "_BRIDGE\020\006\022\023\n\017TWO_WAY_TRAFFIC\020\007\022\025\n\021WATCH_"
      "PEDESTRIANS\020\010\022\022\n\016WATCH_CHILDREN\020\t\022\022\n\016TRA"
      "FFIC_LIGHTS\020\n\022\020\n\014FALING_ROCKS\020\013\022\r\n\tCROSS"
      "WIND\020\014\022\024\n\020SLIPPERY_SURFACE\020\r\022\027\n\023STEEP_MO"
      "UNTAIN_ROAD\020\016\022\023\n\017EMBANKMENT_ROAD\020\017\022\013\n\007VI"
      "LLAGE\020\020\022\n\n\006TUNNEL\020\021\022\024\n\020HUMP_BACK_BRIDGE\020"
      "\022\022\016\n\nBUMPY_ROAD\020\023\022\034\n\030GUARDED_RAILWAY_CRO"
      "SSING\020\024\022\036\n\032UNGUARDED_RAILWAY_CROSSING\020\025\022"
      "\026\n\022NON_MOTOR_VEHICLES\020\026\022\027\n\023ACCIDENT_BLAC"
      "K_SPOT\020\027\022\r\n\tSLOW_DOWN\020\030\022\r\n\tOBSTACLES\020\031\022\021"
      "\n\rCAUTION_DRIVE\020\032\022\r\n\tROAD_WORK\020\033\022\023\n\017SUGG"
      "ESTED_SPEED\020\034\022\023\n\017REVERSIBLE_LANE\020\035\022\017\n\013RO"
      "ADS_MERGE\020\036\022\014\n\010ICY_ROAD\020\037\022\021\n\rQUEUES_LIKE"
      "LY\020 \"\345\001\n\016SupplementSign\022\016\n\nTime_Limit\020\000\022"
      "\022\n\016Motor_Vehicles\020\001\022\n\n\006Trucks\020\002\022\022\n\016Arrow"
      "_Straight\020\003\022\017\n\013Distance_In\020\004\022\n\n\006School\020\005"
      "\022\010\n\004Ramp\020\006\022\014\n\010Minbuses\020\007\022\016\n\nArrow_Left\020\010"
      "\022\017\n\013Arrow_Right\020\t\022\022\n\016BendArrow_Left\020\n\022\023\n"
      "\017BendArrow_Right\020\013\022\020\n\014Arrow_Twoway\020\014\"\252\003\n"
      "\021TrafficSignStatus\0221\n\004sign\030\001 \001(\0132#.calmc"
      "ar.perception.TrafficSignType\022:\n\rderived"
      "_signs\030\002 \003(\0132#.calmcar.perception.Traffi"
      "cSignType\022&\n\004bbox\030\003 \001(\0132\030.calmcar.percep"
      "tion.Rect\022\024\n\014lat_distance\030\004 \001(\002\022\025\n\rlong_"
      "distance\030\005 \001(\002\022\023\n\013panel_width\030\006 \001(\002\022\024\n\014p"
      "anel_height\030\007 \001(\002\022\016\n\006height\030\010 \001(\002\0220\n\013spe"
      "ed_limit\030\t \001(\0132\033.google.protobuf.FloatVa"
      "lue\0221\n\014height_limit\030\n \001(\0132\033.google.proto"
      "buf.FloatValue\0221\n\014weight_limit\030\013 \001(\0132\033.g"
      "oogle.protobuf.FloatValue\"\301\002\n\tAebObject\022"
      "\n\n\002id\030\001 \001(\003\022\024\n\014appear_count\030\002 \001(\005\022\014\n\004typ"
      "e\030\003 \001(\004\022\r\n\005width\030\004 \001(\002\022\016\n\006length\030\005 \001(\002\022\017"
      "\n\007speed_x\030\006 \001(\002\022\017\n\007speed_y\030\007 \001(\002\022\026\n\016cur_"
      "distance_x\030\010 \001(\002\022\026\n\016cur_distance_y\030\t \001(\002"
      "\022\021\n\tlast_1s_x\030\n \003(\002\022\021\n\tlast_1s_y\030\013 \003(\002\022\027"
      "\n\017last_1s_heading\030\014 \003(\002\022\033\n\023last_record_c"
      "ounter\030\r \003(\005\0227\n\005state\030\016 \001(\0162(.calmcar.pe"
      "rception.AebFollowObjectState\"p\n\023Vehicle"
      "PredictPoint\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001t\030"
      "\003 \001(\002\0228\n\006status\030\004 \001(\0162(.calmcar.percepti"
      "on.AebFollowObjectState\"\275\001\n\rVehicle_Stat"
      "e\022\023\n\013vehicle_spd\030\001 \001(\002\022\030\n\020vehicle_yaw_ra"
      "te\030\002 \001(\002\022\024\n\014lateral_acce\030\003 \001(\002\022\026\n\016longit"
      "ude_acce\030\004 \001(\002\022\036\n\026throttle_report_driver"
      "\030\005 \001(\010\022\032\n\022steering_torque_nm\030\006 \001(\002\022\023\n\013st"
      "eer_angle\030\007 \001(\002\"\360\001\n\014Signal_Input\022\022\n\nFCW_"
      "Enable\030\001 \001(\010\022\022\n\nAEB_Enable\030\002 \001(\010\022\031\n\021FCWS"
      "ensitiveLevel\030\003 \001(\r\022\031\n\021AEBSensitiveLevel"
      "\030\004 \001(\r\022\033\n\023TireComplexityLevel\030\005 \001(\r\022\026\n\016E"
      "nvTemperature\030\006 \001(\002\022\023\n\013EnvHumidity\030\007 \001(\002"
      "\0228\n\rvehicle_state\030\010 \001(\0132!.calmcar.percep"
      "tion.Vehicle_State\"\337\002\n\rSignal_Output\022\022\n\n"
      "FCW_Active\030\001 \001(\010\022\022\n\nAEB_Active\030\002 \001(\010\022\021\n\t"
      "FCWStatus\030\003 \001(\r\022\031\n\021FCWSensitiveLevel\030\004 \001"
      "(\r\022\021\n\tFCW_State\030\005 \001(\r\022\021\n\tAEBStatus\030\006 \001(\r"
      "\022\031\n\021AEBSensitiveLevel\030\007 \001(\r\022\021\n\tAEB_State"
      "\030\010 \001(\r\022\031\n\021AEBVehicleHoldReq\030\t \001(\r\022\024\n\014AEB"
      "FullBrake\030\n \001(\r\022\023\n\013AEBDBSLevel\030\013 \001(\r\022\025\n\r"
      "AEBPrefillReq\030\014 \001(\r\022\022\n\nAEBJerkReq\030\r \001(\r\022"
      "\035\n\025AEBTargetDeceleration\030\016 \001(\002\022\024\n\014AEBJer"
      "kLevel\030\017 \001(\r\"J\n\014Fault_Signal\022\034\n\024FCWSyste"
      "mFaultStatus\030\001 \001(\r\022\034\n\024AEBSystemFaultStat"
      "us\030\002 \001(\r\"\202\001\n\016Vehicle_Signal\0228\n\rsignal_ou"
      "tput\030\001 \001(\0132!.calmcar.perception.Signal_O"
      "utput\0226\n\014fault_signal\030\002 \001(\0132 .calmcar.pe"
      "rception.Fault_Signal\"\323\005\n\tAebOutput\022\020\n\010i"
      "s_valid\030\001 \001(\010\0225\n\007aeb_out\030\002 \001(\0162$.calmcar"
      ".perception.AebOutput.AebOut\022\?\n\014aeb_deci"
      "sion\030\003 \001(\0162).calmcar.perception.AebOutpu"
      "t.AebDecision\0225\n\016follow_objects\030\004 \003(\0132\035."
      "calmcar.perception.AebObject\022<\n\013predict_"
      "pts\030\005 \003(\0132\'.calmcar.perception.VehiclePr"
      "edictPoint\022:\n\016vehicle_signal\030\006 \001(\0132\".cal"
      "mcar.perception.Vehicle_Signal\"o\n\006AebOut"
      "\022\014\n\010AEB_IDLE\020\000\022\017\n\013AEB_WARNING\020\001\022\026\n\022AEB_B"
      "RAKING_LEVEL1\020\002\022\026\n\022AEB_BRAKING_LEVEL2\020\003\022"
      "\026\n\022AEB_BRAKING_LEVEL3\020\004\"\231\002\n\013AebDecision\022"
      "\025\n\021AEB_DECISION_IDLE\020\000\022\030\n\024AEB_DECISION_W"
      "ARNING\020\001\022#\n\037AEB_DECISION_FRONT_BRAKE_LEV"
      "EL1\020\002\022#\n\037AEB_DECISION_FRONT_BRAKE_LEVEL2"
      "\020\003\022#\n\037AEB_DECISION_FRONT_BRAKE_LEVEL3\020\004\022"
      "\"\n\036AEB_DECISION_PASS_BRAKE_LEVEL1\020\005\022\"\n\036A"
      "EB_DECISION_PASS_BRAKE_LEVEL2\020\006\022\"\n\036AEB_D"
      "ECISION_PASS_BRAKE_LEVEL3\020\007\"B\n\010AebInput\022"
      "6\n\014signal_input\030\001 \001(\0132 .calmcar.percepti"
      "on.Signal_Input\"m\n\007AebInfo\022/\n\taeb_input\030"
      "\001 \001(\0132\034.calmcar.perception.AebInput\0221\n\na"
      "eb_output\030\002 \001(\0132\035.calmcar.perception.Aeb"
      "Output\"\336\010\n\010Failsafe\022@\n\017camera_position\030\001"
      " \001(\0162\'.calmcar.perception.CameraInfo.Pos"
      "ition\022\021\n\ttimestamp\030\002 \001(\003\022F\n\017blockage_sta"
      "tus\030\003 \001(\0162-.calmcar.perception.Failsafe."
      "FailSafeBlockage\022\025\n\rblockage_name\030\004 \001(\t\022"
      "D\n\016weather_status\030\005 \001(\0162,.calmcar.percep"
      "tion.Failsafe.FailSafeWeather\022\024\n\014weather"
      "_name\030\006 \001(\t\022N\n\023illumination_status\030\007 \001(\016"
      "21.calmcar.perception.Failsafe.FailSafeI"
      "llumination\022\031\n\021illumination_name\030\010 \001(\t\022O"
      "\n\024image_limited_status\030\t \001(\01621.calmcar.p"
      "erception.Failsafe.FailSafeImageLimited\022"
      "\032\n\022image_limited_name\030\n \001(\t\022\024\n\014out_of_fo"
      "cus\030\013 \001(\010\022\035\n\025impacted_technologies\030\014 \001(\005"
      "\"e\n\020FailSafeBlockage\022\024\n\020BLOCKAGE_UNKNOWN"
      "\020\000\022\021\n\rBLOCKAGE_FULL\020\001\022\025\n\021BLOCKAGE_PARTIC"
      "AL\020\002\022\021\n\rBLOCKAGE_NONE\020\003\"n\n\017FailSafeWeath"
      "er\022\023\n\017WEATHER_UNKNOWN\020\000\022\017\n\013WEATHER_FOG\020\001"
      "\022\020\n\014WEATHER_RAIN\020\002\022\020\n\014WEATHER_SNOW\020\003\022\021\n\r"
      "WEATHER_SUNNY\020\004\"u\n\024FailSafeIllumination\022"
      "\030\n\024ILLUMINATION_UNKNOWN\020\000\022\024\n\020ILLUMINATIO"
      "N_DAY\020\001\022\025\n\021ILLUMINATION_DUSK\020\002\022\026\n\022ILLUMI"
      "NATION_NIGHT\020\003\"\346\001\n\024FailSafeImageLimited\022"
      "\031\n\025IMAGE_LIMITED_UNKNOWN\020\000\022\030\n\024IMAGE_LIMI"
      "TED_NORMAL\020\001\022\030\n\024IMAGE_LIMITED_LOWSUN\020\002\022\032"
      "\n\026IMAGE_LIMITED_SPALSHES\020\003\022\026\n\022IMAGE_LIMI"
      "TED_BLUR\020\004\022\030\n\024IMAGE_LIMITED_SUNRAY\020\005\022\030\n\024"
      "IMAGE_LIMITED_FROZEN\020\006\022\027\n\023IMAGE_LIMITED_"
      "OTHER\020\007\"\335\010\n\017PerceptionFrame\022*\n\006header\030\001 "
      "\001(\0132\032.calmcar.perception.Header\022\020\n\010vd_co"
      "unt\030\002 \001(\003\022\021\n\tvru_count\030\003 \001(\003\022\026\n\016num_of_o"
      "bjects\030\004 \001(\003\022\017\n\007cipv_id\030\005 \001(\003\022\023\n\013vd_niv_"
      "left\030\006 \001(\003\022\024\n\014vd_niv_right\030\007 \001(\003\022/\n\tcipv"
      "_lost\030\010 \001(\0162\034.calmcar.perception.CipvLos"
      "t\022/\n\tallow_acc\030\t \001(\0162\034.calmcar.perceptio"
      "n.AllowAcc\022*\n\006object\030\n \003(\0132\032.calmcar.per"
      "ception.Object\022/\n\troad_mark\030\013 \003(\0132\034.calm"
      "car.perception.RoadMark\022&\n\004lane\030\014 \001(\0132\030."
      "calmcar.perception.Lane\0221\n\nfree_space\030\r "
      "\001(\0132\035.calmcar.perception.FreeSpace\0227\n\rtf"
      "l_structure\030\016 \003(\0132 .calmcar.perception.T"
      "rafficLight\022:\n\020tfl_struct_state\030\017 \003(\0132 ."
      "calmcar.perception.TrafficLight\022\030\n\020tfl_s"
      "truct_count\030\020 \001(\003\022\026\n\016tfl_spot_count\030\021 \001("
      "\003\0225\n\014traffic_sign\030\022 \003(\0132\037.calmcar.percep"
      "tion.TrafficSign\022B\n\023traffic_sign_status\030"
      "\023 \003(\0132%.calmcar.perception.TrafficSignSt"
      "atus\022.\n\010failsafe\030\024 \003(\0132\034.calmcar.percept"
      "ion.Failsafe\0221\n\014vehicle_info\030\025 \003(\0132\033.cal"
      "mcar.perception.Vehicle\022\027\n\017barricade_cou"
      "nt\030\026 \001(\003\0227\n\020barricade_object\030\027 \003(\0132\035.cal"
      "mcar.perception.Barricade\0223\n\020self_lane_c"
      "enter\030\030 \003(\0132\031.calmcar.perception.Point\022."
      "\n\010diagnose\030\031 \001(\0132\034.calmcar.perception.Di"
      "agnose\022 \n\030perception_end_timestamp\030\032 \001(\003"
      "\022-\n\010aeb_info\030\033 \001(\0132\033.calmcar.perception."
      "AebInfo**\n\020MeasuringStatus0\022\n\n\006MS_OLD\020\000\022"
      "\n\n\006MS_NEW\020\001*5\n\020MeasuringStatus1\022\020\n\014MS_PR"
      "EDICTED\020\000\022\017\n\013MS_MEASURED\020\001*0\n\020MeasuringS"
      "tatus2\022\016\n\nMS_INVALID\020\000\022\014\n\010MS_VALID\020\001*\202\002\n"
      "\016MotionCategory\022\017\n\013MC_UNFILLED\020\000\022\020\n\014MC_U"
      "NDEFINED\020\001\022\016\n\nMC_PASSING\020\002\022\021\n\rMC_PASSING"
      "_IN\020\003\022\022\n\016MC_PASSING_OUT\020\004\022\023\n\017MC_CLOSE_CU"
      "T_IN\020\005\022\020\n\014MC_MOVING_IN\020\006\022\021\n\rMC_MOVING_OU"
      "T\020\007\022\017\n\013MC_CROSSING\020\010\022\013\n\007MC_LTAP\020\t\022\013\n\007MC_"
      "RTAP\020\n\022\r\n\tMC_MOVING\020\013\022\021\n\rMC_PRECEEDING\020\014"
      "\022\017\n\013MC_ONCOMING\020\r*\344\001\n\021MotionOrientation\022"
      "\016\n\nMO_INVALID\020\000\022\025\n\021MO_DRIFTING_RIGHT\020\001\022\025"
      "\n\021MO_CROSSING_RIGHT\020\003\022\030\n\024MO_OC_DRIFTING_"
      "RIGHT\020\005\022\017\n\013MO_ONCOMING\020\006\022\027\n\023MO_OC_DRIFTI"
      "NG_LEFT\020\007\022\024\n\020MO_CROSSING_LEFT\020\t\022\024\n\020MO_DR"
      "IFTING_LEFT\020\013\022\021\n\rMO_PRECEEDING\020\014\022\016\n\nMO_U"
      "NKNOWN\020\r*\?\n\016VisibilitySide\022\022\n\016VS_NOT_VIS"
      "IBLE\020\000\022\014\n\010VS_FRONT\020\001\022\013\n\007VS_REAR\020\002*\300\001\n\016Mo"
      "tionStatusV2\022\032\n\026MotionStatusV2_INVALID\020\000"
      "\022\032\n\026MotionStatusV2_UNKNOWN\020\001\022\031\n\025MotionSt"
      "atusV2_MOVING\020\002\022\035\n\031MotionStatusV2_STATIO"
      "NARY\020\003\022\032\n\026MotionStatusV2_STOPPED\020\004\022 \n\034Mo"
      "tionStatusV2_MOVING_SLOWLY\020\005*\343\001\n\013CutInCu"
      "tOut\022\032\n\026CUT_IN_CUT_OUT_UNKNOWN\020\000\022#\n\037CUT_"
      "IN_CUT_OUT_HOST_CUT_IN_LEFT\020\001\022$\n CUT_IN_"
      "CUT_OUT_HOST_CUT_IN_RIGHT\020\002\022$\n CUT_IN_CU"
      "T_OUT_HOST_CUT_OUT_LEFT\020\003\022%\n!CUT_IN_CUT_"
      "OUT_HOST_CUT_OUT_RIGHT\020\004\022 \n\034CUT_IN_CUT_O"
      "UT_NO_CUT_IN_OUT\020\005*\214\001\n\024AebFollowObjectSt"
      "ate\022\022\n\016AEB_OBJ_NORMAL\020\000\022\023\n\017AEB_OBJ_WARNI"
      "NG\020\001\022\026\n\022AEB_OBJ_FRONT_STOP\020\002\022\032\n\026AEB_OBJ_"
      "FRONT_SLOWMOVE\020\003\022\027\n\023AEB_OBJ_PASS_THOUGH\020"
      "\004*c\n\010CipvLost\022\024\n\020CipvLost_NO_LOSS\020\000\022 \n\034C"
      "ipvLost_LOST_TARGET_FOV_OUT\020\001\022\037\n\033CipvLos"
      "t_LOST_TARGET_FOV_IN\020\002*a\n\010AllowAcc\022\027\n\023Al"
      "lowAcc_FREE_SPACE\020\000\022\033\n\027AllowAcc_SPACE_NO"
      "T_FREE\020\001\022\037\n\033AllowAcc_FREE_SPACE_UNKNOWN\020"
      "\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 14369);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::protobuf_perception_5ftypes_2eproto::AddDescriptors();
  ::protobuf_perception_5fsensor_5finfo_2eproto::AddDescriptors();
  ::protobuf_perception_5fvehicle_2eproto::AddDescriptors();
  ::protobuf_perception_5froad_2eproto::AddDescriptors();
  ::protobuf_perception_5fbarricade_2eproto::AddDescriptors();
  ::protobuf_perception_5fdiagnose_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_perception_2eproto
namespace calmcar {
namespace perception {
const ::google::protobuf::EnumDescriptor* Header_ProtobufVersion_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[0];
}
bool Header_ProtobufVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_ProtobufVersion Header::V_1_0_0;
const Header_ProtobufVersion Header::V_1_0_1;
const Header_ProtobufVersion Header::V_1_0_2;
const Header_ProtobufVersion Header::V_1_0_3;
const Header_ProtobufVersion Header::V_1_0_4;
const Header_ProtobufVersion Header::V_1_0_5;
const Header_ProtobufVersion Header::V_1_0_6;
const Header_ProtobufVersion Header::V_1_0_7;
const Header_ProtobufVersion Header::V_1_0_8;
const Header_ProtobufVersion Header::V_1_0_9;
const Header_ProtobufVersion Header::V_1_0_10;
const Header_ProtobufVersion Header::V_1_0_11;
const Header_ProtobufVersion Header::V_1_0_12;
const Header_ProtobufVersion Header::V_1_0_13;
const Header_ProtobufVersion Header::V_1_0_14;
const Header_ProtobufVersion Header::V_1_0_15;
const Header_ProtobufVersion Header::V_1_0_16;
const Header_ProtobufVersion Header::V_1_0_17;
const Header_ProtobufVersion Header::CURRENT_VERSION;
const Header_ProtobufVersion Header::ProtobufVersion_MIN;
const Header_ProtobufVersion Header::ProtobufVersion_MAX;
const int Header::ProtobufVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_ObjectVersion_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[1];
}
bool Header_ObjectVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_ObjectVersion Header::OD_V_1_0;
const Header_ObjectVersion Header::OD_V_1_1;
const Header_ObjectVersion Header::OD_CURRENT_VERSION;
const Header_ObjectVersion Header::ObjectVersion_MIN;
const Header_ObjectVersion Header::ObjectVersion_MAX;
const int Header::ObjectVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_TrafficLightStructVersion_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[2];
}
bool Header_TrafficLightStructVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_TrafficLightStructVersion Header::TFL_STRUCT_V_1_0;
const Header_TrafficLightStructVersion Header::TFL_STRUCT_V_1_1;
const Header_TrafficLightStructVersion Header::TFL_STRUCT_CURRENT_VERSION;
const Header_TrafficLightStructVersion Header::TrafficLightStructVersion_MIN;
const Header_TrafficLightStructVersion Header::TrafficLightStructVersion_MAX;
const int Header::TrafficLightStructVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_TrafficLightSpotVersion_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[3];
}
bool Header_TrafficLightSpotVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_TrafficLightSpotVersion Header::TFL_SPOT_V_1_0;
const Header_TrafficLightSpotVersion Header::TFL_SPOT_V_1_1;
const Header_TrafficLightSpotVersion Header::TFL_SPOT_CURRENT_VERSION;
const Header_TrafficLightSpotVersion Header::TrafficLightSpotVersion_MIN;
const Header_TrafficLightSpotVersion Header::TrafficLightSpotVersion_MAX;
const int Header::TrafficLightSpotVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_TrafficSignVersion_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[4];
}
bool Header_TrafficSignVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_TrafficSignVersion Header::TSR_V_1_0;
const Header_TrafficSignVersion Header::TSR_V_1_1;
const Header_TrafficSignVersion Header::TSR_CURRENT_VERSION;
const Header_TrafficSignVersion Header::TrafficSignVersion_MIN;
const Header_TrafficSignVersion Header::TrafficSignVersion_MAX;
const int Header::TrafficSignVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_FailSafeVersion_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[5];
}
bool Header_FailSafeVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_FailSafeVersion Header::FS_V_1_0;
const Header_FailSafeVersion Header::FS_V_1_1;
const Header_FailSafeVersion Header::FS_CURRENT_VERSION;
const Header_FailSafeVersion Header::FailSafeVersion_MIN;
const Header_FailSafeVersion Header::FailSafeVersion_MAX;
const int Header::FailSafeVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_LaneVersion_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[6];
}
bool Header_LaneVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_LaneVersion Header::LANE_V_1_0;
const Header_LaneVersion Header::LANE_V_1_1;
const Header_LaneVersion Header::LANE_CURRENT_VERSION;
const Header_LaneVersion Header::LaneVersion_MIN;
const Header_LaneVersion Header::LaneVersion_MAX;
const int Header::LaneVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_RoadMarkVersion_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[7];
}
bool Header_RoadMarkVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_RoadMarkVersion Header::RM_V_1_0;
const Header_RoadMarkVersion Header::RM_V_1_1;
const Header_RoadMarkVersion Header::RM_CURRENT_VERSION;
const Header_RoadMarkVersion Header::RoadMarkVersion_MIN;
const Header_RoadMarkVersion Header::RoadMarkVersion_MAX;
const int Header::RoadMarkVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_FreeSpaceVersion_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[8];
}
bool Header_FreeSpaceVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_FreeSpaceVersion Header::FSP_V_1_0;
const Header_FreeSpaceVersion Header::FSP_V_1_1;
const Header_FreeSpaceVersion Header::FSP_CURRENT_VERSION;
const Header_FreeSpaceVersion Header::FreeSpaceVersion_MIN;
const Header_FreeSpaceVersion Header::FreeSpaceVersion_MAX;
const int Header::FreeSpaceVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_BarricadeVersion_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[9];
}
bool Header_BarricadeVersion_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_BarricadeVersion Header::BA_V_1_0;
const Header_BarricadeVersion Header::BA_CURRENT_VERSION;
const Header_BarricadeVersion Header::BarricadeVersion_MIN;
const Header_BarricadeVersion Header::BarricadeVersion_MAX;
const int Header::BarricadeVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficLightSpot_Color_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[10];
}
bool TrafficLightSpot_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLightSpot_Color TrafficLightSpot::COLOR_UNKNOWN;
const TrafficLightSpot_Color TrafficLightSpot::COLOR_GREEN;
const TrafficLightSpot_Color TrafficLightSpot::COLOR_RED;
const TrafficLightSpot_Color TrafficLightSpot::COLOR_YELLOW;
const TrafficLightSpot_Color TrafficLightSpot::Color_MIN;
const TrafficLightSpot_Color TrafficLightSpot::Color_MAX;
const int TrafficLightSpot::Color_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficLightSpot_Type_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[11];
}
bool TrafficLightSpot_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLightSpot_Type TrafficLightSpot::TYPE_UNKNOWN;
const TrafficLightSpot_Type TrafficLightSpot::TYPE_ARROW_STRAIGHT;
const TrafficLightSpot_Type TrafficLightSpot::TYPE_ARROW_LEFT;
const TrafficLightSpot_Type TrafficLightSpot::TYPE_ARROW_RIGHT;
const TrafficLightSpot_Type TrafficLightSpot::TYPE_ARROW_UTURN;
const TrafficLightSpot_Type TrafficLightSpot::TYPE_CIRCLE;
const TrafficLightSpot_Type TrafficLightSpot::TYPE_NUM;
const TrafficLightSpot_Type TrafficLightSpot::Type_MIN;
const TrafficLightSpot_Type TrafficLightSpot::Type_MAX;
const int TrafficLightSpot::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficLight_Color_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[12];
}
bool TrafficLight_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLight_Color TrafficLight::COLOR_UNKNOWN;
const TrafficLight_Color TrafficLight::COLOR_GREEN;
const TrafficLight_Color TrafficLight::COLOR_RED;
const TrafficLight_Color TrafficLight::COLOR_YELLOW;
const TrafficLight_Color TrafficLight::Color_MIN;
const TrafficLight_Color TrafficLight::Color_MAX;
const int TrafficLight::Color_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficLight_Type_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[13];
}
bool TrafficLight_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLight_Type TrafficLight::TYPE_UNKNOWN;
const TrafficLight_Type TrafficLight::TYPE_ARROW_STRAIGHT;
const TrafficLight_Type TrafficLight::TYPE_ARROW_LEFT;
const TrafficLight_Type TrafficLight::TYPE_ARROW_RIGHT;
const TrafficLight_Type TrafficLight::TYPE_ARROW_UTURN;
const TrafficLight_Type TrafficLight::TYPE_CIRCLE;
const TrafficLight_Type TrafficLight::TYPE_NUM;
const TrafficLight_Type TrafficLight::Type_MIN;
const TrafficLight_Type TrafficLight::Type_MAX;
const int TrafficLight::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficLight_Mode_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[14];
}
bool TrafficLight_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLight_Mode TrafficLight::NO_BRIGHT;
const TrafficLight_Mode TrafficLight::ALWAYS_BRIGHT;
const TrafficLight_Mode TrafficLight::FLASH;
const TrafficLight_Mode TrafficLight::Mode_MIN;
const TrafficLight_Mode TrafficLight::Mode_MAX;
const int TrafficLight::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSign_TrafficSIgnRelevancy_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[15];
}
bool TrafficSign_TrafficSIgnRelevancy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSign_TrafficSIgnRelevancy TrafficSign::Unknow;
const TrafficSign_TrafficSIgnRelevancy TrafficSign::RELEVANT;
const TrafficSign_TrafficSIgnRelevancy TrafficSign::UNRELEVANT;
const TrafficSign_TrafficSIgnRelevancy TrafficSign::TrafficSIgnRelevancy_MIN;
const TrafficSign_TrafficSIgnRelevancy TrafficSign::TrafficSIgnRelevancy_MAX;
const int TrafficSign::TrafficSIgnRelevancy_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSignType_Type_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[16];
}
bool TrafficSignType_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 6:
    case 7:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignType_Type TrafficSignType::UNKNOWN;
const TrafficSignType_Type TrafficSignType::WARNING;
const TrafficSignType_Type TrafficSignType::PROHIBIT;
const TrafficSignType_Type TrafficSignType::SUPPLEMENT;
const TrafficSignType_Type TrafficSignType::Type_MIN;
const TrafficSignType_Type TrafficSignType::Type_MAX;
const int TrafficSignType::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSignType_ProhibitionSign_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[17];
}
bool TrafficSignType_ProhibitionSign_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT5;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT10;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT15;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT20;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT30;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT35;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT40;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT50;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT60;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT70;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT80;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT90;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT100;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT110;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT120;
const TrafficSignType_ProhibitionSign TrafficSignType::STOP;
const TrafficSignType_ProhibitionSign TrafficSignType::YIELD;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_ENTRY;
const TrafficSignType_ProhibitionSign TrafficSignType::DONOT_ENTER;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_MOTOR_VEHICLES;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_TRUCKS;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_LARGE_BUESE;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_MOTORCYCLES;
const TrafficSignType_ProhibitionSign TrafficSignType::ONLY_MOTOR_VEHICLES;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_PEDESTRIANS;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_LEFT_TURN;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_RIGHT_TURN;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_U_TURN;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_OVERTAKING;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_STOPPING;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_HONKING;
const TrafficSignType_ProhibitionSign TrafficSignType::MAX_CLEARANCE;
const TrafficSignType_ProhibitionSign TrafficSignType::WEIGHT_LIMIT;
const TrafficSignType_ProhibitionSign TrafficSignType::AXLE_WEIGHT_LIMIT;
const TrafficSignType_ProhibitionSign TrafficSignType::SPEED_LIMIT_END;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_MINIBUSES;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_TRACTOR;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_STRAIGHT;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_LEFT_RIGHT_TURN;
const TrafficSignType_ProhibitionSign TrafficSignType::NO_OVERTAKING_END;
const TrafficSignType_ProhibitionSign TrafficSignType::MAX_WIDTH;
const TrafficSignType_ProhibitionSign TrafficSignType::HAZARDOUS_VEHICLES;
const TrafficSignType_ProhibitionSign TrafficSignType::ProhibitionSign_MIN;
const TrafficSignType_ProhibitionSign TrafficSignType::ProhibitionSign_MAX;
const int TrafficSignType::ProhibitionSign_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSignType_WarningSign_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[18];
}
bool TrafficSignType_WarningSign_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignType_WarningSign TrafficSignType::CROSSROADS;
const TrafficSignType_WarningSign TrafficSignType::SHARP_CURVE;
const TrafficSignType_WarningSign TrafficSignType::REVERSE_CURVE;
const TrafficSignType_WarningSign TrafficSignType::WINDING_CURVES;
const TrafficSignType_WarningSign TrafficSignType::STEEP_DESCENT;
const TrafficSignType_WarningSign TrafficSignType::NARROW_ROAD;
const TrafficSignType_WarningSign TrafficSignType::NARROW_BRIDGE;
const TrafficSignType_WarningSign TrafficSignType::TWO_WAY_TRAFFIC;
const TrafficSignType_WarningSign TrafficSignType::WATCH_PEDESTRIANS;
const TrafficSignType_WarningSign TrafficSignType::WATCH_CHILDREN;
const TrafficSignType_WarningSign TrafficSignType::TRAFFIC_LIGHTS;
const TrafficSignType_WarningSign TrafficSignType::FALING_ROCKS;
const TrafficSignType_WarningSign TrafficSignType::CROSSWIND;
const TrafficSignType_WarningSign TrafficSignType::SLIPPERY_SURFACE;
const TrafficSignType_WarningSign TrafficSignType::STEEP_MOUNTAIN_ROAD;
const TrafficSignType_WarningSign TrafficSignType::EMBANKMENT_ROAD;
const TrafficSignType_WarningSign TrafficSignType::VILLAGE;
const TrafficSignType_WarningSign TrafficSignType::TUNNEL;
const TrafficSignType_WarningSign TrafficSignType::HUMP_BACK_BRIDGE;
const TrafficSignType_WarningSign TrafficSignType::BUMPY_ROAD;
const TrafficSignType_WarningSign TrafficSignType::GUARDED_RAILWAY_CROSSING;
const TrafficSignType_WarningSign TrafficSignType::UNGUARDED_RAILWAY_CROSSING;
const TrafficSignType_WarningSign TrafficSignType::NON_MOTOR_VEHICLES;
const TrafficSignType_WarningSign TrafficSignType::ACCIDENT_BLACK_SPOT;
const TrafficSignType_WarningSign TrafficSignType::SLOW_DOWN;
const TrafficSignType_WarningSign TrafficSignType::OBSTACLES;
const TrafficSignType_WarningSign TrafficSignType::CAUTION_DRIVE;
const TrafficSignType_WarningSign TrafficSignType::ROAD_WORK;
const TrafficSignType_WarningSign TrafficSignType::SUGGESTED_SPEED;
const TrafficSignType_WarningSign TrafficSignType::REVERSIBLE_LANE;
const TrafficSignType_WarningSign TrafficSignType::ROADS_MERGE;
const TrafficSignType_WarningSign TrafficSignType::ICY_ROAD;
const TrafficSignType_WarningSign TrafficSignType::QUEUES_LIKELY;
const TrafficSignType_WarningSign TrafficSignType::WarningSign_MIN;
const TrafficSignType_WarningSign TrafficSignType::WarningSign_MAX;
const int TrafficSignType::WarningSign_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficSignType_SupplementSign_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[19];
}
bool TrafficSignType_SupplementSign_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficSignType_SupplementSign TrafficSignType::Time_Limit;
const TrafficSignType_SupplementSign TrafficSignType::Motor_Vehicles;
const TrafficSignType_SupplementSign TrafficSignType::Trucks;
const TrafficSignType_SupplementSign TrafficSignType::Arrow_Straight;
const TrafficSignType_SupplementSign TrafficSignType::Distance_In;
const TrafficSignType_SupplementSign TrafficSignType::School;
const TrafficSignType_SupplementSign TrafficSignType::Ramp;
const TrafficSignType_SupplementSign TrafficSignType::Minbuses;
const TrafficSignType_SupplementSign TrafficSignType::Arrow_Left;
const TrafficSignType_SupplementSign TrafficSignType::Arrow_Right;
const TrafficSignType_SupplementSign TrafficSignType::BendArrow_Left;
const TrafficSignType_SupplementSign TrafficSignType::BendArrow_Right;
const TrafficSignType_SupplementSign TrafficSignType::Arrow_Twoway;
const TrafficSignType_SupplementSign TrafficSignType::SupplementSign_MIN;
const TrafficSignType_SupplementSign TrafficSignType::SupplementSign_MAX;
const int TrafficSignType::SupplementSign_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AebOutput_AebOut_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[20];
}
bool AebOutput_AebOut_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AebOutput_AebOut AebOutput::AEB_IDLE;
const AebOutput_AebOut AebOutput::AEB_WARNING;
const AebOutput_AebOut AebOutput::AEB_BRAKING_LEVEL1;
const AebOutput_AebOut AebOutput::AEB_BRAKING_LEVEL2;
const AebOutput_AebOut AebOutput::AEB_BRAKING_LEVEL3;
const AebOutput_AebOut AebOutput::AebOut_MIN;
const AebOutput_AebOut AebOutput::AebOut_MAX;
const int AebOutput::AebOut_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AebOutput_AebDecision_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[21];
}
bool AebOutput_AebDecision_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AebOutput_AebDecision AebOutput::AEB_DECISION_IDLE;
const AebOutput_AebDecision AebOutput::AEB_DECISION_WARNING;
const AebOutput_AebDecision AebOutput::AEB_DECISION_FRONT_BRAKE_LEVEL1;
const AebOutput_AebDecision AebOutput::AEB_DECISION_FRONT_BRAKE_LEVEL2;
const AebOutput_AebDecision AebOutput::AEB_DECISION_FRONT_BRAKE_LEVEL3;
const AebOutput_AebDecision AebOutput::AEB_DECISION_PASS_BRAKE_LEVEL1;
const AebOutput_AebDecision AebOutput::AEB_DECISION_PASS_BRAKE_LEVEL2;
const AebOutput_AebDecision AebOutput::AEB_DECISION_PASS_BRAKE_LEVEL3;
const AebOutput_AebDecision AebOutput::AebDecision_MIN;
const AebOutput_AebDecision AebOutput::AebDecision_MAX;
const int AebOutput::AebDecision_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Failsafe_FailSafeBlockage_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[22];
}
bool Failsafe_FailSafeBlockage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Failsafe_FailSafeBlockage Failsafe::BLOCKAGE_UNKNOWN;
const Failsafe_FailSafeBlockage Failsafe::BLOCKAGE_FULL;
const Failsafe_FailSafeBlockage Failsafe::BLOCKAGE_PARTICAL;
const Failsafe_FailSafeBlockage Failsafe::BLOCKAGE_NONE;
const Failsafe_FailSafeBlockage Failsafe::FailSafeBlockage_MIN;
const Failsafe_FailSafeBlockage Failsafe::FailSafeBlockage_MAX;
const int Failsafe::FailSafeBlockage_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Failsafe_FailSafeWeather_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[23];
}
bool Failsafe_FailSafeWeather_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Failsafe_FailSafeWeather Failsafe::WEATHER_UNKNOWN;
const Failsafe_FailSafeWeather Failsafe::WEATHER_FOG;
const Failsafe_FailSafeWeather Failsafe::WEATHER_RAIN;
const Failsafe_FailSafeWeather Failsafe::WEATHER_SNOW;
const Failsafe_FailSafeWeather Failsafe::WEATHER_SUNNY;
const Failsafe_FailSafeWeather Failsafe::FailSafeWeather_MIN;
const Failsafe_FailSafeWeather Failsafe::FailSafeWeather_MAX;
const int Failsafe::FailSafeWeather_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Failsafe_FailSafeIllumination_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[24];
}
bool Failsafe_FailSafeIllumination_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Failsafe_FailSafeIllumination Failsafe::ILLUMINATION_UNKNOWN;
const Failsafe_FailSafeIllumination Failsafe::ILLUMINATION_DAY;
const Failsafe_FailSafeIllumination Failsafe::ILLUMINATION_DUSK;
const Failsafe_FailSafeIllumination Failsafe::ILLUMINATION_NIGHT;
const Failsafe_FailSafeIllumination Failsafe::FailSafeIllumination_MIN;
const Failsafe_FailSafeIllumination Failsafe::FailSafeIllumination_MAX;
const int Failsafe::FailSafeIllumination_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Failsafe_FailSafeImageLimited_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[25];
}
bool Failsafe_FailSafeImageLimited_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Failsafe_FailSafeImageLimited Failsafe::IMAGE_LIMITED_UNKNOWN;
const Failsafe_FailSafeImageLimited Failsafe::IMAGE_LIMITED_NORMAL;
const Failsafe_FailSafeImageLimited Failsafe::IMAGE_LIMITED_LOWSUN;
const Failsafe_FailSafeImageLimited Failsafe::IMAGE_LIMITED_SPALSHES;
const Failsafe_FailSafeImageLimited Failsafe::IMAGE_LIMITED_BLUR;
const Failsafe_FailSafeImageLimited Failsafe::IMAGE_LIMITED_SUNRAY;
const Failsafe_FailSafeImageLimited Failsafe::IMAGE_LIMITED_FROZEN;
const Failsafe_FailSafeImageLimited Failsafe::IMAGE_LIMITED_OTHER;
const Failsafe_FailSafeImageLimited Failsafe::FailSafeImageLimited_MIN;
const Failsafe_FailSafeImageLimited Failsafe::FailSafeImageLimited_MAX;
const int Failsafe::FailSafeImageLimited_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MeasuringStatus0_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[26];
}
bool MeasuringStatus0_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MeasuringStatus1_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[27];
}
bool MeasuringStatus1_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MeasuringStatus2_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[28];
}
bool MeasuringStatus2_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MotionCategory_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[29];
}
bool MotionCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MotionOrientation_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[30];
}
bool MotionOrientation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VisibilitySide_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[31];
}
bool VisibilitySide_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MotionStatusV2_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[32];
}
bool MotionStatusV2_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CutInCutOut_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[33];
}
bool CutInCutOut_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AebFollowObjectState_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[34];
}
bool AebFollowObjectState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CipvLost_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[35];
}
bool CipvLost_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AllowAcc_descriptor() {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perception_2eproto::file_level_enum_descriptors[36];
}
bool AllowAcc_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Header::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kFrameIndexFieldNumber;
const int Header::kTimestampFieldNumber;
const int Header::kPerceptionVersionFieldNumber;
const int Header::kProtobufVersionFieldNumber;
const int Header::kObjectVersionFieldNumber;
const int Header::kTflStructVersionFieldNumber;
const int Header::kTflSpotVersionFieldNumber;
const int Header::kTrafficSignVersionFieldNumber;
const int Header::kFailSafeVersionFieldNumber;
const int Header::kLaneVersionFieldNumber;
const int Header::kRoadMarkVersionFieldNumber;
const int Header::kFreeSpaceVersionFieldNumber;
const int Header::kBarricadeVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_2eproto::InitDefaultsHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  perception_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.perception_version().size() > 0) {
    perception_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.perception_version_);
  }
  ::memcpy(&frame_index_, &from.frame_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&barricade_version_) -
    reinterpret_cast<char*>(&frame_index_)) + sizeof(barricade_version_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.Header)
}

void Header::SharedCtor() {
  perception_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frame_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&barricade_version_) -
      reinterpret_cast<char*>(&frame_index_)) + sizeof(barricade_version_));
  _cached_size_ = 0;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:calmcar.perception.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  perception_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::protobuf_perception_2eproto::InitDefaultsHeader();
  return *internal_default_instance();
}

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perception_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frame_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&barricade_version_) -
      reinterpret_cast<char*>(&frame_index_)) + sizeof(barricade_version_));
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 frame_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frame_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string perception_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_perception_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->perception_version().data(), static_cast<int>(this->perception_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.Header.perception_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Header.ProtobufVersion protobuf_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_protobuf_version(static_cast< ::calmcar::perception::Header_ProtobufVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Header.ObjectVersion object_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_object_version(static_cast< ::calmcar::perception::Header_ObjectVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Header.TrafficLightStructVersion tfl_struct_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tfl_struct_version(static_cast< ::calmcar::perception::Header_TrafficLightStructVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Header.TrafficLightSpotVersion tfl_spot_version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tfl_spot_version(static_cast< ::calmcar::perception::Header_TrafficLightSpotVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Header.TrafficSignVersion traffic_sign_version = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_traffic_sign_version(static_cast< ::calmcar::perception::Header_TrafficSignVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Header.FailSafeVersion fail_safe_version = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fail_safe_version(static_cast< ::calmcar::perception::Header_FailSafeVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Header.LaneVersion lane_version = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lane_version(static_cast< ::calmcar::perception::Header_LaneVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Header.RoadMarkVersion road_mark_version = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_road_mark_version(static_cast< ::calmcar::perception::Header_RoadMarkVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Header.FreeSpaceVersion free_space_version = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_free_space_version(static_cast< ::calmcar::perception::Header_FreeSpaceVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Header.BarricadeVersion barricade_version = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_barricade_version(static_cast< ::calmcar::perception::Header_BarricadeVersion >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frame_index = 1;
  if (this->frame_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->frame_index(), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // string perception_version = 3;
  if (this->perception_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->perception_version().data(), static_cast<int>(this->perception_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Header.perception_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->perception_version(), output);
  }

  // .calmcar.perception.Header.ProtobufVersion protobuf_version = 4;
  if (this->protobuf_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->protobuf_version(), output);
  }

  // .calmcar.perception.Header.ObjectVersion object_version = 5;
  if (this->object_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->object_version(), output);
  }

  // .calmcar.perception.Header.TrafficLightStructVersion tfl_struct_version = 6;
  if (this->tfl_struct_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->tfl_struct_version(), output);
  }

  // .calmcar.perception.Header.TrafficLightSpotVersion tfl_spot_version = 7;
  if (this->tfl_spot_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->tfl_spot_version(), output);
  }

  // .calmcar.perception.Header.TrafficSignVersion traffic_sign_version = 8;
  if (this->traffic_sign_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->traffic_sign_version(), output);
  }

  // .calmcar.perception.Header.FailSafeVersion fail_safe_version = 9;
  if (this->fail_safe_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->fail_safe_version(), output);
  }

  // .calmcar.perception.Header.LaneVersion lane_version = 10;
  if (this->lane_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->lane_version(), output);
  }

  // .calmcar.perception.Header.RoadMarkVersion road_mark_version = 11;
  if (this->road_mark_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->road_mark_version(), output);
  }

  // .calmcar.perception.Header.FreeSpaceVersion free_space_version = 12;
  if (this->free_space_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->free_space_version(), output);
  }

  // .calmcar.perception.Header.BarricadeVersion barricade_version = 13;
  if (this->barricade_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->barricade_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frame_index = 1;
  if (this->frame_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->frame_index(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // string perception_version = 3;
  if (this->perception_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->perception_version().data(), static_cast<int>(this->perception_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Header.perception_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->perception_version(), target);
  }

  // .calmcar.perception.Header.ProtobufVersion protobuf_version = 4;
  if (this->protobuf_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->protobuf_version(), target);
  }

  // .calmcar.perception.Header.ObjectVersion object_version = 5;
  if (this->object_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->object_version(), target);
  }

  // .calmcar.perception.Header.TrafficLightStructVersion tfl_struct_version = 6;
  if (this->tfl_struct_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->tfl_struct_version(), target);
  }

  // .calmcar.perception.Header.TrafficLightSpotVersion tfl_spot_version = 7;
  if (this->tfl_spot_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->tfl_spot_version(), target);
  }

  // .calmcar.perception.Header.TrafficSignVersion traffic_sign_version = 8;
  if (this->traffic_sign_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->traffic_sign_version(), target);
  }

  // .calmcar.perception.Header.FailSafeVersion fail_safe_version = 9;
  if (this->fail_safe_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->fail_safe_version(), target);
  }

  // .calmcar.perception.Header.LaneVersion lane_version = 10;
  if (this->lane_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->lane_version(), target);
  }

  // .calmcar.perception.Header.RoadMarkVersion road_mark_version = 11;
  if (this->road_mark_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->road_mark_version(), target);
  }

  // .calmcar.perception.Header.FreeSpaceVersion free_space_version = 12;
  if (this->free_space_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->free_space_version(), target);
  }

  // .calmcar.perception.Header.BarricadeVersion barricade_version = 13;
  if (this->barricade_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->barricade_version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string perception_version = 3;
  if (this->perception_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->perception_version());
  }

  // int64 frame_index = 1;
  if (this->frame_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->frame_index());
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // .calmcar.perception.Header.ProtobufVersion protobuf_version = 4;
  if (this->protobuf_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protobuf_version());
  }

  // .calmcar.perception.Header.ObjectVersion object_version = 5;
  if (this->object_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->object_version());
  }

  // .calmcar.perception.Header.TrafficLightStructVersion tfl_struct_version = 6;
  if (this->tfl_struct_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tfl_struct_version());
  }

  // .calmcar.perception.Header.TrafficLightSpotVersion tfl_spot_version = 7;
  if (this->tfl_spot_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tfl_spot_version());
  }

  // .calmcar.perception.Header.TrafficSignVersion traffic_sign_version = 8;
  if (this->traffic_sign_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->traffic_sign_version());
  }

  // .calmcar.perception.Header.FailSafeVersion fail_safe_version = 9;
  if (this->fail_safe_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fail_safe_version());
  }

  // .calmcar.perception.Header.LaneVersion lane_version = 10;
  if (this->lane_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lane_version());
  }

  // .calmcar.perception.Header.RoadMarkVersion road_mark_version = 11;
  if (this->road_mark_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->road_mark_version());
  }

  // .calmcar.perception.Header.FreeSpaceVersion free_space_version = 12;
  if (this->free_space_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->free_space_version());
  }

  // .calmcar.perception.Header.BarricadeVersion barricade_version = 13;
  if (this->barricade_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->barricade_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.perception_version().size() > 0) {

    perception_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.perception_version_);
  }
  if (from.frame_index() != 0) {
    set_frame_index(from.frame_index());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.protobuf_version() != 0) {
    set_protobuf_version(from.protobuf_version());
  }
  if (from.object_version() != 0) {
    set_object_version(from.object_version());
  }
  if (from.tfl_struct_version() != 0) {
    set_tfl_struct_version(from.tfl_struct_version());
  }
  if (from.tfl_spot_version() != 0) {
    set_tfl_spot_version(from.tfl_spot_version());
  }
  if (from.traffic_sign_version() != 0) {
    set_traffic_sign_version(from.traffic_sign_version());
  }
  if (from.fail_safe_version() != 0) {
    set_fail_safe_version(from.fail_safe_version());
  }
  if (from.lane_version() != 0) {
    set_lane_version(from.lane_version());
  }
  if (from.road_mark_version() != 0) {
    set_road_mark_version(from.road_mark_version());
  }
  if (from.free_space_version() != 0) {
    set_free_space_version(from.free_space_version());
  }
  if (from.barricade_version() != 0) {
    set_barricade_version(from.barricade_version());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  perception_version_.Swap(&other->perception_version_);
  swap(frame_index_, other->frame_index_);
  swap(timestamp_, other->timestamp_);
  swap(protobuf_version_, other->protobuf_version_);
  swap(object_version_, other->object_version_);
  swap(tfl_struct_version_, other->tfl_struct_version_);
  swap(tfl_spot_version_, other->tfl_spot_version_);
  swap(traffic_sign_version_, other->traffic_sign_version_);
  swap(fail_safe_version_, other->fail_safe_version_);
  swap(lane_version_, other->lane_version_);
  swap(road_mark_version_, other->road_mark_version_);
  swap(free_space_version_, other->free_space_version_);
  swap(barricade_version_, other->barricade_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MeasuringStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeasuringStatus::kMeasuringStatus0FieldNumber;
const int MeasuringStatus::kMeasuringStatus1FieldNumber;
const int MeasuringStatus::kMeasuringStatus2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeasuringStatus::MeasuringStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_2eproto::InitDefaultsMeasuringStatus();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.MeasuringStatus)
}
MeasuringStatus::MeasuringStatus(const MeasuringStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&measuring_status_0_, &from.measuring_status_0_,
    static_cast<size_t>(reinterpret_cast<char*>(&measuring_status_2_) -
    reinterpret_cast<char*>(&measuring_status_0_)) + sizeof(measuring_status_2_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.MeasuringStatus)
}

void MeasuringStatus::SharedCtor() {
  ::memset(&measuring_status_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&measuring_status_2_) -
      reinterpret_cast<char*>(&measuring_status_0_)) + sizeof(measuring_status_2_));
  _cached_size_ = 0;
}

MeasuringStatus::~MeasuringStatus() {
  // @@protoc_insertion_point(destructor:calmcar.perception.MeasuringStatus)
  SharedDtor();
}

void MeasuringStatus::SharedDtor() {
}

void MeasuringStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeasuringStatus::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MeasuringStatus& MeasuringStatus::default_instance() {
  ::protobuf_perception_2eproto::InitDefaultsMeasuringStatus();
  return *internal_default_instance();
}

MeasuringStatus* MeasuringStatus::New(::google::protobuf::Arena* arena) const {
  MeasuringStatus* n = new MeasuringStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MeasuringStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.MeasuringStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&measuring_status_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&measuring_status_2_) -
      reinterpret_cast<char*>(&measuring_status_0_)) + sizeof(measuring_status_2_));
  _internal_metadata_.Clear();
}

bool MeasuringStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.MeasuringStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.MeasuringStatus0 measuring_status_0 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_measuring_status_0(static_cast< ::calmcar::perception::MeasuringStatus0 >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.MeasuringStatus1 measuring_status_1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_measuring_status_1(static_cast< ::calmcar::perception::MeasuringStatus1 >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.MeasuringStatus2 measuring_status_2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_measuring_status_2(static_cast< ::calmcar::perception::MeasuringStatus2 >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.MeasuringStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.MeasuringStatus)
  return false;
#undef DO_
}

void MeasuringStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.MeasuringStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.MeasuringStatus0 measuring_status_0 = 1;
  if (this->measuring_status_0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->measuring_status_0(), output);
  }

  // .calmcar.perception.MeasuringStatus1 measuring_status_1 = 2;
  if (this->measuring_status_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->measuring_status_1(), output);
  }

  // .calmcar.perception.MeasuringStatus2 measuring_status_2 = 3;
  if (this->measuring_status_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->measuring_status_2(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.MeasuringStatus)
}

::google::protobuf::uint8* MeasuringStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.MeasuringStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.MeasuringStatus0 measuring_status_0 = 1;
  if (this->measuring_status_0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->measuring_status_0(), target);
  }

  // .calmcar.perception.MeasuringStatus1 measuring_status_1 = 2;
  if (this->measuring_status_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->measuring_status_1(), target);
  }

  // .calmcar.perception.MeasuringStatus2 measuring_status_2 = 3;
  if (this->measuring_status_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->measuring_status_2(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.MeasuringStatus)
  return target;
}

size_t MeasuringStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.MeasuringStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .calmcar.perception.MeasuringStatus0 measuring_status_0 = 1;
  if (this->measuring_status_0() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->measuring_status_0());
  }

  // .calmcar.perception.MeasuringStatus1 measuring_status_1 = 2;
  if (this->measuring_status_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->measuring_status_1());
  }

  // .calmcar.perception.MeasuringStatus2 measuring_status_2 = 3;
  if (this->measuring_status_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->measuring_status_2());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeasuringStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.MeasuringStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const MeasuringStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MeasuringStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.MeasuringStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.MeasuringStatus)
    MergeFrom(*source);
  }
}

void MeasuringStatus::MergeFrom(const MeasuringStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.MeasuringStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.measuring_status_0() != 0) {
    set_measuring_status_0(from.measuring_status_0());
  }
  if (from.measuring_status_1() != 0) {
    set_measuring_status_1(from.measuring_status_1());
  }
  if (from.measuring_status_2() != 0) {
    set_measuring_status_2(from.measuring_status_2());
  }
}

void MeasuringStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.MeasuringStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeasuringStatus::CopyFrom(const MeasuringStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.MeasuringStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasuringStatus::IsInitialized() const {
  return true;
}

void MeasuringStatus::Swap(MeasuringStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeasuringStatus::InternalSwap(MeasuringStatus* other) {
  using std::swap;
  swap(measuring_status_0_, other->measuring_status_0_);
  swap(measuring_status_1_, other->measuring_status_1_);
  swap(measuring_status_2_, other->measuring_status_2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MeasuringStatus::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Object::InitAsDefaultInstance() {
  ::calmcar::perception::_Object_default_instance_._instance.get_mutable()->bbox_ = const_cast< ::calmcar::perception::Rect*>(
      ::calmcar::perception::Rect::internal_default_instance());
  ::calmcar::perception::_Object_default_instance_._instance.get_mutable()->measuring_status_ = const_cast< ::calmcar::perception::MeasuringStatus*>(
      ::calmcar::perception::MeasuringStatus::internal_default_instance());
}
void Object::clear_bbox() {
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object::kFrameIndexFieldNumber;
const int Object::kTimestampFieldNumber;
const int Object::kCameraPositionFieldNumber;
const int Object::kIdFieldNumber;
const int Object::kClassFieldNumber;
const int Object::kClassNameFieldNumber;
const int Object::kSubclassFieldNumber;
const int Object::kSubclassNameFieldNumber;
const int Object::kConfidenceFieldNumber;
const int Object::kBboxFieldNumber;
const int Object::kLengthFieldNumber;
const int Object::kLengthStdFieldNumber;
const int Object::kWidthFieldNumber;
const int Object::kWidthStdFieldNumber;
const int Object::kHeightFieldNumber;
const int Object::kHeightStdFieldNumber;
const int Object::kAgeCountFieldNumber;
const int Object::kAgeSecondsFieldNumber;
const int Object::kVisibilitySideFieldNumber;
const int Object::kLatDistanceFieldNumber;
const int Object::kLatDistanceStdFieldNumber;
const int Object::kLongDistanceFieldNumber;
const int Object::kLongDistanceStdFieldNumber;
const int Object::kRelativeLatVelocityFieldNumber;
const int Object::kRelativeLatVelocityStdFieldNumber;
const int Object::kRelativeLongVelocityFieldNumber;
const int Object::kRelativeLongVelocityStdFieldNumber;
const int Object::kAbsLatVelocityFieldNumber;
const int Object::kAbsLatVelocityStdFieldNumber;
const int Object::kAbsLongVelocityFieldNumber;
const int Object::kAbsLongVelocityStdFieldNumber;
const int Object::kRelativeLatAccFieldNumber;
const int Object::kRelativeLatAccStdFieldNumber;
const int Object::kRelativeLongAccFieldNumber;
const int Object::kRelativeLongAccStdFieldNumber;
const int Object::kAbsLatAccFieldNumber;
const int Object::kAbsLatAccStdFieldNumber;
const int Object::kAbsLongAccFieldNumber;
const int Object::kAbsLongAccStdFieldNumber;
const int Object::kAbsSpeedFieldNumber;
const int Object::kAbsSpeedStdFieldNumber;
const int Object::kAbsAccelerationFieldNumber;
const int Object::kAbsAccelerationStdFieldNumber;
const int Object::kHeadingFieldNumber;
const int Object::kHeadingStdFieldNumber;
const int Object::kInverseTtcFieldNumber;
const int Object::kInverseTtcStdFieldNumber;
const int Object::kAngleLeftFieldNumber;
const int Object::kAngleRightFieldNumber;
const int Object::kAngleRateFieldNumber;
const int Object::kAngleSideFieldNumber;
const int Object::kTopOutOfImageFieldNumber;
const int Object::kBottomOutOfImageFieldNumber;
const int Object::kLeftOutOfImageFieldNumber;
const int Object::kRightOutOfImageFieldNumber;
const int Object::kBrakeLightFieldNumber;
const int Object::kTurnIndicatorLeftFieldNumber;
const int Object::kTurnIndicatorRightFieldNumber;
const int Object::kMeasuringStatusFieldNumber;
const int Object::kMotionOrientationFieldNumber;
const int Object::kMotionCategoryFieldNumber;
const int Object::kMotionStatusFieldNumber;
const int Object::kCutinCutoutFieldNumber;
const int Object::kLaneAssignmentFieldNumber;
const int Object::kLaneAssignmentVFieldNumber;
const int Object::kIsBevObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object::Object()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_2eproto::InitDefaultsObject();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.Object)
}
Object::Object(const Object& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.class_name().size() > 0) {
    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  subclass_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subclass_name().size() > 0) {
    subclass_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subclass_name_);
  }
  if (from.has_bbox()) {
    bbox_ = new ::calmcar::perception::Rect(*from.bbox_);
  } else {
    bbox_ = NULL;
  }
  if (from.has_measuring_status()) {
    measuring_status_ = new ::calmcar::perception::MeasuringStatus(*from.measuring_status_);
  } else {
    measuring_status_ = NULL;
  }
  ::memcpy(&frame_index_, &from.frame_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_bev_object_) -
    reinterpret_cast<char*>(&frame_index_)) + sizeof(is_bev_object_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.Object)
}

void Object::SharedCtor() {
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subclass_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bbox_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_bev_object_) -
      reinterpret_cast<char*>(&bbox_)) + sizeof(is_bev_object_));
  _cached_size_ = 0;
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:calmcar.perception.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subclass_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bbox_;
  if (this != internal_default_instance()) delete measuring_status_;
}

void Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Object& Object::default_instance() {
  ::protobuf_perception_2eproto::InitDefaultsObject();
  return *internal_default_instance();
}

Object* Object::New(::google::protobuf::Arena* arena) const {
  Object* n = new Object;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subclass_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
  if (GetArenaNoVirtual() == NULL && measuring_status_ != NULL) {
    delete measuring_status_;
  }
  measuring_status_ = NULL;
  ::memset(&frame_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_bev_object_) -
      reinterpret_cast<char*>(&frame_index_)) + sizeof(is_bev_object_));
  _internal_metadata_.Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.Object)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 frame_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frame_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.CameraInfo.Position camera_position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera_position(static_cast< ::calmcar::perception::CameraInfo_Position >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 class_ = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &class__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string class_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->class_name().data(), static_cast<int>(this->class_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.Object.class_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 subclass = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &subclass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subclass_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subclass_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subclass_name().data(), static_cast<int>(this->subclass_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.Object.subclass_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Rect bbox = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length_std = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width_std = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height_std = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 age_count = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &age_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float age_seconds = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &age_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.VisibilitySide visibility_side = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_visibility_side(static_cast< ::calmcar::perception::VisibilitySide >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat_distance = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat_distance_std = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_distance_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float long_distance = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &long_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float long_distance_std = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &long_distance_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relative_lat_velocity = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 197 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_lat_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relative_lat_velocity_std = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u /* 205 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_lat_velocity_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relative_long_velocity = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 213 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_long_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relative_long_velocity_std = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u /* 221 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_long_velocity_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_lat_velocity = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u /* 229 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_lat_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_lat_velocity_std = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(237u /* 237 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_lat_velocity_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_long_velocity = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(245u /* 245 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_long_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_long_velocity_std = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(253u /* 253 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_long_velocity_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relative_lat_acc = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(5u /* 261 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_lat_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relative_lat_acc_std = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 269 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_lat_acc_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relative_long_acc = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 277 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_long_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relative_long_acc_std = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 285 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_long_acc_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_lat_acc = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 293 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_lat_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_lat_acc_std = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 301 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_lat_acc_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_long_acc = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 309 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_long_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_long_acc_std = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 317 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_long_acc_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_speed = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 325 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_speed_std = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 333 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_speed_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_acceleration = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 341 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float abs_acceleration_std = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 349 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &abs_acceleration_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 357 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading_std = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 365 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float inverse_ttc = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 373 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inverse_ttc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float inverse_ttc_std = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 381 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inverse_ttc_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle_left = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 389 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle_right = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 397 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle_rate = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 405 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle_side = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 413 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_side_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool top_out_of_image = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &top_out_of_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bottom_out_of_image = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bottom_out_of_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool left_out_of_image = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 432 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_out_of_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool right_out_of_image = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 440 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_out_of_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool brake_light = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 448 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &brake_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool turn_indicator_left = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &turn_indicator_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool turn_indicator_right = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 464 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &turn_indicator_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.MeasuringStatus measuring_status = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 474 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_measuring_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.MotionOrientation motion_orientation = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_motion_orientation(static_cast< ::calmcar::perception::MotionOrientation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.MotionCategory motion_category = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 488 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_motion_category(static_cast< ::calmcar::perception::MotionCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.MotionStatusV2 motion_status = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 496 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_motion_status(static_cast< ::calmcar::perception::MotionStatusV2 >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.CutInCutOut cutin_cutout = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 504 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cutin_cutout(static_cast< ::calmcar::perception::CutInCutOut >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_assignment = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 512 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_assignment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool lane_assignment_v = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 520 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lane_assignment_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_bev_object = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 528 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bev_object_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frame_index = 1;
  if (this->frame_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->frame_index(), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 3;
  if (this->camera_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->camera_position(), output);
  }

  // int64 id = 4;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->id(), output);
  }

  // int64 class_ = 5;
  if (this->class_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->class_(), output);
  }

  // string class_name = 6;
  if (this->class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Object.class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->class_name(), output);
  }

  // int64 subclass = 7;
  if (this->subclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->subclass(), output);
  }

  // string subclass_name = 8;
  if (this->subclass_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subclass_name().data(), static_cast<int>(this->subclass_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Object.subclass_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->subclass_name(), output);
  }

  // float confidence = 9;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->confidence(), output);
  }

  // .calmcar.perception.Rect bbox = 10;
  if (this->has_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->bbox_, output);
  }

  // float length = 11;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->length(), output);
  }

  // float length_std = 12;
  if (this->length_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->length_std(), output);
  }

  // float width = 13;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->width(), output);
  }

  // float width_std = 14;
  if (this->width_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->width_std(), output);
  }

  // float height = 15;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->height(), output);
  }

  // float height_std = 16;
  if (this->height_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->height_std(), output);
  }

  // int64 age_count = 17;
  if (this->age_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->age_count(), output);
  }

  // float age_seconds = 18;
  if (this->age_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->age_seconds(), output);
  }

  // .calmcar.perception.VisibilitySide visibility_side = 19;
  if (this->visibility_side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->visibility_side(), output);
  }

  // float lat_distance = 20;
  if (this->lat_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->lat_distance(), output);
  }

  // float lat_distance_std = 21;
  if (this->lat_distance_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->lat_distance_std(), output);
  }

  // float long_distance = 22;
  if (this->long_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->long_distance(), output);
  }

  // float long_distance_std = 23;
  if (this->long_distance_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->long_distance_std(), output);
  }

  // float relative_lat_velocity = 24;
  if (this->relative_lat_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->relative_lat_velocity(), output);
  }

  // float relative_lat_velocity_std = 25;
  if (this->relative_lat_velocity_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->relative_lat_velocity_std(), output);
  }

  // float relative_long_velocity = 26;
  if (this->relative_long_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->relative_long_velocity(), output);
  }

  // float relative_long_velocity_std = 27;
  if (this->relative_long_velocity_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->relative_long_velocity_std(), output);
  }

  // float abs_lat_velocity = 28;
  if (this->abs_lat_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->abs_lat_velocity(), output);
  }

  // float abs_lat_velocity_std = 29;
  if (this->abs_lat_velocity_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->abs_lat_velocity_std(), output);
  }

  // float abs_long_velocity = 30;
  if (this->abs_long_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->abs_long_velocity(), output);
  }

  // float abs_long_velocity_std = 31;
  if (this->abs_long_velocity_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->abs_long_velocity_std(), output);
  }

  // float relative_lat_acc = 32;
  if (this->relative_lat_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->relative_lat_acc(), output);
  }

  // float relative_lat_acc_std = 33;
  if (this->relative_lat_acc_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->relative_lat_acc_std(), output);
  }

  // float relative_long_acc = 34;
  if (this->relative_long_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->relative_long_acc(), output);
  }

  // float relative_long_acc_std = 35;
  if (this->relative_long_acc_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->relative_long_acc_std(), output);
  }

  // float abs_lat_acc = 36;
  if (this->abs_lat_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->abs_lat_acc(), output);
  }

  // float abs_lat_acc_std = 37;
  if (this->abs_lat_acc_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->abs_lat_acc_std(), output);
  }

  // float abs_long_acc = 38;
  if (this->abs_long_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->abs_long_acc(), output);
  }

  // float abs_long_acc_std = 39;
  if (this->abs_long_acc_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->abs_long_acc_std(), output);
  }

  // float abs_speed = 40;
  if (this->abs_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->abs_speed(), output);
  }

  // float abs_speed_std = 41;
  if (this->abs_speed_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->abs_speed_std(), output);
  }

  // float abs_acceleration = 42;
  if (this->abs_acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->abs_acceleration(), output);
  }

  // float abs_acceleration_std = 43;
  if (this->abs_acceleration_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->abs_acceleration_std(), output);
  }

  // float heading = 44;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->heading(), output);
  }

  // float heading_std = 45;
  if (this->heading_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(45, this->heading_std(), output);
  }

  // float inverse_ttc = 46;
  if (this->inverse_ttc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(46, this->inverse_ttc(), output);
  }

  // float inverse_ttc_std = 47;
  if (this->inverse_ttc_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(47, this->inverse_ttc_std(), output);
  }

  // float angle_left = 48;
  if (this->angle_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(48, this->angle_left(), output);
  }

  // float angle_right = 49;
  if (this->angle_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(49, this->angle_right(), output);
  }

  // float angle_rate = 50;
  if (this->angle_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->angle_rate(), output);
  }

  // float angle_side = 51;
  if (this->angle_side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(51, this->angle_side(), output);
  }

  // bool top_out_of_image = 52;
  if (this->top_out_of_image() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(52, this->top_out_of_image(), output);
  }

  // bool bottom_out_of_image = 53;
  if (this->bottom_out_of_image() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->bottom_out_of_image(), output);
  }

  // bool left_out_of_image = 54;
  if (this->left_out_of_image() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(54, this->left_out_of_image(), output);
  }

  // bool right_out_of_image = 55;
  if (this->right_out_of_image() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(55, this->right_out_of_image(), output);
  }

  // bool brake_light = 56;
  if (this->brake_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->brake_light(), output);
  }

  // bool turn_indicator_left = 57;
  if (this->turn_indicator_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->turn_indicator_left(), output);
  }

  // bool turn_indicator_right = 58;
  if (this->turn_indicator_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(58, this->turn_indicator_right(), output);
  }

  // .calmcar.perception.MeasuringStatus measuring_status = 59;
  if (this->has_measuring_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, *this->measuring_status_, output);
  }

  // .calmcar.perception.MotionOrientation motion_orientation = 60;
  if (this->motion_orientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      60, this->motion_orientation(), output);
  }

  // .calmcar.perception.MotionCategory motion_category = 61;
  if (this->motion_category() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      61, this->motion_category(), output);
  }

  // .calmcar.perception.MotionStatusV2 motion_status = 62;
  if (this->motion_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      62, this->motion_status(), output);
  }

  // .calmcar.perception.CutInCutOut cutin_cutout = 63;
  if (this->cutin_cutout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      63, this->cutin_cutout(), output);
  }

  // int32 lane_assignment = 64;
  if (this->lane_assignment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->lane_assignment(), output);
  }

  // bool lane_assignment_v = 65;
  if (this->lane_assignment_v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->lane_assignment_v(), output);
  }

  // bool is_bev_object = 66;
  if (this->is_bev_object() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->is_bev_object(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.Object)
}

::google::protobuf::uint8* Object::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frame_index = 1;
  if (this->frame_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->frame_index(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 3;
  if (this->camera_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->camera_position(), target);
  }

  // int64 id = 4;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->id(), target);
  }

  // int64 class_ = 5;
  if (this->class_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->class_(), target);
  }

  // string class_name = 6;
  if (this->class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Object.class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->class_name(), target);
  }

  // int64 subclass = 7;
  if (this->subclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->subclass(), target);
  }

  // string subclass_name = 8;
  if (this->subclass_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subclass_name().data(), static_cast<int>(this->subclass_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Object.subclass_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->subclass_name(), target);
  }

  // float confidence = 9;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->confidence(), target);
  }

  // .calmcar.perception.Rect bbox = 10;
  if (this->has_bbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->bbox_, deterministic, target);
  }

  // float length = 11;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->length(), target);
  }

  // float length_std = 12;
  if (this->length_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->length_std(), target);
  }

  // float width = 13;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->width(), target);
  }

  // float width_std = 14;
  if (this->width_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->width_std(), target);
  }

  // float height = 15;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->height(), target);
  }

  // float height_std = 16;
  if (this->height_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->height_std(), target);
  }

  // int64 age_count = 17;
  if (this->age_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->age_count(), target);
  }

  // float age_seconds = 18;
  if (this->age_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->age_seconds(), target);
  }

  // .calmcar.perception.VisibilitySide visibility_side = 19;
  if (this->visibility_side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->visibility_side(), target);
  }

  // float lat_distance = 20;
  if (this->lat_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->lat_distance(), target);
  }

  // float lat_distance_std = 21;
  if (this->lat_distance_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->lat_distance_std(), target);
  }

  // float long_distance = 22;
  if (this->long_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->long_distance(), target);
  }

  // float long_distance_std = 23;
  if (this->long_distance_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->long_distance_std(), target);
  }

  // float relative_lat_velocity = 24;
  if (this->relative_lat_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->relative_lat_velocity(), target);
  }

  // float relative_lat_velocity_std = 25;
  if (this->relative_lat_velocity_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->relative_lat_velocity_std(), target);
  }

  // float relative_long_velocity = 26;
  if (this->relative_long_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->relative_long_velocity(), target);
  }

  // float relative_long_velocity_std = 27;
  if (this->relative_long_velocity_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->relative_long_velocity_std(), target);
  }

  // float abs_lat_velocity = 28;
  if (this->abs_lat_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->abs_lat_velocity(), target);
  }

  // float abs_lat_velocity_std = 29;
  if (this->abs_lat_velocity_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->abs_lat_velocity_std(), target);
  }

  // float abs_long_velocity = 30;
  if (this->abs_long_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->abs_long_velocity(), target);
  }

  // float abs_long_velocity_std = 31;
  if (this->abs_long_velocity_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->abs_long_velocity_std(), target);
  }

  // float relative_lat_acc = 32;
  if (this->relative_lat_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->relative_lat_acc(), target);
  }

  // float relative_lat_acc_std = 33;
  if (this->relative_lat_acc_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->relative_lat_acc_std(), target);
  }

  // float relative_long_acc = 34;
  if (this->relative_long_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->relative_long_acc(), target);
  }

  // float relative_long_acc_std = 35;
  if (this->relative_long_acc_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->relative_long_acc_std(), target);
  }

  // float abs_lat_acc = 36;
  if (this->abs_lat_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->abs_lat_acc(), target);
  }

  // float abs_lat_acc_std = 37;
  if (this->abs_lat_acc_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(37, this->abs_lat_acc_std(), target);
  }

  // float abs_long_acc = 38;
  if (this->abs_long_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->abs_long_acc(), target);
  }

  // float abs_long_acc_std = 39;
  if (this->abs_long_acc_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->abs_long_acc_std(), target);
  }

  // float abs_speed = 40;
  if (this->abs_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->abs_speed(), target);
  }

  // float abs_speed_std = 41;
  if (this->abs_speed_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(41, this->abs_speed_std(), target);
  }

  // float abs_acceleration = 42;
  if (this->abs_acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(42, this->abs_acceleration(), target);
  }

  // float abs_acceleration_std = 43;
  if (this->abs_acceleration_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(43, this->abs_acceleration_std(), target);
  }

  // float heading = 44;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(44, this->heading(), target);
  }

  // float heading_std = 45;
  if (this->heading_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(45, this->heading_std(), target);
  }

  // float inverse_ttc = 46;
  if (this->inverse_ttc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(46, this->inverse_ttc(), target);
  }

  // float inverse_ttc_std = 47;
  if (this->inverse_ttc_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(47, this->inverse_ttc_std(), target);
  }

  // float angle_left = 48;
  if (this->angle_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(48, this->angle_left(), target);
  }

  // float angle_right = 49;
  if (this->angle_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(49, this->angle_right(), target);
  }

  // float angle_rate = 50;
  if (this->angle_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(50, this->angle_rate(), target);
  }

  // float angle_side = 51;
  if (this->angle_side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(51, this->angle_side(), target);
  }

  // bool top_out_of_image = 52;
  if (this->top_out_of_image() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(52, this->top_out_of_image(), target);
  }

  // bool bottom_out_of_image = 53;
  if (this->bottom_out_of_image() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->bottom_out_of_image(), target);
  }

  // bool left_out_of_image = 54;
  if (this->left_out_of_image() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(54, this->left_out_of_image(), target);
  }

  // bool right_out_of_image = 55;
  if (this->right_out_of_image() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(55, this->right_out_of_image(), target);
  }

  // bool brake_light = 56;
  if (this->brake_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->brake_light(), target);
  }

  // bool turn_indicator_left = 57;
  if (this->turn_indicator_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->turn_indicator_left(), target);
  }

  // bool turn_indicator_right = 58;
  if (this->turn_indicator_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(58, this->turn_indicator_right(), target);
  }

  // .calmcar.perception.MeasuringStatus measuring_status = 59;
  if (this->has_measuring_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        59, *this->measuring_status_, deterministic, target);
  }

  // .calmcar.perception.MotionOrientation motion_orientation = 60;
  if (this->motion_orientation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      60, this->motion_orientation(), target);
  }

  // .calmcar.perception.MotionCategory motion_category = 61;
  if (this->motion_category() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      61, this->motion_category(), target);
  }

  // .calmcar.perception.MotionStatusV2 motion_status = 62;
  if (this->motion_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      62, this->motion_status(), target);
  }

  // .calmcar.perception.CutInCutOut cutin_cutout = 63;
  if (this->cutin_cutout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      63, this->cutin_cutout(), target);
  }

  // int32 lane_assignment = 64;
  if (this->lane_assignment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->lane_assignment(), target);
  }

  // bool lane_assignment_v = 65;
  if (this->lane_assignment_v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->lane_assignment_v(), target);
  }

  // bool is_bev_object = 66;
  if (this->is_bev_object() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->is_bev_object(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.Object)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string class_name = 6;
  if (this->class_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->class_name());
  }

  // string subclass_name = 8;
  if (this->subclass_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subclass_name());
  }

  // .calmcar.perception.Rect bbox = 10;
  if (this->has_bbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bbox_);
  }

  // .calmcar.perception.MeasuringStatus measuring_status = 59;
  if (this->has_measuring_status()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->measuring_status_);
  }

  // int64 frame_index = 1;
  if (this->frame_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->frame_index());
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 id = 4;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 class_ = 5;
  if (this->class_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->class_());
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 3;
  if (this->camera_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_position());
  }

  // float confidence = 9;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // int64 subclass = 7;
  if (this->subclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->subclass());
  }

  // float length = 11;
  if (this->length() != 0) {
    total_size += 1 + 4;
  }

  // float length_std = 12;
  if (this->length_std() != 0) {
    total_size += 1 + 4;
  }

  // float width = 13;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // float width_std = 14;
  if (this->width_std() != 0) {
    total_size += 1 + 4;
  }

  // float height = 15;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // float height_std = 16;
  if (this->height_std() != 0) {
    total_size += 2 + 4;
  }

  // int64 age_count = 17;
  if (this->age_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->age_count());
  }

  // float age_seconds = 18;
  if (this->age_seconds() != 0) {
    total_size += 2 + 4;
  }

  // .calmcar.perception.VisibilitySide visibility_side = 19;
  if (this->visibility_side() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->visibility_side());
  }

  // float lat_distance = 20;
  if (this->lat_distance() != 0) {
    total_size += 2 + 4;
  }

  // float lat_distance_std = 21;
  if (this->lat_distance_std() != 0) {
    total_size += 2 + 4;
  }

  // float long_distance = 22;
  if (this->long_distance() != 0) {
    total_size += 2 + 4;
  }

  // float long_distance_std = 23;
  if (this->long_distance_std() != 0) {
    total_size += 2 + 4;
  }

  // float relative_lat_velocity = 24;
  if (this->relative_lat_velocity() != 0) {
    total_size += 2 + 4;
  }

  // float relative_lat_velocity_std = 25;
  if (this->relative_lat_velocity_std() != 0) {
    total_size += 2 + 4;
  }

  // float relative_long_velocity = 26;
  if (this->relative_long_velocity() != 0) {
    total_size += 2 + 4;
  }

  // float relative_long_velocity_std = 27;
  if (this->relative_long_velocity_std() != 0) {
    total_size += 2 + 4;
  }

  // float abs_lat_velocity = 28;
  if (this->abs_lat_velocity() != 0) {
    total_size += 2 + 4;
  }

  // float abs_lat_velocity_std = 29;
  if (this->abs_lat_velocity_std() != 0) {
    total_size += 2 + 4;
  }

  // float abs_long_velocity = 30;
  if (this->abs_long_velocity() != 0) {
    total_size += 2 + 4;
  }

  // float abs_long_velocity_std = 31;
  if (this->abs_long_velocity_std() != 0) {
    total_size += 2 + 4;
  }

  // float relative_lat_acc = 32;
  if (this->relative_lat_acc() != 0) {
    total_size += 2 + 4;
  }

  // float relative_lat_acc_std = 33;
  if (this->relative_lat_acc_std() != 0) {
    total_size += 2 + 4;
  }

  // float relative_long_acc = 34;
  if (this->relative_long_acc() != 0) {
    total_size += 2 + 4;
  }

  // float relative_long_acc_std = 35;
  if (this->relative_long_acc_std() != 0) {
    total_size += 2 + 4;
  }

  // float abs_lat_acc = 36;
  if (this->abs_lat_acc() != 0) {
    total_size += 2 + 4;
  }

  // float abs_lat_acc_std = 37;
  if (this->abs_lat_acc_std() != 0) {
    total_size += 2 + 4;
  }

  // float abs_long_acc = 38;
  if (this->abs_long_acc() != 0) {
    total_size += 2 + 4;
  }

  // float abs_long_acc_std = 39;
  if (this->abs_long_acc_std() != 0) {
    total_size += 2 + 4;
  }

  // float abs_speed = 40;
  if (this->abs_speed() != 0) {
    total_size += 2 + 4;
  }

  // float abs_speed_std = 41;
  if (this->abs_speed_std() != 0) {
    total_size += 2 + 4;
  }

  // float abs_acceleration = 42;
  if (this->abs_acceleration() != 0) {
    total_size += 2 + 4;
  }

  // float abs_acceleration_std = 43;
  if (this->abs_acceleration_std() != 0) {
    total_size += 2 + 4;
  }

  // float heading = 44;
  if (this->heading() != 0) {
    total_size += 2 + 4;
  }

  // float heading_std = 45;
  if (this->heading_std() != 0) {
    total_size += 2 + 4;
  }

  // float inverse_ttc = 46;
  if (this->inverse_ttc() != 0) {
    total_size += 2 + 4;
  }

  // float inverse_ttc_std = 47;
  if (this->inverse_ttc_std() != 0) {
    total_size += 2 + 4;
  }

  // float angle_left = 48;
  if (this->angle_left() != 0) {
    total_size += 2 + 4;
  }

  // float angle_right = 49;
  if (this->angle_right() != 0) {
    total_size += 2 + 4;
  }

  // float angle_rate = 50;
  if (this->angle_rate() != 0) {
    total_size += 2 + 4;
  }

  // float angle_side = 51;
  if (this->angle_side() != 0) {
    total_size += 2 + 4;
  }

  // bool top_out_of_image = 52;
  if (this->top_out_of_image() != 0) {
    total_size += 2 + 1;
  }

  // bool bottom_out_of_image = 53;
  if (this->bottom_out_of_image() != 0) {
    total_size += 2 + 1;
  }

  // bool left_out_of_image = 54;
  if (this->left_out_of_image() != 0) {
    total_size += 2 + 1;
  }

  // bool right_out_of_image = 55;
  if (this->right_out_of_image() != 0) {
    total_size += 2 + 1;
  }

  // bool brake_light = 56;
  if (this->brake_light() != 0) {
    total_size += 2 + 1;
  }

  // bool turn_indicator_left = 57;
  if (this->turn_indicator_left() != 0) {
    total_size += 2 + 1;
  }

  // bool turn_indicator_right = 58;
  if (this->turn_indicator_right() != 0) {
    total_size += 2 + 1;
  }

  // bool lane_assignment_v = 65;
  if (this->lane_assignment_v() != 0) {
    total_size += 2 + 1;
  }

  // .calmcar.perception.MotionOrientation motion_orientation = 60;
  if (this->motion_orientation() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->motion_orientation());
  }

  // .calmcar.perception.MotionCategory motion_category = 61;
  if (this->motion_category() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->motion_category());
  }

  // .calmcar.perception.MotionStatusV2 motion_status = 62;
  if (this->motion_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->motion_status());
  }

  // .calmcar.perception.CutInCutOut cutin_cutout = 63;
  if (this->cutin_cutout() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cutin_cutout());
  }

  // int32 lane_assignment = 64;
  if (this->lane_assignment() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lane_assignment());
  }

  // bool is_bev_object = 66;
  if (this->is_bev_object() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.Object)
  GOOGLE_DCHECK_NE(&from, this);
  const Object* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Object>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.Object)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.class_name().size() > 0) {

    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  if (from.subclass_name().size() > 0) {

    subclass_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subclass_name_);
  }
  if (from.has_bbox()) {
    mutable_bbox()->::calmcar::perception::Rect::MergeFrom(from.bbox());
  }
  if (from.has_measuring_status()) {
    mutable_measuring_status()->::calmcar::perception::MeasuringStatus::MergeFrom(from.measuring_status());
  }
  if (from.frame_index() != 0) {
    set_frame_index(from.frame_index());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.class_() != 0) {
    set_class_(from.class_());
  }
  if (from.camera_position() != 0) {
    set_camera_position(from.camera_position());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.subclass() != 0) {
    set_subclass(from.subclass());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.length_std() != 0) {
    set_length_std(from.length_std());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.width_std() != 0) {
    set_width_std(from.width_std());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.height_std() != 0) {
    set_height_std(from.height_std());
  }
  if (from.age_count() != 0) {
    set_age_count(from.age_count());
  }
  if (from.age_seconds() != 0) {
    set_age_seconds(from.age_seconds());
  }
  if (from.visibility_side() != 0) {
    set_visibility_side(from.visibility_side());
  }
  if (from.lat_distance() != 0) {
    set_lat_distance(from.lat_distance());
  }
  if (from.lat_distance_std() != 0) {
    set_lat_distance_std(from.lat_distance_std());
  }
  if (from.long_distance() != 0) {
    set_long_distance(from.long_distance());
  }
  if (from.long_distance_std() != 0) {
    set_long_distance_std(from.long_distance_std());
  }
  if (from.relative_lat_velocity() != 0) {
    set_relative_lat_velocity(from.relative_lat_velocity());
  }
  if (from.relative_lat_velocity_std() != 0) {
    set_relative_lat_velocity_std(from.relative_lat_velocity_std());
  }
  if (from.relative_long_velocity() != 0) {
    set_relative_long_velocity(from.relative_long_velocity());
  }
  if (from.relative_long_velocity_std() != 0) {
    set_relative_long_velocity_std(from.relative_long_velocity_std());
  }
  if (from.abs_lat_velocity() != 0) {
    set_abs_lat_velocity(from.abs_lat_velocity());
  }
  if (from.abs_lat_velocity_std() != 0) {
    set_abs_lat_velocity_std(from.abs_lat_velocity_std());
  }
  if (from.abs_long_velocity() != 0) {
    set_abs_long_velocity(from.abs_long_velocity());
  }
  if (from.abs_long_velocity_std() != 0) {
    set_abs_long_velocity_std(from.abs_long_velocity_std());
  }
  if (from.relative_lat_acc() != 0) {
    set_relative_lat_acc(from.relative_lat_acc());
  }
  if (from.relative_lat_acc_std() != 0) {
    set_relative_lat_acc_std(from.relative_lat_acc_std());
  }
  if (from.relative_long_acc() != 0) {
    set_relative_long_acc(from.relative_long_acc());
  }
  if (from.relative_long_acc_std() != 0) {
    set_relative_long_acc_std(from.relative_long_acc_std());
  }
  if (from.abs_lat_acc() != 0) {
    set_abs_lat_acc(from.abs_lat_acc());
  }
  if (from.abs_lat_acc_std() != 0) {
    set_abs_lat_acc_std(from.abs_lat_acc_std());
  }
  if (from.abs_long_acc() != 0) {
    set_abs_long_acc(from.abs_long_acc());
  }
  if (from.abs_long_acc_std() != 0) {
    set_abs_long_acc_std(from.abs_long_acc_std());
  }
  if (from.abs_speed() != 0) {
    set_abs_speed(from.abs_speed());
  }
  if (from.abs_speed_std() != 0) {
    set_abs_speed_std(from.abs_speed_std());
  }
  if (from.abs_acceleration() != 0) {
    set_abs_acceleration(from.abs_acceleration());
  }
  if (from.abs_acceleration_std() != 0) {
    set_abs_acceleration_std(from.abs_acceleration_std());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.heading_std() != 0) {
    set_heading_std(from.heading_std());
  }
  if (from.inverse_ttc() != 0) {
    set_inverse_ttc(from.inverse_ttc());
  }
  if (from.inverse_ttc_std() != 0) {
    set_inverse_ttc_std(from.inverse_ttc_std());
  }
  if (from.angle_left() != 0) {
    set_angle_left(from.angle_left());
  }
  if (from.angle_right() != 0) {
    set_angle_right(from.angle_right());
  }
  if (from.angle_rate() != 0) {
    set_angle_rate(from.angle_rate());
  }
  if (from.angle_side() != 0) {
    set_angle_side(from.angle_side());
  }
  if (from.top_out_of_image() != 0) {
    set_top_out_of_image(from.top_out_of_image());
  }
  if (from.bottom_out_of_image() != 0) {
    set_bottom_out_of_image(from.bottom_out_of_image());
  }
  if (from.left_out_of_image() != 0) {
    set_left_out_of_image(from.left_out_of_image());
  }
  if (from.right_out_of_image() != 0) {
    set_right_out_of_image(from.right_out_of_image());
  }
  if (from.brake_light() != 0) {
    set_brake_light(from.brake_light());
  }
  if (from.turn_indicator_left() != 0) {
    set_turn_indicator_left(from.turn_indicator_left());
  }
  if (from.turn_indicator_right() != 0) {
    set_turn_indicator_right(from.turn_indicator_right());
  }
  if (from.lane_assignment_v() != 0) {
    set_lane_assignment_v(from.lane_assignment_v());
  }
  if (from.motion_orientation() != 0) {
    set_motion_orientation(from.motion_orientation());
  }
  if (from.motion_category() != 0) {
    set_motion_category(from.motion_category());
  }
  if (from.motion_status() != 0) {
    set_motion_status(from.motion_status());
  }
  if (from.cutin_cutout() != 0) {
    set_cutin_cutout(from.cutin_cutout());
  }
  if (from.lane_assignment() != 0) {
    set_lane_assignment(from.lane_assignment());
  }
  if (from.is_bev_object() != 0) {
    set_is_bev_object(from.is_bev_object());
  }
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::Swap(Object* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object::InternalSwap(Object* other) {
  using std::swap;
  class_name_.Swap(&other->class_name_);
  subclass_name_.Swap(&other->subclass_name_);
  swap(bbox_, other->bbox_);
  swap(measuring_status_, other->measuring_status_);
  swap(frame_index_, other->frame_index_);
  swap(timestamp_, other->timestamp_);
  swap(id_, other->id_);
  swap(class__, other->class__);
  swap(camera_position_, other->camera_position_);
  swap(confidence_, other->confidence_);
  swap(subclass_, other->subclass_);
  swap(length_, other->length_);
  swap(length_std_, other->length_std_);
  swap(width_, other->width_);
  swap(width_std_, other->width_std_);
  swap(height_, other->height_);
  swap(height_std_, other->height_std_);
  swap(age_count_, other->age_count_);
  swap(age_seconds_, other->age_seconds_);
  swap(visibility_side_, other->visibility_side_);
  swap(lat_distance_, other->lat_distance_);
  swap(lat_distance_std_, other->lat_distance_std_);
  swap(long_distance_, other->long_distance_);
  swap(long_distance_std_, other->long_distance_std_);
  swap(relative_lat_velocity_, other->relative_lat_velocity_);
  swap(relative_lat_velocity_std_, other->relative_lat_velocity_std_);
  swap(relative_long_velocity_, other->relative_long_velocity_);
  swap(relative_long_velocity_std_, other->relative_long_velocity_std_);
  swap(abs_lat_velocity_, other->abs_lat_velocity_);
  swap(abs_lat_velocity_std_, other->abs_lat_velocity_std_);
  swap(abs_long_velocity_, other->abs_long_velocity_);
  swap(abs_long_velocity_std_, other->abs_long_velocity_std_);
  swap(relative_lat_acc_, other->relative_lat_acc_);
  swap(relative_lat_acc_std_, other->relative_lat_acc_std_);
  swap(relative_long_acc_, other->relative_long_acc_);
  swap(relative_long_acc_std_, other->relative_long_acc_std_);
  swap(abs_lat_acc_, other->abs_lat_acc_);
  swap(abs_lat_acc_std_, other->abs_lat_acc_std_);
  swap(abs_long_acc_, other->abs_long_acc_);
  swap(abs_long_acc_std_, other->abs_long_acc_std_);
  swap(abs_speed_, other->abs_speed_);
  swap(abs_speed_std_, other->abs_speed_std_);
  swap(abs_acceleration_, other->abs_acceleration_);
  swap(abs_acceleration_std_, other->abs_acceleration_std_);
  swap(heading_, other->heading_);
  swap(heading_std_, other->heading_std_);
  swap(inverse_ttc_, other->inverse_ttc_);
  swap(inverse_ttc_std_, other->inverse_ttc_std_);
  swap(angle_left_, other->angle_left_);
  swap(angle_right_, other->angle_right_);
  swap(angle_rate_, other->angle_rate_);
  swap(angle_side_, other->angle_side_);
  swap(top_out_of_image_, other->top_out_of_image_);
  swap(bottom_out_of_image_, other->bottom_out_of_image_);
  swap(left_out_of_image_, other->left_out_of_image_);
  swap(right_out_of_image_, other->right_out_of_image_);
  swap(brake_light_, other->brake_light_);
  swap(turn_indicator_left_, other->turn_indicator_left_);
  swap(turn_indicator_right_, other->turn_indicator_right_);
  swap(lane_assignment_v_, other->lane_assignment_v_);
  swap(motion_orientation_, other->motion_orientation_);
  swap(motion_category_, other->motion_category_);
  swap(motion_status_, other->motion_status_);
  swap(cutin_cutout_, other->cutin_cutout_);
  swap(lane_assignment_, other->lane_assignment_);
  swap(is_bev_object_, other->is_bev_object_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficLightSpot::InitAsDefaultInstance() {
  ::calmcar::perception::_TrafficLightSpot_default_instance_._instance.get_mutable()->bbox_ = const_cast< ::calmcar::perception::Rect*>(
      ::calmcar::perception::Rect::internal_default_instance());
}
void TrafficLightSpot::clear_bbox() {
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightSpot::kColorFieldNumber;
const int TrafficLightSpot::kColorConfidenceFieldNumber;
const int TrafficLightSpot::kTypeFieldNumber;
const int TrafficLightSpot::kDirConfidenceFieldNumber;
const int TrafficLightSpot::kBboxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightSpot::TrafficLightSpot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_2eproto::InitDefaultsTrafficLightSpot();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.TrafficLightSpot)
}
TrafficLightSpot::TrafficLightSpot(const TrafficLightSpot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bbox()) {
    bbox_ = new ::calmcar::perception::Rect(*from.bbox_);
  } else {
    bbox_ = NULL;
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&dir_confidence_) -
    reinterpret_cast<char*>(&color_)) + sizeof(dir_confidence_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.TrafficLightSpot)
}

void TrafficLightSpot::SharedCtor() {
  ::memset(&bbox_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dir_confidence_) -
      reinterpret_cast<char*>(&bbox_)) + sizeof(dir_confidence_));
  _cached_size_ = 0;
}

TrafficLightSpot::~TrafficLightSpot() {
  // @@protoc_insertion_point(destructor:calmcar.perception.TrafficLightSpot)
  SharedDtor();
}

void TrafficLightSpot::SharedDtor() {
  if (this != internal_default_instance()) delete bbox_;
}

void TrafficLightSpot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLightSpot::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightSpot& TrafficLightSpot::default_instance() {
  ::protobuf_perception_2eproto::InitDefaultsTrafficLightSpot();
  return *internal_default_instance();
}

TrafficLightSpot* TrafficLightSpot::New(::google::protobuf::Arena* arena) const {
  TrafficLightSpot* n = new TrafficLightSpot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLightSpot::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.TrafficLightSpot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dir_confidence_) -
      reinterpret_cast<char*>(&color_)) + sizeof(dir_confidence_));
  _internal_metadata_.Clear();
}

bool TrafficLightSpot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.TrafficLightSpot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.TrafficLightSpot.Color color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::calmcar::perception::TrafficLightSpot_Color >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float color_confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.TrafficLightSpot.Type type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::calmcar::perception::TrafficLightSpot_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dir_confidence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Rect bbox = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.TrafficLightSpot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.TrafficLightSpot)
  return false;
#undef DO_
}

void TrafficLightSpot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.TrafficLightSpot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.TrafficLightSpot.Color color = 1;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->color(), output);
  }

  // float color_confidence = 2;
  if (this->color_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->color_confidence(), output);
  }

  // .calmcar.perception.TrafficLightSpot.Type type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // float dir_confidence = 4;
  if (this->dir_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dir_confidence(), output);
  }

  // .calmcar.perception.Rect bbox = 5;
  if (this->has_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->bbox_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.TrafficLightSpot)
}

::google::protobuf::uint8* TrafficLightSpot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.TrafficLightSpot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.TrafficLightSpot.Color color = 1;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->color(), target);
  }

  // float color_confidence = 2;
  if (this->color_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->color_confidence(), target);
  }

  // .calmcar.perception.TrafficLightSpot.Type type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // float dir_confidence = 4;
  if (this->dir_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dir_confidence(), target);
  }

  // .calmcar.perception.Rect bbox = 5;
  if (this->has_bbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->bbox_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.TrafficLightSpot)
  return target;
}

size_t TrafficLightSpot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.TrafficLightSpot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .calmcar.perception.Rect bbox = 5;
  if (this->has_bbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bbox_);
  }

  // .calmcar.perception.TrafficLightSpot.Color color = 1;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
  }

  // float color_confidence = 2;
  if (this->color_confidence() != 0) {
    total_size += 1 + 4;
  }

  // .calmcar.perception.TrafficLightSpot.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // float dir_confidence = 4;
  if (this->dir_confidence() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLightSpot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.TrafficLightSpot)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightSpot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightSpot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.TrafficLightSpot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.TrafficLightSpot)
    MergeFrom(*source);
  }
}

void TrafficLightSpot::MergeFrom(const TrafficLightSpot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.TrafficLightSpot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_bbox()) {
    mutable_bbox()->::calmcar::perception::Rect::MergeFrom(from.bbox());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.color_confidence() != 0) {
    set_color_confidence(from.color_confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.dir_confidence() != 0) {
    set_dir_confidence(from.dir_confidence());
  }
}

void TrafficLightSpot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.TrafficLightSpot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightSpot::CopyFrom(const TrafficLightSpot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.TrafficLightSpot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightSpot::IsInitialized() const {
  return true;
}

void TrafficLightSpot::Swap(TrafficLightSpot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightSpot::InternalSwap(TrafficLightSpot* other) {
  using std::swap;
  swap(bbox_, other->bbox_);
  swap(color_, other->color_);
  swap(color_confidence_, other->color_confidence_);
  swap(type_, other->type_);
  swap(dir_confidence_, other->dir_confidence_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLightSpot::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficLight::InitAsDefaultInstance() {
  ::calmcar::perception::_TrafficLight_default_instance_._instance.get_mutable()->bbox_ = const_cast< ::calmcar::perception::Rect*>(
      ::calmcar::perception::Rect::internal_default_instance());
}
void TrafficLight::clear_bbox() {
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLight::kCameraPositionFieldNumber;
const int TrafficLight::kTimestampFieldNumber;
const int TrafficLight::kStructIdFieldNumber;
const int TrafficLight::kSpotIdFieldNumber;
const int TrafficLight::kClassFieldNumber;
const int TrafficLight::kClassNameFieldNumber;
const int TrafficLight::kTrackingAgeFieldNumber;
const int TrafficLight::kBboxFieldNumber;
const int TrafficLight::kHeightFieldNumber;
const int TrafficLight::kWidthFieldNumber;
const int TrafficLight::kLatDistanceFieldNumber;
const int TrafficLight::kLatDistanceStdFieldNumber;
const int TrafficLight::kLongDistanceFieldNumber;
const int TrafficLight::kLongDistanceStdFieldNumber;
const int TrafficLight::kRelHeightFieldNumber;
const int TrafficLight::kRelHeightStdFieldNumber;
const int TrafficLight::kColorFieldNumber;
const int TrafficLight::kColorConfidenceFieldNumber;
const int TrafficLight::kTypeFieldNumber;
const int TrafficLight::kTypeConfidenceFieldNumber;
const int TrafficLight::kModeFieldNumber;
const int TrafficLight::kSpotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLight::TrafficLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_2eproto::InitDefaultsTrafficLight();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      spots_(from.spots_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.class_name().size() > 0) {
    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  if (from.has_bbox()) {
    bbox_ = new ::calmcar::perception::Rect(*from.bbox_);
  } else {
    bbox_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.TrafficLight)
}

void TrafficLight::SharedCtor() {
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bbox_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&bbox_)) + sizeof(mode_));
  _cached_size_ = 0;
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:calmcar.perception.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
  class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bbox_;
}

void TrafficLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLight::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLight& TrafficLight::default_instance() {
  ::protobuf_perception_2eproto::InitDefaultsTrafficLight();
  return *internal_default_instance();
}

TrafficLight* TrafficLight::New(::google::protobuf::Arena* arena) const {
  TrafficLight* n = new TrafficLight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spots_.Clear();
  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(mode_));
  _internal_metadata_.Clear();
}

bool TrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.TrafficLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.CameraInfo.Position camera_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera_position(static_cast< ::calmcar::perception::CameraInfo_Position >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 struct_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &struct_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 spot_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &spot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 class_ = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &class__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string class_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->class_name().data(), static_cast<int>(this->class_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.TrafficLight.class_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tracking_age = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tracking_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Rect bbox = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat_distance = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat_distance_std = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_distance_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float long_distance = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &long_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float long_distance_std = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &long_distance_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rel_height = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rel_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rel_height_std = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rel_height_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.TrafficLight.Color color = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::calmcar::perception::TrafficLight_Color >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float color_confidence = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.TrafficLight.Type type = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::calmcar::perception::TrafficLight_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float type_confidence = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &type_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.TrafficLight.Mode mode = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::calmcar::perception::TrafficLight_Mode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.TrafficLightSpot spots = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_spots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.TrafficLight)
  return false;
#undef DO_
}

void TrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->camera_position(), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // int64 struct_id = 3;
  if (this->struct_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->struct_id(), output);
  }

  // int64 spot_id = 4;
  if (this->spot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->spot_id(), output);
  }

  // int64 class_ = 5;
  if (this->class_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->class_(), output);
  }

  // string class_name = 6;
  if (this->class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.TrafficLight.class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->class_name(), output);
  }

  // int64 tracking_age = 7;
  if (this->tracking_age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->tracking_age(), output);
  }

  // .calmcar.perception.Rect bbox = 8;
  if (this->has_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->bbox_, output);
  }

  // float height = 9;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->height(), output);
  }

  // float width = 10;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->width(), output);
  }

  // float lat_distance = 11;
  if (this->lat_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->lat_distance(), output);
  }

  // float lat_distance_std = 12;
  if (this->lat_distance_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->lat_distance_std(), output);
  }

  // float long_distance = 13;
  if (this->long_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->long_distance(), output);
  }

  // float long_distance_std = 14;
  if (this->long_distance_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->long_distance_std(), output);
  }

  // float rel_height = 15;
  if (this->rel_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->rel_height(), output);
  }

  // float rel_height_std = 16;
  if (this->rel_height_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->rel_height_std(), output);
  }

  // .calmcar.perception.TrafficLight.Color color = 17;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->color(), output);
  }

  // float color_confidence = 18;
  if (this->color_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->color_confidence(), output);
  }

  // .calmcar.perception.TrafficLight.Type type = 19;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->type(), output);
  }

  // float type_confidence = 20;
  if (this->type_confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->type_confidence(), output);
  }

  // .calmcar.perception.TrafficLight.Mode mode = 21;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->mode(), output);
  }

  // repeated .calmcar.perception.TrafficLightSpot spots = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spots_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->spots(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.TrafficLight)
}

::google::protobuf::uint8* TrafficLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->camera_position(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // int64 struct_id = 3;
  if (this->struct_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->struct_id(), target);
  }

  // int64 spot_id = 4;
  if (this->spot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->spot_id(), target);
  }

  // int64 class_ = 5;
  if (this->class_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->class_(), target);
  }

  // string class_name = 6;
  if (this->class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.TrafficLight.class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->class_name(), target);
  }

  // int64 tracking_age = 7;
  if (this->tracking_age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->tracking_age(), target);
  }

  // .calmcar.perception.Rect bbox = 8;
  if (this->has_bbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->bbox_, deterministic, target);
  }

  // float height = 9;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->height(), target);
  }

  // float width = 10;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->width(), target);
  }

  // float lat_distance = 11;
  if (this->lat_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->lat_distance(), target);
  }

  // float lat_distance_std = 12;
  if (this->lat_distance_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->lat_distance_std(), target);
  }

  // float long_distance = 13;
  if (this->long_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->long_distance(), target);
  }

  // float long_distance_std = 14;
  if (this->long_distance_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->long_distance_std(), target);
  }

  // float rel_height = 15;
  if (this->rel_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->rel_height(), target);
  }

  // float rel_height_std = 16;
  if (this->rel_height_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->rel_height_std(), target);
  }

  // .calmcar.perception.TrafficLight.Color color = 17;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->color(), target);
  }

  // float color_confidence = 18;
  if (this->color_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->color_confidence(), target);
  }

  // .calmcar.perception.TrafficLight.Type type = 19;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->type(), target);
  }

  // float type_confidence = 20;
  if (this->type_confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->type_confidence(), target);
  }

  // .calmcar.perception.TrafficLight.Mode mode = 21;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->mode(), target);
  }

  // repeated .calmcar.perception.TrafficLightSpot spots = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spots_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->spots(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.TrafficLight)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .calmcar.perception.TrafficLightSpot spots = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->spots_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->spots(static_cast<int>(i)));
    }
  }

  // string class_name = 6;
  if (this->class_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->class_name());
  }

  // .calmcar.perception.Rect bbox = 8;
  if (this->has_bbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bbox_);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 struct_id = 3;
  if (this->struct_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->struct_id());
  }

  // int64 spot_id = 4;
  if (this->spot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->spot_id());
  }

  // int64 class_ = 5;
  if (this->class_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->class_());
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_position());
  }

  // float height = 9;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // int64 tracking_age = 7;
  if (this->tracking_age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tracking_age());
  }

  // float width = 10;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // float lat_distance = 11;
  if (this->lat_distance() != 0) {
    total_size += 1 + 4;
  }

  // float lat_distance_std = 12;
  if (this->lat_distance_std() != 0) {
    total_size += 1 + 4;
  }

  // float long_distance = 13;
  if (this->long_distance() != 0) {
    total_size += 1 + 4;
  }

  // float long_distance_std = 14;
  if (this->long_distance_std() != 0) {
    total_size += 1 + 4;
  }

  // float rel_height = 15;
  if (this->rel_height() != 0) {
    total_size += 1 + 4;
  }

  // float rel_height_std = 16;
  if (this->rel_height_std() != 0) {
    total_size += 2 + 4;
  }

  // .calmcar.perception.TrafficLight.Color color = 17;
  if (this->color() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
  }

  // float color_confidence = 18;
  if (this->color_confidence() != 0) {
    total_size += 2 + 4;
  }

  // .calmcar.perception.TrafficLight.Type type = 19;
  if (this->type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // float type_confidence = 20;
  if (this->type_confidence() != 0) {
    total_size += 2 + 4;
  }

  // .calmcar.perception.TrafficLight.Mode mode = 21;
  if (this->mode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.TrafficLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spots_.MergeFrom(from.spots_);
  if (from.class_name().size() > 0) {

    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  if (from.has_bbox()) {
    mutable_bbox()->::calmcar::perception::Rect::MergeFrom(from.bbox());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.struct_id() != 0) {
    set_struct_id(from.struct_id());
  }
  if (from.spot_id() != 0) {
    set_spot_id(from.spot_id());
  }
  if (from.class_() != 0) {
    set_class_(from.class_());
  }
  if (from.camera_position() != 0) {
    set_camera_position(from.camera_position());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.tracking_age() != 0) {
    set_tracking_age(from.tracking_age());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.lat_distance() != 0) {
    set_lat_distance(from.lat_distance());
  }
  if (from.lat_distance_std() != 0) {
    set_lat_distance_std(from.lat_distance_std());
  }
  if (from.long_distance() != 0) {
    set_long_distance(from.long_distance());
  }
  if (from.long_distance_std() != 0) {
    set_long_distance_std(from.long_distance_std());
  }
  if (from.rel_height() != 0) {
    set_rel_height(from.rel_height());
  }
  if (from.rel_height_std() != 0) {
    set_rel_height_std(from.rel_height_std());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.color_confidence() != 0) {
    set_color_confidence(from.color_confidence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.type_confidence() != 0) {
    set_type_confidence(from.type_confidence());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void TrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::Swap(TrafficLight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLight::InternalSwap(TrafficLight* other) {
  using std::swap;
  spots_.InternalSwap(&other->spots_);
  class_name_.Swap(&other->class_name_);
  swap(bbox_, other->bbox_);
  swap(timestamp_, other->timestamp_);
  swap(struct_id_, other->struct_id_);
  swap(spot_id_, other->spot_id_);
  swap(class__, other->class__);
  swap(camera_position_, other->camera_position_);
  swap(height_, other->height_);
  swap(tracking_age_, other->tracking_age_);
  swap(width_, other->width_);
  swap(lat_distance_, other->lat_distance_);
  swap(lat_distance_std_, other->lat_distance_std_);
  swap(long_distance_, other->long_distance_);
  swap(long_distance_std_, other->long_distance_std_);
  swap(rel_height_, other->rel_height_);
  swap(rel_height_std_, other->rel_height_std_);
  swap(color_, other->color_);
  swap(color_confidence_, other->color_confidence_);
  swap(type_, other->type_);
  swap(type_confidence_, other->type_confidence_);
  swap(mode_, other->mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLight::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSign::InitAsDefaultInstance() {
  ::calmcar::perception::_TrafficSign_default_instance_._instance.get_mutable()->bbox_ = const_cast< ::calmcar::perception::Rect*>(
      ::calmcar::perception::Rect::internal_default_instance());
}
void TrafficSign::clear_bbox() {
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSign::kCameraPositionFieldNumber;
const int TrafficSign::kTimestampFieldNumber;
const int TrafficSign::kIdFieldNumber;
const int TrafficSign::kClassFieldNumber;
const int TrafficSign::kSubclassFieldNumber;
const int TrafficSign::kClassNameFieldNumber;
const int TrafficSign::kSubclassNameFieldNumber;
const int TrafficSign::kBboxFieldNumber;
const int TrafficSign::kHeightFieldNumber;
const int TrafficSign::kWidthFieldNumber;
const int TrafficSign::kLatDistanceFieldNumber;
const int TrafficSign::kLongDistanceFieldNumber;
const int TrafficSign::kTrackingAgeFieldNumber;
const int TrafficSign::kRelevanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSign::TrafficSign()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_2eproto::InitDefaultsTrafficSign();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.TrafficSign)
}
TrafficSign::TrafficSign(const TrafficSign& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.class_name().size() > 0) {
    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  subclass_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subclass_name().size() > 0) {
    subclass_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subclass_name_);
  }
  if (from.has_bbox()) {
    bbox_ = new ::calmcar::perception::Rect(*from.bbox_);
  } else {
    bbox_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&relevance_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(relevance_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.TrafficSign)
}

void TrafficSign::SharedCtor() {
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subclass_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bbox_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relevance_) -
      reinterpret_cast<char*>(&bbox_)) + sizeof(relevance_));
  _cached_size_ = 0;
}

TrafficSign::~TrafficSign() {
  // @@protoc_insertion_point(destructor:calmcar.perception.TrafficSign)
  SharedDtor();
}

void TrafficSign::SharedDtor() {
  class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subclass_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bbox_;
}

void TrafficSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficSign::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSign& TrafficSign::default_instance() {
  ::protobuf_perception_2eproto::InitDefaultsTrafficSign();
  return *internal_default_instance();
}

TrafficSign* TrafficSign::New(::google::protobuf::Arena* arena) const {
  TrafficSign* n = new TrafficSign;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficSign::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.TrafficSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subclass_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relevance_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(relevance_));
  _internal_metadata_.Clear();
}

bool TrafficSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.TrafficSign)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.CameraInfo.Position camera_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera_position(static_cast< ::calmcar::perception::CameraInfo_Position >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 class_ = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &class__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 subclass = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &subclass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string class_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->class_name().data(), static_cast<int>(this->class_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.TrafficSign.class_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subclass_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subclass_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subclass_name().data(), static_cast<int>(this->subclass_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.TrafficSign.subclass_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Rect bbox = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat_distance = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float long_distance = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &long_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tracking_age = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tracking_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.TrafficSign.TrafficSIgnRelevancy relevance = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_relevance(static_cast< ::calmcar::perception::TrafficSign_TrafficSIgnRelevancy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.TrafficSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.TrafficSign)
  return false;
#undef DO_
}

void TrafficSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.TrafficSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->camera_position(), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->id(), output);
  }

  // int64 class_ = 4;
  if (this->class_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->class_(), output);
  }

  // int64 subclass = 5;
  if (this->subclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->subclass(), output);
  }

  // string class_name = 6;
  if (this->class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.TrafficSign.class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->class_name(), output);
  }

  // string subclass_name = 7;
  if (this->subclass_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subclass_name().data(), static_cast<int>(this->subclass_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.TrafficSign.subclass_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->subclass_name(), output);
  }

  // .calmcar.perception.Rect bbox = 8;
  if (this->has_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->bbox_, output);
  }

  // float height = 9;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->height(), output);
  }

  // float width = 10;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->width(), output);
  }

  // float lat_distance = 11;
  if (this->lat_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->lat_distance(), output);
  }

  // float long_distance = 12;
  if (this->long_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->long_distance(), output);
  }

  // int64 tracking_age = 13;
  if (this->tracking_age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->tracking_age(), output);
  }

  // .calmcar.perception.TrafficSign.TrafficSIgnRelevancy relevance = 14;
  if (this->relevance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->relevance(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.TrafficSign)
}

::google::protobuf::uint8* TrafficSign::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.TrafficSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->camera_position(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->id(), target);
  }

  // int64 class_ = 4;
  if (this->class_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->class_(), target);
  }

  // int64 subclass = 5;
  if (this->subclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->subclass(), target);
  }

  // string class_name = 6;
  if (this->class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.TrafficSign.class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->class_name(), target);
  }

  // string subclass_name = 7;
  if (this->subclass_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subclass_name().data(), static_cast<int>(this->subclass_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.TrafficSign.subclass_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->subclass_name(), target);
  }

  // .calmcar.perception.Rect bbox = 8;
  if (this->has_bbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->bbox_, deterministic, target);
  }

  // float height = 9;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->height(), target);
  }

  // float width = 10;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->width(), target);
  }

  // float lat_distance = 11;
  if (this->lat_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->lat_distance(), target);
  }

  // float long_distance = 12;
  if (this->long_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->long_distance(), target);
  }

  // int64 tracking_age = 13;
  if (this->tracking_age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->tracking_age(), target);
  }

  // .calmcar.perception.TrafficSign.TrafficSIgnRelevancy relevance = 14;
  if (this->relevance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->relevance(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.TrafficSign)
  return target;
}

size_t TrafficSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.TrafficSign)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string class_name = 6;
  if (this->class_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->class_name());
  }

  // string subclass_name = 7;
  if (this->subclass_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subclass_name());
  }

  // .calmcar.perception.Rect bbox = 8;
  if (this->has_bbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bbox_);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 class_ = 4;
  if (this->class_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->class_());
  }

  // int64 subclass = 5;
  if (this->subclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->subclass());
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_position());
  }

  // float height = 9;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  // float width = 10;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // float lat_distance = 11;
  if (this->lat_distance() != 0) {
    total_size += 1 + 4;
  }

  // int64 tracking_age = 13;
  if (this->tracking_age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tracking_age());
  }

  // float long_distance = 12;
  if (this->long_distance() != 0) {
    total_size += 1 + 4;
  }

  // .calmcar.perception.TrafficSign.TrafficSIgnRelevancy relevance = 14;
  if (this->relevance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->relevance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficSign::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.TrafficSign)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSign>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.TrafficSign)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.TrafficSign)
    MergeFrom(*source);
  }
}

void TrafficSign::MergeFrom(const TrafficSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.TrafficSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.class_name().size() > 0) {

    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  if (from.subclass_name().size() > 0) {

    subclass_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subclass_name_);
  }
  if (from.has_bbox()) {
    mutable_bbox()->::calmcar::perception::Rect::MergeFrom(from.bbox());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.class_() != 0) {
    set_class_(from.class_());
  }
  if (from.subclass() != 0) {
    set_subclass(from.subclass());
  }
  if (from.camera_position() != 0) {
    set_camera_position(from.camera_position());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.lat_distance() != 0) {
    set_lat_distance(from.lat_distance());
  }
  if (from.tracking_age() != 0) {
    set_tracking_age(from.tracking_age());
  }
  if (from.long_distance() != 0) {
    set_long_distance(from.long_distance());
  }
  if (from.relevance() != 0) {
    set_relevance(from.relevance());
  }
}

void TrafficSign::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.TrafficSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign::CopyFrom(const TrafficSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.TrafficSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign::IsInitialized() const {
  return true;
}

void TrafficSign::Swap(TrafficSign* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSign::InternalSwap(TrafficSign* other) {
  using std::swap;
  class_name_.Swap(&other->class_name_);
  subclass_name_.Swap(&other->subclass_name_);
  swap(bbox_, other->bbox_);
  swap(timestamp_, other->timestamp_);
  swap(id_, other->id_);
  swap(class__, other->class__);
  swap(subclass_, other->subclass_);
  swap(camera_position_, other->camera_position_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(lat_distance_, other->lat_distance_);
  swap(tracking_age_, other->tracking_age_);
  swap(long_distance_, other->long_distance_);
  swap(relevance_, other->relevance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficSign::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSignType::InitAsDefaultInstance() {
  ::calmcar::perception::_TrafficSignType_default_instance_._instance.get_mutable()->sign_ = const_cast< ::google::protobuf::Int32Value*>(
      ::google::protobuf::Int32Value::internal_default_instance());
}
void TrafficSignType::clear_sign() {
  if (GetArenaNoVirtual() == NULL && sign_ != NULL) {
    delete sign_;
  }
  sign_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSignType::kTypeFieldNumber;
const int TrafficSignType::kSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSignType::TrafficSignType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_2eproto::InitDefaultsTrafficSignType();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.TrafficSignType)
}
TrafficSignType::TrafficSignType(const TrafficSignType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sign()) {
    sign_ = new ::google::protobuf::Int32Value(*from.sign_);
  } else {
    sign_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.TrafficSignType)
}

void TrafficSignType::SharedCtor() {
  ::memset(&sign_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&sign_)) + sizeof(type_));
  _cached_size_ = 0;
}

TrafficSignType::~TrafficSignType() {
  // @@protoc_insertion_point(destructor:calmcar.perception.TrafficSignType)
  SharedDtor();
}

void TrafficSignType::SharedDtor() {
  if (this != internal_default_instance()) delete sign_;
}

void TrafficSignType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficSignType::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSignType& TrafficSignType::default_instance() {
  ::protobuf_perception_2eproto::InitDefaultsTrafficSignType();
  return *internal_default_instance();
}

TrafficSignType* TrafficSignType::New(::google::protobuf::Arena* arena) const {
  TrafficSignType* n = new TrafficSignType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficSignType::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.TrafficSignType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && sign_ != NULL) {
    delete sign_;
  }
  sign_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool TrafficSignType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.TrafficSignType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.TrafficSignType.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::calmcar::perception::TrafficSignType_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int32Value sign = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.TrafficSignType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.TrafficSignType)
  return false;
#undef DO_
}

void TrafficSignType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.TrafficSignType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.TrafficSignType.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .google.protobuf.Int32Value sign = 2;
  if (this->has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sign_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.TrafficSignType)
}

::google::protobuf::uint8* TrafficSignType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.TrafficSignType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.TrafficSignType.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .google.protobuf.Int32Value sign = 2;
  if (this->has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->sign_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.TrafficSignType)
  return target;
}

size_t TrafficSignType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.TrafficSignType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Int32Value sign = 2;
  if (this->has_sign()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sign_);
  }

  // .calmcar.perception.TrafficSignType.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficSignType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.TrafficSignType)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSignType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.TrafficSignType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.TrafficSignType)
    MergeFrom(*source);
  }
}

void TrafficSignType::MergeFrom(const TrafficSignType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.TrafficSignType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sign()) {
    mutable_sign()->::google::protobuf::Int32Value::MergeFrom(from.sign());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TrafficSignType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.TrafficSignType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignType::CopyFrom(const TrafficSignType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.TrafficSignType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignType::IsInitialized() const {
  return true;
}

void TrafficSignType::Swap(TrafficSignType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSignType::InternalSwap(TrafficSignType* other) {
  using std::swap;
  swap(sign_, other->sign_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficSignType::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficSignStatus::InitAsDefaultInstance() {
  ::calmcar::perception::_TrafficSignStatus_default_instance_._instance.get_mutable()->sign_ = const_cast< ::calmcar::perception::TrafficSignType*>(
      ::calmcar::perception::TrafficSignType::internal_default_instance());
  ::calmcar::perception::_TrafficSignStatus_default_instance_._instance.get_mutable()->bbox_ = const_cast< ::calmcar::perception::Rect*>(
      ::calmcar::perception::Rect::internal_default_instance());
  ::calmcar::perception::_TrafficSignStatus_default_instance_._instance.get_mutable()->speed_limit_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::calmcar::perception::_TrafficSignStatus_default_instance_._instance.get_mutable()->height_limit_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
  ::calmcar::perception::_TrafficSignStatus_default_instance_._instance.get_mutable()->weight_limit_ = const_cast< ::google::protobuf::FloatValue*>(
      ::google::protobuf::FloatValue::internal_default_instance());
}
void TrafficSignStatus::clear_bbox() {
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
}
void TrafficSignStatus::clear_speed_limit() {
  if (GetArenaNoVirtual() == NULL && speed_limit_ != NULL) {
    delete speed_limit_;
  }
  speed_limit_ = NULL;
}
void TrafficSignStatus::clear_height_limit() {
  if (GetArenaNoVirtual() == NULL && height_limit_ != NULL) {
    delete height_limit_;
  }
  height_limit_ = NULL;
}
void TrafficSignStatus::clear_weight_limit() {
  if (GetArenaNoVirtual() == NULL && weight_limit_ != NULL) {
    delete weight_limit_;
  }
  weight_limit_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficSignStatus::kSignFieldNumber;
const int TrafficSignStatus::kDerivedSignsFieldNumber;
const int TrafficSignStatus::kBboxFieldNumber;
const int TrafficSignStatus::kLatDistanceFieldNumber;
const int TrafficSignStatus::kLongDistanceFieldNumber;
const int TrafficSignStatus::kPanelWidthFieldNumber;
const int TrafficSignStatus::kPanelHeightFieldNumber;
const int TrafficSignStatus::kHeightFieldNumber;
const int TrafficSignStatus::kSpeedLimitFieldNumber;
const int TrafficSignStatus::kHeightLimitFieldNumber;
const int TrafficSignStatus::kWeightLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficSignStatus::TrafficSignStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_2eproto::InitDefaultsTrafficSignStatus();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.TrafficSignStatus)
}
TrafficSignStatus::TrafficSignStatus(const TrafficSignStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      derived_signs_(from.derived_signs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sign()) {
    sign_ = new ::calmcar::perception::TrafficSignType(*from.sign_);
  } else {
    sign_ = NULL;
  }
  if (from.has_bbox()) {
    bbox_ = new ::calmcar::perception::Rect(*from.bbox_);
  } else {
    bbox_ = NULL;
  }
  if (from.has_speed_limit()) {
    speed_limit_ = new ::google::protobuf::FloatValue(*from.speed_limit_);
  } else {
    speed_limit_ = NULL;
  }
  if (from.has_height_limit()) {
    height_limit_ = new ::google::protobuf::FloatValue(*from.height_limit_);
  } else {
    height_limit_ = NULL;
  }
  if (from.has_weight_limit()) {
    weight_limit_ = new ::google::protobuf::FloatValue(*from.weight_limit_);
  } else {
    weight_limit_ = NULL;
  }
  ::memcpy(&lat_distance_, &from.lat_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&lat_distance_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.TrafficSignStatus)
}

void TrafficSignStatus::SharedCtor() {
  ::memset(&sign_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&sign_)) + sizeof(height_));
  _cached_size_ = 0;
}

TrafficSignStatus::~TrafficSignStatus() {
  // @@protoc_insertion_point(destructor:calmcar.perception.TrafficSignStatus)
  SharedDtor();
}

void TrafficSignStatus::SharedDtor() {
  if (this != internal_default_instance()) delete sign_;
  if (this != internal_default_instance()) delete bbox_;
  if (this != internal_default_instance()) delete speed_limit_;
  if (this != internal_default_instance()) delete height_limit_;
  if (this != internal_default_instance()) delete weight_limit_;
}

void TrafficSignStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficSignStatus::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficSignStatus& TrafficSignStatus::default_instance() {
  ::protobuf_perception_2eproto::InitDefaultsTrafficSignStatus();
  return *internal_default_instance();
}

TrafficSignStatus* TrafficSignStatus::New(::google::protobuf::Arena* arena) const {
  TrafficSignStatus* n = new TrafficSignStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficSignStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.TrafficSignStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  derived_signs_.Clear();
  if (GetArenaNoVirtual() == NULL && sign_ != NULL) {
    delete sign_;
  }
  sign_ = NULL;
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) {
    delete bbox_;
  }
  bbox_ = NULL;
  if (GetArenaNoVirtual() == NULL && speed_limit_ != NULL) {
    delete speed_limit_;
  }
  speed_limit_ = NULL;
  if (GetArenaNoVirtual() == NULL && height_limit_ != NULL) {
    delete height_limit_;
  }
  height_limit_ = NULL;
  if (GetArenaNoVirtual() == NULL && weight_limit_ != NULL) {
    delete weight_limit_;
  }
  weight_limit_ = NULL;
  ::memset(&lat_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&lat_distance_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool TrafficSignStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.TrafficSignStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.TrafficSignType sign = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.TrafficSignType derived_signs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_derived_signs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Rect bbox = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat_distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float long_distance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &long_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float panel_width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &panel_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float panel_height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &panel_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue speed_limit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speed_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue height_limit = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_height_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FloatValue weight_limit = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_weight_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.TrafficSignStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.TrafficSignStatus)
  return false;
#undef DO_
}

void TrafficSignStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.TrafficSignStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.TrafficSignType sign = 1;
  if (this->has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sign_, output);
  }

  // repeated .calmcar.perception.TrafficSignType derived_signs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->derived_signs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->derived_signs(static_cast<int>(i)), output);
  }

  // .calmcar.perception.Rect bbox = 3;
  if (this->has_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->bbox_, output);
  }

  // float lat_distance = 4;
  if (this->lat_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->lat_distance(), output);
  }

  // float long_distance = 5;
  if (this->long_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->long_distance(), output);
  }

  // float panel_width = 6;
  if (this->panel_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->panel_width(), output);
  }

  // float panel_height = 7;
  if (this->panel_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->panel_height(), output);
  }

  // float height = 8;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->height(), output);
  }

  // .google.protobuf.FloatValue speed_limit = 9;
  if (this->has_speed_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->speed_limit_, output);
  }

  // .google.protobuf.FloatValue height_limit = 10;
  if (this->has_height_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->height_limit_, output);
  }

  // .google.protobuf.FloatValue weight_limit = 11;
  if (this->has_weight_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->weight_limit_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.TrafficSignStatus)
}

::google::protobuf::uint8* TrafficSignStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.TrafficSignStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.TrafficSignType sign = 1;
  if (this->has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->sign_, deterministic, target);
  }

  // repeated .calmcar.perception.TrafficSignType derived_signs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->derived_signs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->derived_signs(static_cast<int>(i)), deterministic, target);
  }

  // .calmcar.perception.Rect bbox = 3;
  if (this->has_bbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->bbox_, deterministic, target);
  }

  // float lat_distance = 4;
  if (this->lat_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->lat_distance(), target);
  }

  // float long_distance = 5;
  if (this->long_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->long_distance(), target);
  }

  // float panel_width = 6;
  if (this->panel_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->panel_width(), target);
  }

  // float panel_height = 7;
  if (this->panel_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->panel_height(), target);
  }

  // float height = 8;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->height(), target);
  }

  // .google.protobuf.FloatValue speed_limit = 9;
  if (this->has_speed_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->speed_limit_, deterministic, target);
  }

  // .google.protobuf.FloatValue height_limit = 10;
  if (this->has_height_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->height_limit_, deterministic, target);
  }

  // .google.protobuf.FloatValue weight_limit = 11;
  if (this->has_weight_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->weight_limit_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.TrafficSignStatus)
  return target;
}

size_t TrafficSignStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.TrafficSignStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .calmcar.perception.TrafficSignType derived_signs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->derived_signs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->derived_signs(static_cast<int>(i)));
    }
  }

  // .calmcar.perception.TrafficSignType sign = 1;
  if (this->has_sign()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->sign_);
  }

  // .calmcar.perception.Rect bbox = 3;
  if (this->has_bbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bbox_);
  }

  // .google.protobuf.FloatValue speed_limit = 9;
  if (this->has_speed_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->speed_limit_);
  }

  // .google.protobuf.FloatValue height_limit = 10;
  if (this->has_height_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->height_limit_);
  }

  // .google.protobuf.FloatValue weight_limit = 11;
  if (this->has_weight_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->weight_limit_);
  }

  // float lat_distance = 4;
  if (this->lat_distance() != 0) {
    total_size += 1 + 4;
  }

  // float long_distance = 5;
  if (this->long_distance() != 0) {
    total_size += 1 + 4;
  }

  // float panel_width = 6;
  if (this->panel_width() != 0) {
    total_size += 1 + 4;
  }

  // float panel_height = 7;
  if (this->panel_height() != 0) {
    total_size += 1 + 4;
  }

  // float height = 8;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficSignStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.TrafficSignStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficSignStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.TrafficSignStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.TrafficSignStatus)
    MergeFrom(*source);
  }
}

void TrafficSignStatus::MergeFrom(const TrafficSignStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.TrafficSignStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  derived_signs_.MergeFrom(from.derived_signs_);
  if (from.has_sign()) {
    mutable_sign()->::calmcar::perception::TrafficSignType::MergeFrom(from.sign());
  }
  if (from.has_bbox()) {
    mutable_bbox()->::calmcar::perception::Rect::MergeFrom(from.bbox());
  }
  if (from.has_speed_limit()) {
    mutable_speed_limit()->::google::protobuf::FloatValue::MergeFrom(from.speed_limit());
  }
  if (from.has_height_limit()) {
    mutable_height_limit()->::google::protobuf::FloatValue::MergeFrom(from.height_limit());
  }
  if (from.has_weight_limit()) {
    mutable_weight_limit()->::google::protobuf::FloatValue::MergeFrom(from.weight_limit());
  }
  if (from.lat_distance() != 0) {
    set_lat_distance(from.lat_distance());
  }
  if (from.long_distance() != 0) {
    set_long_distance(from.long_distance());
  }
  if (from.panel_width() != 0) {
    set_panel_width(from.panel_width());
  }
  if (from.panel_height() != 0) {
    set_panel_height(from.panel_height());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void TrafficSignStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.TrafficSignStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignStatus::CopyFrom(const TrafficSignStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.TrafficSignStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignStatus::IsInitialized() const {
  return true;
}

void TrafficSignStatus::Swap(TrafficSignStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficSignStatus::InternalSwap(TrafficSignStatus* other) {
  using std::swap;
  derived_signs_.InternalSwap(&other->derived_signs_);
  swap(sign_, other->sign_);
  swap(bbox_, other->bbox_);
  swap(speed_limit_, other->speed_limit_);
  swap(height_limit_, other->height_limit_);
  swap(weight_limit_, other->weight_limit_);
  swap(lat_distance_, other->lat_distance_);
  swap(long_distance_, other->long_distance_);
  swap(panel_width_, other->panel_width_);
  swap(panel_height_, other->panel_height_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficSignStatus::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AebObject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AebObject::kIdFieldNumber;
const int AebObject::kAppearCountFieldNumber;
const int AebObject::kTypeFieldNumber;
const int AebObject::kWidthFieldNumber;
const int AebObject::kLengthFieldNumber;
const int AebObject::kSpeedXFieldNumber;
const int AebObject::kSpeedYFieldNumber;
const int AebObject::kCurDistanceXFieldNumber;
const int AebObject::kCurDistanceYFieldNumber;
const int AebObject::kLast1SXFieldNumber;
const int AebObject::kLast1SYFieldNumber;
const int AebObject::kLast1SHeadingFieldNumber;
const int AebObject::kLastRecordCounterFieldNumber;
const int AebObject::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AebObject::AebObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_2eproto::InitDefaultsAebObject();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.AebObject)
}
AebObject::AebObject(const AebObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      last_1s_x_(from.last_1s_x_),
      last_1s_y_(from.last_1s_y_),
      last_1s_heading_(from.last_1s_heading_),
      last_record_counter_(from.last_record_counter_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.AebObject)
}

void AebObject::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(state_));
  _cached_size_ = 0;
}

AebObject::~AebObject() {
  // @@protoc_insertion_point(destructor:calmcar.perception.AebObject)
  SharedDtor();
}

void AebObject::SharedDtor() {
}

void AebObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AebObject::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AebObject& AebObject::default_instance() {
  ::protobuf_perception_2eproto::InitDefaultsAebObject();
  return *internal_default_instance();
}

AebObject* AebObject::New(::google::protobuf::Arena* arena) const {
  AebObject* n = new AebObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AebObject::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.AebObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_1s_x_.Clear();
  last_1s_y_.Clear();
  last_1s_heading_.Clear();
  last_record_counter_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

bool AebObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.AebObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 appear_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appear_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cur_distance_x = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_distance_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cur_distance_y = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_distance_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float last_1s_x = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_last_1s_x())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 82u, input, this->mutable_last_1s_x())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float last_1s_y = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_last_1s_y())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 90u, input, this->mutable_last_1s_y())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float last_1s_heading = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_last_1s_heading())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 98u, input, this->mutable_last_1s_heading())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 last_record_counter = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_last_record_counter())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 106u, input, this->mutable_last_record_counter())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.AebFollowObjectState state = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::calmcar::perception::AebFollowObjectState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.AebObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.AebObject)
  return false;
#undef DO_
}

void AebObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.AebObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // int32 appear_count = 2;
  if (this->appear_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->appear_count(), output);
  }

  // uint64 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->type(), output);
  }

  // float width = 4;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->width(), output);
  }

  // float length = 5;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->length(), output);
  }

  // float speed_x = 6;
  if (this->speed_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->speed_x(), output);
  }

  // float speed_y = 7;
  if (this->speed_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->speed_y(), output);
  }

  // float cur_distance_x = 8;
  if (this->cur_distance_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->cur_distance_x(), output);
  }

  // float cur_distance_y = 9;
  if (this->cur_distance_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->cur_distance_y(), output);
  }

  // repeated float last_1s_x = 10;
  if (this->last_1s_x_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _last_1s_x_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->last_1s_x().data(), this->last_1s_x_size(), output);
  }

  // repeated float last_1s_y = 11;
  if (this->last_1s_y_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _last_1s_y_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->last_1s_y().data(), this->last_1s_y_size(), output);
  }

  // repeated float last_1s_heading = 12;
  if (this->last_1s_heading_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _last_1s_heading_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->last_1s_heading().data(), this->last_1s_heading_size(), output);
  }

  // repeated int32 last_record_counter = 13;
  if (this->last_record_counter_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _last_record_counter_cached_byte_size_));
  }
  for (int i = 0, n = this->last_record_counter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->last_record_counter(i), output);
  }

  // .calmcar.perception.AebFollowObjectState state = 14;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.AebObject)
}

::google::protobuf::uint8* AebObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.AebObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // int32 appear_count = 2;
  if (this->appear_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->appear_count(), target);
  }

  // uint64 type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->type(), target);
  }

  // float width = 4;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->width(), target);
  }

  // float length = 5;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->length(), target);
  }

  // float speed_x = 6;
  if (this->speed_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->speed_x(), target);
  }

  // float speed_y = 7;
  if (this->speed_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->speed_y(), target);
  }

  // float cur_distance_x = 8;
  if (this->cur_distance_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->cur_distance_x(), target);
  }

  // float cur_distance_y = 9;
  if (this->cur_distance_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->cur_distance_y(), target);
  }

  // repeated float last_1s_x = 10;
  if (this->last_1s_x_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _last_1s_x_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->last_1s_x_, target);
  }

  // repeated float last_1s_y = 11;
  if (this->last_1s_y_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _last_1s_y_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->last_1s_y_, target);
  }

  // repeated float last_1s_heading = 12;
  if (this->last_1s_heading_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _last_1s_heading_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->last_1s_heading_, target);
  }

  // repeated int32 last_record_counter = 13;
  if (this->last_record_counter_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _last_record_counter_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->last_record_counter_, target);
  }

  // .calmcar.perception.AebFollowObjectState state = 14;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.AebObject)
  return target;
}

size_t AebObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.AebObject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float last_1s_x = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->last_1s_x_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _last_1s_x_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float last_1s_y = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->last_1s_y_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _last_1s_y_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float last_1s_heading = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->last_1s_heading_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _last_1s_heading_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 last_record_counter = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->last_record_counter_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _last_record_counter_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // uint64 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->type());
  }

  // int32 appear_count = 2;
  if (this->appear_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->appear_count());
  }

  // float width = 4;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // float length = 5;
  if (this->length() != 0) {
    total_size += 1 + 4;
  }

  // float speed_x = 6;
  if (this->speed_x() != 0) {
    total_size += 1 + 4;
  }

  // float speed_y = 7;
  if (this->speed_y() != 0) {
    total_size += 1 + 4;
  }

  // float cur_distance_x = 8;
  if (this->cur_distance_x() != 0) {
    total_size += 1 + 4;
  }

  // float cur_distance_y = 9;
  if (this->cur_distance_y() != 0) {
    total_size += 1 + 4;
  }

  // .calmcar.perception.AebFollowObjectState state = 14;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AebObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.AebObject)
  GOOGLE_DCHECK_NE(&from, this);
  const AebObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AebObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.AebObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.AebObject)
    MergeFrom(*source);
  }
}

void AebObject::MergeFrom(const AebObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.AebObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  last_1s_x_.MergeFrom(from.last_1s_x_);
  last_1s_y_.MergeFrom(from.last_1s_y_);
  last_1s_heading_.MergeFrom(from.last_1s_heading_);
  last_record_counter_.MergeFrom(from.last_record_counter_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.appear_count() != 0) {
    set_appear_count(from.appear_count());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.speed_x() != 0) {
    set_speed_x(from.speed_x());
  }
  if (from.speed_y() != 0) {
    set_speed_y(from.speed_y());
  }
  if (from.cur_distance_x() != 0) {
    set_cur_distance_x(from.cur_distance_x());
  }
  if (from.cur_distance_y() != 0) {
    set_cur_distance_y(from.cur_distance_y());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void AebObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.AebObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AebObject::CopyFrom(const AebObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.AebObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AebObject::IsInitialized() const {
  return true;
}

void AebObject::Swap(AebObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AebObject::InternalSwap(AebObject* other) {
  using std::swap;
  last_1s_x_.InternalSwap(&other->last_1s_x_);
  last_1s_y_.InternalSwap(&other->last_1s_y_);
  last_1s_heading_.InternalSwap(&other->last_1s_heading_);
  last_record_counter_.InternalSwap(&other->last_record_counter_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(appear_count_, other->appear_count_);
  swap(width_, other->width_);
  swap(length_, other->length_);
  swap(speed_x_, other->speed_x_);
  swap(speed_y_, other->speed_y_);
  swap(cur_distance_x_, other->cur_distance_x_);
  swap(cur_distance_y_, other->cur_distance_y_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AebObject::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehiclePredictPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehiclePredictPoint::kXFieldNumber;
const int VehiclePredictPoint::kYFieldNumber;
const int VehiclePredictPoint::kTFieldNumber;
const int VehiclePredictPoint::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehiclePredictPoint::VehiclePredictPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_2eproto::InitDefaultsVehiclePredictPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.VehiclePredictPoint)
}
VehiclePredictPoint::VehiclePredictPoint(const VehiclePredictPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&x_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.VehiclePredictPoint)
}

void VehiclePredictPoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&x_)) + sizeof(status_));
  _cached_size_ = 0;
}

VehiclePredictPoint::~VehiclePredictPoint() {
  // @@protoc_insertion_point(destructor:calmcar.perception.VehiclePredictPoint)
  SharedDtor();
}

void VehiclePredictPoint::SharedDtor() {
}

void VehiclePredictPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehiclePredictPoint::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehiclePredictPoint& VehiclePredictPoint::default_instance() {
  ::protobuf_perception_2eproto::InitDefaultsVehiclePredictPoint();
  return *internal_default_instance();
}

VehiclePredictPoint* VehiclePredictPoint::New(::google::protobuf::Arena* arena) const {
  VehiclePredictPoint* n = new VehiclePredictPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehiclePredictPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.VehiclePredictPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&x_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

bool VehiclePredictPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.VehiclePredictPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float t = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.AebFollowObjectState status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::calmcar::perception::AebFollowObjectState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.VehiclePredictPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.VehiclePredictPoint)
  return false;
#undef DO_
}

void VehiclePredictPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.VehiclePredictPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float t = 3;
  if (this->t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->t(), output);
  }

  // .calmcar.perception.AebFollowObjectState status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.VehiclePredictPoint)
}

::google::protobuf::uint8* VehiclePredictPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.VehiclePredictPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float t = 3;
  if (this->t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->t(), target);
  }

  // .calmcar.perception.AebFollowObjectState status = 4;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.VehiclePredictPoint)
  return target;
}

size_t VehiclePredictPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.VehiclePredictPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float t = 3;
  if (this->t() != 0) {
    total_size += 1 + 4;
  }

  // .calmcar.perception.AebFollowObjectState status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehiclePredictPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.VehiclePredictPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const VehiclePredictPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehiclePredictPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.VehiclePredictPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.VehiclePredictPoint)
    MergeFrom(*source);
  }
}

void VehiclePredictPoint::MergeFrom(const VehiclePredictPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.VehiclePredictPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.t() != 0) {
    set_t(from.t());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void VehiclePredictPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.VehiclePredictPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehiclePredictPoint::CopyFrom(const VehiclePredictPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.VehiclePredictPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehiclePredictPoint::IsInitialized() const {
  return true;
}

void VehiclePredictPoint::Swap(VehiclePredictPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehiclePredictPoint::InternalSwap(VehiclePredictPoint* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(t_, other->t_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehiclePredictPoint::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vehicle_State::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vehicle_State::kVehicleSpdFieldNumber;
const int Vehicle_State::kVehicleYawRateFieldNumber;
const int Vehicle_State::kLateralAcceFieldNumber;
const int Vehicle_State::kLongitudeAcceFieldNumber;
const int Vehicle_State::kThrottleReportDriverFieldNumber;
const int Vehicle_State::kSteeringTorqueNmFieldNumber;
const int Vehicle_State::kSteerAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vehicle_State::Vehicle_State()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_2eproto::InitDefaultsVehicle_State();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.Vehicle_State)
}
Vehicle_State::Vehicle_State(const Vehicle_State& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_spd_, &from.vehicle_spd_,
    static_cast<size_t>(reinterpret_cast<char*>(&steer_angle_) -
    reinterpret_cast<char*>(&vehicle_spd_)) + sizeof(steer_angle_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.Vehicle_State)
}

void Vehicle_State::SharedCtor() {
  ::memset(&vehicle_spd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steer_angle_) -
      reinterpret_cast<char*>(&vehicle_spd_)) + sizeof(steer_angle_));
  _cached_size_ = 0;
}

Vehicle_State::~Vehicle_State() {
  // @@protoc_insertion_point(destructor:calmcar.perception.Vehicle_State)
  SharedDtor();
}

void Vehicle_State::SharedDtor() {
}

void Vehicle_State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vehicle_State::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vehicle_State& Vehicle_State::default_instance() {
  ::protobuf_perception_2eproto::InitDefaultsVehicle_State();
  return *internal_default_instance();
}

Vehicle_State* Vehicle_State::New(::google::protobuf::Arena* arena) const {
  Vehicle_State* n = new Vehicle_State;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vehicle_State::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.Vehicle_State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vehicle_spd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steer_angle_) -
      reinterpret_cast<char*>(&vehicle_spd_)) + sizeof(steer_angle_));
  _internal_metadata_.Clear();
}

bool Vehicle_State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.Vehicle_State)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float vehicle_spd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vehicle_spd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vehicle_yaw_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vehicle_yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lateral_acce = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lateral_acce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float longitude_acce = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_acce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool throttle_report_driver = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &throttle_report_driver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float steering_torque_nm = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_torque_nm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float steer_angle = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steer_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.Vehicle_State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.Vehicle_State)
  return false;
#undef DO_
}

void Vehicle_State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.Vehicle_State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float vehicle_spd = 1;
  if (this->vehicle_spd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->vehicle_spd(), output);
  }

  // float vehicle_yaw_rate = 2;
  if (this->vehicle_yaw_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->vehicle_yaw_rate(), output);
  }

  // float lateral_acce = 3;
  if (this->lateral_acce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->lateral_acce(), output);
  }

  // float longitude_acce = 4;
  if (this->longitude_acce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->longitude_acce(), output);
  }

  // bool throttle_report_driver = 5;
  if (this->throttle_report_driver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->throttle_report_driver(), output);
  }

  // float steering_torque_nm = 6;
  if (this->steering_torque_nm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->steering_torque_nm(), output);
  }

  // float steer_angle = 7;
  if (this->steer_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->steer_angle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.Vehicle_State)
}

::google::protobuf::uint8* Vehicle_State::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.Vehicle_State)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float vehicle_spd = 1;
  if (this->vehicle_spd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->vehicle_spd(), target);
  }

  // float vehicle_yaw_rate = 2;
  if (this->vehicle_yaw_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->vehicle_yaw_rate(), target);
  }

  // float lateral_acce = 3;
  if (this->lateral_acce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->lateral_acce(), target);
  }

  // float longitude_acce = 4;
  if (this->longitude_acce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->longitude_acce(), target);
  }

  // bool throttle_report_driver = 5;
  if (this->throttle_report_driver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->throttle_report_driver(), target);
  }

  // float steering_torque_nm = 6;
  if (this->steering_torque_nm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->steering_torque_nm(), target);
  }

  // float steer_angle = 7;
  if (this->steer_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->steer_angle(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.Vehicle_State)
  return target;
}

size_t Vehicle_State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.Vehicle_State)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float vehicle_spd = 1;
  if (this->vehicle_spd() != 0) {
    total_size += 1 + 4;
  }

  // float vehicle_yaw_rate = 2;
  if (this->vehicle_yaw_rate() != 0) {
    total_size += 1 + 4;
  }

  // float lateral_acce = 3;
  if (this->lateral_acce() != 0) {
    total_size += 1 + 4;
  }

  // float longitude_acce = 4;
  if (this->longitude_acce() != 0) {
    total_size += 1 + 4;
  }

  // bool throttle_report_driver = 5;
  if (this->throttle_report_driver() != 0) {
    total_size += 1 + 1;
  }

  // float steering_torque_nm = 6;
  if (this->steering_torque_nm() != 0) {
    total_size += 1 + 4;
  }

  // float steer_angle = 7;
  if (this->steer_angle() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vehicle_State::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.Vehicle_State)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle_State* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vehicle_State>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.Vehicle_State)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.Vehicle_State)
    MergeFrom(*source);
  }
}

void Vehicle_State::MergeFrom(const Vehicle_State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.Vehicle_State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vehicle_spd() != 0) {
    set_vehicle_spd(from.vehicle_spd());
  }
  if (from.vehicle_yaw_rate() != 0) {
    set_vehicle_yaw_rate(from.vehicle_yaw_rate());
  }
  if (from.lateral_acce() != 0) {
    set_lateral_acce(from.lateral_acce());
  }
  if (from.longitude_acce() != 0) {
    set_longitude_acce(from.longitude_acce());
  }
  if (from.throttle_report_driver() != 0) {
    set_throttle_report_driver(from.throttle_report_driver());
  }
  if (from.steering_torque_nm() != 0) {
    set_steering_torque_nm(from.steering_torque_nm());
  }
  if (from.steer_angle() != 0) {
    set_steer_angle(from.steer_angle());
  }
}

void Vehicle_State::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.Vehicle_State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle_State::CopyFrom(const Vehicle_State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.Vehicle_State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle_State::IsInitialized() const {
  return true;
}

void Vehicle_State::Swap(Vehicle_State* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vehicle_State::InternalSwap(Vehicle_State* other) {
  using std::swap;
  swap(vehicle_spd_, other->vehicle_spd_);
  swap(vehicle_yaw_rate_, other->vehicle_yaw_rate_);
  swap(lateral_acce_, other->lateral_acce_);
  swap(longitude_acce_, other->longitude_acce_);
  swap(throttle_report_driver_, other->throttle_report_driver_);
  swap(steering_torque_nm_, other->steering_torque_nm_);
  swap(steer_angle_, other->steer_angle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vehicle_State::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Signal_Input::InitAsDefaultInstance() {
  ::calmcar::perception::_Signal_Input_default_instance_._instance.get_mutable()->vehicle_state_ = const_cast< ::calmcar::perception::Vehicle_State*>(
      ::calmcar::perception::Vehicle_State::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal_Input::kFCWEnableFieldNumber;
const int Signal_Input::kAEBEnableFieldNumber;
const int Signal_Input::kFCWSensitiveLevelFieldNumber;
const int Signal_Input::kAEBSensitiveLevelFieldNumber;
const int Signal_Input::kTireComplexityLevelFieldNumber;
const int Signal_Input::kEnvTemperatureFieldNumber;
const int Signal_Input::kEnvHumidityFieldNumber;
const int Signal_Input::kVehicleStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal_Input::Signal_Input()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_2eproto::InitDefaultsSignal_Input();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.Signal_Input)
}
Signal_Input::Signal_Input(const Signal_Input& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_vehicle_state()) {
    vehicle_state_ = new ::calmcar::perception::Vehicle_State(*from.vehicle_state_);
  } else {
    vehicle_state_ = NULL;
  }
  ::memcpy(&fcw_enable_, &from.fcw_enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&envhumidity_) -
    reinterpret_cast<char*>(&fcw_enable_)) + sizeof(envhumidity_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.Signal_Input)
}

void Signal_Input::SharedCtor() {
  ::memset(&vehicle_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&envhumidity_) -
      reinterpret_cast<char*>(&vehicle_state_)) + sizeof(envhumidity_));
  _cached_size_ = 0;
}

Signal_Input::~Signal_Input() {
  // @@protoc_insertion_point(destructor:calmcar.perception.Signal_Input)
  SharedDtor();
}

void Signal_Input::SharedDtor() {
  if (this != internal_default_instance()) delete vehicle_state_;
}

void Signal_Input::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signal_Input::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Signal_Input& Signal_Input::default_instance() {
  ::protobuf_perception_2eproto::InitDefaultsSignal_Input();
  return *internal_default_instance();
}

Signal_Input* Signal_Input::New(::google::protobuf::Arena* arena) const {
  Signal_Input* n = new Signal_Input;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signal_Input::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.Signal_Input)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && vehicle_state_ != NULL) {
    delete vehicle_state_;
  }
  vehicle_state_ = NULL;
  ::memset(&fcw_enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&envhumidity_) -
      reinterpret_cast<char*>(&fcw_enable_)) + sizeof(envhumidity_));
  _internal_metadata_.Clear();
}

bool Signal_Input::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.Signal_Input)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool FCW_Enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fcw_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool AEB_Enable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aeb_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 FCWSensitiveLevel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fcwsensitivelevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 AEBSensitiveLevel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aebsensitivelevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 TireComplexityLevel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tirecomplexitylevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float EnvTemperature = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &envtemperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float EnvHumidity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &envhumidity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Vehicle_State vehicle_state = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.Signal_Input)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.Signal_Input)
  return false;
#undef DO_
}

void Signal_Input::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.Signal_Input)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool FCW_Enable = 1;
  if (this->fcw_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->fcw_enable(), output);
  }

  // bool AEB_Enable = 2;
  if (this->aeb_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->aeb_enable(), output);
  }

  // uint32 FCWSensitiveLevel = 3;
  if (this->fcwsensitivelevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fcwsensitivelevel(), output);
  }

  // uint32 AEBSensitiveLevel = 4;
  if (this->aebsensitivelevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->aebsensitivelevel(), output);
  }

  // uint32 TireComplexityLevel = 5;
  if (this->tirecomplexitylevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tirecomplexitylevel(), output);
  }

  // float EnvTemperature = 6;
  if (this->envtemperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->envtemperature(), output);
  }

  // float EnvHumidity = 7;
  if (this->envhumidity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->envhumidity(), output);
  }

  // .calmcar.perception.Vehicle_State vehicle_state = 8;
  if (this->has_vehicle_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->vehicle_state_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.Signal_Input)
}

::google::protobuf::uint8* Signal_Input::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.Signal_Input)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool FCW_Enable = 1;
  if (this->fcw_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->fcw_enable(), target);
  }

  // bool AEB_Enable = 2;
  if (this->aeb_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->aeb_enable(), target);
  }

  // uint32 FCWSensitiveLevel = 3;
  if (this->fcwsensitivelevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fcwsensitivelevel(), target);
  }

  // uint32 AEBSensitiveLevel = 4;
  if (this->aebsensitivelevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->aebsensitivelevel(), target);
  }

  // uint32 TireComplexityLevel = 5;
  if (this->tirecomplexitylevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tirecomplexitylevel(), target);
  }

  // float EnvTemperature = 6;
  if (this->envtemperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->envtemperature(), target);
  }

  // float EnvHumidity = 7;
  if (this->envhumidity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->envhumidity(), target);
  }

  // .calmcar.perception.Vehicle_State vehicle_state = 8;
  if (this->has_vehicle_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->vehicle_state_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.Signal_Input)
  return target;
}

size_t Signal_Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.Signal_Input)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .calmcar.perception.Vehicle_State vehicle_state = 8;
  if (this->has_vehicle_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vehicle_state_);
  }

  // bool FCW_Enable = 1;
  if (this->fcw_enable() != 0) {
    total_size += 1 + 1;
  }

  // bool AEB_Enable = 2;
  if (this->aeb_enable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 FCWSensitiveLevel = 3;
  if (this->fcwsensitivelevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fcwsensitivelevel());
  }

  // uint32 AEBSensitiveLevel = 4;
  if (this->aebsensitivelevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->aebsensitivelevel());
  }

  // uint32 TireComplexityLevel = 5;
  if (this->tirecomplexitylevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tirecomplexitylevel());
  }

  // float EnvTemperature = 6;
  if (this->envtemperature() != 0) {
    total_size += 1 + 4;
  }

  // float EnvHumidity = 7;
  if (this->envhumidity() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signal_Input::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.Signal_Input)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal_Input* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signal_Input>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.Signal_Input)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.Signal_Input)
    MergeFrom(*source);
  }
}

void Signal_Input::MergeFrom(const Signal_Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.Signal_Input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vehicle_state()) {
    mutable_vehicle_state()->::calmcar::perception::Vehicle_State::MergeFrom(from.vehicle_state());
  }
  if (from.fcw_enable() != 0) {
    set_fcw_enable(from.fcw_enable());
  }
  if (from.aeb_enable() != 0) {
    set_aeb_enable(from.aeb_enable());
  }
  if (from.fcwsensitivelevel() != 0) {
    set_fcwsensitivelevel(from.fcwsensitivelevel());
  }
  if (from.aebsensitivelevel() != 0) {
    set_aebsensitivelevel(from.aebsensitivelevel());
  }
  if (from.tirecomplexitylevel() != 0) {
    set_tirecomplexitylevel(from.tirecomplexitylevel());
  }
  if (from.envtemperature() != 0) {
    set_envtemperature(from.envtemperature());
  }
  if (from.envhumidity() != 0) {
    set_envhumidity(from.envhumidity());
  }
}

void Signal_Input::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.Signal_Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal_Input::CopyFrom(const Signal_Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.Signal_Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal_Input::IsInitialized() const {
  return true;
}

void Signal_Input::Swap(Signal_Input* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal_Input::InternalSwap(Signal_Input* other) {
  using std::swap;
  swap(vehicle_state_, other->vehicle_state_);
  swap(fcw_enable_, other->fcw_enable_);
  swap(aeb_enable_, other->aeb_enable_);
  swap(fcwsensitivelevel_, other->fcwsensitivelevel_);
  swap(aebsensitivelevel_, other->aebsensitivelevel_);
  swap(tirecomplexitylevel_, other->tirecomplexitylevel_);
  swap(envtemperature_, other->envtemperature_);
  swap(envhumidity_, other->envhumidity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Signal_Input::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Signal_Output::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal_Output::kFCWActiveFieldNumber;
const int Signal_Output::kAEBActiveFieldNumber;
const int Signal_Output::kFCWStatusFieldNumber;
const int Signal_Output::kFCWSensitiveLevelFieldNumber;
const int Signal_Output::kFCWStateFieldNumber;
const int Signal_Output::kAEBStatusFieldNumber;
const int Signal_Output::kAEBSensitiveLevelFieldNumber;
const int Signal_Output::kAEBStateFieldNumber;
const int Signal_Output::kAEBVehicleHoldReqFieldNumber;
const int Signal_Output::kAEBFullBrakeFieldNumber;
const int Signal_Output::kAEBDBSLevelFieldNumber;
const int Signal_Output::kAEBPrefillReqFieldNumber;
const int Signal_Output::kAEBJerkReqFieldNumber;
const int Signal_Output::kAEBTargetDecelerationFieldNumber;
const int Signal_Output::kAEBJerkLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal_Output::Signal_Output()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_2eproto::InitDefaultsSignal_Output();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.Signal_Output)
}
Signal_Output::Signal_Output(const Signal_Output& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fcw_active_, &from.fcw_active_,
    static_cast<size_t>(reinterpret_cast<char*>(&aebjerklevel_) -
    reinterpret_cast<char*>(&fcw_active_)) + sizeof(aebjerklevel_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.Signal_Output)
}

void Signal_Output::SharedCtor() {
  ::memset(&fcw_active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aebjerklevel_) -
      reinterpret_cast<char*>(&fcw_active_)) + sizeof(aebjerklevel_));
  _cached_size_ = 0;
}

Signal_Output::~Signal_Output() {
  // @@protoc_insertion_point(destructor:calmcar.perception.Signal_Output)
  SharedDtor();
}

void Signal_Output::SharedDtor() {
}

void Signal_Output::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signal_Output::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Signal_Output& Signal_Output::default_instance() {
  ::protobuf_perception_2eproto::InitDefaultsSignal_Output();
  return *internal_default_instance();
}

Signal_Output* Signal_Output::New(::google::protobuf::Arena* arena) const {
  Signal_Output* n = new Signal_Output;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signal_Output::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.Signal_Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fcw_active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aebjerklevel_) -
      reinterpret_cast<char*>(&fcw_active_)) + sizeof(aebjerklevel_));
  _internal_metadata_.Clear();
}

bool Signal_Output::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.Signal_Output)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool FCW_Active = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fcw_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool AEB_Active = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aeb_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 FCWStatus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fcwstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 FCWSensitiveLevel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fcwsensitivelevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 FCW_State = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fcw_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 AEBStatus = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aebstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 AEBSensitiveLevel = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aebsensitivelevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 AEB_State = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aeb_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 AEBVehicleHoldReq = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aebvehicleholdreq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 AEBFullBrake = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aebfullbrake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 AEBDBSLevel = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aebdbslevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 AEBPrefillReq = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aebprefillreq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 AEBJerkReq = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aebjerkreq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float AEBTargetDeceleration = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aebtargetdeceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 AEBJerkLevel = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aebjerklevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.Signal_Output)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.Signal_Output)
  return false;
#undef DO_
}

void Signal_Output::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.Signal_Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool FCW_Active = 1;
  if (this->fcw_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->fcw_active(), output);
  }

  // bool AEB_Active = 2;
  if (this->aeb_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->aeb_active(), output);
  }

  // uint32 FCWStatus = 3;
  if (this->fcwstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fcwstatus(), output);
  }

  // uint32 FCWSensitiveLevel = 4;
  if (this->fcwsensitivelevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fcwsensitivelevel(), output);
  }

  // uint32 FCW_State = 5;
  if (this->fcw_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fcw_state(), output);
  }

  // uint32 AEBStatus = 6;
  if (this->aebstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->aebstatus(), output);
  }

  // uint32 AEBSensitiveLevel = 7;
  if (this->aebsensitivelevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->aebsensitivelevel(), output);
  }

  // uint32 AEB_State = 8;
  if (this->aeb_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->aeb_state(), output);
  }

  // uint32 AEBVehicleHoldReq = 9;
  if (this->aebvehicleholdreq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->aebvehicleholdreq(), output);
  }

  // uint32 AEBFullBrake = 10;
  if (this->aebfullbrake() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->aebfullbrake(), output);
  }

  // uint32 AEBDBSLevel = 11;
  if (this->aebdbslevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->aebdbslevel(), output);
  }

  // uint32 AEBPrefillReq = 12;
  if (this->aebprefillreq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->aebprefillreq(), output);
  }

  // uint32 AEBJerkReq = 13;
  if (this->aebjerkreq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->aebjerkreq(), output);
  }

  // float AEBTargetDeceleration = 14;
  if (this->aebtargetdeceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->aebtargetdeceleration(), output);
  }

  // uint32 AEBJerkLevel = 15;
  if (this->aebjerklevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->aebjerklevel(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.Signal_Output)
}

::google::protobuf::uint8* Signal_Output::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.Signal_Output)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool FCW_Active = 1;
  if (this->fcw_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->fcw_active(), target);
  }

  // bool AEB_Active = 2;
  if (this->aeb_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->aeb_active(), target);
  }

  // uint32 FCWStatus = 3;
  if (this->fcwstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fcwstatus(), target);
  }

  // uint32 FCWSensitiveLevel = 4;
  if (this->fcwsensitivelevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fcwsensitivelevel(), target);
  }

  // uint32 FCW_State = 5;
  if (this->fcw_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fcw_state(), target);
  }

  // uint32 AEBStatus = 6;
  if (this->aebstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->aebstatus(), target);
  }

  // uint32 AEBSensitiveLevel = 7;
  if (this->aebsensitivelevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->aebsensitivelevel(), target);
  }

  // uint32 AEB_State = 8;
  if (this->aeb_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->aeb_state(), target);
  }

  // uint32 AEBVehicleHoldReq = 9;
  if (this->aebvehicleholdreq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->aebvehicleholdreq(), target);
  }

  // uint32 AEBFullBrake = 10;
  if (this->aebfullbrake() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->aebfullbrake(), target);
  }

  // uint32 AEBDBSLevel = 11;
  if (this->aebdbslevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->aebdbslevel(), target);
  }

  // uint32 AEBPrefillReq = 12;
  if (this->aebprefillreq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->aebprefillreq(), target);
  }

  // uint32 AEBJerkReq = 13;
  if (this->aebjerkreq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->aebjerkreq(), target);
  }

  // float AEBTargetDeceleration = 14;
  if (this->aebtargetdeceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->aebtargetdeceleration(), target);
  }

  // uint32 AEBJerkLevel = 15;
  if (this->aebjerklevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->aebjerklevel(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.Signal_Output)
  return target;
}

size_t Signal_Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.Signal_Output)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool FCW_Active = 1;
  if (this->fcw_active() != 0) {
    total_size += 1 + 1;
  }

  // bool AEB_Active = 2;
  if (this->aeb_active() != 0) {
    total_size += 1 + 1;
  }

  // uint32 FCWStatus = 3;
  if (this->fcwstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fcwstatus());
  }

  // uint32 FCWSensitiveLevel = 4;
  if (this->fcwsensitivelevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fcwsensitivelevel());
  }

  // uint32 FCW_State = 5;
  if (this->fcw_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fcw_state());
  }

  // uint32 AEBStatus = 6;
  if (this->aebstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->aebstatus());
  }

  // uint32 AEBSensitiveLevel = 7;
  if (this->aebsensitivelevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->aebsensitivelevel());
  }

  // uint32 AEB_State = 8;
  if (this->aeb_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->aeb_state());
  }

  // uint32 AEBVehicleHoldReq = 9;
  if (this->aebvehicleholdreq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->aebvehicleholdreq());
  }

  // uint32 AEBFullBrake = 10;
  if (this->aebfullbrake() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->aebfullbrake());
  }

  // uint32 AEBDBSLevel = 11;
  if (this->aebdbslevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->aebdbslevel());
  }

  // uint32 AEBPrefillReq = 12;
  if (this->aebprefillreq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->aebprefillreq());
  }

  // uint32 AEBJerkReq = 13;
  if (this->aebjerkreq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->aebjerkreq());
  }

  // float AEBTargetDeceleration = 14;
  if (this->aebtargetdeceleration() != 0) {
    total_size += 1 + 4;
  }

  // uint32 AEBJerkLevel = 15;
  if (this->aebjerklevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->aebjerklevel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signal_Output::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.Signal_Output)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal_Output* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signal_Output>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.Signal_Output)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.Signal_Output)
    MergeFrom(*source);
  }
}

void Signal_Output::MergeFrom(const Signal_Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.Signal_Output)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fcw_active() != 0) {
    set_fcw_active(from.fcw_active());
  }
  if (from.aeb_active() != 0) {
    set_aeb_active(from.aeb_active());
  }
  if (from.fcwstatus() != 0) {
    set_fcwstatus(from.fcwstatus());
  }
  if (from.fcwsensitivelevel() != 0) {
    set_fcwsensitivelevel(from.fcwsensitivelevel());
  }
  if (from.fcw_state() != 0) {
    set_fcw_state(from.fcw_state());
  }
  if (from.aebstatus() != 0) {
    set_aebstatus(from.aebstatus());
  }
  if (from.aebsensitivelevel() != 0) {
    set_aebsensitivelevel(from.aebsensitivelevel());
  }
  if (from.aeb_state() != 0) {
    set_aeb_state(from.aeb_state());
  }
  if (from.aebvehicleholdreq() != 0) {
    set_aebvehicleholdreq(from.aebvehicleholdreq());
  }
  if (from.aebfullbrake() != 0) {
    set_aebfullbrake(from.aebfullbrake());
  }
  if (from.aebdbslevel() != 0) {
    set_aebdbslevel(from.aebdbslevel());
  }
  if (from.aebprefillreq() != 0) {
    set_aebprefillreq(from.aebprefillreq());
  }
  if (from.aebjerkreq() != 0) {
    set_aebjerkreq(from.aebjerkreq());
  }
  if (from.aebtargetdeceleration() != 0) {
    set_aebtargetdeceleration(from.aebtargetdeceleration());
  }
  if (from.aebjerklevel() != 0) {
    set_aebjerklevel(from.aebjerklevel());
  }
}

void Signal_Output::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.Signal_Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal_Output::CopyFrom(const Signal_Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.Signal_Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal_Output::IsInitialized() const {
  return true;
}

void Signal_Output::Swap(Signal_Output* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal_Output::InternalSwap(Signal_Output* other) {
  using std::swap;
  swap(fcw_active_, other->fcw_active_);
  swap(aeb_active_, other->aeb_active_);
  swap(fcwstatus_, other->fcwstatus_);
  swap(fcwsensitivelevel_, other->fcwsensitivelevel_);
  swap(fcw_state_, other->fcw_state_);
  swap(aebstatus_, other->aebstatus_);
  swap(aebsensitivelevel_, other->aebsensitivelevel_);
  swap(aeb_state_, other->aeb_state_);
  swap(aebvehicleholdreq_, other->aebvehicleholdreq_);
  swap(aebfullbrake_, other->aebfullbrake_);
  swap(aebdbslevel_, other->aebdbslevel_);
  swap(aebprefillreq_, other->aebprefillreq_);
  swap(aebjerkreq_, other->aebjerkreq_);
  swap(aebtargetdeceleration_, other->aebtargetdeceleration_);
  swap(aebjerklevel_, other->aebjerklevel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Signal_Output::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Fault_Signal::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fault_Signal::kFCWSystemFaultStatusFieldNumber;
const int Fault_Signal::kAEBSystemFaultStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fault_Signal::Fault_Signal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_2eproto::InitDefaultsFault_Signal();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.Fault_Signal)
}
Fault_Signal::Fault_Signal(const Fault_Signal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fcwsystemfaultstatus_, &from.fcwsystemfaultstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&aebsystemfaultstatus_) -
    reinterpret_cast<char*>(&fcwsystemfaultstatus_)) + sizeof(aebsystemfaultstatus_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.Fault_Signal)
}

void Fault_Signal::SharedCtor() {
  ::memset(&fcwsystemfaultstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aebsystemfaultstatus_) -
      reinterpret_cast<char*>(&fcwsystemfaultstatus_)) + sizeof(aebsystemfaultstatus_));
  _cached_size_ = 0;
}

Fault_Signal::~Fault_Signal() {
  // @@protoc_insertion_point(destructor:calmcar.perception.Fault_Signal)
  SharedDtor();
}

void Fault_Signal::SharedDtor() {
}

void Fault_Signal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fault_Signal::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Fault_Signal& Fault_Signal::default_instance() {
  ::protobuf_perception_2eproto::InitDefaultsFault_Signal();
  return *internal_default_instance();
}

Fault_Signal* Fault_Signal::New(::google::protobuf::Arena* arena) const {
  Fault_Signal* n = new Fault_Signal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fault_Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.Fault_Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fcwsystemfaultstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aebsystemfaultstatus_) -
      reinterpret_cast<char*>(&fcwsystemfaultstatus_)) + sizeof(aebsystemfaultstatus_));
  _internal_metadata_.Clear();
}

bool Fault_Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.Fault_Signal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 FCWSystemFaultStatus = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fcwsystemfaultstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 AEBSystemFaultStatus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aebsystemfaultstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.Fault_Signal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.Fault_Signal)
  return false;
#undef DO_
}

void Fault_Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.Fault_Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 FCWSystemFaultStatus = 1;
  if (this->fcwsystemfaultstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fcwsystemfaultstatus(), output);
  }

  // uint32 AEBSystemFaultStatus = 2;
  if (this->aebsystemfaultstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->aebsystemfaultstatus(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.Fault_Signal)
}

::google::protobuf::uint8* Fault_Signal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.Fault_Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 FCWSystemFaultStatus = 1;
  if (this->fcwsystemfaultstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fcwsystemfaultstatus(), target);
  }

  // uint32 AEBSystemFaultStatus = 2;
  if (this->aebsystemfaultstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->aebsystemfaultstatus(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.Fault_Signal)
  return target;
}

size_t Fault_Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.Fault_Signal)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 FCWSystemFaultStatus = 1;
  if (this->fcwsystemfaultstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fcwsystemfaultstatus());
  }

  // uint32 AEBSystemFaultStatus = 2;
  if (this->aebsystemfaultstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->aebsystemfaultstatus());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fault_Signal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.Fault_Signal)
  GOOGLE_DCHECK_NE(&from, this);
  const Fault_Signal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Fault_Signal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.Fault_Signal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.Fault_Signal)
    MergeFrom(*source);
  }
}

void Fault_Signal::MergeFrom(const Fault_Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.Fault_Signal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fcwsystemfaultstatus() != 0) {
    set_fcwsystemfaultstatus(from.fcwsystemfaultstatus());
  }
  if (from.aebsystemfaultstatus() != 0) {
    set_aebsystemfaultstatus(from.aebsystemfaultstatus());
  }
}

void Fault_Signal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.Fault_Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fault_Signal::CopyFrom(const Fault_Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.Fault_Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fault_Signal::IsInitialized() const {
  return true;
}

void Fault_Signal::Swap(Fault_Signal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fault_Signal::InternalSwap(Fault_Signal* other) {
  using std::swap;
  swap(fcwsystemfaultstatus_, other->fcwsystemfaultstatus_);
  swap(aebsystemfaultstatus_, other->aebsystemfaultstatus_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Fault_Signal::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vehicle_Signal::InitAsDefaultInstance() {
  ::calmcar::perception::_Vehicle_Signal_default_instance_._instance.get_mutable()->signal_output_ = const_cast< ::calmcar::perception::Signal_Output*>(
      ::calmcar::perception::Signal_Output::internal_default_instance());
  ::calmcar::perception::_Vehicle_Signal_default_instance_._instance.get_mutable()->fault_signal_ = const_cast< ::calmcar::perception::Fault_Signal*>(
      ::calmcar::perception::Fault_Signal::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vehicle_Signal::kSignalOutputFieldNumber;
const int Vehicle_Signal::kFaultSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vehicle_Signal::Vehicle_Signal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_2eproto::InitDefaultsVehicle_Signal();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.Vehicle_Signal)
}
Vehicle_Signal::Vehicle_Signal(const Vehicle_Signal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_signal_output()) {
    signal_output_ = new ::calmcar::perception::Signal_Output(*from.signal_output_);
  } else {
    signal_output_ = NULL;
  }
  if (from.has_fault_signal()) {
    fault_signal_ = new ::calmcar::perception::Fault_Signal(*from.fault_signal_);
  } else {
    fault_signal_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.Vehicle_Signal)
}

void Vehicle_Signal::SharedCtor() {
  ::memset(&signal_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fault_signal_) -
      reinterpret_cast<char*>(&signal_output_)) + sizeof(fault_signal_));
  _cached_size_ = 0;
}

Vehicle_Signal::~Vehicle_Signal() {
  // @@protoc_insertion_point(destructor:calmcar.perception.Vehicle_Signal)
  SharedDtor();
}

void Vehicle_Signal::SharedDtor() {
  if (this != internal_default_instance()) delete signal_output_;
  if (this != internal_default_instance()) delete fault_signal_;
}

void Vehicle_Signal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vehicle_Signal::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vehicle_Signal& Vehicle_Signal::default_instance() {
  ::protobuf_perception_2eproto::InitDefaultsVehicle_Signal();
  return *internal_default_instance();
}

Vehicle_Signal* Vehicle_Signal::New(::google::protobuf::Arena* arena) const {
  Vehicle_Signal* n = new Vehicle_Signal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vehicle_Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.Vehicle_Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && signal_output_ != NULL) {
    delete signal_output_;
  }
  signal_output_ = NULL;
  if (GetArenaNoVirtual() == NULL && fault_signal_ != NULL) {
    delete fault_signal_;
  }
  fault_signal_ = NULL;
  _internal_metadata_.Clear();
}

bool Vehicle_Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.Vehicle_Signal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.Signal_Output signal_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signal_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Fault_Signal fault_signal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fault_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.Vehicle_Signal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.Vehicle_Signal)
  return false;
#undef DO_
}

void Vehicle_Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.Vehicle_Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.Signal_Output signal_output = 1;
  if (this->has_signal_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->signal_output_, output);
  }

  // .calmcar.perception.Fault_Signal fault_signal = 2;
  if (this->has_fault_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fault_signal_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.Vehicle_Signal)
}

::google::protobuf::uint8* Vehicle_Signal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.Vehicle_Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.Signal_Output signal_output = 1;
  if (this->has_signal_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->signal_output_, deterministic, target);
  }

  // .calmcar.perception.Fault_Signal fault_signal = 2;
  if (this->has_fault_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->fault_signal_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.Vehicle_Signal)
  return target;
}

size_t Vehicle_Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.Vehicle_Signal)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .calmcar.perception.Signal_Output signal_output = 1;
  if (this->has_signal_output()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->signal_output_);
  }

  // .calmcar.perception.Fault_Signal fault_signal = 2;
  if (this->has_fault_signal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->fault_signal_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vehicle_Signal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.Vehicle_Signal)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle_Signal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vehicle_Signal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.Vehicle_Signal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.Vehicle_Signal)
    MergeFrom(*source);
  }
}

void Vehicle_Signal::MergeFrom(const Vehicle_Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.Vehicle_Signal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_signal_output()) {
    mutable_signal_output()->::calmcar::perception::Signal_Output::MergeFrom(from.signal_output());
  }
  if (from.has_fault_signal()) {
    mutable_fault_signal()->::calmcar::perception::Fault_Signal::MergeFrom(from.fault_signal());
  }
}

void Vehicle_Signal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.Vehicle_Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle_Signal::CopyFrom(const Vehicle_Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.Vehicle_Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle_Signal::IsInitialized() const {
  return true;
}

void Vehicle_Signal::Swap(Vehicle_Signal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vehicle_Signal::InternalSwap(Vehicle_Signal* other) {
  using std::swap;
  swap(signal_output_, other->signal_output_);
  swap(fault_signal_, other->fault_signal_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vehicle_Signal::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AebOutput::InitAsDefaultInstance() {
  ::calmcar::perception::_AebOutput_default_instance_._instance.get_mutable()->vehicle_signal_ = const_cast< ::calmcar::perception::Vehicle_Signal*>(
      ::calmcar::perception::Vehicle_Signal::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AebOutput::kIsValidFieldNumber;
const int AebOutput::kAebOutFieldNumber;
const int AebOutput::kAebDecisionFieldNumber;
const int AebOutput::kFollowObjectsFieldNumber;
const int AebOutput::kPredictPtsFieldNumber;
const int AebOutput::kVehicleSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AebOutput::AebOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_2eproto::InitDefaultsAebOutput();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.AebOutput)
}
AebOutput::AebOutput(const AebOutput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      follow_objects_(from.follow_objects_),
      predict_pts_(from.predict_pts_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_vehicle_signal()) {
    vehicle_signal_ = new ::calmcar::perception::Vehicle_Signal(*from.vehicle_signal_);
  } else {
    vehicle_signal_ = NULL;
  }
  ::memcpy(&is_valid_, &from.is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&aeb_decision_) -
    reinterpret_cast<char*>(&is_valid_)) + sizeof(aeb_decision_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.AebOutput)
}

void AebOutput::SharedCtor() {
  ::memset(&vehicle_signal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aeb_decision_) -
      reinterpret_cast<char*>(&vehicle_signal_)) + sizeof(aeb_decision_));
  _cached_size_ = 0;
}

AebOutput::~AebOutput() {
  // @@protoc_insertion_point(destructor:calmcar.perception.AebOutput)
  SharedDtor();
}

void AebOutput::SharedDtor() {
  if (this != internal_default_instance()) delete vehicle_signal_;
}

void AebOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AebOutput::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AebOutput& AebOutput::default_instance() {
  ::protobuf_perception_2eproto::InitDefaultsAebOutput();
  return *internal_default_instance();
}

AebOutput* AebOutput::New(::google::protobuf::Arena* arena) const {
  AebOutput* n = new AebOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AebOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.AebOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  follow_objects_.Clear();
  predict_pts_.Clear();
  if (GetArenaNoVirtual() == NULL && vehicle_signal_ != NULL) {
    delete vehicle_signal_;
  }
  vehicle_signal_ = NULL;
  ::memset(&is_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aeb_decision_) -
      reinterpret_cast<char*>(&is_valid_)) + sizeof(aeb_decision_));
  _internal_metadata_.Clear();
}

bool AebOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.AebOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_valid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.AebOutput.AebOut aeb_out = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_aeb_out(static_cast< ::calmcar::perception::AebOutput_AebOut >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.AebOutput.AebDecision aeb_decision = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_aeb_decision(static_cast< ::calmcar::perception::AebOutput_AebDecision >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.AebObject follow_objects = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_follow_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.VehiclePredictPoint predict_pts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_predict_pts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Vehicle_Signal vehicle_signal = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.AebOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.AebOutput)
  return false;
#undef DO_
}

void AebOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.AebOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_valid = 1;
  if (this->is_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_valid(), output);
  }

  // .calmcar.perception.AebOutput.AebOut aeb_out = 2;
  if (this->aeb_out() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->aeb_out(), output);
  }

  // .calmcar.perception.AebOutput.AebDecision aeb_decision = 3;
  if (this->aeb_decision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->aeb_decision(), output);
  }

  // repeated .calmcar.perception.AebObject follow_objects = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->follow_objects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->follow_objects(static_cast<int>(i)), output);
  }

  // repeated .calmcar.perception.VehiclePredictPoint predict_pts = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predict_pts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->predict_pts(static_cast<int>(i)), output);
  }

  // .calmcar.perception.Vehicle_Signal vehicle_signal = 6;
  if (this->has_vehicle_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->vehicle_signal_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.AebOutput)
}

::google::protobuf::uint8* AebOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.AebOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_valid = 1;
  if (this->is_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_valid(), target);
  }

  // .calmcar.perception.AebOutput.AebOut aeb_out = 2;
  if (this->aeb_out() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->aeb_out(), target);
  }

  // .calmcar.perception.AebOutput.AebDecision aeb_decision = 3;
  if (this->aeb_decision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->aeb_decision(), target);
  }

  // repeated .calmcar.perception.AebObject follow_objects = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->follow_objects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->follow_objects(static_cast<int>(i)), deterministic, target);
  }

  // repeated .calmcar.perception.VehiclePredictPoint predict_pts = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predict_pts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->predict_pts(static_cast<int>(i)), deterministic, target);
  }

  // .calmcar.perception.Vehicle_Signal vehicle_signal = 6;
  if (this->has_vehicle_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->vehicle_signal_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.AebOutput)
  return target;
}

size_t AebOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.AebOutput)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .calmcar.perception.AebObject follow_objects = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->follow_objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->follow_objects(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.VehiclePredictPoint predict_pts = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->predict_pts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->predict_pts(static_cast<int>(i)));
    }
  }

  // .calmcar.perception.Vehicle_Signal vehicle_signal = 6;
  if (this->has_vehicle_signal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vehicle_signal_);
  }

  // bool is_valid = 1;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  // .calmcar.perception.AebOutput.AebOut aeb_out = 2;
  if (this->aeb_out() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->aeb_out());
  }

  // .calmcar.perception.AebOutput.AebDecision aeb_decision = 3;
  if (this->aeb_decision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->aeb_decision());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AebOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.AebOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const AebOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AebOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.AebOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.AebOutput)
    MergeFrom(*source);
  }
}

void AebOutput::MergeFrom(const AebOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.AebOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  follow_objects_.MergeFrom(from.follow_objects_);
  predict_pts_.MergeFrom(from.predict_pts_);
  if (from.has_vehicle_signal()) {
    mutable_vehicle_signal()->::calmcar::perception::Vehicle_Signal::MergeFrom(from.vehicle_signal());
  }
  if (from.is_valid() != 0) {
    set_is_valid(from.is_valid());
  }
  if (from.aeb_out() != 0) {
    set_aeb_out(from.aeb_out());
  }
  if (from.aeb_decision() != 0) {
    set_aeb_decision(from.aeb_decision());
  }
}

void AebOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.AebOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AebOutput::CopyFrom(const AebOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.AebOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AebOutput::IsInitialized() const {
  return true;
}

void AebOutput::Swap(AebOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AebOutput::InternalSwap(AebOutput* other) {
  using std::swap;
  follow_objects_.InternalSwap(&other->follow_objects_);
  predict_pts_.InternalSwap(&other->predict_pts_);
  swap(vehicle_signal_, other->vehicle_signal_);
  swap(is_valid_, other->is_valid_);
  swap(aeb_out_, other->aeb_out_);
  swap(aeb_decision_, other->aeb_decision_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AebOutput::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AebInput::InitAsDefaultInstance() {
  ::calmcar::perception::_AebInput_default_instance_._instance.get_mutable()->signal_input_ = const_cast< ::calmcar::perception::Signal_Input*>(
      ::calmcar::perception::Signal_Input::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AebInput::kSignalInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AebInput::AebInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_2eproto::InitDefaultsAebInput();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.AebInput)
}
AebInput::AebInput(const AebInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_signal_input()) {
    signal_input_ = new ::calmcar::perception::Signal_Input(*from.signal_input_);
  } else {
    signal_input_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.AebInput)
}

void AebInput::SharedCtor() {
  signal_input_ = NULL;
  _cached_size_ = 0;
}

AebInput::~AebInput() {
  // @@protoc_insertion_point(destructor:calmcar.perception.AebInput)
  SharedDtor();
}

void AebInput::SharedDtor() {
  if (this != internal_default_instance()) delete signal_input_;
}

void AebInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AebInput::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AebInput& AebInput::default_instance() {
  ::protobuf_perception_2eproto::InitDefaultsAebInput();
  return *internal_default_instance();
}

AebInput* AebInput::New(::google::protobuf::Arena* arena) const {
  AebInput* n = new AebInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AebInput::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.AebInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && signal_input_ != NULL) {
    delete signal_input_;
  }
  signal_input_ = NULL;
  _internal_metadata_.Clear();
}

bool AebInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.AebInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.Signal_Input signal_input = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signal_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.AebInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.AebInput)
  return false;
#undef DO_
}

void AebInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.AebInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.Signal_Input signal_input = 1;
  if (this->has_signal_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->signal_input_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.AebInput)
}

::google::protobuf::uint8* AebInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.AebInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.Signal_Input signal_input = 1;
  if (this->has_signal_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->signal_input_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.AebInput)
  return target;
}

size_t AebInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.AebInput)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .calmcar.perception.Signal_Input signal_input = 1;
  if (this->has_signal_input()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->signal_input_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AebInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.AebInput)
  GOOGLE_DCHECK_NE(&from, this);
  const AebInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AebInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.AebInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.AebInput)
    MergeFrom(*source);
  }
}

void AebInput::MergeFrom(const AebInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.AebInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_signal_input()) {
    mutable_signal_input()->::calmcar::perception::Signal_Input::MergeFrom(from.signal_input());
  }
}

void AebInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.AebInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AebInput::CopyFrom(const AebInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.AebInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AebInput::IsInitialized() const {
  return true;
}

void AebInput::Swap(AebInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AebInput::InternalSwap(AebInput* other) {
  using std::swap;
  swap(signal_input_, other->signal_input_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AebInput::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AebInfo::InitAsDefaultInstance() {
  ::calmcar::perception::_AebInfo_default_instance_._instance.get_mutable()->aeb_input_ = const_cast< ::calmcar::perception::AebInput*>(
      ::calmcar::perception::AebInput::internal_default_instance());
  ::calmcar::perception::_AebInfo_default_instance_._instance.get_mutable()->aeb_output_ = const_cast< ::calmcar::perception::AebOutput*>(
      ::calmcar::perception::AebOutput::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AebInfo::kAebInputFieldNumber;
const int AebInfo::kAebOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AebInfo::AebInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_2eproto::InitDefaultsAebInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.AebInfo)
}
AebInfo::AebInfo(const AebInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_aeb_input()) {
    aeb_input_ = new ::calmcar::perception::AebInput(*from.aeb_input_);
  } else {
    aeb_input_ = NULL;
  }
  if (from.has_aeb_output()) {
    aeb_output_ = new ::calmcar::perception::AebOutput(*from.aeb_output_);
  } else {
    aeb_output_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.AebInfo)
}

void AebInfo::SharedCtor() {
  ::memset(&aeb_input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aeb_output_) -
      reinterpret_cast<char*>(&aeb_input_)) + sizeof(aeb_output_));
  _cached_size_ = 0;
}

AebInfo::~AebInfo() {
  // @@protoc_insertion_point(destructor:calmcar.perception.AebInfo)
  SharedDtor();
}

void AebInfo::SharedDtor() {
  if (this != internal_default_instance()) delete aeb_input_;
  if (this != internal_default_instance()) delete aeb_output_;
}

void AebInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AebInfo::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AebInfo& AebInfo::default_instance() {
  ::protobuf_perception_2eproto::InitDefaultsAebInfo();
  return *internal_default_instance();
}

AebInfo* AebInfo::New(::google::protobuf::Arena* arena) const {
  AebInfo* n = new AebInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AebInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.AebInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && aeb_input_ != NULL) {
    delete aeb_input_;
  }
  aeb_input_ = NULL;
  if (GetArenaNoVirtual() == NULL && aeb_output_ != NULL) {
    delete aeb_output_;
  }
  aeb_output_ = NULL;
  _internal_metadata_.Clear();
}

bool AebInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.AebInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.AebInput aeb_input = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_aeb_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.AebOutput aeb_output = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_aeb_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.AebInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.AebInfo)
  return false;
#undef DO_
}

void AebInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.AebInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.AebInput aeb_input = 1;
  if (this->has_aeb_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->aeb_input_, output);
  }

  // .calmcar.perception.AebOutput aeb_output = 2;
  if (this->has_aeb_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->aeb_output_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.AebInfo)
}

::google::protobuf::uint8* AebInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.AebInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.AebInput aeb_input = 1;
  if (this->has_aeb_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->aeb_input_, deterministic, target);
  }

  // .calmcar.perception.AebOutput aeb_output = 2;
  if (this->has_aeb_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->aeb_output_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.AebInfo)
  return target;
}

size_t AebInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.AebInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .calmcar.perception.AebInput aeb_input = 1;
  if (this->has_aeb_input()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->aeb_input_);
  }

  // .calmcar.perception.AebOutput aeb_output = 2;
  if (this->has_aeb_output()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->aeb_output_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AebInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.AebInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AebInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AebInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.AebInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.AebInfo)
    MergeFrom(*source);
  }
}

void AebInfo::MergeFrom(const AebInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.AebInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_aeb_input()) {
    mutable_aeb_input()->::calmcar::perception::AebInput::MergeFrom(from.aeb_input());
  }
  if (from.has_aeb_output()) {
    mutable_aeb_output()->::calmcar::perception::AebOutput::MergeFrom(from.aeb_output());
  }
}

void AebInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.AebInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AebInfo::CopyFrom(const AebInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.AebInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AebInfo::IsInitialized() const {
  return true;
}

void AebInfo::Swap(AebInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AebInfo::InternalSwap(AebInfo* other) {
  using std::swap;
  swap(aeb_input_, other->aeb_input_);
  swap(aeb_output_, other->aeb_output_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AebInfo::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Failsafe::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Failsafe::kCameraPositionFieldNumber;
const int Failsafe::kTimestampFieldNumber;
const int Failsafe::kBlockageStatusFieldNumber;
const int Failsafe::kBlockageNameFieldNumber;
const int Failsafe::kWeatherStatusFieldNumber;
const int Failsafe::kWeatherNameFieldNumber;
const int Failsafe::kIlluminationStatusFieldNumber;
const int Failsafe::kIlluminationNameFieldNumber;
const int Failsafe::kImageLimitedStatusFieldNumber;
const int Failsafe::kImageLimitedNameFieldNumber;
const int Failsafe::kOutOfFocusFieldNumber;
const int Failsafe::kImpactedTechnologiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Failsafe::Failsafe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_2eproto::InitDefaultsFailsafe();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.Failsafe)
}
Failsafe::Failsafe(const Failsafe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blockage_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.blockage_name().size() > 0) {
    blockage_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockage_name_);
  }
  weather_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.weather_name().size() > 0) {
    weather_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weather_name_);
  }
  illumination_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.illumination_name().size() > 0) {
    illumination_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.illumination_name_);
  }
  image_limited_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image_limited_name().size() > 0) {
    image_limited_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_limited_name_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&impacted_technologies_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(impacted_technologies_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.Failsafe)
}

void Failsafe::SharedCtor() {
  blockage_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weather_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  illumination_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_limited_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&impacted_technologies_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(impacted_technologies_));
  _cached_size_ = 0;
}

Failsafe::~Failsafe() {
  // @@protoc_insertion_point(destructor:calmcar.perception.Failsafe)
  SharedDtor();
}

void Failsafe::SharedDtor() {
  blockage_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weather_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  illumination_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_limited_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Failsafe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Failsafe::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Failsafe& Failsafe::default_instance() {
  ::protobuf_perception_2eproto::InitDefaultsFailsafe();
  return *internal_default_instance();
}

Failsafe* Failsafe::New(::google::protobuf::Arena* arena) const {
  Failsafe* n = new Failsafe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Failsafe::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.Failsafe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blockage_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weather_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  illumination_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_limited_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&impacted_technologies_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(impacted_technologies_));
  _internal_metadata_.Clear();
}

bool Failsafe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.Failsafe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.CameraInfo.Position camera_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera_position(static_cast< ::calmcar::perception::CameraInfo_Position >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Failsafe.FailSafeBlockage blockage_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_blockage_status(static_cast< ::calmcar::perception::Failsafe_FailSafeBlockage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string blockage_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blockage_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->blockage_name().data(), static_cast<int>(this->blockage_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.Failsafe.blockage_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Failsafe.FailSafeWeather weather_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_weather_status(static_cast< ::calmcar::perception::Failsafe_FailSafeWeather >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string weather_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weather_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->weather_name().data(), static_cast<int>(this->weather_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.Failsafe.weather_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Failsafe.FailSafeIllumination illumination_status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_illumination_status(static_cast< ::calmcar::perception::Failsafe_FailSafeIllumination >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string illumination_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_illumination_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->illumination_name().data(), static_cast<int>(this->illumination_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.Failsafe.illumination_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Failsafe.FailSafeImageLimited image_limited_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_image_limited_status(static_cast< ::calmcar::perception::Failsafe_FailSafeImageLimited >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string image_limited_name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_limited_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image_limited_name().data(), static_cast<int>(this->image_limited_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.Failsafe.image_limited_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool out_of_focus = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &out_of_focus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 impacted_technologies = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &impacted_technologies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.Failsafe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.Failsafe)
  return false;
#undef DO_
}

void Failsafe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.Failsafe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->camera_position(), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // .calmcar.perception.Failsafe.FailSafeBlockage blockage_status = 3;
  if (this->blockage_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->blockage_status(), output);
  }

  // string blockage_name = 4;
  if (this->blockage_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->blockage_name().data(), static_cast<int>(this->blockage_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Failsafe.blockage_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->blockage_name(), output);
  }

  // .calmcar.perception.Failsafe.FailSafeWeather weather_status = 5;
  if (this->weather_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->weather_status(), output);
  }

  // string weather_name = 6;
  if (this->weather_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->weather_name().data(), static_cast<int>(this->weather_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Failsafe.weather_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->weather_name(), output);
  }

  // .calmcar.perception.Failsafe.FailSafeIllumination illumination_status = 7;
  if (this->illumination_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->illumination_status(), output);
  }

  // string illumination_name = 8;
  if (this->illumination_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->illumination_name().data(), static_cast<int>(this->illumination_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Failsafe.illumination_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->illumination_name(), output);
  }

  // .calmcar.perception.Failsafe.FailSafeImageLimited image_limited_status = 9;
  if (this->image_limited_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->image_limited_status(), output);
  }

  // string image_limited_name = 10;
  if (this->image_limited_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_limited_name().data(), static_cast<int>(this->image_limited_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Failsafe.image_limited_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->image_limited_name(), output);
  }

  // bool out_of_focus = 11;
  if (this->out_of_focus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->out_of_focus(), output);
  }

  // int32 impacted_technologies = 12;
  if (this->impacted_technologies() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->impacted_technologies(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.Failsafe)
}

::google::protobuf::uint8* Failsafe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.Failsafe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->camera_position(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // .calmcar.perception.Failsafe.FailSafeBlockage blockage_status = 3;
  if (this->blockage_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->blockage_status(), target);
  }

  // string blockage_name = 4;
  if (this->blockage_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->blockage_name().data(), static_cast<int>(this->blockage_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Failsafe.blockage_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->blockage_name(), target);
  }

  // .calmcar.perception.Failsafe.FailSafeWeather weather_status = 5;
  if (this->weather_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->weather_status(), target);
  }

  // string weather_name = 6;
  if (this->weather_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->weather_name().data(), static_cast<int>(this->weather_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Failsafe.weather_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->weather_name(), target);
  }

  // .calmcar.perception.Failsafe.FailSafeIllumination illumination_status = 7;
  if (this->illumination_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->illumination_status(), target);
  }

  // string illumination_name = 8;
  if (this->illumination_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->illumination_name().data(), static_cast<int>(this->illumination_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Failsafe.illumination_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->illumination_name(), target);
  }

  // .calmcar.perception.Failsafe.FailSafeImageLimited image_limited_status = 9;
  if (this->image_limited_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->image_limited_status(), target);
  }

  // string image_limited_name = 10;
  if (this->image_limited_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image_limited_name().data(), static_cast<int>(this->image_limited_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.Failsafe.image_limited_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->image_limited_name(), target);
  }

  // bool out_of_focus = 11;
  if (this->out_of_focus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->out_of_focus(), target);
  }

  // int32 impacted_technologies = 12;
  if (this->impacted_technologies() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->impacted_technologies(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.Failsafe)
  return target;
}

size_t Failsafe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.Failsafe)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string blockage_name = 4;
  if (this->blockage_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->blockage_name());
  }

  // string weather_name = 6;
  if (this->weather_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->weather_name());
  }

  // string illumination_name = 8;
  if (this->illumination_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->illumination_name());
  }

  // string image_limited_name = 10;
  if (this->image_limited_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_limited_name());
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // .calmcar.perception.CameraInfo.Position camera_position = 1;
  if (this->camera_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_position());
  }

  // .calmcar.perception.Failsafe.FailSafeBlockage blockage_status = 3;
  if (this->blockage_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->blockage_status());
  }

  // .calmcar.perception.Failsafe.FailSafeWeather weather_status = 5;
  if (this->weather_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->weather_status());
  }

  // .calmcar.perception.Failsafe.FailSafeIllumination illumination_status = 7;
  if (this->illumination_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->illumination_status());
  }

  // .calmcar.perception.Failsafe.FailSafeImageLimited image_limited_status = 9;
  if (this->image_limited_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->image_limited_status());
  }

  // bool out_of_focus = 11;
  if (this->out_of_focus() != 0) {
    total_size += 1 + 1;
  }

  // int32 impacted_technologies = 12;
  if (this->impacted_technologies() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->impacted_technologies());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Failsafe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.Failsafe)
  GOOGLE_DCHECK_NE(&from, this);
  const Failsafe* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Failsafe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.Failsafe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.Failsafe)
    MergeFrom(*source);
  }
}

void Failsafe::MergeFrom(const Failsafe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.Failsafe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blockage_name().size() > 0) {

    blockage_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockage_name_);
  }
  if (from.weather_name().size() > 0) {

    weather_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weather_name_);
  }
  if (from.illumination_name().size() > 0) {

    illumination_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.illumination_name_);
  }
  if (from.image_limited_name().size() > 0) {

    image_limited_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_limited_name_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.camera_position() != 0) {
    set_camera_position(from.camera_position());
  }
  if (from.blockage_status() != 0) {
    set_blockage_status(from.blockage_status());
  }
  if (from.weather_status() != 0) {
    set_weather_status(from.weather_status());
  }
  if (from.illumination_status() != 0) {
    set_illumination_status(from.illumination_status());
  }
  if (from.image_limited_status() != 0) {
    set_image_limited_status(from.image_limited_status());
  }
  if (from.out_of_focus() != 0) {
    set_out_of_focus(from.out_of_focus());
  }
  if (from.impacted_technologies() != 0) {
    set_impacted_technologies(from.impacted_technologies());
  }
}

void Failsafe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.Failsafe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Failsafe::CopyFrom(const Failsafe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.Failsafe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Failsafe::IsInitialized() const {
  return true;
}

void Failsafe::Swap(Failsafe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Failsafe::InternalSwap(Failsafe* other) {
  using std::swap;
  blockage_name_.Swap(&other->blockage_name_);
  weather_name_.Swap(&other->weather_name_);
  illumination_name_.Swap(&other->illumination_name_);
  image_limited_name_.Swap(&other->image_limited_name_);
  swap(timestamp_, other->timestamp_);
  swap(camera_position_, other->camera_position_);
  swap(blockage_status_, other->blockage_status_);
  swap(weather_status_, other->weather_status_);
  swap(illumination_status_, other->illumination_status_);
  swap(image_limited_status_, other->image_limited_status_);
  swap(out_of_focus_, other->out_of_focus_);
  swap(impacted_technologies_, other->impacted_technologies_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Failsafe::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PerceptionFrame::InitAsDefaultInstance() {
  ::calmcar::perception::_PerceptionFrame_default_instance_._instance.get_mutable()->header_ = const_cast< ::calmcar::perception::Header*>(
      ::calmcar::perception::Header::internal_default_instance());
  ::calmcar::perception::_PerceptionFrame_default_instance_._instance.get_mutable()->lane_ = const_cast< ::calmcar::perception::Lane*>(
      ::calmcar::perception::Lane::internal_default_instance());
  ::calmcar::perception::_PerceptionFrame_default_instance_._instance.get_mutable()->free_space_ = const_cast< ::calmcar::perception::FreeSpace*>(
      ::calmcar::perception::FreeSpace::internal_default_instance());
  ::calmcar::perception::_PerceptionFrame_default_instance_._instance.get_mutable()->diagnose_ = const_cast< ::calmcar::perception::Diagnose*>(
      ::calmcar::perception::Diagnose::internal_default_instance());
  ::calmcar::perception::_PerceptionFrame_default_instance_._instance.get_mutable()->aeb_info_ = const_cast< ::calmcar::perception::AebInfo*>(
      ::calmcar::perception::AebInfo::internal_default_instance());
}
void PerceptionFrame::clear_road_mark() {
  road_mark_.Clear();
}
void PerceptionFrame::clear_lane() {
  if (GetArenaNoVirtual() == NULL && lane_ != NULL) {
    delete lane_;
  }
  lane_ = NULL;
}
void PerceptionFrame::clear_free_space() {
  if (GetArenaNoVirtual() == NULL && free_space_ != NULL) {
    delete free_space_;
  }
  free_space_ = NULL;
}
void PerceptionFrame::clear_vehicle_info() {
  vehicle_info_.Clear();
}
void PerceptionFrame::clear_barricade_object() {
  barricade_object_.Clear();
}
void PerceptionFrame::clear_self_lane_center() {
  self_lane_center_.Clear();
}
void PerceptionFrame::clear_diagnose() {
  if (GetArenaNoVirtual() == NULL && diagnose_ != NULL) {
    delete diagnose_;
  }
  diagnose_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptionFrame::kHeaderFieldNumber;
const int PerceptionFrame::kVdCountFieldNumber;
const int PerceptionFrame::kVruCountFieldNumber;
const int PerceptionFrame::kNumOfObjectsFieldNumber;
const int PerceptionFrame::kCipvIdFieldNumber;
const int PerceptionFrame::kVdNivLeftFieldNumber;
const int PerceptionFrame::kVdNivRightFieldNumber;
const int PerceptionFrame::kCipvLostFieldNumber;
const int PerceptionFrame::kAllowAccFieldNumber;
const int PerceptionFrame::kObjectFieldNumber;
const int PerceptionFrame::kRoadMarkFieldNumber;
const int PerceptionFrame::kLaneFieldNumber;
const int PerceptionFrame::kFreeSpaceFieldNumber;
const int PerceptionFrame::kTflStructureFieldNumber;
const int PerceptionFrame::kTflStructStateFieldNumber;
const int PerceptionFrame::kTflStructCountFieldNumber;
const int PerceptionFrame::kTflSpotCountFieldNumber;
const int PerceptionFrame::kTrafficSignFieldNumber;
const int PerceptionFrame::kTrafficSignStatusFieldNumber;
const int PerceptionFrame::kFailsafeFieldNumber;
const int PerceptionFrame::kVehicleInfoFieldNumber;
const int PerceptionFrame::kBarricadeCountFieldNumber;
const int PerceptionFrame::kBarricadeObjectFieldNumber;
const int PerceptionFrame::kSelfLaneCenterFieldNumber;
const int PerceptionFrame::kDiagnoseFieldNumber;
const int PerceptionFrame::kPerceptionEndTimestampFieldNumber;
const int PerceptionFrame::kAebInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptionFrame::PerceptionFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_perception_2eproto::InitDefaultsPerceptionFrame();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.PerceptionFrame)
}
PerceptionFrame::PerceptionFrame(const PerceptionFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      object_(from.object_),
      road_mark_(from.road_mark_),
      tfl_structure_(from.tfl_structure_),
      tfl_struct_state_(from.tfl_struct_state_),
      traffic_sign_(from.traffic_sign_),
      traffic_sign_status_(from.traffic_sign_status_),
      failsafe_(from.failsafe_),
      vehicle_info_(from.vehicle_info_),
      barricade_object_(from.barricade_object_),
      self_lane_center_(from.self_lane_center_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::calmcar::perception::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_lane()) {
    lane_ = new ::calmcar::perception::Lane(*from.lane_);
  } else {
    lane_ = NULL;
  }
  if (from.has_free_space()) {
    free_space_ = new ::calmcar::perception::FreeSpace(*from.free_space_);
  } else {
    free_space_ = NULL;
  }
  if (from.has_diagnose()) {
    diagnose_ = new ::calmcar::perception::Diagnose(*from.diagnose_);
  } else {
    diagnose_ = NULL;
  }
  if (from.has_aeb_info()) {
    aeb_info_ = new ::calmcar::perception::AebInfo(*from.aeb_info_);
  } else {
    aeb_info_ = NULL;
  }
  ::memcpy(&vd_count_, &from.vd_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&perception_end_timestamp_) -
    reinterpret_cast<char*>(&vd_count_)) + sizeof(perception_end_timestamp_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.PerceptionFrame)
}

void PerceptionFrame::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&perception_end_timestamp_) -
      reinterpret_cast<char*>(&header_)) + sizeof(perception_end_timestamp_));
  _cached_size_ = 0;
}

PerceptionFrame::~PerceptionFrame() {
  // @@protoc_insertion_point(destructor:calmcar.perception.PerceptionFrame)
  SharedDtor();
}

void PerceptionFrame::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lane_;
  if (this != internal_default_instance()) delete free_space_;
  if (this != internal_default_instance()) delete diagnose_;
  if (this != internal_default_instance()) delete aeb_info_;
}

void PerceptionFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerceptionFrame::descriptor() {
  ::protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PerceptionFrame& PerceptionFrame::default_instance() {
  ::protobuf_perception_2eproto::InitDefaultsPerceptionFrame();
  return *internal_default_instance();
}

PerceptionFrame* PerceptionFrame::New(::google::protobuf::Arena* arena) const {
  PerceptionFrame* n = new PerceptionFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerceptionFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.PerceptionFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_.Clear();
  road_mark_.Clear();
  tfl_structure_.Clear();
  tfl_struct_state_.Clear();
  traffic_sign_.Clear();
  traffic_sign_status_.Clear();
  failsafe_.Clear();
  vehicle_info_.Clear();
  barricade_object_.Clear();
  self_lane_center_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && lane_ != NULL) {
    delete lane_;
  }
  lane_ = NULL;
  if (GetArenaNoVirtual() == NULL && free_space_ != NULL) {
    delete free_space_;
  }
  free_space_ = NULL;
  if (GetArenaNoVirtual() == NULL && diagnose_ != NULL) {
    delete diagnose_;
  }
  diagnose_ = NULL;
  if (GetArenaNoVirtual() == NULL && aeb_info_ != NULL) {
    delete aeb_info_;
  }
  aeb_info_ = NULL;
  ::memset(&vd_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&perception_end_timestamp_) -
      reinterpret_cast<char*>(&vd_count_)) + sizeof(perception_end_timestamp_));
  _internal_metadata_.Clear();
}

bool PerceptionFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.PerceptionFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .calmcar.perception.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 vd_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vd_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 vru_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vru_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 num_of_objects = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_of_objects_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 cipv_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cipv_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 vd_niv_left = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vd_niv_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 vd_niv_right = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vd_niv_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.CipvLost cipv_lost = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cipv_lost(static_cast< ::calmcar::perception::CipvLost >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.AllowAcc allow_acc = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_allow_acc(static_cast< ::calmcar::perception::AllowAcc >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.Object object = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.RoadMark road_mark = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_road_mark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Lane lane = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.FreeSpace free_space = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_free_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.TrafficLight tfl_structure = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_tfl_structure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.TrafficLight tfl_struct_state = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_tfl_struct_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tfl_struct_count = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tfl_struct_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tfl_spot_count = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tfl_spot_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.TrafficSign traffic_sign = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_traffic_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.TrafficSignStatus traffic_sign_status = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_traffic_sign_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.Failsafe failsafe = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_failsafe()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.Vehicle vehicle_info = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_vehicle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 barricade_count = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &barricade_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.Barricade barricade_object = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_barricade_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.Point self_lane_center = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_self_lane_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Diagnose diagnose = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_diagnose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 perception_end_timestamp = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &perception_end_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.AebInfo aeb_info = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_aeb_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.PerceptionFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.PerceptionFrame)
  return false;
#undef DO_
}

void PerceptionFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.PerceptionFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int64 vd_count = 2;
  if (this->vd_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->vd_count(), output);
  }

  // int64 vru_count = 3;
  if (this->vru_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->vru_count(), output);
  }

  // int64 num_of_objects = 4;
  if (this->num_of_objects() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->num_of_objects(), output);
  }

  // int64 cipv_id = 5;
  if (this->cipv_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->cipv_id(), output);
  }

  // int64 vd_niv_left = 6;
  if (this->vd_niv_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->vd_niv_left(), output);
  }

  // int64 vd_niv_right = 7;
  if (this->vd_niv_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->vd_niv_right(), output);
  }

  // .calmcar.perception.CipvLost cipv_lost = 8;
  if (this->cipv_lost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->cipv_lost(), output);
  }

  // .calmcar.perception.AllowAcc allow_acc = 9;
  if (this->allow_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->allow_acc(), output);
  }

  // repeated .calmcar.perception.Object object = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->object(static_cast<int>(i)), output);
  }

  // repeated .calmcar.perception.RoadMark road_mark = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_mark_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->road_mark(static_cast<int>(i)), output);
  }

  // .calmcar.perception.Lane lane = 12;
  if (this->has_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->lane_, output);
  }

  // .calmcar.perception.FreeSpace free_space = 13;
  if (this->has_free_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->free_space_, output);
  }

  // repeated .calmcar.perception.TrafficLight tfl_structure = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tfl_structure_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->tfl_structure(static_cast<int>(i)), output);
  }

  // repeated .calmcar.perception.TrafficLight tfl_struct_state = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tfl_struct_state_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->tfl_struct_state(static_cast<int>(i)), output);
  }

  // int64 tfl_struct_count = 16;
  if (this->tfl_struct_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->tfl_struct_count(), output);
  }

  // int64 tfl_spot_count = 17;
  if (this->tfl_spot_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->tfl_spot_count(), output);
  }

  // repeated .calmcar.perception.TrafficSign traffic_sign = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_sign_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->traffic_sign(static_cast<int>(i)), output);
  }

  // repeated .calmcar.perception.TrafficSignStatus traffic_sign_status = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_sign_status_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->traffic_sign_status(static_cast<int>(i)), output);
  }

  // repeated .calmcar.perception.Failsafe failsafe = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->failsafe_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->failsafe(static_cast<int>(i)), output);
  }

  // repeated .calmcar.perception.Vehicle vehicle_info = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->vehicle_info(static_cast<int>(i)), output);
  }

  // int64 barricade_count = 22;
  if (this->barricade_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->barricade_count(), output);
  }

  // repeated .calmcar.perception.Barricade barricade_object = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->barricade_object_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->barricade_object(static_cast<int>(i)), output);
  }

  // repeated .calmcar.perception.Point self_lane_center = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->self_lane_center_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->self_lane_center(static_cast<int>(i)), output);
  }

  // .calmcar.perception.Diagnose diagnose = 25;
  if (this->has_diagnose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->diagnose_, output);
  }

  // int64 perception_end_timestamp = 26;
  if (this->perception_end_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->perception_end_timestamp(), output);
  }

  // .calmcar.perception.AebInfo aeb_info = 27;
  if (this->has_aeb_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->aeb_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.PerceptionFrame)
}

::google::protobuf::uint8* PerceptionFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.PerceptionFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .calmcar.perception.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // int64 vd_count = 2;
  if (this->vd_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->vd_count(), target);
  }

  // int64 vru_count = 3;
  if (this->vru_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->vru_count(), target);
  }

  // int64 num_of_objects = 4;
  if (this->num_of_objects() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->num_of_objects(), target);
  }

  // int64 cipv_id = 5;
  if (this->cipv_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->cipv_id(), target);
  }

  // int64 vd_niv_left = 6;
  if (this->vd_niv_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->vd_niv_left(), target);
  }

  // int64 vd_niv_right = 7;
  if (this->vd_niv_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->vd_niv_right(), target);
  }

  // .calmcar.perception.CipvLost cipv_lost = 8;
  if (this->cipv_lost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->cipv_lost(), target);
  }

  // .calmcar.perception.AllowAcc allow_acc = 9;
  if (this->allow_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->allow_acc(), target);
  }

  // repeated .calmcar.perception.Object object = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->object(static_cast<int>(i)), deterministic, target);
  }

  // repeated .calmcar.perception.RoadMark road_mark = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_mark_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->road_mark(static_cast<int>(i)), deterministic, target);
  }

  // .calmcar.perception.Lane lane = 12;
  if (this->has_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *this->lane_, deterministic, target);
  }

  // .calmcar.perception.FreeSpace free_space = 13;
  if (this->has_free_space()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, *this->free_space_, deterministic, target);
  }

  // repeated .calmcar.perception.TrafficLight tfl_structure = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tfl_structure_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->tfl_structure(static_cast<int>(i)), deterministic, target);
  }

  // repeated .calmcar.perception.TrafficLight tfl_struct_state = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tfl_struct_state_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->tfl_struct_state(static_cast<int>(i)), deterministic, target);
  }

  // int64 tfl_struct_count = 16;
  if (this->tfl_struct_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->tfl_struct_count(), target);
  }

  // int64 tfl_spot_count = 17;
  if (this->tfl_spot_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->tfl_spot_count(), target);
  }

  // repeated .calmcar.perception.TrafficSign traffic_sign = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_sign_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->traffic_sign(static_cast<int>(i)), deterministic, target);
  }

  // repeated .calmcar.perception.TrafficSignStatus traffic_sign_status = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_sign_status_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->traffic_sign_status(static_cast<int>(i)), deterministic, target);
  }

  // repeated .calmcar.perception.Failsafe failsafe = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->failsafe_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->failsafe(static_cast<int>(i)), deterministic, target);
  }

  // repeated .calmcar.perception.Vehicle vehicle_info = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->vehicle_info(static_cast<int>(i)), deterministic, target);
  }

  // int64 barricade_count = 22;
  if (this->barricade_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->barricade_count(), target);
  }

  // repeated .calmcar.perception.Barricade barricade_object = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->barricade_object_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->barricade_object(static_cast<int>(i)), deterministic, target);
  }

  // repeated .calmcar.perception.Point self_lane_center = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->self_lane_center_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->self_lane_center(static_cast<int>(i)), deterministic, target);
  }

  // .calmcar.perception.Diagnose diagnose = 25;
  if (this->has_diagnose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, *this->diagnose_, deterministic, target);
  }

  // int64 perception_end_timestamp = 26;
  if (this->perception_end_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->perception_end_timestamp(), target);
  }

  // .calmcar.perception.AebInfo aeb_info = 27;
  if (this->has_aeb_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, *this->aeb_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.PerceptionFrame)
  return target;
}

size_t PerceptionFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.PerceptionFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .calmcar.perception.Object object = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.RoadMark road_mark = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->road_mark_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road_mark(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.TrafficLight tfl_structure = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->tfl_structure_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tfl_structure(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.TrafficLight tfl_struct_state = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->tfl_struct_state_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tfl_struct_state(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.TrafficSign traffic_sign = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_sign_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->traffic_sign(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.TrafficSignStatus traffic_sign_status = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_sign_status_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->traffic_sign_status(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.Failsafe failsafe = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->failsafe_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->failsafe(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.Vehicle vehicle_info = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->vehicle_info_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vehicle_info(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.Barricade barricade_object = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->barricade_object_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->barricade_object(static_cast<int>(i)));
    }
  }

  // repeated .calmcar.perception.Point self_lane_center = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->self_lane_center_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->self_lane_center(static_cast<int>(i)));
    }
  }

  // .calmcar.perception.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .calmcar.perception.Lane lane = 12;
  if (this->has_lane()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lane_);
  }

  // .calmcar.perception.FreeSpace free_space = 13;
  if (this->has_free_space()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->free_space_);
  }

  // .calmcar.perception.Diagnose diagnose = 25;
  if (this->has_diagnose()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->diagnose_);
  }

  // .calmcar.perception.AebInfo aeb_info = 27;
  if (this->has_aeb_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->aeb_info_);
  }

  // int64 vd_count = 2;
  if (this->vd_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->vd_count());
  }

  // int64 vru_count = 3;
  if (this->vru_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->vru_count());
  }

  // int64 num_of_objects = 4;
  if (this->num_of_objects() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_of_objects());
  }

  // int64 cipv_id = 5;
  if (this->cipv_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cipv_id());
  }

  // int64 vd_niv_left = 6;
  if (this->vd_niv_left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->vd_niv_left());
  }

  // int64 vd_niv_right = 7;
  if (this->vd_niv_right() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->vd_niv_right());
  }

  // .calmcar.perception.CipvLost cipv_lost = 8;
  if (this->cipv_lost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cipv_lost());
  }

  // .calmcar.perception.AllowAcc allow_acc = 9;
  if (this->allow_acc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->allow_acc());
  }

  // int64 tfl_struct_count = 16;
  if (this->tfl_struct_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tfl_struct_count());
  }

  // int64 tfl_spot_count = 17;
  if (this->tfl_spot_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tfl_spot_count());
  }

  // int64 barricade_count = 22;
  if (this->barricade_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->barricade_count());
  }

  // int64 perception_end_timestamp = 26;
  if (this->perception_end_timestamp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->perception_end_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerceptionFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.PerceptionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptionFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PerceptionFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.PerceptionFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.PerceptionFrame)
    MergeFrom(*source);
  }
}

void PerceptionFrame::MergeFrom(const PerceptionFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.PerceptionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_.MergeFrom(from.object_);
  road_mark_.MergeFrom(from.road_mark_);
  tfl_structure_.MergeFrom(from.tfl_structure_);
  tfl_struct_state_.MergeFrom(from.tfl_struct_state_);
  traffic_sign_.MergeFrom(from.traffic_sign_);
  traffic_sign_status_.MergeFrom(from.traffic_sign_status_);
  failsafe_.MergeFrom(from.failsafe_);
  vehicle_info_.MergeFrom(from.vehicle_info_);
  barricade_object_.MergeFrom(from.barricade_object_);
  self_lane_center_.MergeFrom(from.self_lane_center_);
  if (from.has_header()) {
    mutable_header()->::calmcar::perception::Header::MergeFrom(from.header());
  }
  if (from.has_lane()) {
    mutable_lane()->::calmcar::perception::Lane::MergeFrom(from.lane());
  }
  if (from.has_free_space()) {
    mutable_free_space()->::calmcar::perception::FreeSpace::MergeFrom(from.free_space());
  }
  if (from.has_diagnose()) {
    mutable_diagnose()->::calmcar::perception::Diagnose::MergeFrom(from.diagnose());
  }
  if (from.has_aeb_info()) {
    mutable_aeb_info()->::calmcar::perception::AebInfo::MergeFrom(from.aeb_info());
  }
  if (from.vd_count() != 0) {
    set_vd_count(from.vd_count());
  }
  if (from.vru_count() != 0) {
    set_vru_count(from.vru_count());
  }
  if (from.num_of_objects() != 0) {
    set_num_of_objects(from.num_of_objects());
  }
  if (from.cipv_id() != 0) {
    set_cipv_id(from.cipv_id());
  }
  if (from.vd_niv_left() != 0) {
    set_vd_niv_left(from.vd_niv_left());
  }
  if (from.vd_niv_right() != 0) {
    set_vd_niv_right(from.vd_niv_right());
  }
  if (from.cipv_lost() != 0) {
    set_cipv_lost(from.cipv_lost());
  }
  if (from.allow_acc() != 0) {
    set_allow_acc(from.allow_acc());
  }
  if (from.tfl_struct_count() != 0) {
    set_tfl_struct_count(from.tfl_struct_count());
  }
  if (from.tfl_spot_count() != 0) {
    set_tfl_spot_count(from.tfl_spot_count());
  }
  if (from.barricade_count() != 0) {
    set_barricade_count(from.barricade_count());
  }
  if (from.perception_end_timestamp() != 0) {
    set_perception_end_timestamp(from.perception_end_timestamp());
  }
}

void PerceptionFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.PerceptionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionFrame::CopyFrom(const PerceptionFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.PerceptionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionFrame::IsInitialized() const {
  return true;
}

void PerceptionFrame::Swap(PerceptionFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptionFrame::InternalSwap(PerceptionFrame* other) {
  using std::swap;
  object_.InternalSwap(&other->object_);
  road_mark_.InternalSwap(&other->road_mark_);
  tfl_structure_.InternalSwap(&other->tfl_structure_);
  tfl_struct_state_.InternalSwap(&other->tfl_struct_state_);
  traffic_sign_.InternalSwap(&other->traffic_sign_);
  traffic_sign_status_.InternalSwap(&other->traffic_sign_status_);
  failsafe_.InternalSwap(&other->failsafe_);
  vehicle_info_.InternalSwap(&other->vehicle_info_);
  barricade_object_.InternalSwap(&other->barricade_object_);
  self_lane_center_.InternalSwap(&other->self_lane_center_);
  swap(header_, other->header_);
  swap(lane_, other->lane_);
  swap(free_space_, other->free_space_);
  swap(diagnose_, other->diagnose_);
  swap(aeb_info_, other->aeb_info_);
  swap(vd_count_, other->vd_count_);
  swap(vru_count_, other->vru_count_);
  swap(num_of_objects_, other->num_of_objects_);
  swap(cipv_id_, other->cipv_id_);
  swap(vd_niv_left_, other->vd_niv_left_);
  swap(vd_niv_right_, other->vd_niv_right_);
  swap(cipv_lost_, other->cipv_lost_);
  swap(allow_acc_, other->allow_acc_);
  swap(tfl_struct_count_, other->tfl_struct_count_);
  swap(tfl_spot_count_, other->tfl_spot_count_);
  swap(barricade_count_, other->barricade_count_);
  swap(perception_end_timestamp_, other->perception_end_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerceptionFrame::GetMetadata() const {
  protobuf_perception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace calmcar

// @@protoc_insertion_point(global_scope)
