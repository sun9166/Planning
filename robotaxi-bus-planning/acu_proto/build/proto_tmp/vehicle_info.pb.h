// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_info.proto

#ifndef PROTOBUF_vehicle_5finfo_2eproto__INCLUDED
#define PROTOBUF_vehicle_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_vehicle_5finfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsMsgHeaderImpl();
void InitDefaultsMsgHeader();
void InitDefaultsControlCommandImpl();
void InitDefaultsControlCommand();
void InitDefaultsVehicleInfoImpl();
void InitDefaultsVehicleInfo();
inline void InitDefaults() {
  InitDefaultsMsgHeader();
  InitDefaultsControlCommand();
  InitDefaultsVehicleInfo();
}
}  // namespace protobuf_vehicle_5finfo_2eproto
namespace vehicle_info {
namespace proto_msg {
class ControlCommand;
class ControlCommandDefaultTypeInternal;
extern ControlCommandDefaultTypeInternal _ControlCommand_default_instance_;
class MsgHeader;
class MsgHeaderDefaultTypeInternal;
extern MsgHeaderDefaultTypeInternal _MsgHeader_default_instance_;
class VehicleInfo;
class VehicleInfoDefaultTypeInternal;
extern VehicleInfoDefaultTypeInternal _VehicleInfo_default_instance_;
}  // namespace proto_msg
}  // namespace vehicle_info
namespace vehicle_info {
namespace proto_msg {

enum WheelDirection {
  DIRECTION_UNKNOWN = 0,
  DIRECTION_FORWARD = 1,
  DIRECTION_BACKWARD = 2,
  WheelDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  WheelDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool WheelDirection_IsValid(int value);
const WheelDirection WheelDirection_MIN = DIRECTION_UNKNOWN;
const WheelDirection WheelDirection_MAX = DIRECTION_BACKWARD;
const int WheelDirection_ARRAYSIZE = WheelDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* WheelDirection_descriptor();
inline const ::std::string& WheelDirection_Name(WheelDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    WheelDirection_descriptor(), value);
}
inline bool WheelDirection_Parse(
    const ::std::string& name, WheelDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WheelDirection>(
    WheelDirection_descriptor(), name, value);
}
enum CurrentGear {
  UNKNOWN_GEAR = 0,
  FORWARD_GEAR = 1,
  REVERSE_GEAR = 2,
  NEUTRAL_GEAR = 3,
  CurrentGear_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CurrentGear_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CurrentGear_IsValid(int value);
const CurrentGear CurrentGear_MIN = UNKNOWN_GEAR;
const CurrentGear CurrentGear_MAX = NEUTRAL_GEAR;
const int CurrentGear_ARRAYSIZE = CurrentGear_MAX + 1;

const ::google::protobuf::EnumDescriptor* CurrentGear_descriptor();
inline const ::std::string& CurrentGear_Name(CurrentGear value) {
  return ::google::protobuf::internal::NameOfEnum(
    CurrentGear_descriptor(), value);
}
inline bool CurrentGear_Parse(
    const ::std::string& name, CurrentGear* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CurrentGear>(
    CurrentGear_descriptor(), name, value);
}
enum FrontFogLampStatus {
  STATUS_UNKNOWN = 0,
  STATUS_NORMAL = 1,
  STATUS_DAMAGE = 2,
  FrontFogLampStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FrontFogLampStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FrontFogLampStatus_IsValid(int value);
const FrontFogLampStatus FrontFogLampStatus_MIN = STATUS_UNKNOWN;
const FrontFogLampStatus FrontFogLampStatus_MAX = STATUS_DAMAGE;
const int FrontFogLampStatus_ARRAYSIZE = FrontFogLampStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* FrontFogLampStatus_descriptor();
inline const ::std::string& FrontFogLampStatus_Name(FrontFogLampStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    FrontFogLampStatus_descriptor(), value);
}
inline bool FrontFogLampStatus_Parse(
    const ::std::string& name, FrontFogLampStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FrontFogLampStatus>(
    FrontFogLampStatus_descriptor(), name, value);
}
// ===================================================================

class MsgHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vehicle_info.proto_msg.MsgHeader) */ {
 public:
  MsgHeader();
  virtual ~MsgHeader();

  MsgHeader(const MsgHeader& from);

  inline MsgHeader& operator=(const MsgHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgHeader(MsgHeader&& from) noexcept
    : MsgHeader() {
    *this = ::std::move(from);
  }

  inline MsgHeader& operator=(MsgHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgHeader* internal_default_instance() {
    return reinterpret_cast<const MsgHeader*>(
               &_MsgHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MsgHeader* other);
  friend void swap(MsgHeader& a, MsgHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  MsgHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MsgHeader& from);
  void MergeFrom(const MsgHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MsgHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double msgTimestamps = 1;
  void clear_msgtimestamps();
  static const int kMsgTimestampsFieldNumber = 1;
  double msgtimestamps() const;
  void set_msgtimestamps(double value);

  // uint32 msgVersion = 2;
  void clear_msgversion();
  static const int kMsgVersionFieldNumber = 2;
  ::google::protobuf::uint32 msgversion() const;
  void set_msgversion(::google::protobuf::uint32 value);

  // uint32 msgFrameId = 3;
  void clear_msgframeid();
  static const int kMsgFrameIdFieldNumber = 3;
  ::google::protobuf::uint32 msgframeid() const;
  void set_msgframeid(::google::protobuf::uint32 value);

  // uint32 msgTotalCnt = 4;
  void clear_msgtotalcnt();
  static const int kMsgTotalCntFieldNumber = 4;
  ::google::protobuf::uint32 msgtotalcnt() const;
  void set_msgtotalcnt(::google::protobuf::uint32 value);

  // uint32 msgLocalCnt = 5;
  void clear_msglocalcnt();
  static const int kMsgLocalCntFieldNumber = 5;
  ::google::protobuf::uint32 msglocalcnt() const;
  void set_msglocalcnt(::google::protobuf::uint32 value);

  // uint32 msgLocalLen = 6;
  void clear_msglocallen();
  static const int kMsgLocalLenFieldNumber = 6;
  ::google::protobuf::uint32 msglocallen() const;
  void set_msglocallen(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:vehicle_info.proto_msg.MsgHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double msgtimestamps_;
  ::google::protobuf::uint32 msgversion_;
  ::google::protobuf::uint32 msgframeid_;
  ::google::protobuf::uint32 msgtotalcnt_;
  ::google::protobuf::uint32 msglocalcnt_;
  ::google::protobuf::uint32 msglocallen_;
  mutable int _cached_size_;
  friend struct ::protobuf_vehicle_5finfo_2eproto::TableStruct;
  friend void ::protobuf_vehicle_5finfo_2eproto::InitDefaultsMsgHeaderImpl();
};
// -------------------------------------------------------------------

class ControlCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vehicle_info.proto_msg.ControlCommand) */ {
 public:
  ControlCommand();
  virtual ~ControlCommand();

  ControlCommand(const ControlCommand& from);

  inline ControlCommand& operator=(const ControlCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControlCommand(ControlCommand&& from) noexcept
    : ControlCommand() {
    *this = ::std::move(from);
  }

  inline ControlCommand& operator=(ControlCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlCommand* internal_default_instance() {
    return reinterpret_cast<const ControlCommand*>(
               &_ControlCommand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ControlCommand* other);
  friend void swap(ControlCommand& a, ControlCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlCommand* New() const PROTOBUF_FINAL { return New(NULL); }

  ControlCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ControlCommand& from);
  void MergeFrom(const ControlCommand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ControlCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float AccRq = 1;
  void clear_accrq();
  static const int kAccRqFieldNumber = 1;
  float accrq() const;
  void set_accrq(float value);

  // float SteerAngleRq = 2;
  void clear_steeranglerq();
  static const int kSteerAngleRqFieldNumber = 2;
  float steeranglerq() const;
  void set_steeranglerq(float value);

  // float SteerAngleSpdRq = 3;
  void clear_steeranglespdrq();
  static const int kSteerAngleSpdRqFieldNumber = 3;
  float steeranglespdrq() const;
  void set_steeranglespdrq(float value);

  // uint32 LightLeftRq = 4;
  void clear_lightleftrq();
  static const int kLightLeftRqFieldNumber = 4;
  ::google::protobuf::uint32 lightleftrq() const;
  void set_lightleftrq(::google::protobuf::uint32 value);

  // uint32 LightRightRq = 5;
  void clear_lightrightrq();
  static const int kLightRightRqFieldNumber = 5;
  ::google::protobuf::uint32 lightrightrq() const;
  void set_lightrightrq(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:vehicle_info.proto_msg.ControlCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float accrq_;
  float steeranglerq_;
  float steeranglespdrq_;
  ::google::protobuf::uint32 lightleftrq_;
  ::google::protobuf::uint32 lightrightrq_;
  mutable int _cached_size_;
  friend struct ::protobuf_vehicle_5finfo_2eproto::TableStruct;
  friend void ::protobuf_vehicle_5finfo_2eproto::InitDefaultsControlCommandImpl();
};
// -------------------------------------------------------------------

class VehicleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vehicle_info.proto_msg.VehicleInfo) */ {
 public:
  VehicleInfo();
  virtual ~VehicleInfo();

  VehicleInfo(const VehicleInfo& from);

  inline VehicleInfo& operator=(const VehicleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleInfo(VehicleInfo&& from) noexcept
    : VehicleInfo() {
    *this = ::std::move(from);
  }

  inline VehicleInfo& operator=(VehicleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleInfo* internal_default_instance() {
    return reinterpret_cast<const VehicleInfo*>(
               &_VehicleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(VehicleInfo* other);
  friend void swap(VehicleInfo& a, VehicleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  VehicleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VehicleInfo& from);
  void MergeFrom(const VehicleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VehicleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .vehicle_info.proto_msg.MsgHeader msgheader = 1;
  bool has_msgheader() const;
  void clear_msgheader();
  static const int kMsgheaderFieldNumber = 1;
  const ::vehicle_info::proto_msg::MsgHeader& msgheader() const;
  ::vehicle_info::proto_msg::MsgHeader* release_msgheader();
  ::vehicle_info::proto_msg::MsgHeader* mutable_msgheader();
  void set_allocated_msgheader(::vehicle_info::proto_msg::MsgHeader* msgheader);

  // .vehicle_info.proto_msg.ControlCommand ControlCmd = 31;
  bool has_controlcmd() const;
  void clear_controlcmd();
  static const int kControlCmdFieldNumber = 31;
  const ::vehicle_info::proto_msg::ControlCommand& controlcmd() const;
  ::vehicle_info::proto_msg::ControlCommand* release_controlcmd();
  ::vehicle_info::proto_msg::ControlCommand* mutable_controlcmd();
  void set_allocated_controlcmd(::vehicle_info::proto_msg::ControlCommand* controlcmd);

  // double VehSpd = 2;
  void clear_vehspd();
  static const int kVehSpdFieldNumber = 2;
  double vehspd() const;
  void set_vehspd(double value);

  // .vehicle_info.proto_msg.WheelDirection FLWheelDriveDirection = 3;
  void clear_flwheeldrivedirection();
  static const int kFLWheelDriveDirectionFieldNumber = 3;
  ::vehicle_info::proto_msg::WheelDirection flwheeldrivedirection() const;
  void set_flwheeldrivedirection(::vehicle_info::proto_msg::WheelDirection value);

  // .vehicle_info.proto_msg.WheelDirection FRWheelDriveDirection = 4;
  void clear_frwheeldrivedirection();
  static const int kFRWheelDriveDirectionFieldNumber = 4;
  ::vehicle_info::proto_msg::WheelDirection frwheeldrivedirection() const;
  void set_frwheeldrivedirection(::vehicle_info::proto_msg::WheelDirection value);

  // .vehicle_info.proto_msg.WheelDirection RLWheelDriveDirection = 5;
  void clear_rlwheeldrivedirection();
  static const int kRLWheelDriveDirectionFieldNumber = 5;
  ::vehicle_info::proto_msg::WheelDirection rlwheeldrivedirection() const;
  void set_rlwheeldrivedirection(::vehicle_info::proto_msg::WheelDirection value);

  // .vehicle_info.proto_msg.WheelDirection RRWheelDriveDirection = 6;
  void clear_rrwheeldrivedirection();
  static const int kRRWheelDriveDirectionFieldNumber = 6;
  ::vehicle_info::proto_msg::WheelDirection rrwheeldrivedirection() const;
  void set_rrwheeldrivedirection(::vehicle_info::proto_msg::WheelDirection value);

  // .vehicle_info.proto_msg.CurrentGear Current_Gear = 7;
  void clear_current_gear();
  static const int kCurrentGearFieldNumber = 7;
  ::vehicle_info::proto_msg::CurrentGear current_gear() const;
  void set_current_gear(::vehicle_info::proto_msg::CurrentGear value);

  // int32 LTurnLmpSts_R_Pbox = 8;
  void clear_lturnlmpsts_r_pbox();
  static const int kLTurnLmpStsRPboxFieldNumber = 8;
  ::google::protobuf::int32 lturnlmpsts_r_pbox() const;
  void set_lturnlmpsts_r_pbox(::google::protobuf::int32 value);

  // int32 RTurnLmpSts_R_Pbox = 9;
  void clear_rturnlmpsts_r_pbox();
  static const int kRTurnLmpStsRPboxFieldNumber = 9;
  ::google::protobuf::int32 rturnlmpsts_r_pbox() const;
  void set_rturnlmpsts_r_pbox(::google::protobuf::int32 value);

  // int32 FFogLmpSts_F_Pbox = 10;
  void clear_ffoglmpsts_f_pbox();
  static const int kFFogLmpStsFPboxFieldNumber = 10;
  ::google::protobuf::int32 ffoglmpsts_f_pbox() const;
  void set_ffoglmpsts_f_pbox(::google::protobuf::int32 value);

  // int32 FrntWiprSwtSts = 11;
  void clear_frntwiprswtsts();
  static const int kFrntWiprSwtStsFieldNumber = 11;
  ::google::protobuf::int32 frntwiprswtsts() const;
  void set_frntwiprswtsts(::google::protobuf::int32 value);

  // int32 WindshldWipreActvSts = 12;
  void clear_windshldwipreactvsts();
  static const int kWindshldWipreActvStsFieldNumber = 12;
  ::google::protobuf::int32 windshldwipreactvsts() const;
  void set_windshldwipreactvsts(::google::protobuf::int32 value);

  // int32 wipr_req = 13;
  void clear_wipr_req();
  static const int kWiprReqFieldNumber = 13;
  ::google::protobuf::int32 wipr_req() const;
  void set_wipr_req(::google::protobuf::int32 value);

  // int32 ABSActv = 14;
  void clear_absactv();
  static const int kABSActvFieldNumber = 14;
  ::google::protobuf::int32 absactv() const;
  void set_absactv(::google::protobuf::int32 value);

  // int32 ABSFailSts = 15;
  void clear_absfailsts();
  static const int kABSFailStsFieldNumber = 15;
  ::google::protobuf::int32 absfailsts() const;
  void set_absfailsts(::google::protobuf::int32 value);

  // int32 VDCActv = 16;
  void clear_vdcactv();
  static const int kVDCActvFieldNumber = 16;
  ::google::protobuf::int32 vdcactv() const;
  void set_vdcactv(::google::protobuf::int32 value);

  // float VehYawRate = 17;
  void clear_vehyawrate();
  static const int kVehYawRateFieldNumber = 17;
  float vehyawrate() const;
  void set_vehyawrate(float value);

  // float VehLatAccel = 18;
  void clear_vehlataccel();
  static const int kVehLatAccelFieldNumber = 18;
  float vehlataccel() const;
  void set_vehlataccel(float value);

  // double Steering_Angle = 20;
  void clear_steering_angle();
  static const int kSteeringAngleFieldNumber = 20;
  double steering_angle() const;
  void set_steering_angle(double value);

  // float VehLongAcc = 19;
  void clear_vehlongacc();
  static const int kVehLongAccFieldNumber = 19;
  float vehlongacc() const;
  void set_vehlongacc(float value);

  // int32 AutoLmpSwtSt = 21;
  void clear_autolmpswtst();
  static const int kAutoLmpSwtStFieldNumber = 21;
  ::google::protobuf::int32 autolmpswtst() const;
  void set_autolmpswtst(::google::protobuf::int32 value);

  // int32 HiBeamSwtSts = 22;
  void clear_hibeamswtsts();
  static const int kHiBeamSwtStsFieldNumber = 22;
  ::google::protobuf::int32 hibeamswtsts() const;
  void set_hibeamswtsts(::google::protobuf::int32 value);

  // int32 LowBeamSwtSt = 23;
  void clear_lowbeamswtst();
  static const int kLowBeamSwtStFieldNumber = 23;
  ::google::protobuf::int32 lowbeamswtst() const;
  void set_lowbeamswtst(::google::protobuf::int32 value);

  // .vehicle_info.proto_msg.FrontFogLampStatus FrntFogLamSwtSt = 24;
  void clear_frntfoglamswtst();
  static const int kFrntFogLamSwtStFieldNumber = 24;
  ::vehicle_info::proto_msg::FrontFogLampStatus frntfoglamswtst() const;
  void set_frntfoglamswtst(::vehicle_info::proto_msg::FrontFogLampStatus value);

  // float ActSteerAngleSpd = 25;
  void clear_actsteeranglespd();
  static const int kActSteerAngleSpdFieldNumber = 25;
  float actsteeranglespd() const;
  void set_actsteeranglespd(float value);

  // float ActAcc = 26;
  void clear_actacc();
  static const int kActAccFieldNumber = 26;
  float actacc() const;
  void set_actacc(float value);

  // float BrkPedal = 27;
  void clear_brkpedal();
  static const int kBrkPedalFieldNumber = 27;
  float brkpedal() const;
  void set_brkpedal(float value);

  // float AccPedal = 28;
  void clear_accpedal();
  static const int kAccPedalFieldNumber = 28;
  float accpedal() const;
  void set_accpedal(float value);

  // float Yaw = 29;
  void clear_yaw();
  static const int kYawFieldNumber = 29;
  float yaw() const;
  void set_yaw(float value);

  // uint32 ActDrvMode = 30;
  void clear_actdrvmode();
  static const int kActDrvModeFieldNumber = 30;
  ::google::protobuf::uint32 actdrvmode() const;
  void set_actdrvmode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:vehicle_info.proto_msg.VehicleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::vehicle_info::proto_msg::MsgHeader* msgheader_;
  ::vehicle_info::proto_msg::ControlCommand* controlcmd_;
  double vehspd_;
  int flwheeldrivedirection_;
  int frwheeldrivedirection_;
  int rlwheeldrivedirection_;
  int rrwheeldrivedirection_;
  int current_gear_;
  ::google::protobuf::int32 lturnlmpsts_r_pbox_;
  ::google::protobuf::int32 rturnlmpsts_r_pbox_;
  ::google::protobuf::int32 ffoglmpsts_f_pbox_;
  ::google::protobuf::int32 frntwiprswtsts_;
  ::google::protobuf::int32 windshldwipreactvsts_;
  ::google::protobuf::int32 wipr_req_;
  ::google::protobuf::int32 absactv_;
  ::google::protobuf::int32 absfailsts_;
  ::google::protobuf::int32 vdcactv_;
  float vehyawrate_;
  float vehlataccel_;
  double steering_angle_;
  float vehlongacc_;
  ::google::protobuf::int32 autolmpswtst_;
  ::google::protobuf::int32 hibeamswtsts_;
  ::google::protobuf::int32 lowbeamswtst_;
  int frntfoglamswtst_;
  float actsteeranglespd_;
  float actacc_;
  float brkpedal_;
  float accpedal_;
  float yaw_;
  ::google::protobuf::uint32 actdrvmode_;
  mutable int _cached_size_;
  friend struct ::protobuf_vehicle_5finfo_2eproto::TableStruct;
  friend void ::protobuf_vehicle_5finfo_2eproto::InitDefaultsVehicleInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgHeader

// double msgTimestamps = 1;
inline void MsgHeader::clear_msgtimestamps() {
  msgtimestamps_ = 0;
}
inline double MsgHeader::msgtimestamps() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.MsgHeader.msgTimestamps)
  return msgtimestamps_;
}
inline void MsgHeader::set_msgtimestamps(double value) {
  
  msgtimestamps_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.MsgHeader.msgTimestamps)
}

// uint32 msgVersion = 2;
inline void MsgHeader::clear_msgversion() {
  msgversion_ = 0u;
}
inline ::google::protobuf::uint32 MsgHeader::msgversion() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.MsgHeader.msgVersion)
  return msgversion_;
}
inline void MsgHeader::set_msgversion(::google::protobuf::uint32 value) {
  
  msgversion_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.MsgHeader.msgVersion)
}

// uint32 msgFrameId = 3;
inline void MsgHeader::clear_msgframeid() {
  msgframeid_ = 0u;
}
inline ::google::protobuf::uint32 MsgHeader::msgframeid() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.MsgHeader.msgFrameId)
  return msgframeid_;
}
inline void MsgHeader::set_msgframeid(::google::protobuf::uint32 value) {
  
  msgframeid_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.MsgHeader.msgFrameId)
}

// uint32 msgTotalCnt = 4;
inline void MsgHeader::clear_msgtotalcnt() {
  msgtotalcnt_ = 0u;
}
inline ::google::protobuf::uint32 MsgHeader::msgtotalcnt() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.MsgHeader.msgTotalCnt)
  return msgtotalcnt_;
}
inline void MsgHeader::set_msgtotalcnt(::google::protobuf::uint32 value) {
  
  msgtotalcnt_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.MsgHeader.msgTotalCnt)
}

// uint32 msgLocalCnt = 5;
inline void MsgHeader::clear_msglocalcnt() {
  msglocalcnt_ = 0u;
}
inline ::google::protobuf::uint32 MsgHeader::msglocalcnt() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.MsgHeader.msgLocalCnt)
  return msglocalcnt_;
}
inline void MsgHeader::set_msglocalcnt(::google::protobuf::uint32 value) {
  
  msglocalcnt_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.MsgHeader.msgLocalCnt)
}

// uint32 msgLocalLen = 6;
inline void MsgHeader::clear_msglocallen() {
  msglocallen_ = 0u;
}
inline ::google::protobuf::uint32 MsgHeader::msglocallen() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.MsgHeader.msgLocalLen)
  return msglocallen_;
}
inline void MsgHeader::set_msglocallen(::google::protobuf::uint32 value) {
  
  msglocallen_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.MsgHeader.msgLocalLen)
}

// -------------------------------------------------------------------

// ControlCommand

// float AccRq = 1;
inline void ControlCommand::clear_accrq() {
  accrq_ = 0;
}
inline float ControlCommand::accrq() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.ControlCommand.AccRq)
  return accrq_;
}
inline void ControlCommand::set_accrq(float value) {
  
  accrq_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.ControlCommand.AccRq)
}

// float SteerAngleRq = 2;
inline void ControlCommand::clear_steeranglerq() {
  steeranglerq_ = 0;
}
inline float ControlCommand::steeranglerq() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.ControlCommand.SteerAngleRq)
  return steeranglerq_;
}
inline void ControlCommand::set_steeranglerq(float value) {
  
  steeranglerq_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.ControlCommand.SteerAngleRq)
}

// float SteerAngleSpdRq = 3;
inline void ControlCommand::clear_steeranglespdrq() {
  steeranglespdrq_ = 0;
}
inline float ControlCommand::steeranglespdrq() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.ControlCommand.SteerAngleSpdRq)
  return steeranglespdrq_;
}
inline void ControlCommand::set_steeranglespdrq(float value) {
  
  steeranglespdrq_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.ControlCommand.SteerAngleSpdRq)
}

// uint32 LightLeftRq = 4;
inline void ControlCommand::clear_lightleftrq() {
  lightleftrq_ = 0u;
}
inline ::google::protobuf::uint32 ControlCommand::lightleftrq() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.ControlCommand.LightLeftRq)
  return lightleftrq_;
}
inline void ControlCommand::set_lightleftrq(::google::protobuf::uint32 value) {
  
  lightleftrq_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.ControlCommand.LightLeftRq)
}

// uint32 LightRightRq = 5;
inline void ControlCommand::clear_lightrightrq() {
  lightrightrq_ = 0u;
}
inline ::google::protobuf::uint32 ControlCommand::lightrightrq() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.ControlCommand.LightRightRq)
  return lightrightrq_;
}
inline void ControlCommand::set_lightrightrq(::google::protobuf::uint32 value) {
  
  lightrightrq_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.ControlCommand.LightRightRq)
}

// -------------------------------------------------------------------

// VehicleInfo

// .vehicle_info.proto_msg.MsgHeader msgheader = 1;
inline bool VehicleInfo::has_msgheader() const {
  return this != internal_default_instance() && msgheader_ != NULL;
}
inline void VehicleInfo::clear_msgheader() {
  if (GetArenaNoVirtual() == NULL && msgheader_ != NULL) {
    delete msgheader_;
  }
  msgheader_ = NULL;
}
inline const ::vehicle_info::proto_msg::MsgHeader& VehicleInfo::msgheader() const {
  const ::vehicle_info::proto_msg::MsgHeader* p = msgheader_;
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.msgheader)
  return p != NULL ? *p : *reinterpret_cast<const ::vehicle_info::proto_msg::MsgHeader*>(
      &::vehicle_info::proto_msg::_MsgHeader_default_instance_);
}
inline ::vehicle_info::proto_msg::MsgHeader* VehicleInfo::release_msgheader() {
  // @@protoc_insertion_point(field_release:vehicle_info.proto_msg.VehicleInfo.msgheader)
  
  ::vehicle_info::proto_msg::MsgHeader* temp = msgheader_;
  msgheader_ = NULL;
  return temp;
}
inline ::vehicle_info::proto_msg::MsgHeader* VehicleInfo::mutable_msgheader() {
  
  if (msgheader_ == NULL) {
    msgheader_ = new ::vehicle_info::proto_msg::MsgHeader;
  }
  // @@protoc_insertion_point(field_mutable:vehicle_info.proto_msg.VehicleInfo.msgheader)
  return msgheader_;
}
inline void VehicleInfo::set_allocated_msgheader(::vehicle_info::proto_msg::MsgHeader* msgheader) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete msgheader_;
  }
  if (msgheader) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msgheader = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msgheader, submessage_arena);
    }
    
  } else {
    
  }
  msgheader_ = msgheader;
  // @@protoc_insertion_point(field_set_allocated:vehicle_info.proto_msg.VehicleInfo.msgheader)
}

// double VehSpd = 2;
inline void VehicleInfo::clear_vehspd() {
  vehspd_ = 0;
}
inline double VehicleInfo::vehspd() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.VehSpd)
  return vehspd_;
}
inline void VehicleInfo::set_vehspd(double value) {
  
  vehspd_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.VehSpd)
}

// .vehicle_info.proto_msg.WheelDirection FLWheelDriveDirection = 3;
inline void VehicleInfo::clear_flwheeldrivedirection() {
  flwheeldrivedirection_ = 0;
}
inline ::vehicle_info::proto_msg::WheelDirection VehicleInfo::flwheeldrivedirection() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.FLWheelDriveDirection)
  return static_cast< ::vehicle_info::proto_msg::WheelDirection >(flwheeldrivedirection_);
}
inline void VehicleInfo::set_flwheeldrivedirection(::vehicle_info::proto_msg::WheelDirection value) {
  
  flwheeldrivedirection_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.FLWheelDriveDirection)
}

// .vehicle_info.proto_msg.WheelDirection FRWheelDriveDirection = 4;
inline void VehicleInfo::clear_frwheeldrivedirection() {
  frwheeldrivedirection_ = 0;
}
inline ::vehicle_info::proto_msg::WheelDirection VehicleInfo::frwheeldrivedirection() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.FRWheelDriveDirection)
  return static_cast< ::vehicle_info::proto_msg::WheelDirection >(frwheeldrivedirection_);
}
inline void VehicleInfo::set_frwheeldrivedirection(::vehicle_info::proto_msg::WheelDirection value) {
  
  frwheeldrivedirection_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.FRWheelDriveDirection)
}

// .vehicle_info.proto_msg.WheelDirection RLWheelDriveDirection = 5;
inline void VehicleInfo::clear_rlwheeldrivedirection() {
  rlwheeldrivedirection_ = 0;
}
inline ::vehicle_info::proto_msg::WheelDirection VehicleInfo::rlwheeldrivedirection() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.RLWheelDriveDirection)
  return static_cast< ::vehicle_info::proto_msg::WheelDirection >(rlwheeldrivedirection_);
}
inline void VehicleInfo::set_rlwheeldrivedirection(::vehicle_info::proto_msg::WheelDirection value) {
  
  rlwheeldrivedirection_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.RLWheelDriveDirection)
}

// .vehicle_info.proto_msg.WheelDirection RRWheelDriveDirection = 6;
inline void VehicleInfo::clear_rrwheeldrivedirection() {
  rrwheeldrivedirection_ = 0;
}
inline ::vehicle_info::proto_msg::WheelDirection VehicleInfo::rrwheeldrivedirection() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.RRWheelDriveDirection)
  return static_cast< ::vehicle_info::proto_msg::WheelDirection >(rrwheeldrivedirection_);
}
inline void VehicleInfo::set_rrwheeldrivedirection(::vehicle_info::proto_msg::WheelDirection value) {
  
  rrwheeldrivedirection_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.RRWheelDriveDirection)
}

// .vehicle_info.proto_msg.CurrentGear Current_Gear = 7;
inline void VehicleInfo::clear_current_gear() {
  current_gear_ = 0;
}
inline ::vehicle_info::proto_msg::CurrentGear VehicleInfo::current_gear() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.Current_Gear)
  return static_cast< ::vehicle_info::proto_msg::CurrentGear >(current_gear_);
}
inline void VehicleInfo::set_current_gear(::vehicle_info::proto_msg::CurrentGear value) {
  
  current_gear_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.Current_Gear)
}

// int32 LTurnLmpSts_R_Pbox = 8;
inline void VehicleInfo::clear_lturnlmpsts_r_pbox() {
  lturnlmpsts_r_pbox_ = 0;
}
inline ::google::protobuf::int32 VehicleInfo::lturnlmpsts_r_pbox() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.LTurnLmpSts_R_Pbox)
  return lturnlmpsts_r_pbox_;
}
inline void VehicleInfo::set_lturnlmpsts_r_pbox(::google::protobuf::int32 value) {
  
  lturnlmpsts_r_pbox_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.LTurnLmpSts_R_Pbox)
}

// int32 RTurnLmpSts_R_Pbox = 9;
inline void VehicleInfo::clear_rturnlmpsts_r_pbox() {
  rturnlmpsts_r_pbox_ = 0;
}
inline ::google::protobuf::int32 VehicleInfo::rturnlmpsts_r_pbox() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.RTurnLmpSts_R_Pbox)
  return rturnlmpsts_r_pbox_;
}
inline void VehicleInfo::set_rturnlmpsts_r_pbox(::google::protobuf::int32 value) {
  
  rturnlmpsts_r_pbox_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.RTurnLmpSts_R_Pbox)
}

// int32 FFogLmpSts_F_Pbox = 10;
inline void VehicleInfo::clear_ffoglmpsts_f_pbox() {
  ffoglmpsts_f_pbox_ = 0;
}
inline ::google::protobuf::int32 VehicleInfo::ffoglmpsts_f_pbox() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.FFogLmpSts_F_Pbox)
  return ffoglmpsts_f_pbox_;
}
inline void VehicleInfo::set_ffoglmpsts_f_pbox(::google::protobuf::int32 value) {
  
  ffoglmpsts_f_pbox_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.FFogLmpSts_F_Pbox)
}

// int32 FrntWiprSwtSts = 11;
inline void VehicleInfo::clear_frntwiprswtsts() {
  frntwiprswtsts_ = 0;
}
inline ::google::protobuf::int32 VehicleInfo::frntwiprswtsts() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.FrntWiprSwtSts)
  return frntwiprswtsts_;
}
inline void VehicleInfo::set_frntwiprswtsts(::google::protobuf::int32 value) {
  
  frntwiprswtsts_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.FrntWiprSwtSts)
}

// int32 WindshldWipreActvSts = 12;
inline void VehicleInfo::clear_windshldwipreactvsts() {
  windshldwipreactvsts_ = 0;
}
inline ::google::protobuf::int32 VehicleInfo::windshldwipreactvsts() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.WindshldWipreActvSts)
  return windshldwipreactvsts_;
}
inline void VehicleInfo::set_windshldwipreactvsts(::google::protobuf::int32 value) {
  
  windshldwipreactvsts_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.WindshldWipreActvSts)
}

// int32 wipr_req = 13;
inline void VehicleInfo::clear_wipr_req() {
  wipr_req_ = 0;
}
inline ::google::protobuf::int32 VehicleInfo::wipr_req() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.wipr_req)
  return wipr_req_;
}
inline void VehicleInfo::set_wipr_req(::google::protobuf::int32 value) {
  
  wipr_req_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.wipr_req)
}

// int32 ABSActv = 14;
inline void VehicleInfo::clear_absactv() {
  absactv_ = 0;
}
inline ::google::protobuf::int32 VehicleInfo::absactv() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.ABSActv)
  return absactv_;
}
inline void VehicleInfo::set_absactv(::google::protobuf::int32 value) {
  
  absactv_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.ABSActv)
}

// int32 ABSFailSts = 15;
inline void VehicleInfo::clear_absfailsts() {
  absfailsts_ = 0;
}
inline ::google::protobuf::int32 VehicleInfo::absfailsts() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.ABSFailSts)
  return absfailsts_;
}
inline void VehicleInfo::set_absfailsts(::google::protobuf::int32 value) {
  
  absfailsts_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.ABSFailSts)
}

// int32 VDCActv = 16;
inline void VehicleInfo::clear_vdcactv() {
  vdcactv_ = 0;
}
inline ::google::protobuf::int32 VehicleInfo::vdcactv() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.VDCActv)
  return vdcactv_;
}
inline void VehicleInfo::set_vdcactv(::google::protobuf::int32 value) {
  
  vdcactv_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.VDCActv)
}

// float VehYawRate = 17;
inline void VehicleInfo::clear_vehyawrate() {
  vehyawrate_ = 0;
}
inline float VehicleInfo::vehyawrate() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.VehYawRate)
  return vehyawrate_;
}
inline void VehicleInfo::set_vehyawrate(float value) {
  
  vehyawrate_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.VehYawRate)
}

// float VehLatAccel = 18;
inline void VehicleInfo::clear_vehlataccel() {
  vehlataccel_ = 0;
}
inline float VehicleInfo::vehlataccel() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.VehLatAccel)
  return vehlataccel_;
}
inline void VehicleInfo::set_vehlataccel(float value) {
  
  vehlataccel_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.VehLatAccel)
}

// float VehLongAcc = 19;
inline void VehicleInfo::clear_vehlongacc() {
  vehlongacc_ = 0;
}
inline float VehicleInfo::vehlongacc() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.VehLongAcc)
  return vehlongacc_;
}
inline void VehicleInfo::set_vehlongacc(float value) {
  
  vehlongacc_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.VehLongAcc)
}

// double Steering_Angle = 20;
inline void VehicleInfo::clear_steering_angle() {
  steering_angle_ = 0;
}
inline double VehicleInfo::steering_angle() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.Steering_Angle)
  return steering_angle_;
}
inline void VehicleInfo::set_steering_angle(double value) {
  
  steering_angle_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.Steering_Angle)
}

// int32 AutoLmpSwtSt = 21;
inline void VehicleInfo::clear_autolmpswtst() {
  autolmpswtst_ = 0;
}
inline ::google::protobuf::int32 VehicleInfo::autolmpswtst() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.AutoLmpSwtSt)
  return autolmpswtst_;
}
inline void VehicleInfo::set_autolmpswtst(::google::protobuf::int32 value) {
  
  autolmpswtst_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.AutoLmpSwtSt)
}

// int32 HiBeamSwtSts = 22;
inline void VehicleInfo::clear_hibeamswtsts() {
  hibeamswtsts_ = 0;
}
inline ::google::protobuf::int32 VehicleInfo::hibeamswtsts() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.HiBeamSwtSts)
  return hibeamswtsts_;
}
inline void VehicleInfo::set_hibeamswtsts(::google::protobuf::int32 value) {
  
  hibeamswtsts_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.HiBeamSwtSts)
}

// int32 LowBeamSwtSt = 23;
inline void VehicleInfo::clear_lowbeamswtst() {
  lowbeamswtst_ = 0;
}
inline ::google::protobuf::int32 VehicleInfo::lowbeamswtst() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.LowBeamSwtSt)
  return lowbeamswtst_;
}
inline void VehicleInfo::set_lowbeamswtst(::google::protobuf::int32 value) {
  
  lowbeamswtst_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.LowBeamSwtSt)
}

// .vehicle_info.proto_msg.FrontFogLampStatus FrntFogLamSwtSt = 24;
inline void VehicleInfo::clear_frntfoglamswtst() {
  frntfoglamswtst_ = 0;
}
inline ::vehicle_info::proto_msg::FrontFogLampStatus VehicleInfo::frntfoglamswtst() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.FrntFogLamSwtSt)
  return static_cast< ::vehicle_info::proto_msg::FrontFogLampStatus >(frntfoglamswtst_);
}
inline void VehicleInfo::set_frntfoglamswtst(::vehicle_info::proto_msg::FrontFogLampStatus value) {
  
  frntfoglamswtst_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.FrntFogLamSwtSt)
}

// float ActSteerAngleSpd = 25;
inline void VehicleInfo::clear_actsteeranglespd() {
  actsteeranglespd_ = 0;
}
inline float VehicleInfo::actsteeranglespd() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.ActSteerAngleSpd)
  return actsteeranglespd_;
}
inline void VehicleInfo::set_actsteeranglespd(float value) {
  
  actsteeranglespd_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.ActSteerAngleSpd)
}

// float ActAcc = 26;
inline void VehicleInfo::clear_actacc() {
  actacc_ = 0;
}
inline float VehicleInfo::actacc() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.ActAcc)
  return actacc_;
}
inline void VehicleInfo::set_actacc(float value) {
  
  actacc_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.ActAcc)
}

// float BrkPedal = 27;
inline void VehicleInfo::clear_brkpedal() {
  brkpedal_ = 0;
}
inline float VehicleInfo::brkpedal() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.BrkPedal)
  return brkpedal_;
}
inline void VehicleInfo::set_brkpedal(float value) {
  
  brkpedal_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.BrkPedal)
}

// float AccPedal = 28;
inline void VehicleInfo::clear_accpedal() {
  accpedal_ = 0;
}
inline float VehicleInfo::accpedal() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.AccPedal)
  return accpedal_;
}
inline void VehicleInfo::set_accpedal(float value) {
  
  accpedal_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.AccPedal)
}

// float Yaw = 29;
inline void VehicleInfo::clear_yaw() {
  yaw_ = 0;
}
inline float VehicleInfo::yaw() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.Yaw)
  return yaw_;
}
inline void VehicleInfo::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.Yaw)
}

// uint32 ActDrvMode = 30;
inline void VehicleInfo::clear_actdrvmode() {
  actdrvmode_ = 0u;
}
inline ::google::protobuf::uint32 VehicleInfo::actdrvmode() const {
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.ActDrvMode)
  return actdrvmode_;
}
inline void VehicleInfo::set_actdrvmode(::google::protobuf::uint32 value) {
  
  actdrvmode_ = value;
  // @@protoc_insertion_point(field_set:vehicle_info.proto_msg.VehicleInfo.ActDrvMode)
}

// .vehicle_info.proto_msg.ControlCommand ControlCmd = 31;
inline bool VehicleInfo::has_controlcmd() const {
  return this != internal_default_instance() && controlcmd_ != NULL;
}
inline void VehicleInfo::clear_controlcmd() {
  if (GetArenaNoVirtual() == NULL && controlcmd_ != NULL) {
    delete controlcmd_;
  }
  controlcmd_ = NULL;
}
inline const ::vehicle_info::proto_msg::ControlCommand& VehicleInfo::controlcmd() const {
  const ::vehicle_info::proto_msg::ControlCommand* p = controlcmd_;
  // @@protoc_insertion_point(field_get:vehicle_info.proto_msg.VehicleInfo.ControlCmd)
  return p != NULL ? *p : *reinterpret_cast<const ::vehicle_info::proto_msg::ControlCommand*>(
      &::vehicle_info::proto_msg::_ControlCommand_default_instance_);
}
inline ::vehicle_info::proto_msg::ControlCommand* VehicleInfo::release_controlcmd() {
  // @@protoc_insertion_point(field_release:vehicle_info.proto_msg.VehicleInfo.ControlCmd)
  
  ::vehicle_info::proto_msg::ControlCommand* temp = controlcmd_;
  controlcmd_ = NULL;
  return temp;
}
inline ::vehicle_info::proto_msg::ControlCommand* VehicleInfo::mutable_controlcmd() {
  
  if (controlcmd_ == NULL) {
    controlcmd_ = new ::vehicle_info::proto_msg::ControlCommand;
  }
  // @@protoc_insertion_point(field_mutable:vehicle_info.proto_msg.VehicleInfo.ControlCmd)
  return controlcmd_;
}
inline void VehicleInfo::set_allocated_controlcmd(::vehicle_info::proto_msg::ControlCommand* controlcmd) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete controlcmd_;
  }
  if (controlcmd) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      controlcmd = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, controlcmd, submessage_arena);
    }
    
  } else {
    
  }
  controlcmd_ = controlcmd;
  // @@protoc_insertion_point(field_set_allocated:vehicle_info.proto_msg.VehicleInfo.ControlCmd)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_msg
}  // namespace vehicle_info

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::vehicle_info::proto_msg::WheelDirection> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vehicle_info::proto_msg::WheelDirection>() {
  return ::vehicle_info::proto_msg::WheelDirection_descriptor();
}
template <> struct is_proto_enum< ::vehicle_info::proto_msg::CurrentGear> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vehicle_info::proto_msg::CurrentGear>() {
  return ::vehicle_info::proto_msg::CurrentGear_descriptor();
}
template <> struct is_proto_enum< ::vehicle_info::proto_msg::FrontFogLampStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vehicle_info::proto_msg::FrontFogLampStatus>() {
  return ::vehicle_info::proto_msg::FrontFogLampStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vehicle_5finfo_2eproto__INCLUDED
