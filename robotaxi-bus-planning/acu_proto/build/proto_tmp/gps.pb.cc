// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gps.proto

#include "gps.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace gps {
namespace proto {
class ImuDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Imu>
      _instance;
} _Imu_default_instance_;
class GpsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gps>
      _instance;
} _Gps_default_instance_;
}  // namespace proto
}  // namespace gps
namespace protobuf_gps_2eproto {
void InitDefaultsImuImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::gps::proto::_Imu_default_instance_;
    new (ptr) ::gps::proto::Imu();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gps::proto::Imu::InitAsDefaultInstance();
}

void InitDefaultsImu() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImuImpl);
}

void InitDefaultsGpsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_gps_2eproto::InitDefaultsImu();
  {
    void* ptr = &::gps::proto::_Gps_default_instance_;
    new (ptr) ::gps::proto::Gps();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gps::proto::Gps::InitAsDefaultInstance();
}

void InitDefaultsGps() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGpsImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Imu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Imu, accelerometer_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Imu, accelerometer_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Imu, accelerometer_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Imu, gyroscope_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Imu, gyroscope_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Imu, gyroscope_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Imu, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, hour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, minute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, second_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, millisecond_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, imu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, vh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, vu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, vn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, ve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, time_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps::proto::Gps, time_second_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gps::proto::Imu)},
  { 12, -1, sizeof(::gps::proto::Gps)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gps::proto::_Imu_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::gps::proto::_Gps_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "gps.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tgps.proto\022\tgps.proto\"\242\001\n\003Imu\022\027\n\017accele"
      "rometer_x\030\001 \001(\001\022\027\n\017accelerometer_y\030\002 \001(\001"
      "\022\027\n\017accelerometer_z\030\003 \001(\001\022\023\n\013gyroscope_x"
      "\030\004 \001(\001\022\023\n\013gyroscope_y\030\005 \001(\001\022\023\n\013gyroscope"
      "_z\030\006 \001(\001\022\021\n\ttimestamp\030\007 \001(\004\"\351\002\n\003Gps\022\020\n\010l"
      "atitude\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\022\016\n\006heig"
      "ht\030\003 \001(\001\022\014\n\004hour\030\006 \001(\003\022\016\n\006minute\030\007 \001(\003\022\016"
      "\n\006second\030\010 \001(\003\022\023\n\013millisecond\030\t \001(\003\022\013\n\003d"
      "ay\030\n \001(\003\022\r\n\005month\030\013 \001(\003\022\014\n\004year\030\014 \001(\003\022\033\n"
      "\003imu\030\022 \003(\0132\016.gps.proto.Imu\022\013\n\003yaw\030\023 \001(\001\022"
      "\r\n\005pitch\030\024 \001(\001\022\014\n\004roll\030\025 \001(\001\022\n\n\002vh\030\026 \001(\001"
      "\022\n\n\002vu\030\027 \001(\001\022\n\n\002vn\030\030 \001(\001\022\n\n\002ve\030\031 \001(\001\022\016\n\006"
      "status\030\032 \001(\005\022\021\n\ttimestamp\030\033 \001(\004\022\021\n\ttime_"
      "week\030\034 \001(\005\022\023\n\013time_second\030\035 \001(\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 559);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gps.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gps_2eproto
namespace gps {
namespace proto {

// ===================================================================

void Imu::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Imu::kAccelerometerXFieldNumber;
const int Imu::kAccelerometerYFieldNumber;
const int Imu::kAccelerometerZFieldNumber;
const int Imu::kGyroscopeXFieldNumber;
const int Imu::kGyroscopeYFieldNumber;
const int Imu::kGyroscopeZFieldNumber;
const int Imu::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Imu::Imu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gps_2eproto::InitDefaultsImu();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gps.proto.Imu)
}
Imu::Imu(const Imu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accelerometer_x_, &from.accelerometer_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&accelerometer_x_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:gps.proto.Imu)
}

void Imu::SharedCtor() {
  ::memset(&accelerometer_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&accelerometer_x_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

Imu::~Imu() {
  // @@protoc_insertion_point(destructor:gps.proto.Imu)
  SharedDtor();
}

void Imu::SharedDtor() {
}

void Imu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Imu::descriptor() {
  ::protobuf_gps_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gps_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Imu& Imu::default_instance() {
  ::protobuf_gps_2eproto::InitDefaultsImu();
  return *internal_default_instance();
}

Imu* Imu::New(::google::protobuf::Arena* arena) const {
  Imu* n = new Imu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Imu::Clear() {
// @@protoc_insertion_point(message_clear_start:gps.proto.Imu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&accelerometer_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&accelerometer_x_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

bool Imu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gps.proto.Imu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double accelerometer_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerometer_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double accelerometer_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerometer_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double accelerometer_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerometer_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gyroscope_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyroscope_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gyroscope_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyroscope_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gyroscope_z = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyroscope_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gps.proto.Imu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gps.proto.Imu)
  return false;
#undef DO_
}

void Imu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gps.proto.Imu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double accelerometer_x = 1;
  if (this->accelerometer_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->accelerometer_x(), output);
  }

  // double accelerometer_y = 2;
  if (this->accelerometer_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->accelerometer_y(), output);
  }

  // double accelerometer_z = 3;
  if (this->accelerometer_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->accelerometer_z(), output);
  }

  // double gyroscope_x = 4;
  if (this->gyroscope_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gyroscope_x(), output);
  }

  // double gyroscope_y = 5;
  if (this->gyroscope_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->gyroscope_y(), output);
  }

  // double gyroscope_z = 6;
  if (this->gyroscope_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->gyroscope_z(), output);
  }

  // uint64 timestamp = 7;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gps.proto.Imu)
}

::google::protobuf::uint8* Imu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gps.proto.Imu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double accelerometer_x = 1;
  if (this->accelerometer_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->accelerometer_x(), target);
  }

  // double accelerometer_y = 2;
  if (this->accelerometer_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->accelerometer_y(), target);
  }

  // double accelerometer_z = 3;
  if (this->accelerometer_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->accelerometer_z(), target);
  }

  // double gyroscope_x = 4;
  if (this->gyroscope_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gyroscope_x(), target);
  }

  // double gyroscope_y = 5;
  if (this->gyroscope_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->gyroscope_y(), target);
  }

  // double gyroscope_z = 6;
  if (this->gyroscope_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->gyroscope_z(), target);
  }

  // uint64 timestamp = 7;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gps.proto.Imu)
  return target;
}

size_t Imu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gps.proto.Imu)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double accelerometer_x = 1;
  if (this->accelerometer_x() != 0) {
    total_size += 1 + 8;
  }

  // double accelerometer_y = 2;
  if (this->accelerometer_y() != 0) {
    total_size += 1 + 8;
  }

  // double accelerometer_z = 3;
  if (this->accelerometer_z() != 0) {
    total_size += 1 + 8;
  }

  // double gyroscope_x = 4;
  if (this->gyroscope_x() != 0) {
    total_size += 1 + 8;
  }

  // double gyroscope_y = 5;
  if (this->gyroscope_y() != 0) {
    total_size += 1 + 8;
  }

  // double gyroscope_z = 6;
  if (this->gyroscope_z() != 0) {
    total_size += 1 + 8;
  }

  // uint64 timestamp = 7;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Imu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gps.proto.Imu)
  GOOGLE_DCHECK_NE(&from, this);
  const Imu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Imu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gps.proto.Imu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gps.proto.Imu)
    MergeFrom(*source);
  }
}

void Imu::MergeFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gps.proto.Imu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accelerometer_x() != 0) {
    set_accelerometer_x(from.accelerometer_x());
  }
  if (from.accelerometer_y() != 0) {
    set_accelerometer_y(from.accelerometer_y());
  }
  if (from.accelerometer_z() != 0) {
    set_accelerometer_z(from.accelerometer_z());
  }
  if (from.gyroscope_x() != 0) {
    set_gyroscope_x(from.gyroscope_x());
  }
  if (from.gyroscope_y() != 0) {
    set_gyroscope_y(from.gyroscope_y());
  }
  if (from.gyroscope_z() != 0) {
    set_gyroscope_z(from.gyroscope_z());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void Imu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gps.proto.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imu::CopyFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gps.proto.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imu::IsInitialized() const {
  return true;
}

void Imu::Swap(Imu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Imu::InternalSwap(Imu* other) {
  using std::swap;
  swap(accelerometer_x_, other->accelerometer_x_);
  swap(accelerometer_y_, other->accelerometer_y_);
  swap(accelerometer_z_, other->accelerometer_z_);
  swap(gyroscope_x_, other->gyroscope_x_);
  swap(gyroscope_y_, other->gyroscope_y_);
  swap(gyroscope_z_, other->gyroscope_z_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Imu::GetMetadata() const {
  protobuf_gps_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gps_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Gps::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gps::kLatitudeFieldNumber;
const int Gps::kLongitudeFieldNumber;
const int Gps::kHeightFieldNumber;
const int Gps::kHourFieldNumber;
const int Gps::kMinuteFieldNumber;
const int Gps::kSecondFieldNumber;
const int Gps::kMillisecondFieldNumber;
const int Gps::kDayFieldNumber;
const int Gps::kMonthFieldNumber;
const int Gps::kYearFieldNumber;
const int Gps::kImuFieldNumber;
const int Gps::kYawFieldNumber;
const int Gps::kPitchFieldNumber;
const int Gps::kRollFieldNumber;
const int Gps::kVhFieldNumber;
const int Gps::kVuFieldNumber;
const int Gps::kVnFieldNumber;
const int Gps::kVeFieldNumber;
const int Gps::kStatusFieldNumber;
const int Gps::kTimestampFieldNumber;
const int Gps::kTimeWeekFieldNumber;
const int Gps::kTimeSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gps::Gps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_gps_2eproto::InitDefaultsGps();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gps.proto.Gps)
}
Gps::Gps(const Gps& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      imu_(from.imu_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_second_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(time_second_));
  // @@protoc_insertion_point(copy_constructor:gps.proto.Gps)
}

void Gps::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_second_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(time_second_));
  _cached_size_ = 0;
}

Gps::~Gps() {
  // @@protoc_insertion_point(destructor:gps.proto.Gps)
  SharedDtor();
}

void Gps::SharedDtor() {
}

void Gps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gps::descriptor() {
  ::protobuf_gps_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gps_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gps& Gps::default_instance() {
  ::protobuf_gps_2eproto::InitDefaultsGps();
  return *internal_default_instance();
}

Gps* Gps::New(::google::protobuf::Arena* arena) const {
  Gps* n = new Gps;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gps::Clear() {
// @@protoc_insertion_point(message_clear_start:gps.proto.Gps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imu_.Clear();
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_second_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(time_second_));
  _internal_metadata_.Clear();
}

bool Gps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gps.proto.Gps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double latitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 hour = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 minute = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 second = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 millisecond = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &millisecond_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 day = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 month = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 year = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gps.proto.Imu imu = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_imu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pitch = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double roll = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vh = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vu = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vn = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ve = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ve_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 status = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time_week = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double time_second = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gps.proto.Gps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gps.proto.Gps)
  return false;
#undef DO_
}

void Gps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gps.proto.Gps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // double longitude = 2;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // double height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->height(), output);
  }

  // int64 hour = 6;
  if (this->hour() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->hour(), output);
  }

  // int64 minute = 7;
  if (this->minute() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->minute(), output);
  }

  // int64 second = 8;
  if (this->second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->second(), output);
  }

  // int64 millisecond = 9;
  if (this->millisecond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->millisecond(), output);
  }

  // int64 day = 10;
  if (this->day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->day(), output);
  }

  // int64 month = 11;
  if (this->month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->month(), output);
  }

  // int64 year = 12;
  if (this->year() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->year(), output);
  }

  // repeated .gps.proto.Imu imu = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->imu_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->imu(static_cast<int>(i)), output);
  }

  // double yaw = 19;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->yaw(), output);
  }

  // double pitch = 20;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->pitch(), output);
  }

  // double roll = 21;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->roll(), output);
  }

  // double vh = 22;
  if (this->vh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->vh(), output);
  }

  // double vu = 23;
  if (this->vu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->vu(), output);
  }

  // double vn = 24;
  if (this->vn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->vn(), output);
  }

  // double ve = 25;
  if (this->ve() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->ve(), output);
  }

  // int32 status = 26;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->status(), output);
  }

  // uint64 timestamp = 27;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->timestamp(), output);
  }

  // int32 time_week = 28;
  if (this->time_week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->time_week(), output);
  }

  // double time_second = 29;
  if (this->time_second() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->time_second(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:gps.proto.Gps)
}

::google::protobuf::uint8* Gps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gps.proto.Gps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // double longitude = 2;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // double height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->height(), target);
  }

  // int64 hour = 6;
  if (this->hour() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->hour(), target);
  }

  // int64 minute = 7;
  if (this->minute() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->minute(), target);
  }

  // int64 second = 8;
  if (this->second() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->second(), target);
  }

  // int64 millisecond = 9;
  if (this->millisecond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->millisecond(), target);
  }

  // int64 day = 10;
  if (this->day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->day(), target);
  }

  // int64 month = 11;
  if (this->month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->month(), target);
  }

  // int64 year = 12;
  if (this->year() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->year(), target);
  }

  // repeated .gps.proto.Imu imu = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->imu_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->imu(static_cast<int>(i)), deterministic, target);
  }

  // double yaw = 19;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->yaw(), target);
  }

  // double pitch = 20;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->pitch(), target);
  }

  // double roll = 21;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->roll(), target);
  }

  // double vh = 22;
  if (this->vh() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->vh(), target);
  }

  // double vu = 23;
  if (this->vu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->vu(), target);
  }

  // double vn = 24;
  if (this->vn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->vn(), target);
  }

  // double ve = 25;
  if (this->ve() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->ve(), target);
  }

  // int32 status = 26;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->status(), target);
  }

  // uint64 timestamp = 27;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(27, this->timestamp(), target);
  }

  // int32 time_week = 28;
  if (this->time_week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->time_week(), target);
  }

  // double time_second = 29;
  if (this->time_second() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->time_second(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gps.proto.Gps)
  return target;
}

size_t Gps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gps.proto.Gps)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .gps.proto.Imu imu = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->imu_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->imu(static_cast<int>(i)));
    }
  }

  // double latitude = 1;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 2;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  // double height = 3;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // int64 hour = 6;
  if (this->hour() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->hour());
  }

  // int64 minute = 7;
  if (this->minute() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->minute());
  }

  // int64 second = 8;
  if (this->second() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->second());
  }

  // int64 millisecond = 9;
  if (this->millisecond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->millisecond());
  }

  // int64 day = 10;
  if (this->day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->day());
  }

  // int64 month = 11;
  if (this->month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->month());
  }

  // int64 year = 12;
  if (this->year() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->year());
  }

  // double yaw = 19;
  if (this->yaw() != 0) {
    total_size += 2 + 8;
  }

  // double pitch = 20;
  if (this->pitch() != 0) {
    total_size += 2 + 8;
  }

  // double roll = 21;
  if (this->roll() != 0) {
    total_size += 2 + 8;
  }

  // double vh = 22;
  if (this->vh() != 0) {
    total_size += 2 + 8;
  }

  // double vu = 23;
  if (this->vu() != 0) {
    total_size += 2 + 8;
  }

  // double vn = 24;
  if (this->vn() != 0) {
    total_size += 2 + 8;
  }

  // double ve = 25;
  if (this->ve() != 0) {
    total_size += 2 + 8;
  }

  // uint64 timestamp = 27;
  if (this->timestamp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // int32 status = 26;
  if (this->status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // int32 time_week = 28;
  if (this->time_week() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time_week());
  }

  // double time_second = 29;
  if (this->time_second() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gps.proto.Gps)
  GOOGLE_DCHECK_NE(&from, this);
  const Gps* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gps.proto.Gps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gps.proto.Gps)
    MergeFrom(*source);
  }
}

void Gps::MergeFrom(const Gps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gps.proto.Gps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  imu_.MergeFrom(from.imu_);
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.hour() != 0) {
    set_hour(from.hour());
  }
  if (from.minute() != 0) {
    set_minute(from.minute());
  }
  if (from.second() != 0) {
    set_second(from.second());
  }
  if (from.millisecond() != 0) {
    set_millisecond(from.millisecond());
  }
  if (from.day() != 0) {
    set_day(from.day());
  }
  if (from.month() != 0) {
    set_month(from.month());
  }
  if (from.year() != 0) {
    set_year(from.year());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.vh() != 0) {
    set_vh(from.vh());
  }
  if (from.vu() != 0) {
    set_vu(from.vu());
  }
  if (from.vn() != 0) {
    set_vn(from.vn());
  }
  if (from.ve() != 0) {
    set_ve(from.ve());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.time_week() != 0) {
    set_time_week(from.time_week());
  }
  if (from.time_second() != 0) {
    set_time_second(from.time_second());
  }
}

void Gps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gps.proto.Gps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gps::CopyFrom(const Gps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gps.proto.Gps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gps::IsInitialized() const {
  return true;
}

void Gps::Swap(Gps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gps::InternalSwap(Gps* other) {
  using std::swap;
  imu_.InternalSwap(&other->imu_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(height_, other->height_);
  swap(hour_, other->hour_);
  swap(minute_, other->minute_);
  swap(second_, other->second_);
  swap(millisecond_, other->millisecond_);
  swap(day_, other->day_);
  swap(month_, other->month_);
  swap(year_, other->year_);
  swap(yaw_, other->yaw_);
  swap(pitch_, other->pitch_);
  swap(roll_, other->roll_);
  swap(vh_, other->vh_);
  swap(vu_, other->vu_);
  swap(vn_, other->vn_);
  swap(ve_, other->ve_);
  swap(timestamp_, other->timestamp_);
  swap(status_, other->status_);
  swap(time_week_, other->time_week_);
  swap(time_second_, other->time_second_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gps::GetMetadata() const {
  protobuf_gps_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gps_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace gps

// @@protoc_insertion_point(global_scope)
