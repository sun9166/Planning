// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_imu_msgs.proto

#include "sensor_imu_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace sensor_imu_msgs {
class LocalizationControlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocalizationControl>
      _instance;
} _LocalizationControl_default_instance_;
class SensorImuDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorImu>
      _instance;
} _SensorImu_default_instance_;
class IvsensorgpsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ivsensorgps>
      _instance;
} _Ivsensorgps_default_instance_;
class IvsensorimuDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ivsensorimu>
      _instance;
} _Ivsensorimu_default_instance_;
class IvwheelspeedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ivwheelspeed>
      _instance;
} _Ivwheelspeed_default_instance_;
class FilterstatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Filterstatus>
      _instance;
} _Filterstatus_default_instance_;
class IvlidarmatchingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ivlidarmatching>
      _instance;
} _Ivlidarmatching_default_instance_;
}  // namespace sensor_imu_msgs
namespace protobuf_sensor_5fimu_5fmsgs_2eproto {
void InitDefaultsLocalizationControlImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::sensor_imu_msgs::_LocalizationControl_default_instance_;
    new (ptr) ::sensor_imu_msgs::LocalizationControl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_imu_msgs::LocalizationControl::InitAsDefaultInstance();
}

void InitDefaultsLocalizationControl() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLocalizationControlImpl);
}

void InitDefaultsSensorImuImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_5fmsgs_2eproto::InitDefaultsHeader();
  protobuf_common_5fmsgs_2eproto::InitDefaultsLLH();
  protobuf_common_5fmsgs_2eproto::InitDefaultsPose();
  protobuf_common_5fmsgs_2eproto::InitDefaultsTwist();
  protobuf_common_5fmsgs_2eproto::InitDefaultsVector3();
  protobuf_common_5fmsgs_2eproto::InitDefaultsUnsureVar();
  protobuf_common_5fmsgs_2eproto::InitDefaultsNavStatus();
  protobuf_common_5fmsgs_2eproto::InitDefaultsDRPoseWithTime();
  protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsLocalizationControl();
  {
    void* ptr = &::sensor_imu_msgs::_SensorImu_default_instance_;
    new (ptr) ::sensor_imu_msgs::SensorImu();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_imu_msgs::SensorImu::InitAsDefaultInstance();
}

void InitDefaultsSensorImu() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSensorImuImpl);
}

void InitDefaultsIvsensorgpsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_5fmsgs_2eproto::InitDefaultsHeader();
  {
    void* ptr = &::sensor_imu_msgs::_Ivsensorgps_default_instance_;
    new (ptr) ::sensor_imu_msgs::Ivsensorgps();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_imu_msgs::Ivsensorgps::InitAsDefaultInstance();
}

void InitDefaultsIvsensorgps() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIvsensorgpsImpl);
}

void InitDefaultsIvsensorimuImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_5fmsgs_2eproto::InitDefaultsHeader();
  {
    void* ptr = &::sensor_imu_msgs::_Ivsensorimu_default_instance_;
    new (ptr) ::sensor_imu_msgs::Ivsensorimu();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_imu_msgs::Ivsensorimu::InitAsDefaultInstance();
}

void InitDefaultsIvsensorimu() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIvsensorimuImpl);
}

void InitDefaultsIvwheelspeedImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_5fmsgs_2eproto::InitDefaultsHeader();
  {
    void* ptr = &::sensor_imu_msgs::_Ivwheelspeed_default_instance_;
    new (ptr) ::sensor_imu_msgs::Ivwheelspeed();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_imu_msgs::Ivwheelspeed::InitAsDefaultInstance();
}

void InitDefaultsIvwheelspeed() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIvwheelspeedImpl);
}

void InitDefaultsFilterstatusImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::sensor_imu_msgs::_Filterstatus_default_instance_;
    new (ptr) ::sensor_imu_msgs::Filterstatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_imu_msgs::Filterstatus::InitAsDefaultInstance();
}

void InitDefaultsFilterstatus() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFilterstatusImpl);
}

void InitDefaultsIvlidarmatchingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_5fmsgs_2eproto::InitDefaultsHeader();
  {
    void* ptr = &::sensor_imu_msgs::_Ivlidarmatching_default_instance_;
    new (ptr) ::sensor_imu_msgs::Ivlidarmatching();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sensor_imu_msgs::Ivlidarmatching::InitAsDefaultInstance();
}

void InitDefaultsIvlidarmatching() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIvlidarmatchingImpl);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::LocalizationControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::LocalizationControl, is_lidar_open_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::SensorImu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::SensorImu, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::SensorImu, llh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::SensorImu, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::SensorImu, twist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::SensorImu, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::SensorImu, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::SensorImu, nav_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::SensorImu, dr_pose_and_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::SensorImu, localization_control_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, up_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, track_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, utctime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, hdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, diff_age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, base_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, heading_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, zg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, satenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, status_yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorgps, is_heading_valid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorimu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorimu, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorimu, update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorimu, time_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorimu, week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorimu, utc_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorimu, gyro_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorimu, gyro_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorimu, gyro_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorimu, acce_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorimu, acce_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorimu, acce_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivsensorimu, temperature_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivwheelspeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivwheelspeed, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivwheelspeed, update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivwheelspeed, week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivwheelspeed, utc_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivwheelspeed, wheelspeed_lr_pluse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivwheelspeed, wheelspeed_rr_pluse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivwheelspeed, pluse_mask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, frame_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, x_gyro_zero_bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, y_gyro_zero_bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, z_gyro_zero_bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, x_acce_zero_bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, y_acce_zero_bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, z_acce_zero_bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, heading_install_deviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, scale_factor_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, pitch_install_deviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, eastward_position_deviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, northward_position_deviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, sky_position_deviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, heading_deviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, gnss_eastward_position_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, gnss_northward_position_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, gnss_sky_position_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, gnss_eastward_speed_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, gnss_northward_speed_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, gnss_sky_speed_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, gnss_heading_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, odom_eastward_speed_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, odom_northward_speed_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, odom_sky_speed_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, laser_eastward_position_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, laser_northward_position_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, laser_sky_position_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, laser_heading_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, time_consuming_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, fusion_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Filterstatus, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, utctime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, fusion_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, init_once_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, is_degeneracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, is_localization_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, is_in_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, matching_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, lat_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, lon_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, height_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, yaw_std_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, gmm_scores_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sensor_imu_msgs::Ivlidarmatching, gmm_offsets_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sensor_imu_msgs::LocalizationControl)},
  { 6, -1, sizeof(::sensor_imu_msgs::SensorImu)},
  { 20, -1, sizeof(::sensor_imu_msgs::Ivsensorgps)},
  { 47, -1, sizeof(::sensor_imu_msgs::Ivsensorimu)},
  { 64, -1, sizeof(::sensor_imu_msgs::Ivwheelspeed)},
  { 76, -1, sizeof(::sensor_imu_msgs::Filterstatus)},
  { 113, -1, sizeof(::sensor_imu_msgs::Ivlidarmatching)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensor_imu_msgs::_LocalizationControl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensor_imu_msgs::_SensorImu_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensor_imu_msgs::_Ivsensorgps_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensor_imu_msgs::_Ivsensorimu_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensor_imu_msgs::_Ivwheelspeed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensor_imu_msgs::_Filterstatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sensor_imu_msgs::_Ivlidarmatching_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sensor_imu_msgs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025sensor_imu_msgs.proto\022\017sensor_imu_msgs"
      "\032\021common_msgs.proto\",\n\023LocalizationContr"
      "ol\022\025\n\ris_lidar_open\030\001 \001(\010\"\211\003\n\tSensorImu\022"
      "#\n\006header\030\001 \001(\0132\023.common_msgs.Header\022\035\n\003"
      "llh\030\002 \001(\0132\020.common_msgs.LLH\022\037\n\004pose\030\003 \001("
      "\0132\021.common_msgs.Pose\022!\n\005twist\030\004 \001(\0132\022.co"
      "mmon_msgs.Twist\022*\n\014acceleration\030\005 \001(\0132\024."
      "common_msgs.Vector3\022!\n\001v\030\006 \001(\0132\026.common_"
      "msgs.UnsureVar\022*\n\nnav_status\030\007 \001(\0132\026.com"
      "mon_msgs.NavStatus\0225\n\020dr_pose_and_time\030\010"
      " \001(\0132\033.common_msgs.DRPoseWithTime\022B\n\024loc"
      "alization_control\030\t \001(\0132$.sensor_imu_msg"
      "s.LocalizationControl\"\225\003\n\013Ivsensorgps\022#\n"
      "\006header\030\001 \001(\0132\023.common_msgs.Header\022\016\n\006up"
      "date\030\002 \001(\010\022\013\n\003lon\030\003 \001(\001\022\013\n\003lat\030\004 \001(\001\022\016\n\006"
      "height\030\005 \001(\001\022\017\n\007heading\030\006 \001(\001\022\020\n\010velocit"
      "y\030\007 \001(\001\022\023\n\013up_velocity\030\010 \001(\001\022\023\n\013track_an"
      "gle\030\t \001(\001\022\014\n\004week\030\n \001(\005\022\017\n\007utctime\030\013 \001(\001"
      "\022\014\n\004hdop\030\014 \001(\001\022\020\n\010diff_age\030\r \001(\001\022\023\n\013base"
      "_length\030\016 \001(\001\022\023\n\013heading_std\030\017 \001(\001\022\n\n\002xg"
      "\030\020 \001(\001\022\n\n\002yg\030\021 \001(\001\022\n\n\002zg\030\022 \001(\001\022\016\n\006status"
      "\030\023 \001(\r\022\017\n\007satenum\030\024 \001(\r\022\022\n\nstatus_yaw\030\025 "
      "\001(\r\022\030\n\020is_heading_valid\030\026 \001(\r\"\351\001\n\013Ivsens"
      "orimu\022#\n\006header\030\001 \001(\0132\023.common_msgs.Head"
      "er\022\016\n\006update\030\002 \001(\010\022\020\n\010time_tag\030\003 \001(\r\022\014\n\004"
      "week\030\004 \001(\005\022\020\n\010utc_time\030\005 \001(\001\022\016\n\006gyro_x\030\006"
      " \001(\001\022\016\n\006gyro_y\030\007 \001(\001\022\016\n\006gyro_z\030\010 \001(\001\022\016\n\006"
      "acce_x\030\t \001(\001\022\016\n\006acce_y\030\n \001(\001\022\016\n\006acce_z\030\013"
      " \001(\001\022\023\n\013temperature\030\014 \001(\001\"\261\001\n\014Ivwheelspe"
      "ed\022#\n\006header\030\001 \001(\0132\023.common_msgs.Header\022"
      "\016\n\006update\030\002 \001(\010\022\014\n\004week\030\003 \001(\005\022\020\n\010utc_tim"
      "e\030\004 \001(\001\022\033\n\023wheelspeed_lr_pluse\030\005 \001(\002\022\033\n\023"
      "wheelspeed_rr_pluse\030\006 \001(\002\022\022\n\npluse_mask\030"
      "\007 \001(\r\"\325\007\n\014Filterstatus\022\016\n\006update\030\001 \001(\010\022\023"
      "\n\013frame_count\030\002 \001(\005\022\030\n\020x_gyro_zero_bias\030"
      "\003 \001(\002\022\030\n\020y_gyro_zero_bias\030\004 \001(\002\022\030\n\020z_gyr"
      "o_zero_bias\030\005 \001(\002\022\030\n\020x_acce_zero_bias\030\006 "
      "\001(\002\022\030\n\020y_acce_zero_bias\030\007 \001(\002\022\030\n\020z_acce_"
      "zero_bias\030\010 \001(\002\022!\n\031heading_install_devia"
      "tion\030\t \001(\002\022\032\n\022scale_factor_error\030\n \001(\002\022\037"
      "\n\027pitch_install_deviation\030\013 \001(\002\022#\n\033eastw"
      "ard_position_deviation\030\014 \001(\002\022$\n\034northwar"
      "d_position_deviation\030\r \001(\002\022\036\n\026sky_positi"
      "on_deviation\030\016 \001(\002\022\031\n\021heading_deviation\030"
      "\017 \001(\002\022$\n\034gnss_eastward_position_count\030\020 "
      "\001(\005\022%\n\035gnss_northward_position_count\030\021 \001"
      "(\005\022\037\n\027gnss_sky_position_count\030\022 \001(\005\022!\n\031g"
      "nss_eastward_speed_count\030\023 \001(\005\022\"\n\032gnss_n"
      "orthward_speed_count\030\024 \001(\005\022\034\n\024gnss_sky_s"
      "peed_count\030\025 \001(\005\022\032\n\022gnss_heading_count\030\026"
      " \001(\005\022!\n\031odom_eastward_speed_count\030\027 \001(\005\022"
      "\"\n\032odom_northward_speed_count\030\030 \001(\005\022\034\n\024o"
      "dom_sky_speed_count\030\031 \001(\005\022%\n\035laser_eastw"
      "ard_position_count\030\032 \001(\005\022&\n\036laser_northw"
      "ard_position_count\030\033 \001(\005\022 \n\030laser_sky_po"
      "sition_count\030\034 \001(\005\022\033\n\023laser_heading_coun"
      "t\030\035 \001(\005\022\026\n\016time_consuming\030\036 \001(\005\022\024\n\014fusio"
      "n_model\030\037 \001(\r\022\016\n\006status\030  \001(\r\"\332\003\n\017Ivlida"
      "rmatching\022#\n\006header\030\001 \001(\0132\023.common_msgs."
      "Header\022\016\n\006update\030\002 \001(\010\022\014\n\004week\030\003 \001(\005\022\017\n\007"
      "utctime\030\004 \001(\001\022\014\n\004roll\030\005 \001(\001\022\r\n\005pitch\030\006 \001"
      "(\001\022\013\n\003yaw\030\007 \001(\001\022\013\n\003lat\030\010 \001(\001\022\013\n\003lon\030\t \001("
      "\001\022\016\n\006height\030\n \001(\001\022\n\n\002xg\030\013 \001(\001\022\n\n\002yg\030\014 \001("
      "\001\022\023\n\013fusion_type\030\r \001(\r\022\021\n\tinit_once\030\016 \001("
      "\005\022\025\n\ris_degeneracy\030\017 \001(\005\022\034\n\024is_localizat"
      "ion_area\030\020 \001(\r\022\021\n\tis_in_map\030\021 \001(\r\022\026\n\016mat"
      "ching_score\030\022 \001(\001\022\017\n\007lat_std\030\023 \001(\001\022\017\n\007lo"
      "n_std\030\024 \001(\001\022\022\n\nheight_std\030\025 \001(\001\022\017\n\007yaw_s"
      "td\030\026 \001(\001\022\017\n\007version\030\027 \001(\t\022\022\n\ngmm_scores\030"
      "\030 \003(\002\022\023\n\013gmm_offsets\030\031 \003(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2794);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensor_imu_msgs.proto", &protobuf_RegisterTypes);
  ::protobuf_common_5fmsgs_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_sensor_5fimu_5fmsgs_2eproto
namespace sensor_imu_msgs {

// ===================================================================

void LocalizationControl::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalizationControl::kIsLidarOpenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalizationControl::LocalizationControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsLocalizationControl();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_imu_msgs.LocalizationControl)
}
LocalizationControl::LocalizationControl(const LocalizationControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_lidar_open_ = from.is_lidar_open_;
  // @@protoc_insertion_point(copy_constructor:sensor_imu_msgs.LocalizationControl)
}

void LocalizationControl::SharedCtor() {
  is_lidar_open_ = false;
  _cached_size_ = 0;
}

LocalizationControl::~LocalizationControl() {
  // @@protoc_insertion_point(destructor:sensor_imu_msgs.LocalizationControl)
  SharedDtor();
}

void LocalizationControl::SharedDtor() {
}

void LocalizationControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalizationControl::descriptor() {
  ::protobuf_sensor_5fimu_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fimu_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocalizationControl& LocalizationControl::default_instance() {
  ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsLocalizationControl();
  return *internal_default_instance();
}

LocalizationControl* LocalizationControl::New(::google::protobuf::Arena* arena) const {
  LocalizationControl* n = new LocalizationControl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalizationControl::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_imu_msgs.LocalizationControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_lidar_open_ = false;
  _internal_metadata_.Clear();
}

bool LocalizationControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor_imu_msgs.LocalizationControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_lidar_open = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_lidar_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor_imu_msgs.LocalizationControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor_imu_msgs.LocalizationControl)
  return false;
#undef DO_
}

void LocalizationControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor_imu_msgs.LocalizationControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_lidar_open = 1;
  if (this->is_lidar_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_lidar_open(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensor_imu_msgs.LocalizationControl)
}

::google::protobuf::uint8* LocalizationControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensor_imu_msgs.LocalizationControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_lidar_open = 1;
  if (this->is_lidar_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_lidar_open(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_imu_msgs.LocalizationControl)
  return target;
}

size_t LocalizationControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_imu_msgs.LocalizationControl)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_lidar_open = 1;
  if (this->is_lidar_open() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_imu_msgs.LocalizationControl)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalizationControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalizationControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_imu_msgs.LocalizationControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_imu_msgs.LocalizationControl)
    MergeFrom(*source);
  }
}

void LocalizationControl::MergeFrom(const LocalizationControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_imu_msgs.LocalizationControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_lidar_open() != 0) {
    set_is_lidar_open(from.is_lidar_open());
  }
}

void LocalizationControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_imu_msgs.LocalizationControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationControl::CopyFrom(const LocalizationControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_imu_msgs.LocalizationControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationControl::IsInitialized() const {
  return true;
}

void LocalizationControl::Swap(LocalizationControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalizationControl::InternalSwap(LocalizationControl* other) {
  using std::swap;
  swap(is_lidar_open_, other->is_lidar_open_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalizationControl::GetMetadata() const {
  protobuf_sensor_5fimu_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fimu_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorImu::InitAsDefaultInstance() {
  ::sensor_imu_msgs::_SensorImu_default_instance_._instance.get_mutable()->header_ = const_cast< ::common_msgs::Header*>(
      ::common_msgs::Header::internal_default_instance());
  ::sensor_imu_msgs::_SensorImu_default_instance_._instance.get_mutable()->llh_ = const_cast< ::common_msgs::LLH*>(
      ::common_msgs::LLH::internal_default_instance());
  ::sensor_imu_msgs::_SensorImu_default_instance_._instance.get_mutable()->pose_ = const_cast< ::common_msgs::Pose*>(
      ::common_msgs::Pose::internal_default_instance());
  ::sensor_imu_msgs::_SensorImu_default_instance_._instance.get_mutable()->twist_ = const_cast< ::common_msgs::Twist*>(
      ::common_msgs::Twist::internal_default_instance());
  ::sensor_imu_msgs::_SensorImu_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::common_msgs::Vector3*>(
      ::common_msgs::Vector3::internal_default_instance());
  ::sensor_imu_msgs::_SensorImu_default_instance_._instance.get_mutable()->v_ = const_cast< ::common_msgs::UnsureVar*>(
      ::common_msgs::UnsureVar::internal_default_instance());
  ::sensor_imu_msgs::_SensorImu_default_instance_._instance.get_mutable()->nav_status_ = const_cast< ::common_msgs::NavStatus*>(
      ::common_msgs::NavStatus::internal_default_instance());
  ::sensor_imu_msgs::_SensorImu_default_instance_._instance.get_mutable()->dr_pose_and_time_ = const_cast< ::common_msgs::DRPoseWithTime*>(
      ::common_msgs::DRPoseWithTime::internal_default_instance());
  ::sensor_imu_msgs::_SensorImu_default_instance_._instance.get_mutable()->localization_control_ = const_cast< ::sensor_imu_msgs::LocalizationControl*>(
      ::sensor_imu_msgs::LocalizationControl::internal_default_instance());
}
void SensorImu::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void SensorImu::clear_llh() {
  if (GetArenaNoVirtual() == NULL && llh_ != NULL) {
    delete llh_;
  }
  llh_ = NULL;
}
void SensorImu::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
void SensorImu::clear_twist() {
  if (GetArenaNoVirtual() == NULL && twist_ != NULL) {
    delete twist_;
  }
  twist_ = NULL;
}
void SensorImu::clear_acceleration() {
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) {
    delete acceleration_;
  }
  acceleration_ = NULL;
}
void SensorImu::clear_v() {
  if (GetArenaNoVirtual() == NULL && v_ != NULL) {
    delete v_;
  }
  v_ = NULL;
}
void SensorImu::clear_nav_status() {
  if (GetArenaNoVirtual() == NULL && nav_status_ != NULL) {
    delete nav_status_;
  }
  nav_status_ = NULL;
}
void SensorImu::clear_dr_pose_and_time() {
  if (GetArenaNoVirtual() == NULL && dr_pose_and_time_ != NULL) {
    delete dr_pose_and_time_;
  }
  dr_pose_and_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorImu::kHeaderFieldNumber;
const int SensorImu::kLlhFieldNumber;
const int SensorImu::kPoseFieldNumber;
const int SensorImu::kTwistFieldNumber;
const int SensorImu::kAccelerationFieldNumber;
const int SensorImu::kVFieldNumber;
const int SensorImu::kNavStatusFieldNumber;
const int SensorImu::kDrPoseAndTimeFieldNumber;
const int SensorImu::kLocalizationControlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorImu::SensorImu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsSensorImu();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_imu_msgs.SensorImu)
}
SensorImu::SensorImu(const SensorImu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::common_msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_llh()) {
    llh_ = new ::common_msgs::LLH(*from.llh_);
  } else {
    llh_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::common_msgs::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_twist()) {
    twist_ = new ::common_msgs::Twist(*from.twist_);
  } else {
    twist_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::common_msgs::Vector3(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  if (from.has_v()) {
    v_ = new ::common_msgs::UnsureVar(*from.v_);
  } else {
    v_ = NULL;
  }
  if (from.has_nav_status()) {
    nav_status_ = new ::common_msgs::NavStatus(*from.nav_status_);
  } else {
    nav_status_ = NULL;
  }
  if (from.has_dr_pose_and_time()) {
    dr_pose_and_time_ = new ::common_msgs::DRPoseWithTime(*from.dr_pose_and_time_);
  } else {
    dr_pose_and_time_ = NULL;
  }
  if (from.has_localization_control()) {
    localization_control_ = new ::sensor_imu_msgs::LocalizationControl(*from.localization_control_);
  } else {
    localization_control_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sensor_imu_msgs.SensorImu)
}

void SensorImu::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&localization_control_) -
      reinterpret_cast<char*>(&header_)) + sizeof(localization_control_));
  _cached_size_ = 0;
}

SensorImu::~SensorImu() {
  // @@protoc_insertion_point(destructor:sensor_imu_msgs.SensorImu)
  SharedDtor();
}

void SensorImu::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete llh_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete twist_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete v_;
  if (this != internal_default_instance()) delete nav_status_;
  if (this != internal_default_instance()) delete dr_pose_and_time_;
  if (this != internal_default_instance()) delete localization_control_;
}

void SensorImu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorImu::descriptor() {
  ::protobuf_sensor_5fimu_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fimu_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorImu& SensorImu::default_instance() {
  ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsSensorImu();
  return *internal_default_instance();
}

SensorImu* SensorImu::New(::google::protobuf::Arena* arena) const {
  SensorImu* n = new SensorImu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorImu::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_imu_msgs.SensorImu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && llh_ != NULL) {
    delete llh_;
  }
  llh_ = NULL;
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && twist_ != NULL) {
    delete twist_;
  }
  twist_ = NULL;
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) {
    delete acceleration_;
  }
  acceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && v_ != NULL) {
    delete v_;
  }
  v_ = NULL;
  if (GetArenaNoVirtual() == NULL && nav_status_ != NULL) {
    delete nav_status_;
  }
  nav_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && dr_pose_and_time_ != NULL) {
    delete dr_pose_and_time_;
  }
  dr_pose_and_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && localization_control_ != NULL) {
    delete localization_control_;
  }
  localization_control_ = NULL;
  _internal_metadata_.Clear();
}

bool SensorImu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor_imu_msgs.SensorImu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common_msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common_msgs.LLH llh = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_llh()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common_msgs.Pose pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common_msgs.Twist twist = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_twist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common_msgs.Vector3 acceleration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common_msgs.UnsureVar v = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_v()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common_msgs.NavStatus nav_status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nav_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common_msgs.DRPoseWithTime dr_pose_and_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dr_pose_and_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sensor_imu_msgs.LocalizationControl localization_control = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_localization_control()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor_imu_msgs.SensorImu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor_imu_msgs.SensorImu)
  return false;
#undef DO_
}

void SensorImu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor_imu_msgs.SensorImu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .common_msgs.LLH llh = 2;
  if (this->has_llh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->llh_, output);
  }

  // .common_msgs.Pose pose = 3;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pose_, output);
  }

  // .common_msgs.Twist twist = 4;
  if (this->has_twist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->twist_, output);
  }

  // .common_msgs.Vector3 acceleration = 5;
  if (this->has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->acceleration_, output);
  }

  // .common_msgs.UnsureVar v = 6;
  if (this->has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->v_, output);
  }

  // .common_msgs.NavStatus nav_status = 7;
  if (this->has_nav_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->nav_status_, output);
  }

  // .common_msgs.DRPoseWithTime dr_pose_and_time = 8;
  if (this->has_dr_pose_and_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->dr_pose_and_time_, output);
  }

  // .sensor_imu_msgs.LocalizationControl localization_control = 9;
  if (this->has_localization_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->localization_control_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensor_imu_msgs.SensorImu)
}

::google::protobuf::uint8* SensorImu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensor_imu_msgs.SensorImu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .common_msgs.LLH llh = 2;
  if (this->has_llh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->llh_, deterministic, target);
  }

  // .common_msgs.Pose pose = 3;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->pose_, deterministic, target);
  }

  // .common_msgs.Twist twist = 4;
  if (this->has_twist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->twist_, deterministic, target);
  }

  // .common_msgs.Vector3 acceleration = 5;
  if (this->has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->acceleration_, deterministic, target);
  }

  // .common_msgs.UnsureVar v = 6;
  if (this->has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->v_, deterministic, target);
  }

  // .common_msgs.NavStatus nav_status = 7;
  if (this->has_nav_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->nav_status_, deterministic, target);
  }

  // .common_msgs.DRPoseWithTime dr_pose_and_time = 8;
  if (this->has_dr_pose_and_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->dr_pose_and_time_, deterministic, target);
  }

  // .sensor_imu_msgs.LocalizationControl localization_control = 9;
  if (this->has_localization_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->localization_control_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_imu_msgs.SensorImu)
  return target;
}

size_t SensorImu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_imu_msgs.SensorImu)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .common_msgs.LLH llh = 2;
  if (this->has_llh()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->llh_);
  }

  // .common_msgs.Pose pose = 3;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pose_);
  }

  // .common_msgs.Twist twist = 4;
  if (this->has_twist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->twist_);
  }

  // .common_msgs.Vector3 acceleration = 5;
  if (this->has_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->acceleration_);
  }

  // .common_msgs.UnsureVar v = 6;
  if (this->has_v()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->v_);
  }

  // .common_msgs.NavStatus nav_status = 7;
  if (this->has_nav_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->nav_status_);
  }

  // .common_msgs.DRPoseWithTime dr_pose_and_time = 8;
  if (this->has_dr_pose_and_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dr_pose_and_time_);
  }

  // .sensor_imu_msgs.LocalizationControl localization_control = 9;
  if (this->has_localization_control()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->localization_control_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorImu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_imu_msgs.SensorImu)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorImu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorImu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_imu_msgs.SensorImu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_imu_msgs.SensorImu)
    MergeFrom(*source);
  }
}

void SensorImu::MergeFrom(const SensorImu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_imu_msgs.SensorImu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::common_msgs::Header::MergeFrom(from.header());
  }
  if (from.has_llh()) {
    mutable_llh()->::common_msgs::LLH::MergeFrom(from.llh());
  }
  if (from.has_pose()) {
    mutable_pose()->::common_msgs::Pose::MergeFrom(from.pose());
  }
  if (from.has_twist()) {
    mutable_twist()->::common_msgs::Twist::MergeFrom(from.twist());
  }
  if (from.has_acceleration()) {
    mutable_acceleration()->::common_msgs::Vector3::MergeFrom(from.acceleration());
  }
  if (from.has_v()) {
    mutable_v()->::common_msgs::UnsureVar::MergeFrom(from.v());
  }
  if (from.has_nav_status()) {
    mutable_nav_status()->::common_msgs::NavStatus::MergeFrom(from.nav_status());
  }
  if (from.has_dr_pose_and_time()) {
    mutable_dr_pose_and_time()->::common_msgs::DRPoseWithTime::MergeFrom(from.dr_pose_and_time());
  }
  if (from.has_localization_control()) {
    mutable_localization_control()->::sensor_imu_msgs::LocalizationControl::MergeFrom(from.localization_control());
  }
}

void SensorImu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_imu_msgs.SensorImu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorImu::CopyFrom(const SensorImu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_imu_msgs.SensorImu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorImu::IsInitialized() const {
  return true;
}

void SensorImu::Swap(SensorImu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorImu::InternalSwap(SensorImu* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(llh_, other->llh_);
  swap(pose_, other->pose_);
  swap(twist_, other->twist_);
  swap(acceleration_, other->acceleration_);
  swap(v_, other->v_);
  swap(nav_status_, other->nav_status_);
  swap(dr_pose_and_time_, other->dr_pose_and_time_);
  swap(localization_control_, other->localization_control_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorImu::GetMetadata() const {
  protobuf_sensor_5fimu_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fimu_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ivsensorgps::InitAsDefaultInstance() {
  ::sensor_imu_msgs::_Ivsensorgps_default_instance_._instance.get_mutable()->header_ = const_cast< ::common_msgs::Header*>(
      ::common_msgs::Header::internal_default_instance());
}
void Ivsensorgps::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ivsensorgps::kHeaderFieldNumber;
const int Ivsensorgps::kUpdateFieldNumber;
const int Ivsensorgps::kLonFieldNumber;
const int Ivsensorgps::kLatFieldNumber;
const int Ivsensorgps::kHeightFieldNumber;
const int Ivsensorgps::kHeadingFieldNumber;
const int Ivsensorgps::kVelocityFieldNumber;
const int Ivsensorgps::kUpVelocityFieldNumber;
const int Ivsensorgps::kTrackAngleFieldNumber;
const int Ivsensorgps::kWeekFieldNumber;
const int Ivsensorgps::kUtctimeFieldNumber;
const int Ivsensorgps::kHdopFieldNumber;
const int Ivsensorgps::kDiffAgeFieldNumber;
const int Ivsensorgps::kBaseLengthFieldNumber;
const int Ivsensorgps::kHeadingStdFieldNumber;
const int Ivsensorgps::kXgFieldNumber;
const int Ivsensorgps::kYgFieldNumber;
const int Ivsensorgps::kZgFieldNumber;
const int Ivsensorgps::kStatusFieldNumber;
const int Ivsensorgps::kSatenumFieldNumber;
const int Ivsensorgps::kStatusYawFieldNumber;
const int Ivsensorgps::kIsHeadingValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ivsensorgps::Ivsensorgps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsIvsensorgps();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_imu_msgs.Ivsensorgps)
}
Ivsensorgps::Ivsensorgps(const Ivsensorgps& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::common_msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&lon_, &from.lon_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_heading_valid_) -
    reinterpret_cast<char*>(&lon_)) + sizeof(is_heading_valid_));
  // @@protoc_insertion_point(copy_constructor:sensor_imu_msgs.Ivsensorgps)
}

void Ivsensorgps::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_heading_valid_) -
      reinterpret_cast<char*>(&header_)) + sizeof(is_heading_valid_));
  _cached_size_ = 0;
}

Ivsensorgps::~Ivsensorgps() {
  // @@protoc_insertion_point(destructor:sensor_imu_msgs.Ivsensorgps)
  SharedDtor();
}

void Ivsensorgps::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void Ivsensorgps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ivsensorgps::descriptor() {
  ::protobuf_sensor_5fimu_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fimu_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ivsensorgps& Ivsensorgps::default_instance() {
  ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsIvsensorgps();
  return *internal_default_instance();
}

Ivsensorgps* Ivsensorgps::New(::google::protobuf::Arena* arena) const {
  Ivsensorgps* n = new Ivsensorgps;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ivsensorgps::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_imu_msgs.Ivsensorgps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&lon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_heading_valid_) -
      reinterpret_cast<char*>(&lon_)) + sizeof(is_heading_valid_));
  _internal_metadata_.Clear();
}

bool Ivsensorgps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor_imu_msgs.Ivsensorgps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common_msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool update = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double velocity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double up_velocity = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &up_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double track_angle = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &track_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 week = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double utctime = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &utctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double hdop = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double diff_age = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &diff_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double base_length = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &base_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading_std = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double xg = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yg = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double zg = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 status = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 satenum = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &satenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 status_yaw = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 is_heading_valid = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_heading_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor_imu_msgs.Ivsensorgps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor_imu_msgs.Ivsensorgps)
  return false;
#undef DO_
}

void Ivsensorgps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor_imu_msgs.Ivsensorgps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // bool update = 2;
  if (this->update() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->update(), output);
  }

  // double lon = 3;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lon(), output);
  }

  // double lat = 4;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lat(), output);
  }

  // double height = 5;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->height(), output);
  }

  // double heading = 6;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->heading(), output);
  }

  // double velocity = 7;
  if (this->velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->velocity(), output);
  }

  // double up_velocity = 8;
  if (this->up_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->up_velocity(), output);
  }

  // double track_angle = 9;
  if (this->track_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->track_angle(), output);
  }

  // int32 week = 10;
  if (this->week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->week(), output);
  }

  // double utctime = 11;
  if (this->utctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->utctime(), output);
  }

  // double hdop = 12;
  if (this->hdop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->hdop(), output);
  }

  // double diff_age = 13;
  if (this->diff_age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->diff_age(), output);
  }

  // double base_length = 14;
  if (this->base_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->base_length(), output);
  }

  // double heading_std = 15;
  if (this->heading_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->heading_std(), output);
  }

  // double xg = 16;
  if (this->xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->xg(), output);
  }

  // double yg = 17;
  if (this->yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->yg(), output);
  }

  // double zg = 18;
  if (this->zg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->zg(), output);
  }

  // uint32 status = 19;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->status(), output);
  }

  // uint32 satenum = 20;
  if (this->satenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->satenum(), output);
  }

  // uint32 status_yaw = 21;
  if (this->status_yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->status_yaw(), output);
  }

  // uint32 is_heading_valid = 22;
  if (this->is_heading_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->is_heading_valid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensor_imu_msgs.Ivsensorgps)
}

::google::protobuf::uint8* Ivsensorgps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensor_imu_msgs.Ivsensorgps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // bool update = 2;
  if (this->update() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->update(), target);
  }

  // double lon = 3;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lon(), target);
  }

  // double lat = 4;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lat(), target);
  }

  // double height = 5;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->height(), target);
  }

  // double heading = 6;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->heading(), target);
  }

  // double velocity = 7;
  if (this->velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->velocity(), target);
  }

  // double up_velocity = 8;
  if (this->up_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->up_velocity(), target);
  }

  // double track_angle = 9;
  if (this->track_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->track_angle(), target);
  }

  // int32 week = 10;
  if (this->week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->week(), target);
  }

  // double utctime = 11;
  if (this->utctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->utctime(), target);
  }

  // double hdop = 12;
  if (this->hdop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->hdop(), target);
  }

  // double diff_age = 13;
  if (this->diff_age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->diff_age(), target);
  }

  // double base_length = 14;
  if (this->base_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->base_length(), target);
  }

  // double heading_std = 15;
  if (this->heading_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->heading_std(), target);
  }

  // double xg = 16;
  if (this->xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->xg(), target);
  }

  // double yg = 17;
  if (this->yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->yg(), target);
  }

  // double zg = 18;
  if (this->zg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->zg(), target);
  }

  // uint32 status = 19;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->status(), target);
  }

  // uint32 satenum = 20;
  if (this->satenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->satenum(), target);
  }

  // uint32 status_yaw = 21;
  if (this->status_yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->status_yaw(), target);
  }

  // uint32 is_heading_valid = 22;
  if (this->is_heading_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->is_heading_valid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_imu_msgs.Ivsensorgps)
  return target;
}

size_t Ivsensorgps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_imu_msgs.Ivsensorgps)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // double lon = 3;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  // double lat = 4;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // double height = 5;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // double heading = 6;
  if (this->heading() != 0) {
    total_size += 1 + 8;
  }

  // bool update = 2;
  if (this->update() != 0) {
    total_size += 1 + 1;
  }

  // int32 week = 10;
  if (this->week() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->week());
  }

  // double velocity = 7;
  if (this->velocity() != 0) {
    total_size += 1 + 8;
  }

  // double up_velocity = 8;
  if (this->up_velocity() != 0) {
    total_size += 1 + 8;
  }

  // double track_angle = 9;
  if (this->track_angle() != 0) {
    total_size += 1 + 8;
  }

  // double utctime = 11;
  if (this->utctime() != 0) {
    total_size += 1 + 8;
  }

  // double hdop = 12;
  if (this->hdop() != 0) {
    total_size += 1 + 8;
  }

  // double diff_age = 13;
  if (this->diff_age() != 0) {
    total_size += 1 + 8;
  }

  // double base_length = 14;
  if (this->base_length() != 0) {
    total_size += 1 + 8;
  }

  // double heading_std = 15;
  if (this->heading_std() != 0) {
    total_size += 1 + 8;
  }

  // double xg = 16;
  if (this->xg() != 0) {
    total_size += 2 + 8;
  }

  // double yg = 17;
  if (this->yg() != 0) {
    total_size += 2 + 8;
  }

  // double zg = 18;
  if (this->zg() != 0) {
    total_size += 2 + 8;
  }

  // uint32 status = 19;
  if (this->status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // uint32 satenum = 20;
  if (this->satenum() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->satenum());
  }

  // uint32 status_yaw = 21;
  if (this->status_yaw() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status_yaw());
  }

  // uint32 is_heading_valid = 22;
  if (this->is_heading_valid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->is_heading_valid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ivsensorgps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_imu_msgs.Ivsensorgps)
  GOOGLE_DCHECK_NE(&from, this);
  const Ivsensorgps* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ivsensorgps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_imu_msgs.Ivsensorgps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_imu_msgs.Ivsensorgps)
    MergeFrom(*source);
  }
}

void Ivsensorgps::MergeFrom(const Ivsensorgps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_imu_msgs.Ivsensorgps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::common_msgs::Header::MergeFrom(from.header());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.update() != 0) {
    set_update(from.update());
  }
  if (from.week() != 0) {
    set_week(from.week());
  }
  if (from.velocity() != 0) {
    set_velocity(from.velocity());
  }
  if (from.up_velocity() != 0) {
    set_up_velocity(from.up_velocity());
  }
  if (from.track_angle() != 0) {
    set_track_angle(from.track_angle());
  }
  if (from.utctime() != 0) {
    set_utctime(from.utctime());
  }
  if (from.hdop() != 0) {
    set_hdop(from.hdop());
  }
  if (from.diff_age() != 0) {
    set_diff_age(from.diff_age());
  }
  if (from.base_length() != 0) {
    set_base_length(from.base_length());
  }
  if (from.heading_std() != 0) {
    set_heading_std(from.heading_std());
  }
  if (from.xg() != 0) {
    set_xg(from.xg());
  }
  if (from.yg() != 0) {
    set_yg(from.yg());
  }
  if (from.zg() != 0) {
    set_zg(from.zg());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.satenum() != 0) {
    set_satenum(from.satenum());
  }
  if (from.status_yaw() != 0) {
    set_status_yaw(from.status_yaw());
  }
  if (from.is_heading_valid() != 0) {
    set_is_heading_valid(from.is_heading_valid());
  }
}

void Ivsensorgps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_imu_msgs.Ivsensorgps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ivsensorgps::CopyFrom(const Ivsensorgps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_imu_msgs.Ivsensorgps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ivsensorgps::IsInitialized() const {
  return true;
}

void Ivsensorgps::Swap(Ivsensorgps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ivsensorgps::InternalSwap(Ivsensorgps* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(lon_, other->lon_);
  swap(lat_, other->lat_);
  swap(height_, other->height_);
  swap(heading_, other->heading_);
  swap(update_, other->update_);
  swap(week_, other->week_);
  swap(velocity_, other->velocity_);
  swap(up_velocity_, other->up_velocity_);
  swap(track_angle_, other->track_angle_);
  swap(utctime_, other->utctime_);
  swap(hdop_, other->hdop_);
  swap(diff_age_, other->diff_age_);
  swap(base_length_, other->base_length_);
  swap(heading_std_, other->heading_std_);
  swap(xg_, other->xg_);
  swap(yg_, other->yg_);
  swap(zg_, other->zg_);
  swap(status_, other->status_);
  swap(satenum_, other->satenum_);
  swap(status_yaw_, other->status_yaw_);
  swap(is_heading_valid_, other->is_heading_valid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ivsensorgps::GetMetadata() const {
  protobuf_sensor_5fimu_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fimu_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ivsensorimu::InitAsDefaultInstance() {
  ::sensor_imu_msgs::_Ivsensorimu_default_instance_._instance.get_mutable()->header_ = const_cast< ::common_msgs::Header*>(
      ::common_msgs::Header::internal_default_instance());
}
void Ivsensorimu::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ivsensorimu::kHeaderFieldNumber;
const int Ivsensorimu::kUpdateFieldNumber;
const int Ivsensorimu::kTimeTagFieldNumber;
const int Ivsensorimu::kWeekFieldNumber;
const int Ivsensorimu::kUtcTimeFieldNumber;
const int Ivsensorimu::kGyroXFieldNumber;
const int Ivsensorimu::kGyroYFieldNumber;
const int Ivsensorimu::kGyroZFieldNumber;
const int Ivsensorimu::kAcceXFieldNumber;
const int Ivsensorimu::kAcceYFieldNumber;
const int Ivsensorimu::kAcceZFieldNumber;
const int Ivsensorimu::kTemperatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ivsensorimu::Ivsensorimu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsIvsensorimu();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_imu_msgs.Ivsensorimu)
}
Ivsensorimu::Ivsensorimu(const Ivsensorimu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::common_msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&update_, &from.update_,
    static_cast<size_t>(reinterpret_cast<char*>(&week_) -
    reinterpret_cast<char*>(&update_)) + sizeof(week_));
  // @@protoc_insertion_point(copy_constructor:sensor_imu_msgs.Ivsensorimu)
}

void Ivsensorimu::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_) -
      reinterpret_cast<char*>(&header_)) + sizeof(week_));
  _cached_size_ = 0;
}

Ivsensorimu::~Ivsensorimu() {
  // @@protoc_insertion_point(destructor:sensor_imu_msgs.Ivsensorimu)
  SharedDtor();
}

void Ivsensorimu::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void Ivsensorimu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ivsensorimu::descriptor() {
  ::protobuf_sensor_5fimu_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fimu_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ivsensorimu& Ivsensorimu::default_instance() {
  ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsIvsensorimu();
  return *internal_default_instance();
}

Ivsensorimu* Ivsensorimu::New(::google::protobuf::Arena* arena) const {
  Ivsensorimu* n = new Ivsensorimu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ivsensorimu::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_imu_msgs.Ivsensorimu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&update_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&week_) -
      reinterpret_cast<char*>(&update_)) + sizeof(week_));
  _internal_metadata_.Clear();
}

bool Ivsensorimu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor_imu_msgs.Ivsensorimu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common_msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool update = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 time_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 week = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double utc_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gyro_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyro_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gyro_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyro_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double gyro_z = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyro_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acce_x = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acce_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acce_y = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acce_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acce_z = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acce_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double temperature = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor_imu_msgs.Ivsensorimu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor_imu_msgs.Ivsensorimu)
  return false;
#undef DO_
}

void Ivsensorimu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor_imu_msgs.Ivsensorimu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // bool update = 2;
  if (this->update() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->update(), output);
  }

  // uint32 time_tag = 3;
  if (this->time_tag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_tag(), output);
  }

  // int32 week = 4;
  if (this->week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->week(), output);
  }

  // double utc_time = 5;
  if (this->utc_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->utc_time(), output);
  }

  // double gyro_x = 6;
  if (this->gyro_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->gyro_x(), output);
  }

  // double gyro_y = 7;
  if (this->gyro_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->gyro_y(), output);
  }

  // double gyro_z = 8;
  if (this->gyro_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->gyro_z(), output);
  }

  // double acce_x = 9;
  if (this->acce_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->acce_x(), output);
  }

  // double acce_y = 10;
  if (this->acce_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->acce_y(), output);
  }

  // double acce_z = 11;
  if (this->acce_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->acce_z(), output);
  }

  // double temperature = 12;
  if (this->temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->temperature(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensor_imu_msgs.Ivsensorimu)
}

::google::protobuf::uint8* Ivsensorimu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensor_imu_msgs.Ivsensorimu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // bool update = 2;
  if (this->update() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->update(), target);
  }

  // uint32 time_tag = 3;
  if (this->time_tag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_tag(), target);
  }

  // int32 week = 4;
  if (this->week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->week(), target);
  }

  // double utc_time = 5;
  if (this->utc_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->utc_time(), target);
  }

  // double gyro_x = 6;
  if (this->gyro_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->gyro_x(), target);
  }

  // double gyro_y = 7;
  if (this->gyro_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->gyro_y(), target);
  }

  // double gyro_z = 8;
  if (this->gyro_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->gyro_z(), target);
  }

  // double acce_x = 9;
  if (this->acce_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->acce_x(), target);
  }

  // double acce_y = 10;
  if (this->acce_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->acce_y(), target);
  }

  // double acce_z = 11;
  if (this->acce_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->acce_z(), target);
  }

  // double temperature = 12;
  if (this->temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->temperature(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_imu_msgs.Ivsensorimu)
  return target;
}

size_t Ivsensorimu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_imu_msgs.Ivsensorimu)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // bool update = 2;
  if (this->update() != 0) {
    total_size += 1 + 1;
  }

  // uint32 time_tag = 3;
  if (this->time_tag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time_tag());
  }

  // double utc_time = 5;
  if (this->utc_time() != 0) {
    total_size += 1 + 8;
  }

  // double gyro_x = 6;
  if (this->gyro_x() != 0) {
    total_size += 1 + 8;
  }

  // double gyro_y = 7;
  if (this->gyro_y() != 0) {
    total_size += 1 + 8;
  }

  // double gyro_z = 8;
  if (this->gyro_z() != 0) {
    total_size += 1 + 8;
  }

  // double acce_x = 9;
  if (this->acce_x() != 0) {
    total_size += 1 + 8;
  }

  // double acce_y = 10;
  if (this->acce_y() != 0) {
    total_size += 1 + 8;
  }

  // double acce_z = 11;
  if (this->acce_z() != 0) {
    total_size += 1 + 8;
  }

  // double temperature = 12;
  if (this->temperature() != 0) {
    total_size += 1 + 8;
  }

  // int32 week = 4;
  if (this->week() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->week());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ivsensorimu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_imu_msgs.Ivsensorimu)
  GOOGLE_DCHECK_NE(&from, this);
  const Ivsensorimu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ivsensorimu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_imu_msgs.Ivsensorimu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_imu_msgs.Ivsensorimu)
    MergeFrom(*source);
  }
}

void Ivsensorimu::MergeFrom(const Ivsensorimu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_imu_msgs.Ivsensorimu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::common_msgs::Header::MergeFrom(from.header());
  }
  if (from.update() != 0) {
    set_update(from.update());
  }
  if (from.time_tag() != 0) {
    set_time_tag(from.time_tag());
  }
  if (from.utc_time() != 0) {
    set_utc_time(from.utc_time());
  }
  if (from.gyro_x() != 0) {
    set_gyro_x(from.gyro_x());
  }
  if (from.gyro_y() != 0) {
    set_gyro_y(from.gyro_y());
  }
  if (from.gyro_z() != 0) {
    set_gyro_z(from.gyro_z());
  }
  if (from.acce_x() != 0) {
    set_acce_x(from.acce_x());
  }
  if (from.acce_y() != 0) {
    set_acce_y(from.acce_y());
  }
  if (from.acce_z() != 0) {
    set_acce_z(from.acce_z());
  }
  if (from.temperature() != 0) {
    set_temperature(from.temperature());
  }
  if (from.week() != 0) {
    set_week(from.week());
  }
}

void Ivsensorimu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_imu_msgs.Ivsensorimu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ivsensorimu::CopyFrom(const Ivsensorimu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_imu_msgs.Ivsensorimu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ivsensorimu::IsInitialized() const {
  return true;
}

void Ivsensorimu::Swap(Ivsensorimu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ivsensorimu::InternalSwap(Ivsensorimu* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(update_, other->update_);
  swap(time_tag_, other->time_tag_);
  swap(utc_time_, other->utc_time_);
  swap(gyro_x_, other->gyro_x_);
  swap(gyro_y_, other->gyro_y_);
  swap(gyro_z_, other->gyro_z_);
  swap(acce_x_, other->acce_x_);
  swap(acce_y_, other->acce_y_);
  swap(acce_z_, other->acce_z_);
  swap(temperature_, other->temperature_);
  swap(week_, other->week_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ivsensorimu::GetMetadata() const {
  protobuf_sensor_5fimu_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fimu_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ivwheelspeed::InitAsDefaultInstance() {
  ::sensor_imu_msgs::_Ivwheelspeed_default_instance_._instance.get_mutable()->header_ = const_cast< ::common_msgs::Header*>(
      ::common_msgs::Header::internal_default_instance());
}
void Ivwheelspeed::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ivwheelspeed::kHeaderFieldNumber;
const int Ivwheelspeed::kUpdateFieldNumber;
const int Ivwheelspeed::kWeekFieldNumber;
const int Ivwheelspeed::kUtcTimeFieldNumber;
const int Ivwheelspeed::kWheelspeedLrPluseFieldNumber;
const int Ivwheelspeed::kWheelspeedRrPluseFieldNumber;
const int Ivwheelspeed::kPluseMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ivwheelspeed::Ivwheelspeed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsIvwheelspeed();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_imu_msgs.Ivwheelspeed)
}
Ivwheelspeed::Ivwheelspeed(const Ivwheelspeed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::common_msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&update_, &from.update_,
    static_cast<size_t>(reinterpret_cast<char*>(&pluse_mask_) -
    reinterpret_cast<char*>(&update_)) + sizeof(pluse_mask_));
  // @@protoc_insertion_point(copy_constructor:sensor_imu_msgs.Ivwheelspeed)
}

void Ivwheelspeed::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pluse_mask_) -
      reinterpret_cast<char*>(&header_)) + sizeof(pluse_mask_));
  _cached_size_ = 0;
}

Ivwheelspeed::~Ivwheelspeed() {
  // @@protoc_insertion_point(destructor:sensor_imu_msgs.Ivwheelspeed)
  SharedDtor();
}

void Ivwheelspeed::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void Ivwheelspeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ivwheelspeed::descriptor() {
  ::protobuf_sensor_5fimu_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fimu_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ivwheelspeed& Ivwheelspeed::default_instance() {
  ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsIvwheelspeed();
  return *internal_default_instance();
}

Ivwheelspeed* Ivwheelspeed::New(::google::protobuf::Arena* arena) const {
  Ivwheelspeed* n = new Ivwheelspeed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ivwheelspeed::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_imu_msgs.Ivwheelspeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&update_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pluse_mask_) -
      reinterpret_cast<char*>(&update_)) + sizeof(pluse_mask_));
  _internal_metadata_.Clear();
}

bool Ivwheelspeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor_imu_msgs.Ivwheelspeed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common_msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool update = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 week = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double utc_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &utc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float wheelspeed_lr_pluse = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheelspeed_lr_pluse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float wheelspeed_rr_pluse = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheelspeed_rr_pluse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pluse_mask = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pluse_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor_imu_msgs.Ivwheelspeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor_imu_msgs.Ivwheelspeed)
  return false;
#undef DO_
}

void Ivwheelspeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor_imu_msgs.Ivwheelspeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // bool update = 2;
  if (this->update() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->update(), output);
  }

  // int32 week = 3;
  if (this->week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->week(), output);
  }

  // double utc_time = 4;
  if (this->utc_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->utc_time(), output);
  }

  // float wheelspeed_lr_pluse = 5;
  if (this->wheelspeed_lr_pluse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->wheelspeed_lr_pluse(), output);
  }

  // float wheelspeed_rr_pluse = 6;
  if (this->wheelspeed_rr_pluse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->wheelspeed_rr_pluse(), output);
  }

  // uint32 pluse_mask = 7;
  if (this->pluse_mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pluse_mask(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensor_imu_msgs.Ivwheelspeed)
}

::google::protobuf::uint8* Ivwheelspeed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensor_imu_msgs.Ivwheelspeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // bool update = 2;
  if (this->update() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->update(), target);
  }

  // int32 week = 3;
  if (this->week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->week(), target);
  }

  // double utc_time = 4;
  if (this->utc_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->utc_time(), target);
  }

  // float wheelspeed_lr_pluse = 5;
  if (this->wheelspeed_lr_pluse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->wheelspeed_lr_pluse(), target);
  }

  // float wheelspeed_rr_pluse = 6;
  if (this->wheelspeed_rr_pluse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->wheelspeed_rr_pluse(), target);
  }

  // uint32 pluse_mask = 7;
  if (this->pluse_mask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pluse_mask(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_imu_msgs.Ivwheelspeed)
  return target;
}

size_t Ivwheelspeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_imu_msgs.Ivwheelspeed)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // bool update = 2;
  if (this->update() != 0) {
    total_size += 1 + 1;
  }

  // int32 week = 3;
  if (this->week() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->week());
  }

  // double utc_time = 4;
  if (this->utc_time() != 0) {
    total_size += 1 + 8;
  }

  // float wheelspeed_lr_pluse = 5;
  if (this->wheelspeed_lr_pluse() != 0) {
    total_size += 1 + 4;
  }

  // float wheelspeed_rr_pluse = 6;
  if (this->wheelspeed_rr_pluse() != 0) {
    total_size += 1 + 4;
  }

  // uint32 pluse_mask = 7;
  if (this->pluse_mask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pluse_mask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ivwheelspeed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_imu_msgs.Ivwheelspeed)
  GOOGLE_DCHECK_NE(&from, this);
  const Ivwheelspeed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ivwheelspeed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_imu_msgs.Ivwheelspeed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_imu_msgs.Ivwheelspeed)
    MergeFrom(*source);
  }
}

void Ivwheelspeed::MergeFrom(const Ivwheelspeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_imu_msgs.Ivwheelspeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::common_msgs::Header::MergeFrom(from.header());
  }
  if (from.update() != 0) {
    set_update(from.update());
  }
  if (from.week() != 0) {
    set_week(from.week());
  }
  if (from.utc_time() != 0) {
    set_utc_time(from.utc_time());
  }
  if (from.wheelspeed_lr_pluse() != 0) {
    set_wheelspeed_lr_pluse(from.wheelspeed_lr_pluse());
  }
  if (from.wheelspeed_rr_pluse() != 0) {
    set_wheelspeed_rr_pluse(from.wheelspeed_rr_pluse());
  }
  if (from.pluse_mask() != 0) {
    set_pluse_mask(from.pluse_mask());
  }
}

void Ivwheelspeed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_imu_msgs.Ivwheelspeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ivwheelspeed::CopyFrom(const Ivwheelspeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_imu_msgs.Ivwheelspeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ivwheelspeed::IsInitialized() const {
  return true;
}

void Ivwheelspeed::Swap(Ivwheelspeed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ivwheelspeed::InternalSwap(Ivwheelspeed* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(update_, other->update_);
  swap(week_, other->week_);
  swap(utc_time_, other->utc_time_);
  swap(wheelspeed_lr_pluse_, other->wheelspeed_lr_pluse_);
  swap(wheelspeed_rr_pluse_, other->wheelspeed_rr_pluse_);
  swap(pluse_mask_, other->pluse_mask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ivwheelspeed::GetMetadata() const {
  protobuf_sensor_5fimu_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fimu_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Filterstatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Filterstatus::kUpdateFieldNumber;
const int Filterstatus::kFrameCountFieldNumber;
const int Filterstatus::kXGyroZeroBiasFieldNumber;
const int Filterstatus::kYGyroZeroBiasFieldNumber;
const int Filterstatus::kZGyroZeroBiasFieldNumber;
const int Filterstatus::kXAcceZeroBiasFieldNumber;
const int Filterstatus::kYAcceZeroBiasFieldNumber;
const int Filterstatus::kZAcceZeroBiasFieldNumber;
const int Filterstatus::kHeadingInstallDeviationFieldNumber;
const int Filterstatus::kScaleFactorErrorFieldNumber;
const int Filterstatus::kPitchInstallDeviationFieldNumber;
const int Filterstatus::kEastwardPositionDeviationFieldNumber;
const int Filterstatus::kNorthwardPositionDeviationFieldNumber;
const int Filterstatus::kSkyPositionDeviationFieldNumber;
const int Filterstatus::kHeadingDeviationFieldNumber;
const int Filterstatus::kGnssEastwardPositionCountFieldNumber;
const int Filterstatus::kGnssNorthwardPositionCountFieldNumber;
const int Filterstatus::kGnssSkyPositionCountFieldNumber;
const int Filterstatus::kGnssEastwardSpeedCountFieldNumber;
const int Filterstatus::kGnssNorthwardSpeedCountFieldNumber;
const int Filterstatus::kGnssSkySpeedCountFieldNumber;
const int Filterstatus::kGnssHeadingCountFieldNumber;
const int Filterstatus::kOdomEastwardSpeedCountFieldNumber;
const int Filterstatus::kOdomNorthwardSpeedCountFieldNumber;
const int Filterstatus::kOdomSkySpeedCountFieldNumber;
const int Filterstatus::kLaserEastwardPositionCountFieldNumber;
const int Filterstatus::kLaserNorthwardPositionCountFieldNumber;
const int Filterstatus::kLaserSkyPositionCountFieldNumber;
const int Filterstatus::kLaserHeadingCountFieldNumber;
const int Filterstatus::kTimeConsumingFieldNumber;
const int Filterstatus::kFusionModelFieldNumber;
const int Filterstatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Filterstatus::Filterstatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsFilterstatus();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_imu_msgs.Filterstatus)
}
Filterstatus::Filterstatus(const Filterstatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&update_, &from.update_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&update_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:sensor_imu_msgs.Filterstatus)
}

void Filterstatus::SharedCtor() {
  ::memset(&update_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&update_)) + sizeof(status_));
  _cached_size_ = 0;
}

Filterstatus::~Filterstatus() {
  // @@protoc_insertion_point(destructor:sensor_imu_msgs.Filterstatus)
  SharedDtor();
}

void Filterstatus::SharedDtor() {
}

void Filterstatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Filterstatus::descriptor() {
  ::protobuf_sensor_5fimu_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fimu_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Filterstatus& Filterstatus::default_instance() {
  ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsFilterstatus();
  return *internal_default_instance();
}

Filterstatus* Filterstatus::New(::google::protobuf::Arena* arena) const {
  Filterstatus* n = new Filterstatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Filterstatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_imu_msgs.Filterstatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&update_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&update_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

bool Filterstatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor_imu_msgs.Filterstatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool update = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frame_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x_gyro_zero_bias = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_gyro_zero_bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y_gyro_zero_bias = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_gyro_zero_bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z_gyro_zero_bias = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_gyro_zero_bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x_acce_zero_bias = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_acce_zero_bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y_acce_zero_bias = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_acce_zero_bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z_acce_zero_bias = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_acce_zero_bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading_install_deviation = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_install_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float scale_factor_error = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_factor_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pitch_install_deviation = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_install_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float eastward_position_deviation = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eastward_position_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float northward_position_deviation = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &northward_position_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sky_position_deviation = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sky_position_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading_deviation = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gnss_eastward_position_count = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gnss_eastward_position_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gnss_northward_position_count = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gnss_northward_position_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gnss_sky_position_count = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gnss_sky_position_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gnss_eastward_speed_count = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gnss_eastward_speed_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gnss_northward_speed_count = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gnss_northward_speed_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gnss_sky_speed_count = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gnss_sky_speed_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gnss_heading_count = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gnss_heading_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 odom_eastward_speed_count = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &odom_eastward_speed_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 odom_northward_speed_count = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &odom_northward_speed_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 odom_sky_speed_count = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &odom_sky_speed_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 laser_eastward_position_count = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laser_eastward_position_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 laser_northward_position_count = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laser_northward_position_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 laser_sky_position_count = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laser_sky_position_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 laser_heading_count = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laser_heading_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time_consuming = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_consuming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fusion_model = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fusion_model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 status = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor_imu_msgs.Filterstatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor_imu_msgs.Filterstatus)
  return false;
#undef DO_
}

void Filterstatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor_imu_msgs.Filterstatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool update = 1;
  if (this->update() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->update(), output);
  }

  // int32 frame_count = 2;
  if (this->frame_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frame_count(), output);
  }

  // float x_gyro_zero_bias = 3;
  if (this->x_gyro_zero_bias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x_gyro_zero_bias(), output);
  }

  // float y_gyro_zero_bias = 4;
  if (this->y_gyro_zero_bias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y_gyro_zero_bias(), output);
  }

  // float z_gyro_zero_bias = 5;
  if (this->z_gyro_zero_bias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->z_gyro_zero_bias(), output);
  }

  // float x_acce_zero_bias = 6;
  if (this->x_acce_zero_bias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->x_acce_zero_bias(), output);
  }

  // float y_acce_zero_bias = 7;
  if (this->y_acce_zero_bias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->y_acce_zero_bias(), output);
  }

  // float z_acce_zero_bias = 8;
  if (this->z_acce_zero_bias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->z_acce_zero_bias(), output);
  }

  // float heading_install_deviation = 9;
  if (this->heading_install_deviation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->heading_install_deviation(), output);
  }

  // float scale_factor_error = 10;
  if (this->scale_factor_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->scale_factor_error(), output);
  }

  // float pitch_install_deviation = 11;
  if (this->pitch_install_deviation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->pitch_install_deviation(), output);
  }

  // float eastward_position_deviation = 12;
  if (this->eastward_position_deviation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->eastward_position_deviation(), output);
  }

  // float northward_position_deviation = 13;
  if (this->northward_position_deviation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->northward_position_deviation(), output);
  }

  // float sky_position_deviation = 14;
  if (this->sky_position_deviation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->sky_position_deviation(), output);
  }

  // float heading_deviation = 15;
  if (this->heading_deviation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->heading_deviation(), output);
  }

  // int32 gnss_eastward_position_count = 16;
  if (this->gnss_eastward_position_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->gnss_eastward_position_count(), output);
  }

  // int32 gnss_northward_position_count = 17;
  if (this->gnss_northward_position_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->gnss_northward_position_count(), output);
  }

  // int32 gnss_sky_position_count = 18;
  if (this->gnss_sky_position_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->gnss_sky_position_count(), output);
  }

  // int32 gnss_eastward_speed_count = 19;
  if (this->gnss_eastward_speed_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->gnss_eastward_speed_count(), output);
  }

  // int32 gnss_northward_speed_count = 20;
  if (this->gnss_northward_speed_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->gnss_northward_speed_count(), output);
  }

  // int32 gnss_sky_speed_count = 21;
  if (this->gnss_sky_speed_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->gnss_sky_speed_count(), output);
  }

  // int32 gnss_heading_count = 22;
  if (this->gnss_heading_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->gnss_heading_count(), output);
  }

  // int32 odom_eastward_speed_count = 23;
  if (this->odom_eastward_speed_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->odom_eastward_speed_count(), output);
  }

  // int32 odom_northward_speed_count = 24;
  if (this->odom_northward_speed_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->odom_northward_speed_count(), output);
  }

  // int32 odom_sky_speed_count = 25;
  if (this->odom_sky_speed_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->odom_sky_speed_count(), output);
  }

  // int32 laser_eastward_position_count = 26;
  if (this->laser_eastward_position_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->laser_eastward_position_count(), output);
  }

  // int32 laser_northward_position_count = 27;
  if (this->laser_northward_position_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->laser_northward_position_count(), output);
  }

  // int32 laser_sky_position_count = 28;
  if (this->laser_sky_position_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->laser_sky_position_count(), output);
  }

  // int32 laser_heading_count = 29;
  if (this->laser_heading_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->laser_heading_count(), output);
  }

  // int32 time_consuming = 30;
  if (this->time_consuming() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->time_consuming(), output);
  }

  // uint32 fusion_model = 31;
  if (this->fusion_model() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->fusion_model(), output);
  }

  // uint32 status = 32;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensor_imu_msgs.Filterstatus)
}

::google::protobuf::uint8* Filterstatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensor_imu_msgs.Filterstatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool update = 1;
  if (this->update() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->update(), target);
  }

  // int32 frame_count = 2;
  if (this->frame_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frame_count(), target);
  }

  // float x_gyro_zero_bias = 3;
  if (this->x_gyro_zero_bias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x_gyro_zero_bias(), target);
  }

  // float y_gyro_zero_bias = 4;
  if (this->y_gyro_zero_bias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y_gyro_zero_bias(), target);
  }

  // float z_gyro_zero_bias = 5;
  if (this->z_gyro_zero_bias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->z_gyro_zero_bias(), target);
  }

  // float x_acce_zero_bias = 6;
  if (this->x_acce_zero_bias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->x_acce_zero_bias(), target);
  }

  // float y_acce_zero_bias = 7;
  if (this->y_acce_zero_bias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->y_acce_zero_bias(), target);
  }

  // float z_acce_zero_bias = 8;
  if (this->z_acce_zero_bias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->z_acce_zero_bias(), target);
  }

  // float heading_install_deviation = 9;
  if (this->heading_install_deviation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->heading_install_deviation(), target);
  }

  // float scale_factor_error = 10;
  if (this->scale_factor_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->scale_factor_error(), target);
  }

  // float pitch_install_deviation = 11;
  if (this->pitch_install_deviation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->pitch_install_deviation(), target);
  }

  // float eastward_position_deviation = 12;
  if (this->eastward_position_deviation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->eastward_position_deviation(), target);
  }

  // float northward_position_deviation = 13;
  if (this->northward_position_deviation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->northward_position_deviation(), target);
  }

  // float sky_position_deviation = 14;
  if (this->sky_position_deviation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->sky_position_deviation(), target);
  }

  // float heading_deviation = 15;
  if (this->heading_deviation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->heading_deviation(), target);
  }

  // int32 gnss_eastward_position_count = 16;
  if (this->gnss_eastward_position_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->gnss_eastward_position_count(), target);
  }

  // int32 gnss_northward_position_count = 17;
  if (this->gnss_northward_position_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->gnss_northward_position_count(), target);
  }

  // int32 gnss_sky_position_count = 18;
  if (this->gnss_sky_position_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->gnss_sky_position_count(), target);
  }

  // int32 gnss_eastward_speed_count = 19;
  if (this->gnss_eastward_speed_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->gnss_eastward_speed_count(), target);
  }

  // int32 gnss_northward_speed_count = 20;
  if (this->gnss_northward_speed_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->gnss_northward_speed_count(), target);
  }

  // int32 gnss_sky_speed_count = 21;
  if (this->gnss_sky_speed_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->gnss_sky_speed_count(), target);
  }

  // int32 gnss_heading_count = 22;
  if (this->gnss_heading_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->gnss_heading_count(), target);
  }

  // int32 odom_eastward_speed_count = 23;
  if (this->odom_eastward_speed_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->odom_eastward_speed_count(), target);
  }

  // int32 odom_northward_speed_count = 24;
  if (this->odom_northward_speed_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->odom_northward_speed_count(), target);
  }

  // int32 odom_sky_speed_count = 25;
  if (this->odom_sky_speed_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->odom_sky_speed_count(), target);
  }

  // int32 laser_eastward_position_count = 26;
  if (this->laser_eastward_position_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->laser_eastward_position_count(), target);
  }

  // int32 laser_northward_position_count = 27;
  if (this->laser_northward_position_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->laser_northward_position_count(), target);
  }

  // int32 laser_sky_position_count = 28;
  if (this->laser_sky_position_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->laser_sky_position_count(), target);
  }

  // int32 laser_heading_count = 29;
  if (this->laser_heading_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->laser_heading_count(), target);
  }

  // int32 time_consuming = 30;
  if (this->time_consuming() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->time_consuming(), target);
  }

  // uint32 fusion_model = 31;
  if (this->fusion_model() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->fusion_model(), target);
  }

  // uint32 status = 32;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_imu_msgs.Filterstatus)
  return target;
}

size_t Filterstatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_imu_msgs.Filterstatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool update = 1;
  if (this->update() != 0) {
    total_size += 1 + 1;
  }

  // int32 frame_count = 2;
  if (this->frame_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame_count());
  }

  // float x_gyro_zero_bias = 3;
  if (this->x_gyro_zero_bias() != 0) {
    total_size += 1 + 4;
  }

  // float y_gyro_zero_bias = 4;
  if (this->y_gyro_zero_bias() != 0) {
    total_size += 1 + 4;
  }

  // float z_gyro_zero_bias = 5;
  if (this->z_gyro_zero_bias() != 0) {
    total_size += 1 + 4;
  }

  // float x_acce_zero_bias = 6;
  if (this->x_acce_zero_bias() != 0) {
    total_size += 1 + 4;
  }

  // float y_acce_zero_bias = 7;
  if (this->y_acce_zero_bias() != 0) {
    total_size += 1 + 4;
  }

  // float z_acce_zero_bias = 8;
  if (this->z_acce_zero_bias() != 0) {
    total_size += 1 + 4;
  }

  // float heading_install_deviation = 9;
  if (this->heading_install_deviation() != 0) {
    total_size += 1 + 4;
  }

  // float scale_factor_error = 10;
  if (this->scale_factor_error() != 0) {
    total_size += 1 + 4;
  }

  // float pitch_install_deviation = 11;
  if (this->pitch_install_deviation() != 0) {
    total_size += 1 + 4;
  }

  // float eastward_position_deviation = 12;
  if (this->eastward_position_deviation() != 0) {
    total_size += 1 + 4;
  }

  // float northward_position_deviation = 13;
  if (this->northward_position_deviation() != 0) {
    total_size += 1 + 4;
  }

  // float sky_position_deviation = 14;
  if (this->sky_position_deviation() != 0) {
    total_size += 1 + 4;
  }

  // float heading_deviation = 15;
  if (this->heading_deviation() != 0) {
    total_size += 1 + 4;
  }

  // int32 gnss_eastward_position_count = 16;
  if (this->gnss_eastward_position_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gnss_eastward_position_count());
  }

  // int32 gnss_northward_position_count = 17;
  if (this->gnss_northward_position_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gnss_northward_position_count());
  }

  // int32 gnss_sky_position_count = 18;
  if (this->gnss_sky_position_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gnss_sky_position_count());
  }

  // int32 gnss_eastward_speed_count = 19;
  if (this->gnss_eastward_speed_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gnss_eastward_speed_count());
  }

  // int32 gnss_northward_speed_count = 20;
  if (this->gnss_northward_speed_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gnss_northward_speed_count());
  }

  // int32 gnss_sky_speed_count = 21;
  if (this->gnss_sky_speed_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gnss_sky_speed_count());
  }

  // int32 gnss_heading_count = 22;
  if (this->gnss_heading_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gnss_heading_count());
  }

  // int32 odom_eastward_speed_count = 23;
  if (this->odom_eastward_speed_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->odom_eastward_speed_count());
  }

  // int32 odom_northward_speed_count = 24;
  if (this->odom_northward_speed_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->odom_northward_speed_count());
  }

  // int32 odom_sky_speed_count = 25;
  if (this->odom_sky_speed_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->odom_sky_speed_count());
  }

  // int32 laser_eastward_position_count = 26;
  if (this->laser_eastward_position_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->laser_eastward_position_count());
  }

  // int32 laser_northward_position_count = 27;
  if (this->laser_northward_position_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->laser_northward_position_count());
  }

  // int32 laser_sky_position_count = 28;
  if (this->laser_sky_position_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->laser_sky_position_count());
  }

  // int32 laser_heading_count = 29;
  if (this->laser_heading_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->laser_heading_count());
  }

  // int32 time_consuming = 30;
  if (this->time_consuming() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time_consuming());
  }

  // uint32 fusion_model = 31;
  if (this->fusion_model() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fusion_model());
  }

  // uint32 status = 32;
  if (this->status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Filterstatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_imu_msgs.Filterstatus)
  GOOGLE_DCHECK_NE(&from, this);
  const Filterstatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Filterstatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_imu_msgs.Filterstatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_imu_msgs.Filterstatus)
    MergeFrom(*source);
  }
}

void Filterstatus::MergeFrom(const Filterstatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_imu_msgs.Filterstatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.update() != 0) {
    set_update(from.update());
  }
  if (from.frame_count() != 0) {
    set_frame_count(from.frame_count());
  }
  if (from.x_gyro_zero_bias() != 0) {
    set_x_gyro_zero_bias(from.x_gyro_zero_bias());
  }
  if (from.y_gyro_zero_bias() != 0) {
    set_y_gyro_zero_bias(from.y_gyro_zero_bias());
  }
  if (from.z_gyro_zero_bias() != 0) {
    set_z_gyro_zero_bias(from.z_gyro_zero_bias());
  }
  if (from.x_acce_zero_bias() != 0) {
    set_x_acce_zero_bias(from.x_acce_zero_bias());
  }
  if (from.y_acce_zero_bias() != 0) {
    set_y_acce_zero_bias(from.y_acce_zero_bias());
  }
  if (from.z_acce_zero_bias() != 0) {
    set_z_acce_zero_bias(from.z_acce_zero_bias());
  }
  if (from.heading_install_deviation() != 0) {
    set_heading_install_deviation(from.heading_install_deviation());
  }
  if (from.scale_factor_error() != 0) {
    set_scale_factor_error(from.scale_factor_error());
  }
  if (from.pitch_install_deviation() != 0) {
    set_pitch_install_deviation(from.pitch_install_deviation());
  }
  if (from.eastward_position_deviation() != 0) {
    set_eastward_position_deviation(from.eastward_position_deviation());
  }
  if (from.northward_position_deviation() != 0) {
    set_northward_position_deviation(from.northward_position_deviation());
  }
  if (from.sky_position_deviation() != 0) {
    set_sky_position_deviation(from.sky_position_deviation());
  }
  if (from.heading_deviation() != 0) {
    set_heading_deviation(from.heading_deviation());
  }
  if (from.gnss_eastward_position_count() != 0) {
    set_gnss_eastward_position_count(from.gnss_eastward_position_count());
  }
  if (from.gnss_northward_position_count() != 0) {
    set_gnss_northward_position_count(from.gnss_northward_position_count());
  }
  if (from.gnss_sky_position_count() != 0) {
    set_gnss_sky_position_count(from.gnss_sky_position_count());
  }
  if (from.gnss_eastward_speed_count() != 0) {
    set_gnss_eastward_speed_count(from.gnss_eastward_speed_count());
  }
  if (from.gnss_northward_speed_count() != 0) {
    set_gnss_northward_speed_count(from.gnss_northward_speed_count());
  }
  if (from.gnss_sky_speed_count() != 0) {
    set_gnss_sky_speed_count(from.gnss_sky_speed_count());
  }
  if (from.gnss_heading_count() != 0) {
    set_gnss_heading_count(from.gnss_heading_count());
  }
  if (from.odom_eastward_speed_count() != 0) {
    set_odom_eastward_speed_count(from.odom_eastward_speed_count());
  }
  if (from.odom_northward_speed_count() != 0) {
    set_odom_northward_speed_count(from.odom_northward_speed_count());
  }
  if (from.odom_sky_speed_count() != 0) {
    set_odom_sky_speed_count(from.odom_sky_speed_count());
  }
  if (from.laser_eastward_position_count() != 0) {
    set_laser_eastward_position_count(from.laser_eastward_position_count());
  }
  if (from.laser_northward_position_count() != 0) {
    set_laser_northward_position_count(from.laser_northward_position_count());
  }
  if (from.laser_sky_position_count() != 0) {
    set_laser_sky_position_count(from.laser_sky_position_count());
  }
  if (from.laser_heading_count() != 0) {
    set_laser_heading_count(from.laser_heading_count());
  }
  if (from.time_consuming() != 0) {
    set_time_consuming(from.time_consuming());
  }
  if (from.fusion_model() != 0) {
    set_fusion_model(from.fusion_model());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Filterstatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_imu_msgs.Filterstatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filterstatus::CopyFrom(const Filterstatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_imu_msgs.Filterstatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filterstatus::IsInitialized() const {
  return true;
}

void Filterstatus::Swap(Filterstatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Filterstatus::InternalSwap(Filterstatus* other) {
  using std::swap;
  swap(update_, other->update_);
  swap(frame_count_, other->frame_count_);
  swap(x_gyro_zero_bias_, other->x_gyro_zero_bias_);
  swap(y_gyro_zero_bias_, other->y_gyro_zero_bias_);
  swap(z_gyro_zero_bias_, other->z_gyro_zero_bias_);
  swap(x_acce_zero_bias_, other->x_acce_zero_bias_);
  swap(y_acce_zero_bias_, other->y_acce_zero_bias_);
  swap(z_acce_zero_bias_, other->z_acce_zero_bias_);
  swap(heading_install_deviation_, other->heading_install_deviation_);
  swap(scale_factor_error_, other->scale_factor_error_);
  swap(pitch_install_deviation_, other->pitch_install_deviation_);
  swap(eastward_position_deviation_, other->eastward_position_deviation_);
  swap(northward_position_deviation_, other->northward_position_deviation_);
  swap(sky_position_deviation_, other->sky_position_deviation_);
  swap(heading_deviation_, other->heading_deviation_);
  swap(gnss_eastward_position_count_, other->gnss_eastward_position_count_);
  swap(gnss_northward_position_count_, other->gnss_northward_position_count_);
  swap(gnss_sky_position_count_, other->gnss_sky_position_count_);
  swap(gnss_eastward_speed_count_, other->gnss_eastward_speed_count_);
  swap(gnss_northward_speed_count_, other->gnss_northward_speed_count_);
  swap(gnss_sky_speed_count_, other->gnss_sky_speed_count_);
  swap(gnss_heading_count_, other->gnss_heading_count_);
  swap(odom_eastward_speed_count_, other->odom_eastward_speed_count_);
  swap(odom_northward_speed_count_, other->odom_northward_speed_count_);
  swap(odom_sky_speed_count_, other->odom_sky_speed_count_);
  swap(laser_eastward_position_count_, other->laser_eastward_position_count_);
  swap(laser_northward_position_count_, other->laser_northward_position_count_);
  swap(laser_sky_position_count_, other->laser_sky_position_count_);
  swap(laser_heading_count_, other->laser_heading_count_);
  swap(time_consuming_, other->time_consuming_);
  swap(fusion_model_, other->fusion_model_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Filterstatus::GetMetadata() const {
  protobuf_sensor_5fimu_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fimu_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ivlidarmatching::InitAsDefaultInstance() {
  ::sensor_imu_msgs::_Ivlidarmatching_default_instance_._instance.get_mutable()->header_ = const_cast< ::common_msgs::Header*>(
      ::common_msgs::Header::internal_default_instance());
}
void Ivlidarmatching::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ivlidarmatching::kHeaderFieldNumber;
const int Ivlidarmatching::kUpdateFieldNumber;
const int Ivlidarmatching::kWeekFieldNumber;
const int Ivlidarmatching::kUtctimeFieldNumber;
const int Ivlidarmatching::kRollFieldNumber;
const int Ivlidarmatching::kPitchFieldNumber;
const int Ivlidarmatching::kYawFieldNumber;
const int Ivlidarmatching::kLatFieldNumber;
const int Ivlidarmatching::kLonFieldNumber;
const int Ivlidarmatching::kHeightFieldNumber;
const int Ivlidarmatching::kXgFieldNumber;
const int Ivlidarmatching::kYgFieldNumber;
const int Ivlidarmatching::kFusionTypeFieldNumber;
const int Ivlidarmatching::kInitOnceFieldNumber;
const int Ivlidarmatching::kIsDegeneracyFieldNumber;
const int Ivlidarmatching::kIsLocalizationAreaFieldNumber;
const int Ivlidarmatching::kIsInMapFieldNumber;
const int Ivlidarmatching::kMatchingScoreFieldNumber;
const int Ivlidarmatching::kLatStdFieldNumber;
const int Ivlidarmatching::kLonStdFieldNumber;
const int Ivlidarmatching::kHeightStdFieldNumber;
const int Ivlidarmatching::kYawStdFieldNumber;
const int Ivlidarmatching::kVersionFieldNumber;
const int Ivlidarmatching::kGmmScoresFieldNumber;
const int Ivlidarmatching::kGmmOffsetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ivlidarmatching::Ivlidarmatching()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsIvlidarmatching();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sensor_imu_msgs.Ivlidarmatching)
}
Ivlidarmatching::Ivlidarmatching(const Ivlidarmatching& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      gmm_scores_(from.gmm_scores_),
      gmm_offsets_(from.gmm_offsets_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_header()) {
    header_ = new ::common_msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&update_, &from.update_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_in_map_) -
    reinterpret_cast<char*>(&update_)) + sizeof(is_in_map_));
  // @@protoc_insertion_point(copy_constructor:sensor_imu_msgs.Ivlidarmatching)
}

void Ivlidarmatching::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_in_map_) -
      reinterpret_cast<char*>(&header_)) + sizeof(is_in_map_));
  _cached_size_ = 0;
}

Ivlidarmatching::~Ivlidarmatching() {
  // @@protoc_insertion_point(destructor:sensor_imu_msgs.Ivlidarmatching)
  SharedDtor();
}

void Ivlidarmatching::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void Ivlidarmatching::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ivlidarmatching::descriptor() {
  ::protobuf_sensor_5fimu_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fimu_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ivlidarmatching& Ivlidarmatching::default_instance() {
  ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsIvlidarmatching();
  return *internal_default_instance();
}

Ivlidarmatching* Ivlidarmatching::New(::google::protobuf::Arena* arena) const {
  Ivlidarmatching* n = new Ivlidarmatching;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ivlidarmatching::Clear() {
// @@protoc_insertion_point(message_clear_start:sensor_imu_msgs.Ivlidarmatching)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gmm_scores_.Clear();
  gmm_offsets_.Clear();
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&update_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_in_map_) -
      reinterpret_cast<char*>(&update_)) + sizeof(is_in_map_));
  _internal_metadata_.Clear();
}

bool Ivlidarmatching::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sensor_imu_msgs.Ivlidarmatching)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common_msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool update = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 week = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double utctime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &utctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double roll = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pitch = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lat = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lon = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double xg = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yg = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fusion_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fusion_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 init_once = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_once_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_degeneracy = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_degeneracy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 is_localization_area = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_localization_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 is_in_map = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_in_map_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double matching_score = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &matching_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lat_std = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lon_std = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height_std = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw_std = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sensor_imu_msgs.Ivlidarmatching.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float gmm_scores = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_gmm_scores())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 197 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 194u, input, this->mutable_gmm_scores())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 gmm_offsets = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gmm_offsets())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 202u, input, this->mutable_gmm_offsets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sensor_imu_msgs.Ivlidarmatching)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sensor_imu_msgs.Ivlidarmatching)
  return false;
#undef DO_
}

void Ivlidarmatching::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sensor_imu_msgs.Ivlidarmatching)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // bool update = 2;
  if (this->update() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->update(), output);
  }

  // int32 week = 3;
  if (this->week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->week(), output);
  }

  // double utctime = 4;
  if (this->utctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->utctime(), output);
  }

  // double roll = 5;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->roll(), output);
  }

  // double pitch = 6;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pitch(), output);
  }

  // double yaw = 7;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->yaw(), output);
  }

  // double lat = 8;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->lat(), output);
  }

  // double lon = 9;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->lon(), output);
  }

  // double height = 10;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->height(), output);
  }

  // double xg = 11;
  if (this->xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->xg(), output);
  }

  // double yg = 12;
  if (this->yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->yg(), output);
  }

  // uint32 fusion_type = 13;
  if (this->fusion_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->fusion_type(), output);
  }

  // int32 init_once = 14;
  if (this->init_once() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->init_once(), output);
  }

  // int32 is_degeneracy = 15;
  if (this->is_degeneracy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->is_degeneracy(), output);
  }

  // uint32 is_localization_area = 16;
  if (this->is_localization_area() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->is_localization_area(), output);
  }

  // uint32 is_in_map = 17;
  if (this->is_in_map() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->is_in_map(), output);
  }

  // double matching_score = 18;
  if (this->matching_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->matching_score(), output);
  }

  // double lat_std = 19;
  if (this->lat_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->lat_std(), output);
  }

  // double lon_std = 20;
  if (this->lon_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->lon_std(), output);
  }

  // double height_std = 21;
  if (this->height_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->height_std(), output);
  }

  // double yaw_std = 22;
  if (this->yaw_std() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->yaw_std(), output);
  }

  // string version = 23;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sensor_imu_msgs.Ivlidarmatching.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->version(), output);
  }

  // repeated float gmm_scores = 24;
  if (this->gmm_scores_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(24, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _gmm_scores_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->gmm_scores().data(), this->gmm_scores_size(), output);
  }

  // repeated int32 gmm_offsets = 25;
  if (this->gmm_offsets_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(25, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _gmm_offsets_cached_byte_size_));
  }
  for (int i = 0, n = this->gmm_offsets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->gmm_offsets(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sensor_imu_msgs.Ivlidarmatching)
}

::google::protobuf::uint8* Ivlidarmatching::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sensor_imu_msgs.Ivlidarmatching)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // bool update = 2;
  if (this->update() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->update(), target);
  }

  // int32 week = 3;
  if (this->week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->week(), target);
  }

  // double utctime = 4;
  if (this->utctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->utctime(), target);
  }

  // double roll = 5;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->roll(), target);
  }

  // double pitch = 6;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pitch(), target);
  }

  // double yaw = 7;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->yaw(), target);
  }

  // double lat = 8;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->lat(), target);
  }

  // double lon = 9;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->lon(), target);
  }

  // double height = 10;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->height(), target);
  }

  // double xg = 11;
  if (this->xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->xg(), target);
  }

  // double yg = 12;
  if (this->yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->yg(), target);
  }

  // uint32 fusion_type = 13;
  if (this->fusion_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->fusion_type(), target);
  }

  // int32 init_once = 14;
  if (this->init_once() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->init_once(), target);
  }

  // int32 is_degeneracy = 15;
  if (this->is_degeneracy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->is_degeneracy(), target);
  }

  // uint32 is_localization_area = 16;
  if (this->is_localization_area() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->is_localization_area(), target);
  }

  // uint32 is_in_map = 17;
  if (this->is_in_map() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->is_in_map(), target);
  }

  // double matching_score = 18;
  if (this->matching_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->matching_score(), target);
  }

  // double lat_std = 19;
  if (this->lat_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->lat_std(), target);
  }

  // double lon_std = 20;
  if (this->lon_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->lon_std(), target);
  }

  // double height_std = 21;
  if (this->height_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->height_std(), target);
  }

  // double yaw_std = 22;
  if (this->yaw_std() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->yaw_std(), target);
  }

  // string version = 23;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sensor_imu_msgs.Ivlidarmatching.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->version(), target);
  }

  // repeated float gmm_scores = 24;
  if (this->gmm_scores_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      24,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _gmm_scores_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->gmm_scores_, target);
  }

  // repeated int32 gmm_offsets = 25;
  if (this->gmm_offsets_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      25,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _gmm_offsets_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->gmm_offsets_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensor_imu_msgs.Ivlidarmatching)
  return target;
}

size_t Ivlidarmatching::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensor_imu_msgs.Ivlidarmatching)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float gmm_scores = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->gmm_scores_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _gmm_scores_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 gmm_offsets = 25;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->gmm_offsets_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _gmm_offsets_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string version = 23;
  if (this->version().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // bool update = 2;
  if (this->update() != 0) {
    total_size += 1 + 1;
  }

  // int32 week = 3;
  if (this->week() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->week());
  }

  // double utctime = 4;
  if (this->utctime() != 0) {
    total_size += 1 + 8;
  }

  // double roll = 5;
  if (this->roll() != 0) {
    total_size += 1 + 8;
  }

  // double pitch = 6;
  if (this->pitch() != 0) {
    total_size += 1 + 8;
  }

  // double yaw = 7;
  if (this->yaw() != 0) {
    total_size += 1 + 8;
  }

  // double lat = 8;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // double lon = 9;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  // double height = 10;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // double xg = 11;
  if (this->xg() != 0) {
    total_size += 1 + 8;
  }

  // double yg = 12;
  if (this->yg() != 0) {
    total_size += 1 + 8;
  }

  // uint32 fusion_type = 13;
  if (this->fusion_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fusion_type());
  }

  // int32 init_once = 14;
  if (this->init_once() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->init_once());
  }

  // int32 is_degeneracy = 15;
  if (this->is_degeneracy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_degeneracy());
  }

  // uint32 is_localization_area = 16;
  if (this->is_localization_area() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->is_localization_area());
  }

  // double matching_score = 18;
  if (this->matching_score() != 0) {
    total_size += 2 + 8;
  }

  // double lat_std = 19;
  if (this->lat_std() != 0) {
    total_size += 2 + 8;
  }

  // double lon_std = 20;
  if (this->lon_std() != 0) {
    total_size += 2 + 8;
  }

  // double height_std = 21;
  if (this->height_std() != 0) {
    total_size += 2 + 8;
  }

  // double yaw_std = 22;
  if (this->yaw_std() != 0) {
    total_size += 2 + 8;
  }

  // uint32 is_in_map = 17;
  if (this->is_in_map() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->is_in_map());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ivlidarmatching::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensor_imu_msgs.Ivlidarmatching)
  GOOGLE_DCHECK_NE(&from, this);
  const Ivlidarmatching* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ivlidarmatching>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensor_imu_msgs.Ivlidarmatching)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensor_imu_msgs.Ivlidarmatching)
    MergeFrom(*source);
  }
}

void Ivlidarmatching::MergeFrom(const Ivlidarmatching& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensor_imu_msgs.Ivlidarmatching)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gmm_scores_.MergeFrom(from.gmm_scores_);
  gmm_offsets_.MergeFrom(from.gmm_offsets_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_header()) {
    mutable_header()->::common_msgs::Header::MergeFrom(from.header());
  }
  if (from.update() != 0) {
    set_update(from.update());
  }
  if (from.week() != 0) {
    set_week(from.week());
  }
  if (from.utctime() != 0) {
    set_utctime(from.utctime());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.xg() != 0) {
    set_xg(from.xg());
  }
  if (from.yg() != 0) {
    set_yg(from.yg());
  }
  if (from.fusion_type() != 0) {
    set_fusion_type(from.fusion_type());
  }
  if (from.init_once() != 0) {
    set_init_once(from.init_once());
  }
  if (from.is_degeneracy() != 0) {
    set_is_degeneracy(from.is_degeneracy());
  }
  if (from.is_localization_area() != 0) {
    set_is_localization_area(from.is_localization_area());
  }
  if (from.matching_score() != 0) {
    set_matching_score(from.matching_score());
  }
  if (from.lat_std() != 0) {
    set_lat_std(from.lat_std());
  }
  if (from.lon_std() != 0) {
    set_lon_std(from.lon_std());
  }
  if (from.height_std() != 0) {
    set_height_std(from.height_std());
  }
  if (from.yaw_std() != 0) {
    set_yaw_std(from.yaw_std());
  }
  if (from.is_in_map() != 0) {
    set_is_in_map(from.is_in_map());
  }
}

void Ivlidarmatching::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensor_imu_msgs.Ivlidarmatching)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ivlidarmatching::CopyFrom(const Ivlidarmatching& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensor_imu_msgs.Ivlidarmatching)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ivlidarmatching::IsInitialized() const {
  return true;
}

void Ivlidarmatching::Swap(Ivlidarmatching* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ivlidarmatching::InternalSwap(Ivlidarmatching* other) {
  using std::swap;
  gmm_scores_.InternalSwap(&other->gmm_scores_);
  gmm_offsets_.InternalSwap(&other->gmm_offsets_);
  version_.Swap(&other->version_);
  swap(header_, other->header_);
  swap(update_, other->update_);
  swap(week_, other->week_);
  swap(utctime_, other->utctime_);
  swap(roll_, other->roll_);
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
  swap(lat_, other->lat_);
  swap(lon_, other->lon_);
  swap(height_, other->height_);
  swap(xg_, other->xg_);
  swap(yg_, other->yg_);
  swap(fusion_type_, other->fusion_type_);
  swap(init_once_, other->init_once_);
  swap(is_degeneracy_, other->is_degeneracy_);
  swap(is_localization_area_, other->is_localization_area_);
  swap(matching_score_, other->matching_score_);
  swap(lat_std_, other->lat_std_);
  swap(lon_std_, other->lon_std_);
  swap(height_std_, other->height_std_);
  swap(yaw_std_, other->yaw_std_);
  swap(is_in_map_, other->is_in_map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ivlidarmatching::GetMetadata() const {
  protobuf_sensor_5fimu_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_sensor_5fimu_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sensor_imu_msgs

// @@protoc_insertion_point(global_scope)
