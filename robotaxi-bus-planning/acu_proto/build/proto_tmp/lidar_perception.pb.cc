// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lidar_perception.proto

#include "lidar_perception.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace calmcar {
namespace perception {
class LidarObjectsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LidarObjects>
      _instance;
} _LidarObjects_default_instance_;
class FreespaceSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FreespaceSet>
      _instance;
} _FreespaceSet_default_instance_;
class LidarFreespaceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LidarFreespace>
      _instance;
} _LidarFreespace_default_instance_;
class LidarPerceptionFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LidarPerceptionFrame>
      _instance;
} _LidarPerceptionFrame_default_instance_;
}  // namespace perception
}  // namespace calmcar
namespace protobuf_lidar_5fperception_2eproto {
void InitDefaultsLidarObjectsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_perception_5ftypes_2eproto::InitDefaultsPoint();
  {
    void* ptr = &::calmcar::perception::_LidarObjects_default_instance_;
    new (ptr) ::calmcar::perception::LidarObjects();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::LidarObjects::InitAsDefaultInstance();
}

void InitDefaultsLidarObjects() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLidarObjectsImpl);
}

void InitDefaultsFreespaceSetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::calmcar::perception::_FreespaceSet_default_instance_;
    new (ptr) ::calmcar::perception::FreespaceSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::FreespaceSet::InitAsDefaultInstance();
}

void InitDefaultsFreespaceSet() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFreespaceSetImpl);
}

void InitDefaultsLidarFreespaceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_lidar_5fperception_2eproto::InitDefaultsFreespaceSet();
  {
    void* ptr = &::calmcar::perception::_LidarFreespace_default_instance_;
    new (ptr) ::calmcar::perception::LidarFreespace();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::LidarFreespace::InitAsDefaultInstance();
}

void InitDefaultsLidarFreespace() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLidarFreespaceImpl);
}

void InitDefaultsLidarPerceptionFrameImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_lidar_5fperception_2eproto::InitDefaultsLidarObjects();
  protobuf_lidar_5fperception_2eproto::InitDefaultsLidarFreespace();
  {
    void* ptr = &::calmcar::perception::_LidarPerceptionFrame_default_instance_;
    new (ptr) ::calmcar::perception::LidarPerceptionFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::calmcar::perception::LidarPerceptionFrame::InitAsDefaultInstance();
}

void InitDefaultsLidarPerceptionFrame() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLidarPerceptionFrameImpl);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, frame_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, lidar_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, class__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, class_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, subclass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, subclass_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, lat_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, long_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, vertical_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, relative_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, relative_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, absolute_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, absolute_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, motion_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, closest_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarObjects, closest_surface_center_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreespaceSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreespaceSet, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreespaceSet, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreespaceSet, class_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreespaceSet, edge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreespaceSet, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreespaceSet, is_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreespaceSet, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::FreespaceSet, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarFreespace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarFreespace, point_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarFreespace, closed_contour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarFreespace, freespace_set_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarPerceptionFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarPerceptionFrame, lidar_object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::perception::LidarPerceptionFrame, lidar_fsd_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::calmcar::perception::LidarObjects)},
  { 28, -1, sizeof(::calmcar::perception::FreespaceSet)},
  { 41, -1, sizeof(::calmcar::perception::LidarFreespace)},
  { 49, -1, sizeof(::calmcar::perception::LidarPerceptionFrame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_LidarObjects_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_FreespaceSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_LidarFreespace_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::calmcar::perception::_LidarPerceptionFrame_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "lidar_perception.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026lidar_perception.proto\022\022calmcar.percep"
      "tion\032\036google/protobuf/wrappers.proto\032\026pe"
      "rception_types.proto\032\020perception.proto\"\211"
      "\007\n\014LidarObjects\022\023\n\013frame_index\030\001 \001(\003\022\021\n\t"
      "timestamp\030\002 \001(\003\022\023\n\013lidar_index\030\003 \001(\r\022\n\n\002"
      "id\030\004 \001(\003\022\016\n\006class_\030\005 \001(\003\022\022\n\nclass_name\030\006"
      " \001(\t\022\020\n\010subclass\030\007 \001(\003\022\025\n\rsubclass_name\030"
      "\010 \001(\t\022\022\n\nconfidence\030\t \001(\002\022\024\n\014lat_distanc"
      "e\030\n \001(\002\022\025\n\rlong_distance\030\013 \001(\002\022\031\n\021vertic"
      "al_distance\030\014 \001(\002\0224\n\021relative_velocity\030\r"
      " \001(\0132\031.calmcar.perception.Point\0228\n\025relat"
      "ive_acceleration\030\016 \001(\0132\031.calmcar.percept"
      "ion.Point\0224\n\021absolute_velocity\030\017 \001(\0132\031.c"
      "almcar.perception.Point\0228\n\025absolute_acce"
      "leration\030\020 \001(\0132\031.calmcar.perception.Poin"
      "t\022\017\n\007heading\030\021 \001(\002\022D\n\rmotion_status\030\022 \001("
      "\0162-.calmcar.perception.LidarObjects.Moti"
      "onStatus\022\r\n\005width\030\023 \001(\002\022\016\n\006height\030\024 \001(\002\022"
      "\016\n\006length\030\025 \001(\002\0223\n\020closest_distance\030\026 \001("
      "\0132\031.calmcar.perception.Point\0229\n\026closest_"
      "surface_center\030\027 \001(\0132\031.calmcar.perceptio"
      "n.Point\"\260\001\n\014MotionStatus\022\031\n\025MOTION_STATU"
      "S_UNKNOWN\020\000\022\030\n\024MOTION_STATUS_PARKED\020\001\022\031\n"
      "\025MOTION_STATUS_STOPPED\020\002\022\030\n\024MOTION_STATU"
      "S_MOVING\020\003\022\032\n\026MOTION_STATUS_ONCOMING\020\004\022\032"
      "\n\026MOTION_STATUS_CROSSING\020\005\"\202\001\n\014Freespace"
      "Set\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\022\n\nclass_type\030"
      "\003 \001(\r\022\014\n\004edge\030\004 \001(\r\022\n\n\002id\030\005 \001(\r\022\020\n\010is_va"
      "lid\030\006 \001(\010\022\t\n\001z\030\007 \001(\002\022\021\n\ttimestamp\030\010 \001(\003\""
      "t\n\016LidarFreespace\022\021\n\tpoint_num\030\001 \001(\r\022\026\n\016"
      "closed_contour\030\002 \001(\r\0227\n\rfreespace_set\030\003 "
      "\003(\0132 .calmcar.perception.FreespaceSet\"\205\001"
      "\n\024LidarPerceptionFrame\0226\n\014lidar_object\030\001"
      " \003(\0132 .calmcar.perception.LidarObjects\0225"
      "\n\tlidar_fsd\030\002 \001(\0132\".calmcar.perception.L"
      "idarFreespaceb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1421);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lidar_perception.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
  ::protobuf_perception_5ftypes_2eproto::AddDescriptors();
  ::protobuf_perception_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_lidar_5fperception_2eproto
namespace calmcar {
namespace perception {
const ::google::protobuf::EnumDescriptor* LidarObjects_MotionStatus_descriptor() {
  protobuf_lidar_5fperception_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_lidar_5fperception_2eproto::file_level_enum_descriptors[0];
}
bool LidarObjects_MotionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LidarObjects_MotionStatus LidarObjects::MOTION_STATUS_UNKNOWN;
const LidarObjects_MotionStatus LidarObjects::MOTION_STATUS_PARKED;
const LidarObjects_MotionStatus LidarObjects::MOTION_STATUS_STOPPED;
const LidarObjects_MotionStatus LidarObjects::MOTION_STATUS_MOVING;
const LidarObjects_MotionStatus LidarObjects::MOTION_STATUS_ONCOMING;
const LidarObjects_MotionStatus LidarObjects::MOTION_STATUS_CROSSING;
const LidarObjects_MotionStatus LidarObjects::MotionStatus_MIN;
const LidarObjects_MotionStatus LidarObjects::MotionStatus_MAX;
const int LidarObjects::MotionStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void LidarObjects::InitAsDefaultInstance() {
  ::calmcar::perception::_LidarObjects_default_instance_._instance.get_mutable()->relative_velocity_ = const_cast< ::calmcar::perception::Point*>(
      ::calmcar::perception::Point::internal_default_instance());
  ::calmcar::perception::_LidarObjects_default_instance_._instance.get_mutable()->relative_acceleration_ = const_cast< ::calmcar::perception::Point*>(
      ::calmcar::perception::Point::internal_default_instance());
  ::calmcar::perception::_LidarObjects_default_instance_._instance.get_mutable()->absolute_velocity_ = const_cast< ::calmcar::perception::Point*>(
      ::calmcar::perception::Point::internal_default_instance());
  ::calmcar::perception::_LidarObjects_default_instance_._instance.get_mutable()->absolute_acceleration_ = const_cast< ::calmcar::perception::Point*>(
      ::calmcar::perception::Point::internal_default_instance());
  ::calmcar::perception::_LidarObjects_default_instance_._instance.get_mutable()->closest_distance_ = const_cast< ::calmcar::perception::Point*>(
      ::calmcar::perception::Point::internal_default_instance());
  ::calmcar::perception::_LidarObjects_default_instance_._instance.get_mutable()->closest_surface_center_ = const_cast< ::calmcar::perception::Point*>(
      ::calmcar::perception::Point::internal_default_instance());
}
void LidarObjects::clear_relative_velocity() {
  if (GetArenaNoVirtual() == NULL && relative_velocity_ != NULL) {
    delete relative_velocity_;
  }
  relative_velocity_ = NULL;
}
void LidarObjects::clear_relative_acceleration() {
  if (GetArenaNoVirtual() == NULL && relative_acceleration_ != NULL) {
    delete relative_acceleration_;
  }
  relative_acceleration_ = NULL;
}
void LidarObjects::clear_absolute_velocity() {
  if (GetArenaNoVirtual() == NULL && absolute_velocity_ != NULL) {
    delete absolute_velocity_;
  }
  absolute_velocity_ = NULL;
}
void LidarObjects::clear_absolute_acceleration() {
  if (GetArenaNoVirtual() == NULL && absolute_acceleration_ != NULL) {
    delete absolute_acceleration_;
  }
  absolute_acceleration_ = NULL;
}
void LidarObjects::clear_closest_distance() {
  if (GetArenaNoVirtual() == NULL && closest_distance_ != NULL) {
    delete closest_distance_;
  }
  closest_distance_ = NULL;
}
void LidarObjects::clear_closest_surface_center() {
  if (GetArenaNoVirtual() == NULL && closest_surface_center_ != NULL) {
    delete closest_surface_center_;
  }
  closest_surface_center_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LidarObjects::kFrameIndexFieldNumber;
const int LidarObjects::kTimestampFieldNumber;
const int LidarObjects::kLidarIndexFieldNumber;
const int LidarObjects::kIdFieldNumber;
const int LidarObjects::kClassFieldNumber;
const int LidarObjects::kClassNameFieldNumber;
const int LidarObjects::kSubclassFieldNumber;
const int LidarObjects::kSubclassNameFieldNumber;
const int LidarObjects::kConfidenceFieldNumber;
const int LidarObjects::kLatDistanceFieldNumber;
const int LidarObjects::kLongDistanceFieldNumber;
const int LidarObjects::kVerticalDistanceFieldNumber;
const int LidarObjects::kRelativeVelocityFieldNumber;
const int LidarObjects::kRelativeAccelerationFieldNumber;
const int LidarObjects::kAbsoluteVelocityFieldNumber;
const int LidarObjects::kAbsoluteAccelerationFieldNumber;
const int LidarObjects::kHeadingFieldNumber;
const int LidarObjects::kMotionStatusFieldNumber;
const int LidarObjects::kWidthFieldNumber;
const int LidarObjects::kHeightFieldNumber;
const int LidarObjects::kLengthFieldNumber;
const int LidarObjects::kClosestDistanceFieldNumber;
const int LidarObjects::kClosestSurfaceCenterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LidarObjects::LidarObjects()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_lidar_5fperception_2eproto::InitDefaultsLidarObjects();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.LidarObjects)
}
LidarObjects::LidarObjects(const LidarObjects& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.class_name().size() > 0) {
    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  subclass_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subclass_name().size() > 0) {
    subclass_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subclass_name_);
  }
  if (from.has_relative_velocity()) {
    relative_velocity_ = new ::calmcar::perception::Point(*from.relative_velocity_);
  } else {
    relative_velocity_ = NULL;
  }
  if (from.has_relative_acceleration()) {
    relative_acceleration_ = new ::calmcar::perception::Point(*from.relative_acceleration_);
  } else {
    relative_acceleration_ = NULL;
  }
  if (from.has_absolute_velocity()) {
    absolute_velocity_ = new ::calmcar::perception::Point(*from.absolute_velocity_);
  } else {
    absolute_velocity_ = NULL;
  }
  if (from.has_absolute_acceleration()) {
    absolute_acceleration_ = new ::calmcar::perception::Point(*from.absolute_acceleration_);
  } else {
    absolute_acceleration_ = NULL;
  }
  if (from.has_closest_distance()) {
    closest_distance_ = new ::calmcar::perception::Point(*from.closest_distance_);
  } else {
    closest_distance_ = NULL;
  }
  if (from.has_closest_surface_center()) {
    closest_surface_center_ = new ::calmcar::perception::Point(*from.closest_surface_center_);
  } else {
    closest_surface_center_ = NULL;
  }
  ::memcpy(&frame_index_, &from.frame_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&frame_index_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.LidarObjects)
}

void LidarObjects::SharedCtor() {
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subclass_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&relative_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&relative_velocity_)) + sizeof(length_));
  _cached_size_ = 0;
}

LidarObjects::~LidarObjects() {
  // @@protoc_insertion_point(destructor:calmcar.perception.LidarObjects)
  SharedDtor();
}

void LidarObjects::SharedDtor() {
  class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subclass_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete relative_velocity_;
  if (this != internal_default_instance()) delete relative_acceleration_;
  if (this != internal_default_instance()) delete absolute_velocity_;
  if (this != internal_default_instance()) delete absolute_acceleration_;
  if (this != internal_default_instance()) delete closest_distance_;
  if (this != internal_default_instance()) delete closest_surface_center_;
}

void LidarObjects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LidarObjects::descriptor() {
  ::protobuf_lidar_5fperception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lidar_5fperception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LidarObjects& LidarObjects::default_instance() {
  ::protobuf_lidar_5fperception_2eproto::InitDefaultsLidarObjects();
  return *internal_default_instance();
}

LidarObjects* LidarObjects::New(::google::protobuf::Arena* arena) const {
  LidarObjects* n = new LidarObjects;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LidarObjects::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.LidarObjects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subclass_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && relative_velocity_ != NULL) {
    delete relative_velocity_;
  }
  relative_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && relative_acceleration_ != NULL) {
    delete relative_acceleration_;
  }
  relative_acceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && absolute_velocity_ != NULL) {
    delete absolute_velocity_;
  }
  absolute_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && absolute_acceleration_ != NULL) {
    delete absolute_acceleration_;
  }
  absolute_acceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && closest_distance_ != NULL) {
    delete closest_distance_;
  }
  closest_distance_ = NULL;
  if (GetArenaNoVirtual() == NULL && closest_surface_center_ != NULL) {
    delete closest_surface_center_;
  }
  closest_surface_center_ = NULL;
  ::memset(&frame_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&frame_index_)) + sizeof(length_));
  _internal_metadata_.Clear();
}

bool LidarObjects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.LidarObjects)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 frame_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frame_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lidar_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lidar_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 class_ = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &class__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string class_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->class_name().data(), static_cast<int>(this->class_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.LidarObjects.class_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 subclass = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &subclass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subclass_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subclass_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subclass_name().data(), static_cast<int>(this->subclass_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "calmcar.perception.LidarObjects.subclass_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat_distance = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float long_distance = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &long_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vertical_distance = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vertical_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Point relative_velocity = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Point relative_acceleration = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Point absolute_velocity = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_absolute_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Point absolute_acceleration = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_absolute_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.LidarObjects.MotionStatus motion_status = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_motion_status(static_cast< ::calmcar::perception::LidarObjects_MotionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float height = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Point closest_distance = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_closest_distance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.Point closest_surface_center = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_closest_surface_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.LidarObjects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.LidarObjects)
  return false;
#undef DO_
}

void LidarObjects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.LidarObjects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frame_index = 1;
  if (this->frame_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->frame_index(), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // uint32 lidar_index = 3;
  if (this->lidar_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lidar_index(), output);
  }

  // int64 id = 4;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->id(), output);
  }

  // int64 class_ = 5;
  if (this->class_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->class_(), output);
  }

  // string class_name = 6;
  if (this->class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.LidarObjects.class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->class_name(), output);
  }

  // int64 subclass = 7;
  if (this->subclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->subclass(), output);
  }

  // string subclass_name = 8;
  if (this->subclass_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subclass_name().data(), static_cast<int>(this->subclass_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.LidarObjects.subclass_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->subclass_name(), output);
  }

  // float confidence = 9;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->confidence(), output);
  }

  // float lat_distance = 10;
  if (this->lat_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->lat_distance(), output);
  }

  // float long_distance = 11;
  if (this->long_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->long_distance(), output);
  }

  // float vertical_distance = 12;
  if (this->vertical_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->vertical_distance(), output);
  }

  // .calmcar.perception.Point relative_velocity = 13;
  if (this->has_relative_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->relative_velocity_, output);
  }

  // .calmcar.perception.Point relative_acceleration = 14;
  if (this->has_relative_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->relative_acceleration_, output);
  }

  // .calmcar.perception.Point absolute_velocity = 15;
  if (this->has_absolute_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->absolute_velocity_, output);
  }

  // .calmcar.perception.Point absolute_acceleration = 16;
  if (this->has_absolute_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->absolute_acceleration_, output);
  }

  // float heading = 17;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->heading(), output);
  }

  // .calmcar.perception.LidarObjects.MotionStatus motion_status = 18;
  if (this->motion_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->motion_status(), output);
  }

  // float width = 19;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->width(), output);
  }

  // float height = 20;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->height(), output);
  }

  // float length = 21;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->length(), output);
  }

  // .calmcar.perception.Point closest_distance = 22;
  if (this->has_closest_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->closest_distance_, output);
  }

  // .calmcar.perception.Point closest_surface_center = 23;
  if (this->has_closest_surface_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->closest_surface_center_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.LidarObjects)
}

::google::protobuf::uint8* LidarObjects::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.LidarObjects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frame_index = 1;
  if (this->frame_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->frame_index(), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // uint32 lidar_index = 3;
  if (this->lidar_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lidar_index(), target);
  }

  // int64 id = 4;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->id(), target);
  }

  // int64 class_ = 5;
  if (this->class_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->class_(), target);
  }

  // string class_name = 6;
  if (this->class_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.LidarObjects.class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->class_name(), target);
  }

  // int64 subclass = 7;
  if (this->subclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->subclass(), target);
  }

  // string subclass_name = 8;
  if (this->subclass_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subclass_name().data(), static_cast<int>(this->subclass_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "calmcar.perception.LidarObjects.subclass_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->subclass_name(), target);
  }

  // float confidence = 9;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->confidence(), target);
  }

  // float lat_distance = 10;
  if (this->lat_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->lat_distance(), target);
  }

  // float long_distance = 11;
  if (this->long_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->long_distance(), target);
  }

  // float vertical_distance = 12;
  if (this->vertical_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->vertical_distance(), target);
  }

  // .calmcar.perception.Point relative_velocity = 13;
  if (this->has_relative_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, *this->relative_velocity_, deterministic, target);
  }

  // .calmcar.perception.Point relative_acceleration = 14;
  if (this->has_relative_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, *this->relative_acceleration_, deterministic, target);
  }

  // .calmcar.perception.Point absolute_velocity = 15;
  if (this->has_absolute_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, *this->absolute_velocity_, deterministic, target);
  }

  // .calmcar.perception.Point absolute_acceleration = 16;
  if (this->has_absolute_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, *this->absolute_acceleration_, deterministic, target);
  }

  // float heading = 17;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->heading(), target);
  }

  // .calmcar.perception.LidarObjects.MotionStatus motion_status = 18;
  if (this->motion_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->motion_status(), target);
  }

  // float width = 19;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->width(), target);
  }

  // float height = 20;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->height(), target);
  }

  // float length = 21;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->length(), target);
  }

  // .calmcar.perception.Point closest_distance = 22;
  if (this->has_closest_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, *this->closest_distance_, deterministic, target);
  }

  // .calmcar.perception.Point closest_surface_center = 23;
  if (this->has_closest_surface_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, *this->closest_surface_center_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.LidarObjects)
  return target;
}

size_t LidarObjects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.LidarObjects)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string class_name = 6;
  if (this->class_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->class_name());
  }

  // string subclass_name = 8;
  if (this->subclass_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subclass_name());
  }

  // .calmcar.perception.Point relative_velocity = 13;
  if (this->has_relative_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->relative_velocity_);
  }

  // .calmcar.perception.Point relative_acceleration = 14;
  if (this->has_relative_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->relative_acceleration_);
  }

  // .calmcar.perception.Point absolute_velocity = 15;
  if (this->has_absolute_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->absolute_velocity_);
  }

  // .calmcar.perception.Point absolute_acceleration = 16;
  if (this->has_absolute_acceleration()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->absolute_acceleration_);
  }

  // .calmcar.perception.Point closest_distance = 22;
  if (this->has_closest_distance()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->closest_distance_);
  }

  // .calmcar.perception.Point closest_surface_center = 23;
  if (this->has_closest_surface_center()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->closest_surface_center_);
  }

  // int64 frame_index = 1;
  if (this->frame_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->frame_index());
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 id = 4;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // int64 class_ = 5;
  if (this->class_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->class_());
  }

  // uint32 lidar_index = 3;
  if (this->lidar_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lidar_index());
  }

  // float confidence = 9;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  // int64 subclass = 7;
  if (this->subclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->subclass());
  }

  // float lat_distance = 10;
  if (this->lat_distance() != 0) {
    total_size += 1 + 4;
  }

  // float long_distance = 11;
  if (this->long_distance() != 0) {
    total_size += 1 + 4;
  }

  // float vertical_distance = 12;
  if (this->vertical_distance() != 0) {
    total_size += 1 + 4;
  }

  // float heading = 17;
  if (this->heading() != 0) {
    total_size += 2 + 4;
  }

  // .calmcar.perception.LidarObjects.MotionStatus motion_status = 18;
  if (this->motion_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->motion_status());
  }

  // float width = 19;
  if (this->width() != 0) {
    total_size += 2 + 4;
  }

  // float height = 20;
  if (this->height() != 0) {
    total_size += 2 + 4;
  }

  // float length = 21;
  if (this->length() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LidarObjects::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.LidarObjects)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarObjects* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LidarObjects>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.LidarObjects)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.LidarObjects)
    MergeFrom(*source);
  }
}

void LidarObjects::MergeFrom(const LidarObjects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.LidarObjects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.class_name().size() > 0) {

    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  if (from.subclass_name().size() > 0) {

    subclass_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subclass_name_);
  }
  if (from.has_relative_velocity()) {
    mutable_relative_velocity()->::calmcar::perception::Point::MergeFrom(from.relative_velocity());
  }
  if (from.has_relative_acceleration()) {
    mutable_relative_acceleration()->::calmcar::perception::Point::MergeFrom(from.relative_acceleration());
  }
  if (from.has_absolute_velocity()) {
    mutable_absolute_velocity()->::calmcar::perception::Point::MergeFrom(from.absolute_velocity());
  }
  if (from.has_absolute_acceleration()) {
    mutable_absolute_acceleration()->::calmcar::perception::Point::MergeFrom(from.absolute_acceleration());
  }
  if (from.has_closest_distance()) {
    mutable_closest_distance()->::calmcar::perception::Point::MergeFrom(from.closest_distance());
  }
  if (from.has_closest_surface_center()) {
    mutable_closest_surface_center()->::calmcar::perception::Point::MergeFrom(from.closest_surface_center());
  }
  if (from.frame_index() != 0) {
    set_frame_index(from.frame_index());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.class_() != 0) {
    set_class_(from.class_());
  }
  if (from.lidar_index() != 0) {
    set_lidar_index(from.lidar_index());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
  if (from.subclass() != 0) {
    set_subclass(from.subclass());
  }
  if (from.lat_distance() != 0) {
    set_lat_distance(from.lat_distance());
  }
  if (from.long_distance() != 0) {
    set_long_distance(from.long_distance());
  }
  if (from.vertical_distance() != 0) {
    set_vertical_distance(from.vertical_distance());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.motion_status() != 0) {
    set_motion_status(from.motion_status());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void LidarObjects::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.LidarObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarObjects::CopyFrom(const LidarObjects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.LidarObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarObjects::IsInitialized() const {
  return true;
}

void LidarObjects::Swap(LidarObjects* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LidarObjects::InternalSwap(LidarObjects* other) {
  using std::swap;
  class_name_.Swap(&other->class_name_);
  subclass_name_.Swap(&other->subclass_name_);
  swap(relative_velocity_, other->relative_velocity_);
  swap(relative_acceleration_, other->relative_acceleration_);
  swap(absolute_velocity_, other->absolute_velocity_);
  swap(absolute_acceleration_, other->absolute_acceleration_);
  swap(closest_distance_, other->closest_distance_);
  swap(closest_surface_center_, other->closest_surface_center_);
  swap(frame_index_, other->frame_index_);
  swap(timestamp_, other->timestamp_);
  swap(id_, other->id_);
  swap(class__, other->class__);
  swap(lidar_index_, other->lidar_index_);
  swap(confidence_, other->confidence_);
  swap(subclass_, other->subclass_);
  swap(lat_distance_, other->lat_distance_);
  swap(long_distance_, other->long_distance_);
  swap(vertical_distance_, other->vertical_distance_);
  swap(heading_, other->heading_);
  swap(motion_status_, other->motion_status_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(length_, other->length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LidarObjects::GetMetadata() const {
  protobuf_lidar_5fperception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lidar_5fperception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FreespaceSet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FreespaceSet::kXFieldNumber;
const int FreespaceSet::kYFieldNumber;
const int FreespaceSet::kClassTypeFieldNumber;
const int FreespaceSet::kEdgeFieldNumber;
const int FreespaceSet::kIdFieldNumber;
const int FreespaceSet::kIsValidFieldNumber;
const int FreespaceSet::kZFieldNumber;
const int FreespaceSet::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FreespaceSet::FreespaceSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_lidar_5fperception_2eproto::InitDefaultsFreespaceSet();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.FreespaceSet)
}
FreespaceSet::FreespaceSet(const FreespaceSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.FreespaceSet)
}

void FreespaceSet::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _cached_size_ = 0;
}

FreespaceSet::~FreespaceSet() {
  // @@protoc_insertion_point(destructor:calmcar.perception.FreespaceSet)
  SharedDtor();
}

void FreespaceSet::SharedDtor() {
}

void FreespaceSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreespaceSet::descriptor() {
  ::protobuf_lidar_5fperception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lidar_5fperception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FreespaceSet& FreespaceSet::default_instance() {
  ::protobuf_lidar_5fperception_2eproto::InitDefaultsFreespaceSet();
  return *internal_default_instance();
}

FreespaceSet* FreespaceSet::New(::google::protobuf::Arena* arena) const {
  FreespaceSet* n = new FreespaceSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FreespaceSet::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.FreespaceSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool FreespaceSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.FreespaceSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 class_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 edge = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &edge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_valid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.FreespaceSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.FreespaceSet)
  return false;
#undef DO_
}

void FreespaceSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.FreespaceSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // uint32 class_type = 3;
  if (this->class_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->class_type(), output);
  }

  // uint32 edge = 4;
  if (this->edge() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->edge(), output);
  }

  // uint32 id = 5;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->id(), output);
  }

  // bool is_valid = 6;
  if (this->is_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_valid(), output);
  }

  // float z = 7;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->z(), output);
  }

  // int64 timestamp = 8;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.FreespaceSet)
}

::google::protobuf::uint8* FreespaceSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.FreespaceSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // uint32 class_type = 3;
  if (this->class_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->class_type(), target);
  }

  // uint32 edge = 4;
  if (this->edge() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->edge(), target);
  }

  // uint32 id = 5;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->id(), target);
  }

  // bool is_valid = 6;
  if (this->is_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_valid(), target);
  }

  // float z = 7;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->z(), target);
  }

  // int64 timestamp = 8;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.FreespaceSet)
  return target;
}

size_t FreespaceSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.FreespaceSet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // uint32 class_type = 3;
  if (this->class_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->class_type());
  }

  // uint32 edge = 4;
  if (this->edge() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->edge());
  }

  // uint32 id = 5;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // bool is_valid = 6;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  // int64 timestamp = 8;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // float z = 7;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreespaceSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.FreespaceSet)
  GOOGLE_DCHECK_NE(&from, this);
  const FreespaceSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FreespaceSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.FreespaceSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.FreespaceSet)
    MergeFrom(*source);
  }
}

void FreespaceSet::MergeFrom(const FreespaceSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.FreespaceSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.class_type() != 0) {
    set_class_type(from.class_type());
  }
  if (from.edge() != 0) {
    set_edge(from.edge());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.is_valid() != 0) {
    set_is_valid(from.is_valid());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void FreespaceSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.FreespaceSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreespaceSet::CopyFrom(const FreespaceSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.FreespaceSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreespaceSet::IsInitialized() const {
  return true;
}

void FreespaceSet::Swap(FreespaceSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FreespaceSet::InternalSwap(FreespaceSet* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(class_type_, other->class_type_);
  swap(edge_, other->edge_);
  swap(id_, other->id_);
  swap(is_valid_, other->is_valid_);
  swap(timestamp_, other->timestamp_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FreespaceSet::GetMetadata() const {
  protobuf_lidar_5fperception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lidar_5fperception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LidarFreespace::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LidarFreespace::kPointNumFieldNumber;
const int LidarFreespace::kClosedContourFieldNumber;
const int LidarFreespace::kFreespaceSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LidarFreespace::LidarFreespace()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_lidar_5fperception_2eproto::InitDefaultsLidarFreespace();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.LidarFreespace)
}
LidarFreespace::LidarFreespace(const LidarFreespace& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      freespace_set_(from.freespace_set_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&point_num_, &from.point_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&closed_contour_) -
    reinterpret_cast<char*>(&point_num_)) + sizeof(closed_contour_));
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.LidarFreespace)
}

void LidarFreespace::SharedCtor() {
  ::memset(&point_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closed_contour_) -
      reinterpret_cast<char*>(&point_num_)) + sizeof(closed_contour_));
  _cached_size_ = 0;
}

LidarFreespace::~LidarFreespace() {
  // @@protoc_insertion_point(destructor:calmcar.perception.LidarFreespace)
  SharedDtor();
}

void LidarFreespace::SharedDtor() {
}

void LidarFreespace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LidarFreespace::descriptor() {
  ::protobuf_lidar_5fperception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lidar_5fperception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LidarFreespace& LidarFreespace::default_instance() {
  ::protobuf_lidar_5fperception_2eproto::InitDefaultsLidarFreespace();
  return *internal_default_instance();
}

LidarFreespace* LidarFreespace::New(::google::protobuf::Arena* arena) const {
  LidarFreespace* n = new LidarFreespace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LidarFreespace::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.LidarFreespace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  freespace_set_.Clear();
  ::memset(&point_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closed_contour_) -
      reinterpret_cast<char*>(&point_num_)) + sizeof(closed_contour_));
  _internal_metadata_.Clear();
}

bool LidarFreespace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.LidarFreespace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 point_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 closed_contour = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &closed_contour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .calmcar.perception.FreespaceSet freespace_set = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_freespace_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.LidarFreespace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.LidarFreespace)
  return false;
#undef DO_
}

void LidarFreespace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.LidarFreespace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 point_num = 1;
  if (this->point_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->point_num(), output);
  }

  // uint32 closed_contour = 2;
  if (this->closed_contour() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->closed_contour(), output);
  }

  // repeated .calmcar.perception.FreespaceSet freespace_set = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->freespace_set_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->freespace_set(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.LidarFreespace)
}

::google::protobuf::uint8* LidarFreespace::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.LidarFreespace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 point_num = 1;
  if (this->point_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->point_num(), target);
  }

  // uint32 closed_contour = 2;
  if (this->closed_contour() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->closed_contour(), target);
  }

  // repeated .calmcar.perception.FreespaceSet freespace_set = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->freespace_set_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->freespace_set(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.LidarFreespace)
  return target;
}

size_t LidarFreespace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.LidarFreespace)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .calmcar.perception.FreespaceSet freespace_set = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->freespace_set_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->freespace_set(static_cast<int>(i)));
    }
  }

  // uint32 point_num = 1;
  if (this->point_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_num());
  }

  // uint32 closed_contour = 2;
  if (this->closed_contour() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->closed_contour());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LidarFreespace::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.LidarFreespace)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarFreespace* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LidarFreespace>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.LidarFreespace)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.LidarFreespace)
    MergeFrom(*source);
  }
}

void LidarFreespace::MergeFrom(const LidarFreespace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.LidarFreespace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  freespace_set_.MergeFrom(from.freespace_set_);
  if (from.point_num() != 0) {
    set_point_num(from.point_num());
  }
  if (from.closed_contour() != 0) {
    set_closed_contour(from.closed_contour());
  }
}

void LidarFreespace::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.LidarFreespace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarFreespace::CopyFrom(const LidarFreespace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.LidarFreespace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarFreespace::IsInitialized() const {
  return true;
}

void LidarFreespace::Swap(LidarFreespace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LidarFreespace::InternalSwap(LidarFreespace* other) {
  using std::swap;
  freespace_set_.InternalSwap(&other->freespace_set_);
  swap(point_num_, other->point_num_);
  swap(closed_contour_, other->closed_contour_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LidarFreespace::GetMetadata() const {
  protobuf_lidar_5fperception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lidar_5fperception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LidarPerceptionFrame::InitAsDefaultInstance() {
  ::calmcar::perception::_LidarPerceptionFrame_default_instance_._instance.get_mutable()->lidar_fsd_ = const_cast< ::calmcar::perception::LidarFreespace*>(
      ::calmcar::perception::LidarFreespace::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LidarPerceptionFrame::kLidarObjectFieldNumber;
const int LidarPerceptionFrame::kLidarFsdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LidarPerceptionFrame::LidarPerceptionFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_lidar_5fperception_2eproto::InitDefaultsLidarPerceptionFrame();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:calmcar.perception.LidarPerceptionFrame)
}
LidarPerceptionFrame::LidarPerceptionFrame(const LidarPerceptionFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lidar_object_(from.lidar_object_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lidar_fsd()) {
    lidar_fsd_ = new ::calmcar::perception::LidarFreespace(*from.lidar_fsd_);
  } else {
    lidar_fsd_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:calmcar.perception.LidarPerceptionFrame)
}

void LidarPerceptionFrame::SharedCtor() {
  lidar_fsd_ = NULL;
  _cached_size_ = 0;
}

LidarPerceptionFrame::~LidarPerceptionFrame() {
  // @@protoc_insertion_point(destructor:calmcar.perception.LidarPerceptionFrame)
  SharedDtor();
}

void LidarPerceptionFrame::SharedDtor() {
  if (this != internal_default_instance()) delete lidar_fsd_;
}

void LidarPerceptionFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LidarPerceptionFrame::descriptor() {
  ::protobuf_lidar_5fperception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lidar_5fperception_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LidarPerceptionFrame& LidarPerceptionFrame::default_instance() {
  ::protobuf_lidar_5fperception_2eproto::InitDefaultsLidarPerceptionFrame();
  return *internal_default_instance();
}

LidarPerceptionFrame* LidarPerceptionFrame::New(::google::protobuf::Arena* arena) const {
  LidarPerceptionFrame* n = new LidarPerceptionFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LidarPerceptionFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:calmcar.perception.LidarPerceptionFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lidar_object_.Clear();
  if (GetArenaNoVirtual() == NULL && lidar_fsd_ != NULL) {
    delete lidar_fsd_;
  }
  lidar_fsd_ = NULL;
  _internal_metadata_.Clear();
}

bool LidarPerceptionFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:calmcar.perception.LidarPerceptionFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .calmcar.perception.LidarObjects lidar_object = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_lidar_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .calmcar.perception.LidarFreespace lidar_fsd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lidar_fsd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:calmcar.perception.LidarPerceptionFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:calmcar.perception.LidarPerceptionFrame)
  return false;
#undef DO_
}

void LidarPerceptionFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:calmcar.perception.LidarPerceptionFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .calmcar.perception.LidarObjects lidar_object = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lidar_object_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lidar_object(static_cast<int>(i)), output);
  }

  // .calmcar.perception.LidarFreespace lidar_fsd = 2;
  if (this->has_lidar_fsd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lidar_fsd_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:calmcar.perception.LidarPerceptionFrame)
}

::google::protobuf::uint8* LidarPerceptionFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:calmcar.perception.LidarPerceptionFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .calmcar.perception.LidarObjects lidar_object = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lidar_object_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lidar_object(static_cast<int>(i)), deterministic, target);
  }

  // .calmcar.perception.LidarFreespace lidar_fsd = 2;
  if (this->has_lidar_fsd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->lidar_fsd_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:calmcar.perception.LidarPerceptionFrame)
  return target;
}

size_t LidarPerceptionFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:calmcar.perception.LidarPerceptionFrame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .calmcar.perception.LidarObjects lidar_object = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lidar_object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lidar_object(static_cast<int>(i)));
    }
  }

  // .calmcar.perception.LidarFreespace lidar_fsd = 2;
  if (this->has_lidar_fsd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->lidar_fsd_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LidarPerceptionFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:calmcar.perception.LidarPerceptionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarPerceptionFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LidarPerceptionFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.perception.LidarPerceptionFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.perception.LidarPerceptionFrame)
    MergeFrom(*source);
  }
}

void LidarPerceptionFrame::MergeFrom(const LidarPerceptionFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:calmcar.perception.LidarPerceptionFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lidar_object_.MergeFrom(from.lidar_object_);
  if (from.has_lidar_fsd()) {
    mutable_lidar_fsd()->::calmcar::perception::LidarFreespace::MergeFrom(from.lidar_fsd());
  }
}

void LidarPerceptionFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:calmcar.perception.LidarPerceptionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarPerceptionFrame::CopyFrom(const LidarPerceptionFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:calmcar.perception.LidarPerceptionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarPerceptionFrame::IsInitialized() const {
  return true;
}

void LidarPerceptionFrame::Swap(LidarPerceptionFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LidarPerceptionFrame::InternalSwap(LidarPerceptionFrame* other) {
  using std::swap;
  lidar_object_.InternalSwap(&other->lidar_object_);
  swap(lidar_fsd_, other->lidar_fsd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LidarPerceptionFrame::GetMetadata() const {
  protobuf_lidar_5fperception_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_lidar_5fperception_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace calmcar

// @@protoc_insertion_point(global_scope)
