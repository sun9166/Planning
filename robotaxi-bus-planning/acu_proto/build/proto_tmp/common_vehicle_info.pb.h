// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_vehicle_info.proto

#ifndef PROTOBUF_common_5fvehicle_5finfo_2eproto__INCLUDED
#define PROTOBUF_common_5fvehicle_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_common_5fvehicle_5finfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCommonVehicleInfoImpl();
void InitDefaultsCommonVehicleInfo();
inline void InitDefaults() {
  InitDefaultsCommonVehicleInfo();
}
}  // namespace protobuf_common_5fvehicle_5finfo_2eproto
namespace vehicle {
namespace perception {
class CommonVehicleInfo;
class CommonVehicleInfoDefaultTypeInternal;
extern CommonVehicleInfoDefaultTypeInternal _CommonVehicleInfo_default_instance_;
}  // namespace perception
}  // namespace vehicle
namespace vehicle {
namespace perception {

// ===================================================================

class CommonVehicleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:vehicle.perception.CommonVehicleInfo) */ {
 public:
  CommonVehicleInfo();
  virtual ~CommonVehicleInfo();

  CommonVehicleInfo(const CommonVehicleInfo& from);

  inline CommonVehicleInfo& operator=(const CommonVehicleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonVehicleInfo(CommonVehicleInfo&& from) noexcept
    : CommonVehicleInfo() {
    *this = ::std::move(from);
  }

  inline CommonVehicleInfo& operator=(CommonVehicleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonVehicleInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonVehicleInfo* internal_default_instance() {
    return reinterpret_cast<const CommonVehicleInfo*>(
               &_CommonVehicleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CommonVehicleInfo* other);
  friend void swap(CommonVehicleInfo& a, CommonVehicleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonVehicleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CommonVehicleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommonVehicleInfo& from);
  void MergeFrom(const CommonVehicleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommonVehicleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float vehiclespd = 1;
  void clear_vehiclespd();
  static const int kVehiclespdFieldNumber = 1;
  float vehiclespd() const;
  void set_vehiclespd(float value);

  // float wheel_speed_fl = 2;
  void clear_wheel_speed_fl();
  static const int kWheelSpeedFlFieldNumber = 2;
  float wheel_speed_fl() const;
  void set_wheel_speed_fl(float value);

  // float wheel_speed_fr = 3;
  void clear_wheel_speed_fr();
  static const int kWheelSpeedFrFieldNumber = 3;
  float wheel_speed_fr() const;
  void set_wheel_speed_fr(float value);

  // float wheel_speed_rl = 4;
  void clear_wheel_speed_rl();
  static const int kWheelSpeedRlFieldNumber = 4;
  float wheel_speed_rl() const;
  void set_wheel_speed_rl(float value);

  // float wheel_speed_rr = 5;
  void clear_wheel_speed_rr();
  static const int kWheelSpeedRrFieldNumber = 5;
  float wheel_speed_rr() const;
  void set_wheel_speed_rr(float value);

  // int32 gear_location = 6;
  void clear_gear_location();
  static const int kGearLocationFieldNumber = 6;
  ::google::protobuf::int32 gear_location() const;
  void set_gear_location(::google::protobuf::int32 value);

  // float steering_angle = 7;
  void clear_steering_angle();
  static const int kSteeringAngleFieldNumber = 7;
  float steering_angle() const;
  void set_steering_angle(float value);

  // float steering_angle_spd = 8;
  void clear_steering_angle_spd();
  static const int kSteeringAngleSpdFieldNumber = 8;
  float steering_angle_spd() const;
  void set_steering_angle_spd(float value);

  // float longitudinal_accel = 9;
  void clear_longitudinal_accel();
  static const int kLongitudinalAccelFieldNumber = 9;
  float longitudinal_accel() const;
  void set_longitudinal_accel(float value);

  // float lateral_accel = 10;
  void clear_lateral_accel();
  static const int kLateralAccelFieldNumber = 10;
  float lateral_accel() const;
  void set_lateral_accel(float value);

  // float yaw_rate = 11;
  void clear_yaw_rate();
  static const int kYawRateFieldNumber = 11;
  float yaw_rate() const;
  void set_yaw_rate(float value);

  // float pitch_rate = 12;
  void clear_pitch_rate();
  static const int kPitchRateFieldNumber = 12;
  float pitch_rate() const;
  void set_pitch_rate(float value);

  // float roll_rate = 13;
  void clear_roll_rate();
  static const int kRollRateFieldNumber = 13;
  float roll_rate() const;
  void set_roll_rate(float value);

  // @@protoc_insertion_point(class_scope:vehicle.perception.CommonVehicleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float vehiclespd_;
  float wheel_speed_fl_;
  float wheel_speed_fr_;
  float wheel_speed_rl_;
  float wheel_speed_rr_;
  ::google::protobuf::int32 gear_location_;
  float steering_angle_;
  float steering_angle_spd_;
  float longitudinal_accel_;
  float lateral_accel_;
  float yaw_rate_;
  float pitch_rate_;
  float roll_rate_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_5fvehicle_5finfo_2eproto::TableStruct;
  friend void ::protobuf_common_5fvehicle_5finfo_2eproto::InitDefaultsCommonVehicleInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonVehicleInfo

// float vehiclespd = 1;
inline void CommonVehicleInfo::clear_vehiclespd() {
  vehiclespd_ = 0;
}
inline float CommonVehicleInfo::vehiclespd() const {
  // @@protoc_insertion_point(field_get:vehicle.perception.CommonVehicleInfo.vehiclespd)
  return vehiclespd_;
}
inline void CommonVehicleInfo::set_vehiclespd(float value) {
  
  vehiclespd_ = value;
  // @@protoc_insertion_point(field_set:vehicle.perception.CommonVehicleInfo.vehiclespd)
}

// float wheel_speed_fl = 2;
inline void CommonVehicleInfo::clear_wheel_speed_fl() {
  wheel_speed_fl_ = 0;
}
inline float CommonVehicleInfo::wheel_speed_fl() const {
  // @@protoc_insertion_point(field_get:vehicle.perception.CommonVehicleInfo.wheel_speed_fl)
  return wheel_speed_fl_;
}
inline void CommonVehicleInfo::set_wheel_speed_fl(float value) {
  
  wheel_speed_fl_ = value;
  // @@protoc_insertion_point(field_set:vehicle.perception.CommonVehicleInfo.wheel_speed_fl)
}

// float wheel_speed_fr = 3;
inline void CommonVehicleInfo::clear_wheel_speed_fr() {
  wheel_speed_fr_ = 0;
}
inline float CommonVehicleInfo::wheel_speed_fr() const {
  // @@protoc_insertion_point(field_get:vehicle.perception.CommonVehicleInfo.wheel_speed_fr)
  return wheel_speed_fr_;
}
inline void CommonVehicleInfo::set_wheel_speed_fr(float value) {
  
  wheel_speed_fr_ = value;
  // @@protoc_insertion_point(field_set:vehicle.perception.CommonVehicleInfo.wheel_speed_fr)
}

// float wheel_speed_rl = 4;
inline void CommonVehicleInfo::clear_wheel_speed_rl() {
  wheel_speed_rl_ = 0;
}
inline float CommonVehicleInfo::wheel_speed_rl() const {
  // @@protoc_insertion_point(field_get:vehicle.perception.CommonVehicleInfo.wheel_speed_rl)
  return wheel_speed_rl_;
}
inline void CommonVehicleInfo::set_wheel_speed_rl(float value) {
  
  wheel_speed_rl_ = value;
  // @@protoc_insertion_point(field_set:vehicle.perception.CommonVehicleInfo.wheel_speed_rl)
}

// float wheel_speed_rr = 5;
inline void CommonVehicleInfo::clear_wheel_speed_rr() {
  wheel_speed_rr_ = 0;
}
inline float CommonVehicleInfo::wheel_speed_rr() const {
  // @@protoc_insertion_point(field_get:vehicle.perception.CommonVehicleInfo.wheel_speed_rr)
  return wheel_speed_rr_;
}
inline void CommonVehicleInfo::set_wheel_speed_rr(float value) {
  
  wheel_speed_rr_ = value;
  // @@protoc_insertion_point(field_set:vehicle.perception.CommonVehicleInfo.wheel_speed_rr)
}

// int32 gear_location = 6;
inline void CommonVehicleInfo::clear_gear_location() {
  gear_location_ = 0;
}
inline ::google::protobuf::int32 CommonVehicleInfo::gear_location() const {
  // @@protoc_insertion_point(field_get:vehicle.perception.CommonVehicleInfo.gear_location)
  return gear_location_;
}
inline void CommonVehicleInfo::set_gear_location(::google::protobuf::int32 value) {
  
  gear_location_ = value;
  // @@protoc_insertion_point(field_set:vehicle.perception.CommonVehicleInfo.gear_location)
}

// float steering_angle = 7;
inline void CommonVehicleInfo::clear_steering_angle() {
  steering_angle_ = 0;
}
inline float CommonVehicleInfo::steering_angle() const {
  // @@protoc_insertion_point(field_get:vehicle.perception.CommonVehicleInfo.steering_angle)
  return steering_angle_;
}
inline void CommonVehicleInfo::set_steering_angle(float value) {
  
  steering_angle_ = value;
  // @@protoc_insertion_point(field_set:vehicle.perception.CommonVehicleInfo.steering_angle)
}

// float steering_angle_spd = 8;
inline void CommonVehicleInfo::clear_steering_angle_spd() {
  steering_angle_spd_ = 0;
}
inline float CommonVehicleInfo::steering_angle_spd() const {
  // @@protoc_insertion_point(field_get:vehicle.perception.CommonVehicleInfo.steering_angle_spd)
  return steering_angle_spd_;
}
inline void CommonVehicleInfo::set_steering_angle_spd(float value) {
  
  steering_angle_spd_ = value;
  // @@protoc_insertion_point(field_set:vehicle.perception.CommonVehicleInfo.steering_angle_spd)
}

// float longitudinal_accel = 9;
inline void CommonVehicleInfo::clear_longitudinal_accel() {
  longitudinal_accel_ = 0;
}
inline float CommonVehicleInfo::longitudinal_accel() const {
  // @@protoc_insertion_point(field_get:vehicle.perception.CommonVehicleInfo.longitudinal_accel)
  return longitudinal_accel_;
}
inline void CommonVehicleInfo::set_longitudinal_accel(float value) {
  
  longitudinal_accel_ = value;
  // @@protoc_insertion_point(field_set:vehicle.perception.CommonVehicleInfo.longitudinal_accel)
}

// float lateral_accel = 10;
inline void CommonVehicleInfo::clear_lateral_accel() {
  lateral_accel_ = 0;
}
inline float CommonVehicleInfo::lateral_accel() const {
  // @@protoc_insertion_point(field_get:vehicle.perception.CommonVehicleInfo.lateral_accel)
  return lateral_accel_;
}
inline void CommonVehicleInfo::set_lateral_accel(float value) {
  
  lateral_accel_ = value;
  // @@protoc_insertion_point(field_set:vehicle.perception.CommonVehicleInfo.lateral_accel)
}

// float yaw_rate = 11;
inline void CommonVehicleInfo::clear_yaw_rate() {
  yaw_rate_ = 0;
}
inline float CommonVehicleInfo::yaw_rate() const {
  // @@protoc_insertion_point(field_get:vehicle.perception.CommonVehicleInfo.yaw_rate)
  return yaw_rate_;
}
inline void CommonVehicleInfo::set_yaw_rate(float value) {
  
  yaw_rate_ = value;
  // @@protoc_insertion_point(field_set:vehicle.perception.CommonVehicleInfo.yaw_rate)
}

// float pitch_rate = 12;
inline void CommonVehicleInfo::clear_pitch_rate() {
  pitch_rate_ = 0;
}
inline float CommonVehicleInfo::pitch_rate() const {
  // @@protoc_insertion_point(field_get:vehicle.perception.CommonVehicleInfo.pitch_rate)
  return pitch_rate_;
}
inline void CommonVehicleInfo::set_pitch_rate(float value) {
  
  pitch_rate_ = value;
  // @@protoc_insertion_point(field_set:vehicle.perception.CommonVehicleInfo.pitch_rate)
}

// float roll_rate = 13;
inline void CommonVehicleInfo::clear_roll_rate() {
  roll_rate_ = 0;
}
inline float CommonVehicleInfo::roll_rate() const {
  // @@protoc_insertion_point(field_get:vehicle.perception.CommonVehicleInfo.roll_rate)
  return roll_rate_;
}
inline void CommonVehicleInfo::set_roll_rate(float value) {
  
  roll_rate_ = value;
  // @@protoc_insertion_point(field_set:vehicle.perception.CommonVehicleInfo.roll_rate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace vehicle

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_5fvehicle_5finfo_2eproto__INCLUDED
