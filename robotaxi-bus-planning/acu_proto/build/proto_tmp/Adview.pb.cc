// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Adview.proto

#include "Adview.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Adview {
namespace proto {
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
class TaskpointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Taskpoint>
      _instance;
} _Taskpoint_default_instance_;
class AdviewCmdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AdviewCmd>
      _instance;
} _AdviewCmd_default_instance_;
}  // namespace proto
}  // namespace Adview
namespace protobuf_Adview_2eproto {
void InitDefaultsHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Adview::proto::_Header_default_instance_;
    new (ptr) ::Adview::proto::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Adview::proto::Header::InitAsDefaultInstance();
}

void InitDefaultsHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHeaderImpl);
}

void InitDefaultsTaskpointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Adview::proto::_Taskpoint_default_instance_;
    new (ptr) ::Adview::proto::Taskpoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Adview::proto::Taskpoint::InitAsDefaultInstance();
}

void InitDefaultsTaskpoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTaskpointImpl);
}

void InitDefaultsAdviewCmdImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Adview_2eproto::InitDefaultsHeader();
  protobuf_Adview_2eproto::InitDefaultsTaskpoint();
  {
    void* ptr = &::Adview::proto::_AdviewCmd_default_instance_;
    new (ptr) ::Adview::proto::AdviewCmd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Adview::proto::AdviewCmd::InitAsDefaultInstance();
}

void InitDefaultsAdviewCmd() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAdviewCmdImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Adview::proto::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Adview::proto::Header, timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Adview::proto::Header, module_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Adview::proto::Header, sequence_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Adview::proto::Header, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Adview::proto::Taskpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Adview::proto::Taskpoint, mission_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Adview::proto::Taskpoint, lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Adview::proto::Taskpoint, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Adview::proto::Taskpoint, angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Adview::proto::Taskpoint, taskpoint_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Adview::proto::AdviewCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Adview::proto::AdviewCmd, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Adview::proto::AdviewCmd, business_mode_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Adview::proto::AdviewCmd, task_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Adview::proto::AdviewCmd, task_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Adview::proto::AdviewCmd, whether_stop_on_route_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Adview::proto::AdviewCmd, cycle_task_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Adview::proto::Header)},
  { 9, -1, sizeof(::Adview::proto::Taskpoint)},
  { 19, -1, sizeof(::Adview::proto::AdviewCmd)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Adview::proto::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Adview::proto::_Taskpoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Adview::proto::_AdviewCmd_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Adview.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014Adview.proto\022\014Adview.proto\"[\n\006Header\022\025"
      "\n\rtimestamp_sec\030\001 \001(\001\022\023\n\013module_name\030\002 \001"
      "(\t\022\024\n\014sequence_num\030\003 \001(\r\022\017\n\007version\030\004 \001("
      "\t\"`\n\tTaskpoint\022\022\n\nmission_id\030\001 \001(\005\022\013\n\003lo"
      "n\030\002 \001(\001\022\013\n\003lat\030\003 \001(\001\022\r\n\005angle\030\004 \001(\002\022\026\n\016t"
      "askpoint_type\030\005 \001(\005\"\277\001\n\tAdviewCmd\022$\n\006hea"
      "der\030\001 \001(\0132\024.Adview.proto.Header\022\031\n\021busin"
      "ess_mode_req\030\002 \001(\005\022\020\n\010task_cmd\030\003 \001(\005\022,\n\013"
      "task_points\030\004 \003(\0132\027.Adview.proto.Taskpoi"
      "nt\022\035\n\025whether_stop_on_route\030\005 \001(\005\022\022\n\ncyc"
      "le_task\030\006 \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 421);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Adview.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Adview_2eproto
namespace Adview {
namespace proto {

// ===================================================================

void Header::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kTimestampSecFieldNumber;
const int Header::kModuleNameFieldNumber;
const int Header::kSequenceNumFieldNumber;
const int Header::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Adview_2eproto::InitDefaultsHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Adview.proto.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.module_name().size() > 0) {
    module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&timestamp_sec_, &from.timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_num_) -
    reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(sequence_num_));
  // @@protoc_insertion_point(copy_constructor:Adview.proto.Header)
}

void Header::SharedCtor() {
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_num_) -
      reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(sequence_num_));
  _cached_size_ = 0;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:Adview.proto.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  module_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_Adview_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Adview_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::protobuf_Adview_2eproto::InitDefaultsHeader();
  return *internal_default_instance();
}

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:Adview.proto.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_num_) -
      reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(sequence_num_));
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Adview.proto.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string module_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->module_name().data(), static_cast<int>(this->module_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Adview.proto.Header.module_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sequence_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Adview.proto.Header.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Adview.proto.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Adview.proto.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Adview.proto.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp_sec = 1;
  if (this->timestamp_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp_sec(), output);
  }

  // string module_name = 2;
  if (this->module_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_name().data(), static_cast<int>(this->module_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Adview.proto.Header.module_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->module_name(), output);
  }

  // uint32 sequence_num = 3;
  if (this->sequence_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence_num(), output);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Adview.proto.Header.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Adview.proto.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Adview.proto.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp_sec = 1;
  if (this->timestamp_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp_sec(), target);
  }

  // string module_name = 2;
  if (this->module_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_name().data(), static_cast<int>(this->module_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Adview.proto.Header.module_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->module_name(), target);
  }

  // uint32 sequence_num = 3;
  if (this->sequence_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence_num(), target);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Adview.proto.Header.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Adview.proto.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Adview.proto.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string module_name = 2;
  if (this->module_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->module_name());
  }

  // string version = 4;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // double timestamp_sec = 1;
  if (this->timestamp_sec() != 0) {
    total_size += 1 + 8;
  }

  // uint32 sequence_num = 3;
  if (this->sequence_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sequence_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Adview.proto.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Adview.proto.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Adview.proto.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Adview.proto.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.module_name().size() > 0) {

    module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.timestamp_sec() != 0) {
    set_timestamp_sec(from.timestamp_sec());
  }
  if (from.sequence_num() != 0) {
    set_sequence_num(from.sequence_num());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Adview.proto.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Adview.proto.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  module_name_.Swap(&other->module_name_);
  version_.Swap(&other->version_);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(sequence_num_, other->sequence_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_Adview_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Adview_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Taskpoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Taskpoint::kMissionIdFieldNumber;
const int Taskpoint::kLonFieldNumber;
const int Taskpoint::kLatFieldNumber;
const int Taskpoint::kAngleFieldNumber;
const int Taskpoint::kTaskpointTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Taskpoint::Taskpoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Adview_2eproto::InitDefaultsTaskpoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Adview.proto.Taskpoint)
}
Taskpoint::Taskpoint(const Taskpoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lon_, &from.lon_,
    static_cast<size_t>(reinterpret_cast<char*>(&taskpoint_type_) -
    reinterpret_cast<char*>(&lon_)) + sizeof(taskpoint_type_));
  // @@protoc_insertion_point(copy_constructor:Adview.proto.Taskpoint)
}

void Taskpoint::SharedCtor() {
  ::memset(&lon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&taskpoint_type_) -
      reinterpret_cast<char*>(&lon_)) + sizeof(taskpoint_type_));
  _cached_size_ = 0;
}

Taskpoint::~Taskpoint() {
  // @@protoc_insertion_point(destructor:Adview.proto.Taskpoint)
  SharedDtor();
}

void Taskpoint::SharedDtor() {
}

void Taskpoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Taskpoint::descriptor() {
  ::protobuf_Adview_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Adview_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Taskpoint& Taskpoint::default_instance() {
  ::protobuf_Adview_2eproto::InitDefaultsTaskpoint();
  return *internal_default_instance();
}

Taskpoint* Taskpoint::New(::google::protobuf::Arena* arena) const {
  Taskpoint* n = new Taskpoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Taskpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:Adview.proto.Taskpoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&taskpoint_type_) -
      reinterpret_cast<char*>(&lon_)) + sizeof(taskpoint_type_));
  _internal_metadata_.Clear();
}

bool Taskpoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Adview.proto.Taskpoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 mission_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 taskpoint_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskpoint_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Adview.proto.Taskpoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Adview.proto.Taskpoint)
  return false;
#undef DO_
}

void Taskpoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Adview.proto.Taskpoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mission_id = 1;
  if (this->mission_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mission_id(), output);
  }

  // double lon = 2;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  // double lat = 3;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lat(), output);
  }

  // float angle = 4;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->angle(), output);
  }

  // int32 taskpoint_type = 5;
  if (this->taskpoint_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->taskpoint_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Adview.proto.Taskpoint)
}

::google::protobuf::uint8* Taskpoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Adview.proto.Taskpoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mission_id = 1;
  if (this->mission_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mission_id(), target);
  }

  // double lon = 2;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lon(), target);
  }

  // double lat = 3;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lat(), target);
  }

  // float angle = 4;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->angle(), target);
  }

  // int32 taskpoint_type = 5;
  if (this->taskpoint_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->taskpoint_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Adview.proto.Taskpoint)
  return target;
}

size_t Taskpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Adview.proto.Taskpoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double lon = 2;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  // int32 mission_id = 1;
  if (this->mission_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mission_id());
  }

  // float angle = 4;
  if (this->angle() != 0) {
    total_size += 1 + 4;
  }

  // double lat = 3;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // int32 taskpoint_type = 5;
  if (this->taskpoint_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->taskpoint_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Taskpoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Adview.proto.Taskpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Taskpoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Taskpoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Adview.proto.Taskpoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Adview.proto.Taskpoint)
    MergeFrom(*source);
  }
}

void Taskpoint::MergeFrom(const Taskpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Adview.proto.Taskpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lon() != 0) {
    set_lon(from.lon());
  }
  if (from.mission_id() != 0) {
    set_mission_id(from.mission_id());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.taskpoint_type() != 0) {
    set_taskpoint_type(from.taskpoint_type());
  }
}

void Taskpoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Adview.proto.Taskpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Taskpoint::CopyFrom(const Taskpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Adview.proto.Taskpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Taskpoint::IsInitialized() const {
  return true;
}

void Taskpoint::Swap(Taskpoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Taskpoint::InternalSwap(Taskpoint* other) {
  using std::swap;
  swap(lon_, other->lon_);
  swap(mission_id_, other->mission_id_);
  swap(angle_, other->angle_);
  swap(lat_, other->lat_);
  swap(taskpoint_type_, other->taskpoint_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Taskpoint::GetMetadata() const {
  protobuf_Adview_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Adview_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AdviewCmd::InitAsDefaultInstance() {
  ::Adview::proto::_AdviewCmd_default_instance_._instance.get_mutable()->header_ = const_cast< ::Adview::proto::Header*>(
      ::Adview::proto::Header::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdviewCmd::kHeaderFieldNumber;
const int AdviewCmd::kBusinessModeReqFieldNumber;
const int AdviewCmd::kTaskCmdFieldNumber;
const int AdviewCmd::kTaskPointsFieldNumber;
const int AdviewCmd::kWhetherStopOnRouteFieldNumber;
const int AdviewCmd::kCycleTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdviewCmd::AdviewCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Adview_2eproto::InitDefaultsAdviewCmd();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Adview.proto.AdviewCmd)
}
AdviewCmd::AdviewCmd(const AdviewCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      task_points_(from.task_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::Adview::proto::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&business_mode_req_, &from.business_mode_req_,
    static_cast<size_t>(reinterpret_cast<char*>(&cycle_task_) -
    reinterpret_cast<char*>(&business_mode_req_)) + sizeof(cycle_task_));
  // @@protoc_insertion_point(copy_constructor:Adview.proto.AdviewCmd)
}

void AdviewCmd::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cycle_task_) -
      reinterpret_cast<char*>(&header_)) + sizeof(cycle_task_));
  _cached_size_ = 0;
}

AdviewCmd::~AdviewCmd() {
  // @@protoc_insertion_point(destructor:Adview.proto.AdviewCmd)
  SharedDtor();
}

void AdviewCmd::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AdviewCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdviewCmd::descriptor() {
  ::protobuf_Adview_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Adview_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AdviewCmd& AdviewCmd::default_instance() {
  ::protobuf_Adview_2eproto::InitDefaultsAdviewCmd();
  return *internal_default_instance();
}

AdviewCmd* AdviewCmd::New(::google::protobuf::Arena* arena) const {
  AdviewCmd* n = new AdviewCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdviewCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:Adview.proto.AdviewCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_points_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&business_mode_req_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cycle_task_) -
      reinterpret_cast<char*>(&business_mode_req_)) + sizeof(cycle_task_));
  _internal_metadata_.Clear();
}

bool AdviewCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Adview.proto.AdviewCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Adview.proto.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 business_mode_req = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &business_mode_req_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 task_cmd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Adview.proto.Taskpoint task_points = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_task_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 whether_stop_on_route = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &whether_stop_on_route_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cycle_task = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cycle_task_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Adview.proto.AdviewCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Adview.proto.AdviewCmd)
  return false;
#undef DO_
}

void AdviewCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Adview.proto.AdviewCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Adview.proto.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 business_mode_req = 2;
  if (this->business_mode_req() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->business_mode_req(), output);
  }

  // int32 task_cmd = 3;
  if (this->task_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_cmd(), output);
  }

  // repeated .Adview.proto.Taskpoint task_points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->task_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->task_points(static_cast<int>(i)), output);
  }

  // int32 whether_stop_on_route = 5;
  if (this->whether_stop_on_route() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->whether_stop_on_route(), output);
  }

  // int32 cycle_task = 6;
  if (this->cycle_task() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cycle_task(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Adview.proto.AdviewCmd)
}

::google::protobuf::uint8* AdviewCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Adview.proto.AdviewCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Adview.proto.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // int32 business_mode_req = 2;
  if (this->business_mode_req() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->business_mode_req(), target);
  }

  // int32 task_cmd = 3;
  if (this->task_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->task_cmd(), target);
  }

  // repeated .Adview.proto.Taskpoint task_points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->task_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->task_points(static_cast<int>(i)), deterministic, target);
  }

  // int32 whether_stop_on_route = 5;
  if (this->whether_stop_on_route() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->whether_stop_on_route(), target);
  }

  // int32 cycle_task = 6;
  if (this->cycle_task() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cycle_task(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Adview.proto.AdviewCmd)
  return target;
}

size_t AdviewCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Adview.proto.AdviewCmd)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Adview.proto.Taskpoint task_points = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->task_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->task_points(static_cast<int>(i)));
    }
  }

  // .Adview.proto.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // int32 business_mode_req = 2;
  if (this->business_mode_req() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->business_mode_req());
  }

  // int32 task_cmd = 3;
  if (this->task_cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_cmd());
  }

  // int32 whether_stop_on_route = 5;
  if (this->whether_stop_on_route() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->whether_stop_on_route());
  }

  // int32 cycle_task = 6;
  if (this->cycle_task() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cycle_task());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdviewCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Adview.proto.AdviewCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const AdviewCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdviewCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Adview.proto.AdviewCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Adview.proto.AdviewCmd)
    MergeFrom(*source);
  }
}

void AdviewCmd::MergeFrom(const AdviewCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Adview.proto.AdviewCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_points_.MergeFrom(from.task_points_);
  if (from.has_header()) {
    mutable_header()->::Adview::proto::Header::MergeFrom(from.header());
  }
  if (from.business_mode_req() != 0) {
    set_business_mode_req(from.business_mode_req());
  }
  if (from.task_cmd() != 0) {
    set_task_cmd(from.task_cmd());
  }
  if (from.whether_stop_on_route() != 0) {
    set_whether_stop_on_route(from.whether_stop_on_route());
  }
  if (from.cycle_task() != 0) {
    set_cycle_task(from.cycle_task());
  }
}

void AdviewCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Adview.proto.AdviewCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdviewCmd::CopyFrom(const AdviewCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Adview.proto.AdviewCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdviewCmd::IsInitialized() const {
  return true;
}

void AdviewCmd::Swap(AdviewCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdviewCmd::InternalSwap(AdviewCmd* other) {
  using std::swap;
  task_points_.InternalSwap(&other->task_points_);
  swap(header_, other->header_);
  swap(business_mode_req_, other->business_mode_req_);
  swap(task_cmd_, other->task_cmd_);
  swap(whether_stop_on_route_, other->whether_stop_on_route_);
  swap(cycle_task_, other->cycle_task_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdviewCmd::GetMetadata() const {
  protobuf_Adview_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Adview_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace Adview

// @@protoc_insertion_point(global_scope)
