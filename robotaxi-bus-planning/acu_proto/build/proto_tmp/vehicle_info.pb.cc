// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_info.proto

#include "vehicle_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace vehicle_info {
namespace proto_msg {
class MsgHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MsgHeader>
      _instance;
} _MsgHeader_default_instance_;
class ControlCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlCommand>
      _instance;
} _ControlCommand_default_instance_;
class VehicleInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleInfo>
      _instance;
} _VehicleInfo_default_instance_;
}  // namespace proto_msg
}  // namespace vehicle_info
namespace protobuf_vehicle_5finfo_2eproto {
void InitDefaultsMsgHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vehicle_info::proto_msg::_MsgHeader_default_instance_;
    new (ptr) ::vehicle_info::proto_msg::MsgHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vehicle_info::proto_msg::MsgHeader::InitAsDefaultInstance();
}

void InitDefaultsMsgHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMsgHeaderImpl);
}

void InitDefaultsControlCommandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::vehicle_info::proto_msg::_ControlCommand_default_instance_;
    new (ptr) ::vehicle_info::proto_msg::ControlCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vehicle_info::proto_msg::ControlCommand::InitAsDefaultInstance();
}

void InitDefaultsControlCommand() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsControlCommandImpl);
}

void InitDefaultsVehicleInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_vehicle_5finfo_2eproto::InitDefaultsMsgHeader();
  protobuf_vehicle_5finfo_2eproto::InitDefaultsControlCommand();
  {
    void* ptr = &::vehicle_info::proto_msg::_VehicleInfo_default_instance_;
    new (ptr) ::vehicle_info::proto_msg::VehicleInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vehicle_info::proto_msg::VehicleInfo::InitAsDefaultInstance();
}

void InitDefaultsVehicleInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicleInfoImpl);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::MsgHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::MsgHeader, msgtimestamps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::MsgHeader, msgversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::MsgHeader, msgframeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::MsgHeader, msgtotalcnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::MsgHeader, msglocalcnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::MsgHeader, msglocallen_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::ControlCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::ControlCommand, accrq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::ControlCommand, steeranglerq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::ControlCommand, steeranglespdrq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::ControlCommand, lightleftrq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::ControlCommand, lightrightrq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, msgheader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, vehspd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, flwheeldrivedirection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, frwheeldrivedirection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, rlwheeldrivedirection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, rrwheeldrivedirection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, current_gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, lturnlmpsts_r_pbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, rturnlmpsts_r_pbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, ffoglmpsts_f_pbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, frntwiprswtsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, windshldwipreactvsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, wipr_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, absactv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, absfailsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, vdcactv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, vehyawrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, vehlataccel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, vehlongacc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, steering_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, autolmpswtst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, hibeamswtsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, lowbeamswtst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, frntfoglamswtst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, actsteeranglespd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, actacc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, brkpedal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, accpedal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, actdrvmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vehicle_info::proto_msg::VehicleInfo, controlcmd_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vehicle_info::proto_msg::MsgHeader)},
  { 11, -1, sizeof(::vehicle_info::proto_msg::ControlCommand)},
  { 21, -1, sizeof(::vehicle_info::proto_msg::VehicleInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::vehicle_info::proto_msg::_MsgHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vehicle_info::proto_msg::_ControlCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vehicle_info::proto_msg::_VehicleInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "vehicle_info.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022vehicle_info.proto\022\026vehicle_info.proto"
      "_msg\"\211\001\n\tMsgHeader\022\025\n\rmsgTimestamps\030\001 \001("
      "\001\022\022\n\nmsgVersion\030\002 \001(\r\022\022\n\nmsgFrameId\030\003 \001("
      "\r\022\023\n\013msgTotalCnt\030\004 \001(\r\022\023\n\013msgLocalCnt\030\005 "
      "\001(\r\022\023\n\013msgLocalLen\030\006 \001(\r\"y\n\016ControlComma"
      "nd\022\r\n\005AccRq\030\001 \001(\002\022\024\n\014SteerAngleRq\030\002 \001(\002\022"
      "\027\n\017SteerAngleSpdRq\030\003 \001(\002\022\023\n\013LightLeftRq\030"
      "\004 \001(\r\022\024\n\014LightRightRq\030\005 \001(\r\"\202\010\n\013VehicleI"
      "nfo\0224\n\tmsgheader\030\001 \001(\0132!.vehicle_info.pr"
      "oto_msg.MsgHeader\022\016\n\006VehSpd\030\002 \001(\001\022E\n\025FLW"
      "heelDriveDirection\030\003 \001(\0162&.vehicle_info."
      "proto_msg.WheelDirection\022E\n\025FRWheelDrive"
      "Direction\030\004 \001(\0162&.vehicle_info.proto_msg"
      ".WheelDirection\022E\n\025RLWheelDriveDirection"
      "\030\005 \001(\0162&.vehicle_info.proto_msg.WheelDir"
      "ection\022E\n\025RRWheelDriveDirection\030\006 \001(\0162&."
      "vehicle_info.proto_msg.WheelDirection\0229\n"
      "\014Current_Gear\030\007 \001(\0162#.vehicle_info.proto"
      "_msg.CurrentGear\022\032\n\022LTurnLmpSts_R_Pbox\030\010"
      " \001(\005\022\032\n\022RTurnLmpSts_R_Pbox\030\t \001(\005\022\031\n\021FFog"
      "LmpSts_F_Pbox\030\n \001(\005\022\026\n\016FrntWiprSwtSts\030\013 "
      "\001(\005\022\034\n\024WindshldWipreActvSts\030\014 \001(\005\022\020\n\010wip"
      "r_req\030\r \001(\005\022\017\n\007ABSActv\030\016 \001(\005\022\022\n\nABSFailS"
      "ts\030\017 \001(\005\022\017\n\007VDCActv\030\020 \001(\005\022\022\n\nVehYawRate\030"
      "\021 \001(\002\022\023\n\013VehLatAccel\030\022 \001(\002\022\022\n\nVehLongAcc"
      "\030\023 \001(\002\022\026\n\016Steering_Angle\030\024 \001(\001\022\024\n\014AutoLm"
      "pSwtSt\030\025 \001(\005\022\024\n\014HiBeamSwtSts\030\026 \001(\005\022\024\n\014Lo"
      "wBeamSwtSt\030\027 \001(\005\022C\n\017FrntFogLamSwtSt\030\030 \001("
      "\0162*.vehicle_info.proto_msg.FrontFogLampS"
      "tatus\022\030\n\020ActSteerAngleSpd\030\031 \001(\002\022\016\n\006ActAc"
      "c\030\032 \001(\002\022\020\n\010BrkPedal\030\033 \001(\002\022\020\n\010AccPedal\030\034 "
      "\001(\002\022\013\n\003Yaw\030\035 \001(\002\022\022\n\nActDrvMode\030\036 \001(\r\022:\n\n"
      "ControlCmd\030\037 \001(\0132&.vehicle_info.proto_ms"
      "g.ControlCommand*V\n\016WheelDirection\022\025\n\021DI"
      "RECTION_UNKNOWN\020\000\022\025\n\021DIRECTION_FORWARD\020\001"
      "\022\026\n\022DIRECTION_BACKWARD\020\002*U\n\013CurrentGear\022"
      "\020\n\014UNKNOWN_GEAR\020\000\022\020\n\014FORWARD_GEAR\020\001\022\020\n\014R"
      "EVERSE_GEAR\020\002\022\020\n\014NEUTRAL_GEAR\020\003*N\n\022Front"
      "FogLampStatus\022\022\n\016STATUS_UNKNOWN\020\000\022\021\n\rSTA"
      "TUS_NORMAL\020\001\022\021\n\rSTATUS_DAMAGE\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1599);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vehicle_info.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_vehicle_5finfo_2eproto
namespace vehicle_info {
namespace proto_msg {
const ::google::protobuf::EnumDescriptor* WheelDirection_descriptor() {
  protobuf_vehicle_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vehicle_5finfo_2eproto::file_level_enum_descriptors[0];
}
bool WheelDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CurrentGear_descriptor() {
  protobuf_vehicle_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vehicle_5finfo_2eproto::file_level_enum_descriptors[1];
}
bool CurrentGear_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FrontFogLampStatus_descriptor() {
  protobuf_vehicle_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vehicle_5finfo_2eproto::file_level_enum_descriptors[2];
}
bool FrontFogLampStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MsgHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgHeader::kMsgTimestampsFieldNumber;
const int MsgHeader::kMsgVersionFieldNumber;
const int MsgHeader::kMsgFrameIdFieldNumber;
const int MsgHeader::kMsgTotalCntFieldNumber;
const int MsgHeader::kMsgLocalCntFieldNumber;
const int MsgHeader::kMsgLocalLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgHeader::MsgHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vehicle_5finfo_2eproto::InitDefaultsMsgHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vehicle_info.proto_msg.MsgHeader)
}
MsgHeader::MsgHeader(const MsgHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&msgtimestamps_, &from.msgtimestamps_,
    static_cast<size_t>(reinterpret_cast<char*>(&msglocallen_) -
    reinterpret_cast<char*>(&msgtimestamps_)) + sizeof(msglocallen_));
  // @@protoc_insertion_point(copy_constructor:vehicle_info.proto_msg.MsgHeader)
}

void MsgHeader::SharedCtor() {
  ::memset(&msgtimestamps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msglocallen_) -
      reinterpret_cast<char*>(&msgtimestamps_)) + sizeof(msglocallen_));
  _cached_size_ = 0;
}

MsgHeader::~MsgHeader() {
  // @@protoc_insertion_point(destructor:vehicle_info.proto_msg.MsgHeader)
  SharedDtor();
}

void MsgHeader::SharedDtor() {
}

void MsgHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHeader::descriptor() {
  ::protobuf_vehicle_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgHeader& MsgHeader::default_instance() {
  ::protobuf_vehicle_5finfo_2eproto::InitDefaultsMsgHeader();
  return *internal_default_instance();
}

MsgHeader* MsgHeader::New(::google::protobuf::Arena* arena) const {
  MsgHeader* n = new MsgHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:vehicle_info.proto_msg.MsgHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&msgtimestamps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msglocallen_) -
      reinterpret_cast<char*>(&msgtimestamps_)) + sizeof(msglocallen_));
  _internal_metadata_.Clear();
}

bool MsgHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vehicle_info.proto_msg.MsgHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double msgTimestamps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &msgtimestamps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msgVersion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msgFrameId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgframeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msgTotalCnt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgtotalcnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msgLocalCnt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msglocalcnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msgLocalLen = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msglocallen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vehicle_info.proto_msg.MsgHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vehicle_info.proto_msg.MsgHeader)
  return false;
#undef DO_
}

void MsgHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vehicle_info.proto_msg.MsgHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double msgTimestamps = 1;
  if (this->msgtimestamps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->msgtimestamps(), output);
  }

  // uint32 msgVersion = 2;
  if (this->msgversion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgversion(), output);
  }

  // uint32 msgFrameId = 3;
  if (this->msgframeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msgframeid(), output);
  }

  // uint32 msgTotalCnt = 4;
  if (this->msgtotalcnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msgtotalcnt(), output);
  }

  // uint32 msgLocalCnt = 5;
  if (this->msglocalcnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->msglocalcnt(), output);
  }

  // uint32 msgLocalLen = 6;
  if (this->msglocallen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->msglocallen(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vehicle_info.proto_msg.MsgHeader)
}

::google::protobuf::uint8* MsgHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vehicle_info.proto_msg.MsgHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double msgTimestamps = 1;
  if (this->msgtimestamps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->msgtimestamps(), target);
  }

  // uint32 msgVersion = 2;
  if (this->msgversion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgversion(), target);
  }

  // uint32 msgFrameId = 3;
  if (this->msgframeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->msgframeid(), target);
  }

  // uint32 msgTotalCnt = 4;
  if (this->msgtotalcnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msgtotalcnt(), target);
  }

  // uint32 msgLocalCnt = 5;
  if (this->msglocalcnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->msglocalcnt(), target);
  }

  // uint32 msgLocalLen = 6;
  if (this->msglocallen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->msglocallen(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vehicle_info.proto_msg.MsgHeader)
  return target;
}

size_t MsgHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vehicle_info.proto_msg.MsgHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double msgTimestamps = 1;
  if (this->msgtimestamps() != 0) {
    total_size += 1 + 8;
  }

  // uint32 msgVersion = 2;
  if (this->msgversion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgversion());
  }

  // uint32 msgFrameId = 3;
  if (this->msgframeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgframeid());
  }

  // uint32 msgTotalCnt = 4;
  if (this->msgtotalcnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgtotalcnt());
  }

  // uint32 msgLocalCnt = 5;
  if (this->msglocalcnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msglocalcnt());
  }

  // uint32 msgLocalLen = 6;
  if (this->msglocallen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msglocallen());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vehicle_info.proto_msg.MsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vehicle_info.proto_msg.MsgHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vehicle_info.proto_msg.MsgHeader)
    MergeFrom(*source);
  }
}

void MsgHeader::MergeFrom(const MsgHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vehicle_info.proto_msg.MsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msgtimestamps() != 0) {
    set_msgtimestamps(from.msgtimestamps());
  }
  if (from.msgversion() != 0) {
    set_msgversion(from.msgversion());
  }
  if (from.msgframeid() != 0) {
    set_msgframeid(from.msgframeid());
  }
  if (from.msgtotalcnt() != 0) {
    set_msgtotalcnt(from.msgtotalcnt());
  }
  if (from.msglocalcnt() != 0) {
    set_msglocalcnt(from.msglocalcnt());
  }
  if (from.msglocallen() != 0) {
    set_msglocallen(from.msglocallen());
  }
}

void MsgHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vehicle_info.proto_msg.MsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHeader::CopyFrom(const MsgHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vehicle_info.proto_msg.MsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHeader::IsInitialized() const {
  return true;
}

void MsgHeader::Swap(MsgHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgHeader::InternalSwap(MsgHeader* other) {
  using std::swap;
  swap(msgtimestamps_, other->msgtimestamps_);
  swap(msgversion_, other->msgversion_);
  swap(msgframeid_, other->msgframeid_);
  swap(msgtotalcnt_, other->msgtotalcnt_);
  swap(msglocalcnt_, other->msglocalcnt_);
  swap(msglocallen_, other->msglocallen_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgHeader::GetMetadata() const {
  protobuf_vehicle_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControlCommand::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlCommand::kAccRqFieldNumber;
const int ControlCommand::kSteerAngleRqFieldNumber;
const int ControlCommand::kSteerAngleSpdRqFieldNumber;
const int ControlCommand::kLightLeftRqFieldNumber;
const int ControlCommand::kLightRightRqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlCommand::ControlCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vehicle_5finfo_2eproto::InitDefaultsControlCommand();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vehicle_info.proto_msg.ControlCommand)
}
ControlCommand::ControlCommand(const ControlCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&accrq_, &from.accrq_,
    static_cast<size_t>(reinterpret_cast<char*>(&lightrightrq_) -
    reinterpret_cast<char*>(&accrq_)) + sizeof(lightrightrq_));
  // @@protoc_insertion_point(copy_constructor:vehicle_info.proto_msg.ControlCommand)
}

void ControlCommand::SharedCtor() {
  ::memset(&accrq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lightrightrq_) -
      reinterpret_cast<char*>(&accrq_)) + sizeof(lightrightrq_));
  _cached_size_ = 0;
}

ControlCommand::~ControlCommand() {
  // @@protoc_insertion_point(destructor:vehicle_info.proto_msg.ControlCommand)
  SharedDtor();
}

void ControlCommand::SharedDtor() {
}

void ControlCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlCommand::descriptor() {
  ::protobuf_vehicle_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControlCommand& ControlCommand::default_instance() {
  ::protobuf_vehicle_5finfo_2eproto::InitDefaultsControlCommand();
  return *internal_default_instance();
}

ControlCommand* ControlCommand::New(::google::protobuf::Arena* arena) const {
  ControlCommand* n = new ControlCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControlCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:vehicle_info.proto_msg.ControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&accrq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lightrightrq_) -
      reinterpret_cast<char*>(&accrq_)) + sizeof(lightrightrq_));
  _internal_metadata_.Clear();
}

bool ControlCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vehicle_info.proto_msg.ControlCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float AccRq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accrq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float SteerAngleRq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steeranglerq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float SteerAngleSpdRq = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steeranglespdrq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 LightLeftRq = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lightleftrq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 LightRightRq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lightrightrq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vehicle_info.proto_msg.ControlCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vehicle_info.proto_msg.ControlCommand)
  return false;
#undef DO_
}

void ControlCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vehicle_info.proto_msg.ControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float AccRq = 1;
  if (this->accrq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->accrq(), output);
  }

  // float SteerAngleRq = 2;
  if (this->steeranglerq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->steeranglerq(), output);
  }

  // float SteerAngleSpdRq = 3;
  if (this->steeranglespdrq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->steeranglespdrq(), output);
  }

  // uint32 LightLeftRq = 4;
  if (this->lightleftrq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lightleftrq(), output);
  }

  // uint32 LightRightRq = 5;
  if (this->lightrightrq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lightrightrq(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vehicle_info.proto_msg.ControlCommand)
}

::google::protobuf::uint8* ControlCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vehicle_info.proto_msg.ControlCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float AccRq = 1;
  if (this->accrq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->accrq(), target);
  }

  // float SteerAngleRq = 2;
  if (this->steeranglerq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->steeranglerq(), target);
  }

  // float SteerAngleSpdRq = 3;
  if (this->steeranglespdrq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->steeranglespdrq(), target);
  }

  // uint32 LightLeftRq = 4;
  if (this->lightleftrq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lightleftrq(), target);
  }

  // uint32 LightRightRq = 5;
  if (this->lightrightrq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lightrightrq(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vehicle_info.proto_msg.ControlCommand)
  return target;
}

size_t ControlCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vehicle_info.proto_msg.ControlCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float AccRq = 1;
  if (this->accrq() != 0) {
    total_size += 1 + 4;
  }

  // float SteerAngleRq = 2;
  if (this->steeranglerq() != 0) {
    total_size += 1 + 4;
  }

  // float SteerAngleSpdRq = 3;
  if (this->steeranglespdrq() != 0) {
    total_size += 1 + 4;
  }

  // uint32 LightLeftRq = 4;
  if (this->lightleftrq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lightleftrq());
  }

  // uint32 LightRightRq = 5;
  if (this->lightrightrq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lightrightrq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vehicle_info.proto_msg.ControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vehicle_info.proto_msg.ControlCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vehicle_info.proto_msg.ControlCommand)
    MergeFrom(*source);
  }
}

void ControlCommand::MergeFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vehicle_info.proto_msg.ControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accrq() != 0) {
    set_accrq(from.accrq());
  }
  if (from.steeranglerq() != 0) {
    set_steeranglerq(from.steeranglerq());
  }
  if (from.steeranglespdrq() != 0) {
    set_steeranglespdrq(from.steeranglespdrq());
  }
  if (from.lightleftrq() != 0) {
    set_lightleftrq(from.lightleftrq());
  }
  if (from.lightrightrq() != 0) {
    set_lightrightrq(from.lightrightrq());
  }
}

void ControlCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vehicle_info.proto_msg.ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlCommand::CopyFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vehicle_info.proto_msg.ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCommand::IsInitialized() const {
  return true;
}

void ControlCommand::Swap(ControlCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlCommand::InternalSwap(ControlCommand* other) {
  using std::swap;
  swap(accrq_, other->accrq_);
  swap(steeranglerq_, other->steeranglerq_);
  swap(steeranglespdrq_, other->steeranglespdrq_);
  swap(lightleftrq_, other->lightleftrq_);
  swap(lightrightrq_, other->lightrightrq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControlCommand::GetMetadata() const {
  protobuf_vehicle_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleInfo::InitAsDefaultInstance() {
  ::vehicle_info::proto_msg::_VehicleInfo_default_instance_._instance.get_mutable()->msgheader_ = const_cast< ::vehicle_info::proto_msg::MsgHeader*>(
      ::vehicle_info::proto_msg::MsgHeader::internal_default_instance());
  ::vehicle_info::proto_msg::_VehicleInfo_default_instance_._instance.get_mutable()->controlcmd_ = const_cast< ::vehicle_info::proto_msg::ControlCommand*>(
      ::vehicle_info::proto_msg::ControlCommand::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleInfo::kMsgheaderFieldNumber;
const int VehicleInfo::kVehSpdFieldNumber;
const int VehicleInfo::kFLWheelDriveDirectionFieldNumber;
const int VehicleInfo::kFRWheelDriveDirectionFieldNumber;
const int VehicleInfo::kRLWheelDriveDirectionFieldNumber;
const int VehicleInfo::kRRWheelDriveDirectionFieldNumber;
const int VehicleInfo::kCurrentGearFieldNumber;
const int VehicleInfo::kLTurnLmpStsRPboxFieldNumber;
const int VehicleInfo::kRTurnLmpStsRPboxFieldNumber;
const int VehicleInfo::kFFogLmpStsFPboxFieldNumber;
const int VehicleInfo::kFrntWiprSwtStsFieldNumber;
const int VehicleInfo::kWindshldWipreActvStsFieldNumber;
const int VehicleInfo::kWiprReqFieldNumber;
const int VehicleInfo::kABSActvFieldNumber;
const int VehicleInfo::kABSFailStsFieldNumber;
const int VehicleInfo::kVDCActvFieldNumber;
const int VehicleInfo::kVehYawRateFieldNumber;
const int VehicleInfo::kVehLatAccelFieldNumber;
const int VehicleInfo::kVehLongAccFieldNumber;
const int VehicleInfo::kSteeringAngleFieldNumber;
const int VehicleInfo::kAutoLmpSwtStFieldNumber;
const int VehicleInfo::kHiBeamSwtStsFieldNumber;
const int VehicleInfo::kLowBeamSwtStFieldNumber;
const int VehicleInfo::kFrntFogLamSwtStFieldNumber;
const int VehicleInfo::kActSteerAngleSpdFieldNumber;
const int VehicleInfo::kActAccFieldNumber;
const int VehicleInfo::kBrkPedalFieldNumber;
const int VehicleInfo::kAccPedalFieldNumber;
const int VehicleInfo::kYawFieldNumber;
const int VehicleInfo::kActDrvModeFieldNumber;
const int VehicleInfo::kControlCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleInfo::VehicleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_vehicle_5finfo_2eproto::InitDefaultsVehicleInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:vehicle_info.proto_msg.VehicleInfo)
}
VehicleInfo::VehicleInfo(const VehicleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msgheader()) {
    msgheader_ = new ::vehicle_info::proto_msg::MsgHeader(*from.msgheader_);
  } else {
    msgheader_ = NULL;
  }
  if (from.has_controlcmd()) {
    controlcmd_ = new ::vehicle_info::proto_msg::ControlCommand(*from.controlcmd_);
  } else {
    controlcmd_ = NULL;
  }
  ::memcpy(&vehspd_, &from.vehspd_,
    static_cast<size_t>(reinterpret_cast<char*>(&actdrvmode_) -
    reinterpret_cast<char*>(&vehspd_)) + sizeof(actdrvmode_));
  // @@protoc_insertion_point(copy_constructor:vehicle_info.proto_msg.VehicleInfo)
}

void VehicleInfo::SharedCtor() {
  ::memset(&msgheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actdrvmode_) -
      reinterpret_cast<char*>(&msgheader_)) + sizeof(actdrvmode_));
  _cached_size_ = 0;
}

VehicleInfo::~VehicleInfo() {
  // @@protoc_insertion_point(destructor:vehicle_info.proto_msg.VehicleInfo)
  SharedDtor();
}

void VehicleInfo::SharedDtor() {
  if (this != internal_default_instance()) delete msgheader_;
  if (this != internal_default_instance()) delete controlcmd_;
}

void VehicleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleInfo::descriptor() {
  ::protobuf_vehicle_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5finfo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleInfo& VehicleInfo::default_instance() {
  ::protobuf_vehicle_5finfo_2eproto::InitDefaultsVehicleInfo();
  return *internal_default_instance();
}

VehicleInfo* VehicleInfo::New(::google::protobuf::Arena* arena) const {
  VehicleInfo* n = new VehicleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:vehicle_info.proto_msg.VehicleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && msgheader_ != NULL) {
    delete msgheader_;
  }
  msgheader_ = NULL;
  if (GetArenaNoVirtual() == NULL && controlcmd_ != NULL) {
    delete controlcmd_;
  }
  controlcmd_ = NULL;
  ::memset(&vehspd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actdrvmode_) -
      reinterpret_cast<char*>(&vehspd_)) + sizeof(actdrvmode_));
  _internal_metadata_.Clear();
}

bool VehicleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vehicle_info.proto_msg.VehicleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vehicle_info.proto_msg.MsgHeader msgheader = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_msgheader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double VehSpd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehspd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vehicle_info.proto_msg.WheelDirection FLWheelDriveDirection = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_flwheeldrivedirection(static_cast< ::vehicle_info::proto_msg::WheelDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vehicle_info.proto_msg.WheelDirection FRWheelDriveDirection = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_frwheeldrivedirection(static_cast< ::vehicle_info::proto_msg::WheelDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vehicle_info.proto_msg.WheelDirection RLWheelDriveDirection = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rlwheeldrivedirection(static_cast< ::vehicle_info::proto_msg::WheelDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vehicle_info.proto_msg.WheelDirection RRWheelDriveDirection = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rrwheeldrivedirection(static_cast< ::vehicle_info::proto_msg::WheelDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vehicle_info.proto_msg.CurrentGear Current_Gear = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_current_gear(static_cast< ::vehicle_info::proto_msg::CurrentGear >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LTurnLmpSts_R_Pbox = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lturnlmpsts_r_pbox_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 RTurnLmpSts_R_Pbox = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rturnlmpsts_r_pbox_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 FFogLmpSts_F_Pbox = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ffoglmpsts_f_pbox_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 FrntWiprSwtSts = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frntwiprswtsts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 WindshldWipreActvSts = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &windshldwipreactvsts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wipr_req = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wipr_req_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ABSActv = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &absactv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ABSFailSts = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &absfailsts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 VDCActv = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vdcactv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float VehYawRate = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vehyawrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float VehLatAccel = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vehlataccel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float VehLongAcc = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vehlongacc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Steering_Angle = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 AutoLmpSwtSt = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autolmpswtst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 HiBeamSwtSts = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hibeamswtsts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LowBeamSwtSt = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lowbeamswtst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vehicle_info.proto_msg.FrontFogLampStatus FrntFogLamSwtSt = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_frntfoglamswtst(static_cast< ::vehicle_info::proto_msg::FrontFogLampStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ActSteerAngleSpd = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u /* 205 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &actsteeranglespd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ActAcc = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 213 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &actacc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float BrkPedal = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u /* 221 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brkpedal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float AccPedal = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u /* 229 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accpedal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Yaw = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(237u /* 237 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ActDrvMode = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actdrvmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vehicle_info.proto_msg.ControlCommand ControlCmd = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_controlcmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vehicle_info.proto_msg.VehicleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vehicle_info.proto_msg.VehicleInfo)
  return false;
#undef DO_
}

void VehicleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vehicle_info.proto_msg.VehicleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vehicle_info.proto_msg.MsgHeader msgheader = 1;
  if (this->has_msgheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msgheader_, output);
  }

  // double VehSpd = 2;
  if (this->vehspd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->vehspd(), output);
  }

  // .vehicle_info.proto_msg.WheelDirection FLWheelDriveDirection = 3;
  if (this->flwheeldrivedirection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->flwheeldrivedirection(), output);
  }

  // .vehicle_info.proto_msg.WheelDirection FRWheelDriveDirection = 4;
  if (this->frwheeldrivedirection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->frwheeldrivedirection(), output);
  }

  // .vehicle_info.proto_msg.WheelDirection RLWheelDriveDirection = 5;
  if (this->rlwheeldrivedirection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->rlwheeldrivedirection(), output);
  }

  // .vehicle_info.proto_msg.WheelDirection RRWheelDriveDirection = 6;
  if (this->rrwheeldrivedirection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->rrwheeldrivedirection(), output);
  }

  // .vehicle_info.proto_msg.CurrentGear Current_Gear = 7;
  if (this->current_gear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->current_gear(), output);
  }

  // int32 LTurnLmpSts_R_Pbox = 8;
  if (this->lturnlmpsts_r_pbox() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lturnlmpsts_r_pbox(), output);
  }

  // int32 RTurnLmpSts_R_Pbox = 9;
  if (this->rturnlmpsts_r_pbox() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->rturnlmpsts_r_pbox(), output);
  }

  // int32 FFogLmpSts_F_Pbox = 10;
  if (this->ffoglmpsts_f_pbox() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ffoglmpsts_f_pbox(), output);
  }

  // int32 FrntWiprSwtSts = 11;
  if (this->frntwiprswtsts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->frntwiprswtsts(), output);
  }

  // int32 WindshldWipreActvSts = 12;
  if (this->windshldwipreactvsts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->windshldwipreactvsts(), output);
  }

  // int32 wipr_req = 13;
  if (this->wipr_req() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->wipr_req(), output);
  }

  // int32 ABSActv = 14;
  if (this->absactv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->absactv(), output);
  }

  // int32 ABSFailSts = 15;
  if (this->absfailsts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->absfailsts(), output);
  }

  // int32 VDCActv = 16;
  if (this->vdcactv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->vdcactv(), output);
  }

  // float VehYawRate = 17;
  if (this->vehyawrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->vehyawrate(), output);
  }

  // float VehLatAccel = 18;
  if (this->vehlataccel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->vehlataccel(), output);
  }

  // float VehLongAcc = 19;
  if (this->vehlongacc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->vehlongacc(), output);
  }

  // double Steering_Angle = 20;
  if (this->steering_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->steering_angle(), output);
  }

  // int32 AutoLmpSwtSt = 21;
  if (this->autolmpswtst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->autolmpswtst(), output);
  }

  // int32 HiBeamSwtSts = 22;
  if (this->hibeamswtsts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->hibeamswtsts(), output);
  }

  // int32 LowBeamSwtSt = 23;
  if (this->lowbeamswtst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->lowbeamswtst(), output);
  }

  // .vehicle_info.proto_msg.FrontFogLampStatus FrntFogLamSwtSt = 24;
  if (this->frntfoglamswtst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->frntfoglamswtst(), output);
  }

  // float ActSteerAngleSpd = 25;
  if (this->actsteeranglespd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->actsteeranglespd(), output);
  }

  // float ActAcc = 26;
  if (this->actacc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->actacc(), output);
  }

  // float BrkPedal = 27;
  if (this->brkpedal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->brkpedal(), output);
  }

  // float AccPedal = 28;
  if (this->accpedal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->accpedal(), output);
  }

  // float Yaw = 29;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->yaw(), output);
  }

  // uint32 ActDrvMode = 30;
  if (this->actdrvmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->actdrvmode(), output);
  }

  // .vehicle_info.proto_msg.ControlCommand ControlCmd = 31;
  if (this->has_controlcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->controlcmd_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vehicle_info.proto_msg.VehicleInfo)
}

::google::protobuf::uint8* VehicleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vehicle_info.proto_msg.VehicleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vehicle_info.proto_msg.MsgHeader msgheader = 1;
  if (this->has_msgheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->msgheader_, deterministic, target);
  }

  // double VehSpd = 2;
  if (this->vehspd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->vehspd(), target);
  }

  // .vehicle_info.proto_msg.WheelDirection FLWheelDriveDirection = 3;
  if (this->flwheeldrivedirection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->flwheeldrivedirection(), target);
  }

  // .vehicle_info.proto_msg.WheelDirection FRWheelDriveDirection = 4;
  if (this->frwheeldrivedirection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->frwheeldrivedirection(), target);
  }

  // .vehicle_info.proto_msg.WheelDirection RLWheelDriveDirection = 5;
  if (this->rlwheeldrivedirection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->rlwheeldrivedirection(), target);
  }

  // .vehicle_info.proto_msg.WheelDirection RRWheelDriveDirection = 6;
  if (this->rrwheeldrivedirection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->rrwheeldrivedirection(), target);
  }

  // .vehicle_info.proto_msg.CurrentGear Current_Gear = 7;
  if (this->current_gear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->current_gear(), target);
  }

  // int32 LTurnLmpSts_R_Pbox = 8;
  if (this->lturnlmpsts_r_pbox() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lturnlmpsts_r_pbox(), target);
  }

  // int32 RTurnLmpSts_R_Pbox = 9;
  if (this->rturnlmpsts_r_pbox() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->rturnlmpsts_r_pbox(), target);
  }

  // int32 FFogLmpSts_F_Pbox = 10;
  if (this->ffoglmpsts_f_pbox() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ffoglmpsts_f_pbox(), target);
  }

  // int32 FrntWiprSwtSts = 11;
  if (this->frntwiprswtsts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->frntwiprswtsts(), target);
  }

  // int32 WindshldWipreActvSts = 12;
  if (this->windshldwipreactvsts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->windshldwipreactvsts(), target);
  }

  // int32 wipr_req = 13;
  if (this->wipr_req() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->wipr_req(), target);
  }

  // int32 ABSActv = 14;
  if (this->absactv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->absactv(), target);
  }

  // int32 ABSFailSts = 15;
  if (this->absfailsts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->absfailsts(), target);
  }

  // int32 VDCActv = 16;
  if (this->vdcactv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->vdcactv(), target);
  }

  // float VehYawRate = 17;
  if (this->vehyawrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->vehyawrate(), target);
  }

  // float VehLatAccel = 18;
  if (this->vehlataccel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->vehlataccel(), target);
  }

  // float VehLongAcc = 19;
  if (this->vehlongacc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->vehlongacc(), target);
  }

  // double Steering_Angle = 20;
  if (this->steering_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->steering_angle(), target);
  }

  // int32 AutoLmpSwtSt = 21;
  if (this->autolmpswtst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->autolmpswtst(), target);
  }

  // int32 HiBeamSwtSts = 22;
  if (this->hibeamswtsts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->hibeamswtsts(), target);
  }

  // int32 LowBeamSwtSt = 23;
  if (this->lowbeamswtst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->lowbeamswtst(), target);
  }

  // .vehicle_info.proto_msg.FrontFogLampStatus FrntFogLamSwtSt = 24;
  if (this->frntfoglamswtst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->frntfoglamswtst(), target);
  }

  // float ActSteerAngleSpd = 25;
  if (this->actsteeranglespd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->actsteeranglespd(), target);
  }

  // float ActAcc = 26;
  if (this->actacc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->actacc(), target);
  }

  // float BrkPedal = 27;
  if (this->brkpedal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->brkpedal(), target);
  }

  // float AccPedal = 28;
  if (this->accpedal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->accpedal(), target);
  }

  // float Yaw = 29;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->yaw(), target);
  }

  // uint32 ActDrvMode = 30;
  if (this->actdrvmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->actdrvmode(), target);
  }

  // .vehicle_info.proto_msg.ControlCommand ControlCmd = 31;
  if (this->has_controlcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, *this->controlcmd_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vehicle_info.proto_msg.VehicleInfo)
  return target;
}

size_t VehicleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vehicle_info.proto_msg.VehicleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .vehicle_info.proto_msg.MsgHeader msgheader = 1;
  if (this->has_msgheader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->msgheader_);
  }

  // .vehicle_info.proto_msg.ControlCommand ControlCmd = 31;
  if (this->has_controlcmd()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->controlcmd_);
  }

  // double VehSpd = 2;
  if (this->vehspd() != 0) {
    total_size += 1 + 8;
  }

  // .vehicle_info.proto_msg.WheelDirection FLWheelDriveDirection = 3;
  if (this->flwheeldrivedirection() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flwheeldrivedirection());
  }

  // .vehicle_info.proto_msg.WheelDirection FRWheelDriveDirection = 4;
  if (this->frwheeldrivedirection() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->frwheeldrivedirection());
  }

  // .vehicle_info.proto_msg.WheelDirection RLWheelDriveDirection = 5;
  if (this->rlwheeldrivedirection() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rlwheeldrivedirection());
  }

  // .vehicle_info.proto_msg.WheelDirection RRWheelDriveDirection = 6;
  if (this->rrwheeldrivedirection() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rrwheeldrivedirection());
  }

  // .vehicle_info.proto_msg.CurrentGear Current_Gear = 7;
  if (this->current_gear() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->current_gear());
  }

  // int32 LTurnLmpSts_R_Pbox = 8;
  if (this->lturnlmpsts_r_pbox() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lturnlmpsts_r_pbox());
  }

  // int32 RTurnLmpSts_R_Pbox = 9;
  if (this->rturnlmpsts_r_pbox() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rturnlmpsts_r_pbox());
  }

  // int32 FFogLmpSts_F_Pbox = 10;
  if (this->ffoglmpsts_f_pbox() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ffoglmpsts_f_pbox());
  }

  // int32 FrntWiprSwtSts = 11;
  if (this->frntwiprswtsts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frntwiprswtsts());
  }

  // int32 WindshldWipreActvSts = 12;
  if (this->windshldwipreactvsts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->windshldwipreactvsts());
  }

  // int32 wipr_req = 13;
  if (this->wipr_req() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wipr_req());
  }

  // int32 ABSActv = 14;
  if (this->absactv() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->absactv());
  }

  // int32 ABSFailSts = 15;
  if (this->absfailsts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->absfailsts());
  }

  // int32 VDCActv = 16;
  if (this->vdcactv() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vdcactv());
  }

  // float VehYawRate = 17;
  if (this->vehyawrate() != 0) {
    total_size += 2 + 4;
  }

  // float VehLatAccel = 18;
  if (this->vehlataccel() != 0) {
    total_size += 2 + 4;
  }

  // double Steering_Angle = 20;
  if (this->steering_angle() != 0) {
    total_size += 2 + 8;
  }

  // float VehLongAcc = 19;
  if (this->vehlongacc() != 0) {
    total_size += 2 + 4;
  }

  // int32 AutoLmpSwtSt = 21;
  if (this->autolmpswtst() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->autolmpswtst());
  }

  // int32 HiBeamSwtSts = 22;
  if (this->hibeamswtsts() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hibeamswtsts());
  }

  // int32 LowBeamSwtSt = 23;
  if (this->lowbeamswtst() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lowbeamswtst());
  }

  // .vehicle_info.proto_msg.FrontFogLampStatus FrntFogLamSwtSt = 24;
  if (this->frntfoglamswtst() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->frntfoglamswtst());
  }

  // float ActSteerAngleSpd = 25;
  if (this->actsteeranglespd() != 0) {
    total_size += 2 + 4;
  }

  // float ActAcc = 26;
  if (this->actacc() != 0) {
    total_size += 2 + 4;
  }

  // float BrkPedal = 27;
  if (this->brkpedal() != 0) {
    total_size += 2 + 4;
  }

  // float AccPedal = 28;
  if (this->accpedal() != 0) {
    total_size += 2 + 4;
  }

  // float Yaw = 29;
  if (this->yaw() != 0) {
    total_size += 2 + 4;
  }

  // uint32 ActDrvMode = 30;
  if (this->actdrvmode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->actdrvmode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vehicle_info.proto_msg.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vehicle_info.proto_msg.VehicleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vehicle_info.proto_msg.VehicleInfo)
    MergeFrom(*source);
  }
}

void VehicleInfo::MergeFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vehicle_info.proto_msg.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msgheader()) {
    mutable_msgheader()->::vehicle_info::proto_msg::MsgHeader::MergeFrom(from.msgheader());
  }
  if (from.has_controlcmd()) {
    mutable_controlcmd()->::vehicle_info::proto_msg::ControlCommand::MergeFrom(from.controlcmd());
  }
  if (from.vehspd() != 0) {
    set_vehspd(from.vehspd());
  }
  if (from.flwheeldrivedirection() != 0) {
    set_flwheeldrivedirection(from.flwheeldrivedirection());
  }
  if (from.frwheeldrivedirection() != 0) {
    set_frwheeldrivedirection(from.frwheeldrivedirection());
  }
  if (from.rlwheeldrivedirection() != 0) {
    set_rlwheeldrivedirection(from.rlwheeldrivedirection());
  }
  if (from.rrwheeldrivedirection() != 0) {
    set_rrwheeldrivedirection(from.rrwheeldrivedirection());
  }
  if (from.current_gear() != 0) {
    set_current_gear(from.current_gear());
  }
  if (from.lturnlmpsts_r_pbox() != 0) {
    set_lturnlmpsts_r_pbox(from.lturnlmpsts_r_pbox());
  }
  if (from.rturnlmpsts_r_pbox() != 0) {
    set_rturnlmpsts_r_pbox(from.rturnlmpsts_r_pbox());
  }
  if (from.ffoglmpsts_f_pbox() != 0) {
    set_ffoglmpsts_f_pbox(from.ffoglmpsts_f_pbox());
  }
  if (from.frntwiprswtsts() != 0) {
    set_frntwiprswtsts(from.frntwiprswtsts());
  }
  if (from.windshldwipreactvsts() != 0) {
    set_windshldwipreactvsts(from.windshldwipreactvsts());
  }
  if (from.wipr_req() != 0) {
    set_wipr_req(from.wipr_req());
  }
  if (from.absactv() != 0) {
    set_absactv(from.absactv());
  }
  if (from.absfailsts() != 0) {
    set_absfailsts(from.absfailsts());
  }
  if (from.vdcactv() != 0) {
    set_vdcactv(from.vdcactv());
  }
  if (from.vehyawrate() != 0) {
    set_vehyawrate(from.vehyawrate());
  }
  if (from.vehlataccel() != 0) {
    set_vehlataccel(from.vehlataccel());
  }
  if (from.steering_angle() != 0) {
    set_steering_angle(from.steering_angle());
  }
  if (from.vehlongacc() != 0) {
    set_vehlongacc(from.vehlongacc());
  }
  if (from.autolmpswtst() != 0) {
    set_autolmpswtst(from.autolmpswtst());
  }
  if (from.hibeamswtsts() != 0) {
    set_hibeamswtsts(from.hibeamswtsts());
  }
  if (from.lowbeamswtst() != 0) {
    set_lowbeamswtst(from.lowbeamswtst());
  }
  if (from.frntfoglamswtst() != 0) {
    set_frntfoglamswtst(from.frntfoglamswtst());
  }
  if (from.actsteeranglespd() != 0) {
    set_actsteeranglespd(from.actsteeranglespd());
  }
  if (from.actacc() != 0) {
    set_actacc(from.actacc());
  }
  if (from.brkpedal() != 0) {
    set_brkpedal(from.brkpedal());
  }
  if (from.accpedal() != 0) {
    set_accpedal(from.accpedal());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.actdrvmode() != 0) {
    set_actdrvmode(from.actdrvmode());
  }
}

void VehicleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vehicle_info.proto_msg.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleInfo::CopyFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vehicle_info.proto_msg.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleInfo::IsInitialized() const {
  return true;
}

void VehicleInfo::Swap(VehicleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleInfo::InternalSwap(VehicleInfo* other) {
  using std::swap;
  swap(msgheader_, other->msgheader_);
  swap(controlcmd_, other->controlcmd_);
  swap(vehspd_, other->vehspd_);
  swap(flwheeldrivedirection_, other->flwheeldrivedirection_);
  swap(frwheeldrivedirection_, other->frwheeldrivedirection_);
  swap(rlwheeldrivedirection_, other->rlwheeldrivedirection_);
  swap(rrwheeldrivedirection_, other->rrwheeldrivedirection_);
  swap(current_gear_, other->current_gear_);
  swap(lturnlmpsts_r_pbox_, other->lturnlmpsts_r_pbox_);
  swap(rturnlmpsts_r_pbox_, other->rturnlmpsts_r_pbox_);
  swap(ffoglmpsts_f_pbox_, other->ffoglmpsts_f_pbox_);
  swap(frntwiprswtsts_, other->frntwiprswtsts_);
  swap(windshldwipreactvsts_, other->windshldwipreactvsts_);
  swap(wipr_req_, other->wipr_req_);
  swap(absactv_, other->absactv_);
  swap(absfailsts_, other->absfailsts_);
  swap(vdcactv_, other->vdcactv_);
  swap(vehyawrate_, other->vehyawrate_);
  swap(vehlataccel_, other->vehlataccel_);
  swap(steering_angle_, other->steering_angle_);
  swap(vehlongacc_, other->vehlongacc_);
  swap(autolmpswtst_, other->autolmpswtst_);
  swap(hibeamswtsts_, other->hibeamswtsts_);
  swap(lowbeamswtst_, other->lowbeamswtst_);
  swap(frntfoglamswtst_, other->frntfoglamswtst_);
  swap(actsteeranglespd_, other->actsteeranglespd_);
  swap(actacc_, other->actacc_);
  swap(brkpedal_, other->brkpedal_);
  swap(accpedal_, other->accpedal_);
  swap(yaw_, other->yaw_);
  swap(actdrvmode_, other->actdrvmode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleInfo::GetMetadata() const {
  protobuf_vehicle_5finfo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vehicle_5finfo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto_msg
}  // namespace vehicle_info

// @@protoc_insertion_point(global_scope)
