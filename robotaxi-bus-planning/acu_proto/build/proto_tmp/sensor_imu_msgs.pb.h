// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_imu_msgs.proto

#ifndef PROTOBUF_sensor_5fimu_5fmsgs_2eproto__INCLUDED
#define PROTOBUF_sensor_5fimu_5fmsgs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common_msgs.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_sensor_5fimu_5fmsgs_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLocalizationControlImpl();
void InitDefaultsLocalizationControl();
void InitDefaultsSensorImuImpl();
void InitDefaultsSensorImu();
void InitDefaultsIvsensorgpsImpl();
void InitDefaultsIvsensorgps();
void InitDefaultsIvsensorimuImpl();
void InitDefaultsIvsensorimu();
void InitDefaultsIvwheelspeedImpl();
void InitDefaultsIvwheelspeed();
void InitDefaultsFilterstatusImpl();
void InitDefaultsFilterstatus();
void InitDefaultsIvlidarmatchingImpl();
void InitDefaultsIvlidarmatching();
inline void InitDefaults() {
  InitDefaultsLocalizationControl();
  InitDefaultsSensorImu();
  InitDefaultsIvsensorgps();
  InitDefaultsIvsensorimu();
  InitDefaultsIvwheelspeed();
  InitDefaultsFilterstatus();
  InitDefaultsIvlidarmatching();
}
}  // namespace protobuf_sensor_5fimu_5fmsgs_2eproto
namespace sensor_imu_msgs {
class Filterstatus;
class FilterstatusDefaultTypeInternal;
extern FilterstatusDefaultTypeInternal _Filterstatus_default_instance_;
class Ivlidarmatching;
class IvlidarmatchingDefaultTypeInternal;
extern IvlidarmatchingDefaultTypeInternal _Ivlidarmatching_default_instance_;
class Ivsensorgps;
class IvsensorgpsDefaultTypeInternal;
extern IvsensorgpsDefaultTypeInternal _Ivsensorgps_default_instance_;
class Ivsensorimu;
class IvsensorimuDefaultTypeInternal;
extern IvsensorimuDefaultTypeInternal _Ivsensorimu_default_instance_;
class Ivwheelspeed;
class IvwheelspeedDefaultTypeInternal;
extern IvwheelspeedDefaultTypeInternal _Ivwheelspeed_default_instance_;
class LocalizationControl;
class LocalizationControlDefaultTypeInternal;
extern LocalizationControlDefaultTypeInternal _LocalizationControl_default_instance_;
class SensorImu;
class SensorImuDefaultTypeInternal;
extern SensorImuDefaultTypeInternal _SensorImu_default_instance_;
}  // namespace sensor_imu_msgs
namespace sensor_imu_msgs {

// ===================================================================

class LocalizationControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensor_imu_msgs.LocalizationControl) */ {
 public:
  LocalizationControl();
  virtual ~LocalizationControl();

  LocalizationControl(const LocalizationControl& from);

  inline LocalizationControl& operator=(const LocalizationControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocalizationControl(LocalizationControl&& from) noexcept
    : LocalizationControl() {
    *this = ::std::move(from);
  }

  inline LocalizationControl& operator=(LocalizationControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LocalizationControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalizationControl* internal_default_instance() {
    return reinterpret_cast<const LocalizationControl*>(
               &_LocalizationControl_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LocalizationControl* other);
  friend void swap(LocalizationControl& a, LocalizationControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocalizationControl* New() const PROTOBUF_FINAL { return New(NULL); }

  LocalizationControl* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LocalizationControl& from);
  void MergeFrom(const LocalizationControl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LocalizationControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_lidar_open = 1;
  void clear_is_lidar_open();
  static const int kIsLidarOpenFieldNumber = 1;
  bool is_lidar_open() const;
  void set_is_lidar_open(bool value);

  // @@protoc_insertion_point(class_scope:sensor_imu_msgs.LocalizationControl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_lidar_open_;
  mutable int _cached_size_;
  friend struct ::protobuf_sensor_5fimu_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsLocalizationControlImpl();
};
// -------------------------------------------------------------------

class SensorImu : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensor_imu_msgs.SensorImu) */ {
 public:
  SensorImu();
  virtual ~SensorImu();

  SensorImu(const SensorImu& from);

  inline SensorImu& operator=(const SensorImu& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorImu(SensorImu&& from) noexcept
    : SensorImu() {
    *this = ::std::move(from);
  }

  inline SensorImu& operator=(SensorImu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorImu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorImu* internal_default_instance() {
    return reinterpret_cast<const SensorImu*>(
               &_SensorImu_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SensorImu* other);
  friend void swap(SensorImu& a, SensorImu& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorImu* New() const PROTOBUF_FINAL { return New(NULL); }

  SensorImu* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SensorImu& from);
  void MergeFrom(const SensorImu& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SensorImu* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common_msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::common_msgs::Header& header() const;
  ::common_msgs::Header* release_header();
  ::common_msgs::Header* mutable_header();
  void set_allocated_header(::common_msgs::Header* header);

  // .common_msgs.LLH llh = 2;
  bool has_llh() const;
  void clear_llh();
  static const int kLlhFieldNumber = 2;
  const ::common_msgs::LLH& llh() const;
  ::common_msgs::LLH* release_llh();
  ::common_msgs::LLH* mutable_llh();
  void set_allocated_llh(::common_msgs::LLH* llh);

  // .common_msgs.Pose pose = 3;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 3;
  const ::common_msgs::Pose& pose() const;
  ::common_msgs::Pose* release_pose();
  ::common_msgs::Pose* mutable_pose();
  void set_allocated_pose(::common_msgs::Pose* pose);

  // .common_msgs.Twist twist = 4;
  bool has_twist() const;
  void clear_twist();
  static const int kTwistFieldNumber = 4;
  const ::common_msgs::Twist& twist() const;
  ::common_msgs::Twist* release_twist();
  ::common_msgs::Twist* mutable_twist();
  void set_allocated_twist(::common_msgs::Twist* twist);

  // .common_msgs.Vector3 acceleration = 5;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 5;
  const ::common_msgs::Vector3& acceleration() const;
  ::common_msgs::Vector3* release_acceleration();
  ::common_msgs::Vector3* mutable_acceleration();
  void set_allocated_acceleration(::common_msgs::Vector3* acceleration);

  // .common_msgs.UnsureVar v = 6;
  bool has_v() const;
  void clear_v();
  static const int kVFieldNumber = 6;
  const ::common_msgs::UnsureVar& v() const;
  ::common_msgs::UnsureVar* release_v();
  ::common_msgs::UnsureVar* mutable_v();
  void set_allocated_v(::common_msgs::UnsureVar* v);

  // .common_msgs.NavStatus nav_status = 7;
  bool has_nav_status() const;
  void clear_nav_status();
  static const int kNavStatusFieldNumber = 7;
  const ::common_msgs::NavStatus& nav_status() const;
  ::common_msgs::NavStatus* release_nav_status();
  ::common_msgs::NavStatus* mutable_nav_status();
  void set_allocated_nav_status(::common_msgs::NavStatus* nav_status);

  // .common_msgs.DRPoseWithTime dr_pose_and_time = 8;
  bool has_dr_pose_and_time() const;
  void clear_dr_pose_and_time();
  static const int kDrPoseAndTimeFieldNumber = 8;
  const ::common_msgs::DRPoseWithTime& dr_pose_and_time() const;
  ::common_msgs::DRPoseWithTime* release_dr_pose_and_time();
  ::common_msgs::DRPoseWithTime* mutable_dr_pose_and_time();
  void set_allocated_dr_pose_and_time(::common_msgs::DRPoseWithTime* dr_pose_and_time);

  // .sensor_imu_msgs.LocalizationControl localization_control = 9;
  bool has_localization_control() const;
  void clear_localization_control();
  static const int kLocalizationControlFieldNumber = 9;
  const ::sensor_imu_msgs::LocalizationControl& localization_control() const;
  ::sensor_imu_msgs::LocalizationControl* release_localization_control();
  ::sensor_imu_msgs::LocalizationControl* mutable_localization_control();
  void set_allocated_localization_control(::sensor_imu_msgs::LocalizationControl* localization_control);

  // @@protoc_insertion_point(class_scope:sensor_imu_msgs.SensorImu)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common_msgs::Header* header_;
  ::common_msgs::LLH* llh_;
  ::common_msgs::Pose* pose_;
  ::common_msgs::Twist* twist_;
  ::common_msgs::Vector3* acceleration_;
  ::common_msgs::UnsureVar* v_;
  ::common_msgs::NavStatus* nav_status_;
  ::common_msgs::DRPoseWithTime* dr_pose_and_time_;
  ::sensor_imu_msgs::LocalizationControl* localization_control_;
  mutable int _cached_size_;
  friend struct ::protobuf_sensor_5fimu_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsSensorImuImpl();
};
// -------------------------------------------------------------------

class Ivsensorgps : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensor_imu_msgs.Ivsensorgps) */ {
 public:
  Ivsensorgps();
  virtual ~Ivsensorgps();

  Ivsensorgps(const Ivsensorgps& from);

  inline Ivsensorgps& operator=(const Ivsensorgps& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ivsensorgps(Ivsensorgps&& from) noexcept
    : Ivsensorgps() {
    *this = ::std::move(from);
  }

  inline Ivsensorgps& operator=(Ivsensorgps&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ivsensorgps& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ivsensorgps* internal_default_instance() {
    return reinterpret_cast<const Ivsensorgps*>(
               &_Ivsensorgps_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Ivsensorgps* other);
  friend void swap(Ivsensorgps& a, Ivsensorgps& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ivsensorgps* New() const PROTOBUF_FINAL { return New(NULL); }

  Ivsensorgps* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ivsensorgps& from);
  void MergeFrom(const Ivsensorgps& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ivsensorgps* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common_msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::common_msgs::Header& header() const;
  ::common_msgs::Header* release_header();
  ::common_msgs::Header* mutable_header();
  void set_allocated_header(::common_msgs::Header* header);

  // double lon = 3;
  void clear_lon();
  static const int kLonFieldNumber = 3;
  double lon() const;
  void set_lon(double value);

  // double lat = 4;
  void clear_lat();
  static const int kLatFieldNumber = 4;
  double lat() const;
  void set_lat(double value);

  // double height = 5;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  double height() const;
  void set_height(double value);

  // double heading = 6;
  void clear_heading();
  static const int kHeadingFieldNumber = 6;
  double heading() const;
  void set_heading(double value);

  // bool update = 2;
  void clear_update();
  static const int kUpdateFieldNumber = 2;
  bool update() const;
  void set_update(bool value);

  // int32 week = 10;
  void clear_week();
  static const int kWeekFieldNumber = 10;
  ::google::protobuf::int32 week() const;
  void set_week(::google::protobuf::int32 value);

  // double velocity = 7;
  void clear_velocity();
  static const int kVelocityFieldNumber = 7;
  double velocity() const;
  void set_velocity(double value);

  // double up_velocity = 8;
  void clear_up_velocity();
  static const int kUpVelocityFieldNumber = 8;
  double up_velocity() const;
  void set_up_velocity(double value);

  // double track_angle = 9;
  void clear_track_angle();
  static const int kTrackAngleFieldNumber = 9;
  double track_angle() const;
  void set_track_angle(double value);

  // double utctime = 11;
  void clear_utctime();
  static const int kUtctimeFieldNumber = 11;
  double utctime() const;
  void set_utctime(double value);

  // double hdop = 12;
  void clear_hdop();
  static const int kHdopFieldNumber = 12;
  double hdop() const;
  void set_hdop(double value);

  // double diff_age = 13;
  void clear_diff_age();
  static const int kDiffAgeFieldNumber = 13;
  double diff_age() const;
  void set_diff_age(double value);

  // double base_length = 14;
  void clear_base_length();
  static const int kBaseLengthFieldNumber = 14;
  double base_length() const;
  void set_base_length(double value);

  // double heading_std = 15;
  void clear_heading_std();
  static const int kHeadingStdFieldNumber = 15;
  double heading_std() const;
  void set_heading_std(double value);

  // double xg = 16;
  void clear_xg();
  static const int kXgFieldNumber = 16;
  double xg() const;
  void set_xg(double value);

  // double yg = 17;
  void clear_yg();
  static const int kYgFieldNumber = 17;
  double yg() const;
  void set_yg(double value);

  // double zg = 18;
  void clear_zg();
  static const int kZgFieldNumber = 18;
  double zg() const;
  void set_zg(double value);

  // uint32 status = 19;
  void clear_status();
  static const int kStatusFieldNumber = 19;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // uint32 satenum = 20;
  void clear_satenum();
  static const int kSatenumFieldNumber = 20;
  ::google::protobuf::uint32 satenum() const;
  void set_satenum(::google::protobuf::uint32 value);

  // uint32 status_yaw = 21;
  void clear_status_yaw();
  static const int kStatusYawFieldNumber = 21;
  ::google::protobuf::uint32 status_yaw() const;
  void set_status_yaw(::google::protobuf::uint32 value);

  // uint32 is_heading_valid = 22;
  void clear_is_heading_valid();
  static const int kIsHeadingValidFieldNumber = 22;
  ::google::protobuf::uint32 is_heading_valid() const;
  void set_is_heading_valid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sensor_imu_msgs.Ivsensorgps)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common_msgs::Header* header_;
  double lon_;
  double lat_;
  double height_;
  double heading_;
  bool update_;
  ::google::protobuf::int32 week_;
  double velocity_;
  double up_velocity_;
  double track_angle_;
  double utctime_;
  double hdop_;
  double diff_age_;
  double base_length_;
  double heading_std_;
  double xg_;
  double yg_;
  double zg_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 satenum_;
  ::google::protobuf::uint32 status_yaw_;
  ::google::protobuf::uint32 is_heading_valid_;
  mutable int _cached_size_;
  friend struct ::protobuf_sensor_5fimu_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsIvsensorgpsImpl();
};
// -------------------------------------------------------------------

class Ivsensorimu : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensor_imu_msgs.Ivsensorimu) */ {
 public:
  Ivsensorimu();
  virtual ~Ivsensorimu();

  Ivsensorimu(const Ivsensorimu& from);

  inline Ivsensorimu& operator=(const Ivsensorimu& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ivsensorimu(Ivsensorimu&& from) noexcept
    : Ivsensorimu() {
    *this = ::std::move(from);
  }

  inline Ivsensorimu& operator=(Ivsensorimu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ivsensorimu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ivsensorimu* internal_default_instance() {
    return reinterpret_cast<const Ivsensorimu*>(
               &_Ivsensorimu_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Ivsensorimu* other);
  friend void swap(Ivsensorimu& a, Ivsensorimu& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ivsensorimu* New() const PROTOBUF_FINAL { return New(NULL); }

  Ivsensorimu* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ivsensorimu& from);
  void MergeFrom(const Ivsensorimu& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ivsensorimu* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common_msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::common_msgs::Header& header() const;
  ::common_msgs::Header* release_header();
  ::common_msgs::Header* mutable_header();
  void set_allocated_header(::common_msgs::Header* header);

  // bool update = 2;
  void clear_update();
  static const int kUpdateFieldNumber = 2;
  bool update() const;
  void set_update(bool value);

  // uint32 time_tag = 3;
  void clear_time_tag();
  static const int kTimeTagFieldNumber = 3;
  ::google::protobuf::uint32 time_tag() const;
  void set_time_tag(::google::protobuf::uint32 value);

  // double utc_time = 5;
  void clear_utc_time();
  static const int kUtcTimeFieldNumber = 5;
  double utc_time() const;
  void set_utc_time(double value);

  // double gyro_x = 6;
  void clear_gyro_x();
  static const int kGyroXFieldNumber = 6;
  double gyro_x() const;
  void set_gyro_x(double value);

  // double gyro_y = 7;
  void clear_gyro_y();
  static const int kGyroYFieldNumber = 7;
  double gyro_y() const;
  void set_gyro_y(double value);

  // double gyro_z = 8;
  void clear_gyro_z();
  static const int kGyroZFieldNumber = 8;
  double gyro_z() const;
  void set_gyro_z(double value);

  // double acce_x = 9;
  void clear_acce_x();
  static const int kAcceXFieldNumber = 9;
  double acce_x() const;
  void set_acce_x(double value);

  // double acce_y = 10;
  void clear_acce_y();
  static const int kAcceYFieldNumber = 10;
  double acce_y() const;
  void set_acce_y(double value);

  // double acce_z = 11;
  void clear_acce_z();
  static const int kAcceZFieldNumber = 11;
  double acce_z() const;
  void set_acce_z(double value);

  // double temperature = 12;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 12;
  double temperature() const;
  void set_temperature(double value);

  // int32 week = 4;
  void clear_week();
  static const int kWeekFieldNumber = 4;
  ::google::protobuf::int32 week() const;
  void set_week(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sensor_imu_msgs.Ivsensorimu)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common_msgs::Header* header_;
  bool update_;
  ::google::protobuf::uint32 time_tag_;
  double utc_time_;
  double gyro_x_;
  double gyro_y_;
  double gyro_z_;
  double acce_x_;
  double acce_y_;
  double acce_z_;
  double temperature_;
  ::google::protobuf::int32 week_;
  mutable int _cached_size_;
  friend struct ::protobuf_sensor_5fimu_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsIvsensorimuImpl();
};
// -------------------------------------------------------------------

class Ivwheelspeed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensor_imu_msgs.Ivwheelspeed) */ {
 public:
  Ivwheelspeed();
  virtual ~Ivwheelspeed();

  Ivwheelspeed(const Ivwheelspeed& from);

  inline Ivwheelspeed& operator=(const Ivwheelspeed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ivwheelspeed(Ivwheelspeed&& from) noexcept
    : Ivwheelspeed() {
    *this = ::std::move(from);
  }

  inline Ivwheelspeed& operator=(Ivwheelspeed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ivwheelspeed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ivwheelspeed* internal_default_instance() {
    return reinterpret_cast<const Ivwheelspeed*>(
               &_Ivwheelspeed_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Ivwheelspeed* other);
  friend void swap(Ivwheelspeed& a, Ivwheelspeed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ivwheelspeed* New() const PROTOBUF_FINAL { return New(NULL); }

  Ivwheelspeed* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ivwheelspeed& from);
  void MergeFrom(const Ivwheelspeed& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ivwheelspeed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common_msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::common_msgs::Header& header() const;
  ::common_msgs::Header* release_header();
  ::common_msgs::Header* mutable_header();
  void set_allocated_header(::common_msgs::Header* header);

  // bool update = 2;
  void clear_update();
  static const int kUpdateFieldNumber = 2;
  bool update() const;
  void set_update(bool value);

  // int32 week = 3;
  void clear_week();
  static const int kWeekFieldNumber = 3;
  ::google::protobuf::int32 week() const;
  void set_week(::google::protobuf::int32 value);

  // double utc_time = 4;
  void clear_utc_time();
  static const int kUtcTimeFieldNumber = 4;
  double utc_time() const;
  void set_utc_time(double value);

  // float wheelspeed_lr_pluse = 5;
  void clear_wheelspeed_lr_pluse();
  static const int kWheelspeedLrPluseFieldNumber = 5;
  float wheelspeed_lr_pluse() const;
  void set_wheelspeed_lr_pluse(float value);

  // float wheelspeed_rr_pluse = 6;
  void clear_wheelspeed_rr_pluse();
  static const int kWheelspeedRrPluseFieldNumber = 6;
  float wheelspeed_rr_pluse() const;
  void set_wheelspeed_rr_pluse(float value);

  // uint32 pluse_mask = 7;
  void clear_pluse_mask();
  static const int kPluseMaskFieldNumber = 7;
  ::google::protobuf::uint32 pluse_mask() const;
  void set_pluse_mask(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sensor_imu_msgs.Ivwheelspeed)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common_msgs::Header* header_;
  bool update_;
  ::google::protobuf::int32 week_;
  double utc_time_;
  float wheelspeed_lr_pluse_;
  float wheelspeed_rr_pluse_;
  ::google::protobuf::uint32 pluse_mask_;
  mutable int _cached_size_;
  friend struct ::protobuf_sensor_5fimu_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsIvwheelspeedImpl();
};
// -------------------------------------------------------------------

class Filterstatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensor_imu_msgs.Filterstatus) */ {
 public:
  Filterstatus();
  virtual ~Filterstatus();

  Filterstatus(const Filterstatus& from);

  inline Filterstatus& operator=(const Filterstatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Filterstatus(Filterstatus&& from) noexcept
    : Filterstatus() {
    *this = ::std::move(from);
  }

  inline Filterstatus& operator=(Filterstatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Filterstatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Filterstatus* internal_default_instance() {
    return reinterpret_cast<const Filterstatus*>(
               &_Filterstatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Filterstatus* other);
  friend void swap(Filterstatus& a, Filterstatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Filterstatus* New() const PROTOBUF_FINAL { return New(NULL); }

  Filterstatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Filterstatus& from);
  void MergeFrom(const Filterstatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Filterstatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool update = 1;
  void clear_update();
  static const int kUpdateFieldNumber = 1;
  bool update() const;
  void set_update(bool value);

  // int32 frame_count = 2;
  void clear_frame_count();
  static const int kFrameCountFieldNumber = 2;
  ::google::protobuf::int32 frame_count() const;
  void set_frame_count(::google::protobuf::int32 value);

  // float x_gyro_zero_bias = 3;
  void clear_x_gyro_zero_bias();
  static const int kXGyroZeroBiasFieldNumber = 3;
  float x_gyro_zero_bias() const;
  void set_x_gyro_zero_bias(float value);

  // float y_gyro_zero_bias = 4;
  void clear_y_gyro_zero_bias();
  static const int kYGyroZeroBiasFieldNumber = 4;
  float y_gyro_zero_bias() const;
  void set_y_gyro_zero_bias(float value);

  // float z_gyro_zero_bias = 5;
  void clear_z_gyro_zero_bias();
  static const int kZGyroZeroBiasFieldNumber = 5;
  float z_gyro_zero_bias() const;
  void set_z_gyro_zero_bias(float value);

  // float x_acce_zero_bias = 6;
  void clear_x_acce_zero_bias();
  static const int kXAcceZeroBiasFieldNumber = 6;
  float x_acce_zero_bias() const;
  void set_x_acce_zero_bias(float value);

  // float y_acce_zero_bias = 7;
  void clear_y_acce_zero_bias();
  static const int kYAcceZeroBiasFieldNumber = 7;
  float y_acce_zero_bias() const;
  void set_y_acce_zero_bias(float value);

  // float z_acce_zero_bias = 8;
  void clear_z_acce_zero_bias();
  static const int kZAcceZeroBiasFieldNumber = 8;
  float z_acce_zero_bias() const;
  void set_z_acce_zero_bias(float value);

  // float heading_install_deviation = 9;
  void clear_heading_install_deviation();
  static const int kHeadingInstallDeviationFieldNumber = 9;
  float heading_install_deviation() const;
  void set_heading_install_deviation(float value);

  // float scale_factor_error = 10;
  void clear_scale_factor_error();
  static const int kScaleFactorErrorFieldNumber = 10;
  float scale_factor_error() const;
  void set_scale_factor_error(float value);

  // float pitch_install_deviation = 11;
  void clear_pitch_install_deviation();
  static const int kPitchInstallDeviationFieldNumber = 11;
  float pitch_install_deviation() const;
  void set_pitch_install_deviation(float value);

  // float eastward_position_deviation = 12;
  void clear_eastward_position_deviation();
  static const int kEastwardPositionDeviationFieldNumber = 12;
  float eastward_position_deviation() const;
  void set_eastward_position_deviation(float value);

  // float northward_position_deviation = 13;
  void clear_northward_position_deviation();
  static const int kNorthwardPositionDeviationFieldNumber = 13;
  float northward_position_deviation() const;
  void set_northward_position_deviation(float value);

  // float sky_position_deviation = 14;
  void clear_sky_position_deviation();
  static const int kSkyPositionDeviationFieldNumber = 14;
  float sky_position_deviation() const;
  void set_sky_position_deviation(float value);

  // float heading_deviation = 15;
  void clear_heading_deviation();
  static const int kHeadingDeviationFieldNumber = 15;
  float heading_deviation() const;
  void set_heading_deviation(float value);

  // int32 gnss_eastward_position_count = 16;
  void clear_gnss_eastward_position_count();
  static const int kGnssEastwardPositionCountFieldNumber = 16;
  ::google::protobuf::int32 gnss_eastward_position_count() const;
  void set_gnss_eastward_position_count(::google::protobuf::int32 value);

  // int32 gnss_northward_position_count = 17;
  void clear_gnss_northward_position_count();
  static const int kGnssNorthwardPositionCountFieldNumber = 17;
  ::google::protobuf::int32 gnss_northward_position_count() const;
  void set_gnss_northward_position_count(::google::protobuf::int32 value);

  // int32 gnss_sky_position_count = 18;
  void clear_gnss_sky_position_count();
  static const int kGnssSkyPositionCountFieldNumber = 18;
  ::google::protobuf::int32 gnss_sky_position_count() const;
  void set_gnss_sky_position_count(::google::protobuf::int32 value);

  // int32 gnss_eastward_speed_count = 19;
  void clear_gnss_eastward_speed_count();
  static const int kGnssEastwardSpeedCountFieldNumber = 19;
  ::google::protobuf::int32 gnss_eastward_speed_count() const;
  void set_gnss_eastward_speed_count(::google::protobuf::int32 value);

  // int32 gnss_northward_speed_count = 20;
  void clear_gnss_northward_speed_count();
  static const int kGnssNorthwardSpeedCountFieldNumber = 20;
  ::google::protobuf::int32 gnss_northward_speed_count() const;
  void set_gnss_northward_speed_count(::google::protobuf::int32 value);

  // int32 gnss_sky_speed_count = 21;
  void clear_gnss_sky_speed_count();
  static const int kGnssSkySpeedCountFieldNumber = 21;
  ::google::protobuf::int32 gnss_sky_speed_count() const;
  void set_gnss_sky_speed_count(::google::protobuf::int32 value);

  // int32 gnss_heading_count = 22;
  void clear_gnss_heading_count();
  static const int kGnssHeadingCountFieldNumber = 22;
  ::google::protobuf::int32 gnss_heading_count() const;
  void set_gnss_heading_count(::google::protobuf::int32 value);

  // int32 odom_eastward_speed_count = 23;
  void clear_odom_eastward_speed_count();
  static const int kOdomEastwardSpeedCountFieldNumber = 23;
  ::google::protobuf::int32 odom_eastward_speed_count() const;
  void set_odom_eastward_speed_count(::google::protobuf::int32 value);

  // int32 odom_northward_speed_count = 24;
  void clear_odom_northward_speed_count();
  static const int kOdomNorthwardSpeedCountFieldNumber = 24;
  ::google::protobuf::int32 odom_northward_speed_count() const;
  void set_odom_northward_speed_count(::google::protobuf::int32 value);

  // int32 odom_sky_speed_count = 25;
  void clear_odom_sky_speed_count();
  static const int kOdomSkySpeedCountFieldNumber = 25;
  ::google::protobuf::int32 odom_sky_speed_count() const;
  void set_odom_sky_speed_count(::google::protobuf::int32 value);

  // int32 laser_eastward_position_count = 26;
  void clear_laser_eastward_position_count();
  static const int kLaserEastwardPositionCountFieldNumber = 26;
  ::google::protobuf::int32 laser_eastward_position_count() const;
  void set_laser_eastward_position_count(::google::protobuf::int32 value);

  // int32 laser_northward_position_count = 27;
  void clear_laser_northward_position_count();
  static const int kLaserNorthwardPositionCountFieldNumber = 27;
  ::google::protobuf::int32 laser_northward_position_count() const;
  void set_laser_northward_position_count(::google::protobuf::int32 value);

  // int32 laser_sky_position_count = 28;
  void clear_laser_sky_position_count();
  static const int kLaserSkyPositionCountFieldNumber = 28;
  ::google::protobuf::int32 laser_sky_position_count() const;
  void set_laser_sky_position_count(::google::protobuf::int32 value);

  // int32 laser_heading_count = 29;
  void clear_laser_heading_count();
  static const int kLaserHeadingCountFieldNumber = 29;
  ::google::protobuf::int32 laser_heading_count() const;
  void set_laser_heading_count(::google::protobuf::int32 value);

  // int32 time_consuming = 30;
  void clear_time_consuming();
  static const int kTimeConsumingFieldNumber = 30;
  ::google::protobuf::int32 time_consuming() const;
  void set_time_consuming(::google::protobuf::int32 value);

  // uint32 fusion_model = 31;
  void clear_fusion_model();
  static const int kFusionModelFieldNumber = 31;
  ::google::protobuf::uint32 fusion_model() const;
  void set_fusion_model(::google::protobuf::uint32 value);

  // uint32 status = 32;
  void clear_status();
  static const int kStatusFieldNumber = 32;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sensor_imu_msgs.Filterstatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool update_;
  ::google::protobuf::int32 frame_count_;
  float x_gyro_zero_bias_;
  float y_gyro_zero_bias_;
  float z_gyro_zero_bias_;
  float x_acce_zero_bias_;
  float y_acce_zero_bias_;
  float z_acce_zero_bias_;
  float heading_install_deviation_;
  float scale_factor_error_;
  float pitch_install_deviation_;
  float eastward_position_deviation_;
  float northward_position_deviation_;
  float sky_position_deviation_;
  float heading_deviation_;
  ::google::protobuf::int32 gnss_eastward_position_count_;
  ::google::protobuf::int32 gnss_northward_position_count_;
  ::google::protobuf::int32 gnss_sky_position_count_;
  ::google::protobuf::int32 gnss_eastward_speed_count_;
  ::google::protobuf::int32 gnss_northward_speed_count_;
  ::google::protobuf::int32 gnss_sky_speed_count_;
  ::google::protobuf::int32 gnss_heading_count_;
  ::google::protobuf::int32 odom_eastward_speed_count_;
  ::google::protobuf::int32 odom_northward_speed_count_;
  ::google::protobuf::int32 odom_sky_speed_count_;
  ::google::protobuf::int32 laser_eastward_position_count_;
  ::google::protobuf::int32 laser_northward_position_count_;
  ::google::protobuf::int32 laser_sky_position_count_;
  ::google::protobuf::int32 laser_heading_count_;
  ::google::protobuf::int32 time_consuming_;
  ::google::protobuf::uint32 fusion_model_;
  ::google::protobuf::uint32 status_;
  mutable int _cached_size_;
  friend struct ::protobuf_sensor_5fimu_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsFilterstatusImpl();
};
// -------------------------------------------------------------------

class Ivlidarmatching : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sensor_imu_msgs.Ivlidarmatching) */ {
 public:
  Ivlidarmatching();
  virtual ~Ivlidarmatching();

  Ivlidarmatching(const Ivlidarmatching& from);

  inline Ivlidarmatching& operator=(const Ivlidarmatching& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ivlidarmatching(Ivlidarmatching&& from) noexcept
    : Ivlidarmatching() {
    *this = ::std::move(from);
  }

  inline Ivlidarmatching& operator=(Ivlidarmatching&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ivlidarmatching& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ivlidarmatching* internal_default_instance() {
    return reinterpret_cast<const Ivlidarmatching*>(
               &_Ivlidarmatching_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Ivlidarmatching* other);
  friend void swap(Ivlidarmatching& a, Ivlidarmatching& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ivlidarmatching* New() const PROTOBUF_FINAL { return New(NULL); }

  Ivlidarmatching* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ivlidarmatching& from);
  void MergeFrom(const Ivlidarmatching& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ivlidarmatching* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float gmm_scores = 24;
  int gmm_scores_size() const;
  void clear_gmm_scores();
  static const int kGmmScoresFieldNumber = 24;
  float gmm_scores(int index) const;
  void set_gmm_scores(int index, float value);
  void add_gmm_scores(float value);
  const ::google::protobuf::RepeatedField< float >&
      gmm_scores() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_gmm_scores();

  // repeated int32 gmm_offsets = 25;
  int gmm_offsets_size() const;
  void clear_gmm_offsets();
  static const int kGmmOffsetsFieldNumber = 25;
  ::google::protobuf::int32 gmm_offsets(int index) const;
  void set_gmm_offsets(int index, ::google::protobuf::int32 value);
  void add_gmm_offsets(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gmm_offsets() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gmm_offsets();

  // string version = 23;
  void clear_version();
  static const int kVersionFieldNumber = 23;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // .common_msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::common_msgs::Header& header() const;
  ::common_msgs::Header* release_header();
  ::common_msgs::Header* mutable_header();
  void set_allocated_header(::common_msgs::Header* header);

  // bool update = 2;
  void clear_update();
  static const int kUpdateFieldNumber = 2;
  bool update() const;
  void set_update(bool value);

  // int32 week = 3;
  void clear_week();
  static const int kWeekFieldNumber = 3;
  ::google::protobuf::int32 week() const;
  void set_week(::google::protobuf::int32 value);

  // double utctime = 4;
  void clear_utctime();
  static const int kUtctimeFieldNumber = 4;
  double utctime() const;
  void set_utctime(double value);

  // double roll = 5;
  void clear_roll();
  static const int kRollFieldNumber = 5;
  double roll() const;
  void set_roll(double value);

  // double pitch = 6;
  void clear_pitch();
  static const int kPitchFieldNumber = 6;
  double pitch() const;
  void set_pitch(double value);

  // double yaw = 7;
  void clear_yaw();
  static const int kYawFieldNumber = 7;
  double yaw() const;
  void set_yaw(double value);

  // double lat = 8;
  void clear_lat();
  static const int kLatFieldNumber = 8;
  double lat() const;
  void set_lat(double value);

  // double lon = 9;
  void clear_lon();
  static const int kLonFieldNumber = 9;
  double lon() const;
  void set_lon(double value);

  // double height = 10;
  void clear_height();
  static const int kHeightFieldNumber = 10;
  double height() const;
  void set_height(double value);

  // double xg = 11;
  void clear_xg();
  static const int kXgFieldNumber = 11;
  double xg() const;
  void set_xg(double value);

  // double yg = 12;
  void clear_yg();
  static const int kYgFieldNumber = 12;
  double yg() const;
  void set_yg(double value);

  // uint32 fusion_type = 13;
  void clear_fusion_type();
  static const int kFusionTypeFieldNumber = 13;
  ::google::protobuf::uint32 fusion_type() const;
  void set_fusion_type(::google::protobuf::uint32 value);

  // int32 init_once = 14;
  void clear_init_once();
  static const int kInitOnceFieldNumber = 14;
  ::google::protobuf::int32 init_once() const;
  void set_init_once(::google::protobuf::int32 value);

  // int32 is_degeneracy = 15;
  void clear_is_degeneracy();
  static const int kIsDegeneracyFieldNumber = 15;
  ::google::protobuf::int32 is_degeneracy() const;
  void set_is_degeneracy(::google::protobuf::int32 value);

  // uint32 is_localization_area = 16;
  void clear_is_localization_area();
  static const int kIsLocalizationAreaFieldNumber = 16;
  ::google::protobuf::uint32 is_localization_area() const;
  void set_is_localization_area(::google::protobuf::uint32 value);

  // double matching_score = 18;
  void clear_matching_score();
  static const int kMatchingScoreFieldNumber = 18;
  double matching_score() const;
  void set_matching_score(double value);

  // double lat_std = 19;
  void clear_lat_std();
  static const int kLatStdFieldNumber = 19;
  double lat_std() const;
  void set_lat_std(double value);

  // double lon_std = 20;
  void clear_lon_std();
  static const int kLonStdFieldNumber = 20;
  double lon_std() const;
  void set_lon_std(double value);

  // double height_std = 21;
  void clear_height_std();
  static const int kHeightStdFieldNumber = 21;
  double height_std() const;
  void set_height_std(double value);

  // double yaw_std = 22;
  void clear_yaw_std();
  static const int kYawStdFieldNumber = 22;
  double yaw_std() const;
  void set_yaw_std(double value);

  // uint32 is_in_map = 17;
  void clear_is_in_map();
  static const int kIsInMapFieldNumber = 17;
  ::google::protobuf::uint32 is_in_map() const;
  void set_is_in_map(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sensor_imu_msgs.Ivlidarmatching)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > gmm_scores_;
  mutable int _gmm_scores_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gmm_offsets_;
  mutable int _gmm_offsets_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::common_msgs::Header* header_;
  bool update_;
  ::google::protobuf::int32 week_;
  double utctime_;
  double roll_;
  double pitch_;
  double yaw_;
  double lat_;
  double lon_;
  double height_;
  double xg_;
  double yg_;
  ::google::protobuf::uint32 fusion_type_;
  ::google::protobuf::int32 init_once_;
  ::google::protobuf::int32 is_degeneracy_;
  ::google::protobuf::uint32 is_localization_area_;
  double matching_score_;
  double lat_std_;
  double lon_std_;
  double height_std_;
  double yaw_std_;
  ::google::protobuf::uint32 is_in_map_;
  mutable int _cached_size_;
  friend struct ::protobuf_sensor_5fimu_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_sensor_5fimu_5fmsgs_2eproto::InitDefaultsIvlidarmatchingImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocalizationControl

// bool is_lidar_open = 1;
inline void LocalizationControl::clear_is_lidar_open() {
  is_lidar_open_ = false;
}
inline bool LocalizationControl::is_lidar_open() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.LocalizationControl.is_lidar_open)
  return is_lidar_open_;
}
inline void LocalizationControl::set_is_lidar_open(bool value) {
  
  is_lidar_open_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.LocalizationControl.is_lidar_open)
}

// -------------------------------------------------------------------

// SensorImu

// .common_msgs.Header header = 1;
inline bool SensorImu::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::common_msgs::Header& SensorImu::header() const {
  const ::common_msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.SensorImu.header)
  return p != NULL ? *p : *reinterpret_cast<const ::common_msgs::Header*>(
      &::common_msgs::_Header_default_instance_);
}
inline ::common_msgs::Header* SensorImu::release_header() {
  // @@protoc_insertion_point(field_release:sensor_imu_msgs.SensorImu.header)
  
  ::common_msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::common_msgs::Header* SensorImu::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::common_msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:sensor_imu_msgs.SensorImu.header)
  return header_;
}
inline void SensorImu::set_allocated_header(::common_msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:sensor_imu_msgs.SensorImu.header)
}

// .common_msgs.LLH llh = 2;
inline bool SensorImu::has_llh() const {
  return this != internal_default_instance() && llh_ != NULL;
}
inline const ::common_msgs::LLH& SensorImu::llh() const {
  const ::common_msgs::LLH* p = llh_;
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.SensorImu.llh)
  return p != NULL ? *p : *reinterpret_cast<const ::common_msgs::LLH*>(
      &::common_msgs::_LLH_default_instance_);
}
inline ::common_msgs::LLH* SensorImu::release_llh() {
  // @@protoc_insertion_point(field_release:sensor_imu_msgs.SensorImu.llh)
  
  ::common_msgs::LLH* temp = llh_;
  llh_ = NULL;
  return temp;
}
inline ::common_msgs::LLH* SensorImu::mutable_llh() {
  
  if (llh_ == NULL) {
    llh_ = new ::common_msgs::LLH;
  }
  // @@protoc_insertion_point(field_mutable:sensor_imu_msgs.SensorImu.llh)
  return llh_;
}
inline void SensorImu::set_allocated_llh(::common_msgs::LLH* llh) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(llh_);
  }
  if (llh) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      llh = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, llh, submessage_arena);
    }
    
  } else {
    
  }
  llh_ = llh;
  // @@protoc_insertion_point(field_set_allocated:sensor_imu_msgs.SensorImu.llh)
}

// .common_msgs.Pose pose = 3;
inline bool SensorImu::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::common_msgs::Pose& SensorImu::pose() const {
  const ::common_msgs::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.SensorImu.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::common_msgs::Pose*>(
      &::common_msgs::_Pose_default_instance_);
}
inline ::common_msgs::Pose* SensorImu::release_pose() {
  // @@protoc_insertion_point(field_release:sensor_imu_msgs.SensorImu.pose)
  
  ::common_msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::common_msgs::Pose* SensorImu::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::common_msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:sensor_imu_msgs.SensorImu.pose)
  return pose_;
}
inline void SensorImu::set_allocated_pose(::common_msgs::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:sensor_imu_msgs.SensorImu.pose)
}

// .common_msgs.Twist twist = 4;
inline bool SensorImu::has_twist() const {
  return this != internal_default_instance() && twist_ != NULL;
}
inline const ::common_msgs::Twist& SensorImu::twist() const {
  const ::common_msgs::Twist* p = twist_;
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.SensorImu.twist)
  return p != NULL ? *p : *reinterpret_cast<const ::common_msgs::Twist*>(
      &::common_msgs::_Twist_default_instance_);
}
inline ::common_msgs::Twist* SensorImu::release_twist() {
  // @@protoc_insertion_point(field_release:sensor_imu_msgs.SensorImu.twist)
  
  ::common_msgs::Twist* temp = twist_;
  twist_ = NULL;
  return temp;
}
inline ::common_msgs::Twist* SensorImu::mutable_twist() {
  
  if (twist_ == NULL) {
    twist_ = new ::common_msgs::Twist;
  }
  // @@protoc_insertion_point(field_mutable:sensor_imu_msgs.SensorImu.twist)
  return twist_;
}
inline void SensorImu::set_allocated_twist(::common_msgs::Twist* twist) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(twist_);
  }
  if (twist) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      twist = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, twist, submessage_arena);
    }
    
  } else {
    
  }
  twist_ = twist;
  // @@protoc_insertion_point(field_set_allocated:sensor_imu_msgs.SensorImu.twist)
}

// .common_msgs.Vector3 acceleration = 5;
inline bool SensorImu::has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != NULL;
}
inline const ::common_msgs::Vector3& SensorImu::acceleration() const {
  const ::common_msgs::Vector3* p = acceleration_;
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.SensorImu.acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::common_msgs::Vector3*>(
      &::common_msgs::_Vector3_default_instance_);
}
inline ::common_msgs::Vector3* SensorImu::release_acceleration() {
  // @@protoc_insertion_point(field_release:sensor_imu_msgs.SensorImu.acceleration)
  
  ::common_msgs::Vector3* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
inline ::common_msgs::Vector3* SensorImu::mutable_acceleration() {
  
  if (acceleration_ == NULL) {
    acceleration_ = new ::common_msgs::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:sensor_imu_msgs.SensorImu.acceleration)
  return acceleration_;
}
inline void SensorImu::set_allocated_acceleration(::common_msgs::Vector3* acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(acceleration_);
  }
  if (acceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:sensor_imu_msgs.SensorImu.acceleration)
}

// .common_msgs.UnsureVar v = 6;
inline bool SensorImu::has_v() const {
  return this != internal_default_instance() && v_ != NULL;
}
inline const ::common_msgs::UnsureVar& SensorImu::v() const {
  const ::common_msgs::UnsureVar* p = v_;
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.SensorImu.v)
  return p != NULL ? *p : *reinterpret_cast<const ::common_msgs::UnsureVar*>(
      &::common_msgs::_UnsureVar_default_instance_);
}
inline ::common_msgs::UnsureVar* SensorImu::release_v() {
  // @@protoc_insertion_point(field_release:sensor_imu_msgs.SensorImu.v)
  
  ::common_msgs::UnsureVar* temp = v_;
  v_ = NULL;
  return temp;
}
inline ::common_msgs::UnsureVar* SensorImu::mutable_v() {
  
  if (v_ == NULL) {
    v_ = new ::common_msgs::UnsureVar;
  }
  // @@protoc_insertion_point(field_mutable:sensor_imu_msgs.SensorImu.v)
  return v_;
}
inline void SensorImu::set_allocated_v(::common_msgs::UnsureVar* v) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(v_);
  }
  if (v) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      v = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, v, submessage_arena);
    }
    
  } else {
    
  }
  v_ = v;
  // @@protoc_insertion_point(field_set_allocated:sensor_imu_msgs.SensorImu.v)
}

// .common_msgs.NavStatus nav_status = 7;
inline bool SensorImu::has_nav_status() const {
  return this != internal_default_instance() && nav_status_ != NULL;
}
inline const ::common_msgs::NavStatus& SensorImu::nav_status() const {
  const ::common_msgs::NavStatus* p = nav_status_;
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.SensorImu.nav_status)
  return p != NULL ? *p : *reinterpret_cast<const ::common_msgs::NavStatus*>(
      &::common_msgs::_NavStatus_default_instance_);
}
inline ::common_msgs::NavStatus* SensorImu::release_nav_status() {
  // @@protoc_insertion_point(field_release:sensor_imu_msgs.SensorImu.nav_status)
  
  ::common_msgs::NavStatus* temp = nav_status_;
  nav_status_ = NULL;
  return temp;
}
inline ::common_msgs::NavStatus* SensorImu::mutable_nav_status() {
  
  if (nav_status_ == NULL) {
    nav_status_ = new ::common_msgs::NavStatus;
  }
  // @@protoc_insertion_point(field_mutable:sensor_imu_msgs.SensorImu.nav_status)
  return nav_status_;
}
inline void SensorImu::set_allocated_nav_status(::common_msgs::NavStatus* nav_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(nav_status_);
  }
  if (nav_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nav_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nav_status, submessage_arena);
    }
    
  } else {
    
  }
  nav_status_ = nav_status;
  // @@protoc_insertion_point(field_set_allocated:sensor_imu_msgs.SensorImu.nav_status)
}

// .common_msgs.DRPoseWithTime dr_pose_and_time = 8;
inline bool SensorImu::has_dr_pose_and_time() const {
  return this != internal_default_instance() && dr_pose_and_time_ != NULL;
}
inline const ::common_msgs::DRPoseWithTime& SensorImu::dr_pose_and_time() const {
  const ::common_msgs::DRPoseWithTime* p = dr_pose_and_time_;
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.SensorImu.dr_pose_and_time)
  return p != NULL ? *p : *reinterpret_cast<const ::common_msgs::DRPoseWithTime*>(
      &::common_msgs::_DRPoseWithTime_default_instance_);
}
inline ::common_msgs::DRPoseWithTime* SensorImu::release_dr_pose_and_time() {
  // @@protoc_insertion_point(field_release:sensor_imu_msgs.SensorImu.dr_pose_and_time)
  
  ::common_msgs::DRPoseWithTime* temp = dr_pose_and_time_;
  dr_pose_and_time_ = NULL;
  return temp;
}
inline ::common_msgs::DRPoseWithTime* SensorImu::mutable_dr_pose_and_time() {
  
  if (dr_pose_and_time_ == NULL) {
    dr_pose_and_time_ = new ::common_msgs::DRPoseWithTime;
  }
  // @@protoc_insertion_point(field_mutable:sensor_imu_msgs.SensorImu.dr_pose_and_time)
  return dr_pose_and_time_;
}
inline void SensorImu::set_allocated_dr_pose_and_time(::common_msgs::DRPoseWithTime* dr_pose_and_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(dr_pose_and_time_);
  }
  if (dr_pose_and_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dr_pose_and_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dr_pose_and_time, submessage_arena);
    }
    
  } else {
    
  }
  dr_pose_and_time_ = dr_pose_and_time;
  // @@protoc_insertion_point(field_set_allocated:sensor_imu_msgs.SensorImu.dr_pose_and_time)
}

// .sensor_imu_msgs.LocalizationControl localization_control = 9;
inline bool SensorImu::has_localization_control() const {
  return this != internal_default_instance() && localization_control_ != NULL;
}
inline void SensorImu::clear_localization_control() {
  if (GetArenaNoVirtual() == NULL && localization_control_ != NULL) {
    delete localization_control_;
  }
  localization_control_ = NULL;
}
inline const ::sensor_imu_msgs::LocalizationControl& SensorImu::localization_control() const {
  const ::sensor_imu_msgs::LocalizationControl* p = localization_control_;
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.SensorImu.localization_control)
  return p != NULL ? *p : *reinterpret_cast<const ::sensor_imu_msgs::LocalizationControl*>(
      &::sensor_imu_msgs::_LocalizationControl_default_instance_);
}
inline ::sensor_imu_msgs::LocalizationControl* SensorImu::release_localization_control() {
  // @@protoc_insertion_point(field_release:sensor_imu_msgs.SensorImu.localization_control)
  
  ::sensor_imu_msgs::LocalizationControl* temp = localization_control_;
  localization_control_ = NULL;
  return temp;
}
inline ::sensor_imu_msgs::LocalizationControl* SensorImu::mutable_localization_control() {
  
  if (localization_control_ == NULL) {
    localization_control_ = new ::sensor_imu_msgs::LocalizationControl;
  }
  // @@protoc_insertion_point(field_mutable:sensor_imu_msgs.SensorImu.localization_control)
  return localization_control_;
}
inline void SensorImu::set_allocated_localization_control(::sensor_imu_msgs::LocalizationControl* localization_control) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete localization_control_;
  }
  if (localization_control) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      localization_control = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, localization_control, submessage_arena);
    }
    
  } else {
    
  }
  localization_control_ = localization_control;
  // @@protoc_insertion_point(field_set_allocated:sensor_imu_msgs.SensorImu.localization_control)
}

// -------------------------------------------------------------------

// Ivsensorgps

// .common_msgs.Header header = 1;
inline bool Ivsensorgps::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::common_msgs::Header& Ivsensorgps::header() const {
  const ::common_msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.header)
  return p != NULL ? *p : *reinterpret_cast<const ::common_msgs::Header*>(
      &::common_msgs::_Header_default_instance_);
}
inline ::common_msgs::Header* Ivsensorgps::release_header() {
  // @@protoc_insertion_point(field_release:sensor_imu_msgs.Ivsensorgps.header)
  
  ::common_msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::common_msgs::Header* Ivsensorgps::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::common_msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:sensor_imu_msgs.Ivsensorgps.header)
  return header_;
}
inline void Ivsensorgps::set_allocated_header(::common_msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:sensor_imu_msgs.Ivsensorgps.header)
}

// bool update = 2;
inline void Ivsensorgps::clear_update() {
  update_ = false;
}
inline bool Ivsensorgps::update() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.update)
  return update_;
}
inline void Ivsensorgps::set_update(bool value) {
  
  update_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.update)
}

// double lon = 3;
inline void Ivsensorgps::clear_lon() {
  lon_ = 0;
}
inline double Ivsensorgps::lon() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.lon)
  return lon_;
}
inline void Ivsensorgps::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.lon)
}

// double lat = 4;
inline void Ivsensorgps::clear_lat() {
  lat_ = 0;
}
inline double Ivsensorgps::lat() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.lat)
  return lat_;
}
inline void Ivsensorgps::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.lat)
}

// double height = 5;
inline void Ivsensorgps::clear_height() {
  height_ = 0;
}
inline double Ivsensorgps::height() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.height)
  return height_;
}
inline void Ivsensorgps::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.height)
}

// double heading = 6;
inline void Ivsensorgps::clear_heading() {
  heading_ = 0;
}
inline double Ivsensorgps::heading() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.heading)
  return heading_;
}
inline void Ivsensorgps::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.heading)
}

// double velocity = 7;
inline void Ivsensorgps::clear_velocity() {
  velocity_ = 0;
}
inline double Ivsensorgps::velocity() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.velocity)
  return velocity_;
}
inline void Ivsensorgps::set_velocity(double value) {
  
  velocity_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.velocity)
}

// double up_velocity = 8;
inline void Ivsensorgps::clear_up_velocity() {
  up_velocity_ = 0;
}
inline double Ivsensorgps::up_velocity() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.up_velocity)
  return up_velocity_;
}
inline void Ivsensorgps::set_up_velocity(double value) {
  
  up_velocity_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.up_velocity)
}

// double track_angle = 9;
inline void Ivsensorgps::clear_track_angle() {
  track_angle_ = 0;
}
inline double Ivsensorgps::track_angle() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.track_angle)
  return track_angle_;
}
inline void Ivsensorgps::set_track_angle(double value) {
  
  track_angle_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.track_angle)
}

// int32 week = 10;
inline void Ivsensorgps::clear_week() {
  week_ = 0;
}
inline ::google::protobuf::int32 Ivsensorgps::week() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.week)
  return week_;
}
inline void Ivsensorgps::set_week(::google::protobuf::int32 value) {
  
  week_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.week)
}

// double utctime = 11;
inline void Ivsensorgps::clear_utctime() {
  utctime_ = 0;
}
inline double Ivsensorgps::utctime() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.utctime)
  return utctime_;
}
inline void Ivsensorgps::set_utctime(double value) {
  
  utctime_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.utctime)
}

// double hdop = 12;
inline void Ivsensorgps::clear_hdop() {
  hdop_ = 0;
}
inline double Ivsensorgps::hdop() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.hdop)
  return hdop_;
}
inline void Ivsensorgps::set_hdop(double value) {
  
  hdop_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.hdop)
}

// double diff_age = 13;
inline void Ivsensorgps::clear_diff_age() {
  diff_age_ = 0;
}
inline double Ivsensorgps::diff_age() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.diff_age)
  return diff_age_;
}
inline void Ivsensorgps::set_diff_age(double value) {
  
  diff_age_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.diff_age)
}

// double base_length = 14;
inline void Ivsensorgps::clear_base_length() {
  base_length_ = 0;
}
inline double Ivsensorgps::base_length() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.base_length)
  return base_length_;
}
inline void Ivsensorgps::set_base_length(double value) {
  
  base_length_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.base_length)
}

// double heading_std = 15;
inline void Ivsensorgps::clear_heading_std() {
  heading_std_ = 0;
}
inline double Ivsensorgps::heading_std() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.heading_std)
  return heading_std_;
}
inline void Ivsensorgps::set_heading_std(double value) {
  
  heading_std_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.heading_std)
}

// double xg = 16;
inline void Ivsensorgps::clear_xg() {
  xg_ = 0;
}
inline double Ivsensorgps::xg() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.xg)
  return xg_;
}
inline void Ivsensorgps::set_xg(double value) {
  
  xg_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.xg)
}

// double yg = 17;
inline void Ivsensorgps::clear_yg() {
  yg_ = 0;
}
inline double Ivsensorgps::yg() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.yg)
  return yg_;
}
inline void Ivsensorgps::set_yg(double value) {
  
  yg_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.yg)
}

// double zg = 18;
inline void Ivsensorgps::clear_zg() {
  zg_ = 0;
}
inline double Ivsensorgps::zg() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.zg)
  return zg_;
}
inline void Ivsensorgps::set_zg(double value) {
  
  zg_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.zg)
}

// uint32 status = 19;
inline void Ivsensorgps::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 Ivsensorgps::status() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.status)
  return status_;
}
inline void Ivsensorgps::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.status)
}

// uint32 satenum = 20;
inline void Ivsensorgps::clear_satenum() {
  satenum_ = 0u;
}
inline ::google::protobuf::uint32 Ivsensorgps::satenum() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.satenum)
  return satenum_;
}
inline void Ivsensorgps::set_satenum(::google::protobuf::uint32 value) {
  
  satenum_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.satenum)
}

// uint32 status_yaw = 21;
inline void Ivsensorgps::clear_status_yaw() {
  status_yaw_ = 0u;
}
inline ::google::protobuf::uint32 Ivsensorgps::status_yaw() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.status_yaw)
  return status_yaw_;
}
inline void Ivsensorgps::set_status_yaw(::google::protobuf::uint32 value) {
  
  status_yaw_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.status_yaw)
}

// uint32 is_heading_valid = 22;
inline void Ivsensorgps::clear_is_heading_valid() {
  is_heading_valid_ = 0u;
}
inline ::google::protobuf::uint32 Ivsensorgps::is_heading_valid() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorgps.is_heading_valid)
  return is_heading_valid_;
}
inline void Ivsensorgps::set_is_heading_valid(::google::protobuf::uint32 value) {
  
  is_heading_valid_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorgps.is_heading_valid)
}

// -------------------------------------------------------------------

// Ivsensorimu

// .common_msgs.Header header = 1;
inline bool Ivsensorimu::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::common_msgs::Header& Ivsensorimu::header() const {
  const ::common_msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorimu.header)
  return p != NULL ? *p : *reinterpret_cast<const ::common_msgs::Header*>(
      &::common_msgs::_Header_default_instance_);
}
inline ::common_msgs::Header* Ivsensorimu::release_header() {
  // @@protoc_insertion_point(field_release:sensor_imu_msgs.Ivsensorimu.header)
  
  ::common_msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::common_msgs::Header* Ivsensorimu::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::common_msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:sensor_imu_msgs.Ivsensorimu.header)
  return header_;
}
inline void Ivsensorimu::set_allocated_header(::common_msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:sensor_imu_msgs.Ivsensorimu.header)
}

// bool update = 2;
inline void Ivsensorimu::clear_update() {
  update_ = false;
}
inline bool Ivsensorimu::update() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorimu.update)
  return update_;
}
inline void Ivsensorimu::set_update(bool value) {
  
  update_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorimu.update)
}

// uint32 time_tag = 3;
inline void Ivsensorimu::clear_time_tag() {
  time_tag_ = 0u;
}
inline ::google::protobuf::uint32 Ivsensorimu::time_tag() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorimu.time_tag)
  return time_tag_;
}
inline void Ivsensorimu::set_time_tag(::google::protobuf::uint32 value) {
  
  time_tag_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorimu.time_tag)
}

// int32 week = 4;
inline void Ivsensorimu::clear_week() {
  week_ = 0;
}
inline ::google::protobuf::int32 Ivsensorimu::week() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorimu.week)
  return week_;
}
inline void Ivsensorimu::set_week(::google::protobuf::int32 value) {
  
  week_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorimu.week)
}

// double utc_time = 5;
inline void Ivsensorimu::clear_utc_time() {
  utc_time_ = 0;
}
inline double Ivsensorimu::utc_time() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorimu.utc_time)
  return utc_time_;
}
inline void Ivsensorimu::set_utc_time(double value) {
  
  utc_time_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorimu.utc_time)
}

// double gyro_x = 6;
inline void Ivsensorimu::clear_gyro_x() {
  gyro_x_ = 0;
}
inline double Ivsensorimu::gyro_x() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorimu.gyro_x)
  return gyro_x_;
}
inline void Ivsensorimu::set_gyro_x(double value) {
  
  gyro_x_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorimu.gyro_x)
}

// double gyro_y = 7;
inline void Ivsensorimu::clear_gyro_y() {
  gyro_y_ = 0;
}
inline double Ivsensorimu::gyro_y() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorimu.gyro_y)
  return gyro_y_;
}
inline void Ivsensorimu::set_gyro_y(double value) {
  
  gyro_y_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorimu.gyro_y)
}

// double gyro_z = 8;
inline void Ivsensorimu::clear_gyro_z() {
  gyro_z_ = 0;
}
inline double Ivsensorimu::gyro_z() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorimu.gyro_z)
  return gyro_z_;
}
inline void Ivsensorimu::set_gyro_z(double value) {
  
  gyro_z_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorimu.gyro_z)
}

// double acce_x = 9;
inline void Ivsensorimu::clear_acce_x() {
  acce_x_ = 0;
}
inline double Ivsensorimu::acce_x() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorimu.acce_x)
  return acce_x_;
}
inline void Ivsensorimu::set_acce_x(double value) {
  
  acce_x_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorimu.acce_x)
}

// double acce_y = 10;
inline void Ivsensorimu::clear_acce_y() {
  acce_y_ = 0;
}
inline double Ivsensorimu::acce_y() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorimu.acce_y)
  return acce_y_;
}
inline void Ivsensorimu::set_acce_y(double value) {
  
  acce_y_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorimu.acce_y)
}

// double acce_z = 11;
inline void Ivsensorimu::clear_acce_z() {
  acce_z_ = 0;
}
inline double Ivsensorimu::acce_z() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorimu.acce_z)
  return acce_z_;
}
inline void Ivsensorimu::set_acce_z(double value) {
  
  acce_z_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorimu.acce_z)
}

// double temperature = 12;
inline void Ivsensorimu::clear_temperature() {
  temperature_ = 0;
}
inline double Ivsensorimu::temperature() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivsensorimu.temperature)
  return temperature_;
}
inline void Ivsensorimu::set_temperature(double value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivsensorimu.temperature)
}

// -------------------------------------------------------------------

// Ivwheelspeed

// .common_msgs.Header header = 1;
inline bool Ivwheelspeed::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::common_msgs::Header& Ivwheelspeed::header() const {
  const ::common_msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivwheelspeed.header)
  return p != NULL ? *p : *reinterpret_cast<const ::common_msgs::Header*>(
      &::common_msgs::_Header_default_instance_);
}
inline ::common_msgs::Header* Ivwheelspeed::release_header() {
  // @@protoc_insertion_point(field_release:sensor_imu_msgs.Ivwheelspeed.header)
  
  ::common_msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::common_msgs::Header* Ivwheelspeed::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::common_msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:sensor_imu_msgs.Ivwheelspeed.header)
  return header_;
}
inline void Ivwheelspeed::set_allocated_header(::common_msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:sensor_imu_msgs.Ivwheelspeed.header)
}

// bool update = 2;
inline void Ivwheelspeed::clear_update() {
  update_ = false;
}
inline bool Ivwheelspeed::update() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivwheelspeed.update)
  return update_;
}
inline void Ivwheelspeed::set_update(bool value) {
  
  update_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivwheelspeed.update)
}

// int32 week = 3;
inline void Ivwheelspeed::clear_week() {
  week_ = 0;
}
inline ::google::protobuf::int32 Ivwheelspeed::week() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivwheelspeed.week)
  return week_;
}
inline void Ivwheelspeed::set_week(::google::protobuf::int32 value) {
  
  week_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivwheelspeed.week)
}

// double utc_time = 4;
inline void Ivwheelspeed::clear_utc_time() {
  utc_time_ = 0;
}
inline double Ivwheelspeed::utc_time() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivwheelspeed.utc_time)
  return utc_time_;
}
inline void Ivwheelspeed::set_utc_time(double value) {
  
  utc_time_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivwheelspeed.utc_time)
}

// float wheelspeed_lr_pluse = 5;
inline void Ivwheelspeed::clear_wheelspeed_lr_pluse() {
  wheelspeed_lr_pluse_ = 0;
}
inline float Ivwheelspeed::wheelspeed_lr_pluse() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivwheelspeed.wheelspeed_lr_pluse)
  return wheelspeed_lr_pluse_;
}
inline void Ivwheelspeed::set_wheelspeed_lr_pluse(float value) {
  
  wheelspeed_lr_pluse_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivwheelspeed.wheelspeed_lr_pluse)
}

// float wheelspeed_rr_pluse = 6;
inline void Ivwheelspeed::clear_wheelspeed_rr_pluse() {
  wheelspeed_rr_pluse_ = 0;
}
inline float Ivwheelspeed::wheelspeed_rr_pluse() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivwheelspeed.wheelspeed_rr_pluse)
  return wheelspeed_rr_pluse_;
}
inline void Ivwheelspeed::set_wheelspeed_rr_pluse(float value) {
  
  wheelspeed_rr_pluse_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivwheelspeed.wheelspeed_rr_pluse)
}

// uint32 pluse_mask = 7;
inline void Ivwheelspeed::clear_pluse_mask() {
  pluse_mask_ = 0u;
}
inline ::google::protobuf::uint32 Ivwheelspeed::pluse_mask() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivwheelspeed.pluse_mask)
  return pluse_mask_;
}
inline void Ivwheelspeed::set_pluse_mask(::google::protobuf::uint32 value) {
  
  pluse_mask_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivwheelspeed.pluse_mask)
}

// -------------------------------------------------------------------

// Filterstatus

// bool update = 1;
inline void Filterstatus::clear_update() {
  update_ = false;
}
inline bool Filterstatus::update() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.update)
  return update_;
}
inline void Filterstatus::set_update(bool value) {
  
  update_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.update)
}

// int32 frame_count = 2;
inline void Filterstatus::clear_frame_count() {
  frame_count_ = 0;
}
inline ::google::protobuf::int32 Filterstatus::frame_count() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.frame_count)
  return frame_count_;
}
inline void Filterstatus::set_frame_count(::google::protobuf::int32 value) {
  
  frame_count_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.frame_count)
}

// float x_gyro_zero_bias = 3;
inline void Filterstatus::clear_x_gyro_zero_bias() {
  x_gyro_zero_bias_ = 0;
}
inline float Filterstatus::x_gyro_zero_bias() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.x_gyro_zero_bias)
  return x_gyro_zero_bias_;
}
inline void Filterstatus::set_x_gyro_zero_bias(float value) {
  
  x_gyro_zero_bias_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.x_gyro_zero_bias)
}

// float y_gyro_zero_bias = 4;
inline void Filterstatus::clear_y_gyro_zero_bias() {
  y_gyro_zero_bias_ = 0;
}
inline float Filterstatus::y_gyro_zero_bias() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.y_gyro_zero_bias)
  return y_gyro_zero_bias_;
}
inline void Filterstatus::set_y_gyro_zero_bias(float value) {
  
  y_gyro_zero_bias_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.y_gyro_zero_bias)
}

// float z_gyro_zero_bias = 5;
inline void Filterstatus::clear_z_gyro_zero_bias() {
  z_gyro_zero_bias_ = 0;
}
inline float Filterstatus::z_gyro_zero_bias() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.z_gyro_zero_bias)
  return z_gyro_zero_bias_;
}
inline void Filterstatus::set_z_gyro_zero_bias(float value) {
  
  z_gyro_zero_bias_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.z_gyro_zero_bias)
}

// float x_acce_zero_bias = 6;
inline void Filterstatus::clear_x_acce_zero_bias() {
  x_acce_zero_bias_ = 0;
}
inline float Filterstatus::x_acce_zero_bias() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.x_acce_zero_bias)
  return x_acce_zero_bias_;
}
inline void Filterstatus::set_x_acce_zero_bias(float value) {
  
  x_acce_zero_bias_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.x_acce_zero_bias)
}

// float y_acce_zero_bias = 7;
inline void Filterstatus::clear_y_acce_zero_bias() {
  y_acce_zero_bias_ = 0;
}
inline float Filterstatus::y_acce_zero_bias() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.y_acce_zero_bias)
  return y_acce_zero_bias_;
}
inline void Filterstatus::set_y_acce_zero_bias(float value) {
  
  y_acce_zero_bias_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.y_acce_zero_bias)
}

// float z_acce_zero_bias = 8;
inline void Filterstatus::clear_z_acce_zero_bias() {
  z_acce_zero_bias_ = 0;
}
inline float Filterstatus::z_acce_zero_bias() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.z_acce_zero_bias)
  return z_acce_zero_bias_;
}
inline void Filterstatus::set_z_acce_zero_bias(float value) {
  
  z_acce_zero_bias_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.z_acce_zero_bias)
}

// float heading_install_deviation = 9;
inline void Filterstatus::clear_heading_install_deviation() {
  heading_install_deviation_ = 0;
}
inline float Filterstatus::heading_install_deviation() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.heading_install_deviation)
  return heading_install_deviation_;
}
inline void Filterstatus::set_heading_install_deviation(float value) {
  
  heading_install_deviation_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.heading_install_deviation)
}

// float scale_factor_error = 10;
inline void Filterstatus::clear_scale_factor_error() {
  scale_factor_error_ = 0;
}
inline float Filterstatus::scale_factor_error() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.scale_factor_error)
  return scale_factor_error_;
}
inline void Filterstatus::set_scale_factor_error(float value) {
  
  scale_factor_error_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.scale_factor_error)
}

// float pitch_install_deviation = 11;
inline void Filterstatus::clear_pitch_install_deviation() {
  pitch_install_deviation_ = 0;
}
inline float Filterstatus::pitch_install_deviation() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.pitch_install_deviation)
  return pitch_install_deviation_;
}
inline void Filterstatus::set_pitch_install_deviation(float value) {
  
  pitch_install_deviation_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.pitch_install_deviation)
}

// float eastward_position_deviation = 12;
inline void Filterstatus::clear_eastward_position_deviation() {
  eastward_position_deviation_ = 0;
}
inline float Filterstatus::eastward_position_deviation() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.eastward_position_deviation)
  return eastward_position_deviation_;
}
inline void Filterstatus::set_eastward_position_deviation(float value) {
  
  eastward_position_deviation_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.eastward_position_deviation)
}

// float northward_position_deviation = 13;
inline void Filterstatus::clear_northward_position_deviation() {
  northward_position_deviation_ = 0;
}
inline float Filterstatus::northward_position_deviation() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.northward_position_deviation)
  return northward_position_deviation_;
}
inline void Filterstatus::set_northward_position_deviation(float value) {
  
  northward_position_deviation_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.northward_position_deviation)
}

// float sky_position_deviation = 14;
inline void Filterstatus::clear_sky_position_deviation() {
  sky_position_deviation_ = 0;
}
inline float Filterstatus::sky_position_deviation() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.sky_position_deviation)
  return sky_position_deviation_;
}
inline void Filterstatus::set_sky_position_deviation(float value) {
  
  sky_position_deviation_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.sky_position_deviation)
}

// float heading_deviation = 15;
inline void Filterstatus::clear_heading_deviation() {
  heading_deviation_ = 0;
}
inline float Filterstatus::heading_deviation() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.heading_deviation)
  return heading_deviation_;
}
inline void Filterstatus::set_heading_deviation(float value) {
  
  heading_deviation_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.heading_deviation)
}

// int32 gnss_eastward_position_count = 16;
inline void Filterstatus::clear_gnss_eastward_position_count() {
  gnss_eastward_position_count_ = 0;
}
inline ::google::protobuf::int32 Filterstatus::gnss_eastward_position_count() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.gnss_eastward_position_count)
  return gnss_eastward_position_count_;
}
inline void Filterstatus::set_gnss_eastward_position_count(::google::protobuf::int32 value) {
  
  gnss_eastward_position_count_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.gnss_eastward_position_count)
}

// int32 gnss_northward_position_count = 17;
inline void Filterstatus::clear_gnss_northward_position_count() {
  gnss_northward_position_count_ = 0;
}
inline ::google::protobuf::int32 Filterstatus::gnss_northward_position_count() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.gnss_northward_position_count)
  return gnss_northward_position_count_;
}
inline void Filterstatus::set_gnss_northward_position_count(::google::protobuf::int32 value) {
  
  gnss_northward_position_count_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.gnss_northward_position_count)
}

// int32 gnss_sky_position_count = 18;
inline void Filterstatus::clear_gnss_sky_position_count() {
  gnss_sky_position_count_ = 0;
}
inline ::google::protobuf::int32 Filterstatus::gnss_sky_position_count() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.gnss_sky_position_count)
  return gnss_sky_position_count_;
}
inline void Filterstatus::set_gnss_sky_position_count(::google::protobuf::int32 value) {
  
  gnss_sky_position_count_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.gnss_sky_position_count)
}

// int32 gnss_eastward_speed_count = 19;
inline void Filterstatus::clear_gnss_eastward_speed_count() {
  gnss_eastward_speed_count_ = 0;
}
inline ::google::protobuf::int32 Filterstatus::gnss_eastward_speed_count() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.gnss_eastward_speed_count)
  return gnss_eastward_speed_count_;
}
inline void Filterstatus::set_gnss_eastward_speed_count(::google::protobuf::int32 value) {
  
  gnss_eastward_speed_count_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.gnss_eastward_speed_count)
}

// int32 gnss_northward_speed_count = 20;
inline void Filterstatus::clear_gnss_northward_speed_count() {
  gnss_northward_speed_count_ = 0;
}
inline ::google::protobuf::int32 Filterstatus::gnss_northward_speed_count() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.gnss_northward_speed_count)
  return gnss_northward_speed_count_;
}
inline void Filterstatus::set_gnss_northward_speed_count(::google::protobuf::int32 value) {
  
  gnss_northward_speed_count_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.gnss_northward_speed_count)
}

// int32 gnss_sky_speed_count = 21;
inline void Filterstatus::clear_gnss_sky_speed_count() {
  gnss_sky_speed_count_ = 0;
}
inline ::google::protobuf::int32 Filterstatus::gnss_sky_speed_count() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.gnss_sky_speed_count)
  return gnss_sky_speed_count_;
}
inline void Filterstatus::set_gnss_sky_speed_count(::google::protobuf::int32 value) {
  
  gnss_sky_speed_count_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.gnss_sky_speed_count)
}

// int32 gnss_heading_count = 22;
inline void Filterstatus::clear_gnss_heading_count() {
  gnss_heading_count_ = 0;
}
inline ::google::protobuf::int32 Filterstatus::gnss_heading_count() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.gnss_heading_count)
  return gnss_heading_count_;
}
inline void Filterstatus::set_gnss_heading_count(::google::protobuf::int32 value) {
  
  gnss_heading_count_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.gnss_heading_count)
}

// int32 odom_eastward_speed_count = 23;
inline void Filterstatus::clear_odom_eastward_speed_count() {
  odom_eastward_speed_count_ = 0;
}
inline ::google::protobuf::int32 Filterstatus::odom_eastward_speed_count() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.odom_eastward_speed_count)
  return odom_eastward_speed_count_;
}
inline void Filterstatus::set_odom_eastward_speed_count(::google::protobuf::int32 value) {
  
  odom_eastward_speed_count_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.odom_eastward_speed_count)
}

// int32 odom_northward_speed_count = 24;
inline void Filterstatus::clear_odom_northward_speed_count() {
  odom_northward_speed_count_ = 0;
}
inline ::google::protobuf::int32 Filterstatus::odom_northward_speed_count() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.odom_northward_speed_count)
  return odom_northward_speed_count_;
}
inline void Filterstatus::set_odom_northward_speed_count(::google::protobuf::int32 value) {
  
  odom_northward_speed_count_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.odom_northward_speed_count)
}

// int32 odom_sky_speed_count = 25;
inline void Filterstatus::clear_odom_sky_speed_count() {
  odom_sky_speed_count_ = 0;
}
inline ::google::protobuf::int32 Filterstatus::odom_sky_speed_count() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.odom_sky_speed_count)
  return odom_sky_speed_count_;
}
inline void Filterstatus::set_odom_sky_speed_count(::google::protobuf::int32 value) {
  
  odom_sky_speed_count_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.odom_sky_speed_count)
}

// int32 laser_eastward_position_count = 26;
inline void Filterstatus::clear_laser_eastward_position_count() {
  laser_eastward_position_count_ = 0;
}
inline ::google::protobuf::int32 Filterstatus::laser_eastward_position_count() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.laser_eastward_position_count)
  return laser_eastward_position_count_;
}
inline void Filterstatus::set_laser_eastward_position_count(::google::protobuf::int32 value) {
  
  laser_eastward_position_count_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.laser_eastward_position_count)
}

// int32 laser_northward_position_count = 27;
inline void Filterstatus::clear_laser_northward_position_count() {
  laser_northward_position_count_ = 0;
}
inline ::google::protobuf::int32 Filterstatus::laser_northward_position_count() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.laser_northward_position_count)
  return laser_northward_position_count_;
}
inline void Filterstatus::set_laser_northward_position_count(::google::protobuf::int32 value) {
  
  laser_northward_position_count_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.laser_northward_position_count)
}

// int32 laser_sky_position_count = 28;
inline void Filterstatus::clear_laser_sky_position_count() {
  laser_sky_position_count_ = 0;
}
inline ::google::protobuf::int32 Filterstatus::laser_sky_position_count() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.laser_sky_position_count)
  return laser_sky_position_count_;
}
inline void Filterstatus::set_laser_sky_position_count(::google::protobuf::int32 value) {
  
  laser_sky_position_count_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.laser_sky_position_count)
}

// int32 laser_heading_count = 29;
inline void Filterstatus::clear_laser_heading_count() {
  laser_heading_count_ = 0;
}
inline ::google::protobuf::int32 Filterstatus::laser_heading_count() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.laser_heading_count)
  return laser_heading_count_;
}
inline void Filterstatus::set_laser_heading_count(::google::protobuf::int32 value) {
  
  laser_heading_count_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.laser_heading_count)
}

// int32 time_consuming = 30;
inline void Filterstatus::clear_time_consuming() {
  time_consuming_ = 0;
}
inline ::google::protobuf::int32 Filterstatus::time_consuming() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.time_consuming)
  return time_consuming_;
}
inline void Filterstatus::set_time_consuming(::google::protobuf::int32 value) {
  
  time_consuming_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.time_consuming)
}

// uint32 fusion_model = 31;
inline void Filterstatus::clear_fusion_model() {
  fusion_model_ = 0u;
}
inline ::google::protobuf::uint32 Filterstatus::fusion_model() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.fusion_model)
  return fusion_model_;
}
inline void Filterstatus::set_fusion_model(::google::protobuf::uint32 value) {
  
  fusion_model_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.fusion_model)
}

// uint32 status = 32;
inline void Filterstatus::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 Filterstatus::status() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Filterstatus.status)
  return status_;
}
inline void Filterstatus::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Filterstatus.status)
}

// -------------------------------------------------------------------

// Ivlidarmatching

// .common_msgs.Header header = 1;
inline bool Ivlidarmatching::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::common_msgs::Header& Ivlidarmatching::header() const {
  const ::common_msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.header)
  return p != NULL ? *p : *reinterpret_cast<const ::common_msgs::Header*>(
      &::common_msgs::_Header_default_instance_);
}
inline ::common_msgs::Header* Ivlidarmatching::release_header() {
  // @@protoc_insertion_point(field_release:sensor_imu_msgs.Ivlidarmatching.header)
  
  ::common_msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::common_msgs::Header* Ivlidarmatching::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::common_msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:sensor_imu_msgs.Ivlidarmatching.header)
  return header_;
}
inline void Ivlidarmatching::set_allocated_header(::common_msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:sensor_imu_msgs.Ivlidarmatching.header)
}

// bool update = 2;
inline void Ivlidarmatching::clear_update() {
  update_ = false;
}
inline bool Ivlidarmatching::update() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.update)
  return update_;
}
inline void Ivlidarmatching::set_update(bool value) {
  
  update_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.update)
}

// int32 week = 3;
inline void Ivlidarmatching::clear_week() {
  week_ = 0;
}
inline ::google::protobuf::int32 Ivlidarmatching::week() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.week)
  return week_;
}
inline void Ivlidarmatching::set_week(::google::protobuf::int32 value) {
  
  week_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.week)
}

// double utctime = 4;
inline void Ivlidarmatching::clear_utctime() {
  utctime_ = 0;
}
inline double Ivlidarmatching::utctime() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.utctime)
  return utctime_;
}
inline void Ivlidarmatching::set_utctime(double value) {
  
  utctime_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.utctime)
}

// double roll = 5;
inline void Ivlidarmatching::clear_roll() {
  roll_ = 0;
}
inline double Ivlidarmatching::roll() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.roll)
  return roll_;
}
inline void Ivlidarmatching::set_roll(double value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.roll)
}

// double pitch = 6;
inline void Ivlidarmatching::clear_pitch() {
  pitch_ = 0;
}
inline double Ivlidarmatching::pitch() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.pitch)
  return pitch_;
}
inline void Ivlidarmatching::set_pitch(double value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.pitch)
}

// double yaw = 7;
inline void Ivlidarmatching::clear_yaw() {
  yaw_ = 0;
}
inline double Ivlidarmatching::yaw() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.yaw)
  return yaw_;
}
inline void Ivlidarmatching::set_yaw(double value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.yaw)
}

// double lat = 8;
inline void Ivlidarmatching::clear_lat() {
  lat_ = 0;
}
inline double Ivlidarmatching::lat() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.lat)
  return lat_;
}
inline void Ivlidarmatching::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.lat)
}

// double lon = 9;
inline void Ivlidarmatching::clear_lon() {
  lon_ = 0;
}
inline double Ivlidarmatching::lon() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.lon)
  return lon_;
}
inline void Ivlidarmatching::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.lon)
}

// double height = 10;
inline void Ivlidarmatching::clear_height() {
  height_ = 0;
}
inline double Ivlidarmatching::height() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.height)
  return height_;
}
inline void Ivlidarmatching::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.height)
}

// double xg = 11;
inline void Ivlidarmatching::clear_xg() {
  xg_ = 0;
}
inline double Ivlidarmatching::xg() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.xg)
  return xg_;
}
inline void Ivlidarmatching::set_xg(double value) {
  
  xg_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.xg)
}

// double yg = 12;
inline void Ivlidarmatching::clear_yg() {
  yg_ = 0;
}
inline double Ivlidarmatching::yg() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.yg)
  return yg_;
}
inline void Ivlidarmatching::set_yg(double value) {
  
  yg_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.yg)
}

// uint32 fusion_type = 13;
inline void Ivlidarmatching::clear_fusion_type() {
  fusion_type_ = 0u;
}
inline ::google::protobuf::uint32 Ivlidarmatching::fusion_type() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.fusion_type)
  return fusion_type_;
}
inline void Ivlidarmatching::set_fusion_type(::google::protobuf::uint32 value) {
  
  fusion_type_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.fusion_type)
}

// int32 init_once = 14;
inline void Ivlidarmatching::clear_init_once() {
  init_once_ = 0;
}
inline ::google::protobuf::int32 Ivlidarmatching::init_once() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.init_once)
  return init_once_;
}
inline void Ivlidarmatching::set_init_once(::google::protobuf::int32 value) {
  
  init_once_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.init_once)
}

// int32 is_degeneracy = 15;
inline void Ivlidarmatching::clear_is_degeneracy() {
  is_degeneracy_ = 0;
}
inline ::google::protobuf::int32 Ivlidarmatching::is_degeneracy() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.is_degeneracy)
  return is_degeneracy_;
}
inline void Ivlidarmatching::set_is_degeneracy(::google::protobuf::int32 value) {
  
  is_degeneracy_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.is_degeneracy)
}

// uint32 is_localization_area = 16;
inline void Ivlidarmatching::clear_is_localization_area() {
  is_localization_area_ = 0u;
}
inline ::google::protobuf::uint32 Ivlidarmatching::is_localization_area() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.is_localization_area)
  return is_localization_area_;
}
inline void Ivlidarmatching::set_is_localization_area(::google::protobuf::uint32 value) {
  
  is_localization_area_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.is_localization_area)
}

// uint32 is_in_map = 17;
inline void Ivlidarmatching::clear_is_in_map() {
  is_in_map_ = 0u;
}
inline ::google::protobuf::uint32 Ivlidarmatching::is_in_map() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.is_in_map)
  return is_in_map_;
}
inline void Ivlidarmatching::set_is_in_map(::google::protobuf::uint32 value) {
  
  is_in_map_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.is_in_map)
}

// double matching_score = 18;
inline void Ivlidarmatching::clear_matching_score() {
  matching_score_ = 0;
}
inline double Ivlidarmatching::matching_score() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.matching_score)
  return matching_score_;
}
inline void Ivlidarmatching::set_matching_score(double value) {
  
  matching_score_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.matching_score)
}

// double lat_std = 19;
inline void Ivlidarmatching::clear_lat_std() {
  lat_std_ = 0;
}
inline double Ivlidarmatching::lat_std() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.lat_std)
  return lat_std_;
}
inline void Ivlidarmatching::set_lat_std(double value) {
  
  lat_std_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.lat_std)
}

// double lon_std = 20;
inline void Ivlidarmatching::clear_lon_std() {
  lon_std_ = 0;
}
inline double Ivlidarmatching::lon_std() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.lon_std)
  return lon_std_;
}
inline void Ivlidarmatching::set_lon_std(double value) {
  
  lon_std_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.lon_std)
}

// double height_std = 21;
inline void Ivlidarmatching::clear_height_std() {
  height_std_ = 0;
}
inline double Ivlidarmatching::height_std() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.height_std)
  return height_std_;
}
inline void Ivlidarmatching::set_height_std(double value) {
  
  height_std_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.height_std)
}

// double yaw_std = 22;
inline void Ivlidarmatching::clear_yaw_std() {
  yaw_std_ = 0;
}
inline double Ivlidarmatching::yaw_std() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.yaw_std)
  return yaw_std_;
}
inline void Ivlidarmatching::set_yaw_std(double value) {
  
  yaw_std_ = value;
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.yaw_std)
}

// string version = 23;
inline void Ivlidarmatching::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Ivlidarmatching::version() const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.version)
  return version_.GetNoArena();
}
inline void Ivlidarmatching::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.version)
}
#if LANG_CXX11
inline void Ivlidarmatching::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sensor_imu_msgs.Ivlidarmatching.version)
}
#endif
inline void Ivlidarmatching::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sensor_imu_msgs.Ivlidarmatching.version)
}
inline void Ivlidarmatching::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sensor_imu_msgs.Ivlidarmatching.version)
}
inline ::std::string* Ivlidarmatching::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:sensor_imu_msgs.Ivlidarmatching.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ivlidarmatching::release_version() {
  // @@protoc_insertion_point(field_release:sensor_imu_msgs.Ivlidarmatching.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ivlidarmatching::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:sensor_imu_msgs.Ivlidarmatching.version)
}

// repeated float gmm_scores = 24;
inline int Ivlidarmatching::gmm_scores_size() const {
  return gmm_scores_.size();
}
inline void Ivlidarmatching::clear_gmm_scores() {
  gmm_scores_.Clear();
}
inline float Ivlidarmatching::gmm_scores(int index) const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.gmm_scores)
  return gmm_scores_.Get(index);
}
inline void Ivlidarmatching::set_gmm_scores(int index, float value) {
  gmm_scores_.Set(index, value);
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.gmm_scores)
}
inline void Ivlidarmatching::add_gmm_scores(float value) {
  gmm_scores_.Add(value);
  // @@protoc_insertion_point(field_add:sensor_imu_msgs.Ivlidarmatching.gmm_scores)
}
inline const ::google::protobuf::RepeatedField< float >&
Ivlidarmatching::gmm_scores() const {
  // @@protoc_insertion_point(field_list:sensor_imu_msgs.Ivlidarmatching.gmm_scores)
  return gmm_scores_;
}
inline ::google::protobuf::RepeatedField< float >*
Ivlidarmatching::mutable_gmm_scores() {
  // @@protoc_insertion_point(field_mutable_list:sensor_imu_msgs.Ivlidarmatching.gmm_scores)
  return &gmm_scores_;
}

// repeated int32 gmm_offsets = 25;
inline int Ivlidarmatching::gmm_offsets_size() const {
  return gmm_offsets_.size();
}
inline void Ivlidarmatching::clear_gmm_offsets() {
  gmm_offsets_.Clear();
}
inline ::google::protobuf::int32 Ivlidarmatching::gmm_offsets(int index) const {
  // @@protoc_insertion_point(field_get:sensor_imu_msgs.Ivlidarmatching.gmm_offsets)
  return gmm_offsets_.Get(index);
}
inline void Ivlidarmatching::set_gmm_offsets(int index, ::google::protobuf::int32 value) {
  gmm_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:sensor_imu_msgs.Ivlidarmatching.gmm_offsets)
}
inline void Ivlidarmatching::add_gmm_offsets(::google::protobuf::int32 value) {
  gmm_offsets_.Add(value);
  // @@protoc_insertion_point(field_add:sensor_imu_msgs.Ivlidarmatching.gmm_offsets)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Ivlidarmatching::gmm_offsets() const {
  // @@protoc_insertion_point(field_list:sensor_imu_msgs.Ivlidarmatching.gmm_offsets)
  return gmm_offsets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Ivlidarmatching::mutable_gmm_offsets() {
  // @@protoc_insertion_point(field_mutable_list:sensor_imu_msgs.Ivlidarmatching.gmm_offsets)
  return &gmm_offsets_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sensor_imu_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sensor_5fimu_5fmsgs_2eproto__INCLUDED
