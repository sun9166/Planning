// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mapengine_msgs.proto

#ifndef PROTOBUF_mapengine_5fmsgs_2eproto__INCLUDED
#define PROTOBUF_mapengine_5fmsgs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common_msgs.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_mapengine_5fmsgs_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[25];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsBusinessAreaImpl();
void InitDefaultsBusinessArea();
void InitDefaultsMissionPointImpl();
void InitDefaultsMissionPoint();
void InitDefaultsMissionLineImpl();
void InitDefaultsMissionLine();
void InitDefaultsMissionAreaImpl();
void InitDefaultsMissionArea();
void InitDefaultsMissionContentImpl();
void InitDefaultsMissionContent();
void InitDefaultsRoutePointImpl();
void InitDefaultsRoutePoint();
void InitDefaultsMissionRouteImpl();
void InitDefaultsMissionRoute();
void InitDefaultsImuInfoImpl();
void InitDefaultsImuInfo();
void InitDefaultsTrafficLightImpl();
void InitDefaultsTrafficLight();
void InitDefaultsPointImpl();
void InitDefaultsPoint();
void InitDefaultsReferencePointImpl();
void InitDefaultsReferencePoint();
void InitDefaultsAreaRangeImpl();
void InitDefaultsAreaRange();
void InitDefaultsDisRangeImpl();
void InitDefaultsDisRange();
void InitDefaultsFuncInfoImpl();
void InitDefaultsFuncInfo();
void InitDefaultsRelationLaneImpl();
void InitDefaultsRelationLane();
void InitDefaultsLineImpl();
void InitDefaultsLine();
void InitDefaultsLineListImpl();
void InitDefaultsLineList();
void InitDefaultsMapInfoImpl();
void InitDefaultsMapInfo();
void InitDefaultsGlobalPathCommandImpl();
void InitDefaultsGlobalPathCommand();
void InitDefaultsGlobalPathResultImpl();
void InitDefaultsGlobalPathResult();
void InitDefaultsNavigationCommandImpl();
void InitDefaultsNavigationCommand();
void InitDefaultsNavigationResultImpl();
void InitDefaultsNavigationResult();
void InitDefaultsNavigationImpl();
void InitDefaultsNavigation();
void InitDefaultsNavMissionImpl();
void InitDefaultsNavMission();
void InitDefaultsDebugImpl();
void InitDefaultsDebug();
inline void InitDefaults() {
  InitDefaultsBusinessArea();
  InitDefaultsMissionPoint();
  InitDefaultsMissionLine();
  InitDefaultsMissionArea();
  InitDefaultsMissionContent();
  InitDefaultsRoutePoint();
  InitDefaultsMissionRoute();
  InitDefaultsImuInfo();
  InitDefaultsTrafficLight();
  InitDefaultsPoint();
  InitDefaultsReferencePoint();
  InitDefaultsAreaRange();
  InitDefaultsDisRange();
  InitDefaultsFuncInfo();
  InitDefaultsRelationLane();
  InitDefaultsLine();
  InitDefaultsLineList();
  InitDefaultsMapInfo();
  InitDefaultsGlobalPathCommand();
  InitDefaultsGlobalPathResult();
  InitDefaultsNavigationCommand();
  InitDefaultsNavigationResult();
  InitDefaultsNavigation();
  InitDefaultsNavMission();
  InitDefaultsDebug();
}
}  // namespace protobuf_mapengine_5fmsgs_2eproto
namespace mapengine_msgs {
class AreaRange;
class AreaRangeDefaultTypeInternal;
extern AreaRangeDefaultTypeInternal _AreaRange_default_instance_;
class BusinessArea;
class BusinessAreaDefaultTypeInternal;
extern BusinessAreaDefaultTypeInternal _BusinessArea_default_instance_;
class Debug;
class DebugDefaultTypeInternal;
extern DebugDefaultTypeInternal _Debug_default_instance_;
class DisRange;
class DisRangeDefaultTypeInternal;
extern DisRangeDefaultTypeInternal _DisRange_default_instance_;
class FuncInfo;
class FuncInfoDefaultTypeInternal;
extern FuncInfoDefaultTypeInternal _FuncInfo_default_instance_;
class GlobalPathCommand;
class GlobalPathCommandDefaultTypeInternal;
extern GlobalPathCommandDefaultTypeInternal _GlobalPathCommand_default_instance_;
class GlobalPathResult;
class GlobalPathResultDefaultTypeInternal;
extern GlobalPathResultDefaultTypeInternal _GlobalPathResult_default_instance_;
class ImuInfo;
class ImuInfoDefaultTypeInternal;
extern ImuInfoDefaultTypeInternal _ImuInfo_default_instance_;
class Line;
class LineDefaultTypeInternal;
extern LineDefaultTypeInternal _Line_default_instance_;
class LineList;
class LineListDefaultTypeInternal;
extern LineListDefaultTypeInternal _LineList_default_instance_;
class MapInfo;
class MapInfoDefaultTypeInternal;
extern MapInfoDefaultTypeInternal _MapInfo_default_instance_;
class MissionArea;
class MissionAreaDefaultTypeInternal;
extern MissionAreaDefaultTypeInternal _MissionArea_default_instance_;
class MissionContent;
class MissionContentDefaultTypeInternal;
extern MissionContentDefaultTypeInternal _MissionContent_default_instance_;
class MissionLine;
class MissionLineDefaultTypeInternal;
extern MissionLineDefaultTypeInternal _MissionLine_default_instance_;
class MissionPoint;
class MissionPointDefaultTypeInternal;
extern MissionPointDefaultTypeInternal _MissionPoint_default_instance_;
class MissionRoute;
class MissionRouteDefaultTypeInternal;
extern MissionRouteDefaultTypeInternal _MissionRoute_default_instance_;
class NavMission;
class NavMissionDefaultTypeInternal;
extern NavMissionDefaultTypeInternal _NavMission_default_instance_;
class Navigation;
class NavigationDefaultTypeInternal;
extern NavigationDefaultTypeInternal _Navigation_default_instance_;
class NavigationCommand;
class NavigationCommandDefaultTypeInternal;
extern NavigationCommandDefaultTypeInternal _NavigationCommand_default_instance_;
class NavigationResult;
class NavigationResultDefaultTypeInternal;
extern NavigationResultDefaultTypeInternal _NavigationResult_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class ReferencePoint;
class ReferencePointDefaultTypeInternal;
extern ReferencePointDefaultTypeInternal _ReferencePoint_default_instance_;
class RelationLane;
class RelationLaneDefaultTypeInternal;
extern RelationLaneDefaultTypeInternal _RelationLane_default_instance_;
class RoutePoint;
class RoutePointDefaultTypeInternal;
extern RoutePointDefaultTypeInternal _RoutePoint_default_instance_;
class TrafficLight;
class TrafficLightDefaultTypeInternal;
extern TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
}  // namespace mapengine_msgs
namespace mapengine_msgs {

// ===================================================================

class BusinessArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.BusinessArea) */ {
 public:
  BusinessArea();
  virtual ~BusinessArea();

  BusinessArea(const BusinessArea& from);

  inline BusinessArea& operator=(const BusinessArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BusinessArea(BusinessArea&& from) noexcept
    : BusinessArea() {
    *this = ::std::move(from);
  }

  inline BusinessArea& operator=(BusinessArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BusinessArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BusinessArea* internal_default_instance() {
    return reinterpret_cast<const BusinessArea*>(
               &_BusinessArea_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BusinessArea* other);
  friend void swap(BusinessArea& a, BusinessArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BusinessArea* New() const PROTOBUF_FINAL { return New(NULL); }

  BusinessArea* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BusinessArea& from);
  void MergeFrom(const BusinessArea& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BusinessArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.BusinessArea)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsBusinessAreaImpl();
};
// -------------------------------------------------------------------

class MissionPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.MissionPoint) */ {
 public:
  MissionPoint();
  virtual ~MissionPoint();

  MissionPoint(const MissionPoint& from);

  inline MissionPoint& operator=(const MissionPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MissionPoint(MissionPoint&& from) noexcept
    : MissionPoint() {
    *this = ::std::move(from);
  }

  inline MissionPoint& operator=(MissionPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MissionPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MissionPoint* internal_default_instance() {
    return reinterpret_cast<const MissionPoint*>(
               &_MissionPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MissionPoint* other);
  friend void swap(MissionPoint& a, MissionPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MissionPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  MissionPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MissionPoint& from);
  void MergeFrom(const MissionPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MissionPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double xg = 1;
  void clear_xg();
  static const int kXgFieldNumber = 1;
  double xg() const;
  void set_xg(double value);

  // double yg = 2;
  void clear_yg();
  static const int kYgFieldNumber = 2;
  double yg() const;
  void set_yg(double value);

  // float heading = 3;
  void clear_heading();
  static const int kHeadingFieldNumber = 3;
  float heading() const;
  void set_heading(float value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.MissionPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double xg_;
  double yg_;
  float heading_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionPointImpl();
};
// -------------------------------------------------------------------

class MissionLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.MissionLine) */ {
 public:
  MissionLine();
  virtual ~MissionLine();

  MissionLine(const MissionLine& from);

  inline MissionLine& operator=(const MissionLine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MissionLine(MissionLine&& from) noexcept
    : MissionLine() {
    *this = ::std::move(from);
  }

  inline MissionLine& operator=(MissionLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MissionLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MissionLine* internal_default_instance() {
    return reinterpret_cast<const MissionLine*>(
               &_MissionLine_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(MissionLine* other);
  friend void swap(MissionLine& a, MissionLine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MissionLine* New() const PROTOBUF_FINAL { return New(NULL); }

  MissionLine* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MissionLine& from);
  void MergeFrom(const MissionLine& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MissionLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string line_id = 1;
  void clear_line_id();
  static const int kLineIdFieldNumber = 1;
  const ::std::string& line_id() const;
  void set_line_id(const ::std::string& value);
  #if LANG_CXX11
  void set_line_id(::std::string&& value);
  #endif
  void set_line_id(const char* value);
  void set_line_id(const char* value, size_t size);
  ::std::string* mutable_line_id();
  ::std::string* release_line_id();
  void set_allocated_line_id(::std::string* line_id);

  // int32 start_index = 2;
  void clear_start_index();
  static const int kStartIndexFieldNumber = 2;
  ::google::protobuf::int32 start_index() const;
  void set_start_index(::google::protobuf::int32 value);

  // int32 end_index = 3;
  void clear_end_index();
  static const int kEndIndexFieldNumber = 3;
  ::google::protobuf::int32 end_index() const;
  void set_end_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.MissionLine)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr line_id_;
  ::google::protobuf::int32 start_index_;
  ::google::protobuf::int32 end_index_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionLineImpl();
};
// -------------------------------------------------------------------

class MissionArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.MissionArea) */ {
 public:
  MissionArea();
  virtual ~MissionArea();

  MissionArea(const MissionArea& from);

  inline MissionArea& operator=(const MissionArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MissionArea(MissionArea&& from) noexcept
    : MissionArea() {
    *this = ::std::move(from);
  }

  inline MissionArea& operator=(MissionArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MissionArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MissionArea* internal_default_instance() {
    return reinterpret_cast<const MissionArea*>(
               &_MissionArea_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(MissionArea* other);
  friend void swap(MissionArea& a, MissionArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MissionArea* New() const PROTOBUF_FINAL { return New(NULL); }

  MissionArea* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MissionArea& from);
  void MergeFrom(const MissionArea& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MissionArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string area_id = 1;
  void clear_area_id();
  static const int kAreaIdFieldNumber = 1;
  const ::std::string& area_id() const;
  void set_area_id(const ::std::string& value);
  #if LANG_CXX11
  void set_area_id(::std::string&& value);
  #endif
  void set_area_id(const char* value);
  void set_area_id(const char* value, size_t size);
  ::std::string* mutable_area_id();
  ::std::string* release_area_id();
  void set_allocated_area_id(::std::string* area_id);

  // string line_id = 2;
  void clear_line_id();
  static const int kLineIdFieldNumber = 2;
  const ::std::string& line_id() const;
  void set_line_id(const ::std::string& value);
  #if LANG_CXX11
  void set_line_id(::std::string&& value);
  #endif
  void set_line_id(const char* value);
  void set_line_id(const char* value, size_t size);
  ::std::string* mutable_line_id();
  ::std::string* release_line_id();
  void set_allocated_line_id(::std::string* line_id);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.MissionArea)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr area_id_;
  ::google::protobuf::internal::ArenaStringPtr line_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionAreaImpl();
};
// -------------------------------------------------------------------

class MissionContent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.MissionContent) */ {
 public:
  MissionContent();
  virtual ~MissionContent();

  MissionContent(const MissionContent& from);

  inline MissionContent& operator=(const MissionContent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MissionContent(MissionContent&& from) noexcept
    : MissionContent() {
    *this = ::std::move(from);
  }

  inline MissionContent& operator=(MissionContent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MissionContent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MissionContent* internal_default_instance() {
    return reinterpret_cast<const MissionContent*>(
               &_MissionContent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(MissionContent* other);
  friend void swap(MissionContent& a, MissionContent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MissionContent* New() const PROTOBUF_FINAL { return New(NULL); }

  MissionContent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MissionContent& from);
  void MergeFrom(const MissionContent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MissionContent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mapengine_msgs.MissionPoint point = 1;
  bool has_point() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  const ::mapengine_msgs::MissionPoint& point() const;
  ::mapengine_msgs::MissionPoint* release_point();
  ::mapengine_msgs::MissionPoint* mutable_point();
  void set_allocated_point(::mapengine_msgs::MissionPoint* point);

  // .mapengine_msgs.MissionLine line = 2;
  bool has_line() const;
  void clear_line();
  static const int kLineFieldNumber = 2;
  const ::mapengine_msgs::MissionLine& line() const;
  ::mapengine_msgs::MissionLine* release_line();
  ::mapengine_msgs::MissionLine* mutable_line();
  void set_allocated_line(::mapengine_msgs::MissionLine* line);

  // .mapengine_msgs.MissionArea area = 3;
  bool has_area() const;
  void clear_area();
  static const int kAreaFieldNumber = 3;
  const ::mapengine_msgs::MissionArea& area() const;
  ::mapengine_msgs::MissionArea* release_area();
  ::mapengine_msgs::MissionArea* mutable_area();
  void set_allocated_area(::mapengine_msgs::MissionArea* area);

  // int32 type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 mission_id = 5;
  void clear_mission_id();
  static const int kMissionIdFieldNumber = 5;
  ::google::protobuf::int32 mission_id() const;
  void set_mission_id(::google::protobuf::int32 value);

  // bool is_stop = 6;
  void clear_is_stop();
  static const int kIsStopFieldNumber = 6;
  bool is_stop() const;
  void set_is_stop(bool value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.MissionContent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mapengine_msgs::MissionPoint* point_;
  ::mapengine_msgs::MissionLine* line_;
  ::mapengine_msgs::MissionArea* area_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 mission_id_;
  bool is_stop_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionContentImpl();
};
// -------------------------------------------------------------------

class RoutePoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.RoutePoint) */ {
 public:
  RoutePoint();
  virtual ~RoutePoint();

  RoutePoint(const RoutePoint& from);

  inline RoutePoint& operator=(const RoutePoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoutePoint(RoutePoint&& from) noexcept
    : RoutePoint() {
    *this = ::std::move(from);
  }

  inline RoutePoint& operator=(RoutePoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoutePoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutePoint* internal_default_instance() {
    return reinterpret_cast<const RoutePoint*>(
               &_RoutePoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(RoutePoint* other);
  friend void swap(RoutePoint& a, RoutePoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoutePoint* New() const PROTOBUF_FINAL { return New(NULL); }

  RoutePoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoutePoint& from);
  void MergeFrom(const RoutePoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoutePoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double xg = 1;
  void clear_xg();
  static const int kXgFieldNumber = 1;
  double xg() const;
  void set_xg(double value);

  // double yg = 2;
  void clear_yg();
  static const int kYgFieldNumber = 2;
  double yg() const;
  void set_yg(double value);

  // float heading = 3;
  void clear_heading();
  static const int kHeadingFieldNumber = 3;
  float heading() const;
  void set_heading(float value);

  // int32 length = 4;
  void clear_length();
  static const int kLengthFieldNumber = 4;
  ::google::protobuf::int32 length() const;
  void set_length(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.RoutePoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double xg_;
  double yg_;
  float heading_;
  ::google::protobuf::int32 length_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsRoutePointImpl();
};
// -------------------------------------------------------------------

class MissionRoute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.MissionRoute) */ {
 public:
  MissionRoute();
  virtual ~MissionRoute();

  MissionRoute(const MissionRoute& from);

  inline MissionRoute& operator=(const MissionRoute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MissionRoute(MissionRoute&& from) noexcept
    : MissionRoute() {
    *this = ::std::move(from);
  }

  inline MissionRoute& operator=(MissionRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MissionRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MissionRoute* internal_default_instance() {
    return reinterpret_cast<const MissionRoute*>(
               &_MissionRoute_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(MissionRoute* other);
  friend void swap(MissionRoute& a, MissionRoute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MissionRoute* New() const PROTOBUF_FINAL { return New(NULL); }

  MissionRoute* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MissionRoute& from);
  void MergeFrom(const MissionRoute& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MissionRoute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string global_road = 1;
  int global_road_size() const;
  void clear_global_road();
  static const int kGlobalRoadFieldNumber = 1;
  const ::std::string& global_road(int index) const;
  ::std::string* mutable_global_road(int index);
  void set_global_road(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_global_road(int index, ::std::string&& value);
  #endif
  void set_global_road(int index, const char* value);
  void set_global_road(int index, const char* value, size_t size);
  ::std::string* add_global_road();
  void add_global_road(const ::std::string& value);
  #if LANG_CXX11
  void add_global_road(::std::string&& value);
  #endif
  void add_global_road(const char* value);
  void add_global_road(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& global_road() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_global_road();

  // repeated .mapengine_msgs.RoutePoint global_path = 2;
  int global_path_size() const;
  void clear_global_path();
  static const int kGlobalPathFieldNumber = 2;
  const ::mapengine_msgs::RoutePoint& global_path(int index) const;
  ::mapengine_msgs::RoutePoint* mutable_global_path(int index);
  ::mapengine_msgs::RoutePoint* add_global_path();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::RoutePoint >*
      mutable_global_path();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::RoutePoint >&
      global_path() const;

  // float length = 3;
  void clear_length();
  static const int kLengthFieldNumber = 3;
  float length() const;
  void set_length(float value);

  // float dis_to_next_turn = 4;
  void clear_dis_to_next_turn();
  static const int kDisToNextTurnFieldNumber = 4;
  float dis_to_next_turn() const;
  void set_dis_to_next_turn(float value);

  // int32 next_turn_type = 5;
  void clear_next_turn_type();
  static const int kNextTurnTypeFieldNumber = 5;
  ::google::protobuf::int32 next_turn_type() const;
  void set_next_turn_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.MissionRoute)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> global_road_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::RoutePoint > global_path_;
  float length_;
  float dis_to_next_turn_;
  ::google::protobuf::int32 next_turn_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionRouteImpl();
};
// -------------------------------------------------------------------

class ImuInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.ImuInfo) */ {
 public:
  ImuInfo();
  virtual ~ImuInfo();

  ImuInfo(const ImuInfo& from);

  inline ImuInfo& operator=(const ImuInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImuInfo(ImuInfo&& from) noexcept
    : ImuInfo() {
    *this = ::std::move(from);
  }

  inline ImuInfo& operator=(ImuInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImuInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImuInfo* internal_default_instance() {
    return reinterpret_cast<const ImuInfo*>(
               &_ImuInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ImuInfo* other);
  friend void swap(ImuInfo& a, ImuInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImuInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ImuInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImuInfo& from);
  void MergeFrom(const ImuInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImuInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double time_stamp = 1;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  double time_stamp() const;
  void set_time_stamp(double value);

  // double xg = 2;
  void clear_xg();
  static const int kXgFieldNumber = 2;
  double xg() const;
  void set_xg(double value);

  // double yg = 3;
  void clear_yg();
  static const int kYgFieldNumber = 3;
  double yg() const;
  void set_yg(double value);

  // double yaw = 4;
  void clear_yaw();
  static const int kYawFieldNumber = 4;
  double yaw() const;
  void set_yaw(double value);

  // double velocity = 5;
  void clear_velocity();
  static const int kVelocityFieldNumber = 5;
  double velocity() const;
  void set_velocity(double value);

  // double vx = 6;
  void clear_vx();
  static const int kVxFieldNumber = 6;
  double vx() const;
  void set_vx(double value);

  // double vy = 7;
  void clear_vy();
  static const int kVyFieldNumber = 7;
  double vy() const;
  void set_vy(double value);

  // double loc_xg_dr = 8;
  void clear_loc_xg_dr();
  static const int kLocXgDrFieldNumber = 8;
  double loc_xg_dr() const;
  void set_loc_xg_dr(double value);

  // double loc_yg_dr = 9;
  void clear_loc_yg_dr();
  static const int kLocYgDrFieldNumber = 9;
  double loc_yg_dr() const;
  void set_loc_yg_dr(double value);

  // double loc_yaw_dr = 10;
  void clear_loc_yaw_dr();
  static const int kLocYawDrFieldNumber = 10;
  double loc_yaw_dr() const;
  void set_loc_yaw_dr(double value);

  // bool correction_flag = 11;
  void clear_correction_flag();
  static const int kCorrectionFlagFieldNumber = 11;
  bool correction_flag() const;
  void set_correction_flag(bool value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.ImuInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double time_stamp_;
  double xg_;
  double yg_;
  double yaw_;
  double velocity_;
  double vx_;
  double vy_;
  double loc_xg_dr_;
  double loc_yg_dr_;
  double loc_yaw_dr_;
  bool correction_flag_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsImuInfoImpl();
};
// -------------------------------------------------------------------

class TrafficLight : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.TrafficLight) */ {
 public:
  TrafficLight();
  virtual ~TrafficLight();

  TrafficLight(const TrafficLight& from);

  inline TrafficLight& operator=(const TrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficLight(TrafficLight&& from) noexcept
    : TrafficLight() {
    *this = ::std::move(from);
  }

  inline TrafficLight& operator=(TrafficLight&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficLight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLight* internal_default_instance() {
    return reinterpret_cast<const TrafficLight*>(
               &_TrafficLight_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(TrafficLight* other);
  friend void swap(TrafficLight& a, TrafficLight& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficLight* New() const PROTOBUF_FINAL { return New(NULL); }

  TrafficLight* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrafficLight& from);
  void MergeFrom(const TrafficLight& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrafficLight* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string same_light_ids = 9;
  int same_light_ids_size() const;
  void clear_same_light_ids();
  static const int kSameLightIdsFieldNumber = 9;
  const ::std::string& same_light_ids(int index) const;
  ::std::string* mutable_same_light_ids(int index);
  void set_same_light_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_same_light_ids(int index, ::std::string&& value);
  #endif
  void set_same_light_ids(int index, const char* value);
  void set_same_light_ids(int index, const char* value, size_t size);
  ::std::string* add_same_light_ids();
  void add_same_light_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_same_light_ids(::std::string&& value);
  #endif
  void add_same_light_ids(const char* value);
  void add_same_light_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& same_light_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_same_light_ids();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string lane_id = 8;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 8;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lane_id(::std::string&& value);
  #endif
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // bool key_light = 2;
  void clear_key_light();
  static const int kKeyLightFieldNumber = 2;
  bool key_light() const;
  void set_key_light(bool value);

  // int32 lon_index = 3;
  void clear_lon_index();
  static const int kLonIndexFieldNumber = 3;
  ::google::protobuf::int32 lon_index() const;
  void set_lon_index(::google::protobuf::int32 value);

  // float xg = 4;
  void clear_xg();
  static const int kXgFieldNumber = 4;
  float xg() const;
  void set_xg(float value);

  // float yg = 5;
  void clear_yg();
  static const int kYgFieldNumber = 5;
  float yg() const;
  void set_yg(float value);

  // float globalangle = 6;
  void clear_globalangle();
  static const int kGlobalangleFieldNumber = 6;
  float globalangle() const;
  void set_globalangle(float value);

  // float light_s = 7;
  void clear_light_s();
  static const int kLightSFieldNumber = 7;
  float light_s() const;
  void set_light_s(float value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.TrafficLight)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> same_light_ids_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  bool key_light_;
  ::google::protobuf::int32 lon_index_;
  float xg_;
  float yg_;
  float globalangle_;
  float light_s_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsTrafficLightImpl();
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const PROTOBUF_FINAL { return New(NULL); }

  Point* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // float angle = 3;
  void clear_angle();
  static const int kAngleFieldNumber = 3;
  float angle() const;
  void set_angle(float value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  float angle_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsPointImpl();
};
// -------------------------------------------------------------------

class ReferencePoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.ReferencePoint) */ {
 public:
  ReferencePoint();
  virtual ~ReferencePoint();

  ReferencePoint(const ReferencePoint& from);

  inline ReferencePoint& operator=(const ReferencePoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReferencePoint(ReferencePoint&& from) noexcept
    : ReferencePoint() {
    *this = ::std::move(from);
  }

  inline ReferencePoint& operator=(ReferencePoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReferencePoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReferencePoint* internal_default_instance() {
    return reinterpret_cast<const ReferencePoint*>(
               &_ReferencePoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(ReferencePoint* other);
  friend void swap(ReferencePoint& a, ReferencePoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReferencePoint* New() const PROTOBUF_FINAL { return New(NULL); }

  ReferencePoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReferencePoint& from);
  void MergeFrom(const ReferencePoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReferencePoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // double xg = 4;
  void clear_xg();
  static const int kXgFieldNumber = 4;
  double xg() const;
  void set_xg(double value);

  // float angle = 3;
  void clear_angle();
  static const int kAngleFieldNumber = 3;
  float angle() const;
  void set_angle(float value);

  // float angleglobal = 6;
  void clear_angleglobal();
  static const int kAngleglobalFieldNumber = 6;
  float angleglobal() const;
  void set_angleglobal(float value);

  // double yg = 5;
  void clear_yg();
  static const int kYgFieldNumber = 5;
  double yg() const;
  void set_yg(double value);

  // int64 index = 7;
  void clear_index();
  static const int kIndexFieldNumber = 7;
  ::google::protobuf::int64 index() const;
  void set_index(::google::protobuf::int64 value);

  // float length = 8;
  void clear_length();
  static const int kLengthFieldNumber = 8;
  float length() const;
  void set_length(float value);

  // float curvature = 9;
  void clear_curvature();
  static const int kCurvatureFieldNumber = 9;
  float curvature() const;
  void set_curvature(float value);

  // int32 direction = 10;
  void clear_direction();
  static const int kDirectionFieldNumber = 10;
  ::google::protobuf::int32 direction() const;
  void set_direction(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.ReferencePoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  double xg_;
  float angle_;
  float angleglobal_;
  double yg_;
  ::google::protobuf::int64 index_;
  float length_;
  float curvature_;
  ::google::protobuf::int32 direction_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsReferencePointImpl();
};
// -------------------------------------------------------------------

class AreaRange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.AreaRange) */ {
 public:
  AreaRange();
  virtual ~AreaRange();

  AreaRange(const AreaRange& from);

  inline AreaRange& operator=(const AreaRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AreaRange(AreaRange&& from) noexcept
    : AreaRange() {
    *this = ::std::move(from);
  }

  inline AreaRange& operator=(AreaRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AreaRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AreaRange* internal_default_instance() {
    return reinterpret_cast<const AreaRange*>(
               &_AreaRange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(AreaRange* other);
  friend void swap(AreaRange& a, AreaRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AreaRange* New() const PROTOBUF_FINAL { return New(NULL); }

  AreaRange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AreaRange& from);
  void MergeFrom(const AreaRange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AreaRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mapengine_msgs.Point area_points = 3;
  int area_points_size() const;
  void clear_area_points();
  static const int kAreaPointsFieldNumber = 3;
  const ::mapengine_msgs::Point& area_points(int index) const;
  ::mapengine_msgs::Point* mutable_area_points(int index);
  ::mapengine_msgs::Point* add_area_points();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::Point >*
      mutable_area_points();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::Point >&
      area_points() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.AreaRange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::Point > area_points_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsAreaRangeImpl();
};
// -------------------------------------------------------------------

class DisRange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.DisRange) */ {
 public:
  DisRange();
  virtual ~DisRange();

  DisRange(const DisRange& from);

  inline DisRange& operator=(const DisRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisRange(DisRange&& from) noexcept
    : DisRange() {
    *this = ::std::move(from);
  }

  inline DisRange& operator=(DisRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisRange* internal_default_instance() {
    return reinterpret_cast<const DisRange*>(
               &_DisRange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(DisRange* other);
  friend void swap(DisRange& a, DisRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisRange* New() const PROTOBUF_FINAL { return New(NULL); }

  DisRange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisRange& from);
  void MergeFrom(const DisRange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // float start_s = 2;
  void clear_start_s();
  static const int kStartSFieldNumber = 2;
  float start_s() const;
  void set_start_s(float value);

  // float end_s = 3;
  void clear_end_s();
  static const int kEndSFieldNumber = 3;
  float end_s() const;
  void set_end_s(float value);

  // float value = 4;
  void clear_value();
  static const int kValueFieldNumber = 4;
  float value() const;
  void set_value(float value);

  // int32 type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.DisRange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  float start_s_;
  float end_s_;
  float value_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsDisRangeImpl();
};
// -------------------------------------------------------------------

class FuncInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.FuncInfo) */ {
 public:
  FuncInfo();
  virtual ~FuncInfo();

  FuncInfo(const FuncInfo& from);

  inline FuncInfo& operator=(const FuncInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FuncInfo(FuncInfo&& from) noexcept
    : FuncInfo() {
    *this = ::std::move(from);
  }

  inline FuncInfo& operator=(FuncInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FuncInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FuncInfo* internal_default_instance() {
    return reinterpret_cast<const FuncInfo*>(
               &_FuncInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(FuncInfo* other);
  friend void swap(FuncInfo& a, FuncInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FuncInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FuncInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FuncInfo& from);
  void MergeFrom(const FuncInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FuncInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // float a = 2;
  void clear_a();
  static const int kAFieldNumber = 2;
  float a() const;
  void set_a(float value);

  // float b = 3;
  void clear_b();
  static const int kBFieldNumber = 3;
  float b() const;
  void set_b(float value);

  // float c = 4;
  void clear_c();
  static const int kCFieldNumber = 4;
  float c() const;
  void set_c(float value);

  // float start_x = 5;
  void clear_start_x();
  static const int kStartXFieldNumber = 5;
  float start_x() const;
  void set_start_x(float value);

  // float end_x = 6;
  void clear_end_x();
  static const int kEndXFieldNumber = 6;
  float end_x() const;
  void set_end_x(float value);

  // int32 life_time = 7;
  void clear_life_time();
  static const int kLifeTimeFieldNumber = 7;
  ::google::protobuf::int32 life_time() const;
  void set_life_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.FuncInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 key_;
  float a_;
  float b_;
  float c_;
  float start_x_;
  float end_x_;
  ::google::protobuf::int32 life_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsFuncInfoImpl();
};
// -------------------------------------------------------------------

class RelationLane : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.RelationLane) */ {
 public:
  RelationLane();
  virtual ~RelationLane();

  RelationLane(const RelationLane& from);

  inline RelationLane& operator=(const RelationLane& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RelationLane(RelationLane&& from) noexcept
    : RelationLane() {
    *this = ::std::move(from);
  }

  inline RelationLane& operator=(RelationLane&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RelationLane& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelationLane* internal_default_instance() {
    return reinterpret_cast<const RelationLane*>(
               &_RelationLane_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(RelationLane* other);
  friend void swap(RelationLane& a, RelationLane& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RelationLane* New() const PROTOBUF_FINAL { return New(NULL); }

  RelationLane* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RelationLane& from);
  void MergeFrom(const RelationLane& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RelationLane* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 confluence_index = 7;
  int confluence_index_size() const;
  void clear_confluence_index();
  static const int kConfluenceIndexFieldNumber = 7;
  ::google::protobuf::int32 confluence_index(int index) const;
  void set_confluence_index(int index, ::google::protobuf::int32 value);
  void add_confluence_index(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      confluence_index() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_confluence_index();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // float start_s = 2;
  void clear_start_s();
  static const int kStartSFieldNumber = 2;
  float start_s() const;
  void set_start_s(float value);

  // float end_s = 3;
  void clear_end_s();
  static const int kEndSFieldNumber = 3;
  float end_s() const;
  void set_end_s(float value);

  // float relation_start_s = 4;
  void clear_relation_start_s();
  static const int kRelationStartSFieldNumber = 4;
  float relation_start_s() const;
  void set_relation_start_s(float value);

  // float relation_end_s = 5;
  void clear_relation_end_s();
  static const int kRelationEndSFieldNumber = 5;
  float relation_end_s() const;
  void set_relation_end_s(float value);

  // int32 lon_index = 6;
  void clear_lon_index();
  static const int kLonIndexFieldNumber = 6;
  ::google::protobuf::int32 lon_index() const;
  void set_lon_index(::google::protobuf::int32 value);

  // int32 type = 8;
  void clear_type();
  static const int kTypeFieldNumber = 8;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.RelationLane)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > confluence_index_;
  mutable int _confluence_index_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  float start_s_;
  float end_s_;
  float relation_start_s_;
  float relation_end_s_;
  ::google::protobuf::int32 lon_index_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsRelationLaneImpl();
};
// -------------------------------------------------------------------

class Line : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.Line) */ {
 public:
  Line();
  virtual ~Line();

  Line(const Line& from);

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Line(Line&& from) noexcept
    : Line() {
    *this = ::std::move(from);
  }

  inline Line& operator=(Line&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Line& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Line* internal_default_instance() {
    return reinterpret_cast<const Line*>(
               &_Line_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(Line* other);
  friend void swap(Line& a, Line& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Line* New() const PROTOBUF_FINAL { return New(NULL); }

  Line* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Line& from);
  void MergeFrom(const Line& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Line* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string lane_ids = 8;
  int lane_ids_size() const;
  void clear_lane_ids();
  static const int kLaneIdsFieldNumber = 8;
  const ::std::string& lane_ids(int index) const;
  ::std::string* mutable_lane_ids(int index);
  void set_lane_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_lane_ids(int index, ::std::string&& value);
  #endif
  void set_lane_ids(int index, const char* value);
  void set_lane_ids(int index, const char* value, size_t size);
  ::std::string* add_lane_ids();
  void add_lane_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_lane_ids(::std::string&& value);
  #endif
  void add_lane_ids(const char* value);
  void add_lane_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& lane_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_lane_ids();

  // repeated .mapengine_msgs.RelationLane relation_lanes = 9;
  int relation_lanes_size() const;
  void clear_relation_lanes();
  static const int kRelationLanesFieldNumber = 9;
  const ::mapengine_msgs::RelationLane& relation_lanes(int index) const;
  ::mapengine_msgs::RelationLane* mutable_relation_lanes(int index);
  ::mapengine_msgs::RelationLane* add_relation_lanes();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::RelationLane >*
      mutable_relation_lanes();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::RelationLane >&
      relation_lanes() const;

  // repeated .mapengine_msgs.DisRange lane_turns = 10;
  int lane_turns_size() const;
  void clear_lane_turns();
  static const int kLaneTurnsFieldNumber = 10;
  const ::mapengine_msgs::DisRange& lane_turns(int index) const;
  ::mapengine_msgs::DisRange* mutable_lane_turns(int index);
  ::mapengine_msgs::DisRange* add_lane_turns();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
      mutable_lane_turns();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
      lane_turns() const;

  // repeated .mapengine_msgs.DisRange lane_types = 11;
  int lane_types_size() const;
  void clear_lane_types();
  static const int kLaneTypesFieldNumber = 11;
  const ::mapengine_msgs::DisRange& lane_types(int index) const;
  ::mapengine_msgs::DisRange* mutable_lane_types(int index);
  ::mapengine_msgs::DisRange* add_lane_types();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
      mutable_lane_types();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
      lane_types() const;

  // repeated .mapengine_msgs.DisRange left_bd_types = 12;
  int left_bd_types_size() const;
  void clear_left_bd_types();
  static const int kLeftBdTypesFieldNumber = 12;
  const ::mapengine_msgs::DisRange& left_bd_types(int index) const;
  ::mapengine_msgs::DisRange* mutable_left_bd_types(int index);
  ::mapengine_msgs::DisRange* add_left_bd_types();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
      mutable_left_bd_types();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
      left_bd_types() const;

  // repeated .mapengine_msgs.DisRange right_bd_types = 13;
  int right_bd_types_size() const;
  void clear_right_bd_types();
  static const int kRightBdTypesFieldNumber = 13;
  const ::mapengine_msgs::DisRange& right_bd_types(int index) const;
  ::mapengine_msgs::DisRange* mutable_right_bd_types(int index);
  ::mapengine_msgs::DisRange* add_right_bd_types();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
      mutable_right_bd_types();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
      right_bd_types() const;

  // repeated .mapengine_msgs.DisRange dis_to_ends = 14;
  int dis_to_ends_size() const;
  void clear_dis_to_ends();
  static const int kDisToEndsFieldNumber = 14;
  const ::mapengine_msgs::DisRange& dis_to_ends(int index) const;
  ::mapengine_msgs::DisRange* mutable_dis_to_ends(int index);
  ::mapengine_msgs::DisRange* add_dis_to_ends();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
      mutable_dis_to_ends();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
      dis_to_ends() const;

  // repeated .mapengine_msgs.DisRange expected_speeds = 15;
  int expected_speeds_size() const;
  void clear_expected_speeds();
  static const int kExpectedSpeedsFieldNumber = 15;
  const ::mapengine_msgs::DisRange& expected_speeds(int index) const;
  ::mapengine_msgs::DisRange* mutable_expected_speeds(int index);
  ::mapengine_msgs::DisRange* add_expected_speeds();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
      mutable_expected_speeds();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
      expected_speeds() const;

  // repeated .mapengine_msgs.DisRange left_passable_distances = 16;
  int left_passable_distances_size() const;
  void clear_left_passable_distances();
  static const int kLeftPassableDistancesFieldNumber = 16;
  const ::mapengine_msgs::DisRange& left_passable_distances(int index) const;
  ::mapengine_msgs::DisRange* mutable_left_passable_distances(int index);
  ::mapengine_msgs::DisRange* add_left_passable_distances();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
      mutable_left_passable_distances();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
      left_passable_distances() const;

  // repeated .mapengine_msgs.DisRange right_passable_distances = 17;
  int right_passable_distances_size() const;
  void clear_right_passable_distances();
  static const int kRightPassableDistancesFieldNumber = 17;
  const ::mapengine_msgs::DisRange& right_passable_distances(int index) const;
  ::mapengine_msgs::DisRange* mutable_right_passable_distances(int index);
  ::mapengine_msgs::DisRange* add_right_passable_distances();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
      mutable_right_passable_distances();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
      right_passable_distances() const;

  // repeated .mapengine_msgs.DisRange dis_to_speed_bumps = 18;
  int dis_to_speed_bumps_size() const;
  void clear_dis_to_speed_bumps();
  static const int kDisToSpeedBumpsFieldNumber = 18;
  const ::mapengine_msgs::DisRange& dis_to_speed_bumps(int index) const;
  ::mapengine_msgs::DisRange* mutable_dis_to_speed_bumps(int index);
  ::mapengine_msgs::DisRange* add_dis_to_speed_bumps();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
      mutable_dis_to_speed_bumps();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
      dis_to_speed_bumps() const;

  // repeated .mapengine_msgs.DisRange dis_to_forbid_areas = 19;
  int dis_to_forbid_areas_size() const;
  void clear_dis_to_forbid_areas();
  static const int kDisToForbidAreasFieldNumber = 19;
  const ::mapengine_msgs::DisRange& dis_to_forbid_areas(int index) const;
  ::mapengine_msgs::DisRange* mutable_dis_to_forbid_areas(int index);
  ::mapengine_msgs::DisRange* add_dis_to_forbid_areas();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
      mutable_dis_to_forbid_areas();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
      dis_to_forbid_areas() const;

  // repeated .mapengine_msgs.DisRange dis_to_junctions = 20;
  int dis_to_junctions_size() const;
  void clear_dis_to_junctions();
  static const int kDisToJunctionsFieldNumber = 20;
  const ::mapengine_msgs::DisRange& dis_to_junctions(int index) const;
  ::mapengine_msgs::DisRange* mutable_dis_to_junctions(int index);
  ::mapengine_msgs::DisRange* add_dis_to_junctions();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
      mutable_dis_to_junctions();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
      dis_to_junctions() const;

  // repeated .mapengine_msgs.DisRange dis_to_crosswalks = 21;
  int dis_to_crosswalks_size() const;
  void clear_dis_to_crosswalks();
  static const int kDisToCrosswalksFieldNumber = 21;
  const ::mapengine_msgs::DisRange& dis_to_crosswalks(int index) const;
  ::mapengine_msgs::DisRange* mutable_dis_to_crosswalks(int index);
  ::mapengine_msgs::DisRange* add_dis_to_crosswalks();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
      mutable_dis_to_crosswalks();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
      dis_to_crosswalks() const;

  // repeated .mapengine_msgs.DisRange dis_to_yield_areas = 22;
  int dis_to_yield_areas_size() const;
  void clear_dis_to_yield_areas();
  static const int kDisToYieldAreasFieldNumber = 22;
  const ::mapengine_msgs::DisRange& dis_to_yield_areas(int index) const;
  ::mapengine_msgs::DisRange* mutable_dis_to_yield_areas(int index);
  ::mapengine_msgs::DisRange* add_dis_to_yield_areas();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
      mutable_dis_to_yield_areas();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
      dis_to_yield_areas() const;

  // repeated .mapengine_msgs.DisRange dis_to_stop_areas = 23;
  int dis_to_stop_areas_size() const;
  void clear_dis_to_stop_areas();
  static const int kDisToStopAreasFieldNumber = 23;
  const ::mapengine_msgs::DisRange& dis_to_stop_areas(int index) const;
  ::mapengine_msgs::DisRange* mutable_dis_to_stop_areas(int index);
  ::mapengine_msgs::DisRange* add_dis_to_stop_areas();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
      mutable_dis_to_stop_areas();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
      dis_to_stop_areas() const;

  // repeated .mapengine_msgs.AreaRange isolationbelts = 24;
  int isolationbelts_size() const;
  void clear_isolationbelts();
  static const int kIsolationbeltsFieldNumber = 24;
  const ::mapengine_msgs::AreaRange& isolationbelts(int index) const;
  ::mapengine_msgs::AreaRange* mutable_isolationbelts(int index);
  ::mapengine_msgs::AreaRange* add_isolationbelts();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::AreaRange >*
      mutable_isolationbelts();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::AreaRange >&
      isolationbelts() const;

  // repeated .mapengine_msgs.TrafficLight trafficlights = 29;
  int trafficlights_size() const;
  void clear_trafficlights();
  static const int kTrafficlightsFieldNumber = 29;
  const ::mapengine_msgs::TrafficLight& trafficlights(int index) const;
  ::mapengine_msgs::TrafficLight* mutable_trafficlights(int index);
  ::mapengine_msgs::TrafficLight* add_trafficlights();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::TrafficLight >*
      mutable_trafficlights();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::TrafficLight >&
      trafficlights() const;

  // repeated .mapengine_msgs.ReferencePoint map_points = 30;
  int map_points_size() const;
  void clear_map_points();
  static const int kMapPointsFieldNumber = 30;
  const ::mapengine_msgs::ReferencePoint& map_points(int index) const;
  ::mapengine_msgs::ReferencePoint* mutable_map_points(int index);
  ::mapengine_msgs::ReferencePoint* add_map_points();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::ReferencePoint >*
      mutable_map_points();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::ReferencePoint >&
      map_points() const;

  // repeated .mapengine_msgs.ReferencePoint left_boundary = 31;
  int left_boundary_size() const;
  void clear_left_boundary();
  static const int kLeftBoundaryFieldNumber = 31;
  const ::mapengine_msgs::ReferencePoint& left_boundary(int index) const;
  ::mapengine_msgs::ReferencePoint* mutable_left_boundary(int index);
  ::mapengine_msgs::ReferencePoint* add_left_boundary();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::ReferencePoint >*
      mutable_left_boundary();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::ReferencePoint >&
      left_boundary() const;

  // repeated .mapengine_msgs.ReferencePoint right_boundary = 32;
  int right_boundary_size() const;
  void clear_right_boundary();
  static const int kRightBoundaryFieldNumber = 32;
  const ::mapengine_msgs::ReferencePoint& right_boundary(int index) const;
  ::mapengine_msgs::ReferencePoint* mutable_right_boundary(int index);
  ::mapengine_msgs::ReferencePoint* add_right_boundary();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::ReferencePoint >*
      mutable_right_boundary();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::ReferencePoint >&
      right_boundary() const;

  // int32 line_direction = 1;
  void clear_line_direction();
  static const int kLineDirectionFieldNumber = 1;
  ::google::protobuf::int32 line_direction() const;
  void set_line_direction(::google::protobuf::int32 value);

  // float dis_to_line = 2;
  void clear_dis_to_line();
  static const int kDisToLineFieldNumber = 2;
  float dis_to_line() const;
  void set_dis_to_line(float value);

  // float dis_to_diversion = 3;
  void clear_dis_to_diversion();
  static const int kDisToDiversionFieldNumber = 3;
  float dis_to_diversion() const;
  void set_dis_to_diversion(float value);

  // float dis_to_merge = 4;
  void clear_dis_to_merge();
  static const int kDisToMergeFieldNumber = 4;
  float dis_to_merge() const;
  void set_dis_to_merge(float value);

  // float first_lane_start_s = 5;
  void clear_first_lane_start_s();
  static const int kFirstLaneStartSFieldNumber = 5;
  float first_lane_start_s() const;
  void set_first_lane_start_s(float value);

  // float dis_to_driving = 6;
  void clear_dis_to_driving();
  static const int kDisToDrivingFieldNumber = 6;
  float dis_to_driving() const;
  void set_dis_to_driving(float value);

  // bool able_driving = 7;
  void clear_able_driving();
  static const int kAbleDrivingFieldNumber = 7;
  bool able_driving() const;
  void set_able_driving(bool value);

  // bool contain_light_junction = 27;
  void clear_contain_light_junction();
  static const int kContainLightJunctionFieldNumber = 27;
  bool contain_light_junction() const;
  void set_contain_light_junction(bool value);

  // float laneside_left = 25;
  void clear_laneside_left();
  static const int kLanesideLeftFieldNumber = 25;
  float laneside_left() const;
  void set_laneside_left(float value);

  // float laneside_right = 26;
  void clear_laneside_right();
  static const int kLanesideRightFieldNumber = 26;
  float laneside_right() const;
  void set_laneside_right(float value);

  // float contain_light_s = 28;
  void clear_contain_light_s();
  static const int kContainLightSFieldNumber = 28;
  float contain_light_s() const;
  void set_contain_light_s(float value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.Line)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> lane_ids_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::RelationLane > relation_lanes_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange > lane_turns_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange > lane_types_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange > left_bd_types_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange > right_bd_types_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange > dis_to_ends_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange > expected_speeds_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange > left_passable_distances_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange > right_passable_distances_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange > dis_to_speed_bumps_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange > dis_to_forbid_areas_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange > dis_to_junctions_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange > dis_to_crosswalks_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange > dis_to_yield_areas_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange > dis_to_stop_areas_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::AreaRange > isolationbelts_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::TrafficLight > trafficlights_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::ReferencePoint > map_points_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::ReferencePoint > left_boundary_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::ReferencePoint > right_boundary_;
  ::google::protobuf::int32 line_direction_;
  float dis_to_line_;
  float dis_to_diversion_;
  float dis_to_merge_;
  float first_lane_start_s_;
  float dis_to_driving_;
  bool able_driving_;
  bool contain_light_junction_;
  float laneside_left_;
  float laneside_right_;
  float contain_light_s_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsLineImpl();
};
// -------------------------------------------------------------------

class LineList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.LineList) */ {
 public:
  LineList();
  virtual ~LineList();

  LineList(const LineList& from);

  inline LineList& operator=(const LineList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LineList(LineList&& from) noexcept
    : LineList() {
    *this = ::std::move(from);
  }

  inline LineList& operator=(LineList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LineList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LineList* internal_default_instance() {
    return reinterpret_cast<const LineList*>(
               &_LineList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(LineList* other);
  friend void swap(LineList& a, LineList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LineList* New() const PROTOBUF_FINAL { return New(NULL); }

  LineList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LineList& from);
  void MergeFrom(const LineList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LineList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mapengine_msgs.Line backlines = 2;
  int backlines_size() const;
  void clear_backlines();
  static const int kBacklinesFieldNumber = 2;
  const ::mapengine_msgs::Line& backlines(int index) const;
  ::mapengine_msgs::Line* mutable_backlines(int index);
  ::mapengine_msgs::Line* add_backlines();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::Line >*
      mutable_backlines();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::Line >&
      backlines() const;

  // .mapengine_msgs.Line frontline = 1;
  bool has_frontline() const;
  void clear_frontline();
  static const int kFrontlineFieldNumber = 1;
  const ::mapengine_msgs::Line& frontline() const;
  ::mapengine_msgs::Line* release_frontline();
  ::mapengine_msgs::Line* mutable_frontline();
  void set_allocated_frontline(::mapengine_msgs::Line* frontline);

  // double dis_lc = 3;
  void clear_dis_lc();
  static const int kDisLcFieldNumber = 3;
  double dis_lc() const;
  void set_dis_lc(double value);

  // int32 first_lc_time = 4;
  void clear_first_lc_time();
  static const int kFirstLcTimeFieldNumber = 4;
  ::google::protobuf::int32 first_lc_time() const;
  void set_first_lc_time(::google::protobuf::int32 value);

  // int32 first_lc_index = 5;
  void clear_first_lc_index();
  static const int kFirstLcIndexFieldNumber = 5;
  ::google::protobuf::int32 first_lc_index() const;
  void set_first_lc_index(::google::protobuf::int32 value);

  // int32 all_lc_time = 6;
  void clear_all_lc_time();
  static const int kAllLcTimeFieldNumber = 6;
  ::google::protobuf::int32 all_lc_time() const;
  void set_all_lc_time(::google::protobuf::int32 value);

  // int32 global_cost = 7;
  void clear_global_cost();
  static const int kGlobalCostFieldNumber = 7;
  ::google::protobuf::int32 global_cost() const;
  void set_global_cost(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.LineList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::Line > backlines_;
  ::mapengine_msgs::Line* frontline_;
  double dis_lc_;
  ::google::protobuf::int32 first_lc_time_;
  ::google::protobuf::int32 first_lc_index_;
  ::google::protobuf::int32 all_lc_time_;
  ::google::protobuf::int32 global_cost_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsLineListImpl();
};
// -------------------------------------------------------------------

class MapInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.MapInfo) */ {
 public:
  MapInfo();
  virtual ~MapInfo();

  MapInfo(const MapInfo& from);

  inline MapInfo& operator=(const MapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapInfo(MapInfo&& from) noexcept
    : MapInfo() {
    *this = ::std::move(from);
  }

  inline MapInfo& operator=(MapInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapInfo* internal_default_instance() {
    return reinterpret_cast<const MapInfo*>(
               &_MapInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(MapInfo* other);
  friend void swap(MapInfo& a, MapInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  MapInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapInfo& from);
  void MergeFrom(const MapInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mapengine_msgs.LineList alllinelists = 2;
  int alllinelists_size() const;
  void clear_alllinelists();
  static const int kAlllinelistsFieldNumber = 2;
  const ::mapengine_msgs::LineList& alllinelists(int index) const;
  ::mapengine_msgs::LineList* mutable_alllinelists(int index);
  ::mapengine_msgs::LineList* add_alllinelists();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::LineList >*
      mutable_alllinelists();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::LineList >&
      alllinelists() const;

  // .mapengine_msgs.LineList revlinelist = 3;
  bool has_revlinelist() const;
  void clear_revlinelist();
  static const int kRevlinelistFieldNumber = 3;
  const ::mapengine_msgs::LineList& revlinelist() const;
  ::mapengine_msgs::LineList* release_revlinelist();
  ::mapengine_msgs::LineList* mutable_revlinelist();
  void set_allocated_revlinelist(::mapengine_msgs::LineList* revlinelist);

  // .mapengine_msgs.Point startpoint = 4;
  bool has_startpoint() const;
  void clear_startpoint();
  static const int kStartpointFieldNumber = 4;
  const ::mapengine_msgs::Point& startpoint() const;
  ::mapengine_msgs::Point* release_startpoint();
  ::mapengine_msgs::Point* mutable_startpoint();
  void set_allocated_startpoint(::mapengine_msgs::Point* startpoint);

  // .mapengine_msgs.Point endpoint = 5;
  bool has_endpoint() const;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 5;
  const ::mapengine_msgs::Point& endpoint() const;
  ::mapengine_msgs::Point* release_endpoint();
  ::mapengine_msgs::Point* mutable_endpoint();
  void set_allocated_endpoint(::mapengine_msgs::Point* endpoint);

  // int32 current_line_index = 1;
  void clear_current_line_index();
  static const int kCurrentLineIndexFieldNumber = 1;
  ::google::protobuf::int32 current_line_index() const;
  void set_current_line_index(::google::protobuf::int32 value);

  // float dis2endpoint = 6;
  void clear_dis2endpoint();
  static const int kDis2EndpointFieldNumber = 6;
  float dis2endpoint() const;
  void set_dis2endpoint(float value);

  // bool change_task = 7;
  void clear_change_task();
  static const int kChangeTaskFieldNumber = 7;
  bool change_task() const;
  void set_change_task(bool value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.MapInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::LineList > alllinelists_;
  ::mapengine_msgs::LineList* revlinelist_;
  ::mapengine_msgs::Point* startpoint_;
  ::mapengine_msgs::Point* endpoint_;
  ::google::protobuf::int32 current_line_index_;
  float dis2endpoint_;
  bool change_task_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMapInfoImpl();
};
// -------------------------------------------------------------------

class GlobalPathCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.GlobalPathCommand) */ {
 public:
  GlobalPathCommand();
  virtual ~GlobalPathCommand();

  GlobalPathCommand(const GlobalPathCommand& from);

  inline GlobalPathCommand& operator=(const GlobalPathCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlobalPathCommand(GlobalPathCommand&& from) noexcept
    : GlobalPathCommand() {
    *this = ::std::move(from);
  }

  inline GlobalPathCommand& operator=(GlobalPathCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalPathCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalPathCommand* internal_default_instance() {
    return reinterpret_cast<const GlobalPathCommand*>(
               &_GlobalPathCommand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(GlobalPathCommand* other);
  friend void swap(GlobalPathCommand& a, GlobalPathCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalPathCommand* New() const PROTOBUF_FINAL { return New(NULL); }

  GlobalPathCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GlobalPathCommand& from);
  void MergeFrom(const GlobalPathCommand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GlobalPathCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mapengine_msgs.MissionContent mission_request_vec = 3;
  int mission_request_vec_size() const;
  void clear_mission_request_vec();
  static const int kMissionRequestVecFieldNumber = 3;
  const ::mapengine_msgs::MissionContent& mission_request_vec(int index) const;
  ::mapengine_msgs::MissionContent* mutable_mission_request_vec(int index);
  ::mapengine_msgs::MissionContent* add_mission_request_vec();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::MissionContent >*
      mutable_mission_request_vec();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::MissionContent >&
      mission_request_vec() const;

  // .common_msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::common_msgs::Header& header() const;
  ::common_msgs::Header* release_header();
  ::common_msgs::Header* mutable_header();
  void set_allocated_header(::common_msgs::Header* header);

  // int32 mission_command = 2;
  void clear_mission_command();
  static const int kMissionCommandFieldNumber = 2;
  ::google::protobuf::int32 mission_command() const;
  void set_mission_command(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.GlobalPathCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::MissionContent > mission_request_vec_;
  ::common_msgs::Header* header_;
  ::google::protobuf::int32 mission_command_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsGlobalPathCommandImpl();
};
// -------------------------------------------------------------------

class GlobalPathResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.GlobalPathResult) */ {
 public:
  GlobalPathResult();
  virtual ~GlobalPathResult();

  GlobalPathResult(const GlobalPathResult& from);

  inline GlobalPathResult& operator=(const GlobalPathResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlobalPathResult(GlobalPathResult&& from) noexcept
    : GlobalPathResult() {
    *this = ::std::move(from);
  }

  inline GlobalPathResult& operator=(GlobalPathResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalPathResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalPathResult* internal_default_instance() {
    return reinterpret_cast<const GlobalPathResult*>(
               &_GlobalPathResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(GlobalPathResult* other);
  friend void swap(GlobalPathResult& a, GlobalPathResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalPathResult* New() const PROTOBUF_FINAL { return New(NULL); }

  GlobalPathResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GlobalPathResult& from);
  void MergeFrom(const GlobalPathResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GlobalPathResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mapengine_msgs.MissionContent mission_response_vec = 3;
  int mission_response_vec_size() const;
  void clear_mission_response_vec();
  static const int kMissionResponseVecFieldNumber = 3;
  const ::mapengine_msgs::MissionContent& mission_response_vec(int index) const;
  ::mapengine_msgs::MissionContent* mutable_mission_response_vec(int index);
  ::mapengine_msgs::MissionContent* add_mission_response_vec();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::MissionContent >*
      mutable_mission_response_vec();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::MissionContent >&
      mission_response_vec() const;

  // repeated .mapengine_msgs.MissionRoute mission_route_vec = 4;
  int mission_route_vec_size() const;
  void clear_mission_route_vec();
  static const int kMissionRouteVecFieldNumber = 4;
  const ::mapengine_msgs::MissionRoute& mission_route_vec(int index) const;
  ::mapengine_msgs::MissionRoute* mutable_mission_route_vec(int index);
  ::mapengine_msgs::MissionRoute* add_mission_route_vec();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::MissionRoute >*
      mutable_mission_route_vec();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::MissionRoute >&
      mission_route_vec() const;

  // .common_msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::common_msgs::Header& header() const;
  ::common_msgs::Header* release_header();
  ::common_msgs::Header* mutable_header();
  void set_allocated_header(::common_msgs::Header* header);

  // int32 result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.GlobalPathResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::MissionContent > mission_response_vec_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::MissionRoute > mission_route_vec_;
  ::common_msgs::Header* header_;
  ::google::protobuf::int32 result_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsGlobalPathResultImpl();
};
// -------------------------------------------------------------------

class NavigationCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.NavigationCommand) */ {
 public:
  NavigationCommand();
  virtual ~NavigationCommand();

  NavigationCommand(const NavigationCommand& from);

  inline NavigationCommand& operator=(const NavigationCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NavigationCommand(NavigationCommand&& from) noexcept
    : NavigationCommand() {
    *this = ::std::move(from);
  }

  inline NavigationCommand& operator=(NavigationCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NavigationCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationCommand* internal_default_instance() {
    return reinterpret_cast<const NavigationCommand*>(
               &_NavigationCommand_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(NavigationCommand* other);
  friend void swap(NavigationCommand& a, NavigationCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NavigationCommand* New() const PROTOBUF_FINAL { return New(NULL); }

  NavigationCommand* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NavigationCommand& from);
  void MergeFrom(const NavigationCommand& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NavigationCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .mapengine_msgs.MissionContent content = 3;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::mapengine_msgs::MissionContent& content() const;
  ::mapengine_msgs::MissionContent* release_content();
  ::mapengine_msgs::MissionContent* mutable_content();
  void set_allocated_content(::mapengine_msgs::MissionContent* content);

  // int32 mission_id = 1;
  void clear_mission_id();
  static const int kMissionIdFieldNumber = 1;
  ::google::protobuf::int32 mission_id() const;
  void set_mission_id(::google::protobuf::int32 value);

  // int32 command = 2;
  void clear_command();
  static const int kCommandFieldNumber = 2;
  ::google::protobuf::int32 command() const;
  void set_command(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.NavigationCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::mapengine_msgs::MissionContent* content_;
  ::google::protobuf::int32 mission_id_;
  ::google::protobuf::int32 command_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsNavigationCommandImpl();
};
// -------------------------------------------------------------------

class NavigationResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.NavigationResult) */ {
 public:
  NavigationResult();
  virtual ~NavigationResult();

  NavigationResult(const NavigationResult& from);

  inline NavigationResult& operator=(const NavigationResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NavigationResult(NavigationResult&& from) noexcept
    : NavigationResult() {
    *this = ::std::move(from);
  }

  inline NavigationResult& operator=(NavigationResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NavigationResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationResult* internal_default_instance() {
    return reinterpret_cast<const NavigationResult*>(
               &_NavigationResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(NavigationResult* other);
  friend void swap(NavigationResult& a, NavigationResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NavigationResult* New() const PROTOBUF_FINAL { return New(NULL); }

  NavigationResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NavigationResult& from);
  void MergeFrom(const NavigationResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NavigationResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 cur_mission_id = 1;
  void clear_cur_mission_id();
  static const int kCurMissionIdFieldNumber = 1;
  ::google::protobuf::int32 cur_mission_id() const;
  void set_cur_mission_id(::google::protobuf::int32 value);

  // int32 result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.NavigationResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 cur_mission_id_;
  ::google::protobuf::int32 result_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsNavigationResultImpl();
};
// -------------------------------------------------------------------

class Navigation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.Navigation) */ {
 public:
  Navigation();
  virtual ~Navigation();

  Navigation(const Navigation& from);

  inline Navigation& operator=(const Navigation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Navigation(Navigation&& from) noexcept
    : Navigation() {
    *this = ::std::move(from);
  }

  inline Navigation& operator=(Navigation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Navigation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Navigation* internal_default_instance() {
    return reinterpret_cast<const Navigation*>(
               &_Navigation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(Navigation* other);
  friend void swap(Navigation& a, Navigation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Navigation* New() const PROTOBUF_FINAL { return New(NULL); }

  Navigation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Navigation& from);
  void MergeFrom(const Navigation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Navigation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mapengine_msgs.FuncInfo last_vision_info = 5;
  int last_vision_info_size() const;
  void clear_last_vision_info();
  static const int kLastVisionInfoFieldNumber = 5;
  const ::mapengine_msgs::FuncInfo& last_vision_info(int index) const;
  ::mapengine_msgs::FuncInfo* mutable_last_vision_info(int index);
  ::mapengine_msgs::FuncInfo* add_last_vision_info();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::FuncInfo >*
      mutable_last_vision_info();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::FuncInfo >&
      last_vision_info() const;

  // repeated .mapengine_msgs.FuncInfo vision_info = 6;
  int vision_info_size() const;
  void clear_vision_info();
  static const int kVisionInfoFieldNumber = 6;
  const ::mapengine_msgs::FuncInfo& vision_info(int index) const;
  ::mapengine_msgs::FuncInfo* mutable_vision_info(int index);
  ::mapengine_msgs::FuncInfo* add_vision_info();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::FuncInfo >*
      mutable_vision_info();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::FuncInfo >&
      vision_info() const;

  // .common_msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::common_msgs::Header& header() const;
  ::common_msgs::Header* release_header();
  ::common_msgs::Header* mutable_header();
  void set_allocated_header(::common_msgs::Header* header);

  // .mapengine_msgs.MapInfo map_info = 7;
  bool has_map_info() const;
  void clear_map_info();
  static const int kMapInfoFieldNumber = 7;
  const ::mapengine_msgs::MapInfo& map_info() const;
  ::mapengine_msgs::MapInfo* release_map_info();
  ::mapengine_msgs::MapInfo* mutable_map_info();
  void set_allocated_map_info(::mapengine_msgs::MapInfo* map_info);

  // .mapengine_msgs.ImuInfo last_imu_data = 8;
  bool has_last_imu_data() const;
  void clear_last_imu_data();
  static const int kLastImuDataFieldNumber = 8;
  const ::mapengine_msgs::ImuInfo& last_imu_data() const;
  ::mapengine_msgs::ImuInfo* release_last_imu_data();
  ::mapengine_msgs::ImuInfo* mutable_last_imu_data();
  void set_allocated_last_imu_data(::mapengine_msgs::ImuInfo* last_imu_data);

  // .mapengine_msgs.ImuInfo imu_data = 9;
  bool has_imu_data() const;
  void clear_imu_data();
  static const int kImuDataFieldNumber = 9;
  const ::mapengine_msgs::ImuInfo& imu_data() const;
  ::mapengine_msgs::ImuInfo* release_imu_data();
  ::mapengine_msgs::ImuInfo* mutable_imu_data();
  void set_allocated_imu_data(::mapengine_msgs::ImuInfo* imu_data);

  // .mapengine_msgs.ImuInfo last_correct_imu_data = 10;
  bool has_last_correct_imu_data() const;
  void clear_last_correct_imu_data();
  static const int kLastCorrectImuDataFieldNumber = 10;
  const ::mapengine_msgs::ImuInfo& last_correct_imu_data() const;
  ::mapengine_msgs::ImuInfo* release_last_correct_imu_data();
  ::mapengine_msgs::ImuInfo* mutable_last_correct_imu_data();
  void set_allocated_last_correct_imu_data(::mapengine_msgs::ImuInfo* last_correct_imu_data);

  // .mapengine_msgs.ImuInfo correct_imu_data = 11;
  bool has_correct_imu_data() const;
  void clear_correct_imu_data();
  static const int kCorrectImuDataFieldNumber = 11;
  const ::mapengine_msgs::ImuInfo& correct_imu_data() const;
  ::mapengine_msgs::ImuInfo* release_correct_imu_data();
  ::mapengine_msgs::ImuInfo* mutable_correct_imu_data();
  void set_allocated_correct_imu_data(::mapengine_msgs::ImuInfo* correct_imu_data);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 map_type = 3;
  void clear_map_type();
  static const int kMapTypeFieldNumber = 3;
  ::google::protobuf::int32 map_type() const;
  void set_map_type(::google::protobuf::int32 value);

  // int32 status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.Navigation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::FuncInfo > last_vision_info_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::FuncInfo > vision_info_;
  ::common_msgs::Header* header_;
  ::mapengine_msgs::MapInfo* map_info_;
  ::mapengine_msgs::ImuInfo* last_imu_data_;
  ::mapengine_msgs::ImuInfo* imu_data_;
  ::mapengine_msgs::ImuInfo* last_correct_imu_data_;
  ::mapengine_msgs::ImuInfo* correct_imu_data_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 map_type_;
  ::google::protobuf::int32 status_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsNavigationImpl();
};
// -------------------------------------------------------------------

class NavMission : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.NavMission) */ {
 public:
  NavMission();
  virtual ~NavMission();

  NavMission(const NavMission& from);

  inline NavMission& operator=(const NavMission& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NavMission(NavMission&& from) noexcept
    : NavMission() {
    *this = ::std::move(from);
  }

  inline NavMission& operator=(NavMission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NavMission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavMission* internal_default_instance() {
    return reinterpret_cast<const NavMission*>(
               &_NavMission_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(NavMission* other);
  friend void swap(NavMission& a, NavMission& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NavMission* New() const PROTOBUF_FINAL { return New(NULL); }

  NavMission* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NavMission& from);
  void MergeFrom(const NavMission& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NavMission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mapengine_msgs.BusinessArea business_areas = 9;
  int business_areas_size() const;
  void clear_business_areas();
  static const int kBusinessAreasFieldNumber = 9;
  const ::mapengine_msgs::BusinessArea& business_areas(int index) const;
  ::mapengine_msgs::BusinessArea* mutable_business_areas(int index);
  ::mapengine_msgs::BusinessArea* add_business_areas();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::BusinessArea >*
      mutable_business_areas();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::BusinessArea >&
      business_areas() const;

  // repeated string remain_road_id = 10;
  int remain_road_id_size() const;
  void clear_remain_road_id();
  static const int kRemainRoadIdFieldNumber = 10;
  const ::std::string& remain_road_id(int index) const;
  ::std::string* mutable_remain_road_id(int index);
  void set_remain_road_id(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_remain_road_id(int index, ::std::string&& value);
  #endif
  void set_remain_road_id(int index, const char* value);
  void set_remain_road_id(int index, const char* value, size_t size);
  ::std::string* add_remain_road_id();
  void add_remain_road_id(const ::std::string& value);
  #if LANG_CXX11
  void add_remain_road_id(::std::string&& value);
  #endif
  void add_remain_road_id(const char* value);
  void add_remain_road_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& remain_road_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_remain_road_id();

  // repeated string failed_reason = 14;
  int failed_reason_size() const;
  void clear_failed_reason();
  static const int kFailedReasonFieldNumber = 14;
  const ::std::string& failed_reason(int index) const;
  ::std::string* mutable_failed_reason(int index);
  void set_failed_reason(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_failed_reason(int index, ::std::string&& value);
  #endif
  void set_failed_reason(int index, const char* value);
  void set_failed_reason(int index, const char* value, size_t size);
  ::std::string* add_failed_reason();
  void add_failed_reason(const ::std::string& value);
  #if LANG_CXX11
  void add_failed_reason(::std::string&& value);
  #endif
  void add_failed_reason(const char* value);
  void add_failed_reason(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& failed_reason() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_failed_reason();

  // .common_msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::common_msgs::Header& header() const;
  ::common_msgs::Header* release_header();
  ::common_msgs::Header* mutable_header();
  void set_allocated_header(::common_msgs::Header* header);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // int32 status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // float cur_mission_total = 5;
  void clear_cur_mission_total();
  static const int kCurMissionTotalFieldNumber = 5;
  float cur_mission_total() const;
  void set_cur_mission_total(float value);

  // float cur_mission_left = 6;
  void clear_cur_mission_left();
  static const int kCurMissionLeftFieldNumber = 6;
  float cur_mission_left() const;
  void set_cur_mission_left(float value);

  // float all_mission_total = 7;
  void clear_all_mission_total();
  static const int kAllMissionTotalFieldNumber = 7;
  float all_mission_total() const;
  void set_all_mission_total(float value);

  // float all_mission_left = 8;
  void clear_all_mission_left();
  static const int kAllMissionLeftFieldNumber = 8;
  float all_mission_left() const;
  void set_all_mission_left(float value);

  // bool global_road_success = 11;
  void clear_global_road_success();
  static const int kGlobalRoadSuccessFieldNumber = 11;
  bool global_road_success() const;
  void set_global_road_success(bool value);

  // bool navigation_success = 12;
  void clear_navigation_success();
  static const int kNavigationSuccessFieldNumber = 12;
  bool navigation_success() const;
  void set_navigation_success(bool value);

  // bool find_current_lane = 13;
  void clear_find_current_lane();
  static const int kFindCurrentLaneFieldNumber = 13;
  bool find_current_lane() const;
  void set_find_current_lane(bool value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.NavMission)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::BusinessArea > business_areas_;
  ::google::protobuf::RepeatedPtrField< ::std::string> remain_road_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> failed_reason_;
  ::common_msgs::Header* header_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 status_;
  float cur_mission_total_;
  float cur_mission_left_;
  float all_mission_total_;
  float all_mission_left_;
  bool global_road_success_;
  bool navigation_success_;
  bool find_current_lane_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsNavMissionImpl();
};
// -------------------------------------------------------------------

class Debug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mapengine_msgs.Debug) */ {
 public:
  Debug();
  virtual ~Debug();

  Debug(const Debug& from);

  inline Debug& operator=(const Debug& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Debug(Debug&& from) noexcept
    : Debug() {
    *this = ::std::move(from);
  }

  inline Debug& operator=(Debug&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Debug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Debug* internal_default_instance() {
    return reinterpret_cast<const Debug*>(
               &_Debug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(Debug* other);
  friend void swap(Debug& a, Debug& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Debug* New() const PROTOBUF_FINAL { return New(NULL); }

  Debug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Debug& from);
  void MergeFrom(const Debug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Debug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string mission_road_id = 3;
  int mission_road_id_size() const;
  void clear_mission_road_id();
  static const int kMissionRoadIdFieldNumber = 3;
  const ::std::string& mission_road_id(int index) const;
  ::std::string* mutable_mission_road_id(int index);
  void set_mission_road_id(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_mission_road_id(int index, ::std::string&& value);
  #endif
  void set_mission_road_id(int index, const char* value);
  void set_mission_road_id(int index, const char* value, size_t size);
  ::std::string* add_mission_road_id();
  void add_mission_road_id(const ::std::string& value);
  #if LANG_CXX11
  void add_mission_road_id(::std::string&& value);
  #endif
  void add_mission_road_id(const char* value);
  void add_mission_road_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& mission_road_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mission_road_id();

  // repeated string global_road = 4;
  int global_road_size() const;
  void clear_global_road();
  static const int kGlobalRoadFieldNumber = 4;
  const ::std::string& global_road(int index) const;
  ::std::string* mutable_global_road(int index);
  void set_global_road(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_global_road(int index, ::std::string&& value);
  #endif
  void set_global_road(int index, const char* value);
  void set_global_road(int index, const char* value, size_t size);
  ::std::string* add_global_road();
  void add_global_road(const ::std::string& value);
  #if LANG_CXX11
  void add_global_road(::std::string&& value);
  #endif
  void add_global_road(const char* value);
  void add_global_road(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& global_road() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_global_road();

  // repeated string failed_reason = 8;
  int failed_reason_size() const;
  void clear_failed_reason();
  static const int kFailedReasonFieldNumber = 8;
  const ::std::string& failed_reason(int index) const;
  ::std::string* mutable_failed_reason(int index);
  void set_failed_reason(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_failed_reason(int index, ::std::string&& value);
  #endif
  void set_failed_reason(int index, const char* value);
  void set_failed_reason(int index, const char* value, size_t size);
  ::std::string* add_failed_reason();
  void add_failed_reason(const ::std::string& value);
  #if LANG_CXX11
  void add_failed_reason(::std::string&& value);
  #endif
  void add_failed_reason(const char* value);
  void add_failed_reason(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& failed_reason() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_failed_reason();

  // repeated double loc_list_time = 14;
  int loc_list_time_size() const;
  void clear_loc_list_time();
  static const int kLocListTimeFieldNumber = 14;
  double loc_list_time(int index) const;
  void set_loc_list_time(int index, double value);
  void add_loc_list_time(double value);
  const ::google::protobuf::RepeatedField< double >&
      loc_list_time() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_loc_list_time();

  // repeated .mapengine_msgs.FuncInfo vision_info = 18;
  int vision_info_size() const;
  void clear_vision_info();
  static const int kVisionInfoFieldNumber = 18;
  const ::mapengine_msgs::FuncInfo& vision_info(int index) const;
  ::mapengine_msgs::FuncInfo* mutable_vision_info(int index);
  ::mapengine_msgs::FuncInfo* add_vision_info();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::FuncInfo >*
      mutable_vision_info();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::FuncInfo >&
      vision_info() const;

  // repeated .mapengine_msgs.FuncInfo map_info = 19;
  int map_info_size() const;
  void clear_map_info();
  static const int kMapInfoFieldNumber = 19;
  const ::mapengine_msgs::FuncInfo& map_info(int index) const;
  ::mapengine_msgs::FuncInfo* mutable_map_info(int index);
  ::mapengine_msgs::FuncInfo* add_map_info();
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::FuncInfo >*
      mutable_map_info();
  const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::FuncInfo >&
      map_info() const;

  // string loc_vision_string = 21;
  void clear_loc_vision_string();
  static const int kLocVisionStringFieldNumber = 21;
  const ::std::string& loc_vision_string() const;
  void set_loc_vision_string(const ::std::string& value);
  #if LANG_CXX11
  void set_loc_vision_string(::std::string&& value);
  #endif
  void set_loc_vision_string(const char* value);
  void set_loc_vision_string(const char* value, size_t size);
  ::std::string* mutable_loc_vision_string();
  ::std::string* release_loc_vision_string();
  void set_allocated_loc_vision_string(::std::string* loc_vision_string);

  // .mapengine_msgs.GlobalPathCommand route_command = 1;
  bool has_route_command() const;
  void clear_route_command();
  static const int kRouteCommandFieldNumber = 1;
  const ::mapengine_msgs::GlobalPathCommand& route_command() const;
  ::mapengine_msgs::GlobalPathCommand* release_route_command();
  ::mapengine_msgs::GlobalPathCommand* mutable_route_command();
  void set_allocated_route_command(::mapengine_msgs::GlobalPathCommand* route_command);

  // .mapengine_msgs.NavigationCommand nav_command = 2;
  bool has_nav_command() const;
  void clear_nav_command();
  static const int kNavCommandFieldNumber = 2;
  const ::mapengine_msgs::NavigationCommand& nav_command() const;
  ::mapengine_msgs::NavigationCommand* release_nav_command();
  ::mapengine_msgs::NavigationCommand* mutable_nav_command();
  void set_allocated_nav_command(::mapengine_msgs::NavigationCommand* nav_command);

  // bool global_road_success = 5;
  void clear_global_road_success();
  static const int kGlobalRoadSuccessFieldNumber = 5;
  bool global_road_success() const;
  void set_global_road_success(bool value);

  // bool navigation_success = 6;
  void clear_navigation_success();
  static const int kNavigationSuccessFieldNumber = 6;
  bool navigation_success() const;
  void set_navigation_success(bool value);

  // bool find_current_lane = 7;
  void clear_find_current_lane();
  static const int kFindCurrentLaneFieldNumber = 7;
  bool find_current_lane() const;
  void set_find_current_lane(bool value);

  // bool in_tunnel_flag = 16;
  void clear_in_tunnel_flag();
  static const int kInTunnelFlagFieldNumber = 16;
  bool in_tunnel_flag() const;
  void set_in_tunnel_flag(bool value);

  // uint32 current_road_index = 9;
  void clear_current_road_index();
  static const int kCurrentRoadIndexFieldNumber = 9;
  ::google::protobuf::uint32 current_road_index() const;
  void set_current_road_index(::google::protobuf::uint32 value);

  // float routeplan_cost_time = 10;
  void clear_routeplan_cost_time();
  static const int kRouteplanCostTimeFieldNumber = 10;
  float routeplan_cost_time() const;
  void set_routeplan_cost_time(float value);

  // float globallane_cost_time = 11;
  void clear_globallane_cost_time();
  static const int kGloballaneCostTimeFieldNumber = 11;
  float globallane_cost_time() const;
  void set_globallane_cost_time(float value);

  // float navigation_cost_time = 12;
  void clear_navigation_cost_time();
  static const int kNavigationCostTimeFieldNumber = 12;
  float navigation_cost_time() const;
  void set_navigation_cost_time(float value);

  // float min_delta = 13;
  void clear_min_delta();
  static const int kMinDeltaFieldNumber = 13;
  float min_delta() const;
  void set_min_delta(float value);

  // uint32 sim_vision_time = 15;
  void clear_sim_vision_time();
  static const int kSimVisionTimeFieldNumber = 15;
  ::google::protobuf::uint32 sim_vision_time() const;
  void set_sim_vision_time(::google::protobuf::uint32 value);

  // bool gccs_dr = 17;
  void clear_gccs_dr();
  static const int kGccsDrFieldNumber = 17;
  bool gccs_dr() const;
  void set_gccs_dr(bool value);

  // int32 loc_vision_state = 20;
  void clear_loc_vision_state();
  static const int kLocVisionStateFieldNumber = 20;
  ::google::protobuf::int32 loc_vision_state() const;
  void set_loc_vision_state(::google::protobuf::int32 value);

  // float correction_cost = 23;
  void clear_correction_cost();
  static const int kCorrectionCostFieldNumber = 23;
  float correction_cost() const;
  void set_correction_cost(float value);

  // float delta_yaw = 24;
  void clear_delta_yaw();
  static const int kDeltaYawFieldNumber = 24;
  float delta_yaw() const;
  void set_delta_yaw(float value);

  // float delta_dis = 25;
  void clear_delta_dis();
  static const int kDeltaDisFieldNumber = 25;
  float delta_dis() const;
  void set_delta_dis(float value);

  // @@protoc_insertion_point(class_scope:mapengine_msgs.Debug)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mission_road_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> global_road_;
  ::google::protobuf::RepeatedPtrField< ::std::string> failed_reason_;
  ::google::protobuf::RepeatedField< double > loc_list_time_;
  mutable int _loc_list_time_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::FuncInfo > vision_info_;
  ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::FuncInfo > map_info_;
  ::google::protobuf::internal::ArenaStringPtr loc_vision_string_;
  ::mapengine_msgs::GlobalPathCommand* route_command_;
  ::mapengine_msgs::NavigationCommand* nav_command_;
  bool global_road_success_;
  bool navigation_success_;
  bool find_current_lane_;
  bool in_tunnel_flag_;
  ::google::protobuf::uint32 current_road_index_;
  float routeplan_cost_time_;
  float globallane_cost_time_;
  float navigation_cost_time_;
  float min_delta_;
  ::google::protobuf::uint32 sim_vision_time_;
  bool gccs_dr_;
  ::google::protobuf::int32 loc_vision_state_;
  float correction_cost_;
  float delta_yaw_;
  float delta_dis_;
  mutable int _cached_size_;
  friend struct ::protobuf_mapengine_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsDebugImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BusinessArea

// string name = 1;
inline void BusinessArea::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BusinessArea::name() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.BusinessArea.name)
  return name_.GetNoArena();
}
inline void BusinessArea::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapengine_msgs.BusinessArea.name)
}
#if LANG_CXX11
inline void BusinessArea::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapengine_msgs.BusinessArea.name)
}
#endif
inline void BusinessArea::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapengine_msgs.BusinessArea.name)
}
inline void BusinessArea::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapengine_msgs.BusinessArea.name)
}
inline ::std::string* BusinessArea::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.BusinessArea.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BusinessArea::release_name() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.BusinessArea.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BusinessArea::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.BusinessArea.name)
}

// string type = 2;
inline void BusinessArea::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BusinessArea::type() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.BusinessArea.type)
  return type_.GetNoArena();
}
inline void BusinessArea::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapengine_msgs.BusinessArea.type)
}
#if LANG_CXX11
inline void BusinessArea::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapengine_msgs.BusinessArea.type)
}
#endif
inline void BusinessArea::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapengine_msgs.BusinessArea.type)
}
inline void BusinessArea::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapengine_msgs.BusinessArea.type)
}
inline ::std::string* BusinessArea::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.BusinessArea.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BusinessArea::release_type() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.BusinessArea.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BusinessArea::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.BusinessArea.type)
}

// -------------------------------------------------------------------

// MissionPoint

// double xg = 1;
inline void MissionPoint::clear_xg() {
  xg_ = 0;
}
inline double MissionPoint::xg() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.MissionPoint.xg)
  return xg_;
}
inline void MissionPoint::set_xg(double value) {
  
  xg_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.MissionPoint.xg)
}

// double yg = 2;
inline void MissionPoint::clear_yg() {
  yg_ = 0;
}
inline double MissionPoint::yg() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.MissionPoint.yg)
  return yg_;
}
inline void MissionPoint::set_yg(double value) {
  
  yg_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.MissionPoint.yg)
}

// float heading = 3;
inline void MissionPoint::clear_heading() {
  heading_ = 0;
}
inline float MissionPoint::heading() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.MissionPoint.heading)
  return heading_;
}
inline void MissionPoint::set_heading(float value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.MissionPoint.heading)
}

// -------------------------------------------------------------------

// MissionLine

// string line_id = 1;
inline void MissionLine::clear_line_id() {
  line_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MissionLine::line_id() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.MissionLine.line_id)
  return line_id_.GetNoArena();
}
inline void MissionLine::set_line_id(const ::std::string& value) {
  
  line_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapengine_msgs.MissionLine.line_id)
}
#if LANG_CXX11
inline void MissionLine::set_line_id(::std::string&& value) {
  
  line_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapengine_msgs.MissionLine.line_id)
}
#endif
inline void MissionLine::set_line_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  line_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapengine_msgs.MissionLine.line_id)
}
inline void MissionLine::set_line_id(const char* value, size_t size) {
  
  line_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapengine_msgs.MissionLine.line_id)
}
inline ::std::string* MissionLine::mutable_line_id() {
  
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.MissionLine.line_id)
  return line_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MissionLine::release_line_id() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.MissionLine.line_id)
  
  return line_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MissionLine::set_allocated_line_id(::std::string* line_id) {
  if (line_id != NULL) {
    
  } else {
    
  }
  line_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line_id);
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.MissionLine.line_id)
}

// int32 start_index = 2;
inline void MissionLine::clear_start_index() {
  start_index_ = 0;
}
inline ::google::protobuf::int32 MissionLine::start_index() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.MissionLine.start_index)
  return start_index_;
}
inline void MissionLine::set_start_index(::google::protobuf::int32 value) {
  
  start_index_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.MissionLine.start_index)
}

// int32 end_index = 3;
inline void MissionLine::clear_end_index() {
  end_index_ = 0;
}
inline ::google::protobuf::int32 MissionLine::end_index() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.MissionLine.end_index)
  return end_index_;
}
inline void MissionLine::set_end_index(::google::protobuf::int32 value) {
  
  end_index_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.MissionLine.end_index)
}

// -------------------------------------------------------------------

// MissionArea

// string area_id = 1;
inline void MissionArea::clear_area_id() {
  area_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MissionArea::area_id() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.MissionArea.area_id)
  return area_id_.GetNoArena();
}
inline void MissionArea::set_area_id(const ::std::string& value) {
  
  area_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapengine_msgs.MissionArea.area_id)
}
#if LANG_CXX11
inline void MissionArea::set_area_id(::std::string&& value) {
  
  area_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapengine_msgs.MissionArea.area_id)
}
#endif
inline void MissionArea::set_area_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  area_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapengine_msgs.MissionArea.area_id)
}
inline void MissionArea::set_area_id(const char* value, size_t size) {
  
  area_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapengine_msgs.MissionArea.area_id)
}
inline ::std::string* MissionArea::mutable_area_id() {
  
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.MissionArea.area_id)
  return area_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MissionArea::release_area_id() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.MissionArea.area_id)
  
  return area_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MissionArea::set_allocated_area_id(::std::string* area_id) {
  if (area_id != NULL) {
    
  } else {
    
  }
  area_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), area_id);
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.MissionArea.area_id)
}

// string line_id = 2;
inline void MissionArea::clear_line_id() {
  line_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MissionArea::line_id() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.MissionArea.line_id)
  return line_id_.GetNoArena();
}
inline void MissionArea::set_line_id(const ::std::string& value) {
  
  line_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapengine_msgs.MissionArea.line_id)
}
#if LANG_CXX11
inline void MissionArea::set_line_id(::std::string&& value) {
  
  line_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapengine_msgs.MissionArea.line_id)
}
#endif
inline void MissionArea::set_line_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  line_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapengine_msgs.MissionArea.line_id)
}
inline void MissionArea::set_line_id(const char* value, size_t size) {
  
  line_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapengine_msgs.MissionArea.line_id)
}
inline ::std::string* MissionArea::mutable_line_id() {
  
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.MissionArea.line_id)
  return line_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MissionArea::release_line_id() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.MissionArea.line_id)
  
  return line_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MissionArea::set_allocated_line_id(::std::string* line_id) {
  if (line_id != NULL) {
    
  } else {
    
  }
  line_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), line_id);
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.MissionArea.line_id)
}

// -------------------------------------------------------------------

// MissionContent

// .mapengine_msgs.MissionPoint point = 1;
inline bool MissionContent::has_point() const {
  return this != internal_default_instance() && point_ != NULL;
}
inline void MissionContent::clear_point() {
  if (GetArenaNoVirtual() == NULL && point_ != NULL) {
    delete point_;
  }
  point_ = NULL;
}
inline const ::mapengine_msgs::MissionPoint& MissionContent::point() const {
  const ::mapengine_msgs::MissionPoint* p = point_;
  // @@protoc_insertion_point(field_get:mapengine_msgs.MissionContent.point)
  return p != NULL ? *p : *reinterpret_cast<const ::mapengine_msgs::MissionPoint*>(
      &::mapengine_msgs::_MissionPoint_default_instance_);
}
inline ::mapengine_msgs::MissionPoint* MissionContent::release_point() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.MissionContent.point)
  
  ::mapengine_msgs::MissionPoint* temp = point_;
  point_ = NULL;
  return temp;
}
inline ::mapengine_msgs::MissionPoint* MissionContent::mutable_point() {
  
  if (point_ == NULL) {
    point_ = new ::mapengine_msgs::MissionPoint;
  }
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.MissionContent.point)
  return point_;
}
inline void MissionContent::set_allocated_point(::mapengine_msgs::MissionPoint* point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete point_;
  }
  if (point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.MissionContent.point)
}

// .mapengine_msgs.MissionLine line = 2;
inline bool MissionContent::has_line() const {
  return this != internal_default_instance() && line_ != NULL;
}
inline void MissionContent::clear_line() {
  if (GetArenaNoVirtual() == NULL && line_ != NULL) {
    delete line_;
  }
  line_ = NULL;
}
inline const ::mapengine_msgs::MissionLine& MissionContent::line() const {
  const ::mapengine_msgs::MissionLine* p = line_;
  // @@protoc_insertion_point(field_get:mapengine_msgs.MissionContent.line)
  return p != NULL ? *p : *reinterpret_cast<const ::mapengine_msgs::MissionLine*>(
      &::mapengine_msgs::_MissionLine_default_instance_);
}
inline ::mapengine_msgs::MissionLine* MissionContent::release_line() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.MissionContent.line)
  
  ::mapengine_msgs::MissionLine* temp = line_;
  line_ = NULL;
  return temp;
}
inline ::mapengine_msgs::MissionLine* MissionContent::mutable_line() {
  
  if (line_ == NULL) {
    line_ = new ::mapengine_msgs::MissionLine;
  }
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.MissionContent.line)
  return line_;
}
inline void MissionContent::set_allocated_line(::mapengine_msgs::MissionLine* line) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete line_;
  }
  if (line) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      line = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, line, submessage_arena);
    }
    
  } else {
    
  }
  line_ = line;
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.MissionContent.line)
}

// .mapengine_msgs.MissionArea area = 3;
inline bool MissionContent::has_area() const {
  return this != internal_default_instance() && area_ != NULL;
}
inline void MissionContent::clear_area() {
  if (GetArenaNoVirtual() == NULL && area_ != NULL) {
    delete area_;
  }
  area_ = NULL;
}
inline const ::mapengine_msgs::MissionArea& MissionContent::area() const {
  const ::mapengine_msgs::MissionArea* p = area_;
  // @@protoc_insertion_point(field_get:mapengine_msgs.MissionContent.area)
  return p != NULL ? *p : *reinterpret_cast<const ::mapengine_msgs::MissionArea*>(
      &::mapengine_msgs::_MissionArea_default_instance_);
}
inline ::mapengine_msgs::MissionArea* MissionContent::release_area() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.MissionContent.area)
  
  ::mapengine_msgs::MissionArea* temp = area_;
  area_ = NULL;
  return temp;
}
inline ::mapengine_msgs::MissionArea* MissionContent::mutable_area() {
  
  if (area_ == NULL) {
    area_ = new ::mapengine_msgs::MissionArea;
  }
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.MissionContent.area)
  return area_;
}
inline void MissionContent::set_allocated_area(::mapengine_msgs::MissionArea* area) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete area_;
  }
  if (area) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      area = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, area, submessage_arena);
    }
    
  } else {
    
  }
  area_ = area;
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.MissionContent.area)
}

// int32 type = 4;
inline void MissionContent::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 MissionContent::type() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.MissionContent.type)
  return type_;
}
inline void MissionContent::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.MissionContent.type)
}

// int32 mission_id = 5;
inline void MissionContent::clear_mission_id() {
  mission_id_ = 0;
}
inline ::google::protobuf::int32 MissionContent::mission_id() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.MissionContent.mission_id)
  return mission_id_;
}
inline void MissionContent::set_mission_id(::google::protobuf::int32 value) {
  
  mission_id_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.MissionContent.mission_id)
}

// bool is_stop = 6;
inline void MissionContent::clear_is_stop() {
  is_stop_ = false;
}
inline bool MissionContent::is_stop() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.MissionContent.is_stop)
  return is_stop_;
}
inline void MissionContent::set_is_stop(bool value) {
  
  is_stop_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.MissionContent.is_stop)
}

// -------------------------------------------------------------------

// RoutePoint

// double xg = 1;
inline void RoutePoint::clear_xg() {
  xg_ = 0;
}
inline double RoutePoint::xg() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.RoutePoint.xg)
  return xg_;
}
inline void RoutePoint::set_xg(double value) {
  
  xg_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.RoutePoint.xg)
}

// double yg = 2;
inline void RoutePoint::clear_yg() {
  yg_ = 0;
}
inline double RoutePoint::yg() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.RoutePoint.yg)
  return yg_;
}
inline void RoutePoint::set_yg(double value) {
  
  yg_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.RoutePoint.yg)
}

// float heading = 3;
inline void RoutePoint::clear_heading() {
  heading_ = 0;
}
inline float RoutePoint::heading() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.RoutePoint.heading)
  return heading_;
}
inline void RoutePoint::set_heading(float value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.RoutePoint.heading)
}

// int32 length = 4;
inline void RoutePoint::clear_length() {
  length_ = 0;
}
inline ::google::protobuf::int32 RoutePoint::length() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.RoutePoint.length)
  return length_;
}
inline void RoutePoint::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.RoutePoint.length)
}

// -------------------------------------------------------------------

// MissionRoute

// repeated string global_road = 1;
inline int MissionRoute::global_road_size() const {
  return global_road_.size();
}
inline void MissionRoute::clear_global_road() {
  global_road_.Clear();
}
inline const ::std::string& MissionRoute::global_road(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.MissionRoute.global_road)
  return global_road_.Get(index);
}
inline ::std::string* MissionRoute::mutable_global_road(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.MissionRoute.global_road)
  return global_road_.Mutable(index);
}
inline void MissionRoute::set_global_road(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mapengine_msgs.MissionRoute.global_road)
  global_road_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MissionRoute::set_global_road(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:mapengine_msgs.MissionRoute.global_road)
  global_road_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MissionRoute::set_global_road(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  global_road_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mapengine_msgs.MissionRoute.global_road)
}
inline void MissionRoute::set_global_road(int index, const char* value, size_t size) {
  global_road_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mapengine_msgs.MissionRoute.global_road)
}
inline ::std::string* MissionRoute::add_global_road() {
  // @@protoc_insertion_point(field_add_mutable:mapengine_msgs.MissionRoute.global_road)
  return global_road_.Add();
}
inline void MissionRoute::add_global_road(const ::std::string& value) {
  global_road_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mapengine_msgs.MissionRoute.global_road)
}
#if LANG_CXX11
inline void MissionRoute::add_global_road(::std::string&& value) {
  global_road_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mapengine_msgs.MissionRoute.global_road)
}
#endif
inline void MissionRoute::add_global_road(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  global_road_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mapengine_msgs.MissionRoute.global_road)
}
inline void MissionRoute::add_global_road(const char* value, size_t size) {
  global_road_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mapengine_msgs.MissionRoute.global_road)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MissionRoute::global_road() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.MissionRoute.global_road)
  return global_road_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MissionRoute::mutable_global_road() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.MissionRoute.global_road)
  return &global_road_;
}

// repeated .mapengine_msgs.RoutePoint global_path = 2;
inline int MissionRoute::global_path_size() const {
  return global_path_.size();
}
inline void MissionRoute::clear_global_path() {
  global_path_.Clear();
}
inline const ::mapengine_msgs::RoutePoint& MissionRoute::global_path(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.MissionRoute.global_path)
  return global_path_.Get(index);
}
inline ::mapengine_msgs::RoutePoint* MissionRoute::mutable_global_path(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.MissionRoute.global_path)
  return global_path_.Mutable(index);
}
inline ::mapengine_msgs::RoutePoint* MissionRoute::add_global_path() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.MissionRoute.global_path)
  return global_path_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::RoutePoint >*
MissionRoute::mutable_global_path() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.MissionRoute.global_path)
  return &global_path_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::RoutePoint >&
MissionRoute::global_path() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.MissionRoute.global_path)
  return global_path_;
}

// float length = 3;
inline void MissionRoute::clear_length() {
  length_ = 0;
}
inline float MissionRoute::length() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.MissionRoute.length)
  return length_;
}
inline void MissionRoute::set_length(float value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.MissionRoute.length)
}

// float dis_to_next_turn = 4;
inline void MissionRoute::clear_dis_to_next_turn() {
  dis_to_next_turn_ = 0;
}
inline float MissionRoute::dis_to_next_turn() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.MissionRoute.dis_to_next_turn)
  return dis_to_next_turn_;
}
inline void MissionRoute::set_dis_to_next_turn(float value) {
  
  dis_to_next_turn_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.MissionRoute.dis_to_next_turn)
}

// int32 next_turn_type = 5;
inline void MissionRoute::clear_next_turn_type() {
  next_turn_type_ = 0;
}
inline ::google::protobuf::int32 MissionRoute::next_turn_type() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.MissionRoute.next_turn_type)
  return next_turn_type_;
}
inline void MissionRoute::set_next_turn_type(::google::protobuf::int32 value) {
  
  next_turn_type_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.MissionRoute.next_turn_type)
}

// -------------------------------------------------------------------

// ImuInfo

// double time_stamp = 1;
inline void ImuInfo::clear_time_stamp() {
  time_stamp_ = 0;
}
inline double ImuInfo::time_stamp() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ImuInfo.time_stamp)
  return time_stamp_;
}
inline void ImuInfo::set_time_stamp(double value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ImuInfo.time_stamp)
}

// double xg = 2;
inline void ImuInfo::clear_xg() {
  xg_ = 0;
}
inline double ImuInfo::xg() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ImuInfo.xg)
  return xg_;
}
inline void ImuInfo::set_xg(double value) {
  
  xg_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ImuInfo.xg)
}

// double yg = 3;
inline void ImuInfo::clear_yg() {
  yg_ = 0;
}
inline double ImuInfo::yg() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ImuInfo.yg)
  return yg_;
}
inline void ImuInfo::set_yg(double value) {
  
  yg_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ImuInfo.yg)
}

// double yaw = 4;
inline void ImuInfo::clear_yaw() {
  yaw_ = 0;
}
inline double ImuInfo::yaw() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ImuInfo.yaw)
  return yaw_;
}
inline void ImuInfo::set_yaw(double value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ImuInfo.yaw)
}

// double velocity = 5;
inline void ImuInfo::clear_velocity() {
  velocity_ = 0;
}
inline double ImuInfo::velocity() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ImuInfo.velocity)
  return velocity_;
}
inline void ImuInfo::set_velocity(double value) {
  
  velocity_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ImuInfo.velocity)
}

// double vx = 6;
inline void ImuInfo::clear_vx() {
  vx_ = 0;
}
inline double ImuInfo::vx() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ImuInfo.vx)
  return vx_;
}
inline void ImuInfo::set_vx(double value) {
  
  vx_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ImuInfo.vx)
}

// double vy = 7;
inline void ImuInfo::clear_vy() {
  vy_ = 0;
}
inline double ImuInfo::vy() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ImuInfo.vy)
  return vy_;
}
inline void ImuInfo::set_vy(double value) {
  
  vy_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ImuInfo.vy)
}

// double loc_xg_dr = 8;
inline void ImuInfo::clear_loc_xg_dr() {
  loc_xg_dr_ = 0;
}
inline double ImuInfo::loc_xg_dr() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ImuInfo.loc_xg_dr)
  return loc_xg_dr_;
}
inline void ImuInfo::set_loc_xg_dr(double value) {
  
  loc_xg_dr_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ImuInfo.loc_xg_dr)
}

// double loc_yg_dr = 9;
inline void ImuInfo::clear_loc_yg_dr() {
  loc_yg_dr_ = 0;
}
inline double ImuInfo::loc_yg_dr() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ImuInfo.loc_yg_dr)
  return loc_yg_dr_;
}
inline void ImuInfo::set_loc_yg_dr(double value) {
  
  loc_yg_dr_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ImuInfo.loc_yg_dr)
}

// double loc_yaw_dr = 10;
inline void ImuInfo::clear_loc_yaw_dr() {
  loc_yaw_dr_ = 0;
}
inline double ImuInfo::loc_yaw_dr() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ImuInfo.loc_yaw_dr)
  return loc_yaw_dr_;
}
inline void ImuInfo::set_loc_yaw_dr(double value) {
  
  loc_yaw_dr_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ImuInfo.loc_yaw_dr)
}

// bool correction_flag = 11;
inline void ImuInfo::clear_correction_flag() {
  correction_flag_ = false;
}
inline bool ImuInfo::correction_flag() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ImuInfo.correction_flag)
  return correction_flag_;
}
inline void ImuInfo::set_correction_flag(bool value) {
  
  correction_flag_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ImuInfo.correction_flag)
}

// -------------------------------------------------------------------

// TrafficLight

// string id = 1;
inline void TrafficLight::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrafficLight::id() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.TrafficLight.id)
  return id_.GetNoArena();
}
inline void TrafficLight::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapengine_msgs.TrafficLight.id)
}
#if LANG_CXX11
inline void TrafficLight::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapengine_msgs.TrafficLight.id)
}
#endif
inline void TrafficLight::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapengine_msgs.TrafficLight.id)
}
inline void TrafficLight::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapengine_msgs.TrafficLight.id)
}
inline ::std::string* TrafficLight::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.TrafficLight.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrafficLight::release_id() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.TrafficLight.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLight::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.TrafficLight.id)
}

// bool key_light = 2;
inline void TrafficLight::clear_key_light() {
  key_light_ = false;
}
inline bool TrafficLight::key_light() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.TrafficLight.key_light)
  return key_light_;
}
inline void TrafficLight::set_key_light(bool value) {
  
  key_light_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.TrafficLight.key_light)
}

// int32 lon_index = 3;
inline void TrafficLight::clear_lon_index() {
  lon_index_ = 0;
}
inline ::google::protobuf::int32 TrafficLight::lon_index() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.TrafficLight.lon_index)
  return lon_index_;
}
inline void TrafficLight::set_lon_index(::google::protobuf::int32 value) {
  
  lon_index_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.TrafficLight.lon_index)
}

// float xg = 4;
inline void TrafficLight::clear_xg() {
  xg_ = 0;
}
inline float TrafficLight::xg() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.TrafficLight.xg)
  return xg_;
}
inline void TrafficLight::set_xg(float value) {
  
  xg_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.TrafficLight.xg)
}

// float yg = 5;
inline void TrafficLight::clear_yg() {
  yg_ = 0;
}
inline float TrafficLight::yg() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.TrafficLight.yg)
  return yg_;
}
inline void TrafficLight::set_yg(float value) {
  
  yg_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.TrafficLight.yg)
}

// float globalangle = 6;
inline void TrafficLight::clear_globalangle() {
  globalangle_ = 0;
}
inline float TrafficLight::globalangle() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.TrafficLight.globalangle)
  return globalangle_;
}
inline void TrafficLight::set_globalangle(float value) {
  
  globalangle_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.TrafficLight.globalangle)
}

// float light_s = 7;
inline void TrafficLight::clear_light_s() {
  light_s_ = 0;
}
inline float TrafficLight::light_s() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.TrafficLight.light_s)
  return light_s_;
}
inline void TrafficLight::set_light_s(float value) {
  
  light_s_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.TrafficLight.light_s)
}

// string lane_id = 8;
inline void TrafficLight::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrafficLight::lane_id() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.TrafficLight.lane_id)
  return lane_id_.GetNoArena();
}
inline void TrafficLight::set_lane_id(const ::std::string& value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapengine_msgs.TrafficLight.lane_id)
}
#if LANG_CXX11
inline void TrafficLight::set_lane_id(::std::string&& value) {
  
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapengine_msgs.TrafficLight.lane_id)
}
#endif
inline void TrafficLight::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapengine_msgs.TrafficLight.lane_id)
}
inline void TrafficLight::set_lane_id(const char* value, size_t size) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapengine_msgs.TrafficLight.lane_id)
}
inline ::std::string* TrafficLight::mutable_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.TrafficLight.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrafficLight::release_lane_id() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.TrafficLight.lane_id)
  
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLight::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    
  } else {
    
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.TrafficLight.lane_id)
}

// repeated string same_light_ids = 9;
inline int TrafficLight::same_light_ids_size() const {
  return same_light_ids_.size();
}
inline void TrafficLight::clear_same_light_ids() {
  same_light_ids_.Clear();
}
inline const ::std::string& TrafficLight::same_light_ids(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.TrafficLight.same_light_ids)
  return same_light_ids_.Get(index);
}
inline ::std::string* TrafficLight::mutable_same_light_ids(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.TrafficLight.same_light_ids)
  return same_light_ids_.Mutable(index);
}
inline void TrafficLight::set_same_light_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mapengine_msgs.TrafficLight.same_light_ids)
  same_light_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TrafficLight::set_same_light_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:mapengine_msgs.TrafficLight.same_light_ids)
  same_light_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TrafficLight::set_same_light_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  same_light_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mapengine_msgs.TrafficLight.same_light_ids)
}
inline void TrafficLight::set_same_light_ids(int index, const char* value, size_t size) {
  same_light_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mapengine_msgs.TrafficLight.same_light_ids)
}
inline ::std::string* TrafficLight::add_same_light_ids() {
  // @@protoc_insertion_point(field_add_mutable:mapengine_msgs.TrafficLight.same_light_ids)
  return same_light_ids_.Add();
}
inline void TrafficLight::add_same_light_ids(const ::std::string& value) {
  same_light_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mapengine_msgs.TrafficLight.same_light_ids)
}
#if LANG_CXX11
inline void TrafficLight::add_same_light_ids(::std::string&& value) {
  same_light_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mapengine_msgs.TrafficLight.same_light_ids)
}
#endif
inline void TrafficLight::add_same_light_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  same_light_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mapengine_msgs.TrafficLight.same_light_ids)
}
inline void TrafficLight::add_same_light_ids(const char* value, size_t size) {
  same_light_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mapengine_msgs.TrafficLight.same_light_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrafficLight::same_light_ids() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.TrafficLight.same_light_ids)
  return same_light_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrafficLight::mutable_same_light_ids() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.TrafficLight.same_light_ids)
  return &same_light_ids_;
}

// -------------------------------------------------------------------

// Point

// double x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Point.x)
  return x_;
}
inline void Point::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Point.y)
  return y_;
}
inline void Point::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Point.y)
}

// float angle = 3;
inline void Point::clear_angle() {
  angle_ = 0;
}
inline float Point::angle() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Point.angle)
  return angle_;
}
inline void Point::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Point.angle)
}

// -------------------------------------------------------------------

// ReferencePoint

// float x = 1;
inline void ReferencePoint::clear_x() {
  x_ = 0;
}
inline float ReferencePoint::x() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ReferencePoint.x)
  return x_;
}
inline void ReferencePoint::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ReferencePoint.x)
}

// float y = 2;
inline void ReferencePoint::clear_y() {
  y_ = 0;
}
inline float ReferencePoint::y() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ReferencePoint.y)
  return y_;
}
inline void ReferencePoint::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ReferencePoint.y)
}

// float angle = 3;
inline void ReferencePoint::clear_angle() {
  angle_ = 0;
}
inline float ReferencePoint::angle() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ReferencePoint.angle)
  return angle_;
}
inline void ReferencePoint::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ReferencePoint.angle)
}

// double xg = 4;
inline void ReferencePoint::clear_xg() {
  xg_ = 0;
}
inline double ReferencePoint::xg() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ReferencePoint.xg)
  return xg_;
}
inline void ReferencePoint::set_xg(double value) {
  
  xg_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ReferencePoint.xg)
}

// double yg = 5;
inline void ReferencePoint::clear_yg() {
  yg_ = 0;
}
inline double ReferencePoint::yg() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ReferencePoint.yg)
  return yg_;
}
inline void ReferencePoint::set_yg(double value) {
  
  yg_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ReferencePoint.yg)
}

// float angleglobal = 6;
inline void ReferencePoint::clear_angleglobal() {
  angleglobal_ = 0;
}
inline float ReferencePoint::angleglobal() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ReferencePoint.angleglobal)
  return angleglobal_;
}
inline void ReferencePoint::set_angleglobal(float value) {
  
  angleglobal_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ReferencePoint.angleglobal)
}

// int64 index = 7;
inline void ReferencePoint::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ReferencePoint::index() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ReferencePoint.index)
  return index_;
}
inline void ReferencePoint::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ReferencePoint.index)
}

// float length = 8;
inline void ReferencePoint::clear_length() {
  length_ = 0;
}
inline float ReferencePoint::length() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ReferencePoint.length)
  return length_;
}
inline void ReferencePoint::set_length(float value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ReferencePoint.length)
}

// float curvature = 9;
inline void ReferencePoint::clear_curvature() {
  curvature_ = 0;
}
inline float ReferencePoint::curvature() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ReferencePoint.curvature)
  return curvature_;
}
inline void ReferencePoint::set_curvature(float value) {
  
  curvature_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ReferencePoint.curvature)
}

// int32 direction = 10;
inline void ReferencePoint::clear_direction() {
  direction_ = 0;
}
inline ::google::protobuf::int32 ReferencePoint::direction() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.ReferencePoint.direction)
  return direction_;
}
inline void ReferencePoint::set_direction(::google::protobuf::int32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.ReferencePoint.direction)
}

// -------------------------------------------------------------------

// AreaRange

// string id = 1;
inline void AreaRange::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AreaRange::id() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.AreaRange.id)
  return id_.GetNoArena();
}
inline void AreaRange::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapengine_msgs.AreaRange.id)
}
#if LANG_CXX11
inline void AreaRange::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapengine_msgs.AreaRange.id)
}
#endif
inline void AreaRange::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapengine_msgs.AreaRange.id)
}
inline void AreaRange::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapengine_msgs.AreaRange.id)
}
inline ::std::string* AreaRange::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.AreaRange.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AreaRange::release_id() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.AreaRange.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AreaRange::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.AreaRange.id)
}

// int32 type = 2;
inline void AreaRange::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 AreaRange::type() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.AreaRange.type)
  return type_;
}
inline void AreaRange::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.AreaRange.type)
}

// repeated .mapengine_msgs.Point area_points = 3;
inline int AreaRange::area_points_size() const {
  return area_points_.size();
}
inline void AreaRange::clear_area_points() {
  area_points_.Clear();
}
inline const ::mapengine_msgs::Point& AreaRange::area_points(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.AreaRange.area_points)
  return area_points_.Get(index);
}
inline ::mapengine_msgs::Point* AreaRange::mutable_area_points(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.AreaRange.area_points)
  return area_points_.Mutable(index);
}
inline ::mapengine_msgs::Point* AreaRange::add_area_points() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.AreaRange.area_points)
  return area_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::Point >*
AreaRange::mutable_area_points() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.AreaRange.area_points)
  return &area_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::Point >&
AreaRange::area_points() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.AreaRange.area_points)
  return area_points_;
}

// -------------------------------------------------------------------

// DisRange

// string id = 1;
inline void DisRange::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DisRange::id() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.DisRange.id)
  return id_.GetNoArena();
}
inline void DisRange::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapengine_msgs.DisRange.id)
}
#if LANG_CXX11
inline void DisRange::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapengine_msgs.DisRange.id)
}
#endif
inline void DisRange::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapengine_msgs.DisRange.id)
}
inline void DisRange::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapengine_msgs.DisRange.id)
}
inline ::std::string* DisRange::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.DisRange.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisRange::release_id() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.DisRange.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisRange::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.DisRange.id)
}

// float start_s = 2;
inline void DisRange::clear_start_s() {
  start_s_ = 0;
}
inline float DisRange::start_s() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.DisRange.start_s)
  return start_s_;
}
inline void DisRange::set_start_s(float value) {
  
  start_s_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.DisRange.start_s)
}

// float end_s = 3;
inline void DisRange::clear_end_s() {
  end_s_ = 0;
}
inline float DisRange::end_s() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.DisRange.end_s)
  return end_s_;
}
inline void DisRange::set_end_s(float value) {
  
  end_s_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.DisRange.end_s)
}

// float value = 4;
inline void DisRange::clear_value() {
  value_ = 0;
}
inline float DisRange::value() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.DisRange.value)
  return value_;
}
inline void DisRange::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.DisRange.value)
}

// int32 type = 5;
inline void DisRange::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 DisRange::type() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.DisRange.type)
  return type_;
}
inline void DisRange::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.DisRange.type)
}

// -------------------------------------------------------------------

// FuncInfo

// int32 key = 1;
inline void FuncInfo::clear_key() {
  key_ = 0;
}
inline ::google::protobuf::int32 FuncInfo::key() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.FuncInfo.key)
  return key_;
}
inline void FuncInfo::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.FuncInfo.key)
}

// float a = 2;
inline void FuncInfo::clear_a() {
  a_ = 0;
}
inline float FuncInfo::a() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.FuncInfo.a)
  return a_;
}
inline void FuncInfo::set_a(float value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.FuncInfo.a)
}

// float b = 3;
inline void FuncInfo::clear_b() {
  b_ = 0;
}
inline float FuncInfo::b() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.FuncInfo.b)
  return b_;
}
inline void FuncInfo::set_b(float value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.FuncInfo.b)
}

// float c = 4;
inline void FuncInfo::clear_c() {
  c_ = 0;
}
inline float FuncInfo::c() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.FuncInfo.c)
  return c_;
}
inline void FuncInfo::set_c(float value) {
  
  c_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.FuncInfo.c)
}

// float start_x = 5;
inline void FuncInfo::clear_start_x() {
  start_x_ = 0;
}
inline float FuncInfo::start_x() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.FuncInfo.start_x)
  return start_x_;
}
inline void FuncInfo::set_start_x(float value) {
  
  start_x_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.FuncInfo.start_x)
}

// float end_x = 6;
inline void FuncInfo::clear_end_x() {
  end_x_ = 0;
}
inline float FuncInfo::end_x() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.FuncInfo.end_x)
  return end_x_;
}
inline void FuncInfo::set_end_x(float value) {
  
  end_x_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.FuncInfo.end_x)
}

// int32 life_time = 7;
inline void FuncInfo::clear_life_time() {
  life_time_ = 0;
}
inline ::google::protobuf::int32 FuncInfo::life_time() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.FuncInfo.life_time)
  return life_time_;
}
inline void FuncInfo::set_life_time(::google::protobuf::int32 value) {
  
  life_time_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.FuncInfo.life_time)
}

// -------------------------------------------------------------------

// RelationLane

// string id = 1;
inline void RelationLane::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RelationLane::id() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.RelationLane.id)
  return id_.GetNoArena();
}
inline void RelationLane::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapengine_msgs.RelationLane.id)
}
#if LANG_CXX11
inline void RelationLane::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapengine_msgs.RelationLane.id)
}
#endif
inline void RelationLane::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapengine_msgs.RelationLane.id)
}
inline void RelationLane::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapengine_msgs.RelationLane.id)
}
inline ::std::string* RelationLane::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.RelationLane.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RelationLane::release_id() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.RelationLane.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelationLane::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.RelationLane.id)
}

// float start_s = 2;
inline void RelationLane::clear_start_s() {
  start_s_ = 0;
}
inline float RelationLane::start_s() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.RelationLane.start_s)
  return start_s_;
}
inline void RelationLane::set_start_s(float value) {
  
  start_s_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.RelationLane.start_s)
}

// float end_s = 3;
inline void RelationLane::clear_end_s() {
  end_s_ = 0;
}
inline float RelationLane::end_s() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.RelationLane.end_s)
  return end_s_;
}
inline void RelationLane::set_end_s(float value) {
  
  end_s_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.RelationLane.end_s)
}

// float relation_start_s = 4;
inline void RelationLane::clear_relation_start_s() {
  relation_start_s_ = 0;
}
inline float RelationLane::relation_start_s() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.RelationLane.relation_start_s)
  return relation_start_s_;
}
inline void RelationLane::set_relation_start_s(float value) {
  
  relation_start_s_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.RelationLane.relation_start_s)
}

// float relation_end_s = 5;
inline void RelationLane::clear_relation_end_s() {
  relation_end_s_ = 0;
}
inline float RelationLane::relation_end_s() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.RelationLane.relation_end_s)
  return relation_end_s_;
}
inline void RelationLane::set_relation_end_s(float value) {
  
  relation_end_s_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.RelationLane.relation_end_s)
}

// int32 lon_index = 6;
inline void RelationLane::clear_lon_index() {
  lon_index_ = 0;
}
inline ::google::protobuf::int32 RelationLane::lon_index() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.RelationLane.lon_index)
  return lon_index_;
}
inline void RelationLane::set_lon_index(::google::protobuf::int32 value) {
  
  lon_index_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.RelationLane.lon_index)
}

// repeated int32 confluence_index = 7;
inline int RelationLane::confluence_index_size() const {
  return confluence_index_.size();
}
inline void RelationLane::clear_confluence_index() {
  confluence_index_.Clear();
}
inline ::google::protobuf::int32 RelationLane::confluence_index(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.RelationLane.confluence_index)
  return confluence_index_.Get(index);
}
inline void RelationLane::set_confluence_index(int index, ::google::protobuf::int32 value) {
  confluence_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:mapengine_msgs.RelationLane.confluence_index)
}
inline void RelationLane::add_confluence_index(::google::protobuf::int32 value) {
  confluence_index_.Add(value);
  // @@protoc_insertion_point(field_add:mapengine_msgs.RelationLane.confluence_index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RelationLane::confluence_index() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.RelationLane.confluence_index)
  return confluence_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RelationLane::mutable_confluence_index() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.RelationLane.confluence_index)
  return &confluence_index_;
}

// int32 type = 8;
inline void RelationLane::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 RelationLane::type() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.RelationLane.type)
  return type_;
}
inline void RelationLane::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.RelationLane.type)
}

// -------------------------------------------------------------------

// Line

// int32 line_direction = 1;
inline void Line::clear_line_direction() {
  line_direction_ = 0;
}
inline ::google::protobuf::int32 Line::line_direction() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.line_direction)
  return line_direction_;
}
inline void Line::set_line_direction(::google::protobuf::int32 value) {
  
  line_direction_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Line.line_direction)
}

// float dis_to_line = 2;
inline void Line::clear_dis_to_line() {
  dis_to_line_ = 0;
}
inline float Line::dis_to_line() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.dis_to_line)
  return dis_to_line_;
}
inline void Line::set_dis_to_line(float value) {
  
  dis_to_line_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Line.dis_to_line)
}

// float dis_to_diversion = 3;
inline void Line::clear_dis_to_diversion() {
  dis_to_diversion_ = 0;
}
inline float Line::dis_to_diversion() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.dis_to_diversion)
  return dis_to_diversion_;
}
inline void Line::set_dis_to_diversion(float value) {
  
  dis_to_diversion_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Line.dis_to_diversion)
}

// float dis_to_merge = 4;
inline void Line::clear_dis_to_merge() {
  dis_to_merge_ = 0;
}
inline float Line::dis_to_merge() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.dis_to_merge)
  return dis_to_merge_;
}
inline void Line::set_dis_to_merge(float value) {
  
  dis_to_merge_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Line.dis_to_merge)
}

// float first_lane_start_s = 5;
inline void Line::clear_first_lane_start_s() {
  first_lane_start_s_ = 0;
}
inline float Line::first_lane_start_s() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.first_lane_start_s)
  return first_lane_start_s_;
}
inline void Line::set_first_lane_start_s(float value) {
  
  first_lane_start_s_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Line.first_lane_start_s)
}

// float dis_to_driving = 6;
inline void Line::clear_dis_to_driving() {
  dis_to_driving_ = 0;
}
inline float Line::dis_to_driving() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.dis_to_driving)
  return dis_to_driving_;
}
inline void Line::set_dis_to_driving(float value) {
  
  dis_to_driving_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Line.dis_to_driving)
}

// bool able_driving = 7;
inline void Line::clear_able_driving() {
  able_driving_ = false;
}
inline bool Line::able_driving() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.able_driving)
  return able_driving_;
}
inline void Line::set_able_driving(bool value) {
  
  able_driving_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Line.able_driving)
}

// repeated string lane_ids = 8;
inline int Line::lane_ids_size() const {
  return lane_ids_.size();
}
inline void Line::clear_lane_ids() {
  lane_ids_.Clear();
}
inline const ::std::string& Line::lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.lane_ids)
  return lane_ids_.Get(index);
}
inline ::std::string* Line::mutable_lane_ids(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.lane_ids)
  return lane_ids_.Mutable(index);
}
inline void Line::set_lane_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mapengine_msgs.Line.lane_ids)
  lane_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Line::set_lane_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:mapengine_msgs.Line.lane_ids)
  lane_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Line::set_lane_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  lane_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mapengine_msgs.Line.lane_ids)
}
inline void Line::set_lane_ids(int index, const char* value, size_t size) {
  lane_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mapengine_msgs.Line.lane_ids)
}
inline ::std::string* Line::add_lane_ids() {
  // @@protoc_insertion_point(field_add_mutable:mapengine_msgs.Line.lane_ids)
  return lane_ids_.Add();
}
inline void Line::add_lane_ids(const ::std::string& value) {
  lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.lane_ids)
}
#if LANG_CXX11
inline void Line::add_lane_ids(::std::string&& value) {
  lane_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.lane_ids)
}
#endif
inline void Line::add_lane_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mapengine_msgs.Line.lane_ids)
}
inline void Line::add_lane_ids(const char* value, size_t size) {
  lane_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mapengine_msgs.Line.lane_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Line::lane_ids() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.lane_ids)
  return lane_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Line::mutable_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.lane_ids)
  return &lane_ids_;
}

// repeated .mapengine_msgs.RelationLane relation_lanes = 9;
inline int Line::relation_lanes_size() const {
  return relation_lanes_.size();
}
inline void Line::clear_relation_lanes() {
  relation_lanes_.Clear();
}
inline const ::mapengine_msgs::RelationLane& Line::relation_lanes(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.relation_lanes)
  return relation_lanes_.Get(index);
}
inline ::mapengine_msgs::RelationLane* Line::mutable_relation_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.relation_lanes)
  return relation_lanes_.Mutable(index);
}
inline ::mapengine_msgs::RelationLane* Line::add_relation_lanes() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.relation_lanes)
  return relation_lanes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::RelationLane >*
Line::mutable_relation_lanes() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.relation_lanes)
  return &relation_lanes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::RelationLane >&
Line::relation_lanes() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.relation_lanes)
  return relation_lanes_;
}

// repeated .mapengine_msgs.DisRange lane_turns = 10;
inline int Line::lane_turns_size() const {
  return lane_turns_.size();
}
inline void Line::clear_lane_turns() {
  lane_turns_.Clear();
}
inline const ::mapengine_msgs::DisRange& Line::lane_turns(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.lane_turns)
  return lane_turns_.Get(index);
}
inline ::mapengine_msgs::DisRange* Line::mutable_lane_turns(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.lane_turns)
  return lane_turns_.Mutable(index);
}
inline ::mapengine_msgs::DisRange* Line::add_lane_turns() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.lane_turns)
  return lane_turns_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
Line::mutable_lane_turns() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.lane_turns)
  return &lane_turns_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
Line::lane_turns() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.lane_turns)
  return lane_turns_;
}

// repeated .mapengine_msgs.DisRange lane_types = 11;
inline int Line::lane_types_size() const {
  return lane_types_.size();
}
inline void Line::clear_lane_types() {
  lane_types_.Clear();
}
inline const ::mapengine_msgs::DisRange& Line::lane_types(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.lane_types)
  return lane_types_.Get(index);
}
inline ::mapengine_msgs::DisRange* Line::mutable_lane_types(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.lane_types)
  return lane_types_.Mutable(index);
}
inline ::mapengine_msgs::DisRange* Line::add_lane_types() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.lane_types)
  return lane_types_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
Line::mutable_lane_types() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.lane_types)
  return &lane_types_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
Line::lane_types() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.lane_types)
  return lane_types_;
}

// repeated .mapengine_msgs.DisRange left_bd_types = 12;
inline int Line::left_bd_types_size() const {
  return left_bd_types_.size();
}
inline void Line::clear_left_bd_types() {
  left_bd_types_.Clear();
}
inline const ::mapengine_msgs::DisRange& Line::left_bd_types(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.left_bd_types)
  return left_bd_types_.Get(index);
}
inline ::mapengine_msgs::DisRange* Line::mutable_left_bd_types(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.left_bd_types)
  return left_bd_types_.Mutable(index);
}
inline ::mapengine_msgs::DisRange* Line::add_left_bd_types() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.left_bd_types)
  return left_bd_types_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
Line::mutable_left_bd_types() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.left_bd_types)
  return &left_bd_types_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
Line::left_bd_types() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.left_bd_types)
  return left_bd_types_;
}

// repeated .mapengine_msgs.DisRange right_bd_types = 13;
inline int Line::right_bd_types_size() const {
  return right_bd_types_.size();
}
inline void Line::clear_right_bd_types() {
  right_bd_types_.Clear();
}
inline const ::mapengine_msgs::DisRange& Line::right_bd_types(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.right_bd_types)
  return right_bd_types_.Get(index);
}
inline ::mapengine_msgs::DisRange* Line::mutable_right_bd_types(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.right_bd_types)
  return right_bd_types_.Mutable(index);
}
inline ::mapengine_msgs::DisRange* Line::add_right_bd_types() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.right_bd_types)
  return right_bd_types_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
Line::mutable_right_bd_types() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.right_bd_types)
  return &right_bd_types_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
Line::right_bd_types() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.right_bd_types)
  return right_bd_types_;
}

// repeated .mapengine_msgs.DisRange dis_to_ends = 14;
inline int Line::dis_to_ends_size() const {
  return dis_to_ends_.size();
}
inline void Line::clear_dis_to_ends() {
  dis_to_ends_.Clear();
}
inline const ::mapengine_msgs::DisRange& Line::dis_to_ends(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.dis_to_ends)
  return dis_to_ends_.Get(index);
}
inline ::mapengine_msgs::DisRange* Line::mutable_dis_to_ends(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.dis_to_ends)
  return dis_to_ends_.Mutable(index);
}
inline ::mapengine_msgs::DisRange* Line::add_dis_to_ends() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.dis_to_ends)
  return dis_to_ends_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
Line::mutable_dis_to_ends() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.dis_to_ends)
  return &dis_to_ends_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
Line::dis_to_ends() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.dis_to_ends)
  return dis_to_ends_;
}

// repeated .mapengine_msgs.DisRange expected_speeds = 15;
inline int Line::expected_speeds_size() const {
  return expected_speeds_.size();
}
inline void Line::clear_expected_speeds() {
  expected_speeds_.Clear();
}
inline const ::mapengine_msgs::DisRange& Line::expected_speeds(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.expected_speeds)
  return expected_speeds_.Get(index);
}
inline ::mapengine_msgs::DisRange* Line::mutable_expected_speeds(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.expected_speeds)
  return expected_speeds_.Mutable(index);
}
inline ::mapengine_msgs::DisRange* Line::add_expected_speeds() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.expected_speeds)
  return expected_speeds_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
Line::mutable_expected_speeds() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.expected_speeds)
  return &expected_speeds_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
Line::expected_speeds() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.expected_speeds)
  return expected_speeds_;
}

// repeated .mapengine_msgs.DisRange left_passable_distances = 16;
inline int Line::left_passable_distances_size() const {
  return left_passable_distances_.size();
}
inline void Line::clear_left_passable_distances() {
  left_passable_distances_.Clear();
}
inline const ::mapengine_msgs::DisRange& Line::left_passable_distances(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.left_passable_distances)
  return left_passable_distances_.Get(index);
}
inline ::mapengine_msgs::DisRange* Line::mutable_left_passable_distances(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.left_passable_distances)
  return left_passable_distances_.Mutable(index);
}
inline ::mapengine_msgs::DisRange* Line::add_left_passable_distances() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.left_passable_distances)
  return left_passable_distances_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
Line::mutable_left_passable_distances() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.left_passable_distances)
  return &left_passable_distances_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
Line::left_passable_distances() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.left_passable_distances)
  return left_passable_distances_;
}

// repeated .mapengine_msgs.DisRange right_passable_distances = 17;
inline int Line::right_passable_distances_size() const {
  return right_passable_distances_.size();
}
inline void Line::clear_right_passable_distances() {
  right_passable_distances_.Clear();
}
inline const ::mapengine_msgs::DisRange& Line::right_passable_distances(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.right_passable_distances)
  return right_passable_distances_.Get(index);
}
inline ::mapengine_msgs::DisRange* Line::mutable_right_passable_distances(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.right_passable_distances)
  return right_passable_distances_.Mutable(index);
}
inline ::mapengine_msgs::DisRange* Line::add_right_passable_distances() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.right_passable_distances)
  return right_passable_distances_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
Line::mutable_right_passable_distances() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.right_passable_distances)
  return &right_passable_distances_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
Line::right_passable_distances() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.right_passable_distances)
  return right_passable_distances_;
}

// repeated .mapengine_msgs.DisRange dis_to_speed_bumps = 18;
inline int Line::dis_to_speed_bumps_size() const {
  return dis_to_speed_bumps_.size();
}
inline void Line::clear_dis_to_speed_bumps() {
  dis_to_speed_bumps_.Clear();
}
inline const ::mapengine_msgs::DisRange& Line::dis_to_speed_bumps(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.dis_to_speed_bumps)
  return dis_to_speed_bumps_.Get(index);
}
inline ::mapengine_msgs::DisRange* Line::mutable_dis_to_speed_bumps(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.dis_to_speed_bumps)
  return dis_to_speed_bumps_.Mutable(index);
}
inline ::mapengine_msgs::DisRange* Line::add_dis_to_speed_bumps() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.dis_to_speed_bumps)
  return dis_to_speed_bumps_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
Line::mutable_dis_to_speed_bumps() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.dis_to_speed_bumps)
  return &dis_to_speed_bumps_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
Line::dis_to_speed_bumps() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.dis_to_speed_bumps)
  return dis_to_speed_bumps_;
}

// repeated .mapengine_msgs.DisRange dis_to_forbid_areas = 19;
inline int Line::dis_to_forbid_areas_size() const {
  return dis_to_forbid_areas_.size();
}
inline void Line::clear_dis_to_forbid_areas() {
  dis_to_forbid_areas_.Clear();
}
inline const ::mapengine_msgs::DisRange& Line::dis_to_forbid_areas(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.dis_to_forbid_areas)
  return dis_to_forbid_areas_.Get(index);
}
inline ::mapengine_msgs::DisRange* Line::mutable_dis_to_forbid_areas(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.dis_to_forbid_areas)
  return dis_to_forbid_areas_.Mutable(index);
}
inline ::mapengine_msgs::DisRange* Line::add_dis_to_forbid_areas() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.dis_to_forbid_areas)
  return dis_to_forbid_areas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
Line::mutable_dis_to_forbid_areas() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.dis_to_forbid_areas)
  return &dis_to_forbid_areas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
Line::dis_to_forbid_areas() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.dis_to_forbid_areas)
  return dis_to_forbid_areas_;
}

// repeated .mapengine_msgs.DisRange dis_to_junctions = 20;
inline int Line::dis_to_junctions_size() const {
  return dis_to_junctions_.size();
}
inline void Line::clear_dis_to_junctions() {
  dis_to_junctions_.Clear();
}
inline const ::mapengine_msgs::DisRange& Line::dis_to_junctions(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.dis_to_junctions)
  return dis_to_junctions_.Get(index);
}
inline ::mapengine_msgs::DisRange* Line::mutable_dis_to_junctions(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.dis_to_junctions)
  return dis_to_junctions_.Mutable(index);
}
inline ::mapengine_msgs::DisRange* Line::add_dis_to_junctions() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.dis_to_junctions)
  return dis_to_junctions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
Line::mutable_dis_to_junctions() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.dis_to_junctions)
  return &dis_to_junctions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
Line::dis_to_junctions() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.dis_to_junctions)
  return dis_to_junctions_;
}

// repeated .mapengine_msgs.DisRange dis_to_crosswalks = 21;
inline int Line::dis_to_crosswalks_size() const {
  return dis_to_crosswalks_.size();
}
inline void Line::clear_dis_to_crosswalks() {
  dis_to_crosswalks_.Clear();
}
inline const ::mapengine_msgs::DisRange& Line::dis_to_crosswalks(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.dis_to_crosswalks)
  return dis_to_crosswalks_.Get(index);
}
inline ::mapengine_msgs::DisRange* Line::mutable_dis_to_crosswalks(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.dis_to_crosswalks)
  return dis_to_crosswalks_.Mutable(index);
}
inline ::mapengine_msgs::DisRange* Line::add_dis_to_crosswalks() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.dis_to_crosswalks)
  return dis_to_crosswalks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
Line::mutable_dis_to_crosswalks() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.dis_to_crosswalks)
  return &dis_to_crosswalks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
Line::dis_to_crosswalks() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.dis_to_crosswalks)
  return dis_to_crosswalks_;
}

// repeated .mapengine_msgs.DisRange dis_to_yield_areas = 22;
inline int Line::dis_to_yield_areas_size() const {
  return dis_to_yield_areas_.size();
}
inline void Line::clear_dis_to_yield_areas() {
  dis_to_yield_areas_.Clear();
}
inline const ::mapengine_msgs::DisRange& Line::dis_to_yield_areas(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.dis_to_yield_areas)
  return dis_to_yield_areas_.Get(index);
}
inline ::mapengine_msgs::DisRange* Line::mutable_dis_to_yield_areas(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.dis_to_yield_areas)
  return dis_to_yield_areas_.Mutable(index);
}
inline ::mapengine_msgs::DisRange* Line::add_dis_to_yield_areas() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.dis_to_yield_areas)
  return dis_to_yield_areas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
Line::mutable_dis_to_yield_areas() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.dis_to_yield_areas)
  return &dis_to_yield_areas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
Line::dis_to_yield_areas() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.dis_to_yield_areas)
  return dis_to_yield_areas_;
}

// repeated .mapengine_msgs.DisRange dis_to_stop_areas = 23;
inline int Line::dis_to_stop_areas_size() const {
  return dis_to_stop_areas_.size();
}
inline void Line::clear_dis_to_stop_areas() {
  dis_to_stop_areas_.Clear();
}
inline const ::mapengine_msgs::DisRange& Line::dis_to_stop_areas(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.dis_to_stop_areas)
  return dis_to_stop_areas_.Get(index);
}
inline ::mapengine_msgs::DisRange* Line::mutable_dis_to_stop_areas(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.dis_to_stop_areas)
  return dis_to_stop_areas_.Mutable(index);
}
inline ::mapengine_msgs::DisRange* Line::add_dis_to_stop_areas() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.dis_to_stop_areas)
  return dis_to_stop_areas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >*
Line::mutable_dis_to_stop_areas() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.dis_to_stop_areas)
  return &dis_to_stop_areas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::DisRange >&
Line::dis_to_stop_areas() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.dis_to_stop_areas)
  return dis_to_stop_areas_;
}

// repeated .mapengine_msgs.AreaRange isolationbelts = 24;
inline int Line::isolationbelts_size() const {
  return isolationbelts_.size();
}
inline void Line::clear_isolationbelts() {
  isolationbelts_.Clear();
}
inline const ::mapengine_msgs::AreaRange& Line::isolationbelts(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.isolationbelts)
  return isolationbelts_.Get(index);
}
inline ::mapengine_msgs::AreaRange* Line::mutable_isolationbelts(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.isolationbelts)
  return isolationbelts_.Mutable(index);
}
inline ::mapengine_msgs::AreaRange* Line::add_isolationbelts() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.isolationbelts)
  return isolationbelts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::AreaRange >*
Line::mutable_isolationbelts() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.isolationbelts)
  return &isolationbelts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::AreaRange >&
Line::isolationbelts() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.isolationbelts)
  return isolationbelts_;
}

// float laneside_left = 25;
inline void Line::clear_laneside_left() {
  laneside_left_ = 0;
}
inline float Line::laneside_left() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.laneside_left)
  return laneside_left_;
}
inline void Line::set_laneside_left(float value) {
  
  laneside_left_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Line.laneside_left)
}

// float laneside_right = 26;
inline void Line::clear_laneside_right() {
  laneside_right_ = 0;
}
inline float Line::laneside_right() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.laneside_right)
  return laneside_right_;
}
inline void Line::set_laneside_right(float value) {
  
  laneside_right_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Line.laneside_right)
}

// bool contain_light_junction = 27;
inline void Line::clear_contain_light_junction() {
  contain_light_junction_ = false;
}
inline bool Line::contain_light_junction() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.contain_light_junction)
  return contain_light_junction_;
}
inline void Line::set_contain_light_junction(bool value) {
  
  contain_light_junction_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Line.contain_light_junction)
}

// float contain_light_s = 28;
inline void Line::clear_contain_light_s() {
  contain_light_s_ = 0;
}
inline float Line::contain_light_s() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.contain_light_s)
  return contain_light_s_;
}
inline void Line::set_contain_light_s(float value) {
  
  contain_light_s_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Line.contain_light_s)
}

// repeated .mapengine_msgs.TrafficLight trafficlights = 29;
inline int Line::trafficlights_size() const {
  return trafficlights_.size();
}
inline void Line::clear_trafficlights() {
  trafficlights_.Clear();
}
inline const ::mapengine_msgs::TrafficLight& Line::trafficlights(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.trafficlights)
  return trafficlights_.Get(index);
}
inline ::mapengine_msgs::TrafficLight* Line::mutable_trafficlights(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.trafficlights)
  return trafficlights_.Mutable(index);
}
inline ::mapengine_msgs::TrafficLight* Line::add_trafficlights() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.trafficlights)
  return trafficlights_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::TrafficLight >*
Line::mutable_trafficlights() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.trafficlights)
  return &trafficlights_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::TrafficLight >&
Line::trafficlights() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.trafficlights)
  return trafficlights_;
}

// repeated .mapengine_msgs.ReferencePoint map_points = 30;
inline int Line::map_points_size() const {
  return map_points_.size();
}
inline void Line::clear_map_points() {
  map_points_.Clear();
}
inline const ::mapengine_msgs::ReferencePoint& Line::map_points(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.map_points)
  return map_points_.Get(index);
}
inline ::mapengine_msgs::ReferencePoint* Line::mutable_map_points(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.map_points)
  return map_points_.Mutable(index);
}
inline ::mapengine_msgs::ReferencePoint* Line::add_map_points() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.map_points)
  return map_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::ReferencePoint >*
Line::mutable_map_points() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.map_points)
  return &map_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::ReferencePoint >&
Line::map_points() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.map_points)
  return map_points_;
}

// repeated .mapengine_msgs.ReferencePoint left_boundary = 31;
inline int Line::left_boundary_size() const {
  return left_boundary_.size();
}
inline void Line::clear_left_boundary() {
  left_boundary_.Clear();
}
inline const ::mapengine_msgs::ReferencePoint& Line::left_boundary(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.left_boundary)
  return left_boundary_.Get(index);
}
inline ::mapengine_msgs::ReferencePoint* Line::mutable_left_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.left_boundary)
  return left_boundary_.Mutable(index);
}
inline ::mapengine_msgs::ReferencePoint* Line::add_left_boundary() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.left_boundary)
  return left_boundary_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::ReferencePoint >*
Line::mutable_left_boundary() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.left_boundary)
  return &left_boundary_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::ReferencePoint >&
Line::left_boundary() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.left_boundary)
  return left_boundary_;
}

// repeated .mapengine_msgs.ReferencePoint right_boundary = 32;
inline int Line::right_boundary_size() const {
  return right_boundary_.size();
}
inline void Line::clear_right_boundary() {
  right_boundary_.Clear();
}
inline const ::mapengine_msgs::ReferencePoint& Line::right_boundary(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Line.right_boundary)
  return right_boundary_.Get(index);
}
inline ::mapengine_msgs::ReferencePoint* Line::mutable_right_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Line.right_boundary)
  return right_boundary_.Mutable(index);
}
inline ::mapengine_msgs::ReferencePoint* Line::add_right_boundary() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Line.right_boundary)
  return right_boundary_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::ReferencePoint >*
Line::mutable_right_boundary() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Line.right_boundary)
  return &right_boundary_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::ReferencePoint >&
Line::right_boundary() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Line.right_boundary)
  return right_boundary_;
}

// -------------------------------------------------------------------

// LineList

// .mapengine_msgs.Line frontline = 1;
inline bool LineList::has_frontline() const {
  return this != internal_default_instance() && frontline_ != NULL;
}
inline void LineList::clear_frontline() {
  if (GetArenaNoVirtual() == NULL && frontline_ != NULL) {
    delete frontline_;
  }
  frontline_ = NULL;
}
inline const ::mapengine_msgs::Line& LineList::frontline() const {
  const ::mapengine_msgs::Line* p = frontline_;
  // @@protoc_insertion_point(field_get:mapengine_msgs.LineList.frontline)
  return p != NULL ? *p : *reinterpret_cast<const ::mapengine_msgs::Line*>(
      &::mapengine_msgs::_Line_default_instance_);
}
inline ::mapengine_msgs::Line* LineList::release_frontline() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.LineList.frontline)
  
  ::mapengine_msgs::Line* temp = frontline_;
  frontline_ = NULL;
  return temp;
}
inline ::mapengine_msgs::Line* LineList::mutable_frontline() {
  
  if (frontline_ == NULL) {
    frontline_ = new ::mapengine_msgs::Line;
  }
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.LineList.frontline)
  return frontline_;
}
inline void LineList::set_allocated_frontline(::mapengine_msgs::Line* frontline) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete frontline_;
  }
  if (frontline) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      frontline = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, frontline, submessage_arena);
    }
    
  } else {
    
  }
  frontline_ = frontline;
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.LineList.frontline)
}

// repeated .mapengine_msgs.Line backlines = 2;
inline int LineList::backlines_size() const {
  return backlines_.size();
}
inline void LineList::clear_backlines() {
  backlines_.Clear();
}
inline const ::mapengine_msgs::Line& LineList::backlines(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.LineList.backlines)
  return backlines_.Get(index);
}
inline ::mapengine_msgs::Line* LineList::mutable_backlines(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.LineList.backlines)
  return backlines_.Mutable(index);
}
inline ::mapengine_msgs::Line* LineList::add_backlines() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.LineList.backlines)
  return backlines_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::Line >*
LineList::mutable_backlines() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.LineList.backlines)
  return &backlines_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::Line >&
LineList::backlines() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.LineList.backlines)
  return backlines_;
}

// double dis_lc = 3;
inline void LineList::clear_dis_lc() {
  dis_lc_ = 0;
}
inline double LineList::dis_lc() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.LineList.dis_lc)
  return dis_lc_;
}
inline void LineList::set_dis_lc(double value) {
  
  dis_lc_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.LineList.dis_lc)
}

// int32 first_lc_time = 4;
inline void LineList::clear_first_lc_time() {
  first_lc_time_ = 0;
}
inline ::google::protobuf::int32 LineList::first_lc_time() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.LineList.first_lc_time)
  return first_lc_time_;
}
inline void LineList::set_first_lc_time(::google::protobuf::int32 value) {
  
  first_lc_time_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.LineList.first_lc_time)
}

// int32 first_lc_index = 5;
inline void LineList::clear_first_lc_index() {
  first_lc_index_ = 0;
}
inline ::google::protobuf::int32 LineList::first_lc_index() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.LineList.first_lc_index)
  return first_lc_index_;
}
inline void LineList::set_first_lc_index(::google::protobuf::int32 value) {
  
  first_lc_index_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.LineList.first_lc_index)
}

// int32 all_lc_time = 6;
inline void LineList::clear_all_lc_time() {
  all_lc_time_ = 0;
}
inline ::google::protobuf::int32 LineList::all_lc_time() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.LineList.all_lc_time)
  return all_lc_time_;
}
inline void LineList::set_all_lc_time(::google::protobuf::int32 value) {
  
  all_lc_time_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.LineList.all_lc_time)
}

// int32 global_cost = 7;
inline void LineList::clear_global_cost() {
  global_cost_ = 0;
}
inline ::google::protobuf::int32 LineList::global_cost() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.LineList.global_cost)
  return global_cost_;
}
inline void LineList::set_global_cost(::google::protobuf::int32 value) {
  
  global_cost_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.LineList.global_cost)
}

// -------------------------------------------------------------------

// MapInfo

// int32 current_line_index = 1;
inline void MapInfo::clear_current_line_index() {
  current_line_index_ = 0;
}
inline ::google::protobuf::int32 MapInfo::current_line_index() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.MapInfo.current_line_index)
  return current_line_index_;
}
inline void MapInfo::set_current_line_index(::google::protobuf::int32 value) {
  
  current_line_index_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.MapInfo.current_line_index)
}

// repeated .mapengine_msgs.LineList alllinelists = 2;
inline int MapInfo::alllinelists_size() const {
  return alllinelists_.size();
}
inline void MapInfo::clear_alllinelists() {
  alllinelists_.Clear();
}
inline const ::mapengine_msgs::LineList& MapInfo::alllinelists(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.MapInfo.alllinelists)
  return alllinelists_.Get(index);
}
inline ::mapengine_msgs::LineList* MapInfo::mutable_alllinelists(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.MapInfo.alllinelists)
  return alllinelists_.Mutable(index);
}
inline ::mapengine_msgs::LineList* MapInfo::add_alllinelists() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.MapInfo.alllinelists)
  return alllinelists_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::LineList >*
MapInfo::mutable_alllinelists() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.MapInfo.alllinelists)
  return &alllinelists_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::LineList >&
MapInfo::alllinelists() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.MapInfo.alllinelists)
  return alllinelists_;
}

// .mapengine_msgs.LineList revlinelist = 3;
inline bool MapInfo::has_revlinelist() const {
  return this != internal_default_instance() && revlinelist_ != NULL;
}
inline void MapInfo::clear_revlinelist() {
  if (GetArenaNoVirtual() == NULL && revlinelist_ != NULL) {
    delete revlinelist_;
  }
  revlinelist_ = NULL;
}
inline const ::mapengine_msgs::LineList& MapInfo::revlinelist() const {
  const ::mapengine_msgs::LineList* p = revlinelist_;
  // @@protoc_insertion_point(field_get:mapengine_msgs.MapInfo.revlinelist)
  return p != NULL ? *p : *reinterpret_cast<const ::mapengine_msgs::LineList*>(
      &::mapengine_msgs::_LineList_default_instance_);
}
inline ::mapengine_msgs::LineList* MapInfo::release_revlinelist() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.MapInfo.revlinelist)
  
  ::mapengine_msgs::LineList* temp = revlinelist_;
  revlinelist_ = NULL;
  return temp;
}
inline ::mapengine_msgs::LineList* MapInfo::mutable_revlinelist() {
  
  if (revlinelist_ == NULL) {
    revlinelist_ = new ::mapengine_msgs::LineList;
  }
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.MapInfo.revlinelist)
  return revlinelist_;
}
inline void MapInfo::set_allocated_revlinelist(::mapengine_msgs::LineList* revlinelist) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete revlinelist_;
  }
  if (revlinelist) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      revlinelist = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, revlinelist, submessage_arena);
    }
    
  } else {
    
  }
  revlinelist_ = revlinelist;
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.MapInfo.revlinelist)
}

// .mapengine_msgs.Point startpoint = 4;
inline bool MapInfo::has_startpoint() const {
  return this != internal_default_instance() && startpoint_ != NULL;
}
inline void MapInfo::clear_startpoint() {
  if (GetArenaNoVirtual() == NULL && startpoint_ != NULL) {
    delete startpoint_;
  }
  startpoint_ = NULL;
}
inline const ::mapengine_msgs::Point& MapInfo::startpoint() const {
  const ::mapengine_msgs::Point* p = startpoint_;
  // @@protoc_insertion_point(field_get:mapengine_msgs.MapInfo.startpoint)
  return p != NULL ? *p : *reinterpret_cast<const ::mapengine_msgs::Point*>(
      &::mapengine_msgs::_Point_default_instance_);
}
inline ::mapengine_msgs::Point* MapInfo::release_startpoint() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.MapInfo.startpoint)
  
  ::mapengine_msgs::Point* temp = startpoint_;
  startpoint_ = NULL;
  return temp;
}
inline ::mapengine_msgs::Point* MapInfo::mutable_startpoint() {
  
  if (startpoint_ == NULL) {
    startpoint_ = new ::mapengine_msgs::Point;
  }
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.MapInfo.startpoint)
  return startpoint_;
}
inline void MapInfo::set_allocated_startpoint(::mapengine_msgs::Point* startpoint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete startpoint_;
  }
  if (startpoint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      startpoint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, startpoint, submessage_arena);
    }
    
  } else {
    
  }
  startpoint_ = startpoint;
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.MapInfo.startpoint)
}

// .mapengine_msgs.Point endpoint = 5;
inline bool MapInfo::has_endpoint() const {
  return this != internal_default_instance() && endpoint_ != NULL;
}
inline void MapInfo::clear_endpoint() {
  if (GetArenaNoVirtual() == NULL && endpoint_ != NULL) {
    delete endpoint_;
  }
  endpoint_ = NULL;
}
inline const ::mapengine_msgs::Point& MapInfo::endpoint() const {
  const ::mapengine_msgs::Point* p = endpoint_;
  // @@protoc_insertion_point(field_get:mapengine_msgs.MapInfo.endpoint)
  return p != NULL ? *p : *reinterpret_cast<const ::mapengine_msgs::Point*>(
      &::mapengine_msgs::_Point_default_instance_);
}
inline ::mapengine_msgs::Point* MapInfo::release_endpoint() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.MapInfo.endpoint)
  
  ::mapengine_msgs::Point* temp = endpoint_;
  endpoint_ = NULL;
  return temp;
}
inline ::mapengine_msgs::Point* MapInfo::mutable_endpoint() {
  
  if (endpoint_ == NULL) {
    endpoint_ = new ::mapengine_msgs::Point;
  }
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.MapInfo.endpoint)
  return endpoint_;
}
inline void MapInfo::set_allocated_endpoint(::mapengine_msgs::Point* endpoint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete endpoint_;
  }
  if (endpoint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      endpoint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, endpoint, submessage_arena);
    }
    
  } else {
    
  }
  endpoint_ = endpoint;
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.MapInfo.endpoint)
}

// float dis2endpoint = 6;
inline void MapInfo::clear_dis2endpoint() {
  dis2endpoint_ = 0;
}
inline float MapInfo::dis2endpoint() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.MapInfo.dis2endpoint)
  return dis2endpoint_;
}
inline void MapInfo::set_dis2endpoint(float value) {
  
  dis2endpoint_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.MapInfo.dis2endpoint)
}

// bool change_task = 7;
inline void MapInfo::clear_change_task() {
  change_task_ = false;
}
inline bool MapInfo::change_task() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.MapInfo.change_task)
  return change_task_;
}
inline void MapInfo::set_change_task(bool value) {
  
  change_task_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.MapInfo.change_task)
}

// -------------------------------------------------------------------

// GlobalPathCommand

// .common_msgs.Header header = 1;
inline bool GlobalPathCommand::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::common_msgs::Header& GlobalPathCommand::header() const {
  const ::common_msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:mapengine_msgs.GlobalPathCommand.header)
  return p != NULL ? *p : *reinterpret_cast<const ::common_msgs::Header*>(
      &::common_msgs::_Header_default_instance_);
}
inline ::common_msgs::Header* GlobalPathCommand::release_header() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.GlobalPathCommand.header)
  
  ::common_msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::common_msgs::Header* GlobalPathCommand::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::common_msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.GlobalPathCommand.header)
  return header_;
}
inline void GlobalPathCommand::set_allocated_header(::common_msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.GlobalPathCommand.header)
}

// int32 mission_command = 2;
inline void GlobalPathCommand::clear_mission_command() {
  mission_command_ = 0;
}
inline ::google::protobuf::int32 GlobalPathCommand::mission_command() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.GlobalPathCommand.mission_command)
  return mission_command_;
}
inline void GlobalPathCommand::set_mission_command(::google::protobuf::int32 value) {
  
  mission_command_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.GlobalPathCommand.mission_command)
}

// repeated .mapengine_msgs.MissionContent mission_request_vec = 3;
inline int GlobalPathCommand::mission_request_vec_size() const {
  return mission_request_vec_.size();
}
inline void GlobalPathCommand::clear_mission_request_vec() {
  mission_request_vec_.Clear();
}
inline const ::mapengine_msgs::MissionContent& GlobalPathCommand::mission_request_vec(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.GlobalPathCommand.mission_request_vec)
  return mission_request_vec_.Get(index);
}
inline ::mapengine_msgs::MissionContent* GlobalPathCommand::mutable_mission_request_vec(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.GlobalPathCommand.mission_request_vec)
  return mission_request_vec_.Mutable(index);
}
inline ::mapengine_msgs::MissionContent* GlobalPathCommand::add_mission_request_vec() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.GlobalPathCommand.mission_request_vec)
  return mission_request_vec_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::MissionContent >*
GlobalPathCommand::mutable_mission_request_vec() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.GlobalPathCommand.mission_request_vec)
  return &mission_request_vec_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::MissionContent >&
GlobalPathCommand::mission_request_vec() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.GlobalPathCommand.mission_request_vec)
  return mission_request_vec_;
}

// -------------------------------------------------------------------

// GlobalPathResult

// .common_msgs.Header header = 1;
inline bool GlobalPathResult::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::common_msgs::Header& GlobalPathResult::header() const {
  const ::common_msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:mapengine_msgs.GlobalPathResult.header)
  return p != NULL ? *p : *reinterpret_cast<const ::common_msgs::Header*>(
      &::common_msgs::_Header_default_instance_);
}
inline ::common_msgs::Header* GlobalPathResult::release_header() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.GlobalPathResult.header)
  
  ::common_msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::common_msgs::Header* GlobalPathResult::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::common_msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.GlobalPathResult.header)
  return header_;
}
inline void GlobalPathResult::set_allocated_header(::common_msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.GlobalPathResult.header)
}

// int32 result = 2;
inline void GlobalPathResult::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 GlobalPathResult::result() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.GlobalPathResult.result)
  return result_;
}
inline void GlobalPathResult::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.GlobalPathResult.result)
}

// repeated .mapengine_msgs.MissionContent mission_response_vec = 3;
inline int GlobalPathResult::mission_response_vec_size() const {
  return mission_response_vec_.size();
}
inline void GlobalPathResult::clear_mission_response_vec() {
  mission_response_vec_.Clear();
}
inline const ::mapengine_msgs::MissionContent& GlobalPathResult::mission_response_vec(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.GlobalPathResult.mission_response_vec)
  return mission_response_vec_.Get(index);
}
inline ::mapengine_msgs::MissionContent* GlobalPathResult::mutable_mission_response_vec(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.GlobalPathResult.mission_response_vec)
  return mission_response_vec_.Mutable(index);
}
inline ::mapengine_msgs::MissionContent* GlobalPathResult::add_mission_response_vec() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.GlobalPathResult.mission_response_vec)
  return mission_response_vec_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::MissionContent >*
GlobalPathResult::mutable_mission_response_vec() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.GlobalPathResult.mission_response_vec)
  return &mission_response_vec_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::MissionContent >&
GlobalPathResult::mission_response_vec() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.GlobalPathResult.mission_response_vec)
  return mission_response_vec_;
}

// repeated .mapengine_msgs.MissionRoute mission_route_vec = 4;
inline int GlobalPathResult::mission_route_vec_size() const {
  return mission_route_vec_.size();
}
inline void GlobalPathResult::clear_mission_route_vec() {
  mission_route_vec_.Clear();
}
inline const ::mapengine_msgs::MissionRoute& GlobalPathResult::mission_route_vec(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.GlobalPathResult.mission_route_vec)
  return mission_route_vec_.Get(index);
}
inline ::mapengine_msgs::MissionRoute* GlobalPathResult::mutable_mission_route_vec(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.GlobalPathResult.mission_route_vec)
  return mission_route_vec_.Mutable(index);
}
inline ::mapengine_msgs::MissionRoute* GlobalPathResult::add_mission_route_vec() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.GlobalPathResult.mission_route_vec)
  return mission_route_vec_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::MissionRoute >*
GlobalPathResult::mutable_mission_route_vec() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.GlobalPathResult.mission_route_vec)
  return &mission_route_vec_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::MissionRoute >&
GlobalPathResult::mission_route_vec() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.GlobalPathResult.mission_route_vec)
  return mission_route_vec_;
}

// -------------------------------------------------------------------

// NavigationCommand

// int32 mission_id = 1;
inline void NavigationCommand::clear_mission_id() {
  mission_id_ = 0;
}
inline ::google::protobuf::int32 NavigationCommand::mission_id() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.NavigationCommand.mission_id)
  return mission_id_;
}
inline void NavigationCommand::set_mission_id(::google::protobuf::int32 value) {
  
  mission_id_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.NavigationCommand.mission_id)
}

// int32 command = 2;
inline void NavigationCommand::clear_command() {
  command_ = 0;
}
inline ::google::protobuf::int32 NavigationCommand::command() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.NavigationCommand.command)
  return command_;
}
inline void NavigationCommand::set_command(::google::protobuf::int32 value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.NavigationCommand.command)
}

// .mapengine_msgs.MissionContent content = 3;
inline bool NavigationCommand::has_content() const {
  return this != internal_default_instance() && content_ != NULL;
}
inline void NavigationCommand::clear_content() {
  if (GetArenaNoVirtual() == NULL && content_ != NULL) {
    delete content_;
  }
  content_ = NULL;
}
inline const ::mapengine_msgs::MissionContent& NavigationCommand::content() const {
  const ::mapengine_msgs::MissionContent* p = content_;
  // @@protoc_insertion_point(field_get:mapengine_msgs.NavigationCommand.content)
  return p != NULL ? *p : *reinterpret_cast<const ::mapengine_msgs::MissionContent*>(
      &::mapengine_msgs::_MissionContent_default_instance_);
}
inline ::mapengine_msgs::MissionContent* NavigationCommand::release_content() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.NavigationCommand.content)
  
  ::mapengine_msgs::MissionContent* temp = content_;
  content_ = NULL;
  return temp;
}
inline ::mapengine_msgs::MissionContent* NavigationCommand::mutable_content() {
  
  if (content_ == NULL) {
    content_ = new ::mapengine_msgs::MissionContent;
  }
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.NavigationCommand.content)
  return content_;
}
inline void NavigationCommand::set_allocated_content(::mapengine_msgs::MissionContent* content) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete content_;
  }
  if (content) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      content = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    
  } else {
    
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.NavigationCommand.content)
}

// -------------------------------------------------------------------

// NavigationResult

// int32 cur_mission_id = 1;
inline void NavigationResult::clear_cur_mission_id() {
  cur_mission_id_ = 0;
}
inline ::google::protobuf::int32 NavigationResult::cur_mission_id() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.NavigationResult.cur_mission_id)
  return cur_mission_id_;
}
inline void NavigationResult::set_cur_mission_id(::google::protobuf::int32 value) {
  
  cur_mission_id_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.NavigationResult.cur_mission_id)
}

// int32 result = 2;
inline void NavigationResult::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 NavigationResult::result() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.NavigationResult.result)
  return result_;
}
inline void NavigationResult::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.NavigationResult.result)
}

// -------------------------------------------------------------------

// Navigation

// .common_msgs.Header header = 1;
inline bool Navigation::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::common_msgs::Header& Navigation::header() const {
  const ::common_msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:mapengine_msgs.Navigation.header)
  return p != NULL ? *p : *reinterpret_cast<const ::common_msgs::Header*>(
      &::common_msgs::_Header_default_instance_);
}
inline ::common_msgs::Header* Navigation::release_header() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.Navigation.header)
  
  ::common_msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::common_msgs::Header* Navigation::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::common_msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Navigation.header)
  return header_;
}
inline void Navigation::set_allocated_header(::common_msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.Navigation.header)
}

// int32 id = 2;
inline void Navigation::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Navigation::id() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Navigation.id)
  return id_;
}
inline void Navigation::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Navigation.id)
}

// int32 map_type = 3;
inline void Navigation::clear_map_type() {
  map_type_ = 0;
}
inline ::google::protobuf::int32 Navigation::map_type() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Navigation.map_type)
  return map_type_;
}
inline void Navigation::set_map_type(::google::protobuf::int32 value) {
  
  map_type_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Navigation.map_type)
}

// int32 status = 4;
inline void Navigation::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 Navigation::status() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Navigation.status)
  return status_;
}
inline void Navigation::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Navigation.status)
}

// repeated .mapengine_msgs.FuncInfo last_vision_info = 5;
inline int Navigation::last_vision_info_size() const {
  return last_vision_info_.size();
}
inline void Navigation::clear_last_vision_info() {
  last_vision_info_.Clear();
}
inline const ::mapengine_msgs::FuncInfo& Navigation::last_vision_info(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Navigation.last_vision_info)
  return last_vision_info_.Get(index);
}
inline ::mapengine_msgs::FuncInfo* Navigation::mutable_last_vision_info(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Navigation.last_vision_info)
  return last_vision_info_.Mutable(index);
}
inline ::mapengine_msgs::FuncInfo* Navigation::add_last_vision_info() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Navigation.last_vision_info)
  return last_vision_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::FuncInfo >*
Navigation::mutable_last_vision_info() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Navigation.last_vision_info)
  return &last_vision_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::FuncInfo >&
Navigation::last_vision_info() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Navigation.last_vision_info)
  return last_vision_info_;
}

// repeated .mapengine_msgs.FuncInfo vision_info = 6;
inline int Navigation::vision_info_size() const {
  return vision_info_.size();
}
inline void Navigation::clear_vision_info() {
  vision_info_.Clear();
}
inline const ::mapengine_msgs::FuncInfo& Navigation::vision_info(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Navigation.vision_info)
  return vision_info_.Get(index);
}
inline ::mapengine_msgs::FuncInfo* Navigation::mutable_vision_info(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Navigation.vision_info)
  return vision_info_.Mutable(index);
}
inline ::mapengine_msgs::FuncInfo* Navigation::add_vision_info() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Navigation.vision_info)
  return vision_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::FuncInfo >*
Navigation::mutable_vision_info() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Navigation.vision_info)
  return &vision_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::FuncInfo >&
Navigation::vision_info() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Navigation.vision_info)
  return vision_info_;
}

// .mapengine_msgs.MapInfo map_info = 7;
inline bool Navigation::has_map_info() const {
  return this != internal_default_instance() && map_info_ != NULL;
}
inline void Navigation::clear_map_info() {
  if (GetArenaNoVirtual() == NULL && map_info_ != NULL) {
    delete map_info_;
  }
  map_info_ = NULL;
}
inline const ::mapengine_msgs::MapInfo& Navigation::map_info() const {
  const ::mapengine_msgs::MapInfo* p = map_info_;
  // @@protoc_insertion_point(field_get:mapengine_msgs.Navigation.map_info)
  return p != NULL ? *p : *reinterpret_cast<const ::mapengine_msgs::MapInfo*>(
      &::mapengine_msgs::_MapInfo_default_instance_);
}
inline ::mapengine_msgs::MapInfo* Navigation::release_map_info() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.Navigation.map_info)
  
  ::mapengine_msgs::MapInfo* temp = map_info_;
  map_info_ = NULL;
  return temp;
}
inline ::mapengine_msgs::MapInfo* Navigation::mutable_map_info() {
  
  if (map_info_ == NULL) {
    map_info_ = new ::mapengine_msgs::MapInfo;
  }
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Navigation.map_info)
  return map_info_;
}
inline void Navigation::set_allocated_map_info(::mapengine_msgs::MapInfo* map_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete map_info_;
  }
  if (map_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map_info, submessage_arena);
    }
    
  } else {
    
  }
  map_info_ = map_info;
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.Navigation.map_info)
}

// .mapengine_msgs.ImuInfo last_imu_data = 8;
inline bool Navigation::has_last_imu_data() const {
  return this != internal_default_instance() && last_imu_data_ != NULL;
}
inline void Navigation::clear_last_imu_data() {
  if (GetArenaNoVirtual() == NULL && last_imu_data_ != NULL) {
    delete last_imu_data_;
  }
  last_imu_data_ = NULL;
}
inline const ::mapengine_msgs::ImuInfo& Navigation::last_imu_data() const {
  const ::mapengine_msgs::ImuInfo* p = last_imu_data_;
  // @@protoc_insertion_point(field_get:mapengine_msgs.Navigation.last_imu_data)
  return p != NULL ? *p : *reinterpret_cast<const ::mapengine_msgs::ImuInfo*>(
      &::mapengine_msgs::_ImuInfo_default_instance_);
}
inline ::mapengine_msgs::ImuInfo* Navigation::release_last_imu_data() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.Navigation.last_imu_data)
  
  ::mapengine_msgs::ImuInfo* temp = last_imu_data_;
  last_imu_data_ = NULL;
  return temp;
}
inline ::mapengine_msgs::ImuInfo* Navigation::mutable_last_imu_data() {
  
  if (last_imu_data_ == NULL) {
    last_imu_data_ = new ::mapengine_msgs::ImuInfo;
  }
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Navigation.last_imu_data)
  return last_imu_data_;
}
inline void Navigation::set_allocated_last_imu_data(::mapengine_msgs::ImuInfo* last_imu_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete last_imu_data_;
  }
  if (last_imu_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      last_imu_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_imu_data, submessage_arena);
    }
    
  } else {
    
  }
  last_imu_data_ = last_imu_data;
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.Navigation.last_imu_data)
}

// .mapengine_msgs.ImuInfo imu_data = 9;
inline bool Navigation::has_imu_data() const {
  return this != internal_default_instance() && imu_data_ != NULL;
}
inline void Navigation::clear_imu_data() {
  if (GetArenaNoVirtual() == NULL && imu_data_ != NULL) {
    delete imu_data_;
  }
  imu_data_ = NULL;
}
inline const ::mapengine_msgs::ImuInfo& Navigation::imu_data() const {
  const ::mapengine_msgs::ImuInfo* p = imu_data_;
  // @@protoc_insertion_point(field_get:mapengine_msgs.Navigation.imu_data)
  return p != NULL ? *p : *reinterpret_cast<const ::mapengine_msgs::ImuInfo*>(
      &::mapengine_msgs::_ImuInfo_default_instance_);
}
inline ::mapengine_msgs::ImuInfo* Navigation::release_imu_data() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.Navigation.imu_data)
  
  ::mapengine_msgs::ImuInfo* temp = imu_data_;
  imu_data_ = NULL;
  return temp;
}
inline ::mapengine_msgs::ImuInfo* Navigation::mutable_imu_data() {
  
  if (imu_data_ == NULL) {
    imu_data_ = new ::mapengine_msgs::ImuInfo;
  }
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Navigation.imu_data)
  return imu_data_;
}
inline void Navigation::set_allocated_imu_data(::mapengine_msgs::ImuInfo* imu_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete imu_data_;
  }
  if (imu_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      imu_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, imu_data, submessage_arena);
    }
    
  } else {
    
  }
  imu_data_ = imu_data;
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.Navigation.imu_data)
}

// .mapengine_msgs.ImuInfo last_correct_imu_data = 10;
inline bool Navigation::has_last_correct_imu_data() const {
  return this != internal_default_instance() && last_correct_imu_data_ != NULL;
}
inline void Navigation::clear_last_correct_imu_data() {
  if (GetArenaNoVirtual() == NULL && last_correct_imu_data_ != NULL) {
    delete last_correct_imu_data_;
  }
  last_correct_imu_data_ = NULL;
}
inline const ::mapengine_msgs::ImuInfo& Navigation::last_correct_imu_data() const {
  const ::mapengine_msgs::ImuInfo* p = last_correct_imu_data_;
  // @@protoc_insertion_point(field_get:mapengine_msgs.Navigation.last_correct_imu_data)
  return p != NULL ? *p : *reinterpret_cast<const ::mapengine_msgs::ImuInfo*>(
      &::mapengine_msgs::_ImuInfo_default_instance_);
}
inline ::mapengine_msgs::ImuInfo* Navigation::release_last_correct_imu_data() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.Navigation.last_correct_imu_data)
  
  ::mapengine_msgs::ImuInfo* temp = last_correct_imu_data_;
  last_correct_imu_data_ = NULL;
  return temp;
}
inline ::mapengine_msgs::ImuInfo* Navigation::mutable_last_correct_imu_data() {
  
  if (last_correct_imu_data_ == NULL) {
    last_correct_imu_data_ = new ::mapengine_msgs::ImuInfo;
  }
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Navigation.last_correct_imu_data)
  return last_correct_imu_data_;
}
inline void Navigation::set_allocated_last_correct_imu_data(::mapengine_msgs::ImuInfo* last_correct_imu_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete last_correct_imu_data_;
  }
  if (last_correct_imu_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      last_correct_imu_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_correct_imu_data, submessage_arena);
    }
    
  } else {
    
  }
  last_correct_imu_data_ = last_correct_imu_data;
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.Navigation.last_correct_imu_data)
}

// .mapengine_msgs.ImuInfo correct_imu_data = 11;
inline bool Navigation::has_correct_imu_data() const {
  return this != internal_default_instance() && correct_imu_data_ != NULL;
}
inline void Navigation::clear_correct_imu_data() {
  if (GetArenaNoVirtual() == NULL && correct_imu_data_ != NULL) {
    delete correct_imu_data_;
  }
  correct_imu_data_ = NULL;
}
inline const ::mapengine_msgs::ImuInfo& Navigation::correct_imu_data() const {
  const ::mapengine_msgs::ImuInfo* p = correct_imu_data_;
  // @@protoc_insertion_point(field_get:mapengine_msgs.Navigation.correct_imu_data)
  return p != NULL ? *p : *reinterpret_cast<const ::mapengine_msgs::ImuInfo*>(
      &::mapengine_msgs::_ImuInfo_default_instance_);
}
inline ::mapengine_msgs::ImuInfo* Navigation::release_correct_imu_data() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.Navigation.correct_imu_data)
  
  ::mapengine_msgs::ImuInfo* temp = correct_imu_data_;
  correct_imu_data_ = NULL;
  return temp;
}
inline ::mapengine_msgs::ImuInfo* Navigation::mutable_correct_imu_data() {
  
  if (correct_imu_data_ == NULL) {
    correct_imu_data_ = new ::mapengine_msgs::ImuInfo;
  }
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Navigation.correct_imu_data)
  return correct_imu_data_;
}
inline void Navigation::set_allocated_correct_imu_data(::mapengine_msgs::ImuInfo* correct_imu_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete correct_imu_data_;
  }
  if (correct_imu_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      correct_imu_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, correct_imu_data, submessage_arena);
    }
    
  } else {
    
  }
  correct_imu_data_ = correct_imu_data;
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.Navigation.correct_imu_data)
}

// -------------------------------------------------------------------

// NavMission

// .common_msgs.Header header = 1;
inline bool NavMission::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::common_msgs::Header& NavMission::header() const {
  const ::common_msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:mapengine_msgs.NavMission.header)
  return p != NULL ? *p : *reinterpret_cast<const ::common_msgs::Header*>(
      &::common_msgs::_Header_default_instance_);
}
inline ::common_msgs::Header* NavMission::release_header() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.NavMission.header)
  
  ::common_msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::common_msgs::Header* NavMission::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::common_msgs::Header;
  }
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.NavMission.header)
  return header_;
}
inline void NavMission::set_allocated_header(::common_msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.NavMission.header)
}

// int32 id = 2;
inline void NavMission::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 NavMission::id() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.NavMission.id)
  return id_;
}
inline void NavMission::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.NavMission.id)
}

// int32 type = 3;
inline void NavMission::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 NavMission::type() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.NavMission.type)
  return type_;
}
inline void NavMission::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.NavMission.type)
}

// int32 status = 4;
inline void NavMission::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 NavMission::status() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.NavMission.status)
  return status_;
}
inline void NavMission::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.NavMission.status)
}

// float cur_mission_total = 5;
inline void NavMission::clear_cur_mission_total() {
  cur_mission_total_ = 0;
}
inline float NavMission::cur_mission_total() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.NavMission.cur_mission_total)
  return cur_mission_total_;
}
inline void NavMission::set_cur_mission_total(float value) {
  
  cur_mission_total_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.NavMission.cur_mission_total)
}

// float cur_mission_left = 6;
inline void NavMission::clear_cur_mission_left() {
  cur_mission_left_ = 0;
}
inline float NavMission::cur_mission_left() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.NavMission.cur_mission_left)
  return cur_mission_left_;
}
inline void NavMission::set_cur_mission_left(float value) {
  
  cur_mission_left_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.NavMission.cur_mission_left)
}

// float all_mission_total = 7;
inline void NavMission::clear_all_mission_total() {
  all_mission_total_ = 0;
}
inline float NavMission::all_mission_total() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.NavMission.all_mission_total)
  return all_mission_total_;
}
inline void NavMission::set_all_mission_total(float value) {
  
  all_mission_total_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.NavMission.all_mission_total)
}

// float all_mission_left = 8;
inline void NavMission::clear_all_mission_left() {
  all_mission_left_ = 0;
}
inline float NavMission::all_mission_left() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.NavMission.all_mission_left)
  return all_mission_left_;
}
inline void NavMission::set_all_mission_left(float value) {
  
  all_mission_left_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.NavMission.all_mission_left)
}

// repeated .mapengine_msgs.BusinessArea business_areas = 9;
inline int NavMission::business_areas_size() const {
  return business_areas_.size();
}
inline void NavMission::clear_business_areas() {
  business_areas_.Clear();
}
inline const ::mapengine_msgs::BusinessArea& NavMission::business_areas(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.NavMission.business_areas)
  return business_areas_.Get(index);
}
inline ::mapengine_msgs::BusinessArea* NavMission::mutable_business_areas(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.NavMission.business_areas)
  return business_areas_.Mutable(index);
}
inline ::mapengine_msgs::BusinessArea* NavMission::add_business_areas() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.NavMission.business_areas)
  return business_areas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::BusinessArea >*
NavMission::mutable_business_areas() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.NavMission.business_areas)
  return &business_areas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::BusinessArea >&
NavMission::business_areas() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.NavMission.business_areas)
  return business_areas_;
}

// repeated string remain_road_id = 10;
inline int NavMission::remain_road_id_size() const {
  return remain_road_id_.size();
}
inline void NavMission::clear_remain_road_id() {
  remain_road_id_.Clear();
}
inline const ::std::string& NavMission::remain_road_id(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.NavMission.remain_road_id)
  return remain_road_id_.Get(index);
}
inline ::std::string* NavMission::mutable_remain_road_id(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.NavMission.remain_road_id)
  return remain_road_id_.Mutable(index);
}
inline void NavMission::set_remain_road_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mapengine_msgs.NavMission.remain_road_id)
  remain_road_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NavMission::set_remain_road_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:mapengine_msgs.NavMission.remain_road_id)
  remain_road_id_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NavMission::set_remain_road_id(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  remain_road_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mapengine_msgs.NavMission.remain_road_id)
}
inline void NavMission::set_remain_road_id(int index, const char* value, size_t size) {
  remain_road_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mapengine_msgs.NavMission.remain_road_id)
}
inline ::std::string* NavMission::add_remain_road_id() {
  // @@protoc_insertion_point(field_add_mutable:mapengine_msgs.NavMission.remain_road_id)
  return remain_road_id_.Add();
}
inline void NavMission::add_remain_road_id(const ::std::string& value) {
  remain_road_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mapengine_msgs.NavMission.remain_road_id)
}
#if LANG_CXX11
inline void NavMission::add_remain_road_id(::std::string&& value) {
  remain_road_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mapengine_msgs.NavMission.remain_road_id)
}
#endif
inline void NavMission::add_remain_road_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  remain_road_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mapengine_msgs.NavMission.remain_road_id)
}
inline void NavMission::add_remain_road_id(const char* value, size_t size) {
  remain_road_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mapengine_msgs.NavMission.remain_road_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NavMission::remain_road_id() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.NavMission.remain_road_id)
  return remain_road_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NavMission::mutable_remain_road_id() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.NavMission.remain_road_id)
  return &remain_road_id_;
}

// bool global_road_success = 11;
inline void NavMission::clear_global_road_success() {
  global_road_success_ = false;
}
inline bool NavMission::global_road_success() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.NavMission.global_road_success)
  return global_road_success_;
}
inline void NavMission::set_global_road_success(bool value) {
  
  global_road_success_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.NavMission.global_road_success)
}

// bool navigation_success = 12;
inline void NavMission::clear_navigation_success() {
  navigation_success_ = false;
}
inline bool NavMission::navigation_success() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.NavMission.navigation_success)
  return navigation_success_;
}
inline void NavMission::set_navigation_success(bool value) {
  
  navigation_success_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.NavMission.navigation_success)
}

// bool find_current_lane = 13;
inline void NavMission::clear_find_current_lane() {
  find_current_lane_ = false;
}
inline bool NavMission::find_current_lane() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.NavMission.find_current_lane)
  return find_current_lane_;
}
inline void NavMission::set_find_current_lane(bool value) {
  
  find_current_lane_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.NavMission.find_current_lane)
}

// repeated string failed_reason = 14;
inline int NavMission::failed_reason_size() const {
  return failed_reason_.size();
}
inline void NavMission::clear_failed_reason() {
  failed_reason_.Clear();
}
inline const ::std::string& NavMission::failed_reason(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.NavMission.failed_reason)
  return failed_reason_.Get(index);
}
inline ::std::string* NavMission::mutable_failed_reason(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.NavMission.failed_reason)
  return failed_reason_.Mutable(index);
}
inline void NavMission::set_failed_reason(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mapengine_msgs.NavMission.failed_reason)
  failed_reason_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NavMission::set_failed_reason(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:mapengine_msgs.NavMission.failed_reason)
  failed_reason_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NavMission::set_failed_reason(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  failed_reason_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mapengine_msgs.NavMission.failed_reason)
}
inline void NavMission::set_failed_reason(int index, const char* value, size_t size) {
  failed_reason_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mapengine_msgs.NavMission.failed_reason)
}
inline ::std::string* NavMission::add_failed_reason() {
  // @@protoc_insertion_point(field_add_mutable:mapengine_msgs.NavMission.failed_reason)
  return failed_reason_.Add();
}
inline void NavMission::add_failed_reason(const ::std::string& value) {
  failed_reason_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mapengine_msgs.NavMission.failed_reason)
}
#if LANG_CXX11
inline void NavMission::add_failed_reason(::std::string&& value) {
  failed_reason_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mapengine_msgs.NavMission.failed_reason)
}
#endif
inline void NavMission::add_failed_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  failed_reason_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mapengine_msgs.NavMission.failed_reason)
}
inline void NavMission::add_failed_reason(const char* value, size_t size) {
  failed_reason_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mapengine_msgs.NavMission.failed_reason)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NavMission::failed_reason() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.NavMission.failed_reason)
  return failed_reason_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NavMission::mutable_failed_reason() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.NavMission.failed_reason)
  return &failed_reason_;
}

// -------------------------------------------------------------------

// Debug

// .mapengine_msgs.GlobalPathCommand route_command = 1;
inline bool Debug::has_route_command() const {
  return this != internal_default_instance() && route_command_ != NULL;
}
inline void Debug::clear_route_command() {
  if (GetArenaNoVirtual() == NULL && route_command_ != NULL) {
    delete route_command_;
  }
  route_command_ = NULL;
}
inline const ::mapengine_msgs::GlobalPathCommand& Debug::route_command() const {
  const ::mapengine_msgs::GlobalPathCommand* p = route_command_;
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.route_command)
  return p != NULL ? *p : *reinterpret_cast<const ::mapengine_msgs::GlobalPathCommand*>(
      &::mapengine_msgs::_GlobalPathCommand_default_instance_);
}
inline ::mapengine_msgs::GlobalPathCommand* Debug::release_route_command() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.Debug.route_command)
  
  ::mapengine_msgs::GlobalPathCommand* temp = route_command_;
  route_command_ = NULL;
  return temp;
}
inline ::mapengine_msgs::GlobalPathCommand* Debug::mutable_route_command() {
  
  if (route_command_ == NULL) {
    route_command_ = new ::mapengine_msgs::GlobalPathCommand;
  }
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Debug.route_command)
  return route_command_;
}
inline void Debug::set_allocated_route_command(::mapengine_msgs::GlobalPathCommand* route_command) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete route_command_;
  }
  if (route_command) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      route_command = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, route_command, submessage_arena);
    }
    
  } else {
    
  }
  route_command_ = route_command;
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.Debug.route_command)
}

// .mapengine_msgs.NavigationCommand nav_command = 2;
inline bool Debug::has_nav_command() const {
  return this != internal_default_instance() && nav_command_ != NULL;
}
inline void Debug::clear_nav_command() {
  if (GetArenaNoVirtual() == NULL && nav_command_ != NULL) {
    delete nav_command_;
  }
  nav_command_ = NULL;
}
inline const ::mapengine_msgs::NavigationCommand& Debug::nav_command() const {
  const ::mapengine_msgs::NavigationCommand* p = nav_command_;
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.nav_command)
  return p != NULL ? *p : *reinterpret_cast<const ::mapengine_msgs::NavigationCommand*>(
      &::mapengine_msgs::_NavigationCommand_default_instance_);
}
inline ::mapengine_msgs::NavigationCommand* Debug::release_nav_command() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.Debug.nav_command)
  
  ::mapengine_msgs::NavigationCommand* temp = nav_command_;
  nav_command_ = NULL;
  return temp;
}
inline ::mapengine_msgs::NavigationCommand* Debug::mutable_nav_command() {
  
  if (nav_command_ == NULL) {
    nav_command_ = new ::mapengine_msgs::NavigationCommand;
  }
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Debug.nav_command)
  return nav_command_;
}
inline void Debug::set_allocated_nav_command(::mapengine_msgs::NavigationCommand* nav_command) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete nav_command_;
  }
  if (nav_command) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nav_command = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nav_command, submessage_arena);
    }
    
  } else {
    
  }
  nav_command_ = nav_command;
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.Debug.nav_command)
}

// repeated string mission_road_id = 3;
inline int Debug::mission_road_id_size() const {
  return mission_road_id_.size();
}
inline void Debug::clear_mission_road_id() {
  mission_road_id_.Clear();
}
inline const ::std::string& Debug::mission_road_id(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.mission_road_id)
  return mission_road_id_.Get(index);
}
inline ::std::string* Debug::mutable_mission_road_id(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Debug.mission_road_id)
  return mission_road_id_.Mutable(index);
}
inline void Debug::set_mission_road_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.mission_road_id)
  mission_road_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Debug::set_mission_road_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.mission_road_id)
  mission_road_id_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Debug::set_mission_road_id(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mission_road_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mapengine_msgs.Debug.mission_road_id)
}
inline void Debug::set_mission_road_id(int index, const char* value, size_t size) {
  mission_road_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mapengine_msgs.Debug.mission_road_id)
}
inline ::std::string* Debug::add_mission_road_id() {
  // @@protoc_insertion_point(field_add_mutable:mapengine_msgs.Debug.mission_road_id)
  return mission_road_id_.Add();
}
inline void Debug::add_mission_road_id(const ::std::string& value) {
  mission_road_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mapengine_msgs.Debug.mission_road_id)
}
#if LANG_CXX11
inline void Debug::add_mission_road_id(::std::string&& value) {
  mission_road_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mapengine_msgs.Debug.mission_road_id)
}
#endif
inline void Debug::add_mission_road_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mission_road_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mapengine_msgs.Debug.mission_road_id)
}
inline void Debug::add_mission_road_id(const char* value, size_t size) {
  mission_road_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mapengine_msgs.Debug.mission_road_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Debug::mission_road_id() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Debug.mission_road_id)
  return mission_road_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Debug::mutable_mission_road_id() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Debug.mission_road_id)
  return &mission_road_id_;
}

// repeated string global_road = 4;
inline int Debug::global_road_size() const {
  return global_road_.size();
}
inline void Debug::clear_global_road() {
  global_road_.Clear();
}
inline const ::std::string& Debug::global_road(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.global_road)
  return global_road_.Get(index);
}
inline ::std::string* Debug::mutable_global_road(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Debug.global_road)
  return global_road_.Mutable(index);
}
inline void Debug::set_global_road(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.global_road)
  global_road_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Debug::set_global_road(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.global_road)
  global_road_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Debug::set_global_road(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  global_road_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mapengine_msgs.Debug.global_road)
}
inline void Debug::set_global_road(int index, const char* value, size_t size) {
  global_road_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mapengine_msgs.Debug.global_road)
}
inline ::std::string* Debug::add_global_road() {
  // @@protoc_insertion_point(field_add_mutable:mapengine_msgs.Debug.global_road)
  return global_road_.Add();
}
inline void Debug::add_global_road(const ::std::string& value) {
  global_road_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mapengine_msgs.Debug.global_road)
}
#if LANG_CXX11
inline void Debug::add_global_road(::std::string&& value) {
  global_road_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mapengine_msgs.Debug.global_road)
}
#endif
inline void Debug::add_global_road(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  global_road_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mapengine_msgs.Debug.global_road)
}
inline void Debug::add_global_road(const char* value, size_t size) {
  global_road_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mapengine_msgs.Debug.global_road)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Debug::global_road() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Debug.global_road)
  return global_road_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Debug::mutable_global_road() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Debug.global_road)
  return &global_road_;
}

// bool global_road_success = 5;
inline void Debug::clear_global_road_success() {
  global_road_success_ = false;
}
inline bool Debug::global_road_success() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.global_road_success)
  return global_road_success_;
}
inline void Debug::set_global_road_success(bool value) {
  
  global_road_success_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.global_road_success)
}

// bool navigation_success = 6;
inline void Debug::clear_navigation_success() {
  navigation_success_ = false;
}
inline bool Debug::navigation_success() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.navigation_success)
  return navigation_success_;
}
inline void Debug::set_navigation_success(bool value) {
  
  navigation_success_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.navigation_success)
}

// bool find_current_lane = 7;
inline void Debug::clear_find_current_lane() {
  find_current_lane_ = false;
}
inline bool Debug::find_current_lane() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.find_current_lane)
  return find_current_lane_;
}
inline void Debug::set_find_current_lane(bool value) {
  
  find_current_lane_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.find_current_lane)
}

// repeated string failed_reason = 8;
inline int Debug::failed_reason_size() const {
  return failed_reason_.size();
}
inline void Debug::clear_failed_reason() {
  failed_reason_.Clear();
}
inline const ::std::string& Debug::failed_reason(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.failed_reason)
  return failed_reason_.Get(index);
}
inline ::std::string* Debug::mutable_failed_reason(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Debug.failed_reason)
  return failed_reason_.Mutable(index);
}
inline void Debug::set_failed_reason(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.failed_reason)
  failed_reason_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Debug::set_failed_reason(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.failed_reason)
  failed_reason_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Debug::set_failed_reason(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  failed_reason_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mapengine_msgs.Debug.failed_reason)
}
inline void Debug::set_failed_reason(int index, const char* value, size_t size) {
  failed_reason_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mapengine_msgs.Debug.failed_reason)
}
inline ::std::string* Debug::add_failed_reason() {
  // @@protoc_insertion_point(field_add_mutable:mapengine_msgs.Debug.failed_reason)
  return failed_reason_.Add();
}
inline void Debug::add_failed_reason(const ::std::string& value) {
  failed_reason_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mapengine_msgs.Debug.failed_reason)
}
#if LANG_CXX11
inline void Debug::add_failed_reason(::std::string&& value) {
  failed_reason_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mapengine_msgs.Debug.failed_reason)
}
#endif
inline void Debug::add_failed_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  failed_reason_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mapengine_msgs.Debug.failed_reason)
}
inline void Debug::add_failed_reason(const char* value, size_t size) {
  failed_reason_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mapengine_msgs.Debug.failed_reason)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Debug::failed_reason() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Debug.failed_reason)
  return failed_reason_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Debug::mutable_failed_reason() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Debug.failed_reason)
  return &failed_reason_;
}

// uint32 current_road_index = 9;
inline void Debug::clear_current_road_index() {
  current_road_index_ = 0u;
}
inline ::google::protobuf::uint32 Debug::current_road_index() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.current_road_index)
  return current_road_index_;
}
inline void Debug::set_current_road_index(::google::protobuf::uint32 value) {
  
  current_road_index_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.current_road_index)
}

// float routeplan_cost_time = 10;
inline void Debug::clear_routeplan_cost_time() {
  routeplan_cost_time_ = 0;
}
inline float Debug::routeplan_cost_time() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.routeplan_cost_time)
  return routeplan_cost_time_;
}
inline void Debug::set_routeplan_cost_time(float value) {
  
  routeplan_cost_time_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.routeplan_cost_time)
}

// float globallane_cost_time = 11;
inline void Debug::clear_globallane_cost_time() {
  globallane_cost_time_ = 0;
}
inline float Debug::globallane_cost_time() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.globallane_cost_time)
  return globallane_cost_time_;
}
inline void Debug::set_globallane_cost_time(float value) {
  
  globallane_cost_time_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.globallane_cost_time)
}

// float navigation_cost_time = 12;
inline void Debug::clear_navigation_cost_time() {
  navigation_cost_time_ = 0;
}
inline float Debug::navigation_cost_time() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.navigation_cost_time)
  return navigation_cost_time_;
}
inline void Debug::set_navigation_cost_time(float value) {
  
  navigation_cost_time_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.navigation_cost_time)
}

// float min_delta = 13;
inline void Debug::clear_min_delta() {
  min_delta_ = 0;
}
inline float Debug::min_delta() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.min_delta)
  return min_delta_;
}
inline void Debug::set_min_delta(float value) {
  
  min_delta_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.min_delta)
}

// repeated double loc_list_time = 14;
inline int Debug::loc_list_time_size() const {
  return loc_list_time_.size();
}
inline void Debug::clear_loc_list_time() {
  loc_list_time_.Clear();
}
inline double Debug::loc_list_time(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.loc_list_time)
  return loc_list_time_.Get(index);
}
inline void Debug::set_loc_list_time(int index, double value) {
  loc_list_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.loc_list_time)
}
inline void Debug::add_loc_list_time(double value) {
  loc_list_time_.Add(value);
  // @@protoc_insertion_point(field_add:mapengine_msgs.Debug.loc_list_time)
}
inline const ::google::protobuf::RepeatedField< double >&
Debug::loc_list_time() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Debug.loc_list_time)
  return loc_list_time_;
}
inline ::google::protobuf::RepeatedField< double >*
Debug::mutable_loc_list_time() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Debug.loc_list_time)
  return &loc_list_time_;
}

// uint32 sim_vision_time = 15;
inline void Debug::clear_sim_vision_time() {
  sim_vision_time_ = 0u;
}
inline ::google::protobuf::uint32 Debug::sim_vision_time() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.sim_vision_time)
  return sim_vision_time_;
}
inline void Debug::set_sim_vision_time(::google::protobuf::uint32 value) {
  
  sim_vision_time_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.sim_vision_time)
}

// bool in_tunnel_flag = 16;
inline void Debug::clear_in_tunnel_flag() {
  in_tunnel_flag_ = false;
}
inline bool Debug::in_tunnel_flag() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.in_tunnel_flag)
  return in_tunnel_flag_;
}
inline void Debug::set_in_tunnel_flag(bool value) {
  
  in_tunnel_flag_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.in_tunnel_flag)
}

// bool gccs_dr = 17;
inline void Debug::clear_gccs_dr() {
  gccs_dr_ = false;
}
inline bool Debug::gccs_dr() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.gccs_dr)
  return gccs_dr_;
}
inline void Debug::set_gccs_dr(bool value) {
  
  gccs_dr_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.gccs_dr)
}

// repeated .mapengine_msgs.FuncInfo vision_info = 18;
inline int Debug::vision_info_size() const {
  return vision_info_.size();
}
inline void Debug::clear_vision_info() {
  vision_info_.Clear();
}
inline const ::mapengine_msgs::FuncInfo& Debug::vision_info(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.vision_info)
  return vision_info_.Get(index);
}
inline ::mapengine_msgs::FuncInfo* Debug::mutable_vision_info(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Debug.vision_info)
  return vision_info_.Mutable(index);
}
inline ::mapengine_msgs::FuncInfo* Debug::add_vision_info() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Debug.vision_info)
  return vision_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::FuncInfo >*
Debug::mutable_vision_info() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Debug.vision_info)
  return &vision_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::FuncInfo >&
Debug::vision_info() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Debug.vision_info)
  return vision_info_;
}

// repeated .mapengine_msgs.FuncInfo map_info = 19;
inline int Debug::map_info_size() const {
  return map_info_.size();
}
inline void Debug::clear_map_info() {
  map_info_.Clear();
}
inline const ::mapengine_msgs::FuncInfo& Debug::map_info(int index) const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.map_info)
  return map_info_.Get(index);
}
inline ::mapengine_msgs::FuncInfo* Debug::mutable_map_info(int index) {
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Debug.map_info)
  return map_info_.Mutable(index);
}
inline ::mapengine_msgs::FuncInfo* Debug::add_map_info() {
  // @@protoc_insertion_point(field_add:mapengine_msgs.Debug.map_info)
  return map_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::FuncInfo >*
Debug::mutable_map_info() {
  // @@protoc_insertion_point(field_mutable_list:mapengine_msgs.Debug.map_info)
  return &map_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mapengine_msgs::FuncInfo >&
Debug::map_info() const {
  // @@protoc_insertion_point(field_list:mapengine_msgs.Debug.map_info)
  return map_info_;
}

// int32 loc_vision_state = 20;
inline void Debug::clear_loc_vision_state() {
  loc_vision_state_ = 0;
}
inline ::google::protobuf::int32 Debug::loc_vision_state() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.loc_vision_state)
  return loc_vision_state_;
}
inline void Debug::set_loc_vision_state(::google::protobuf::int32 value) {
  
  loc_vision_state_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.loc_vision_state)
}

// string loc_vision_string = 21;
inline void Debug::clear_loc_vision_string() {
  loc_vision_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Debug::loc_vision_string() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.loc_vision_string)
  return loc_vision_string_.GetNoArena();
}
inline void Debug::set_loc_vision_string(const ::std::string& value) {
  
  loc_vision_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.loc_vision_string)
}
#if LANG_CXX11
inline void Debug::set_loc_vision_string(::std::string&& value) {
  
  loc_vision_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mapengine_msgs.Debug.loc_vision_string)
}
#endif
inline void Debug::set_loc_vision_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  loc_vision_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mapengine_msgs.Debug.loc_vision_string)
}
inline void Debug::set_loc_vision_string(const char* value, size_t size) {
  
  loc_vision_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mapengine_msgs.Debug.loc_vision_string)
}
inline ::std::string* Debug::mutable_loc_vision_string() {
  
  // @@protoc_insertion_point(field_mutable:mapengine_msgs.Debug.loc_vision_string)
  return loc_vision_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Debug::release_loc_vision_string() {
  // @@protoc_insertion_point(field_release:mapengine_msgs.Debug.loc_vision_string)
  
  return loc_vision_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Debug::set_allocated_loc_vision_string(::std::string* loc_vision_string) {
  if (loc_vision_string != NULL) {
    
  } else {
    
  }
  loc_vision_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loc_vision_string);
  // @@protoc_insertion_point(field_set_allocated:mapengine_msgs.Debug.loc_vision_string)
}

// float correction_cost = 23;
inline void Debug::clear_correction_cost() {
  correction_cost_ = 0;
}
inline float Debug::correction_cost() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.correction_cost)
  return correction_cost_;
}
inline void Debug::set_correction_cost(float value) {
  
  correction_cost_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.correction_cost)
}

// float delta_yaw = 24;
inline void Debug::clear_delta_yaw() {
  delta_yaw_ = 0;
}
inline float Debug::delta_yaw() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.delta_yaw)
  return delta_yaw_;
}
inline void Debug::set_delta_yaw(float value) {
  
  delta_yaw_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.delta_yaw)
}

// float delta_dis = 25;
inline void Debug::clear_delta_dis() {
  delta_dis_ = 0;
}
inline float Debug::delta_dis() const {
  // @@protoc_insertion_point(field_get:mapengine_msgs.Debug.delta_dis)
  return delta_dis_;
}
inline void Debug::set_delta_dis(float value) {
  
  delta_dis_ = value;
  // @@protoc_insertion_point(field_set:mapengine_msgs.Debug.delta_dis)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mapengine_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mapengine_5fmsgs_2eproto__INCLUDED
