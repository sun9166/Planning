// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception_sensor_info.proto

#ifndef PROTOBUF_perception_5fsensor_5finfo_2eproto__INCLUDED
#define PROTOBUF_perception_5fsensor_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "perception_types.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_perception_5fsensor_5finfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCameraInfoImpl();
void InitDefaultsCameraInfo();
void InitDefaultsLidarInfoImpl();
void InitDefaultsLidarInfo();
void InitDefaultsSensorInfoImpl();
void InitDefaultsSensorInfo();
inline void InitDefaults() {
  InitDefaultsCameraInfo();
  InitDefaultsLidarInfo();
  InitDefaultsSensorInfo();
}
}  // namespace protobuf_perception_5fsensor_5finfo_2eproto
namespace calmcar {
namespace perception {
class CameraInfo;
class CameraInfoDefaultTypeInternal;
extern CameraInfoDefaultTypeInternal _CameraInfo_default_instance_;
class LidarInfo;
class LidarInfoDefaultTypeInternal;
extern LidarInfoDefaultTypeInternal _LidarInfo_default_instance_;
class SensorInfo;
class SensorInfoDefaultTypeInternal;
extern SensorInfoDefaultTypeInternal _SensorInfo_default_instance_;
}  // namespace perception
}  // namespace calmcar
namespace calmcar {
namespace perception {

enum CameraInfo_Position {
  CameraInfo_Position_CENTER = 0,
  CameraInfo_Position_CENTER_NEAR = 1,
  CameraInfo_Position_FRONT_LEFT = 2,
  CameraInfo_Position_FRONT_RIGHT = 3,
  CameraInfo_Position_REAR_CENTER = 4,
  CameraInfo_Position_REAR_LEFT = 5,
  CameraInfo_Position_REAR_RIGHT = 6,
  CameraInfo_Position_FRONT_CENTER_FAR = 7,
  CameraInfo_Position_CameraInfo_Position_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CameraInfo_Position_CameraInfo_Position_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CameraInfo_Position_IsValid(int value);
const CameraInfo_Position CameraInfo_Position_Position_MIN = CameraInfo_Position_CENTER;
const CameraInfo_Position CameraInfo_Position_Position_MAX = CameraInfo_Position_FRONT_CENTER_FAR;
const int CameraInfo_Position_Position_ARRAYSIZE = CameraInfo_Position_Position_MAX + 1;

const ::google::protobuf::EnumDescriptor* CameraInfo_Position_descriptor();
inline const ::std::string& CameraInfo_Position_Name(CameraInfo_Position value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraInfo_Position_descriptor(), value);
}
inline bool CameraInfo_Position_Parse(
    const ::std::string& name, CameraInfo_Position* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraInfo_Position>(
    CameraInfo_Position_descriptor(), name, value);
}
enum SensorType {
  SENSOR_TYPE_UNKNOWN = 0,
  SENSOR_TYPE_CAMERA = 1,
  SENSOR_TYPE_RADAR = 2,
  SENSOR_TYPE_LIDAR = 3,
  SENSOR_TYPE_FUSED = 4,
  SensorType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SensorType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SensorType_IsValid(int value);
const SensorType SensorType_MIN = SENSOR_TYPE_UNKNOWN;
const SensorType SensorType_MAX = SENSOR_TYPE_FUSED;
const int SensorType_ARRAYSIZE = SensorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SensorType_descriptor();
inline const ::std::string& SensorType_Name(SensorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SensorType_descriptor(), value);
}
inline bool SensorType_Parse(
    const ::std::string& name, SensorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SensorType>(
    SensorType_descriptor(), name, value);
}
// ===================================================================

class CameraInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calmcar.perception.CameraInfo) */ {
 public:
  CameraInfo();
  virtual ~CameraInfo();

  CameraInfo(const CameraInfo& from);

  inline CameraInfo& operator=(const CameraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraInfo(CameraInfo&& from) noexcept
    : CameraInfo() {
    *this = ::std::move(from);
  }

  inline CameraInfo& operator=(CameraInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraInfo* internal_default_instance() {
    return reinterpret_cast<const CameraInfo*>(
               &_CameraInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CameraInfo* other);
  friend void swap(CameraInfo& a, CameraInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CameraInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CameraInfo& from);
  void MergeFrom(const CameraInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CameraInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CameraInfo_Position Position;
  static const Position CENTER =
    CameraInfo_Position_CENTER;
  static const Position CENTER_NEAR =
    CameraInfo_Position_CENTER_NEAR;
  static const Position FRONT_LEFT =
    CameraInfo_Position_FRONT_LEFT;
  static const Position FRONT_RIGHT =
    CameraInfo_Position_FRONT_RIGHT;
  static const Position REAR_CENTER =
    CameraInfo_Position_REAR_CENTER;
  static const Position REAR_LEFT =
    CameraInfo_Position_REAR_LEFT;
  static const Position REAR_RIGHT =
    CameraInfo_Position_REAR_RIGHT;
  static const Position FRONT_CENTER_FAR =
    CameraInfo_Position_FRONT_CENTER_FAR;
  static inline bool Position_IsValid(int value) {
    return CameraInfo_Position_IsValid(value);
  }
  static const Position Position_MIN =
    CameraInfo_Position_Position_MIN;
  static const Position Position_MAX =
    CameraInfo_Position_Position_MAX;
  static const int Position_ARRAYSIZE =
    CameraInfo_Position_Position_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Position_descriptor() {
    return CameraInfo_Position_descriptor();
  }
  static inline const ::std::string& Position_Name(Position value) {
    return CameraInfo_Position_Name(value);
  }
  static inline bool Position_Parse(const ::std::string& name,
      Position* value) {
    return CameraInfo_Position_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .calmcar.perception.Matrix2d intrinsic = 4;
  bool has_intrinsic() const;
  void clear_intrinsic();
  static const int kIntrinsicFieldNumber = 4;
  const ::calmcar::perception::Matrix2d& intrinsic() const;
  ::calmcar::perception::Matrix2d* release_intrinsic();
  ::calmcar::perception::Matrix2d* mutable_intrinsic();
  void set_allocated_intrinsic(::calmcar::perception::Matrix2d* intrinsic);

  // .calmcar.perception.Matrix2d extrinsic = 5;
  bool has_extrinsic() const;
  void clear_extrinsic();
  static const int kExtrinsicFieldNumber = 5;
  const ::calmcar::perception::Matrix2d& extrinsic() const;
  ::calmcar::perception::Matrix2d* release_extrinsic();
  ::calmcar::perception::Matrix2d* mutable_extrinsic();
  void set_allocated_extrinsic(::calmcar::perception::Matrix2d* extrinsic);

  // int64 camera_id = 1;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::int64 camera_id() const;
  void set_camera_id(::google::protobuf::int64 value);

  // int32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // .calmcar.perception.CameraInfo.Position position = 6;
  void clear_position();
  static const int kPositionFieldNumber = 6;
  ::calmcar::perception::CameraInfo_Position position() const;
  void set_position(::calmcar::perception::CameraInfo_Position value);

  // @@protoc_insertion_point(class_scope:calmcar.perception.CameraInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::calmcar::perception::Matrix2d* intrinsic_;
  ::calmcar::perception::Matrix2d* extrinsic_;
  ::google::protobuf::int64 camera_id_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  int position_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_5fsensor_5finfo_2eproto::TableStruct;
  friend void ::protobuf_perception_5fsensor_5finfo_2eproto::InitDefaultsCameraInfoImpl();
};
// -------------------------------------------------------------------

class LidarInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calmcar.perception.LidarInfo) */ {
 public:
  LidarInfo();
  virtual ~LidarInfo();

  LidarInfo(const LidarInfo& from);

  inline LidarInfo& operator=(const LidarInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LidarInfo(LidarInfo&& from) noexcept
    : LidarInfo() {
    *this = ::std::move(from);
  }

  inline LidarInfo& operator=(LidarInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LidarInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LidarInfo* internal_default_instance() {
    return reinterpret_cast<const LidarInfo*>(
               &_LidarInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LidarInfo* other);
  friend void swap(LidarInfo& a, LidarInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LidarInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  LidarInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LidarInfo& from);
  void MergeFrom(const LidarInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LidarInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int64 index() const;
  void set_index(::google::protobuf::int64 value);

  // int32 property_port = 2;
  void clear_property_port();
  static const int kPropertyPortFieldNumber = 2;
  ::google::protobuf::int32 property_port() const;
  void set_property_port(::google::protobuf::int32 value);

  // int32 data_port = 3;
  void clear_data_port();
  static const int kDataPortFieldNumber = 3;
  ::google::protobuf::int32 data_port() const;
  void set_data_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:calmcar.perception.LidarInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 index_;
  ::google::protobuf::int32 property_port_;
  ::google::protobuf::int32 data_port_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_5fsensor_5finfo_2eproto::TableStruct;
  friend void ::protobuf_perception_5fsensor_5finfo_2eproto::InitDefaultsLidarInfoImpl();
};
// -------------------------------------------------------------------

class SensorInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calmcar.perception.SensorInfo) */ {
 public:
  SensorInfo();
  virtual ~SensorInfo();

  SensorInfo(const SensorInfo& from);

  inline SensorInfo& operator=(const SensorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorInfo(SensorInfo&& from) noexcept
    : SensorInfo() {
    *this = ::std::move(from);
  }

  inline SensorInfo& operator=(SensorInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorInfo* internal_default_instance() {
    return reinterpret_cast<const SensorInfo*>(
               &_SensorInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SensorInfo* other);
  friend void swap(SensorInfo& a, SensorInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SensorInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SensorInfo& from);
  void MergeFrom(const SensorInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SensorInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .calmcar.perception.CameraInfo camera_info = 4;
  bool has_camera_info() const;
  void clear_camera_info();
  static const int kCameraInfoFieldNumber = 4;
  const ::calmcar::perception::CameraInfo& camera_info() const;
  ::calmcar::perception::CameraInfo* release_camera_info();
  ::calmcar::perception::CameraInfo* mutable_camera_info();
  void set_allocated_camera_info(::calmcar::perception::CameraInfo* camera_info);

  // .calmcar.perception.LidarInfo lidar_info = 5;
  bool has_lidar_info() const;
  void clear_lidar_info();
  static const int kLidarInfoFieldNumber = 5;
  const ::calmcar::perception::LidarInfo& lidar_info() const;
  ::calmcar::perception::LidarInfo* release_lidar_info();
  ::calmcar::perception::LidarInfo* mutable_lidar_info();
  void set_allocated_lidar_info(::calmcar::perception::LidarInfo* lidar_info);

  // int64 timestamp = 3;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // .calmcar.perception.SensorType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::calmcar::perception::SensorType type() const;
  void set_type(::calmcar::perception::SensorType value);

  // @@protoc_insertion_point(class_scope:calmcar.perception.SensorInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::calmcar::perception::CameraInfo* camera_info_;
  ::calmcar::perception::LidarInfo* lidar_info_;
  ::google::protobuf::int64 timestamp_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_perception_5fsensor_5finfo_2eproto::TableStruct;
  friend void ::protobuf_perception_5fsensor_5finfo_2eproto::InitDefaultsSensorInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraInfo

// int64 camera_id = 1;
inline void CameraInfo::clear_camera_id() {
  camera_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CameraInfo::camera_id() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.CameraInfo.camera_id)
  return camera_id_;
}
inline void CameraInfo::set_camera_id(::google::protobuf::int64 value) {
  
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.CameraInfo.camera_id)
}

// int32 width = 2;
inline void CameraInfo::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 CameraInfo::width() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.CameraInfo.width)
  return width_;
}
inline void CameraInfo::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.CameraInfo.width)
}

// int32 height = 3;
inline void CameraInfo::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 CameraInfo::height() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.CameraInfo.height)
  return height_;
}
inline void CameraInfo::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.CameraInfo.height)
}

// .calmcar.perception.Matrix2d intrinsic = 4;
inline bool CameraInfo::has_intrinsic() const {
  return this != internal_default_instance() && intrinsic_ != NULL;
}
inline const ::calmcar::perception::Matrix2d& CameraInfo::intrinsic() const {
  const ::calmcar::perception::Matrix2d* p = intrinsic_;
  // @@protoc_insertion_point(field_get:calmcar.perception.CameraInfo.intrinsic)
  return p != NULL ? *p : *reinterpret_cast<const ::calmcar::perception::Matrix2d*>(
      &::calmcar::perception::_Matrix2d_default_instance_);
}
inline ::calmcar::perception::Matrix2d* CameraInfo::release_intrinsic() {
  // @@protoc_insertion_point(field_release:calmcar.perception.CameraInfo.intrinsic)
  
  ::calmcar::perception::Matrix2d* temp = intrinsic_;
  intrinsic_ = NULL;
  return temp;
}
inline ::calmcar::perception::Matrix2d* CameraInfo::mutable_intrinsic() {
  
  if (intrinsic_ == NULL) {
    intrinsic_ = new ::calmcar::perception::Matrix2d;
  }
  // @@protoc_insertion_point(field_mutable:calmcar.perception.CameraInfo.intrinsic)
  return intrinsic_;
}
inline void CameraInfo::set_allocated_intrinsic(::calmcar::perception::Matrix2d* intrinsic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(intrinsic_);
  }
  if (intrinsic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      intrinsic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, intrinsic, submessage_arena);
    }
    
  } else {
    
  }
  intrinsic_ = intrinsic;
  // @@protoc_insertion_point(field_set_allocated:calmcar.perception.CameraInfo.intrinsic)
}

// .calmcar.perception.Matrix2d extrinsic = 5;
inline bool CameraInfo::has_extrinsic() const {
  return this != internal_default_instance() && extrinsic_ != NULL;
}
inline const ::calmcar::perception::Matrix2d& CameraInfo::extrinsic() const {
  const ::calmcar::perception::Matrix2d* p = extrinsic_;
  // @@protoc_insertion_point(field_get:calmcar.perception.CameraInfo.extrinsic)
  return p != NULL ? *p : *reinterpret_cast<const ::calmcar::perception::Matrix2d*>(
      &::calmcar::perception::_Matrix2d_default_instance_);
}
inline ::calmcar::perception::Matrix2d* CameraInfo::release_extrinsic() {
  // @@protoc_insertion_point(field_release:calmcar.perception.CameraInfo.extrinsic)
  
  ::calmcar::perception::Matrix2d* temp = extrinsic_;
  extrinsic_ = NULL;
  return temp;
}
inline ::calmcar::perception::Matrix2d* CameraInfo::mutable_extrinsic() {
  
  if (extrinsic_ == NULL) {
    extrinsic_ = new ::calmcar::perception::Matrix2d;
  }
  // @@protoc_insertion_point(field_mutable:calmcar.perception.CameraInfo.extrinsic)
  return extrinsic_;
}
inline void CameraInfo::set_allocated_extrinsic(::calmcar::perception::Matrix2d* extrinsic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(extrinsic_);
  }
  if (extrinsic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      extrinsic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, extrinsic, submessage_arena);
    }
    
  } else {
    
  }
  extrinsic_ = extrinsic;
  // @@protoc_insertion_point(field_set_allocated:calmcar.perception.CameraInfo.extrinsic)
}

// .calmcar.perception.CameraInfo.Position position = 6;
inline void CameraInfo::clear_position() {
  position_ = 0;
}
inline ::calmcar::perception::CameraInfo_Position CameraInfo::position() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.CameraInfo.position)
  return static_cast< ::calmcar::perception::CameraInfo_Position >(position_);
}
inline void CameraInfo::set_position(::calmcar::perception::CameraInfo_Position value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.CameraInfo.position)
}

// -------------------------------------------------------------------

// LidarInfo

// int64 index = 1;
inline void LidarInfo::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LidarInfo::index() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.LidarInfo.index)
  return index_;
}
inline void LidarInfo::set_index(::google::protobuf::int64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.LidarInfo.index)
}

// int32 property_port = 2;
inline void LidarInfo::clear_property_port() {
  property_port_ = 0;
}
inline ::google::protobuf::int32 LidarInfo::property_port() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.LidarInfo.property_port)
  return property_port_;
}
inline void LidarInfo::set_property_port(::google::protobuf::int32 value) {
  
  property_port_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.LidarInfo.property_port)
}

// int32 data_port = 3;
inline void LidarInfo::clear_data_port() {
  data_port_ = 0;
}
inline ::google::protobuf::int32 LidarInfo::data_port() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.LidarInfo.data_port)
  return data_port_;
}
inline void LidarInfo::set_data_port(::google::protobuf::int32 value) {
  
  data_port_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.LidarInfo.data_port)
}

// -------------------------------------------------------------------

// SensorInfo

// .calmcar.perception.SensorType type = 1;
inline void SensorInfo::clear_type() {
  type_ = 0;
}
inline ::calmcar::perception::SensorType SensorInfo::type() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.SensorInfo.type)
  return static_cast< ::calmcar::perception::SensorType >(type_);
}
inline void SensorInfo::set_type(::calmcar::perception::SensorType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.SensorInfo.type)
}

// string name = 2;
inline void SensorInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorInfo::name() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.SensorInfo.name)
  return name_.GetNoArena();
}
inline void SensorInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:calmcar.perception.SensorInfo.name)
}
#if LANG_CXX11
inline void SensorInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:calmcar.perception.SensorInfo.name)
}
#endif
inline void SensorInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:calmcar.perception.SensorInfo.name)
}
inline void SensorInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:calmcar.perception.SensorInfo.name)
}
inline ::std::string* SensorInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:calmcar.perception.SensorInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorInfo::release_name() {
  // @@protoc_insertion_point(field_release:calmcar.perception.SensorInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:calmcar.perception.SensorInfo.name)
}

// int64 timestamp = 3;
inline void SensorInfo::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SensorInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:calmcar.perception.SensorInfo.timestamp)
  return timestamp_;
}
inline void SensorInfo::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:calmcar.perception.SensorInfo.timestamp)
}

// .calmcar.perception.CameraInfo camera_info = 4;
inline bool SensorInfo::has_camera_info() const {
  return this != internal_default_instance() && camera_info_ != NULL;
}
inline void SensorInfo::clear_camera_info() {
  if (GetArenaNoVirtual() == NULL && camera_info_ != NULL) {
    delete camera_info_;
  }
  camera_info_ = NULL;
}
inline const ::calmcar::perception::CameraInfo& SensorInfo::camera_info() const {
  const ::calmcar::perception::CameraInfo* p = camera_info_;
  // @@protoc_insertion_point(field_get:calmcar.perception.SensorInfo.camera_info)
  return p != NULL ? *p : *reinterpret_cast<const ::calmcar::perception::CameraInfo*>(
      &::calmcar::perception::_CameraInfo_default_instance_);
}
inline ::calmcar::perception::CameraInfo* SensorInfo::release_camera_info() {
  // @@protoc_insertion_point(field_release:calmcar.perception.SensorInfo.camera_info)
  
  ::calmcar::perception::CameraInfo* temp = camera_info_;
  camera_info_ = NULL;
  return temp;
}
inline ::calmcar::perception::CameraInfo* SensorInfo::mutable_camera_info() {
  
  if (camera_info_ == NULL) {
    camera_info_ = new ::calmcar::perception::CameraInfo;
  }
  // @@protoc_insertion_point(field_mutable:calmcar.perception.SensorInfo.camera_info)
  return camera_info_;
}
inline void SensorInfo::set_allocated_camera_info(::calmcar::perception::CameraInfo* camera_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete camera_info_;
  }
  if (camera_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      camera_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, camera_info, submessage_arena);
    }
    
  } else {
    
  }
  camera_info_ = camera_info;
  // @@protoc_insertion_point(field_set_allocated:calmcar.perception.SensorInfo.camera_info)
}

// .calmcar.perception.LidarInfo lidar_info = 5;
inline bool SensorInfo::has_lidar_info() const {
  return this != internal_default_instance() && lidar_info_ != NULL;
}
inline void SensorInfo::clear_lidar_info() {
  if (GetArenaNoVirtual() == NULL && lidar_info_ != NULL) {
    delete lidar_info_;
  }
  lidar_info_ = NULL;
}
inline const ::calmcar::perception::LidarInfo& SensorInfo::lidar_info() const {
  const ::calmcar::perception::LidarInfo* p = lidar_info_;
  // @@protoc_insertion_point(field_get:calmcar.perception.SensorInfo.lidar_info)
  return p != NULL ? *p : *reinterpret_cast<const ::calmcar::perception::LidarInfo*>(
      &::calmcar::perception::_LidarInfo_default_instance_);
}
inline ::calmcar::perception::LidarInfo* SensorInfo::release_lidar_info() {
  // @@protoc_insertion_point(field_release:calmcar.perception.SensorInfo.lidar_info)
  
  ::calmcar::perception::LidarInfo* temp = lidar_info_;
  lidar_info_ = NULL;
  return temp;
}
inline ::calmcar::perception::LidarInfo* SensorInfo::mutable_lidar_info() {
  
  if (lidar_info_ == NULL) {
    lidar_info_ = new ::calmcar::perception::LidarInfo;
  }
  // @@protoc_insertion_point(field_mutable:calmcar.perception.SensorInfo.lidar_info)
  return lidar_info_;
}
inline void SensorInfo::set_allocated_lidar_info(::calmcar::perception::LidarInfo* lidar_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lidar_info_;
  }
  if (lidar_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lidar_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lidar_info, submessage_arena);
    }
    
  } else {
    
  }
  lidar_info_ = lidar_info;
  // @@protoc_insertion_point(field_set_allocated:calmcar.perception.SensorInfo.lidar_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace calmcar

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::calmcar::perception::CameraInfo_Position> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::CameraInfo_Position>() {
  return ::calmcar::perception::CameraInfo_Position_descriptor();
}
template <> struct is_proto_enum< ::calmcar::perception::SensorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calmcar::perception::SensorType>() {
  return ::calmcar::perception::SensorType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perception_5fsensor_5finfo_2eproto__INCLUDED
