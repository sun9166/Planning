// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prediction_debug_msgs.proto

#ifndef PROTOBUF_prediction_5fdebug_5fmsgs_2eproto__INCLUDED
#define PROTOBUF_prediction_5fdebug_5fmsgs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_prediction_5fdebug_5fmsgs_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[17];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsExitImpl();
void InitDefaultsExit();
void InitDefaultsInteractiveCrossWalkInfoImpl();
void InitDefaultsInteractiveCrossWalkInfo();
void InitDefaultsInteractiveIdImpl();
void InitDefaultsInteractiveId();
void InitDefaultsInteractiveLaneInfoImpl();
void InitDefaultsInteractiveLaneInfo();
void InitDefaultsJunctionnetImpl();
void InitDefaultsJunctionnet();
void InitDefaultsJunctionPropertyImpl();
void InitDefaultsJunctionProperty();
void InitDefaultsKeyJunctionObjectImpl();
void InitDefaultsKeyJunctionObject();
void InitDefaultsKeyObjectImpl();
void InitDefaultsKeyObject();
void InitDefaultsLaneInfoImpl();
void InitDefaultsLaneInfo();
void InitDefaultsLanePropertyImpl();
void InitDefaultsLaneProperty();
void InitDefaultsLanenetImpl();
void InitDefaultsLanenet();
void InitDefaultsObjectFeatureImpl();
void InitDefaultsObjectFeature();
void InitDefaultsSingleInteractiveCrossWalkInfoImpl();
void InitDefaultsSingleInteractiveCrossWalkInfo();
void InitDefaultsSingleInteractiveLaneInfoImpl();
void InitDefaultsSingleInteractiveLaneInfo();
void InitDefaultsTrafficLightFeatureImpl();
void InitDefaultsTrafficLightFeature();
void InitDefaultsSignalFeatureImpl();
void InitDefaultsSignalFeature();
void InitDefaultsObjectsFeatureImpl();
void InitDefaultsObjectsFeature();
inline void InitDefaults() {
  InitDefaultsExit();
  InitDefaultsInteractiveCrossWalkInfo();
  InitDefaultsInteractiveId();
  InitDefaultsInteractiveLaneInfo();
  InitDefaultsJunctionnet();
  InitDefaultsJunctionProperty();
  InitDefaultsKeyJunctionObject();
  InitDefaultsKeyObject();
  InitDefaultsLaneInfo();
  InitDefaultsLaneProperty();
  InitDefaultsLanenet();
  InitDefaultsObjectFeature();
  InitDefaultsSingleInteractiveCrossWalkInfo();
  InitDefaultsSingleInteractiveLaneInfo();
  InitDefaultsTrafficLightFeature();
  InitDefaultsSignalFeature();
  InitDefaultsObjectsFeature();
}
}  // namespace protobuf_prediction_5fdebug_5fmsgs_2eproto
namespace prediction_debug_msgs {
class Exit;
class ExitDefaultTypeInternal;
extern ExitDefaultTypeInternal _Exit_default_instance_;
class InteractiveCrossWalkInfo;
class InteractiveCrossWalkInfoDefaultTypeInternal;
extern InteractiveCrossWalkInfoDefaultTypeInternal _InteractiveCrossWalkInfo_default_instance_;
class InteractiveId;
class InteractiveIdDefaultTypeInternal;
extern InteractiveIdDefaultTypeInternal _InteractiveId_default_instance_;
class InteractiveLaneInfo;
class InteractiveLaneInfoDefaultTypeInternal;
extern InteractiveLaneInfoDefaultTypeInternal _InteractiveLaneInfo_default_instance_;
class JunctionProperty;
class JunctionPropertyDefaultTypeInternal;
extern JunctionPropertyDefaultTypeInternal _JunctionProperty_default_instance_;
class Junctionnet;
class JunctionnetDefaultTypeInternal;
extern JunctionnetDefaultTypeInternal _Junctionnet_default_instance_;
class KeyJunctionObject;
class KeyJunctionObjectDefaultTypeInternal;
extern KeyJunctionObjectDefaultTypeInternal _KeyJunctionObject_default_instance_;
class KeyObject;
class KeyObjectDefaultTypeInternal;
extern KeyObjectDefaultTypeInternal _KeyObject_default_instance_;
class LaneInfo;
class LaneInfoDefaultTypeInternal;
extern LaneInfoDefaultTypeInternal _LaneInfo_default_instance_;
class LaneProperty;
class LanePropertyDefaultTypeInternal;
extern LanePropertyDefaultTypeInternal _LaneProperty_default_instance_;
class Lanenet;
class LanenetDefaultTypeInternal;
extern LanenetDefaultTypeInternal _Lanenet_default_instance_;
class ObjectFeature;
class ObjectFeatureDefaultTypeInternal;
extern ObjectFeatureDefaultTypeInternal _ObjectFeature_default_instance_;
class ObjectsFeature;
class ObjectsFeatureDefaultTypeInternal;
extern ObjectsFeatureDefaultTypeInternal _ObjectsFeature_default_instance_;
class SignalFeature;
class SignalFeatureDefaultTypeInternal;
extern SignalFeatureDefaultTypeInternal _SignalFeature_default_instance_;
class SingleInteractiveCrossWalkInfo;
class SingleInteractiveCrossWalkInfoDefaultTypeInternal;
extern SingleInteractiveCrossWalkInfoDefaultTypeInternal _SingleInteractiveCrossWalkInfo_default_instance_;
class SingleInteractiveLaneInfo;
class SingleInteractiveLaneInfoDefaultTypeInternal;
extern SingleInteractiveLaneInfoDefaultTypeInternal _SingleInteractiveLaneInfo_default_instance_;
class TrafficLightFeature;
class TrafficLightFeatureDefaultTypeInternal;
extern TrafficLightFeatureDefaultTypeInternal _TrafficLightFeature_default_instance_;
}  // namespace prediction_debug_msgs
namespace prediction_debug_msgs {

// ===================================================================

class Exit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction_debug_msgs.Exit) */ {
 public:
  Exit();
  virtual ~Exit();

  Exit(const Exit& from);

  inline Exit& operator=(const Exit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Exit(Exit&& from) noexcept
    : Exit() {
    *this = ::std::move(from);
  }

  inline Exit& operator=(Exit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Exit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Exit* internal_default_instance() {
    return reinterpret_cast<const Exit*>(
               &_Exit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Exit* other);
  friend void swap(Exit& a, Exit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Exit* New() const PROTOBUF_FINAL { return New(NULL); }

  Exit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Exit& from);
  void MergeFrom(const Exit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Exit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string exit_lane_id = 1;
  void clear_exit_lane_id();
  static const int kExitLaneIdFieldNumber = 1;
  const ::std::string& exit_lane_id() const;
  void set_exit_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_exit_lane_id(::std::string&& value);
  #endif
  void set_exit_lane_id(const char* value);
  void set_exit_lane_id(const char* value, size_t size);
  ::std::string* mutable_exit_lane_id();
  ::std::string* release_exit_lane_id();
  void set_allocated_exit_lane_id(::std::string* exit_lane_id);

  // double x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  double x() const;
  void set_x(double value);

  // double y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  double y() const;
  void set_y(double value);

  // float prob = 4;
  void clear_prob();
  static const int kProbFieldNumber = 4;
  float prob() const;
  void set_prob(float value);

  // @@protoc_insertion_point(class_scope:prediction_debug_msgs.Exit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr exit_lane_id_;
  double x_;
  double y_;
  float prob_;
  mutable int _cached_size_;
  friend struct ::protobuf_prediction_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsExitImpl();
};
// -------------------------------------------------------------------

class InteractiveCrossWalkInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction_debug_msgs.InteractiveCrossWalkInfo) */ {
 public:
  InteractiveCrossWalkInfo();
  virtual ~InteractiveCrossWalkInfo();

  InteractiveCrossWalkInfo(const InteractiveCrossWalkInfo& from);

  inline InteractiveCrossWalkInfo& operator=(const InteractiveCrossWalkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InteractiveCrossWalkInfo(InteractiveCrossWalkInfo&& from) noexcept
    : InteractiveCrossWalkInfo() {
    *this = ::std::move(from);
  }

  inline InteractiveCrossWalkInfo& operator=(InteractiveCrossWalkInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InteractiveCrossWalkInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InteractiveCrossWalkInfo* internal_default_instance() {
    return reinterpret_cast<const InteractiveCrossWalkInfo*>(
               &_InteractiveCrossWalkInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(InteractiveCrossWalkInfo* other);
  friend void swap(InteractiveCrossWalkInfo& a, InteractiveCrossWalkInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InteractiveCrossWalkInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  InteractiveCrossWalkInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InteractiveCrossWalkInfo& from);
  void MergeFrom(const InteractiveCrossWalkInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InteractiveCrossWalkInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // double start_pos_xg = 2;
  void clear_start_pos_xg();
  static const int kStartPosXgFieldNumber = 2;
  double start_pos_xg() const;
  void set_start_pos_xg(double value);

  // double start_pos_yg = 3;
  void clear_start_pos_yg();
  static const int kStartPosYgFieldNumber = 3;
  double start_pos_yg() const;
  void set_start_pos_yg(double value);

  // double end_pos_xg = 4;
  void clear_end_pos_xg();
  static const int kEndPosXgFieldNumber = 4;
  double end_pos_xg() const;
  void set_end_pos_xg(double value);

  // double end_pos_yg = 5;
  void clear_end_pos_yg();
  static const int kEndPosYgFieldNumber = 5;
  double end_pos_yg() const;
  void set_end_pos_yg(double value);

  // bool has_id = 6;
  void clear_has_id();
  static const int kHasIdFieldNumber = 6;
  bool has_id() const;
  void set_has_id(bool value);

  // bool has_pos = 7;
  void clear_has_pos();
  static const int kHasPosFieldNumber = 7;
  bool has_pos() const;
  void set_has_pos(bool value);

  // @@protoc_insertion_point(class_scope:prediction_debug_msgs.InteractiveCrossWalkInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  double start_pos_xg_;
  double start_pos_yg_;
  double end_pos_xg_;
  double end_pos_yg_;
  bool has_id_;
  bool has_pos_;
  mutable int _cached_size_;
  friend struct ::protobuf_prediction_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsInteractiveCrossWalkInfoImpl();
};
// -------------------------------------------------------------------

class InteractiveId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction_debug_msgs.InteractiveId) */ {
 public:
  InteractiveId();
  virtual ~InteractiveId();

  InteractiveId(const InteractiveId& from);

  inline InteractiveId& operator=(const InteractiveId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InteractiveId(InteractiveId&& from) noexcept
    : InteractiveId() {
    *this = ::std::move(from);
  }

  inline InteractiveId& operator=(InteractiveId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InteractiveId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InteractiveId* internal_default_instance() {
    return reinterpret_cast<const InteractiveId*>(
               &_InteractiveId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(InteractiveId* other);
  friend void swap(InteractiveId& a, InteractiveId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InteractiveId* New() const PROTOBUF_FINAL { return New(NULL); }

  InteractiveId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InteractiveId& from);
  void MergeFrom(const InteractiveId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InteractiveId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ids = 1;
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 1;
  const ::std::string& ids(int index) const;
  ::std::string* mutable_ids(int index);
  void set_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ids(int index, ::std::string&& value);
  #endif
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  ::std::string* add_ids();
  void add_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_ids(::std::string&& value);
  #endif
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ids();

  // @@protoc_insertion_point(class_scope:prediction_debug_msgs.InteractiveId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ids_;
  mutable int _cached_size_;
  friend struct ::protobuf_prediction_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsInteractiveIdImpl();
};
// -------------------------------------------------------------------

class InteractiveLaneInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction_debug_msgs.InteractiveLaneInfo) */ {
 public:
  InteractiveLaneInfo();
  virtual ~InteractiveLaneInfo();

  InteractiveLaneInfo(const InteractiveLaneInfo& from);

  inline InteractiveLaneInfo& operator=(const InteractiveLaneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InteractiveLaneInfo(InteractiveLaneInfo&& from) noexcept
    : InteractiveLaneInfo() {
    *this = ::std::move(from);
  }

  inline InteractiveLaneInfo& operator=(InteractiveLaneInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InteractiveLaneInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InteractiveLaneInfo* internal_default_instance() {
    return reinterpret_cast<const InteractiveLaneInfo*>(
               &_InteractiveLaneInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(InteractiveLaneInfo* other);
  friend void swap(InteractiveLaneInfo& a, InteractiveLaneInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InteractiveLaneInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  InteractiveLaneInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InteractiveLaneInfo& from);
  void MergeFrom(const InteractiveLaneInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InteractiveLaneInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string lane_id = 1;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 1;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lane_id(::std::string&& value);
  #endif
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // double cross_pos_xg = 2;
  void clear_cross_pos_xg();
  static const int kCrossPosXgFieldNumber = 2;
  double cross_pos_xg() const;
  void set_cross_pos_xg(double value);

  // double cross_pos_yg = 3;
  void clear_cross_pos_yg();
  static const int kCrossPosYgFieldNumber = 3;
  double cross_pos_yg() const;
  void set_cross_pos_yg(double value);

  // double start_pos_xg = 4;
  void clear_start_pos_xg();
  static const int kStartPosXgFieldNumber = 4;
  double start_pos_xg() const;
  void set_start_pos_xg(double value);

  // double start_pos_yg = 5;
  void clear_start_pos_yg();
  static const int kStartPosYgFieldNumber = 5;
  double start_pos_yg() const;
  void set_start_pos_yg(double value);

  // double cross_s = 6;
  void clear_cross_s();
  static const int kCrossSFieldNumber = 6;
  double cross_s() const;
  void set_cross_s(double value);

  // @@protoc_insertion_point(class_scope:prediction_debug_msgs.InteractiveLaneInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  double cross_pos_xg_;
  double cross_pos_yg_;
  double start_pos_xg_;
  double start_pos_yg_;
  double cross_s_;
  mutable int _cached_size_;
  friend struct ::protobuf_prediction_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsInteractiveLaneInfoImpl();
};
// -------------------------------------------------------------------

class Junctionnet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction_debug_msgs.Junctionnet) */ {
 public:
  Junctionnet();
  virtual ~Junctionnet();

  Junctionnet(const Junctionnet& from);

  inline Junctionnet& operator=(const Junctionnet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Junctionnet(Junctionnet&& from) noexcept
    : Junctionnet() {
    *this = ::std::move(from);
  }

  inline Junctionnet& operator=(Junctionnet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Junctionnet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Junctionnet* internal_default_instance() {
    return reinterpret_cast<const Junctionnet*>(
               &_Junctionnet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Junctionnet* other);
  friend void swap(Junctionnet& a, Junctionnet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Junctionnet* New() const PROTOBUF_FINAL { return New(NULL); }

  Junctionnet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Junctionnet& from);
  void MergeFrom(const Junctionnet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Junctionnet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string lane_id = 1;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 1;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lane_id(::std::string&& value);
  #endif
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // double cross_pos_xg = 2;
  void clear_cross_pos_xg();
  static const int kCrossPosXgFieldNumber = 2;
  double cross_pos_xg() const;
  void set_cross_pos_xg(double value);

  // double cross_pos_yg = 3;
  void clear_cross_pos_yg();
  static const int kCrossPosYgFieldNumber = 3;
  double cross_pos_yg() const;
  void set_cross_pos_yg(double value);

  // double start_pos_xg = 4;
  void clear_start_pos_xg();
  static const int kStartPosXgFieldNumber = 4;
  double start_pos_xg() const;
  void set_start_pos_xg(double value);

  // double start_pos_yg = 5;
  void clear_start_pos_yg();
  static const int kStartPosYgFieldNumber = 5;
  double start_pos_yg() const;
  void set_start_pos_yg(double value);

  // double cross_s = 6;
  void clear_cross_s();
  static const int kCrossSFieldNumber = 6;
  double cross_s() const;
  void set_cross_s(double value);

  // @@protoc_insertion_point(class_scope:prediction_debug_msgs.Junctionnet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  double cross_pos_xg_;
  double cross_pos_yg_;
  double start_pos_xg_;
  double start_pos_yg_;
  double cross_s_;
  mutable int _cached_size_;
  friend struct ::protobuf_prediction_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsJunctionnetImpl();
};
// -------------------------------------------------------------------

class JunctionProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction_debug_msgs.JunctionProperty) */ {
 public:
  JunctionProperty();
  virtual ~JunctionProperty();

  JunctionProperty(const JunctionProperty& from);

  inline JunctionProperty& operator=(const JunctionProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JunctionProperty(JunctionProperty&& from) noexcept
    : JunctionProperty() {
    *this = ::std::move(from);
  }

  inline JunctionProperty& operator=(JunctionProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JunctionProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JunctionProperty* internal_default_instance() {
    return reinterpret_cast<const JunctionProperty*>(
               &_JunctionProperty_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(JunctionProperty* other);
  friend void swap(JunctionProperty& a, JunctionProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JunctionProperty* New() const PROTOBUF_FINAL { return New(NULL); }

  JunctionProperty* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JunctionProperty& from);
  void MergeFrom(const JunctionProperty& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JunctionProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string lane_id = 1;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 1;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lane_id(::std::string&& value);
  #endif
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // int32 is_exit = 2;
  void clear_is_exit();
  static const int kIsExitFieldNumber = 2;
  ::google::protobuf::int32 is_exit() const;
  void set_is_exit(::google::protobuf::int32 value);

  // int32 is_overlap = 3;
  void clear_is_overlap();
  static const int kIsOverlapFieldNumber = 3;
  ::google::protobuf::int32 is_overlap() const;
  void set_is_overlap(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:prediction_debug_msgs.JunctionProperty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  ::google::protobuf::int32 is_exit_;
  ::google::protobuf::int32 is_overlap_;
  mutable int _cached_size_;
  friend struct ::protobuf_prediction_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsJunctionPropertyImpl();
};
// -------------------------------------------------------------------

class KeyJunctionObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction_debug_msgs.KeyJunctionObject) */ {
 public:
  KeyJunctionObject();
  virtual ~KeyJunctionObject();

  KeyJunctionObject(const KeyJunctionObject& from);

  inline KeyJunctionObject& operator=(const KeyJunctionObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyJunctionObject(KeyJunctionObject&& from) noexcept
    : KeyJunctionObject() {
    *this = ::std::move(from);
  }

  inline KeyJunctionObject& operator=(KeyJunctionObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyJunctionObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyJunctionObject* internal_default_instance() {
    return reinterpret_cast<const KeyJunctionObject*>(
               &_KeyJunctionObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(KeyJunctionObject* other);
  friend void swap(KeyJunctionObject& a, KeyJunctionObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyJunctionObject* New() const PROTOBUF_FINAL { return New(NULL); }

  KeyJunctionObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KeyJunctionObject& from);
  void MergeFrom(const KeyJunctionObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KeyJunctionObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  double x() const;
  void set_x(double value);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // float theta = 4;
  void clear_theta();
  static const int kThetaFieldNumber = 4;
  float theta() const;
  void set_theta(float value);

  // double y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  double y() const;
  void set_y(double value);

  // float length = 5;
  void clear_length();
  static const int kLengthFieldNumber = 5;
  float length() const;
  void set_length(float value);

  // float width = 6;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  float width() const;
  void set_width(float value);

  // float height = 7;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  float height() const;
  void set_height(float value);

  // int32 consider_type = 8;
  void clear_consider_type();
  static const int kConsiderTypeFieldNumber = 8;
  ::google::protobuf::int32 consider_type() const;
  void set_consider_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:prediction_debug_msgs.KeyJunctionObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  ::google::protobuf::int32 id_;
  float theta_;
  double y_;
  float length_;
  float width_;
  float height_;
  ::google::protobuf::int32 consider_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_prediction_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsKeyJunctionObjectImpl();
};
// -------------------------------------------------------------------

class KeyObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction_debug_msgs.KeyObject) */ {
 public:
  KeyObject();
  virtual ~KeyObject();

  KeyObject(const KeyObject& from);

  inline KeyObject& operator=(const KeyObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyObject(KeyObject&& from) noexcept
    : KeyObject() {
    *this = ::std::move(from);
  }

  inline KeyObject& operator=(KeyObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyObject* internal_default_instance() {
    return reinterpret_cast<const KeyObject*>(
               &_KeyObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(KeyObject* other);
  friend void swap(KeyObject& a, KeyObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyObject* New() const PROTOBUF_FINAL { return New(NULL); }

  KeyObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KeyObject& from);
  void MergeFrom(const KeyObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KeyObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  double x() const;
  void set_x(double value);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // float theta = 4;
  void clear_theta();
  static const int kThetaFieldNumber = 4;
  float theta() const;
  void set_theta(float value);

  // double y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  double y() const;
  void set_y(double value);

  // float length = 5;
  void clear_length();
  static const int kLengthFieldNumber = 5;
  float length() const;
  void set_length(float value);

  // float width = 6;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  float width() const;
  void set_width(float value);

  // float height = 7;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  float height() const;
  void set_height(float value);

  // bool need_consider = 8;
  void clear_need_consider();
  static const int kNeedConsiderFieldNumber = 8;
  bool need_consider() const;
  void set_need_consider(bool value);

  // @@protoc_insertion_point(class_scope:prediction_debug_msgs.KeyObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  ::google::protobuf::int32 id_;
  float theta_;
  double y_;
  float length_;
  float width_;
  float height_;
  bool need_consider_;
  mutable int _cached_size_;
  friend struct ::protobuf_prediction_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsKeyObjectImpl();
};
// -------------------------------------------------------------------

class LaneInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction_debug_msgs.LaneInfo) */ {
 public:
  LaneInfo();
  virtual ~LaneInfo();

  LaneInfo(const LaneInfo& from);

  inline LaneInfo& operator=(const LaneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneInfo(LaneInfo&& from) noexcept
    : LaneInfo() {
    *this = ::std::move(from);
  }

  inline LaneInfo& operator=(LaneInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneInfo* internal_default_instance() {
    return reinterpret_cast<const LaneInfo*>(
               &_LaneInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(LaneInfo* other);
  friend void swap(LaneInfo& a, LaneInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneInfo& from);
  void MergeFrom(const LaneInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string lane_id = 1;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 1;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lane_id(::std::string&& value);
  #endif
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // double pos_s = 2;
  void clear_pos_s();
  static const int kPosSFieldNumber = 2;
  double pos_s() const;
  void set_pos_s(double value);

  // double pos_l = 3;
  void clear_pos_l();
  static const int kPosLFieldNumber = 3;
  double pos_l() const;
  void set_pos_l(double value);

  // double heading_diff = 4;
  void clear_heading_diff();
  static const int kHeadingDiffFieldNumber = 4;
  double heading_diff() const;
  void set_heading_diff(double value);

  // double dist_to_left_boundary = 5;
  void clear_dist_to_left_boundary();
  static const int kDistToLeftBoundaryFieldNumber = 5;
  double dist_to_left_boundary() const;
  void set_dist_to_left_boundary(double value);

  // double dist_to_right_boundary = 6;
  void clear_dist_to_right_boundary();
  static const int kDistToRightBoundaryFieldNumber = 6;
  double dist_to_right_boundary() const;
  void set_dist_to_right_boundary(double value);

  // bool is_on_lane = 7;
  void clear_is_on_lane();
  static const int kIsOnLaneFieldNumber = 7;
  bool is_on_lane() const;
  void set_is_on_lane(bool value);

  // @@protoc_insertion_point(class_scope:prediction_debug_msgs.LaneInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  double pos_s_;
  double pos_l_;
  double heading_diff_;
  double dist_to_left_boundary_;
  double dist_to_right_boundary_;
  bool is_on_lane_;
  mutable int _cached_size_;
  friend struct ::protobuf_prediction_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsLaneInfoImpl();
};
// -------------------------------------------------------------------

class LaneProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction_debug_msgs.LaneProperty) */ {
 public:
  LaneProperty();
  virtual ~LaneProperty();

  LaneProperty(const LaneProperty& from);

  inline LaneProperty& operator=(const LaneProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneProperty(LaneProperty&& from) noexcept
    : LaneProperty() {
    *this = ::std::move(from);
  }

  inline LaneProperty& operator=(LaneProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneProperty* internal_default_instance() {
    return reinterpret_cast<const LaneProperty*>(
               &_LaneProperty_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(LaneProperty* other);
  friend void swap(LaneProperty& a, LaneProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneProperty* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneProperty* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneProperty& from);
  void MergeFrom(const LaneProperty& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 obs_start_to_end = 11;
  int obs_start_to_end_size() const;
  void clear_obs_start_to_end();
  static const int kObsStartToEndFieldNumber = 11;
  ::google::protobuf::int32 obs_start_to_end(int index) const;
  void set_obs_start_to_end(int index, ::google::protobuf::int32 value);
  void add_obs_start_to_end(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      obs_start_to_end() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_obs_start_to_end();

  // repeated int32 obs_end_to_start = 12;
  int obs_end_to_start_size() const;
  void clear_obs_end_to_start();
  static const int kObsEndToStartFieldNumber = 12;
  ::google::protobuf::int32 obs_end_to_start(int index) const;
  void set_obs_end_to_start(int index, ::google::protobuf::int32 value);
  void add_obs_end_to_start(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      obs_end_to_start() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_obs_end_to_start();

  // string lane_id = 1;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 1;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lane_id(::std::string&& value);
  #endif
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // float total_length = 2;
  void clear_total_length();
  static const int kTotalLengthFieldNumber = 2;
  float total_length() const;
  void set_total_length(float value);

  // float start_s = 3;
  void clear_start_s();
  static const int kStartSFieldNumber = 3;
  float start_s() const;
  void set_start_s(float value);

  // float end_s = 4;
  void clear_end_s();
  static const int kEndSFieldNumber = 4;
  float end_s() const;
  void set_end_s(float value);

  // int32 forward_history_num = 5;
  void clear_forward_history_num();
  static const int kForwardHistoryNumFieldNumber = 5;
  ::google::protobuf::int32 forward_history_num() const;
  void set_forward_history_num(::google::protobuf::int32 value);

  // int32 backward_history_num = 6;
  void clear_backward_history_num();
  static const int kBackwardHistoryNumFieldNumber = 6;
  ::google::protobuf::int32 backward_history_num() const;
  void set_backward_history_num(::google::protobuf::int32 value);

  // int32 forward_obs_num = 7;
  void clear_forward_obs_num();
  static const int kForwardObsNumFieldNumber = 7;
  ::google::protobuf::int32 forward_obs_num() const;
  void set_forward_obs_num(::google::protobuf::int32 value);

  // int32 backward_obs_num = 8;
  void clear_backward_obs_num();
  static const int kBackwardObsNumFieldNumber = 8;
  ::google::protobuf::int32 backward_obs_num() const;
  void set_backward_obs_num(::google::protobuf::int32 value);

  // bool is_lane_checked = 9;
  void clear_is_lane_checked();
  static const int kIsLaneCheckedFieldNumber = 9;
  bool is_lane_checked() const;
  void set_is_lane_checked(bool value);

  // bool is_object_checked = 10;
  void clear_is_object_checked();
  static const int kIsObjectCheckedFieldNumber = 10;
  bool is_object_checked() const;
  void set_is_object_checked(bool value);

  // @@protoc_insertion_point(class_scope:prediction_debug_msgs.LaneProperty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > obs_start_to_end_;
  mutable int _obs_start_to_end_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > obs_end_to_start_;
  mutable int _obs_end_to_start_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  float total_length_;
  float start_s_;
  float end_s_;
  ::google::protobuf::int32 forward_history_num_;
  ::google::protobuf::int32 backward_history_num_;
  ::google::protobuf::int32 forward_obs_num_;
  ::google::protobuf::int32 backward_obs_num_;
  bool is_lane_checked_;
  bool is_object_checked_;
  mutable int _cached_size_;
  friend struct ::protobuf_prediction_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsLanePropertyImpl();
};
// -------------------------------------------------------------------

class Lanenet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction_debug_msgs.Lanenet) */ {
 public:
  Lanenet();
  virtual ~Lanenet();

  Lanenet(const Lanenet& from);

  inline Lanenet& operator=(const Lanenet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Lanenet(Lanenet&& from) noexcept
    : Lanenet() {
    *this = ::std::move(from);
  }

  inline Lanenet& operator=(Lanenet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Lanenet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lanenet* internal_default_instance() {
    return reinterpret_cast<const Lanenet*>(
               &_Lanenet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Lanenet* other);
  friend void swap(Lanenet& a, Lanenet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Lanenet* New() const PROTOBUF_FINAL { return New(NULL); }

  Lanenet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lanenet& from);
  void MergeFrom(const Lanenet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lanenet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prediction_debug_msgs.LaneProperty lane_net = 1;
  int lane_net_size() const;
  void clear_lane_net();
  static const int kLaneNetFieldNumber = 1;
  const ::prediction_debug_msgs::LaneProperty& lane_net(int index) const;
  ::prediction_debug_msgs::LaneProperty* mutable_lane_net(int index);
  ::prediction_debug_msgs::LaneProperty* add_lane_net();
  ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::LaneProperty >*
      mutable_lane_net();
  const ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::LaneProperty >&
      lane_net() const;

  // repeated .prediction_debug_msgs.KeyObject objects = 2;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 2;
  const ::prediction_debug_msgs::KeyObject& objects(int index) const;
  ::prediction_debug_msgs::KeyObject* mutable_objects(int index);
  ::prediction_debug_msgs::KeyObject* add_objects();
  ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::KeyObject >*
      mutable_objects();
  const ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::KeyObject >&
      objects() const;

  // @@protoc_insertion_point(class_scope:prediction_debug_msgs.Lanenet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::LaneProperty > lane_net_;
  ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::KeyObject > objects_;
  mutable int _cached_size_;
  friend struct ::protobuf_prediction_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsLanenetImpl();
};
// -------------------------------------------------------------------

class ObjectFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction_debug_msgs.ObjectFeature) */ {
 public:
  ObjectFeature();
  virtual ~ObjectFeature();

  ObjectFeature(const ObjectFeature& from);

  inline ObjectFeature& operator=(const ObjectFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectFeature(ObjectFeature&& from) noexcept
    : ObjectFeature() {
    *this = ::std::move(from);
  }

  inline ObjectFeature& operator=(ObjectFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectFeature* internal_default_instance() {
    return reinterpret_cast<const ObjectFeature*>(
               &_ObjectFeature_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ObjectFeature* other);
  friend void swap(ObjectFeature& a, ObjectFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectFeature* New() const PROTOBUF_FINAL { return New(NULL); }

  ObjectFeature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ObjectFeature& from);
  void MergeFrom(const ObjectFeature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ObjectFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string current_lane_ids = 17;
  int current_lane_ids_size() const;
  void clear_current_lane_ids();
  static const int kCurrentLaneIdsFieldNumber = 17;
  const ::std::string& current_lane_ids(int index) const;
  ::std::string* mutable_current_lane_ids(int index);
  void set_current_lane_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_current_lane_ids(int index, ::std::string&& value);
  #endif
  void set_current_lane_ids(int index, const char* value);
  void set_current_lane_ids(int index, const char* value, size_t size);
  ::std::string* add_current_lane_ids();
  void add_current_lane_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_current_lane_ids(::std::string&& value);
  #endif
  void add_current_lane_ids(const char* value);
  void add_current_lane_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& current_lane_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_current_lane_ids();

  // repeated string nearby_lane_ids = 18;
  int nearby_lane_ids_size() const;
  void clear_nearby_lane_ids();
  static const int kNearbyLaneIdsFieldNumber = 18;
  const ::std::string& nearby_lane_ids(int index) const;
  ::std::string* mutable_nearby_lane_ids(int index);
  void set_nearby_lane_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_nearby_lane_ids(int index, ::std::string&& value);
  #endif
  void set_nearby_lane_ids(int index, const char* value);
  void set_nearby_lane_ids(int index, const char* value, size_t size);
  ::std::string* add_nearby_lane_ids();
  void add_nearby_lane_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_nearby_lane_ids(::std::string&& value);
  #endif
  void add_nearby_lane_ids(const char* value);
  void add_nearby_lane_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& nearby_lane_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nearby_lane_ids();

  // repeated .prediction_debug_msgs.Exit exits = 20;
  int exits_size() const;
  void clear_exits();
  static const int kExitsFieldNumber = 20;
  const ::prediction_debug_msgs::Exit& exits(int index) const;
  ::prediction_debug_msgs::Exit* mutable_exits(int index);
  ::prediction_debug_msgs::Exit* add_exits();
  ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::Exit >*
      mutable_exits();
  const ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::Exit >&
      exits() const;

  // string lane_id = 16;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 16;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lane_id(::std::string&& value);
  #endif
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // string enter_lane = 19;
  void clear_enter_lane();
  static const int kEnterLaneFieldNumber = 19;
  const ::std::string& enter_lane() const;
  void set_enter_lane(const ::std::string& value);
  #if LANG_CXX11
  void set_enter_lane(::std::string&& value);
  #endif
  void set_enter_lane(const char* value);
  void set_enter_lane(const char* value, size_t size);
  ::std::string* mutable_enter_lane();
  ::std::string* release_enter_lane();
  void set_allocated_enter_lane(::std::string* enter_lane);

  // .prediction_debug_msgs.Exit off_lane_exit = 21;
  bool has_off_lane_exit() const;
  void clear_off_lane_exit();
  static const int kOffLaneExitFieldNumber = 21;
  const ::prediction_debug_msgs::Exit& off_lane_exit() const;
  ::prediction_debug_msgs::Exit* release_off_lane_exit();
  ::prediction_debug_msgs::Exit* mutable_off_lane_exit();
  void set_allocated_off_lane_exit(::prediction_debug_msgs::Exit* off_lane_exit);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // double x = 3;
  void clear_x();
  static const int kXFieldNumber = 3;
  double x() const;
  void set_x(double value);

  // double y = 4;
  void clear_y();
  static const int kYFieldNumber = 4;
  double y() const;
  void set_y(double value);

  // double z = 5;
  void clear_z();
  static const int kZFieldNumber = 5;
  double z() const;
  void set_z(double value);

  // double length = 6;
  void clear_length();
  static const int kLengthFieldNumber = 6;
  double length() const;
  void set_length(double value);

  // double width = 7;
  void clear_width();
  static const int kWidthFieldNumber = 7;
  double width() const;
  void set_width(double value);

  // double height = 8;
  void clear_height();
  static const int kHeightFieldNumber = 8;
  double height() const;
  void set_height(double value);

  // double speed = 9;
  void clear_speed();
  static const int kSpeedFieldNumber = 9;
  double speed() const;
  void set_speed(double value);

  // double acc = 10;
  void clear_acc();
  static const int kAccFieldNumber = 10;
  double acc() const;
  void set_acc(double value);

  // double final_heading = 11;
  void clear_final_heading();
  static const int kFinalHeadingFieldNumber = 11;
  double final_heading() const;
  void set_final_heading(double value);

  // int32 is_ultra_static = 14;
  void clear_is_ultra_static();
  static const int kIsUltraStaticFieldNumber = 14;
  ::google::protobuf::int32 is_ultra_static() const;
  void set_is_ultra_static(::google::protobuf::int32 value);

  // int32 priority = 15;
  void clear_priority();
  static const int kPriorityFieldNumber = 15;
  ::google::protobuf::int32 priority() const;
  void set_priority(::google::protobuf::int32 value);

  // bool is_static = 12;
  void clear_is_static();
  static const int kIsStaticFieldNumber = 12;
  bool is_static() const;
  void set_is_static(bool value);

  // bool is_illegal = 13;
  void clear_is_illegal();
  static const int kIsIllegalFieldNumber = 13;
  bool is_illegal() const;
  void set_is_illegal(bool value);

  // bool need_exception_handling = 25;
  void clear_need_exception_handling();
  static const int kNeedExceptionHandlingFieldNumber = 25;
  bool need_exception_handling() const;
  void set_need_exception_handling(bool value);

  // int32 evaluator_type = 22;
  void clear_evaluator_type();
  static const int kEvaluatorTypeFieldNumber = 22;
  ::google::protobuf::int32 evaluator_type() const;
  void set_evaluator_type(::google::protobuf::int32 value);

  // int32 sub_evaluator_type = 23;
  void clear_sub_evaluator_type();
  static const int kSubEvaluatorTypeFieldNumber = 23;
  ::google::protobuf::int32 sub_evaluator_type() const;
  void set_sub_evaluator_type(::google::protobuf::int32 value);

  // int32 predictor_type = 24;
  void clear_predictor_type();
  static const int kPredictorTypeFieldNumber = 24;
  ::google::protobuf::int32 predictor_type() const;
  void set_predictor_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:prediction_debug_msgs.ObjectFeature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> current_lane_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nearby_lane_ids_;
  ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::Exit > exits_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  ::google::protobuf::internal::ArenaStringPtr enter_lane_;
  ::prediction_debug_msgs::Exit* off_lane_exit_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::int32 type_;
  double x_;
  double y_;
  double z_;
  double length_;
  double width_;
  double height_;
  double speed_;
  double acc_;
  double final_heading_;
  ::google::protobuf::int32 is_ultra_static_;
  ::google::protobuf::int32 priority_;
  bool is_static_;
  bool is_illegal_;
  bool need_exception_handling_;
  ::google::protobuf::int32 evaluator_type_;
  ::google::protobuf::int32 sub_evaluator_type_;
  ::google::protobuf::int32 predictor_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_prediction_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsObjectFeatureImpl();
};
// -------------------------------------------------------------------

class SingleInteractiveCrossWalkInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction_debug_msgs.SingleInteractiveCrossWalkInfo) */ {
 public:
  SingleInteractiveCrossWalkInfo();
  virtual ~SingleInteractiveCrossWalkInfo();

  SingleInteractiveCrossWalkInfo(const SingleInteractiveCrossWalkInfo& from);

  inline SingleInteractiveCrossWalkInfo& operator=(const SingleInteractiveCrossWalkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SingleInteractiveCrossWalkInfo(SingleInteractiveCrossWalkInfo&& from) noexcept
    : SingleInteractiveCrossWalkInfo() {
    *this = ::std::move(from);
  }

  inline SingleInteractiveCrossWalkInfo& operator=(SingleInteractiveCrossWalkInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleInteractiveCrossWalkInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleInteractiveCrossWalkInfo* internal_default_instance() {
    return reinterpret_cast<const SingleInteractiveCrossWalkInfo*>(
               &_SingleInteractiveCrossWalkInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(SingleInteractiveCrossWalkInfo* other);
  friend void swap(SingleInteractiveCrossWalkInfo& a, SingleInteractiveCrossWalkInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingleInteractiveCrossWalkInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SingleInteractiveCrossWalkInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SingleInteractiveCrossWalkInfo& from);
  void MergeFrom(const SingleInteractiveCrossWalkInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SingleInteractiveCrossWalkInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prediction_debug_msgs.InteractiveCrossWalkInfo crosswalks = 2;
  int crosswalks_size() const;
  void clear_crosswalks();
  static const int kCrosswalksFieldNumber = 2;
  const ::prediction_debug_msgs::InteractiveCrossWalkInfo& crosswalks(int index) const;
  ::prediction_debug_msgs::InteractiveCrossWalkInfo* mutable_crosswalks(int index);
  ::prediction_debug_msgs::InteractiveCrossWalkInfo* add_crosswalks();
  ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::InteractiveCrossWalkInfo >*
      mutable_crosswalks();
  const ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::InteractiveCrossWalkInfo >&
      crosswalks() const;

  // string light_id = 1;
  void clear_light_id();
  static const int kLightIdFieldNumber = 1;
  const ::std::string& light_id() const;
  void set_light_id(const ::std::string& value);
  #if LANG_CXX11
  void set_light_id(::std::string&& value);
  #endif
  void set_light_id(const char* value);
  void set_light_id(const char* value, size_t size);
  ::std::string* mutable_light_id();
  ::std::string* release_light_id();
  void set_allocated_light_id(::std::string* light_id);

  // @@protoc_insertion_point(class_scope:prediction_debug_msgs.SingleInteractiveCrossWalkInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::InteractiveCrossWalkInfo > crosswalks_;
  ::google::protobuf::internal::ArenaStringPtr light_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_prediction_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsSingleInteractiveCrossWalkInfoImpl();
};
// -------------------------------------------------------------------

class SingleInteractiveLaneInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction_debug_msgs.SingleInteractiveLaneInfo) */ {
 public:
  SingleInteractiveLaneInfo();
  virtual ~SingleInteractiveLaneInfo();

  SingleInteractiveLaneInfo(const SingleInteractiveLaneInfo& from);

  inline SingleInteractiveLaneInfo& operator=(const SingleInteractiveLaneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SingleInteractiveLaneInfo(SingleInteractiveLaneInfo&& from) noexcept
    : SingleInteractiveLaneInfo() {
    *this = ::std::move(from);
  }

  inline SingleInteractiveLaneInfo& operator=(SingleInteractiveLaneInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleInteractiveLaneInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleInteractiveLaneInfo* internal_default_instance() {
    return reinterpret_cast<const SingleInteractiveLaneInfo*>(
               &_SingleInteractiveLaneInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(SingleInteractiveLaneInfo* other);
  friend void swap(SingleInteractiveLaneInfo& a, SingleInteractiveLaneInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingleInteractiveLaneInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SingleInteractiveLaneInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SingleInteractiveLaneInfo& from);
  void MergeFrom(const SingleInteractiveLaneInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SingleInteractiveLaneInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prediction_debug_msgs.InteractiveLaneInfo cross_lanes = 2;
  int cross_lanes_size() const;
  void clear_cross_lanes();
  static const int kCrossLanesFieldNumber = 2;
  const ::prediction_debug_msgs::InteractiveLaneInfo& cross_lanes(int index) const;
  ::prediction_debug_msgs::InteractiveLaneInfo* mutable_cross_lanes(int index);
  ::prediction_debug_msgs::InteractiveLaneInfo* add_cross_lanes();
  ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::InteractiveLaneInfo >*
      mutable_cross_lanes();
  const ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::InteractiveLaneInfo >&
      cross_lanes() const;

  // string light_id = 1;
  void clear_light_id();
  static const int kLightIdFieldNumber = 1;
  const ::std::string& light_id() const;
  void set_light_id(const ::std::string& value);
  #if LANG_CXX11
  void set_light_id(::std::string&& value);
  #endif
  void set_light_id(const char* value);
  void set_light_id(const char* value, size_t size);
  ::std::string* mutable_light_id();
  ::std::string* release_light_id();
  void set_allocated_light_id(::std::string* light_id);

  // @@protoc_insertion_point(class_scope:prediction_debug_msgs.SingleInteractiveLaneInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::InteractiveLaneInfo > cross_lanes_;
  ::google::protobuf::internal::ArenaStringPtr light_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_prediction_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsSingleInteractiveLaneInfoImpl();
};
// -------------------------------------------------------------------

class TrafficLightFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction_debug_msgs.TrafficLightFeature) */ {
 public:
  TrafficLightFeature();
  virtual ~TrafficLightFeature();

  TrafficLightFeature(const TrafficLightFeature& from);

  inline TrafficLightFeature& operator=(const TrafficLightFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrafficLightFeature(TrafficLightFeature&& from) noexcept
    : TrafficLightFeature() {
    *this = ::std::move(from);
  }

  inline TrafficLightFeature& operator=(TrafficLightFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficLightFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLightFeature* internal_default_instance() {
    return reinterpret_cast<const TrafficLightFeature*>(
               &_TrafficLightFeature_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(TrafficLightFeature* other);
  friend void swap(TrafficLightFeature& a, TrafficLightFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrafficLightFeature* New() const PROTOBUF_FINAL { return New(NULL); }

  TrafficLightFeature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrafficLightFeature& from);
  void MergeFrom(const TrafficLightFeature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrafficLightFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string associated_lane_ids = 11;
  int associated_lane_ids_size() const;
  void clear_associated_lane_ids();
  static const int kAssociatedLaneIdsFieldNumber = 11;
  const ::std::string& associated_lane_ids(int index) const;
  ::std::string* mutable_associated_lane_ids(int index);
  void set_associated_lane_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_associated_lane_ids(int index, ::std::string&& value);
  #endif
  void set_associated_lane_ids(int index, const char* value);
  void set_associated_lane_ids(int index, const char* value, size_t size);
  ::std::string* add_associated_lane_ids();
  void add_associated_lane_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_associated_lane_ids(::std::string&& value);
  #endif
  void add_associated_lane_ids(const char* value);
  void add_associated_lane_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& associated_lane_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_associated_lane_ids();

  // string light_id = 1;
  void clear_light_id();
  static const int kLightIdFieldNumber = 1;
  const ::std::string& light_id() const;
  void set_light_id(const ::std::string& value);
  #if LANG_CXX11
  void set_light_id(::std::string&& value);
  #endif
  void set_light_id(const char* value);
  void set_light_id(const char* value, size_t size);
  ::std::string* mutable_light_id();
  ::std::string* release_light_id();
  void set_allocated_light_id(::std::string* light_id);

  // string lane_id = 2;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 2;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lane_id(::std::string&& value);
  #endif
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // int32 lane_turn = 3;
  void clear_lane_turn();
  static const int kLaneTurnFieldNumber = 3;
  ::google::protobuf::int32 lane_turn() const;
  void set_lane_turn(::google::protobuf::int32 value);

  // int32 signal_type = 4;
  void clear_signal_type();
  static const int kSignalTypeFieldNumber = 4;
  ::google::protobuf::int32 signal_type() const;
  void set_signal_type(::google::protobuf::int32 value);

  // int32 last_color = 5;
  void clear_last_color();
  static const int kLastColorFieldNumber = 5;
  ::google::protobuf::int32 last_color() const;
  void set_last_color(::google::protobuf::int32 value);

  // int32 current_color = 6;
  void clear_current_color();
  static const int kCurrentColorFieldNumber = 6;
  ::google::protobuf::int32 current_color() const;
  void set_current_color(::google::protobuf::int32 value);

  // int32 detect_keep_frames = 7;
  void clear_detect_keep_frames();
  static const int kDetectKeepFramesFieldNumber = 7;
  ::google::protobuf::int32 detect_keep_frames() const;
  void set_detect_keep_frames(::google::protobuf::int32 value);

  // int32 infer_keep_frames = 8;
  void clear_infer_keep_frames();
  static const int kInferKeepFramesFieldNumber = 8;
  ::google::protobuf::int32 infer_keep_frames() const;
  void set_infer_keep_frames(::google::protobuf::int32 value);

  // double start_heading = 12;
  void clear_start_heading();
  static const int kStartHeadingFieldNumber = 12;
  double start_heading() const;
  void set_start_heading(double value);

  // double end_heading = 13;
  void clear_end_heading();
  static const int kEndHeadingFieldNumber = 13;
  double end_heading() const;
  void set_end_heading(double value);

  // bool is_seen = 9;
  void clear_is_seen();
  static const int kIsSeenFieldNumber = 9;
  bool is_seen() const;
  void set_is_seen(bool value);

  // bool is_passable = 10;
  void clear_is_passable();
  static const int kIsPassableFieldNumber = 10;
  bool is_passable() const;
  void set_is_passable(bool value);

  // @@protoc_insertion_point(class_scope:prediction_debug_msgs.TrafficLightFeature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> associated_lane_ids_;
  ::google::protobuf::internal::ArenaStringPtr light_id_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  ::google::protobuf::int32 lane_turn_;
  ::google::protobuf::int32 signal_type_;
  ::google::protobuf::int32 last_color_;
  ::google::protobuf::int32 current_color_;
  ::google::protobuf::int32 detect_keep_frames_;
  ::google::protobuf::int32 infer_keep_frames_;
  double start_heading_;
  double end_heading_;
  bool is_seen_;
  bool is_passable_;
  mutable int _cached_size_;
  friend struct ::protobuf_prediction_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsTrafficLightFeatureImpl();
};
// -------------------------------------------------------------------

class SignalFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction_debug_msgs.SignalFeature) */ {
 public:
  SignalFeature();
  virtual ~SignalFeature();

  SignalFeature(const SignalFeature& from);

  inline SignalFeature& operator=(const SignalFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignalFeature(SignalFeature&& from) noexcept
    : SignalFeature() {
    *this = ::std::move(from);
  }

  inline SignalFeature& operator=(SignalFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalFeature* internal_default_instance() {
    return reinterpret_cast<const SignalFeature*>(
               &_SignalFeature_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(SignalFeature* other);
  friend void swap(SignalFeature& a, SignalFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignalFeature* New() const PROTOBUF_FINAL { return New(NULL); }

  SignalFeature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SignalFeature& from);
  void MergeFrom(const SignalFeature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SignalFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prediction_debug_msgs.TrafficLightFeature candidate_lights = 1;
  int candidate_lights_size() const;
  void clear_candidate_lights();
  static const int kCandidateLightsFieldNumber = 1;
  const ::prediction_debug_msgs::TrafficLightFeature& candidate_lights(int index) const;
  ::prediction_debug_msgs::TrafficLightFeature* mutable_candidate_lights(int index);
  ::prediction_debug_msgs::TrafficLightFeature* add_candidate_lights();
  ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::TrafficLightFeature >*
      mutable_candidate_lights();
  const ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::TrafficLightFeature >&
      candidate_lights() const;

  // repeated .prediction_debug_msgs.TrafficLightFeature assistant_lights = 2;
  int assistant_lights_size() const;
  void clear_assistant_lights();
  static const int kAssistantLightsFieldNumber = 2;
  const ::prediction_debug_msgs::TrafficLightFeature& assistant_lights(int index) const;
  ::prediction_debug_msgs::TrafficLightFeature* mutable_assistant_lights(int index);
  ::prediction_debug_msgs::TrafficLightFeature* add_assistant_lights();
  ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::TrafficLightFeature >*
      mutable_assistant_lights();
  const ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::TrafficLightFeature >&
      assistant_lights() const;

  // repeated .prediction_debug_msgs.SingleInteractiveLaneInfo candidate_cross_lanes = 3;
  int candidate_cross_lanes_size() const;
  void clear_candidate_cross_lanes();
  static const int kCandidateCrossLanesFieldNumber = 3;
  const ::prediction_debug_msgs::SingleInteractiveLaneInfo& candidate_cross_lanes(int index) const;
  ::prediction_debug_msgs::SingleInteractiveLaneInfo* mutable_candidate_cross_lanes(int index);
  ::prediction_debug_msgs::SingleInteractiveLaneInfo* add_candidate_cross_lanes();
  ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::SingleInteractiveLaneInfo >*
      mutable_candidate_cross_lanes();
  const ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::SingleInteractiveLaneInfo >&
      candidate_cross_lanes() const;

  // repeated .prediction_debug_msgs.SingleInteractiveCrossWalkInfo candidate_crosswalks = 4;
  int candidate_crosswalks_size() const;
  void clear_candidate_crosswalks();
  static const int kCandidateCrosswalksFieldNumber = 4;
  const ::prediction_debug_msgs::SingleInteractiveCrossWalkInfo& candidate_crosswalks(int index) const;
  ::prediction_debug_msgs::SingleInteractiveCrossWalkInfo* mutable_candidate_crosswalks(int index);
  ::prediction_debug_msgs::SingleInteractiveCrossWalkInfo* add_candidate_crosswalks();
  ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::SingleInteractiveCrossWalkInfo >*
      mutable_candidate_crosswalks();
  const ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::SingleInteractiveCrossWalkInfo >&
      candidate_crosswalks() const;

  // @@protoc_insertion_point(class_scope:prediction_debug_msgs.SignalFeature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::TrafficLightFeature > candidate_lights_;
  ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::TrafficLightFeature > assistant_lights_;
  ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::SingleInteractiveLaneInfo > candidate_cross_lanes_;
  ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::SingleInteractiveCrossWalkInfo > candidate_crosswalks_;
  mutable int _cached_size_;
  friend struct ::protobuf_prediction_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsSignalFeatureImpl();
};
// -------------------------------------------------------------------

class ObjectsFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:prediction_debug_msgs.ObjectsFeature) */ {
 public:
  ObjectsFeature();
  virtual ~ObjectsFeature();

  ObjectsFeature(const ObjectsFeature& from);

  inline ObjectsFeature& operator=(const ObjectsFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectsFeature(ObjectsFeature&& from) noexcept
    : ObjectsFeature() {
    *this = ::std::move(from);
  }

  inline ObjectsFeature& operator=(ObjectsFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectsFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectsFeature* internal_default_instance() {
    return reinterpret_cast<const ObjectsFeature*>(
               &_ObjectsFeature_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(ObjectsFeature* other);
  friend void swap(ObjectsFeature& a, ObjectsFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectsFeature* New() const PROTOBUF_FINAL { return New(NULL); }

  ObjectsFeature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ObjectsFeature& from);
  void MergeFrom(const ObjectsFeature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ObjectsFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .prediction_debug_msgs.ObjectFeature objects_feature = 2;
  int objects_feature_size() const;
  void clear_objects_feature();
  static const int kObjectsFeatureFieldNumber = 2;
  const ::prediction_debug_msgs::ObjectFeature& objects_feature(int index) const;
  ::prediction_debug_msgs::ObjectFeature* mutable_objects_feature(int index);
  ::prediction_debug_msgs::ObjectFeature* add_objects_feature();
  ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::ObjectFeature >*
      mutable_objects_feature();
  const ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::ObjectFeature >&
      objects_feature() const;

  // string err_msg = 5;
  void clear_err_msg();
  static const int kErrMsgFieldNumber = 5;
  const ::std::string& err_msg() const;
  void set_err_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_err_msg(::std::string&& value);
  #endif
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  ::std::string* mutable_err_msg();
  ::std::string* release_err_msg();
  void set_allocated_err_msg(::std::string* err_msg);

  // .prediction_debug_msgs.ObjectFeature self_pos_feature = 1;
  bool has_self_pos_feature() const;
  void clear_self_pos_feature();
  static const int kSelfPosFeatureFieldNumber = 1;
  const ::prediction_debug_msgs::ObjectFeature& self_pos_feature() const;
  ::prediction_debug_msgs::ObjectFeature* release_self_pos_feature();
  ::prediction_debug_msgs::ObjectFeature* mutable_self_pos_feature();
  void set_allocated_self_pos_feature(::prediction_debug_msgs::ObjectFeature* self_pos_feature);

  // .prediction_debug_msgs.SignalFeature signal_feature = 3;
  bool has_signal_feature() const;
  void clear_signal_feature();
  static const int kSignalFeatureFieldNumber = 3;
  const ::prediction_debug_msgs::SignalFeature& signal_feature() const;
  ::prediction_debug_msgs::SignalFeature* release_signal_feature();
  ::prediction_debug_msgs::SignalFeature* mutable_signal_feature();
  void set_allocated_signal_feature(::prediction_debug_msgs::SignalFeature* signal_feature);

  // double cost_time = 4;
  void clear_cost_time();
  static const int kCostTimeFieldNumber = 4;
  double cost_time() const;
  void set_cost_time(double value);

  // @@protoc_insertion_point(class_scope:prediction_debug_msgs.ObjectsFeature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::ObjectFeature > objects_feature_;
  ::google::protobuf::internal::ArenaStringPtr err_msg_;
  ::prediction_debug_msgs::ObjectFeature* self_pos_feature_;
  ::prediction_debug_msgs::SignalFeature* signal_feature_;
  double cost_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_prediction_5fdebug_5fmsgs_2eproto::TableStruct;
  friend void ::protobuf_prediction_5fdebug_5fmsgs_2eproto::InitDefaultsObjectsFeatureImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Exit

// string exit_lane_id = 1;
inline void Exit::clear_exit_lane_id() {
  exit_lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Exit::exit_lane_id() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.Exit.exit_lane_id)
  return exit_lane_id_.GetNoArena();
}
inline void Exit::set_exit_lane_id(const ::std::string& value) {
  
  exit_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.Exit.exit_lane_id)
}
#if LANG_CXX11
inline void Exit::set_exit_lane_id(::std::string&& value) {
  
  exit_lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prediction_debug_msgs.Exit.exit_lane_id)
}
#endif
inline void Exit::set_exit_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exit_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prediction_debug_msgs.Exit.exit_lane_id)
}
inline void Exit::set_exit_lane_id(const char* value, size_t size) {
  
  exit_lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prediction_debug_msgs.Exit.exit_lane_id)
}
inline ::std::string* Exit::mutable_exit_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.Exit.exit_lane_id)
  return exit_lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Exit::release_exit_lane_id() {
  // @@protoc_insertion_point(field_release:prediction_debug_msgs.Exit.exit_lane_id)
  
  return exit_lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Exit::set_allocated_exit_lane_id(::std::string* exit_lane_id) {
  if (exit_lane_id != NULL) {
    
  } else {
    
  }
  exit_lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exit_lane_id);
  // @@protoc_insertion_point(field_set_allocated:prediction_debug_msgs.Exit.exit_lane_id)
}

// double x = 2;
inline void Exit::clear_x() {
  x_ = 0;
}
inline double Exit::x() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.Exit.x)
  return x_;
}
inline void Exit::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.Exit.x)
}

// double y = 3;
inline void Exit::clear_y() {
  y_ = 0;
}
inline double Exit::y() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.Exit.y)
  return y_;
}
inline void Exit::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.Exit.y)
}

// float prob = 4;
inline void Exit::clear_prob() {
  prob_ = 0;
}
inline float Exit::prob() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.Exit.prob)
  return prob_;
}
inline void Exit::set_prob(float value) {
  
  prob_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.Exit.prob)
}

// -------------------------------------------------------------------

// InteractiveCrossWalkInfo

// string id = 1;
inline void InteractiveCrossWalkInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InteractiveCrossWalkInfo::id() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.InteractiveCrossWalkInfo.id)
  return id_.GetNoArena();
}
inline void InteractiveCrossWalkInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.InteractiveCrossWalkInfo.id)
}
#if LANG_CXX11
inline void InteractiveCrossWalkInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prediction_debug_msgs.InteractiveCrossWalkInfo.id)
}
#endif
inline void InteractiveCrossWalkInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prediction_debug_msgs.InteractiveCrossWalkInfo.id)
}
inline void InteractiveCrossWalkInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prediction_debug_msgs.InteractiveCrossWalkInfo.id)
}
inline ::std::string* InteractiveCrossWalkInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.InteractiveCrossWalkInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InteractiveCrossWalkInfo::release_id() {
  // @@protoc_insertion_point(field_release:prediction_debug_msgs.InteractiveCrossWalkInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InteractiveCrossWalkInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:prediction_debug_msgs.InteractiveCrossWalkInfo.id)
}

// double start_pos_xg = 2;
inline void InteractiveCrossWalkInfo::clear_start_pos_xg() {
  start_pos_xg_ = 0;
}
inline double InteractiveCrossWalkInfo::start_pos_xg() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.InteractiveCrossWalkInfo.start_pos_xg)
  return start_pos_xg_;
}
inline void InteractiveCrossWalkInfo::set_start_pos_xg(double value) {
  
  start_pos_xg_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.InteractiveCrossWalkInfo.start_pos_xg)
}

// double start_pos_yg = 3;
inline void InteractiveCrossWalkInfo::clear_start_pos_yg() {
  start_pos_yg_ = 0;
}
inline double InteractiveCrossWalkInfo::start_pos_yg() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.InteractiveCrossWalkInfo.start_pos_yg)
  return start_pos_yg_;
}
inline void InteractiveCrossWalkInfo::set_start_pos_yg(double value) {
  
  start_pos_yg_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.InteractiveCrossWalkInfo.start_pos_yg)
}

// double end_pos_xg = 4;
inline void InteractiveCrossWalkInfo::clear_end_pos_xg() {
  end_pos_xg_ = 0;
}
inline double InteractiveCrossWalkInfo::end_pos_xg() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.InteractiveCrossWalkInfo.end_pos_xg)
  return end_pos_xg_;
}
inline void InteractiveCrossWalkInfo::set_end_pos_xg(double value) {
  
  end_pos_xg_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.InteractiveCrossWalkInfo.end_pos_xg)
}

// double end_pos_yg = 5;
inline void InteractiveCrossWalkInfo::clear_end_pos_yg() {
  end_pos_yg_ = 0;
}
inline double InteractiveCrossWalkInfo::end_pos_yg() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.InteractiveCrossWalkInfo.end_pos_yg)
  return end_pos_yg_;
}
inline void InteractiveCrossWalkInfo::set_end_pos_yg(double value) {
  
  end_pos_yg_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.InteractiveCrossWalkInfo.end_pos_yg)
}

// bool has_id = 6;
inline void InteractiveCrossWalkInfo::clear_has_id() {
  has_id_ = false;
}
inline bool InteractiveCrossWalkInfo::has_id() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.InteractiveCrossWalkInfo.has_id)
  return has_id_;
}
inline void InteractiveCrossWalkInfo::set_has_id(bool value) {
  
  has_id_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.InteractiveCrossWalkInfo.has_id)
}

// bool has_pos = 7;
inline void InteractiveCrossWalkInfo::clear_has_pos() {
  has_pos_ = false;
}
inline bool InteractiveCrossWalkInfo::has_pos() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.InteractiveCrossWalkInfo.has_pos)
  return has_pos_;
}
inline void InteractiveCrossWalkInfo::set_has_pos(bool value) {
  
  has_pos_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.InteractiveCrossWalkInfo.has_pos)
}

// -------------------------------------------------------------------

// InteractiveId

// repeated string ids = 1;
inline int InteractiveId::ids_size() const {
  return ids_.size();
}
inline void InteractiveId::clear_ids() {
  ids_.Clear();
}
inline const ::std::string& InteractiveId::ids(int index) const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.InteractiveId.ids)
  return ids_.Get(index);
}
inline ::std::string* InteractiveId::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.InteractiveId.ids)
  return ids_.Mutable(index);
}
inline void InteractiveId::set_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.InteractiveId.ids)
  ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void InteractiveId::set_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.InteractiveId.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void InteractiveId::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:prediction_debug_msgs.InteractiveId.ids)
}
inline void InteractiveId::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:prediction_debug_msgs.InteractiveId.ids)
}
inline ::std::string* InteractiveId::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:prediction_debug_msgs.InteractiveId.ids)
  return ids_.Add();
}
inline void InteractiveId::add_ids(const ::std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:prediction_debug_msgs.InteractiveId.ids)
}
#if LANG_CXX11
inline void InteractiveId::add_ids(::std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:prediction_debug_msgs.InteractiveId.ids)
}
#endif
inline void InteractiveId::add_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:prediction_debug_msgs.InteractiveId.ids)
}
inline void InteractiveId::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:prediction_debug_msgs.InteractiveId.ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
InteractiveId::ids() const {
  // @@protoc_insertion_point(field_list:prediction_debug_msgs.InteractiveId.ids)
  return ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
InteractiveId::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:prediction_debug_msgs.InteractiveId.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// InteractiveLaneInfo

// string lane_id = 1;
inline void InteractiveLaneInfo::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InteractiveLaneInfo::lane_id() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.InteractiveLaneInfo.lane_id)
  return lane_id_.GetNoArena();
}
inline void InteractiveLaneInfo::set_lane_id(const ::std::string& value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.InteractiveLaneInfo.lane_id)
}
#if LANG_CXX11
inline void InteractiveLaneInfo::set_lane_id(::std::string&& value) {
  
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prediction_debug_msgs.InteractiveLaneInfo.lane_id)
}
#endif
inline void InteractiveLaneInfo::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prediction_debug_msgs.InteractiveLaneInfo.lane_id)
}
inline void InteractiveLaneInfo::set_lane_id(const char* value, size_t size) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prediction_debug_msgs.InteractiveLaneInfo.lane_id)
}
inline ::std::string* InteractiveLaneInfo::mutable_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.InteractiveLaneInfo.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InteractiveLaneInfo::release_lane_id() {
  // @@protoc_insertion_point(field_release:prediction_debug_msgs.InteractiveLaneInfo.lane_id)
  
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InteractiveLaneInfo::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    
  } else {
    
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:prediction_debug_msgs.InteractiveLaneInfo.lane_id)
}

// double cross_pos_xg = 2;
inline void InteractiveLaneInfo::clear_cross_pos_xg() {
  cross_pos_xg_ = 0;
}
inline double InteractiveLaneInfo::cross_pos_xg() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.InteractiveLaneInfo.cross_pos_xg)
  return cross_pos_xg_;
}
inline void InteractiveLaneInfo::set_cross_pos_xg(double value) {
  
  cross_pos_xg_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.InteractiveLaneInfo.cross_pos_xg)
}

// double cross_pos_yg = 3;
inline void InteractiveLaneInfo::clear_cross_pos_yg() {
  cross_pos_yg_ = 0;
}
inline double InteractiveLaneInfo::cross_pos_yg() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.InteractiveLaneInfo.cross_pos_yg)
  return cross_pos_yg_;
}
inline void InteractiveLaneInfo::set_cross_pos_yg(double value) {
  
  cross_pos_yg_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.InteractiveLaneInfo.cross_pos_yg)
}

// double start_pos_xg = 4;
inline void InteractiveLaneInfo::clear_start_pos_xg() {
  start_pos_xg_ = 0;
}
inline double InteractiveLaneInfo::start_pos_xg() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.InteractiveLaneInfo.start_pos_xg)
  return start_pos_xg_;
}
inline void InteractiveLaneInfo::set_start_pos_xg(double value) {
  
  start_pos_xg_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.InteractiveLaneInfo.start_pos_xg)
}

// double start_pos_yg = 5;
inline void InteractiveLaneInfo::clear_start_pos_yg() {
  start_pos_yg_ = 0;
}
inline double InteractiveLaneInfo::start_pos_yg() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.InteractiveLaneInfo.start_pos_yg)
  return start_pos_yg_;
}
inline void InteractiveLaneInfo::set_start_pos_yg(double value) {
  
  start_pos_yg_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.InteractiveLaneInfo.start_pos_yg)
}

// double cross_s = 6;
inline void InteractiveLaneInfo::clear_cross_s() {
  cross_s_ = 0;
}
inline double InteractiveLaneInfo::cross_s() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.InteractiveLaneInfo.cross_s)
  return cross_s_;
}
inline void InteractiveLaneInfo::set_cross_s(double value) {
  
  cross_s_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.InteractiveLaneInfo.cross_s)
}

// -------------------------------------------------------------------

// Junctionnet

// string lane_id = 1;
inline void Junctionnet::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Junctionnet::lane_id() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.Junctionnet.lane_id)
  return lane_id_.GetNoArena();
}
inline void Junctionnet::set_lane_id(const ::std::string& value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.Junctionnet.lane_id)
}
#if LANG_CXX11
inline void Junctionnet::set_lane_id(::std::string&& value) {
  
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prediction_debug_msgs.Junctionnet.lane_id)
}
#endif
inline void Junctionnet::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prediction_debug_msgs.Junctionnet.lane_id)
}
inline void Junctionnet::set_lane_id(const char* value, size_t size) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prediction_debug_msgs.Junctionnet.lane_id)
}
inline ::std::string* Junctionnet::mutable_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.Junctionnet.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Junctionnet::release_lane_id() {
  // @@protoc_insertion_point(field_release:prediction_debug_msgs.Junctionnet.lane_id)
  
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Junctionnet::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    
  } else {
    
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:prediction_debug_msgs.Junctionnet.lane_id)
}

// double cross_pos_xg = 2;
inline void Junctionnet::clear_cross_pos_xg() {
  cross_pos_xg_ = 0;
}
inline double Junctionnet::cross_pos_xg() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.Junctionnet.cross_pos_xg)
  return cross_pos_xg_;
}
inline void Junctionnet::set_cross_pos_xg(double value) {
  
  cross_pos_xg_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.Junctionnet.cross_pos_xg)
}

// double cross_pos_yg = 3;
inline void Junctionnet::clear_cross_pos_yg() {
  cross_pos_yg_ = 0;
}
inline double Junctionnet::cross_pos_yg() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.Junctionnet.cross_pos_yg)
  return cross_pos_yg_;
}
inline void Junctionnet::set_cross_pos_yg(double value) {
  
  cross_pos_yg_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.Junctionnet.cross_pos_yg)
}

// double start_pos_xg = 4;
inline void Junctionnet::clear_start_pos_xg() {
  start_pos_xg_ = 0;
}
inline double Junctionnet::start_pos_xg() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.Junctionnet.start_pos_xg)
  return start_pos_xg_;
}
inline void Junctionnet::set_start_pos_xg(double value) {
  
  start_pos_xg_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.Junctionnet.start_pos_xg)
}

// double start_pos_yg = 5;
inline void Junctionnet::clear_start_pos_yg() {
  start_pos_yg_ = 0;
}
inline double Junctionnet::start_pos_yg() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.Junctionnet.start_pos_yg)
  return start_pos_yg_;
}
inline void Junctionnet::set_start_pos_yg(double value) {
  
  start_pos_yg_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.Junctionnet.start_pos_yg)
}

// double cross_s = 6;
inline void Junctionnet::clear_cross_s() {
  cross_s_ = 0;
}
inline double Junctionnet::cross_s() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.Junctionnet.cross_s)
  return cross_s_;
}
inline void Junctionnet::set_cross_s(double value) {
  
  cross_s_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.Junctionnet.cross_s)
}

// -------------------------------------------------------------------

// JunctionProperty

// string lane_id = 1;
inline void JunctionProperty::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JunctionProperty::lane_id() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.JunctionProperty.lane_id)
  return lane_id_.GetNoArena();
}
inline void JunctionProperty::set_lane_id(const ::std::string& value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.JunctionProperty.lane_id)
}
#if LANG_CXX11
inline void JunctionProperty::set_lane_id(::std::string&& value) {
  
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prediction_debug_msgs.JunctionProperty.lane_id)
}
#endif
inline void JunctionProperty::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prediction_debug_msgs.JunctionProperty.lane_id)
}
inline void JunctionProperty::set_lane_id(const char* value, size_t size) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prediction_debug_msgs.JunctionProperty.lane_id)
}
inline ::std::string* JunctionProperty::mutable_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.JunctionProperty.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JunctionProperty::release_lane_id() {
  // @@protoc_insertion_point(field_release:prediction_debug_msgs.JunctionProperty.lane_id)
  
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JunctionProperty::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    
  } else {
    
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:prediction_debug_msgs.JunctionProperty.lane_id)
}

// int32 is_exit = 2;
inline void JunctionProperty::clear_is_exit() {
  is_exit_ = 0;
}
inline ::google::protobuf::int32 JunctionProperty::is_exit() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.JunctionProperty.is_exit)
  return is_exit_;
}
inline void JunctionProperty::set_is_exit(::google::protobuf::int32 value) {
  
  is_exit_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.JunctionProperty.is_exit)
}

// int32 is_overlap = 3;
inline void JunctionProperty::clear_is_overlap() {
  is_overlap_ = 0;
}
inline ::google::protobuf::int32 JunctionProperty::is_overlap() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.JunctionProperty.is_overlap)
  return is_overlap_;
}
inline void JunctionProperty::set_is_overlap(::google::protobuf::int32 value) {
  
  is_overlap_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.JunctionProperty.is_overlap)
}

// -------------------------------------------------------------------

// KeyJunctionObject

// int32 id = 1;
inline void KeyJunctionObject::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 KeyJunctionObject::id() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.KeyJunctionObject.id)
  return id_;
}
inline void KeyJunctionObject::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.KeyJunctionObject.id)
}

// double x = 2;
inline void KeyJunctionObject::clear_x() {
  x_ = 0;
}
inline double KeyJunctionObject::x() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.KeyJunctionObject.x)
  return x_;
}
inline void KeyJunctionObject::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.KeyJunctionObject.x)
}

// double y = 3;
inline void KeyJunctionObject::clear_y() {
  y_ = 0;
}
inline double KeyJunctionObject::y() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.KeyJunctionObject.y)
  return y_;
}
inline void KeyJunctionObject::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.KeyJunctionObject.y)
}

// float theta = 4;
inline void KeyJunctionObject::clear_theta() {
  theta_ = 0;
}
inline float KeyJunctionObject::theta() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.KeyJunctionObject.theta)
  return theta_;
}
inline void KeyJunctionObject::set_theta(float value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.KeyJunctionObject.theta)
}

// float length = 5;
inline void KeyJunctionObject::clear_length() {
  length_ = 0;
}
inline float KeyJunctionObject::length() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.KeyJunctionObject.length)
  return length_;
}
inline void KeyJunctionObject::set_length(float value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.KeyJunctionObject.length)
}

// float width = 6;
inline void KeyJunctionObject::clear_width() {
  width_ = 0;
}
inline float KeyJunctionObject::width() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.KeyJunctionObject.width)
  return width_;
}
inline void KeyJunctionObject::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.KeyJunctionObject.width)
}

// float height = 7;
inline void KeyJunctionObject::clear_height() {
  height_ = 0;
}
inline float KeyJunctionObject::height() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.KeyJunctionObject.height)
  return height_;
}
inline void KeyJunctionObject::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.KeyJunctionObject.height)
}

// int32 consider_type = 8;
inline void KeyJunctionObject::clear_consider_type() {
  consider_type_ = 0;
}
inline ::google::protobuf::int32 KeyJunctionObject::consider_type() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.KeyJunctionObject.consider_type)
  return consider_type_;
}
inline void KeyJunctionObject::set_consider_type(::google::protobuf::int32 value) {
  
  consider_type_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.KeyJunctionObject.consider_type)
}

// -------------------------------------------------------------------

// KeyObject

// int32 id = 1;
inline void KeyObject::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 KeyObject::id() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.KeyObject.id)
  return id_;
}
inline void KeyObject::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.KeyObject.id)
}

// double x = 2;
inline void KeyObject::clear_x() {
  x_ = 0;
}
inline double KeyObject::x() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.KeyObject.x)
  return x_;
}
inline void KeyObject::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.KeyObject.x)
}

// double y = 3;
inline void KeyObject::clear_y() {
  y_ = 0;
}
inline double KeyObject::y() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.KeyObject.y)
  return y_;
}
inline void KeyObject::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.KeyObject.y)
}

// float theta = 4;
inline void KeyObject::clear_theta() {
  theta_ = 0;
}
inline float KeyObject::theta() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.KeyObject.theta)
  return theta_;
}
inline void KeyObject::set_theta(float value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.KeyObject.theta)
}

// float length = 5;
inline void KeyObject::clear_length() {
  length_ = 0;
}
inline float KeyObject::length() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.KeyObject.length)
  return length_;
}
inline void KeyObject::set_length(float value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.KeyObject.length)
}

// float width = 6;
inline void KeyObject::clear_width() {
  width_ = 0;
}
inline float KeyObject::width() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.KeyObject.width)
  return width_;
}
inline void KeyObject::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.KeyObject.width)
}

// float height = 7;
inline void KeyObject::clear_height() {
  height_ = 0;
}
inline float KeyObject::height() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.KeyObject.height)
  return height_;
}
inline void KeyObject::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.KeyObject.height)
}

// bool need_consider = 8;
inline void KeyObject::clear_need_consider() {
  need_consider_ = false;
}
inline bool KeyObject::need_consider() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.KeyObject.need_consider)
  return need_consider_;
}
inline void KeyObject::set_need_consider(bool value) {
  
  need_consider_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.KeyObject.need_consider)
}

// -------------------------------------------------------------------

// LaneInfo

// string lane_id = 1;
inline void LaneInfo::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaneInfo::lane_id() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.LaneInfo.lane_id)
  return lane_id_.GetNoArena();
}
inline void LaneInfo::set_lane_id(const ::std::string& value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.LaneInfo.lane_id)
}
#if LANG_CXX11
inline void LaneInfo::set_lane_id(::std::string&& value) {
  
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prediction_debug_msgs.LaneInfo.lane_id)
}
#endif
inline void LaneInfo::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prediction_debug_msgs.LaneInfo.lane_id)
}
inline void LaneInfo::set_lane_id(const char* value, size_t size) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prediction_debug_msgs.LaneInfo.lane_id)
}
inline ::std::string* LaneInfo::mutable_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.LaneInfo.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaneInfo::release_lane_id() {
  // @@protoc_insertion_point(field_release:prediction_debug_msgs.LaneInfo.lane_id)
  
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaneInfo::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    
  } else {
    
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:prediction_debug_msgs.LaneInfo.lane_id)
}

// double pos_s = 2;
inline void LaneInfo::clear_pos_s() {
  pos_s_ = 0;
}
inline double LaneInfo::pos_s() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.LaneInfo.pos_s)
  return pos_s_;
}
inline void LaneInfo::set_pos_s(double value) {
  
  pos_s_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.LaneInfo.pos_s)
}

// double pos_l = 3;
inline void LaneInfo::clear_pos_l() {
  pos_l_ = 0;
}
inline double LaneInfo::pos_l() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.LaneInfo.pos_l)
  return pos_l_;
}
inline void LaneInfo::set_pos_l(double value) {
  
  pos_l_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.LaneInfo.pos_l)
}

// double heading_diff = 4;
inline void LaneInfo::clear_heading_diff() {
  heading_diff_ = 0;
}
inline double LaneInfo::heading_diff() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.LaneInfo.heading_diff)
  return heading_diff_;
}
inline void LaneInfo::set_heading_diff(double value) {
  
  heading_diff_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.LaneInfo.heading_diff)
}

// double dist_to_left_boundary = 5;
inline void LaneInfo::clear_dist_to_left_boundary() {
  dist_to_left_boundary_ = 0;
}
inline double LaneInfo::dist_to_left_boundary() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.LaneInfo.dist_to_left_boundary)
  return dist_to_left_boundary_;
}
inline void LaneInfo::set_dist_to_left_boundary(double value) {
  
  dist_to_left_boundary_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.LaneInfo.dist_to_left_boundary)
}

// double dist_to_right_boundary = 6;
inline void LaneInfo::clear_dist_to_right_boundary() {
  dist_to_right_boundary_ = 0;
}
inline double LaneInfo::dist_to_right_boundary() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.LaneInfo.dist_to_right_boundary)
  return dist_to_right_boundary_;
}
inline void LaneInfo::set_dist_to_right_boundary(double value) {
  
  dist_to_right_boundary_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.LaneInfo.dist_to_right_boundary)
}

// bool is_on_lane = 7;
inline void LaneInfo::clear_is_on_lane() {
  is_on_lane_ = false;
}
inline bool LaneInfo::is_on_lane() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.LaneInfo.is_on_lane)
  return is_on_lane_;
}
inline void LaneInfo::set_is_on_lane(bool value) {
  
  is_on_lane_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.LaneInfo.is_on_lane)
}

// -------------------------------------------------------------------

// LaneProperty

// string lane_id = 1;
inline void LaneProperty::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LaneProperty::lane_id() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.LaneProperty.lane_id)
  return lane_id_.GetNoArena();
}
inline void LaneProperty::set_lane_id(const ::std::string& value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.LaneProperty.lane_id)
}
#if LANG_CXX11
inline void LaneProperty::set_lane_id(::std::string&& value) {
  
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prediction_debug_msgs.LaneProperty.lane_id)
}
#endif
inline void LaneProperty::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prediction_debug_msgs.LaneProperty.lane_id)
}
inline void LaneProperty::set_lane_id(const char* value, size_t size) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prediction_debug_msgs.LaneProperty.lane_id)
}
inline ::std::string* LaneProperty::mutable_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.LaneProperty.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaneProperty::release_lane_id() {
  // @@protoc_insertion_point(field_release:prediction_debug_msgs.LaneProperty.lane_id)
  
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaneProperty::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    
  } else {
    
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:prediction_debug_msgs.LaneProperty.lane_id)
}

// float total_length = 2;
inline void LaneProperty::clear_total_length() {
  total_length_ = 0;
}
inline float LaneProperty::total_length() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.LaneProperty.total_length)
  return total_length_;
}
inline void LaneProperty::set_total_length(float value) {
  
  total_length_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.LaneProperty.total_length)
}

// float start_s = 3;
inline void LaneProperty::clear_start_s() {
  start_s_ = 0;
}
inline float LaneProperty::start_s() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.LaneProperty.start_s)
  return start_s_;
}
inline void LaneProperty::set_start_s(float value) {
  
  start_s_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.LaneProperty.start_s)
}

// float end_s = 4;
inline void LaneProperty::clear_end_s() {
  end_s_ = 0;
}
inline float LaneProperty::end_s() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.LaneProperty.end_s)
  return end_s_;
}
inline void LaneProperty::set_end_s(float value) {
  
  end_s_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.LaneProperty.end_s)
}

// int32 forward_history_num = 5;
inline void LaneProperty::clear_forward_history_num() {
  forward_history_num_ = 0;
}
inline ::google::protobuf::int32 LaneProperty::forward_history_num() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.LaneProperty.forward_history_num)
  return forward_history_num_;
}
inline void LaneProperty::set_forward_history_num(::google::protobuf::int32 value) {
  
  forward_history_num_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.LaneProperty.forward_history_num)
}

// int32 backward_history_num = 6;
inline void LaneProperty::clear_backward_history_num() {
  backward_history_num_ = 0;
}
inline ::google::protobuf::int32 LaneProperty::backward_history_num() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.LaneProperty.backward_history_num)
  return backward_history_num_;
}
inline void LaneProperty::set_backward_history_num(::google::protobuf::int32 value) {
  
  backward_history_num_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.LaneProperty.backward_history_num)
}

// int32 forward_obs_num = 7;
inline void LaneProperty::clear_forward_obs_num() {
  forward_obs_num_ = 0;
}
inline ::google::protobuf::int32 LaneProperty::forward_obs_num() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.LaneProperty.forward_obs_num)
  return forward_obs_num_;
}
inline void LaneProperty::set_forward_obs_num(::google::protobuf::int32 value) {
  
  forward_obs_num_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.LaneProperty.forward_obs_num)
}

// int32 backward_obs_num = 8;
inline void LaneProperty::clear_backward_obs_num() {
  backward_obs_num_ = 0;
}
inline ::google::protobuf::int32 LaneProperty::backward_obs_num() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.LaneProperty.backward_obs_num)
  return backward_obs_num_;
}
inline void LaneProperty::set_backward_obs_num(::google::protobuf::int32 value) {
  
  backward_obs_num_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.LaneProperty.backward_obs_num)
}

// bool is_lane_checked = 9;
inline void LaneProperty::clear_is_lane_checked() {
  is_lane_checked_ = false;
}
inline bool LaneProperty::is_lane_checked() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.LaneProperty.is_lane_checked)
  return is_lane_checked_;
}
inline void LaneProperty::set_is_lane_checked(bool value) {
  
  is_lane_checked_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.LaneProperty.is_lane_checked)
}

// bool is_object_checked = 10;
inline void LaneProperty::clear_is_object_checked() {
  is_object_checked_ = false;
}
inline bool LaneProperty::is_object_checked() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.LaneProperty.is_object_checked)
  return is_object_checked_;
}
inline void LaneProperty::set_is_object_checked(bool value) {
  
  is_object_checked_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.LaneProperty.is_object_checked)
}

// repeated int32 obs_start_to_end = 11;
inline int LaneProperty::obs_start_to_end_size() const {
  return obs_start_to_end_.size();
}
inline void LaneProperty::clear_obs_start_to_end() {
  obs_start_to_end_.Clear();
}
inline ::google::protobuf::int32 LaneProperty::obs_start_to_end(int index) const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.LaneProperty.obs_start_to_end)
  return obs_start_to_end_.Get(index);
}
inline void LaneProperty::set_obs_start_to_end(int index, ::google::protobuf::int32 value) {
  obs_start_to_end_.Set(index, value);
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.LaneProperty.obs_start_to_end)
}
inline void LaneProperty::add_obs_start_to_end(::google::protobuf::int32 value) {
  obs_start_to_end_.Add(value);
  // @@protoc_insertion_point(field_add:prediction_debug_msgs.LaneProperty.obs_start_to_end)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LaneProperty::obs_start_to_end() const {
  // @@protoc_insertion_point(field_list:prediction_debug_msgs.LaneProperty.obs_start_to_end)
  return obs_start_to_end_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LaneProperty::mutable_obs_start_to_end() {
  // @@protoc_insertion_point(field_mutable_list:prediction_debug_msgs.LaneProperty.obs_start_to_end)
  return &obs_start_to_end_;
}

// repeated int32 obs_end_to_start = 12;
inline int LaneProperty::obs_end_to_start_size() const {
  return obs_end_to_start_.size();
}
inline void LaneProperty::clear_obs_end_to_start() {
  obs_end_to_start_.Clear();
}
inline ::google::protobuf::int32 LaneProperty::obs_end_to_start(int index) const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.LaneProperty.obs_end_to_start)
  return obs_end_to_start_.Get(index);
}
inline void LaneProperty::set_obs_end_to_start(int index, ::google::protobuf::int32 value) {
  obs_end_to_start_.Set(index, value);
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.LaneProperty.obs_end_to_start)
}
inline void LaneProperty::add_obs_end_to_start(::google::protobuf::int32 value) {
  obs_end_to_start_.Add(value);
  // @@protoc_insertion_point(field_add:prediction_debug_msgs.LaneProperty.obs_end_to_start)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LaneProperty::obs_end_to_start() const {
  // @@protoc_insertion_point(field_list:prediction_debug_msgs.LaneProperty.obs_end_to_start)
  return obs_end_to_start_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LaneProperty::mutable_obs_end_to_start() {
  // @@protoc_insertion_point(field_mutable_list:prediction_debug_msgs.LaneProperty.obs_end_to_start)
  return &obs_end_to_start_;
}

// -------------------------------------------------------------------

// Lanenet

// repeated .prediction_debug_msgs.LaneProperty lane_net = 1;
inline int Lanenet::lane_net_size() const {
  return lane_net_.size();
}
inline void Lanenet::clear_lane_net() {
  lane_net_.Clear();
}
inline const ::prediction_debug_msgs::LaneProperty& Lanenet::lane_net(int index) const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.Lanenet.lane_net)
  return lane_net_.Get(index);
}
inline ::prediction_debug_msgs::LaneProperty* Lanenet::mutable_lane_net(int index) {
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.Lanenet.lane_net)
  return lane_net_.Mutable(index);
}
inline ::prediction_debug_msgs::LaneProperty* Lanenet::add_lane_net() {
  // @@protoc_insertion_point(field_add:prediction_debug_msgs.Lanenet.lane_net)
  return lane_net_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::LaneProperty >*
Lanenet::mutable_lane_net() {
  // @@protoc_insertion_point(field_mutable_list:prediction_debug_msgs.Lanenet.lane_net)
  return &lane_net_;
}
inline const ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::LaneProperty >&
Lanenet::lane_net() const {
  // @@protoc_insertion_point(field_list:prediction_debug_msgs.Lanenet.lane_net)
  return lane_net_;
}

// repeated .prediction_debug_msgs.KeyObject objects = 2;
inline int Lanenet::objects_size() const {
  return objects_.size();
}
inline void Lanenet::clear_objects() {
  objects_.Clear();
}
inline const ::prediction_debug_msgs::KeyObject& Lanenet::objects(int index) const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.Lanenet.objects)
  return objects_.Get(index);
}
inline ::prediction_debug_msgs::KeyObject* Lanenet::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.Lanenet.objects)
  return objects_.Mutable(index);
}
inline ::prediction_debug_msgs::KeyObject* Lanenet::add_objects() {
  // @@protoc_insertion_point(field_add:prediction_debug_msgs.Lanenet.objects)
  return objects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::KeyObject >*
Lanenet::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:prediction_debug_msgs.Lanenet.objects)
  return &objects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::KeyObject >&
Lanenet::objects() const {
  // @@protoc_insertion_point(field_list:prediction_debug_msgs.Lanenet.objects)
  return objects_;
}

// -------------------------------------------------------------------

// ObjectFeature

// uint32 id = 1;
inline void ObjectFeature::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 ObjectFeature::id() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.id)
  return id_;
}
inline void ObjectFeature::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.id)
}

// int32 type = 2;
inline void ObjectFeature::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 ObjectFeature::type() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.type)
  return type_;
}
inline void ObjectFeature::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.type)
}

// double x = 3;
inline void ObjectFeature::clear_x() {
  x_ = 0;
}
inline double ObjectFeature::x() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.x)
  return x_;
}
inline void ObjectFeature::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.x)
}

// double y = 4;
inline void ObjectFeature::clear_y() {
  y_ = 0;
}
inline double ObjectFeature::y() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.y)
  return y_;
}
inline void ObjectFeature::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.y)
}

// double z = 5;
inline void ObjectFeature::clear_z() {
  z_ = 0;
}
inline double ObjectFeature::z() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.z)
  return z_;
}
inline void ObjectFeature::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.z)
}

// double length = 6;
inline void ObjectFeature::clear_length() {
  length_ = 0;
}
inline double ObjectFeature::length() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.length)
  return length_;
}
inline void ObjectFeature::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.length)
}

// double width = 7;
inline void ObjectFeature::clear_width() {
  width_ = 0;
}
inline double ObjectFeature::width() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.width)
  return width_;
}
inline void ObjectFeature::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.width)
}

// double height = 8;
inline void ObjectFeature::clear_height() {
  height_ = 0;
}
inline double ObjectFeature::height() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.height)
  return height_;
}
inline void ObjectFeature::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.height)
}

// double speed = 9;
inline void ObjectFeature::clear_speed() {
  speed_ = 0;
}
inline double ObjectFeature::speed() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.speed)
  return speed_;
}
inline void ObjectFeature::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.speed)
}

// double acc = 10;
inline void ObjectFeature::clear_acc() {
  acc_ = 0;
}
inline double ObjectFeature::acc() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.acc)
  return acc_;
}
inline void ObjectFeature::set_acc(double value) {
  
  acc_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.acc)
}

// double final_heading = 11;
inline void ObjectFeature::clear_final_heading() {
  final_heading_ = 0;
}
inline double ObjectFeature::final_heading() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.final_heading)
  return final_heading_;
}
inline void ObjectFeature::set_final_heading(double value) {
  
  final_heading_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.final_heading)
}

// bool is_static = 12;
inline void ObjectFeature::clear_is_static() {
  is_static_ = false;
}
inline bool ObjectFeature::is_static() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.is_static)
  return is_static_;
}
inline void ObjectFeature::set_is_static(bool value) {
  
  is_static_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.is_static)
}

// bool is_illegal = 13;
inline void ObjectFeature::clear_is_illegal() {
  is_illegal_ = false;
}
inline bool ObjectFeature::is_illegal() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.is_illegal)
  return is_illegal_;
}
inline void ObjectFeature::set_is_illegal(bool value) {
  
  is_illegal_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.is_illegal)
}

// int32 is_ultra_static = 14;
inline void ObjectFeature::clear_is_ultra_static() {
  is_ultra_static_ = 0;
}
inline ::google::protobuf::int32 ObjectFeature::is_ultra_static() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.is_ultra_static)
  return is_ultra_static_;
}
inline void ObjectFeature::set_is_ultra_static(::google::protobuf::int32 value) {
  
  is_ultra_static_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.is_ultra_static)
}

// int32 priority = 15;
inline void ObjectFeature::clear_priority() {
  priority_ = 0;
}
inline ::google::protobuf::int32 ObjectFeature::priority() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.priority)
  return priority_;
}
inline void ObjectFeature::set_priority(::google::protobuf::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.priority)
}

// string lane_id = 16;
inline void ObjectFeature::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectFeature::lane_id() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.lane_id)
  return lane_id_.GetNoArena();
}
inline void ObjectFeature::set_lane_id(const ::std::string& value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.lane_id)
}
#if LANG_CXX11
inline void ObjectFeature::set_lane_id(::std::string&& value) {
  
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prediction_debug_msgs.ObjectFeature.lane_id)
}
#endif
inline void ObjectFeature::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prediction_debug_msgs.ObjectFeature.lane_id)
}
inline void ObjectFeature::set_lane_id(const char* value, size_t size) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prediction_debug_msgs.ObjectFeature.lane_id)
}
inline ::std::string* ObjectFeature::mutable_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.ObjectFeature.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectFeature::release_lane_id() {
  // @@protoc_insertion_point(field_release:prediction_debug_msgs.ObjectFeature.lane_id)
  
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectFeature::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    
  } else {
    
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:prediction_debug_msgs.ObjectFeature.lane_id)
}

// repeated string current_lane_ids = 17;
inline int ObjectFeature::current_lane_ids_size() const {
  return current_lane_ids_.size();
}
inline void ObjectFeature::clear_current_lane_ids() {
  current_lane_ids_.Clear();
}
inline const ::std::string& ObjectFeature::current_lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.current_lane_ids)
  return current_lane_ids_.Get(index);
}
inline ::std::string* ObjectFeature::mutable_current_lane_ids(int index) {
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.ObjectFeature.current_lane_ids)
  return current_lane_ids_.Mutable(index);
}
inline void ObjectFeature::set_current_lane_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.current_lane_ids)
  current_lane_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ObjectFeature::set_current_lane_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.current_lane_ids)
  current_lane_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ObjectFeature::set_current_lane_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  current_lane_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:prediction_debug_msgs.ObjectFeature.current_lane_ids)
}
inline void ObjectFeature::set_current_lane_ids(int index, const char* value, size_t size) {
  current_lane_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:prediction_debug_msgs.ObjectFeature.current_lane_ids)
}
inline ::std::string* ObjectFeature::add_current_lane_ids() {
  // @@protoc_insertion_point(field_add_mutable:prediction_debug_msgs.ObjectFeature.current_lane_ids)
  return current_lane_ids_.Add();
}
inline void ObjectFeature::add_current_lane_ids(const ::std::string& value) {
  current_lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:prediction_debug_msgs.ObjectFeature.current_lane_ids)
}
#if LANG_CXX11
inline void ObjectFeature::add_current_lane_ids(::std::string&& value) {
  current_lane_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:prediction_debug_msgs.ObjectFeature.current_lane_ids)
}
#endif
inline void ObjectFeature::add_current_lane_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  current_lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:prediction_debug_msgs.ObjectFeature.current_lane_ids)
}
inline void ObjectFeature::add_current_lane_ids(const char* value, size_t size) {
  current_lane_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:prediction_debug_msgs.ObjectFeature.current_lane_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ObjectFeature::current_lane_ids() const {
  // @@protoc_insertion_point(field_list:prediction_debug_msgs.ObjectFeature.current_lane_ids)
  return current_lane_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ObjectFeature::mutable_current_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:prediction_debug_msgs.ObjectFeature.current_lane_ids)
  return &current_lane_ids_;
}

// repeated string nearby_lane_ids = 18;
inline int ObjectFeature::nearby_lane_ids_size() const {
  return nearby_lane_ids_.size();
}
inline void ObjectFeature::clear_nearby_lane_ids() {
  nearby_lane_ids_.Clear();
}
inline const ::std::string& ObjectFeature::nearby_lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.nearby_lane_ids)
  return nearby_lane_ids_.Get(index);
}
inline ::std::string* ObjectFeature::mutable_nearby_lane_ids(int index) {
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.ObjectFeature.nearby_lane_ids)
  return nearby_lane_ids_.Mutable(index);
}
inline void ObjectFeature::set_nearby_lane_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.nearby_lane_ids)
  nearby_lane_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ObjectFeature::set_nearby_lane_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.nearby_lane_ids)
  nearby_lane_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ObjectFeature::set_nearby_lane_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  nearby_lane_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:prediction_debug_msgs.ObjectFeature.nearby_lane_ids)
}
inline void ObjectFeature::set_nearby_lane_ids(int index, const char* value, size_t size) {
  nearby_lane_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:prediction_debug_msgs.ObjectFeature.nearby_lane_ids)
}
inline ::std::string* ObjectFeature::add_nearby_lane_ids() {
  // @@protoc_insertion_point(field_add_mutable:prediction_debug_msgs.ObjectFeature.nearby_lane_ids)
  return nearby_lane_ids_.Add();
}
inline void ObjectFeature::add_nearby_lane_ids(const ::std::string& value) {
  nearby_lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:prediction_debug_msgs.ObjectFeature.nearby_lane_ids)
}
#if LANG_CXX11
inline void ObjectFeature::add_nearby_lane_ids(::std::string&& value) {
  nearby_lane_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:prediction_debug_msgs.ObjectFeature.nearby_lane_ids)
}
#endif
inline void ObjectFeature::add_nearby_lane_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  nearby_lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:prediction_debug_msgs.ObjectFeature.nearby_lane_ids)
}
inline void ObjectFeature::add_nearby_lane_ids(const char* value, size_t size) {
  nearby_lane_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:prediction_debug_msgs.ObjectFeature.nearby_lane_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ObjectFeature::nearby_lane_ids() const {
  // @@protoc_insertion_point(field_list:prediction_debug_msgs.ObjectFeature.nearby_lane_ids)
  return nearby_lane_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ObjectFeature::mutable_nearby_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:prediction_debug_msgs.ObjectFeature.nearby_lane_ids)
  return &nearby_lane_ids_;
}

// string enter_lane = 19;
inline void ObjectFeature::clear_enter_lane() {
  enter_lane_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectFeature::enter_lane() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.enter_lane)
  return enter_lane_.GetNoArena();
}
inline void ObjectFeature::set_enter_lane(const ::std::string& value) {
  
  enter_lane_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.enter_lane)
}
#if LANG_CXX11
inline void ObjectFeature::set_enter_lane(::std::string&& value) {
  
  enter_lane_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prediction_debug_msgs.ObjectFeature.enter_lane)
}
#endif
inline void ObjectFeature::set_enter_lane(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  enter_lane_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prediction_debug_msgs.ObjectFeature.enter_lane)
}
inline void ObjectFeature::set_enter_lane(const char* value, size_t size) {
  
  enter_lane_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prediction_debug_msgs.ObjectFeature.enter_lane)
}
inline ::std::string* ObjectFeature::mutable_enter_lane() {
  
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.ObjectFeature.enter_lane)
  return enter_lane_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectFeature::release_enter_lane() {
  // @@protoc_insertion_point(field_release:prediction_debug_msgs.ObjectFeature.enter_lane)
  
  return enter_lane_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectFeature::set_allocated_enter_lane(::std::string* enter_lane) {
  if (enter_lane != NULL) {
    
  } else {
    
  }
  enter_lane_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enter_lane);
  // @@protoc_insertion_point(field_set_allocated:prediction_debug_msgs.ObjectFeature.enter_lane)
}

// repeated .prediction_debug_msgs.Exit exits = 20;
inline int ObjectFeature::exits_size() const {
  return exits_.size();
}
inline void ObjectFeature::clear_exits() {
  exits_.Clear();
}
inline const ::prediction_debug_msgs::Exit& ObjectFeature::exits(int index) const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.exits)
  return exits_.Get(index);
}
inline ::prediction_debug_msgs::Exit* ObjectFeature::mutable_exits(int index) {
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.ObjectFeature.exits)
  return exits_.Mutable(index);
}
inline ::prediction_debug_msgs::Exit* ObjectFeature::add_exits() {
  // @@protoc_insertion_point(field_add:prediction_debug_msgs.ObjectFeature.exits)
  return exits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::Exit >*
ObjectFeature::mutable_exits() {
  // @@protoc_insertion_point(field_mutable_list:prediction_debug_msgs.ObjectFeature.exits)
  return &exits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::Exit >&
ObjectFeature::exits() const {
  // @@protoc_insertion_point(field_list:prediction_debug_msgs.ObjectFeature.exits)
  return exits_;
}

// .prediction_debug_msgs.Exit off_lane_exit = 21;
inline bool ObjectFeature::has_off_lane_exit() const {
  return this != internal_default_instance() && off_lane_exit_ != NULL;
}
inline void ObjectFeature::clear_off_lane_exit() {
  if (GetArenaNoVirtual() == NULL && off_lane_exit_ != NULL) {
    delete off_lane_exit_;
  }
  off_lane_exit_ = NULL;
}
inline const ::prediction_debug_msgs::Exit& ObjectFeature::off_lane_exit() const {
  const ::prediction_debug_msgs::Exit* p = off_lane_exit_;
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.off_lane_exit)
  return p != NULL ? *p : *reinterpret_cast<const ::prediction_debug_msgs::Exit*>(
      &::prediction_debug_msgs::_Exit_default_instance_);
}
inline ::prediction_debug_msgs::Exit* ObjectFeature::release_off_lane_exit() {
  // @@protoc_insertion_point(field_release:prediction_debug_msgs.ObjectFeature.off_lane_exit)
  
  ::prediction_debug_msgs::Exit* temp = off_lane_exit_;
  off_lane_exit_ = NULL;
  return temp;
}
inline ::prediction_debug_msgs::Exit* ObjectFeature::mutable_off_lane_exit() {
  
  if (off_lane_exit_ == NULL) {
    off_lane_exit_ = new ::prediction_debug_msgs::Exit;
  }
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.ObjectFeature.off_lane_exit)
  return off_lane_exit_;
}
inline void ObjectFeature::set_allocated_off_lane_exit(::prediction_debug_msgs::Exit* off_lane_exit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete off_lane_exit_;
  }
  if (off_lane_exit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      off_lane_exit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, off_lane_exit, submessage_arena);
    }
    
  } else {
    
  }
  off_lane_exit_ = off_lane_exit;
  // @@protoc_insertion_point(field_set_allocated:prediction_debug_msgs.ObjectFeature.off_lane_exit)
}

// int32 evaluator_type = 22;
inline void ObjectFeature::clear_evaluator_type() {
  evaluator_type_ = 0;
}
inline ::google::protobuf::int32 ObjectFeature::evaluator_type() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.evaluator_type)
  return evaluator_type_;
}
inline void ObjectFeature::set_evaluator_type(::google::protobuf::int32 value) {
  
  evaluator_type_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.evaluator_type)
}

// int32 sub_evaluator_type = 23;
inline void ObjectFeature::clear_sub_evaluator_type() {
  sub_evaluator_type_ = 0;
}
inline ::google::protobuf::int32 ObjectFeature::sub_evaluator_type() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.sub_evaluator_type)
  return sub_evaluator_type_;
}
inline void ObjectFeature::set_sub_evaluator_type(::google::protobuf::int32 value) {
  
  sub_evaluator_type_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.sub_evaluator_type)
}

// int32 predictor_type = 24;
inline void ObjectFeature::clear_predictor_type() {
  predictor_type_ = 0;
}
inline ::google::protobuf::int32 ObjectFeature::predictor_type() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.predictor_type)
  return predictor_type_;
}
inline void ObjectFeature::set_predictor_type(::google::protobuf::int32 value) {
  
  predictor_type_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.predictor_type)
}

// bool need_exception_handling = 25;
inline void ObjectFeature::clear_need_exception_handling() {
  need_exception_handling_ = false;
}
inline bool ObjectFeature::need_exception_handling() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectFeature.need_exception_handling)
  return need_exception_handling_;
}
inline void ObjectFeature::set_need_exception_handling(bool value) {
  
  need_exception_handling_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectFeature.need_exception_handling)
}

// -------------------------------------------------------------------

// SingleInteractiveCrossWalkInfo

// string light_id = 1;
inline void SingleInteractiveCrossWalkInfo::clear_light_id() {
  light_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SingleInteractiveCrossWalkInfo::light_id() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.SingleInteractiveCrossWalkInfo.light_id)
  return light_id_.GetNoArena();
}
inline void SingleInteractiveCrossWalkInfo::set_light_id(const ::std::string& value) {
  
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.SingleInteractiveCrossWalkInfo.light_id)
}
#if LANG_CXX11
inline void SingleInteractiveCrossWalkInfo::set_light_id(::std::string&& value) {
  
  light_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prediction_debug_msgs.SingleInteractiveCrossWalkInfo.light_id)
}
#endif
inline void SingleInteractiveCrossWalkInfo::set_light_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prediction_debug_msgs.SingleInteractiveCrossWalkInfo.light_id)
}
inline void SingleInteractiveCrossWalkInfo::set_light_id(const char* value, size_t size) {
  
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prediction_debug_msgs.SingleInteractiveCrossWalkInfo.light_id)
}
inline ::std::string* SingleInteractiveCrossWalkInfo::mutable_light_id() {
  
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.SingleInteractiveCrossWalkInfo.light_id)
  return light_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleInteractiveCrossWalkInfo::release_light_id() {
  // @@protoc_insertion_point(field_release:prediction_debug_msgs.SingleInteractiveCrossWalkInfo.light_id)
  
  return light_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleInteractiveCrossWalkInfo::set_allocated_light_id(::std::string* light_id) {
  if (light_id != NULL) {
    
  } else {
    
  }
  light_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), light_id);
  // @@protoc_insertion_point(field_set_allocated:prediction_debug_msgs.SingleInteractiveCrossWalkInfo.light_id)
}

// repeated .prediction_debug_msgs.InteractiveCrossWalkInfo crosswalks = 2;
inline int SingleInteractiveCrossWalkInfo::crosswalks_size() const {
  return crosswalks_.size();
}
inline void SingleInteractiveCrossWalkInfo::clear_crosswalks() {
  crosswalks_.Clear();
}
inline const ::prediction_debug_msgs::InteractiveCrossWalkInfo& SingleInteractiveCrossWalkInfo::crosswalks(int index) const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.SingleInteractiveCrossWalkInfo.crosswalks)
  return crosswalks_.Get(index);
}
inline ::prediction_debug_msgs::InteractiveCrossWalkInfo* SingleInteractiveCrossWalkInfo::mutable_crosswalks(int index) {
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.SingleInteractiveCrossWalkInfo.crosswalks)
  return crosswalks_.Mutable(index);
}
inline ::prediction_debug_msgs::InteractiveCrossWalkInfo* SingleInteractiveCrossWalkInfo::add_crosswalks() {
  // @@protoc_insertion_point(field_add:prediction_debug_msgs.SingleInteractiveCrossWalkInfo.crosswalks)
  return crosswalks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::InteractiveCrossWalkInfo >*
SingleInteractiveCrossWalkInfo::mutable_crosswalks() {
  // @@protoc_insertion_point(field_mutable_list:prediction_debug_msgs.SingleInteractiveCrossWalkInfo.crosswalks)
  return &crosswalks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::InteractiveCrossWalkInfo >&
SingleInteractiveCrossWalkInfo::crosswalks() const {
  // @@protoc_insertion_point(field_list:prediction_debug_msgs.SingleInteractiveCrossWalkInfo.crosswalks)
  return crosswalks_;
}

// -------------------------------------------------------------------

// SingleInteractiveLaneInfo

// string light_id = 1;
inline void SingleInteractiveLaneInfo::clear_light_id() {
  light_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SingleInteractiveLaneInfo::light_id() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.SingleInteractiveLaneInfo.light_id)
  return light_id_.GetNoArena();
}
inline void SingleInteractiveLaneInfo::set_light_id(const ::std::string& value) {
  
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.SingleInteractiveLaneInfo.light_id)
}
#if LANG_CXX11
inline void SingleInteractiveLaneInfo::set_light_id(::std::string&& value) {
  
  light_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prediction_debug_msgs.SingleInteractiveLaneInfo.light_id)
}
#endif
inline void SingleInteractiveLaneInfo::set_light_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prediction_debug_msgs.SingleInteractiveLaneInfo.light_id)
}
inline void SingleInteractiveLaneInfo::set_light_id(const char* value, size_t size) {
  
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prediction_debug_msgs.SingleInteractiveLaneInfo.light_id)
}
inline ::std::string* SingleInteractiveLaneInfo::mutable_light_id() {
  
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.SingleInteractiveLaneInfo.light_id)
  return light_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleInteractiveLaneInfo::release_light_id() {
  // @@protoc_insertion_point(field_release:prediction_debug_msgs.SingleInteractiveLaneInfo.light_id)
  
  return light_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleInteractiveLaneInfo::set_allocated_light_id(::std::string* light_id) {
  if (light_id != NULL) {
    
  } else {
    
  }
  light_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), light_id);
  // @@protoc_insertion_point(field_set_allocated:prediction_debug_msgs.SingleInteractiveLaneInfo.light_id)
}

// repeated .prediction_debug_msgs.InteractiveLaneInfo cross_lanes = 2;
inline int SingleInteractiveLaneInfo::cross_lanes_size() const {
  return cross_lanes_.size();
}
inline void SingleInteractiveLaneInfo::clear_cross_lanes() {
  cross_lanes_.Clear();
}
inline const ::prediction_debug_msgs::InteractiveLaneInfo& SingleInteractiveLaneInfo::cross_lanes(int index) const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.SingleInteractiveLaneInfo.cross_lanes)
  return cross_lanes_.Get(index);
}
inline ::prediction_debug_msgs::InteractiveLaneInfo* SingleInteractiveLaneInfo::mutable_cross_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.SingleInteractiveLaneInfo.cross_lanes)
  return cross_lanes_.Mutable(index);
}
inline ::prediction_debug_msgs::InteractiveLaneInfo* SingleInteractiveLaneInfo::add_cross_lanes() {
  // @@protoc_insertion_point(field_add:prediction_debug_msgs.SingleInteractiveLaneInfo.cross_lanes)
  return cross_lanes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::InteractiveLaneInfo >*
SingleInteractiveLaneInfo::mutable_cross_lanes() {
  // @@protoc_insertion_point(field_mutable_list:prediction_debug_msgs.SingleInteractiveLaneInfo.cross_lanes)
  return &cross_lanes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::InteractiveLaneInfo >&
SingleInteractiveLaneInfo::cross_lanes() const {
  // @@protoc_insertion_point(field_list:prediction_debug_msgs.SingleInteractiveLaneInfo.cross_lanes)
  return cross_lanes_;
}

// -------------------------------------------------------------------

// TrafficLightFeature

// string light_id = 1;
inline void TrafficLightFeature::clear_light_id() {
  light_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrafficLightFeature::light_id() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.TrafficLightFeature.light_id)
  return light_id_.GetNoArena();
}
inline void TrafficLightFeature::set_light_id(const ::std::string& value) {
  
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.TrafficLightFeature.light_id)
}
#if LANG_CXX11
inline void TrafficLightFeature::set_light_id(::std::string&& value) {
  
  light_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prediction_debug_msgs.TrafficLightFeature.light_id)
}
#endif
inline void TrafficLightFeature::set_light_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prediction_debug_msgs.TrafficLightFeature.light_id)
}
inline void TrafficLightFeature::set_light_id(const char* value, size_t size) {
  
  light_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prediction_debug_msgs.TrafficLightFeature.light_id)
}
inline ::std::string* TrafficLightFeature::mutable_light_id() {
  
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.TrafficLightFeature.light_id)
  return light_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrafficLightFeature::release_light_id() {
  // @@protoc_insertion_point(field_release:prediction_debug_msgs.TrafficLightFeature.light_id)
  
  return light_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLightFeature::set_allocated_light_id(::std::string* light_id) {
  if (light_id != NULL) {
    
  } else {
    
  }
  light_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), light_id);
  // @@protoc_insertion_point(field_set_allocated:prediction_debug_msgs.TrafficLightFeature.light_id)
}

// string lane_id = 2;
inline void TrafficLightFeature::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TrafficLightFeature::lane_id() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.TrafficLightFeature.lane_id)
  return lane_id_.GetNoArena();
}
inline void TrafficLightFeature::set_lane_id(const ::std::string& value) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.TrafficLightFeature.lane_id)
}
#if LANG_CXX11
inline void TrafficLightFeature::set_lane_id(::std::string&& value) {
  
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prediction_debug_msgs.TrafficLightFeature.lane_id)
}
#endif
inline void TrafficLightFeature::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prediction_debug_msgs.TrafficLightFeature.lane_id)
}
inline void TrafficLightFeature::set_lane_id(const char* value, size_t size) {
  
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prediction_debug_msgs.TrafficLightFeature.lane_id)
}
inline ::std::string* TrafficLightFeature::mutable_lane_id() {
  
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.TrafficLightFeature.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrafficLightFeature::release_lane_id() {
  // @@protoc_insertion_point(field_release:prediction_debug_msgs.TrafficLightFeature.lane_id)
  
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLightFeature::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    
  } else {
    
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:prediction_debug_msgs.TrafficLightFeature.lane_id)
}

// int32 lane_turn = 3;
inline void TrafficLightFeature::clear_lane_turn() {
  lane_turn_ = 0;
}
inline ::google::protobuf::int32 TrafficLightFeature::lane_turn() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.TrafficLightFeature.lane_turn)
  return lane_turn_;
}
inline void TrafficLightFeature::set_lane_turn(::google::protobuf::int32 value) {
  
  lane_turn_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.TrafficLightFeature.lane_turn)
}

// int32 signal_type = 4;
inline void TrafficLightFeature::clear_signal_type() {
  signal_type_ = 0;
}
inline ::google::protobuf::int32 TrafficLightFeature::signal_type() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.TrafficLightFeature.signal_type)
  return signal_type_;
}
inline void TrafficLightFeature::set_signal_type(::google::protobuf::int32 value) {
  
  signal_type_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.TrafficLightFeature.signal_type)
}

// int32 last_color = 5;
inline void TrafficLightFeature::clear_last_color() {
  last_color_ = 0;
}
inline ::google::protobuf::int32 TrafficLightFeature::last_color() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.TrafficLightFeature.last_color)
  return last_color_;
}
inline void TrafficLightFeature::set_last_color(::google::protobuf::int32 value) {
  
  last_color_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.TrafficLightFeature.last_color)
}

// int32 current_color = 6;
inline void TrafficLightFeature::clear_current_color() {
  current_color_ = 0;
}
inline ::google::protobuf::int32 TrafficLightFeature::current_color() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.TrafficLightFeature.current_color)
  return current_color_;
}
inline void TrafficLightFeature::set_current_color(::google::protobuf::int32 value) {
  
  current_color_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.TrafficLightFeature.current_color)
}

// int32 detect_keep_frames = 7;
inline void TrafficLightFeature::clear_detect_keep_frames() {
  detect_keep_frames_ = 0;
}
inline ::google::protobuf::int32 TrafficLightFeature::detect_keep_frames() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.TrafficLightFeature.detect_keep_frames)
  return detect_keep_frames_;
}
inline void TrafficLightFeature::set_detect_keep_frames(::google::protobuf::int32 value) {
  
  detect_keep_frames_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.TrafficLightFeature.detect_keep_frames)
}

// int32 infer_keep_frames = 8;
inline void TrafficLightFeature::clear_infer_keep_frames() {
  infer_keep_frames_ = 0;
}
inline ::google::protobuf::int32 TrafficLightFeature::infer_keep_frames() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.TrafficLightFeature.infer_keep_frames)
  return infer_keep_frames_;
}
inline void TrafficLightFeature::set_infer_keep_frames(::google::protobuf::int32 value) {
  
  infer_keep_frames_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.TrafficLightFeature.infer_keep_frames)
}

// bool is_seen = 9;
inline void TrafficLightFeature::clear_is_seen() {
  is_seen_ = false;
}
inline bool TrafficLightFeature::is_seen() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.TrafficLightFeature.is_seen)
  return is_seen_;
}
inline void TrafficLightFeature::set_is_seen(bool value) {
  
  is_seen_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.TrafficLightFeature.is_seen)
}

// bool is_passable = 10;
inline void TrafficLightFeature::clear_is_passable() {
  is_passable_ = false;
}
inline bool TrafficLightFeature::is_passable() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.TrafficLightFeature.is_passable)
  return is_passable_;
}
inline void TrafficLightFeature::set_is_passable(bool value) {
  
  is_passable_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.TrafficLightFeature.is_passable)
}

// repeated string associated_lane_ids = 11;
inline int TrafficLightFeature::associated_lane_ids_size() const {
  return associated_lane_ids_.size();
}
inline void TrafficLightFeature::clear_associated_lane_ids() {
  associated_lane_ids_.Clear();
}
inline const ::std::string& TrafficLightFeature::associated_lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.TrafficLightFeature.associated_lane_ids)
  return associated_lane_ids_.Get(index);
}
inline ::std::string* TrafficLightFeature::mutable_associated_lane_ids(int index) {
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.TrafficLightFeature.associated_lane_ids)
  return associated_lane_ids_.Mutable(index);
}
inline void TrafficLightFeature::set_associated_lane_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.TrafficLightFeature.associated_lane_ids)
  associated_lane_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TrafficLightFeature::set_associated_lane_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.TrafficLightFeature.associated_lane_ids)
  associated_lane_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TrafficLightFeature::set_associated_lane_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  associated_lane_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:prediction_debug_msgs.TrafficLightFeature.associated_lane_ids)
}
inline void TrafficLightFeature::set_associated_lane_ids(int index, const char* value, size_t size) {
  associated_lane_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:prediction_debug_msgs.TrafficLightFeature.associated_lane_ids)
}
inline ::std::string* TrafficLightFeature::add_associated_lane_ids() {
  // @@protoc_insertion_point(field_add_mutable:prediction_debug_msgs.TrafficLightFeature.associated_lane_ids)
  return associated_lane_ids_.Add();
}
inline void TrafficLightFeature::add_associated_lane_ids(const ::std::string& value) {
  associated_lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:prediction_debug_msgs.TrafficLightFeature.associated_lane_ids)
}
#if LANG_CXX11
inline void TrafficLightFeature::add_associated_lane_ids(::std::string&& value) {
  associated_lane_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:prediction_debug_msgs.TrafficLightFeature.associated_lane_ids)
}
#endif
inline void TrafficLightFeature::add_associated_lane_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  associated_lane_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:prediction_debug_msgs.TrafficLightFeature.associated_lane_ids)
}
inline void TrafficLightFeature::add_associated_lane_ids(const char* value, size_t size) {
  associated_lane_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:prediction_debug_msgs.TrafficLightFeature.associated_lane_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrafficLightFeature::associated_lane_ids() const {
  // @@protoc_insertion_point(field_list:prediction_debug_msgs.TrafficLightFeature.associated_lane_ids)
  return associated_lane_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrafficLightFeature::mutable_associated_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:prediction_debug_msgs.TrafficLightFeature.associated_lane_ids)
  return &associated_lane_ids_;
}

// double start_heading = 12;
inline void TrafficLightFeature::clear_start_heading() {
  start_heading_ = 0;
}
inline double TrafficLightFeature::start_heading() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.TrafficLightFeature.start_heading)
  return start_heading_;
}
inline void TrafficLightFeature::set_start_heading(double value) {
  
  start_heading_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.TrafficLightFeature.start_heading)
}

// double end_heading = 13;
inline void TrafficLightFeature::clear_end_heading() {
  end_heading_ = 0;
}
inline double TrafficLightFeature::end_heading() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.TrafficLightFeature.end_heading)
  return end_heading_;
}
inline void TrafficLightFeature::set_end_heading(double value) {
  
  end_heading_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.TrafficLightFeature.end_heading)
}

// -------------------------------------------------------------------

// SignalFeature

// repeated .prediction_debug_msgs.TrafficLightFeature candidate_lights = 1;
inline int SignalFeature::candidate_lights_size() const {
  return candidate_lights_.size();
}
inline void SignalFeature::clear_candidate_lights() {
  candidate_lights_.Clear();
}
inline const ::prediction_debug_msgs::TrafficLightFeature& SignalFeature::candidate_lights(int index) const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.SignalFeature.candidate_lights)
  return candidate_lights_.Get(index);
}
inline ::prediction_debug_msgs::TrafficLightFeature* SignalFeature::mutable_candidate_lights(int index) {
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.SignalFeature.candidate_lights)
  return candidate_lights_.Mutable(index);
}
inline ::prediction_debug_msgs::TrafficLightFeature* SignalFeature::add_candidate_lights() {
  // @@protoc_insertion_point(field_add:prediction_debug_msgs.SignalFeature.candidate_lights)
  return candidate_lights_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::TrafficLightFeature >*
SignalFeature::mutable_candidate_lights() {
  // @@protoc_insertion_point(field_mutable_list:prediction_debug_msgs.SignalFeature.candidate_lights)
  return &candidate_lights_;
}
inline const ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::TrafficLightFeature >&
SignalFeature::candidate_lights() const {
  // @@protoc_insertion_point(field_list:prediction_debug_msgs.SignalFeature.candidate_lights)
  return candidate_lights_;
}

// repeated .prediction_debug_msgs.TrafficLightFeature assistant_lights = 2;
inline int SignalFeature::assistant_lights_size() const {
  return assistant_lights_.size();
}
inline void SignalFeature::clear_assistant_lights() {
  assistant_lights_.Clear();
}
inline const ::prediction_debug_msgs::TrafficLightFeature& SignalFeature::assistant_lights(int index) const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.SignalFeature.assistant_lights)
  return assistant_lights_.Get(index);
}
inline ::prediction_debug_msgs::TrafficLightFeature* SignalFeature::mutable_assistant_lights(int index) {
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.SignalFeature.assistant_lights)
  return assistant_lights_.Mutable(index);
}
inline ::prediction_debug_msgs::TrafficLightFeature* SignalFeature::add_assistant_lights() {
  // @@protoc_insertion_point(field_add:prediction_debug_msgs.SignalFeature.assistant_lights)
  return assistant_lights_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::TrafficLightFeature >*
SignalFeature::mutable_assistant_lights() {
  // @@protoc_insertion_point(field_mutable_list:prediction_debug_msgs.SignalFeature.assistant_lights)
  return &assistant_lights_;
}
inline const ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::TrafficLightFeature >&
SignalFeature::assistant_lights() const {
  // @@protoc_insertion_point(field_list:prediction_debug_msgs.SignalFeature.assistant_lights)
  return assistant_lights_;
}

// repeated .prediction_debug_msgs.SingleInteractiveLaneInfo candidate_cross_lanes = 3;
inline int SignalFeature::candidate_cross_lanes_size() const {
  return candidate_cross_lanes_.size();
}
inline void SignalFeature::clear_candidate_cross_lanes() {
  candidate_cross_lanes_.Clear();
}
inline const ::prediction_debug_msgs::SingleInteractiveLaneInfo& SignalFeature::candidate_cross_lanes(int index) const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.SignalFeature.candidate_cross_lanes)
  return candidate_cross_lanes_.Get(index);
}
inline ::prediction_debug_msgs::SingleInteractiveLaneInfo* SignalFeature::mutable_candidate_cross_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.SignalFeature.candidate_cross_lanes)
  return candidate_cross_lanes_.Mutable(index);
}
inline ::prediction_debug_msgs::SingleInteractiveLaneInfo* SignalFeature::add_candidate_cross_lanes() {
  // @@protoc_insertion_point(field_add:prediction_debug_msgs.SignalFeature.candidate_cross_lanes)
  return candidate_cross_lanes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::SingleInteractiveLaneInfo >*
SignalFeature::mutable_candidate_cross_lanes() {
  // @@protoc_insertion_point(field_mutable_list:prediction_debug_msgs.SignalFeature.candidate_cross_lanes)
  return &candidate_cross_lanes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::SingleInteractiveLaneInfo >&
SignalFeature::candidate_cross_lanes() const {
  // @@protoc_insertion_point(field_list:prediction_debug_msgs.SignalFeature.candidate_cross_lanes)
  return candidate_cross_lanes_;
}

// repeated .prediction_debug_msgs.SingleInteractiveCrossWalkInfo candidate_crosswalks = 4;
inline int SignalFeature::candidate_crosswalks_size() const {
  return candidate_crosswalks_.size();
}
inline void SignalFeature::clear_candidate_crosswalks() {
  candidate_crosswalks_.Clear();
}
inline const ::prediction_debug_msgs::SingleInteractiveCrossWalkInfo& SignalFeature::candidate_crosswalks(int index) const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.SignalFeature.candidate_crosswalks)
  return candidate_crosswalks_.Get(index);
}
inline ::prediction_debug_msgs::SingleInteractiveCrossWalkInfo* SignalFeature::mutable_candidate_crosswalks(int index) {
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.SignalFeature.candidate_crosswalks)
  return candidate_crosswalks_.Mutable(index);
}
inline ::prediction_debug_msgs::SingleInteractiveCrossWalkInfo* SignalFeature::add_candidate_crosswalks() {
  // @@protoc_insertion_point(field_add:prediction_debug_msgs.SignalFeature.candidate_crosswalks)
  return candidate_crosswalks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::SingleInteractiveCrossWalkInfo >*
SignalFeature::mutable_candidate_crosswalks() {
  // @@protoc_insertion_point(field_mutable_list:prediction_debug_msgs.SignalFeature.candidate_crosswalks)
  return &candidate_crosswalks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::SingleInteractiveCrossWalkInfo >&
SignalFeature::candidate_crosswalks() const {
  // @@protoc_insertion_point(field_list:prediction_debug_msgs.SignalFeature.candidate_crosswalks)
  return candidate_crosswalks_;
}

// -------------------------------------------------------------------

// ObjectsFeature

// .prediction_debug_msgs.ObjectFeature self_pos_feature = 1;
inline bool ObjectsFeature::has_self_pos_feature() const {
  return this != internal_default_instance() && self_pos_feature_ != NULL;
}
inline void ObjectsFeature::clear_self_pos_feature() {
  if (GetArenaNoVirtual() == NULL && self_pos_feature_ != NULL) {
    delete self_pos_feature_;
  }
  self_pos_feature_ = NULL;
}
inline const ::prediction_debug_msgs::ObjectFeature& ObjectsFeature::self_pos_feature() const {
  const ::prediction_debug_msgs::ObjectFeature* p = self_pos_feature_;
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectsFeature.self_pos_feature)
  return p != NULL ? *p : *reinterpret_cast<const ::prediction_debug_msgs::ObjectFeature*>(
      &::prediction_debug_msgs::_ObjectFeature_default_instance_);
}
inline ::prediction_debug_msgs::ObjectFeature* ObjectsFeature::release_self_pos_feature() {
  // @@protoc_insertion_point(field_release:prediction_debug_msgs.ObjectsFeature.self_pos_feature)
  
  ::prediction_debug_msgs::ObjectFeature* temp = self_pos_feature_;
  self_pos_feature_ = NULL;
  return temp;
}
inline ::prediction_debug_msgs::ObjectFeature* ObjectsFeature::mutable_self_pos_feature() {
  
  if (self_pos_feature_ == NULL) {
    self_pos_feature_ = new ::prediction_debug_msgs::ObjectFeature;
  }
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.ObjectsFeature.self_pos_feature)
  return self_pos_feature_;
}
inline void ObjectsFeature::set_allocated_self_pos_feature(::prediction_debug_msgs::ObjectFeature* self_pos_feature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete self_pos_feature_;
  }
  if (self_pos_feature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      self_pos_feature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, self_pos_feature, submessage_arena);
    }
    
  } else {
    
  }
  self_pos_feature_ = self_pos_feature;
  // @@protoc_insertion_point(field_set_allocated:prediction_debug_msgs.ObjectsFeature.self_pos_feature)
}

// repeated .prediction_debug_msgs.ObjectFeature objects_feature = 2;
inline int ObjectsFeature::objects_feature_size() const {
  return objects_feature_.size();
}
inline void ObjectsFeature::clear_objects_feature() {
  objects_feature_.Clear();
}
inline const ::prediction_debug_msgs::ObjectFeature& ObjectsFeature::objects_feature(int index) const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectsFeature.objects_feature)
  return objects_feature_.Get(index);
}
inline ::prediction_debug_msgs::ObjectFeature* ObjectsFeature::mutable_objects_feature(int index) {
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.ObjectsFeature.objects_feature)
  return objects_feature_.Mutable(index);
}
inline ::prediction_debug_msgs::ObjectFeature* ObjectsFeature::add_objects_feature() {
  // @@protoc_insertion_point(field_add:prediction_debug_msgs.ObjectsFeature.objects_feature)
  return objects_feature_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::ObjectFeature >*
ObjectsFeature::mutable_objects_feature() {
  // @@protoc_insertion_point(field_mutable_list:prediction_debug_msgs.ObjectsFeature.objects_feature)
  return &objects_feature_;
}
inline const ::google::protobuf::RepeatedPtrField< ::prediction_debug_msgs::ObjectFeature >&
ObjectsFeature::objects_feature() const {
  // @@protoc_insertion_point(field_list:prediction_debug_msgs.ObjectsFeature.objects_feature)
  return objects_feature_;
}

// .prediction_debug_msgs.SignalFeature signal_feature = 3;
inline bool ObjectsFeature::has_signal_feature() const {
  return this != internal_default_instance() && signal_feature_ != NULL;
}
inline void ObjectsFeature::clear_signal_feature() {
  if (GetArenaNoVirtual() == NULL && signal_feature_ != NULL) {
    delete signal_feature_;
  }
  signal_feature_ = NULL;
}
inline const ::prediction_debug_msgs::SignalFeature& ObjectsFeature::signal_feature() const {
  const ::prediction_debug_msgs::SignalFeature* p = signal_feature_;
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectsFeature.signal_feature)
  return p != NULL ? *p : *reinterpret_cast<const ::prediction_debug_msgs::SignalFeature*>(
      &::prediction_debug_msgs::_SignalFeature_default_instance_);
}
inline ::prediction_debug_msgs::SignalFeature* ObjectsFeature::release_signal_feature() {
  // @@protoc_insertion_point(field_release:prediction_debug_msgs.ObjectsFeature.signal_feature)
  
  ::prediction_debug_msgs::SignalFeature* temp = signal_feature_;
  signal_feature_ = NULL;
  return temp;
}
inline ::prediction_debug_msgs::SignalFeature* ObjectsFeature::mutable_signal_feature() {
  
  if (signal_feature_ == NULL) {
    signal_feature_ = new ::prediction_debug_msgs::SignalFeature;
  }
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.ObjectsFeature.signal_feature)
  return signal_feature_;
}
inline void ObjectsFeature::set_allocated_signal_feature(::prediction_debug_msgs::SignalFeature* signal_feature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete signal_feature_;
  }
  if (signal_feature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      signal_feature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signal_feature, submessage_arena);
    }
    
  } else {
    
  }
  signal_feature_ = signal_feature;
  // @@protoc_insertion_point(field_set_allocated:prediction_debug_msgs.ObjectsFeature.signal_feature)
}

// double cost_time = 4;
inline void ObjectsFeature::clear_cost_time() {
  cost_time_ = 0;
}
inline double ObjectsFeature::cost_time() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectsFeature.cost_time)
  return cost_time_;
}
inline void ObjectsFeature::set_cost_time(double value) {
  
  cost_time_ = value;
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectsFeature.cost_time)
}

// string err_msg = 5;
inline void ObjectsFeature::clear_err_msg() {
  err_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectsFeature::err_msg() const {
  // @@protoc_insertion_point(field_get:prediction_debug_msgs.ObjectsFeature.err_msg)
  return err_msg_.GetNoArena();
}
inline void ObjectsFeature::set_err_msg(const ::std::string& value) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:prediction_debug_msgs.ObjectsFeature.err_msg)
}
#if LANG_CXX11
inline void ObjectsFeature::set_err_msg(::std::string&& value) {
  
  err_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:prediction_debug_msgs.ObjectsFeature.err_msg)
}
#endif
inline void ObjectsFeature::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:prediction_debug_msgs.ObjectsFeature.err_msg)
}
inline void ObjectsFeature::set_err_msg(const char* value, size_t size) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:prediction_debug_msgs.ObjectsFeature.err_msg)
}
inline ::std::string* ObjectsFeature::mutable_err_msg() {
  
  // @@protoc_insertion_point(field_mutable:prediction_debug_msgs.ObjectsFeature.err_msg)
  return err_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectsFeature::release_err_msg() {
  // @@protoc_insertion_point(field_release:prediction_debug_msgs.ObjectsFeature.err_msg)
  
  return err_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectsFeature::set_allocated_err_msg(::std::string* err_msg) {
  if (err_msg != NULL) {
    
  } else {
    
  }
  err_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err_msg);
  // @@protoc_insertion_point(field_set_allocated:prediction_debug_msgs.ObjectsFeature.err_msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction_debug_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_prediction_5fdebug_5fmsgs_2eproto__INCLUDED
