// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoncontrolDebug_msgs.proto

#include "LoncontrolDebug_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace LoncontrolDebug_msgs {
class CellDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Cell>
      _instance;
} _Cell_default_instance_;
class ObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Object>
      _instance;
} _Object_default_instance_;
class ObstaclesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Obstacles>
      _instance;
} _Obstacles_default_instance_;
class LoncontrolDebugDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoncontrolDebug>
      _instance;
} _LoncontrolDebug_default_instance_;
}  // namespace LoncontrolDebug_msgs
namespace protobuf_LoncontrolDebug_5fmsgs_2eproto {
void InitDefaultsCellImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::LoncontrolDebug_msgs::_Cell_default_instance_;
    new (ptr) ::LoncontrolDebug_msgs::Cell();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoncontrolDebug_msgs::Cell::InitAsDefaultInstance();
}

void InitDefaultsCell() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCellImpl);
}

void InitDefaultsObjectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_LoncontrolDebug_5fmsgs_2eproto::InitDefaultsCell();
  {
    void* ptr = &::LoncontrolDebug_msgs::_Object_default_instance_;
    new (ptr) ::LoncontrolDebug_msgs::Object();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoncontrolDebug_msgs::Object::InitAsDefaultInstance();
}

void InitDefaultsObject() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObjectImpl);
}

void InitDefaultsObstaclesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_LoncontrolDebug_5fmsgs_2eproto::InitDefaultsObject();
  protobuf_LoncontrolDebug_5fmsgs_2eproto::InitDefaultsCell();
  {
    void* ptr = &::LoncontrolDebug_msgs::_Obstacles_default_instance_;
    new (ptr) ::LoncontrolDebug_msgs::Obstacles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoncontrolDebug_msgs::Obstacles::InitAsDefaultInstance();
}

void InitDefaultsObstacles() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsObstaclesImpl);
}

void InitDefaultsLoncontrolDebugImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_LoncontrolDebug_5fmsgs_2eproto::InitDefaultsObstacles();
  {
    void* ptr = &::LoncontrolDebug_msgs::_LoncontrolDebug_default_instance_;
    new (ptr) ::LoncontrolDebug_msgs::LoncontrolDebug();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoncontrolDebug_msgs::LoncontrolDebug::InitAsDefaultInstance();
}

void InitDefaultsLoncontrolDebug() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLoncontrolDebugImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Cell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Cell, idc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Cell, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Cell, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Cell, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Cell, xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Cell, yg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Object, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Object, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Object, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Object, vxrel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Object, vyrel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Object, vxabs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Object, vyabs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Object, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Object, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Object, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Object, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Object, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Object, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Object, cells_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Obstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Obstacles, objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::Obstacles, cells_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, path_filter_obs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, predict_carpos_filter_obs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, dangerous_obs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, sbj_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, virtual_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, target_speed_lag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, point_zero_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, speed_p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, speed_i_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, target_acel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, acel_real_raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, sbj_acel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, acel_p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, acel_i_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, torque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, pressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, point_zero_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, path_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, preview_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, real_steer_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, lat_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, preview_acel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, acel_pitch_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, acel_dis_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, speed_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, station_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, pos_matched_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, time_matched_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, accuracy_dis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, ego_velocity_prediction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, ego_station_prediction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, time_prev_matched_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, jerk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, station_p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, station_i_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, pre_zero_velocity_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, end_length_openloop_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, path_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, emergency_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, slow_aeb_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, is_shift_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, real_shift_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, shift_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, car_fault_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, temp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, temp2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, temp3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, emergency_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, acc_dis_car_to_obj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, acc_obj_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, acc_desired_dis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, acc_delt_dis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, acc_delt_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, acc_dis_error_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, acc_v_error_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, acc_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, accel_finally_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, safe_dis_base_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, loc_yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, theta_abs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, a_obs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, object_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, s_safe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, pred_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, nearest_obs_dis_to_car_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, neareat_cell_dis_to_car__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, collision_obj_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, collision_obj_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, collision_cell_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LoncontrolDebug_msgs::LoncontrolDebug, collision_cell_y_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LoncontrolDebug_msgs::Cell)},
  { 11, -1, sizeof(::LoncontrolDebug_msgs::Object)},
  { 30, -1, sizeof(::LoncontrolDebug_msgs::Obstacles)},
  { 37, -1, sizeof(::LoncontrolDebug_msgs::LoncontrolDebug)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::LoncontrolDebug_msgs::_Cell_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LoncontrolDebug_msgs::_Object_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LoncontrolDebug_msgs::_Obstacles_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LoncontrolDebug_msgs::_LoncontrolDebug_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "LoncontrolDebug_msgs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032LoncontrolDebug_msgs.proto\022\024Loncontrol"
      "Debug_msgs\"O\n\004Cell\022\013\n\003idc\030\001 \001(\r\022\014\n\004type\030"
      "\002 \001(\r\022\t\n\001x\030\003 \001(\002\022\t\n\001y\030\004 \001(\002\022\n\n\002xg\030\005 \001(\002\022"
      "\n\n\002yg\030\006 \001(\002\"\364\001\n\006Object\022\n\n\002id\030\001 \001(\r\022\t\n\001x\030"
      "\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\r\n\005vxrel\030\004 \001(\002\022\r\n\005vyrel"
      "\030\005 \001(\002\022\r\n\005vxabs\030\006 \001(\002\022\r\n\005vyabs\030\007 \001(\002\022\024\n\014"
      "acceleration\030\010 \001(\002\022\r\n\005width\030\t \001(\002\022\016\n\006len"
      "gth\030\n \001(\002\022\017\n\007heading\030\013 \001(\002\022\r\n\005speed\030\014 \001("
      "\002\022\014\n\004type\030\r \001(\r\022)\n\005cells\030\016 \001(\0132\032.Loncont"
      "rolDebug_msgs.Cell\"e\n\tObstacles\022-\n\007objec"
      "ts\030\001 \001(\0132\034.LoncontrolDebug_msgs.Object\022)"
      "\n\005Cells\030\002 \001(\0132\032.LoncontrolDebug_msgs.Cel"
      "l\"\362\r\n\017LoncontrolDebug\0228\n\017path_filter_obs"
      "\030\001 \001(\0132\037.LoncontrolDebug_msgs.Obstacles\022"
      "B\n\031predict_carpos_filter_obs\030\002 \001(\0132\037.Lon"
      "controlDebug_msgs.Obstacles\0226\n\rdangerous"
      "_obs\030\003 \001(\0132\037.LoncontrolDebug_msgs.Obstac"
      "les\022\021\n\tsbj_speed\030\004 \001(\001\022\025\n\rvirtual_speed\030"
      "\005 \001(\001\022\030\n\020target_speed_lag\030\006 \001(\001\022\033\n\023point"
      "_zero_velocity\030\007 \001(\001\022\017\n\007speed_p\030\010 \001(\001\022\017\n"
      "\007speed_i\030\t \001(\001\022\023\n\013target_acel\030\n \001(\001\022\025\n\ra"
      "cel_real_raw\030\013 \001(\001\022\020\n\010sbj_acel\030\014 \001(\001\022\016\n\006"
      "acel_p\030\r \001(\001\022\016\n\006acel_i\030\016 \001(\001\022\016\n\006torque\030\017"
      " \001(\001\022\020\n\010pressure\030\020 \001(\001\022\031\n\021point_zero_len"
      "gth\030\021 \001(\001\022\023\n\013path_length\030\022 \001(\001\022\030\n\020previe"
      "w_distance\030\023 \001(\001\022\030\n\020real_steer_angle\030\024 \001"
      "(\001\022\021\n\tlat_error\030\025 \001(\001\022\r\n\005pitch\030\026 \001(\001\022\024\n\014"
      "preview_acel\030\027 \001(\001\022\031\n\021acel_pitch_offset\030"
      "\030 \001(\001\022\027\n\017acel_dis_offset\030\031 \001(\001\022\023\n\013speed_"
      "error\030\032 \001(\001\022\025\n\rstation_error\030\033 \001(\001\022\032\n\022po"
      "s_matched_length\030\034 \001(\001\022\033\n\023time_matched_l"
      "ength\030\035 \001(\001\022\024\n\014accuracy_dis\030\036 \001(\001\022\037\n\027ego"
      "_velocity_prediction\030\037 \001(\001\022\036\n\026ego_statio"
      "n_prediction\030  \001(\001\022 \n\030time_prev_matched_"
      "length\030! \001(\001\022\014\n\004jerk\030\" \001(\001\022\021\n\tstation_p\030"
      "# \001(\001\022\021\n\tstation_i\030$ \001(\001\022\036\n\026pre_zero_vel"
      "ocity_flag\030% \001(\005\022 \n\030end_length_openloop_"
      "flag\030& \001(\005\022\026\n\016path_direction\030\' \001(\005\022\032\n\022em"
      "ergency_obstacle\030( \001(\005\022\025\n\rslow_aeb_mode\030"
      ") \001(\005\022\031\n\021is_shift_position\030* \001(\005\022\033\n\023real"
      "_shift_position\030+ \001(\005\022\026\n\016shift_position\030"
      ", \001(\005\022\027\n\017car_fault_level\030- \001(\005\022\r\n\005temp1\030"
      ". \001(\001\022\r\n\005temp2\030/ \001(\001\022\r\n\005temp3\0300 \001(\001\022\026\n\016e"
      "mergency_flag\0301 \001(\005\022\032\n\022acc_dis_car_to_ob"
      "j\0302 \001(\002\022\030\n\020acc_obj_velocity\0303 \001(\002\022\027\n\017acc"
      "_desired_dis\0304 \001(\002\022\024\n\014acc_delt_dis\0305 \001(\002"
      "\022\022\n\nacc_delt_v\0306 \001(\002\022\033\n\023acc_dis_error_ac"
      "cel\0307 \001(\002\022\031\n\021acc_v_error_accel\0308 \001(\002\022\021\n\t"
      "acc_accel\0309 \001(\002\022\025\n\raccel_finally\030: \001(\002\022\032"
      "\n\022safe_dis_base_path\030; \001(\002\022\017\n\007loc_yaw\030< "
      "\001(\002\022\021\n\ttheta_abs\030= \001(\002\022\r\n\005a_obs\030> \001(\002\022\024\n"
      "\014object_speed\030\? \001(\002\022\016\n\006s_safe\030@ \001(\002\022\021\n\tp"
      "red_time\030A \001(\002\022\036\n\026nearest_obs_dis_to_car"
      "\030B \001(\002\022 \n\030neareat_cell_dis_to_car_\030C \001(\001"
      "\022\027\n\017collision_obj_x\030D \001(\002\022\027\n\017collision_o"
      "bj_y\030E \001(\002\022\030\n\020collision_cell_x\030F \001(\002\022\030\n\020"
      "collision_cell_y\030G \001(\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2270);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LoncontrolDebug_msgs.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_LoncontrolDebug_5fmsgs_2eproto
namespace LoncontrolDebug_msgs {

// ===================================================================

void Cell::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cell::kIdcFieldNumber;
const int Cell::kTypeFieldNumber;
const int Cell::kXFieldNumber;
const int Cell::kYFieldNumber;
const int Cell::kXgFieldNumber;
const int Cell::kYgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cell::Cell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_LoncontrolDebug_5fmsgs_2eproto::InitDefaultsCell();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoncontrolDebug_msgs.Cell)
}
Cell::Cell(const Cell& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&idc_, &from.idc_,
    static_cast<size_t>(reinterpret_cast<char*>(&yg_) -
    reinterpret_cast<char*>(&idc_)) + sizeof(yg_));
  // @@protoc_insertion_point(copy_constructor:LoncontrolDebug_msgs.Cell)
}

void Cell::SharedCtor() {
  ::memset(&idc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yg_) -
      reinterpret_cast<char*>(&idc_)) + sizeof(yg_));
  _cached_size_ = 0;
}

Cell::~Cell() {
  // @@protoc_insertion_point(destructor:LoncontrolDebug_msgs.Cell)
  SharedDtor();
}

void Cell::SharedDtor() {
}

void Cell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cell::descriptor() {
  ::protobuf_LoncontrolDebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LoncontrolDebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cell& Cell::default_instance() {
  ::protobuf_LoncontrolDebug_5fmsgs_2eproto::InitDefaultsCell();
  return *internal_default_instance();
}

Cell* Cell::New(::google::protobuf::Arena* arena) const {
  Cell* n = new Cell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cell::Clear() {
// @@protoc_insertion_point(message_clear_start:LoncontrolDebug_msgs.Cell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&idc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yg_) -
      reinterpret_cast<char*>(&idc_)) + sizeof(yg_));
  _internal_metadata_.Clear();
}

bool Cell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoncontrolDebug_msgs.Cell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 idc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float xg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoncontrolDebug_msgs.Cell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoncontrolDebug_msgs.Cell)
  return false;
#undef DO_
}

void Cell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoncontrolDebug_msgs.Cell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 idc = 1;
  if (this->idc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idc(), output);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // float x = 3;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // float y = 4;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // float xg = 5;
  if (this->xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->xg(), output);
  }

  // float yg = 6;
  if (this->yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->yg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LoncontrolDebug_msgs.Cell)
}

::google::protobuf::uint8* Cell::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LoncontrolDebug_msgs.Cell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 idc = 1;
  if (this->idc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idc(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // float x = 3;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // float y = 4;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // float xg = 5;
  if (this->xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->xg(), target);
  }

  // float yg = 6;
  if (this->yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->yg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoncontrolDebug_msgs.Cell)
  return target;
}

size_t Cell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoncontrolDebug_msgs.Cell)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 idc = 1;
  if (this->idc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idc());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // float x = 3;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 4;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float xg = 5;
  if (this->xg() != 0) {
    total_size += 1 + 4;
  }

  // float yg = 6;
  if (this->yg() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cell::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoncontrolDebug_msgs.Cell)
  GOOGLE_DCHECK_NE(&from, this);
  const Cell* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cell>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoncontrolDebug_msgs.Cell)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoncontrolDebug_msgs.Cell)
    MergeFrom(*source);
  }
}

void Cell::MergeFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoncontrolDebug_msgs.Cell)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.idc() != 0) {
    set_idc(from.idc());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.xg() != 0) {
    set_xg(from.xg());
  }
  if (from.yg() != 0) {
    set_yg(from.yg());
  }
}

void Cell::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoncontrolDebug_msgs.Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cell::CopyFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoncontrolDebug_msgs.Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell::IsInitialized() const {
  return true;
}

void Cell::Swap(Cell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cell::InternalSwap(Cell* other) {
  using std::swap;
  swap(idc_, other->idc_);
  swap(type_, other->type_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(xg_, other->xg_);
  swap(yg_, other->yg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cell::GetMetadata() const {
  protobuf_LoncontrolDebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LoncontrolDebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Object::InitAsDefaultInstance() {
  ::LoncontrolDebug_msgs::_Object_default_instance_._instance.get_mutable()->cells_ = const_cast< ::LoncontrolDebug_msgs::Cell*>(
      ::LoncontrolDebug_msgs::Cell::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object::kIdFieldNumber;
const int Object::kXFieldNumber;
const int Object::kYFieldNumber;
const int Object::kVxrelFieldNumber;
const int Object::kVyrelFieldNumber;
const int Object::kVxabsFieldNumber;
const int Object::kVyabsFieldNumber;
const int Object::kAccelerationFieldNumber;
const int Object::kWidthFieldNumber;
const int Object::kLengthFieldNumber;
const int Object::kHeadingFieldNumber;
const int Object::kSpeedFieldNumber;
const int Object::kTypeFieldNumber;
const int Object::kCellsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object::Object()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_LoncontrolDebug_5fmsgs_2eproto::InitDefaultsObject();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoncontrolDebug_msgs.Object)
}
Object::Object(const Object& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cells()) {
    cells_ = new ::LoncontrolDebug_msgs::Cell(*from.cells_);
  } else {
    cells_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:LoncontrolDebug_msgs.Object)
}

void Object::SharedCtor() {
  ::memset(&cells_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&cells_)) + sizeof(type_));
  _cached_size_ = 0;
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:LoncontrolDebug_msgs.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  if (this != internal_default_instance()) delete cells_;
}

void Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  ::protobuf_LoncontrolDebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LoncontrolDebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Object& Object::default_instance() {
  ::protobuf_LoncontrolDebug_5fmsgs_2eproto::InitDefaultsObject();
  return *internal_default_instance();
}

Object* Object::New(::google::protobuf::Arena* arena) const {
  Object* n = new Object;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:LoncontrolDebug_msgs.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && cells_ != NULL) {
    delete cells_;
  }
  cells_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoncontrolDebug_msgs.Object)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vxrel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vxrel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vyrel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vyrel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vxabs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vxabs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vyabs = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vyabs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acceleration = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float width = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LoncontrolDebug_msgs.Cell cells = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cells()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoncontrolDebug_msgs.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoncontrolDebug_msgs.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoncontrolDebug_msgs.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // float x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // float y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // float vxrel = 4;
  if (this->vxrel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->vxrel(), output);
  }

  // float vyrel = 5;
  if (this->vyrel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->vyrel(), output);
  }

  // float vxabs = 6;
  if (this->vxabs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->vxabs(), output);
  }

  // float vyabs = 7;
  if (this->vyabs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->vyabs(), output);
  }

  // float acceleration = 8;
  if (this->acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->acceleration(), output);
  }

  // float width = 9;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->width(), output);
  }

  // float length = 10;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->length(), output);
  }

  // float heading = 11;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->heading(), output);
  }

  // float speed = 12;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->speed(), output);
  }

  // uint32 type = 13;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->type(), output);
  }

  // .LoncontrolDebug_msgs.Cell cells = 14;
  if (this->has_cells()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->cells_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LoncontrolDebug_msgs.Object)
}

::google::protobuf::uint8* Object::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LoncontrolDebug_msgs.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // float x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // float y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // float vxrel = 4;
  if (this->vxrel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->vxrel(), target);
  }

  // float vyrel = 5;
  if (this->vyrel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->vyrel(), target);
  }

  // float vxabs = 6;
  if (this->vxabs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->vxabs(), target);
  }

  // float vyabs = 7;
  if (this->vyabs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->vyabs(), target);
  }

  // float acceleration = 8;
  if (this->acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->acceleration(), target);
  }

  // float width = 9;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->width(), target);
  }

  // float length = 10;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->length(), target);
  }

  // float heading = 11;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->heading(), target);
  }

  // float speed = 12;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->speed(), target);
  }

  // uint32 type = 13;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->type(), target);
  }

  // .LoncontrolDebug_msgs.Cell cells = 14;
  if (this->has_cells()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, *this->cells_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoncontrolDebug_msgs.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoncontrolDebug_msgs.Object)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .LoncontrolDebug_msgs.Cell cells = 14;
  if (this->has_cells()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cells_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // float x = 2;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float vxrel = 4;
  if (this->vxrel() != 0) {
    total_size += 1 + 4;
  }

  // float vyrel = 5;
  if (this->vyrel() != 0) {
    total_size += 1 + 4;
  }

  // float vxabs = 6;
  if (this->vxabs() != 0) {
    total_size += 1 + 4;
  }

  // float vyabs = 7;
  if (this->vyabs() != 0) {
    total_size += 1 + 4;
  }

  // float acceleration = 8;
  if (this->acceleration() != 0) {
    total_size += 1 + 4;
  }

  // float width = 9;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // float length = 10;
  if (this->length() != 0) {
    total_size += 1 + 4;
  }

  // float heading = 11;
  if (this->heading() != 0) {
    total_size += 1 + 4;
  }

  // float speed = 12;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  // uint32 type = 13;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoncontrolDebug_msgs.Object)
  GOOGLE_DCHECK_NE(&from, this);
  const Object* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Object>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoncontrolDebug_msgs.Object)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoncontrolDebug_msgs.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoncontrolDebug_msgs.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cells()) {
    mutable_cells()->::LoncontrolDebug_msgs::Cell::MergeFrom(from.cells());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.vxrel() != 0) {
    set_vxrel(from.vxrel());
  }
  if (from.vyrel() != 0) {
    set_vyrel(from.vyrel());
  }
  if (from.vxabs() != 0) {
    set_vxabs(from.vxabs());
  }
  if (from.vyabs() != 0) {
    set_vyabs(from.vyabs());
  }
  if (from.acceleration() != 0) {
    set_acceleration(from.acceleration());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoncontrolDebug_msgs.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoncontrolDebug_msgs.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::Swap(Object* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object::InternalSwap(Object* other) {
  using std::swap;
  swap(cells_, other->cells_);
  swap(id_, other->id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(vxrel_, other->vxrel_);
  swap(vyrel_, other->vyrel_);
  swap(vxabs_, other->vxabs_);
  swap(vyabs_, other->vyabs_);
  swap(acceleration_, other->acceleration_);
  swap(width_, other->width_);
  swap(length_, other->length_);
  swap(heading_, other->heading_);
  swap(speed_, other->speed_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_LoncontrolDebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LoncontrolDebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Obstacles::InitAsDefaultInstance() {
  ::LoncontrolDebug_msgs::_Obstacles_default_instance_._instance.get_mutable()->objects_ = const_cast< ::LoncontrolDebug_msgs::Object*>(
      ::LoncontrolDebug_msgs::Object::internal_default_instance());
  ::LoncontrolDebug_msgs::_Obstacles_default_instance_._instance.get_mutable()->cells_ = const_cast< ::LoncontrolDebug_msgs::Cell*>(
      ::LoncontrolDebug_msgs::Cell::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Obstacles::kObjectsFieldNumber;
const int Obstacles::kCellsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Obstacles::Obstacles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_LoncontrolDebug_5fmsgs_2eproto::InitDefaultsObstacles();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoncontrolDebug_msgs.Obstacles)
}
Obstacles::Obstacles(const Obstacles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_objects()) {
    objects_ = new ::LoncontrolDebug_msgs::Object(*from.objects_);
  } else {
    objects_ = NULL;
  }
  if (from.has_cells()) {
    cells_ = new ::LoncontrolDebug_msgs::Cell(*from.cells_);
  } else {
    cells_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:LoncontrolDebug_msgs.Obstacles)
}

void Obstacles::SharedCtor() {
  ::memset(&objects_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cells_) -
      reinterpret_cast<char*>(&objects_)) + sizeof(cells_));
  _cached_size_ = 0;
}

Obstacles::~Obstacles() {
  // @@protoc_insertion_point(destructor:LoncontrolDebug_msgs.Obstacles)
  SharedDtor();
}

void Obstacles::SharedDtor() {
  if (this != internal_default_instance()) delete objects_;
  if (this != internal_default_instance()) delete cells_;
}

void Obstacles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Obstacles::descriptor() {
  ::protobuf_LoncontrolDebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LoncontrolDebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Obstacles& Obstacles::default_instance() {
  ::protobuf_LoncontrolDebug_5fmsgs_2eproto::InitDefaultsObstacles();
  return *internal_default_instance();
}

Obstacles* Obstacles::New(::google::protobuf::Arena* arena) const {
  Obstacles* n = new Obstacles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Obstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:LoncontrolDebug_msgs.Obstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && objects_ != NULL) {
    delete objects_;
  }
  objects_ = NULL;
  if (GetArenaNoVirtual() == NULL && cells_ != NULL) {
    delete cells_;
  }
  cells_ = NULL;
  _internal_metadata_.Clear();
}

bool Obstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoncontrolDebug_msgs.Obstacles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .LoncontrolDebug_msgs.Object objects = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LoncontrolDebug_msgs.Cell Cells = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cells()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoncontrolDebug_msgs.Obstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoncontrolDebug_msgs.Obstacles)
  return false;
#undef DO_
}

void Obstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoncontrolDebug_msgs.Obstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LoncontrolDebug_msgs.Object objects = 1;
  if (this->has_objects()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->objects_, output);
  }

  // .LoncontrolDebug_msgs.Cell Cells = 2;
  if (this->has_cells()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cells_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LoncontrolDebug_msgs.Obstacles)
}

::google::protobuf::uint8* Obstacles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LoncontrolDebug_msgs.Obstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LoncontrolDebug_msgs.Object objects = 1;
  if (this->has_objects()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->objects_, deterministic, target);
  }

  // .LoncontrolDebug_msgs.Cell Cells = 2;
  if (this->has_cells()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->cells_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoncontrolDebug_msgs.Obstacles)
  return target;
}

size_t Obstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoncontrolDebug_msgs.Obstacles)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .LoncontrolDebug_msgs.Object objects = 1;
  if (this->has_objects()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->objects_);
  }

  // .LoncontrolDebug_msgs.Cell Cells = 2;
  if (this->has_cells()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cells_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Obstacles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoncontrolDebug_msgs.Obstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Obstacles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoncontrolDebug_msgs.Obstacles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoncontrolDebug_msgs.Obstacles)
    MergeFrom(*source);
  }
}

void Obstacles::MergeFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoncontrolDebug_msgs.Obstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_objects()) {
    mutable_objects()->::LoncontrolDebug_msgs::Object::MergeFrom(from.objects());
  }
  if (from.has_cells()) {
    mutable_cells()->::LoncontrolDebug_msgs::Cell::MergeFrom(from.cells());
  }
}

void Obstacles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoncontrolDebug_msgs.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacles::CopyFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoncontrolDebug_msgs.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacles::IsInitialized() const {
  return true;
}

void Obstacles::Swap(Obstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Obstacles::InternalSwap(Obstacles* other) {
  using std::swap;
  swap(objects_, other->objects_);
  swap(cells_, other->cells_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Obstacles::GetMetadata() const {
  protobuf_LoncontrolDebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LoncontrolDebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoncontrolDebug::InitAsDefaultInstance() {
  ::LoncontrolDebug_msgs::_LoncontrolDebug_default_instance_._instance.get_mutable()->path_filter_obs_ = const_cast< ::LoncontrolDebug_msgs::Obstacles*>(
      ::LoncontrolDebug_msgs::Obstacles::internal_default_instance());
  ::LoncontrolDebug_msgs::_LoncontrolDebug_default_instance_._instance.get_mutable()->predict_carpos_filter_obs_ = const_cast< ::LoncontrolDebug_msgs::Obstacles*>(
      ::LoncontrolDebug_msgs::Obstacles::internal_default_instance());
  ::LoncontrolDebug_msgs::_LoncontrolDebug_default_instance_._instance.get_mutable()->dangerous_obs_ = const_cast< ::LoncontrolDebug_msgs::Obstacles*>(
      ::LoncontrolDebug_msgs::Obstacles::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoncontrolDebug::kPathFilterObsFieldNumber;
const int LoncontrolDebug::kPredictCarposFilterObsFieldNumber;
const int LoncontrolDebug::kDangerousObsFieldNumber;
const int LoncontrolDebug::kSbjSpeedFieldNumber;
const int LoncontrolDebug::kVirtualSpeedFieldNumber;
const int LoncontrolDebug::kTargetSpeedLagFieldNumber;
const int LoncontrolDebug::kPointZeroVelocityFieldNumber;
const int LoncontrolDebug::kSpeedPFieldNumber;
const int LoncontrolDebug::kSpeedIFieldNumber;
const int LoncontrolDebug::kTargetAcelFieldNumber;
const int LoncontrolDebug::kAcelRealRawFieldNumber;
const int LoncontrolDebug::kSbjAcelFieldNumber;
const int LoncontrolDebug::kAcelPFieldNumber;
const int LoncontrolDebug::kAcelIFieldNumber;
const int LoncontrolDebug::kTorqueFieldNumber;
const int LoncontrolDebug::kPressureFieldNumber;
const int LoncontrolDebug::kPointZeroLengthFieldNumber;
const int LoncontrolDebug::kPathLengthFieldNumber;
const int LoncontrolDebug::kPreviewDistanceFieldNumber;
const int LoncontrolDebug::kRealSteerAngleFieldNumber;
const int LoncontrolDebug::kLatErrorFieldNumber;
const int LoncontrolDebug::kPitchFieldNumber;
const int LoncontrolDebug::kPreviewAcelFieldNumber;
const int LoncontrolDebug::kAcelPitchOffsetFieldNumber;
const int LoncontrolDebug::kAcelDisOffsetFieldNumber;
const int LoncontrolDebug::kSpeedErrorFieldNumber;
const int LoncontrolDebug::kStationErrorFieldNumber;
const int LoncontrolDebug::kPosMatchedLengthFieldNumber;
const int LoncontrolDebug::kTimeMatchedLengthFieldNumber;
const int LoncontrolDebug::kAccuracyDisFieldNumber;
const int LoncontrolDebug::kEgoVelocityPredictionFieldNumber;
const int LoncontrolDebug::kEgoStationPredictionFieldNumber;
const int LoncontrolDebug::kTimePrevMatchedLengthFieldNumber;
const int LoncontrolDebug::kJerkFieldNumber;
const int LoncontrolDebug::kStationPFieldNumber;
const int LoncontrolDebug::kStationIFieldNumber;
const int LoncontrolDebug::kPreZeroVelocityFlagFieldNumber;
const int LoncontrolDebug::kEndLengthOpenloopFlagFieldNumber;
const int LoncontrolDebug::kPathDirectionFieldNumber;
const int LoncontrolDebug::kEmergencyObstacleFieldNumber;
const int LoncontrolDebug::kSlowAebModeFieldNumber;
const int LoncontrolDebug::kIsShiftPositionFieldNumber;
const int LoncontrolDebug::kRealShiftPositionFieldNumber;
const int LoncontrolDebug::kShiftPositionFieldNumber;
const int LoncontrolDebug::kCarFaultLevelFieldNumber;
const int LoncontrolDebug::kTemp1FieldNumber;
const int LoncontrolDebug::kTemp2FieldNumber;
const int LoncontrolDebug::kTemp3FieldNumber;
const int LoncontrolDebug::kEmergencyFlagFieldNumber;
const int LoncontrolDebug::kAccDisCarToObjFieldNumber;
const int LoncontrolDebug::kAccObjVelocityFieldNumber;
const int LoncontrolDebug::kAccDesiredDisFieldNumber;
const int LoncontrolDebug::kAccDeltDisFieldNumber;
const int LoncontrolDebug::kAccDeltVFieldNumber;
const int LoncontrolDebug::kAccDisErrorAccelFieldNumber;
const int LoncontrolDebug::kAccVErrorAccelFieldNumber;
const int LoncontrolDebug::kAccAccelFieldNumber;
const int LoncontrolDebug::kAccelFinallyFieldNumber;
const int LoncontrolDebug::kSafeDisBasePathFieldNumber;
const int LoncontrolDebug::kLocYawFieldNumber;
const int LoncontrolDebug::kThetaAbsFieldNumber;
const int LoncontrolDebug::kAObsFieldNumber;
const int LoncontrolDebug::kObjectSpeedFieldNumber;
const int LoncontrolDebug::kSSafeFieldNumber;
const int LoncontrolDebug::kPredTimeFieldNumber;
const int LoncontrolDebug::kNearestObsDisToCarFieldNumber;
const int LoncontrolDebug::kNeareatCellDisToCarFieldNumber;
const int LoncontrolDebug::kCollisionObjXFieldNumber;
const int LoncontrolDebug::kCollisionObjYFieldNumber;
const int LoncontrolDebug::kCollisionCellXFieldNumber;
const int LoncontrolDebug::kCollisionCellYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoncontrolDebug::LoncontrolDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_LoncontrolDebug_5fmsgs_2eproto::InitDefaultsLoncontrolDebug();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoncontrolDebug_msgs.LoncontrolDebug)
}
LoncontrolDebug::LoncontrolDebug(const LoncontrolDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_path_filter_obs()) {
    path_filter_obs_ = new ::LoncontrolDebug_msgs::Obstacles(*from.path_filter_obs_);
  } else {
    path_filter_obs_ = NULL;
  }
  if (from.has_predict_carpos_filter_obs()) {
    predict_carpos_filter_obs_ = new ::LoncontrolDebug_msgs::Obstacles(*from.predict_carpos_filter_obs_);
  } else {
    predict_carpos_filter_obs_ = NULL;
  }
  if (from.has_dangerous_obs()) {
    dangerous_obs_ = new ::LoncontrolDebug_msgs::Obstacles(*from.dangerous_obs_);
  } else {
    dangerous_obs_ = NULL;
  }
  ::memcpy(&sbj_speed_, &from.sbj_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&collision_cell_y_) -
    reinterpret_cast<char*>(&sbj_speed_)) + sizeof(collision_cell_y_));
  // @@protoc_insertion_point(copy_constructor:LoncontrolDebug_msgs.LoncontrolDebug)
}

void LoncontrolDebug::SharedCtor() {
  ::memset(&path_filter_obs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collision_cell_y_) -
      reinterpret_cast<char*>(&path_filter_obs_)) + sizeof(collision_cell_y_));
  _cached_size_ = 0;
}

LoncontrolDebug::~LoncontrolDebug() {
  // @@protoc_insertion_point(destructor:LoncontrolDebug_msgs.LoncontrolDebug)
  SharedDtor();
}

void LoncontrolDebug::SharedDtor() {
  if (this != internal_default_instance()) delete path_filter_obs_;
  if (this != internal_default_instance()) delete predict_carpos_filter_obs_;
  if (this != internal_default_instance()) delete dangerous_obs_;
}

void LoncontrolDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoncontrolDebug::descriptor() {
  ::protobuf_LoncontrolDebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LoncontrolDebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoncontrolDebug& LoncontrolDebug::default_instance() {
  ::protobuf_LoncontrolDebug_5fmsgs_2eproto::InitDefaultsLoncontrolDebug();
  return *internal_default_instance();
}

LoncontrolDebug* LoncontrolDebug::New(::google::protobuf::Arena* arena) const {
  LoncontrolDebug* n = new LoncontrolDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoncontrolDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:LoncontrolDebug_msgs.LoncontrolDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && path_filter_obs_ != NULL) {
    delete path_filter_obs_;
  }
  path_filter_obs_ = NULL;
  if (GetArenaNoVirtual() == NULL && predict_carpos_filter_obs_ != NULL) {
    delete predict_carpos_filter_obs_;
  }
  predict_carpos_filter_obs_ = NULL;
  if (GetArenaNoVirtual() == NULL && dangerous_obs_ != NULL) {
    delete dangerous_obs_;
  }
  dangerous_obs_ = NULL;
  ::memset(&sbj_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collision_cell_y_) -
      reinterpret_cast<char*>(&sbj_speed_)) + sizeof(collision_cell_y_));
  _internal_metadata_.Clear();
}

bool LoncontrolDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoncontrolDebug_msgs.LoncontrolDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .LoncontrolDebug_msgs.Obstacles path_filter_obs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path_filter_obs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LoncontrolDebug_msgs.Obstacles predict_carpos_filter_obs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_predict_carpos_filter_obs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LoncontrolDebug_msgs.Obstacles dangerous_obs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dangerous_obs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sbj_speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sbj_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double virtual_speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &virtual_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double target_speed_lag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &target_speed_lag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double point_zero_velocity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &point_zero_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed_p = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_p_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed_i = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double target_acel = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &target_acel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acel_real_raw = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acel_real_raw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sbj_acel = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sbj_acel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acel_p = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acel_p_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acel_i = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acel_i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double torque = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pressure = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double point_zero_length = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &point_zero_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double path_length = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double preview_distance = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preview_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double real_steer_angle = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &real_steer_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lat_error = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pitch = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double preview_acel = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preview_acel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acel_pitch_offset = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acel_pitch_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acel_dis_offset = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acel_dis_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed_error = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double station_error = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pos_matched_length = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pos_matched_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double time_matched_length = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_matched_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double accuracy_dis = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accuracy_dis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ego_velocity_prediction = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u /* 249 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ego_velocity_prediction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ego_station_prediction = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1u /* 257 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ego_station_prediction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double time_prev_matched_length = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 265 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_prev_matched_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double jerk = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 273 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double station_p = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 281 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_p_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double station_i = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 289 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pre_zero_velocity_flag = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_zero_velocity_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 end_length_openloop_flag = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_length_openloop_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 path_direction = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &path_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 emergency_obstacle = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emergency_obstacle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 slow_aeb_mode = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slow_aeb_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_shift_position = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_shift_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 real_shift_position = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &real_shift_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 shift_position = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shift_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 car_fault_level = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &car_fault_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double temp1 = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 369 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double temp2 = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 377 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temp2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double temp3 = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 385 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temp3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 emergency_flag = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 392 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emergency_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc_dis_car_to_obj = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 405 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_dis_car_to_obj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc_obj_velocity = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 413 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_obj_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc_desired_dis = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 421 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_desired_dis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc_delt_dis = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 429 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_delt_dis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc_delt_v = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 437 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_delt_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc_dis_error_accel = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 445 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_dis_error_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc_v_error_accel = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 453 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_v_error_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc_accel = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u /* 461 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float accel_finally = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 469 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accel_finally_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float safe_dis_base_path = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u /* 477 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &safe_dis_base_path_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float loc_yaw = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u /* 485 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &loc_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float theta_abs = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(237u /* 493 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_abs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float a_obs = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(245u /* 501 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_obs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float object_speed = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(253u /* 509 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s_safe = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(5u /* 517 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_safe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pred_time = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 525 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pred_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float nearest_obs_dis_to_car = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 533 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nearest_obs_dis_to_car_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double neareat_cell_dis_to_car_ = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 537 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &neareat_cell_dis_to_car__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float collision_obj_x = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 549 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collision_obj_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float collision_obj_y = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 557 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collision_obj_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float collision_cell_x = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 565 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collision_cell_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float collision_cell_y = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 573 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collision_cell_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoncontrolDebug_msgs.LoncontrolDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoncontrolDebug_msgs.LoncontrolDebug)
  return false;
#undef DO_
}

void LoncontrolDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoncontrolDebug_msgs.LoncontrolDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LoncontrolDebug_msgs.Obstacles path_filter_obs = 1;
  if (this->has_path_filter_obs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->path_filter_obs_, output);
  }

  // .LoncontrolDebug_msgs.Obstacles predict_carpos_filter_obs = 2;
  if (this->has_predict_carpos_filter_obs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->predict_carpos_filter_obs_, output);
  }

  // .LoncontrolDebug_msgs.Obstacles dangerous_obs = 3;
  if (this->has_dangerous_obs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->dangerous_obs_, output);
  }

  // double sbj_speed = 4;
  if (this->sbj_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sbj_speed(), output);
  }

  // double virtual_speed = 5;
  if (this->virtual_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->virtual_speed(), output);
  }

  // double target_speed_lag = 6;
  if (this->target_speed_lag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->target_speed_lag(), output);
  }

  // double point_zero_velocity = 7;
  if (this->point_zero_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->point_zero_velocity(), output);
  }

  // double speed_p = 8;
  if (this->speed_p() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->speed_p(), output);
  }

  // double speed_i = 9;
  if (this->speed_i() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->speed_i(), output);
  }

  // double target_acel = 10;
  if (this->target_acel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->target_acel(), output);
  }

  // double acel_real_raw = 11;
  if (this->acel_real_raw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->acel_real_raw(), output);
  }

  // double sbj_acel = 12;
  if (this->sbj_acel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->sbj_acel(), output);
  }

  // double acel_p = 13;
  if (this->acel_p() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->acel_p(), output);
  }

  // double acel_i = 14;
  if (this->acel_i() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->acel_i(), output);
  }

  // double torque = 15;
  if (this->torque() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->torque(), output);
  }

  // double pressure = 16;
  if (this->pressure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->pressure(), output);
  }

  // double point_zero_length = 17;
  if (this->point_zero_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->point_zero_length(), output);
  }

  // double path_length = 18;
  if (this->path_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->path_length(), output);
  }

  // double preview_distance = 19;
  if (this->preview_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->preview_distance(), output);
  }

  // double real_steer_angle = 20;
  if (this->real_steer_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->real_steer_angle(), output);
  }

  // double lat_error = 21;
  if (this->lat_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->lat_error(), output);
  }

  // double pitch = 22;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->pitch(), output);
  }

  // double preview_acel = 23;
  if (this->preview_acel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->preview_acel(), output);
  }

  // double acel_pitch_offset = 24;
  if (this->acel_pitch_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->acel_pitch_offset(), output);
  }

  // double acel_dis_offset = 25;
  if (this->acel_dis_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->acel_dis_offset(), output);
  }

  // double speed_error = 26;
  if (this->speed_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->speed_error(), output);
  }

  // double station_error = 27;
  if (this->station_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->station_error(), output);
  }

  // double pos_matched_length = 28;
  if (this->pos_matched_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->pos_matched_length(), output);
  }

  // double time_matched_length = 29;
  if (this->time_matched_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->time_matched_length(), output);
  }

  // double accuracy_dis = 30;
  if (this->accuracy_dis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->accuracy_dis(), output);
  }

  // double ego_velocity_prediction = 31;
  if (this->ego_velocity_prediction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->ego_velocity_prediction(), output);
  }

  // double ego_station_prediction = 32;
  if (this->ego_station_prediction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->ego_station_prediction(), output);
  }

  // double time_prev_matched_length = 33;
  if (this->time_prev_matched_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->time_prev_matched_length(), output);
  }

  // double jerk = 34;
  if (this->jerk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->jerk(), output);
  }

  // double station_p = 35;
  if (this->station_p() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->station_p(), output);
  }

  // double station_i = 36;
  if (this->station_i() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->station_i(), output);
  }

  // int32 pre_zero_velocity_flag = 37;
  if (this->pre_zero_velocity_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->pre_zero_velocity_flag(), output);
  }

  // int32 end_length_openloop_flag = 38;
  if (this->end_length_openloop_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->end_length_openloop_flag(), output);
  }

  // int32 path_direction = 39;
  if (this->path_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->path_direction(), output);
  }

  // int32 emergency_obstacle = 40;
  if (this->emergency_obstacle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->emergency_obstacle(), output);
  }

  // int32 slow_aeb_mode = 41;
  if (this->slow_aeb_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->slow_aeb_mode(), output);
  }

  // int32 is_shift_position = 42;
  if (this->is_shift_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->is_shift_position(), output);
  }

  // int32 real_shift_position = 43;
  if (this->real_shift_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->real_shift_position(), output);
  }

  // int32 shift_position = 44;
  if (this->shift_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->shift_position(), output);
  }

  // int32 car_fault_level = 45;
  if (this->car_fault_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->car_fault_level(), output);
  }

  // double temp1 = 46;
  if (this->temp1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(46, this->temp1(), output);
  }

  // double temp2 = 47;
  if (this->temp2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(47, this->temp2(), output);
  }

  // double temp3 = 48;
  if (this->temp3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(48, this->temp3(), output);
  }

  // int32 emergency_flag = 49;
  if (this->emergency_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->emergency_flag(), output);
  }

  // float acc_dis_car_to_obj = 50;
  if (this->acc_dis_car_to_obj() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->acc_dis_car_to_obj(), output);
  }

  // float acc_obj_velocity = 51;
  if (this->acc_obj_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(51, this->acc_obj_velocity(), output);
  }

  // float acc_desired_dis = 52;
  if (this->acc_desired_dis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(52, this->acc_desired_dis(), output);
  }

  // float acc_delt_dis = 53;
  if (this->acc_delt_dis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(53, this->acc_delt_dis(), output);
  }

  // float acc_delt_v = 54;
  if (this->acc_delt_v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(54, this->acc_delt_v(), output);
  }

  // float acc_dis_error_accel = 55;
  if (this->acc_dis_error_accel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(55, this->acc_dis_error_accel(), output);
  }

  // float acc_v_error_accel = 56;
  if (this->acc_v_error_accel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(56, this->acc_v_error_accel(), output);
  }

  // float acc_accel = 57;
  if (this->acc_accel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(57, this->acc_accel(), output);
  }

  // float accel_finally = 58;
  if (this->accel_finally() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(58, this->accel_finally(), output);
  }

  // float safe_dis_base_path = 59;
  if (this->safe_dis_base_path() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(59, this->safe_dis_base_path(), output);
  }

  // float loc_yaw = 60;
  if (this->loc_yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(60, this->loc_yaw(), output);
  }

  // float theta_abs = 61;
  if (this->theta_abs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(61, this->theta_abs(), output);
  }

  // float a_obs = 62;
  if (this->a_obs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(62, this->a_obs(), output);
  }

  // float object_speed = 63;
  if (this->object_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(63, this->object_speed(), output);
  }

  // float s_safe = 64;
  if (this->s_safe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(64, this->s_safe(), output);
  }

  // float pred_time = 65;
  if (this->pred_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(65, this->pred_time(), output);
  }

  // float nearest_obs_dis_to_car = 66;
  if (this->nearest_obs_dis_to_car() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(66, this->nearest_obs_dis_to_car(), output);
  }

  // double neareat_cell_dis_to_car_ = 67;
  if (this->neareat_cell_dis_to_car_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(67, this->neareat_cell_dis_to_car_(), output);
  }

  // float collision_obj_x = 68;
  if (this->collision_obj_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(68, this->collision_obj_x(), output);
  }

  // float collision_obj_y = 69;
  if (this->collision_obj_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(69, this->collision_obj_y(), output);
  }

  // float collision_cell_x = 70;
  if (this->collision_cell_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(70, this->collision_cell_x(), output);
  }

  // float collision_cell_y = 71;
  if (this->collision_cell_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(71, this->collision_cell_y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LoncontrolDebug_msgs.LoncontrolDebug)
}

::google::protobuf::uint8* LoncontrolDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LoncontrolDebug_msgs.LoncontrolDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LoncontrolDebug_msgs.Obstacles path_filter_obs = 1;
  if (this->has_path_filter_obs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->path_filter_obs_, deterministic, target);
  }

  // .LoncontrolDebug_msgs.Obstacles predict_carpos_filter_obs = 2;
  if (this->has_predict_carpos_filter_obs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->predict_carpos_filter_obs_, deterministic, target);
  }

  // .LoncontrolDebug_msgs.Obstacles dangerous_obs = 3;
  if (this->has_dangerous_obs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->dangerous_obs_, deterministic, target);
  }

  // double sbj_speed = 4;
  if (this->sbj_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sbj_speed(), target);
  }

  // double virtual_speed = 5;
  if (this->virtual_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->virtual_speed(), target);
  }

  // double target_speed_lag = 6;
  if (this->target_speed_lag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->target_speed_lag(), target);
  }

  // double point_zero_velocity = 7;
  if (this->point_zero_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->point_zero_velocity(), target);
  }

  // double speed_p = 8;
  if (this->speed_p() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->speed_p(), target);
  }

  // double speed_i = 9;
  if (this->speed_i() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->speed_i(), target);
  }

  // double target_acel = 10;
  if (this->target_acel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->target_acel(), target);
  }

  // double acel_real_raw = 11;
  if (this->acel_real_raw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->acel_real_raw(), target);
  }

  // double sbj_acel = 12;
  if (this->sbj_acel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->sbj_acel(), target);
  }

  // double acel_p = 13;
  if (this->acel_p() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->acel_p(), target);
  }

  // double acel_i = 14;
  if (this->acel_i() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->acel_i(), target);
  }

  // double torque = 15;
  if (this->torque() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->torque(), target);
  }

  // double pressure = 16;
  if (this->pressure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->pressure(), target);
  }

  // double point_zero_length = 17;
  if (this->point_zero_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->point_zero_length(), target);
  }

  // double path_length = 18;
  if (this->path_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->path_length(), target);
  }

  // double preview_distance = 19;
  if (this->preview_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->preview_distance(), target);
  }

  // double real_steer_angle = 20;
  if (this->real_steer_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->real_steer_angle(), target);
  }

  // double lat_error = 21;
  if (this->lat_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->lat_error(), target);
  }

  // double pitch = 22;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->pitch(), target);
  }

  // double preview_acel = 23;
  if (this->preview_acel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->preview_acel(), target);
  }

  // double acel_pitch_offset = 24;
  if (this->acel_pitch_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->acel_pitch_offset(), target);
  }

  // double acel_dis_offset = 25;
  if (this->acel_dis_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->acel_dis_offset(), target);
  }

  // double speed_error = 26;
  if (this->speed_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->speed_error(), target);
  }

  // double station_error = 27;
  if (this->station_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->station_error(), target);
  }

  // double pos_matched_length = 28;
  if (this->pos_matched_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->pos_matched_length(), target);
  }

  // double time_matched_length = 29;
  if (this->time_matched_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->time_matched_length(), target);
  }

  // double accuracy_dis = 30;
  if (this->accuracy_dis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->accuracy_dis(), target);
  }

  // double ego_velocity_prediction = 31;
  if (this->ego_velocity_prediction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->ego_velocity_prediction(), target);
  }

  // double ego_station_prediction = 32;
  if (this->ego_station_prediction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->ego_station_prediction(), target);
  }

  // double time_prev_matched_length = 33;
  if (this->time_prev_matched_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->time_prev_matched_length(), target);
  }

  // double jerk = 34;
  if (this->jerk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->jerk(), target);
  }

  // double station_p = 35;
  if (this->station_p() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->station_p(), target);
  }

  // double station_i = 36;
  if (this->station_i() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->station_i(), target);
  }

  // int32 pre_zero_velocity_flag = 37;
  if (this->pre_zero_velocity_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->pre_zero_velocity_flag(), target);
  }

  // int32 end_length_openloop_flag = 38;
  if (this->end_length_openloop_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->end_length_openloop_flag(), target);
  }

  // int32 path_direction = 39;
  if (this->path_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->path_direction(), target);
  }

  // int32 emergency_obstacle = 40;
  if (this->emergency_obstacle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->emergency_obstacle(), target);
  }

  // int32 slow_aeb_mode = 41;
  if (this->slow_aeb_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->slow_aeb_mode(), target);
  }

  // int32 is_shift_position = 42;
  if (this->is_shift_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->is_shift_position(), target);
  }

  // int32 real_shift_position = 43;
  if (this->real_shift_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->real_shift_position(), target);
  }

  // int32 shift_position = 44;
  if (this->shift_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->shift_position(), target);
  }

  // int32 car_fault_level = 45;
  if (this->car_fault_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->car_fault_level(), target);
  }

  // double temp1 = 46;
  if (this->temp1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(46, this->temp1(), target);
  }

  // double temp2 = 47;
  if (this->temp2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(47, this->temp2(), target);
  }

  // double temp3 = 48;
  if (this->temp3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(48, this->temp3(), target);
  }

  // int32 emergency_flag = 49;
  if (this->emergency_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->emergency_flag(), target);
  }

  // float acc_dis_car_to_obj = 50;
  if (this->acc_dis_car_to_obj() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(50, this->acc_dis_car_to_obj(), target);
  }

  // float acc_obj_velocity = 51;
  if (this->acc_obj_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(51, this->acc_obj_velocity(), target);
  }

  // float acc_desired_dis = 52;
  if (this->acc_desired_dis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(52, this->acc_desired_dis(), target);
  }

  // float acc_delt_dis = 53;
  if (this->acc_delt_dis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(53, this->acc_delt_dis(), target);
  }

  // float acc_delt_v = 54;
  if (this->acc_delt_v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(54, this->acc_delt_v(), target);
  }

  // float acc_dis_error_accel = 55;
  if (this->acc_dis_error_accel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(55, this->acc_dis_error_accel(), target);
  }

  // float acc_v_error_accel = 56;
  if (this->acc_v_error_accel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(56, this->acc_v_error_accel(), target);
  }

  // float acc_accel = 57;
  if (this->acc_accel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(57, this->acc_accel(), target);
  }

  // float accel_finally = 58;
  if (this->accel_finally() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(58, this->accel_finally(), target);
  }

  // float safe_dis_base_path = 59;
  if (this->safe_dis_base_path() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(59, this->safe_dis_base_path(), target);
  }

  // float loc_yaw = 60;
  if (this->loc_yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(60, this->loc_yaw(), target);
  }

  // float theta_abs = 61;
  if (this->theta_abs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(61, this->theta_abs(), target);
  }

  // float a_obs = 62;
  if (this->a_obs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(62, this->a_obs(), target);
  }

  // float object_speed = 63;
  if (this->object_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(63, this->object_speed(), target);
  }

  // float s_safe = 64;
  if (this->s_safe() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(64, this->s_safe(), target);
  }

  // float pred_time = 65;
  if (this->pred_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(65, this->pred_time(), target);
  }

  // float nearest_obs_dis_to_car = 66;
  if (this->nearest_obs_dis_to_car() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(66, this->nearest_obs_dis_to_car(), target);
  }

  // double neareat_cell_dis_to_car_ = 67;
  if (this->neareat_cell_dis_to_car_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(67, this->neareat_cell_dis_to_car_(), target);
  }

  // float collision_obj_x = 68;
  if (this->collision_obj_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(68, this->collision_obj_x(), target);
  }

  // float collision_obj_y = 69;
  if (this->collision_obj_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(69, this->collision_obj_y(), target);
  }

  // float collision_cell_x = 70;
  if (this->collision_cell_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(70, this->collision_cell_x(), target);
  }

  // float collision_cell_y = 71;
  if (this->collision_cell_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(71, this->collision_cell_y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoncontrolDebug_msgs.LoncontrolDebug)
  return target;
}

size_t LoncontrolDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoncontrolDebug_msgs.LoncontrolDebug)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .LoncontrolDebug_msgs.Obstacles path_filter_obs = 1;
  if (this->has_path_filter_obs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->path_filter_obs_);
  }

  // .LoncontrolDebug_msgs.Obstacles predict_carpos_filter_obs = 2;
  if (this->has_predict_carpos_filter_obs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->predict_carpos_filter_obs_);
  }

  // .LoncontrolDebug_msgs.Obstacles dangerous_obs = 3;
  if (this->has_dangerous_obs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dangerous_obs_);
  }

  // double sbj_speed = 4;
  if (this->sbj_speed() != 0) {
    total_size += 1 + 8;
  }

  // double virtual_speed = 5;
  if (this->virtual_speed() != 0) {
    total_size += 1 + 8;
  }

  // double target_speed_lag = 6;
  if (this->target_speed_lag() != 0) {
    total_size += 1 + 8;
  }

  // double point_zero_velocity = 7;
  if (this->point_zero_velocity() != 0) {
    total_size += 1 + 8;
  }

  // double speed_p = 8;
  if (this->speed_p() != 0) {
    total_size += 1 + 8;
  }

  // double speed_i = 9;
  if (this->speed_i() != 0) {
    total_size += 1 + 8;
  }

  // double target_acel = 10;
  if (this->target_acel() != 0) {
    total_size += 1 + 8;
  }

  // double acel_real_raw = 11;
  if (this->acel_real_raw() != 0) {
    total_size += 1 + 8;
  }

  // double sbj_acel = 12;
  if (this->sbj_acel() != 0) {
    total_size += 1 + 8;
  }

  // double acel_p = 13;
  if (this->acel_p() != 0) {
    total_size += 1 + 8;
  }

  // double acel_i = 14;
  if (this->acel_i() != 0) {
    total_size += 1 + 8;
  }

  // double torque = 15;
  if (this->torque() != 0) {
    total_size += 1 + 8;
  }

  // double pressure = 16;
  if (this->pressure() != 0) {
    total_size += 2 + 8;
  }

  // double point_zero_length = 17;
  if (this->point_zero_length() != 0) {
    total_size += 2 + 8;
  }

  // double path_length = 18;
  if (this->path_length() != 0) {
    total_size += 2 + 8;
  }

  // double preview_distance = 19;
  if (this->preview_distance() != 0) {
    total_size += 2 + 8;
  }

  // double real_steer_angle = 20;
  if (this->real_steer_angle() != 0) {
    total_size += 2 + 8;
  }

  // double lat_error = 21;
  if (this->lat_error() != 0) {
    total_size += 2 + 8;
  }

  // double pitch = 22;
  if (this->pitch() != 0) {
    total_size += 2 + 8;
  }

  // double preview_acel = 23;
  if (this->preview_acel() != 0) {
    total_size += 2 + 8;
  }

  // double acel_pitch_offset = 24;
  if (this->acel_pitch_offset() != 0) {
    total_size += 2 + 8;
  }

  // double acel_dis_offset = 25;
  if (this->acel_dis_offset() != 0) {
    total_size += 2 + 8;
  }

  // double speed_error = 26;
  if (this->speed_error() != 0) {
    total_size += 2 + 8;
  }

  // double station_error = 27;
  if (this->station_error() != 0) {
    total_size += 2 + 8;
  }

  // double pos_matched_length = 28;
  if (this->pos_matched_length() != 0) {
    total_size += 2 + 8;
  }

  // double time_matched_length = 29;
  if (this->time_matched_length() != 0) {
    total_size += 2 + 8;
  }

  // double accuracy_dis = 30;
  if (this->accuracy_dis() != 0) {
    total_size += 2 + 8;
  }

  // double ego_velocity_prediction = 31;
  if (this->ego_velocity_prediction() != 0) {
    total_size += 2 + 8;
  }

  // double ego_station_prediction = 32;
  if (this->ego_station_prediction() != 0) {
    total_size += 2 + 8;
  }

  // double time_prev_matched_length = 33;
  if (this->time_prev_matched_length() != 0) {
    total_size += 2 + 8;
  }

  // double jerk = 34;
  if (this->jerk() != 0) {
    total_size += 2 + 8;
  }

  // double station_p = 35;
  if (this->station_p() != 0) {
    total_size += 2 + 8;
  }

  // double station_i = 36;
  if (this->station_i() != 0) {
    total_size += 2 + 8;
  }

  // int32 pre_zero_velocity_flag = 37;
  if (this->pre_zero_velocity_flag() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pre_zero_velocity_flag());
  }

  // int32 end_length_openloop_flag = 38;
  if (this->end_length_openloop_flag() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end_length_openloop_flag());
  }

  // int32 path_direction = 39;
  if (this->path_direction() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->path_direction());
  }

  // int32 emergency_obstacle = 40;
  if (this->emergency_obstacle() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->emergency_obstacle());
  }

  // int32 slow_aeb_mode = 41;
  if (this->slow_aeb_mode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slow_aeb_mode());
  }

  // int32 is_shift_position = 42;
  if (this->is_shift_position() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_shift_position());
  }

  // int32 real_shift_position = 43;
  if (this->real_shift_position() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->real_shift_position());
  }

  // int32 shift_position = 44;
  if (this->shift_position() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shift_position());
  }

  // double temp1 = 46;
  if (this->temp1() != 0) {
    total_size += 2 + 8;
  }

  // double temp2 = 47;
  if (this->temp2() != 0) {
    total_size += 2 + 8;
  }

  // int32 car_fault_level = 45;
  if (this->car_fault_level() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->car_fault_level());
  }

  // int32 emergency_flag = 49;
  if (this->emergency_flag() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->emergency_flag());
  }

  // double temp3 = 48;
  if (this->temp3() != 0) {
    total_size += 2 + 8;
  }

  // float acc_dis_car_to_obj = 50;
  if (this->acc_dis_car_to_obj() != 0) {
    total_size += 2 + 4;
  }

  // float acc_obj_velocity = 51;
  if (this->acc_obj_velocity() != 0) {
    total_size += 2 + 4;
  }

  // float acc_desired_dis = 52;
  if (this->acc_desired_dis() != 0) {
    total_size += 2 + 4;
  }

  // float acc_delt_dis = 53;
  if (this->acc_delt_dis() != 0) {
    total_size += 2 + 4;
  }

  // float acc_delt_v = 54;
  if (this->acc_delt_v() != 0) {
    total_size += 2 + 4;
  }

  // float acc_dis_error_accel = 55;
  if (this->acc_dis_error_accel() != 0) {
    total_size += 2 + 4;
  }

  // float acc_v_error_accel = 56;
  if (this->acc_v_error_accel() != 0) {
    total_size += 2 + 4;
  }

  // float acc_accel = 57;
  if (this->acc_accel() != 0) {
    total_size += 2 + 4;
  }

  // float accel_finally = 58;
  if (this->accel_finally() != 0) {
    total_size += 2 + 4;
  }

  // float safe_dis_base_path = 59;
  if (this->safe_dis_base_path() != 0) {
    total_size += 2 + 4;
  }

  // float loc_yaw = 60;
  if (this->loc_yaw() != 0) {
    total_size += 2 + 4;
  }

  // float theta_abs = 61;
  if (this->theta_abs() != 0) {
    total_size += 2 + 4;
  }

  // float a_obs = 62;
  if (this->a_obs() != 0) {
    total_size += 2 + 4;
  }

  // float object_speed = 63;
  if (this->object_speed() != 0) {
    total_size += 2 + 4;
  }

  // float s_safe = 64;
  if (this->s_safe() != 0) {
    total_size += 2 + 4;
  }

  // float pred_time = 65;
  if (this->pred_time() != 0) {
    total_size += 2 + 4;
  }

  // double neareat_cell_dis_to_car_ = 67;
  if (this->neareat_cell_dis_to_car_() != 0) {
    total_size += 2 + 8;
  }

  // float nearest_obs_dis_to_car = 66;
  if (this->nearest_obs_dis_to_car() != 0) {
    total_size += 2 + 4;
  }

  // float collision_obj_x = 68;
  if (this->collision_obj_x() != 0) {
    total_size += 2 + 4;
  }

  // float collision_obj_y = 69;
  if (this->collision_obj_y() != 0) {
    total_size += 2 + 4;
  }

  // float collision_cell_x = 70;
  if (this->collision_cell_x() != 0) {
    total_size += 2 + 4;
  }

  // float collision_cell_y = 71;
  if (this->collision_cell_y() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoncontrolDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoncontrolDebug_msgs.LoncontrolDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const LoncontrolDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoncontrolDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoncontrolDebug_msgs.LoncontrolDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoncontrolDebug_msgs.LoncontrolDebug)
    MergeFrom(*source);
  }
}

void LoncontrolDebug::MergeFrom(const LoncontrolDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoncontrolDebug_msgs.LoncontrolDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_path_filter_obs()) {
    mutable_path_filter_obs()->::LoncontrolDebug_msgs::Obstacles::MergeFrom(from.path_filter_obs());
  }
  if (from.has_predict_carpos_filter_obs()) {
    mutable_predict_carpos_filter_obs()->::LoncontrolDebug_msgs::Obstacles::MergeFrom(from.predict_carpos_filter_obs());
  }
  if (from.has_dangerous_obs()) {
    mutable_dangerous_obs()->::LoncontrolDebug_msgs::Obstacles::MergeFrom(from.dangerous_obs());
  }
  if (from.sbj_speed() != 0) {
    set_sbj_speed(from.sbj_speed());
  }
  if (from.virtual_speed() != 0) {
    set_virtual_speed(from.virtual_speed());
  }
  if (from.target_speed_lag() != 0) {
    set_target_speed_lag(from.target_speed_lag());
  }
  if (from.point_zero_velocity() != 0) {
    set_point_zero_velocity(from.point_zero_velocity());
  }
  if (from.speed_p() != 0) {
    set_speed_p(from.speed_p());
  }
  if (from.speed_i() != 0) {
    set_speed_i(from.speed_i());
  }
  if (from.target_acel() != 0) {
    set_target_acel(from.target_acel());
  }
  if (from.acel_real_raw() != 0) {
    set_acel_real_raw(from.acel_real_raw());
  }
  if (from.sbj_acel() != 0) {
    set_sbj_acel(from.sbj_acel());
  }
  if (from.acel_p() != 0) {
    set_acel_p(from.acel_p());
  }
  if (from.acel_i() != 0) {
    set_acel_i(from.acel_i());
  }
  if (from.torque() != 0) {
    set_torque(from.torque());
  }
  if (from.pressure() != 0) {
    set_pressure(from.pressure());
  }
  if (from.point_zero_length() != 0) {
    set_point_zero_length(from.point_zero_length());
  }
  if (from.path_length() != 0) {
    set_path_length(from.path_length());
  }
  if (from.preview_distance() != 0) {
    set_preview_distance(from.preview_distance());
  }
  if (from.real_steer_angle() != 0) {
    set_real_steer_angle(from.real_steer_angle());
  }
  if (from.lat_error() != 0) {
    set_lat_error(from.lat_error());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.preview_acel() != 0) {
    set_preview_acel(from.preview_acel());
  }
  if (from.acel_pitch_offset() != 0) {
    set_acel_pitch_offset(from.acel_pitch_offset());
  }
  if (from.acel_dis_offset() != 0) {
    set_acel_dis_offset(from.acel_dis_offset());
  }
  if (from.speed_error() != 0) {
    set_speed_error(from.speed_error());
  }
  if (from.station_error() != 0) {
    set_station_error(from.station_error());
  }
  if (from.pos_matched_length() != 0) {
    set_pos_matched_length(from.pos_matched_length());
  }
  if (from.time_matched_length() != 0) {
    set_time_matched_length(from.time_matched_length());
  }
  if (from.accuracy_dis() != 0) {
    set_accuracy_dis(from.accuracy_dis());
  }
  if (from.ego_velocity_prediction() != 0) {
    set_ego_velocity_prediction(from.ego_velocity_prediction());
  }
  if (from.ego_station_prediction() != 0) {
    set_ego_station_prediction(from.ego_station_prediction());
  }
  if (from.time_prev_matched_length() != 0) {
    set_time_prev_matched_length(from.time_prev_matched_length());
  }
  if (from.jerk() != 0) {
    set_jerk(from.jerk());
  }
  if (from.station_p() != 0) {
    set_station_p(from.station_p());
  }
  if (from.station_i() != 0) {
    set_station_i(from.station_i());
  }
  if (from.pre_zero_velocity_flag() != 0) {
    set_pre_zero_velocity_flag(from.pre_zero_velocity_flag());
  }
  if (from.end_length_openloop_flag() != 0) {
    set_end_length_openloop_flag(from.end_length_openloop_flag());
  }
  if (from.path_direction() != 0) {
    set_path_direction(from.path_direction());
  }
  if (from.emergency_obstacle() != 0) {
    set_emergency_obstacle(from.emergency_obstacle());
  }
  if (from.slow_aeb_mode() != 0) {
    set_slow_aeb_mode(from.slow_aeb_mode());
  }
  if (from.is_shift_position() != 0) {
    set_is_shift_position(from.is_shift_position());
  }
  if (from.real_shift_position() != 0) {
    set_real_shift_position(from.real_shift_position());
  }
  if (from.shift_position() != 0) {
    set_shift_position(from.shift_position());
  }
  if (from.temp1() != 0) {
    set_temp1(from.temp1());
  }
  if (from.temp2() != 0) {
    set_temp2(from.temp2());
  }
  if (from.car_fault_level() != 0) {
    set_car_fault_level(from.car_fault_level());
  }
  if (from.emergency_flag() != 0) {
    set_emergency_flag(from.emergency_flag());
  }
  if (from.temp3() != 0) {
    set_temp3(from.temp3());
  }
  if (from.acc_dis_car_to_obj() != 0) {
    set_acc_dis_car_to_obj(from.acc_dis_car_to_obj());
  }
  if (from.acc_obj_velocity() != 0) {
    set_acc_obj_velocity(from.acc_obj_velocity());
  }
  if (from.acc_desired_dis() != 0) {
    set_acc_desired_dis(from.acc_desired_dis());
  }
  if (from.acc_delt_dis() != 0) {
    set_acc_delt_dis(from.acc_delt_dis());
  }
  if (from.acc_delt_v() != 0) {
    set_acc_delt_v(from.acc_delt_v());
  }
  if (from.acc_dis_error_accel() != 0) {
    set_acc_dis_error_accel(from.acc_dis_error_accel());
  }
  if (from.acc_v_error_accel() != 0) {
    set_acc_v_error_accel(from.acc_v_error_accel());
  }
  if (from.acc_accel() != 0) {
    set_acc_accel(from.acc_accel());
  }
  if (from.accel_finally() != 0) {
    set_accel_finally(from.accel_finally());
  }
  if (from.safe_dis_base_path() != 0) {
    set_safe_dis_base_path(from.safe_dis_base_path());
  }
  if (from.loc_yaw() != 0) {
    set_loc_yaw(from.loc_yaw());
  }
  if (from.theta_abs() != 0) {
    set_theta_abs(from.theta_abs());
  }
  if (from.a_obs() != 0) {
    set_a_obs(from.a_obs());
  }
  if (from.object_speed() != 0) {
    set_object_speed(from.object_speed());
  }
  if (from.s_safe() != 0) {
    set_s_safe(from.s_safe());
  }
  if (from.pred_time() != 0) {
    set_pred_time(from.pred_time());
  }
  if (from.neareat_cell_dis_to_car_() != 0) {
    set_neareat_cell_dis_to_car_(from.neareat_cell_dis_to_car_());
  }
  if (from.nearest_obs_dis_to_car() != 0) {
    set_nearest_obs_dis_to_car(from.nearest_obs_dis_to_car());
  }
  if (from.collision_obj_x() != 0) {
    set_collision_obj_x(from.collision_obj_x());
  }
  if (from.collision_obj_y() != 0) {
    set_collision_obj_y(from.collision_obj_y());
  }
  if (from.collision_cell_x() != 0) {
    set_collision_cell_x(from.collision_cell_x());
  }
  if (from.collision_cell_y() != 0) {
    set_collision_cell_y(from.collision_cell_y());
  }
}

void LoncontrolDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoncontrolDebug_msgs.LoncontrolDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoncontrolDebug::CopyFrom(const LoncontrolDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoncontrolDebug_msgs.LoncontrolDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoncontrolDebug::IsInitialized() const {
  return true;
}

void LoncontrolDebug::Swap(LoncontrolDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoncontrolDebug::InternalSwap(LoncontrolDebug* other) {
  using std::swap;
  swap(path_filter_obs_, other->path_filter_obs_);
  swap(predict_carpos_filter_obs_, other->predict_carpos_filter_obs_);
  swap(dangerous_obs_, other->dangerous_obs_);
  swap(sbj_speed_, other->sbj_speed_);
  swap(virtual_speed_, other->virtual_speed_);
  swap(target_speed_lag_, other->target_speed_lag_);
  swap(point_zero_velocity_, other->point_zero_velocity_);
  swap(speed_p_, other->speed_p_);
  swap(speed_i_, other->speed_i_);
  swap(target_acel_, other->target_acel_);
  swap(acel_real_raw_, other->acel_real_raw_);
  swap(sbj_acel_, other->sbj_acel_);
  swap(acel_p_, other->acel_p_);
  swap(acel_i_, other->acel_i_);
  swap(torque_, other->torque_);
  swap(pressure_, other->pressure_);
  swap(point_zero_length_, other->point_zero_length_);
  swap(path_length_, other->path_length_);
  swap(preview_distance_, other->preview_distance_);
  swap(real_steer_angle_, other->real_steer_angle_);
  swap(lat_error_, other->lat_error_);
  swap(pitch_, other->pitch_);
  swap(preview_acel_, other->preview_acel_);
  swap(acel_pitch_offset_, other->acel_pitch_offset_);
  swap(acel_dis_offset_, other->acel_dis_offset_);
  swap(speed_error_, other->speed_error_);
  swap(station_error_, other->station_error_);
  swap(pos_matched_length_, other->pos_matched_length_);
  swap(time_matched_length_, other->time_matched_length_);
  swap(accuracy_dis_, other->accuracy_dis_);
  swap(ego_velocity_prediction_, other->ego_velocity_prediction_);
  swap(ego_station_prediction_, other->ego_station_prediction_);
  swap(time_prev_matched_length_, other->time_prev_matched_length_);
  swap(jerk_, other->jerk_);
  swap(station_p_, other->station_p_);
  swap(station_i_, other->station_i_);
  swap(pre_zero_velocity_flag_, other->pre_zero_velocity_flag_);
  swap(end_length_openloop_flag_, other->end_length_openloop_flag_);
  swap(path_direction_, other->path_direction_);
  swap(emergency_obstacle_, other->emergency_obstacle_);
  swap(slow_aeb_mode_, other->slow_aeb_mode_);
  swap(is_shift_position_, other->is_shift_position_);
  swap(real_shift_position_, other->real_shift_position_);
  swap(shift_position_, other->shift_position_);
  swap(temp1_, other->temp1_);
  swap(temp2_, other->temp2_);
  swap(car_fault_level_, other->car_fault_level_);
  swap(emergency_flag_, other->emergency_flag_);
  swap(temp3_, other->temp3_);
  swap(acc_dis_car_to_obj_, other->acc_dis_car_to_obj_);
  swap(acc_obj_velocity_, other->acc_obj_velocity_);
  swap(acc_desired_dis_, other->acc_desired_dis_);
  swap(acc_delt_dis_, other->acc_delt_dis_);
  swap(acc_delt_v_, other->acc_delt_v_);
  swap(acc_dis_error_accel_, other->acc_dis_error_accel_);
  swap(acc_v_error_accel_, other->acc_v_error_accel_);
  swap(acc_accel_, other->acc_accel_);
  swap(accel_finally_, other->accel_finally_);
  swap(safe_dis_base_path_, other->safe_dis_base_path_);
  swap(loc_yaw_, other->loc_yaw_);
  swap(theta_abs_, other->theta_abs_);
  swap(a_obs_, other->a_obs_);
  swap(object_speed_, other->object_speed_);
  swap(s_safe_, other->s_safe_);
  swap(pred_time_, other->pred_time_);
  swap(neareat_cell_dis_to_car__, other->neareat_cell_dis_to_car__);
  swap(nearest_obs_dis_to_car_, other->nearest_obs_dis_to_car_);
  swap(collision_obj_x_, other->collision_obj_x_);
  swap(collision_obj_y_, other->collision_obj_y_);
  swap(collision_cell_x_, other->collision_cell_x_);
  swap(collision_cell_y_, other->collision_cell_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoncontrolDebug::GetMetadata() const {
  protobuf_LoncontrolDebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LoncontrolDebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace LoncontrolDebug_msgs

// @@protoc_insertion_point(global_scope)
