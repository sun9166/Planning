// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cloud2Vehicle.proto

#include "Cloud2Vehicle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace c2v {
namespace proto {
class PathPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathPoint>
      _instance;
} _PathPoint_default_instance_;
class MissionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mission>
      _instance;
} _Mission_default_instance_;
class Vehicle2CloudDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vehicle2Cloud>
      _instance;
} _Vehicle2Cloud_default_instance_;
}  // namespace proto
}  // namespace c2v
namespace protobuf_Cloud2Vehicle_2eproto {
void InitDefaultsPathPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::c2v::proto::_PathPoint_default_instance_;
    new (ptr) ::c2v::proto::PathPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::c2v::proto::PathPoint::InitAsDefaultInstance();
}

void InitDefaultsPathPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPathPointImpl);
}

void InitDefaultsMissionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Cloud2Vehicle_2eproto::InitDefaultsPathPoint();
  {
    void* ptr = &::c2v::proto::_Mission_default_instance_;
    new (ptr) ::c2v::proto::Mission();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::c2v::proto::Mission::InitAsDefaultInstance();
}

void InitDefaultsMission() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMissionImpl);
}

void InitDefaultsVehicle2CloudImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Cloud2Vehicle_2eproto::InitDefaultsMission();
  protobuf_Cloud2Vehicle_2eproto::InitDefaultsPathPoint();
  {
    void* ptr = &::c2v::proto::_Vehicle2Cloud_default_instance_;
    new (ptr) ::c2v::proto::Vehicle2Cloud();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::c2v::proto::Vehicle2Cloud::InitAsDefaultInstance();
}

void InitDefaultsVehicle2Cloud() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicle2CloudImpl);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::c2v::proto::PathPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::c2v::proto::PathPoint, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::c2v::proto::PathPoint, lon_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::c2v::proto::Mission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::c2v::proto::Mission, mission_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::c2v::proto::Mission, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::c2v::proto::Mission, mission_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::c2v::proto::Vehicle2Cloud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::c2v::proto::Vehicle2Cloud, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::c2v::proto::Vehicle2Cloud, vehicle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::c2v::proto::Vehicle2Cloud, cmd_sequence_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::c2v::proto::Vehicle2Cloud, task_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::c2v::proto::Vehicle2Cloud, mission_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::c2v::proto::Vehicle2Cloud, forbidden_points_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::c2v::proto::PathPoint)},
  { 7, -1, sizeof(::c2v::proto::Mission)},
  { 15, -1, sizeof(::c2v::proto::Vehicle2Cloud)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::c2v::proto::_PathPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::c2v::proto::_Mission_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::c2v::proto::_Vehicle2Cloud_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Cloud2Vehicle.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023Cloud2Vehicle.proto\022\tc2v.proto\"%\n\tPath"
      "Point\022\013\n\003lat\030\001 \001(\001\022\013\n\003lon\030\002 \001(\001\"X\n\007Missi"
      "on\022\022\n\nmission_id\030\001 \001(\005\022#\n\005point\030\002 \001(\0132\024."
      "c2v.proto.PathPoint\022\024\n\014mission_type\030\003 \001("
      "\005\"\276\001\n\rVehicle2Cloud\022\021\n\ttimestamp\030\001 \001(\001\022\022"
      "\n\nvehicle_id\030\002 \001(\t\022\030\n\020cmd_sequence_num\030\003"
      " \001(\005\022\020\n\010task_cmd\030\004 \001(\005\022*\n\016mission_points"
      "\030\005 \003(\0132\022.c2v.proto.Mission\022.\n\020forbidden_"
      "points\030\006 \003(\0132\024.c2v.proto.PathPointb\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 362);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Cloud2Vehicle.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Cloud2Vehicle_2eproto
namespace c2v {
namespace proto {

// ===================================================================

void PathPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPoint::kLatFieldNumber;
const int PathPoint::kLonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPoint::PathPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Cloud2Vehicle_2eproto::InitDefaultsPathPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c2v.proto.PathPoint)
}
PathPoint::PathPoint(const PathPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&lon_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  // @@protoc_insertion_point(copy_constructor:c2v.proto.PathPoint)
}

void PathPoint::SharedCtor() {
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  _cached_size_ = 0;
}

PathPoint::~PathPoint() {
  // @@protoc_insertion_point(destructor:c2v.proto.PathPoint)
  SharedDtor();
}

void PathPoint::SharedDtor() {
}

void PathPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathPoint::descriptor() {
  ::protobuf_Cloud2Vehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Cloud2Vehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathPoint& PathPoint::default_instance() {
  ::protobuf_Cloud2Vehicle_2eproto::InitDefaultsPathPoint();
  return *internal_default_instance();
}

PathPoint* PathPoint::New(::google::protobuf::Arena* arena) const {
  PathPoint* n = new PathPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:c2v.proto.PathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lon_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  _internal_metadata_.Clear();
}

bool PathPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c2v.proto.PathPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double lat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c2v.proto.PathPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c2v.proto.PathPoint)
  return false;
#undef DO_
}

void PathPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c2v.proto.PathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // double lon = 2;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:c2v.proto.PathPoint)
}

::google::protobuf::uint8* PathPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:c2v.proto.PathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // double lon = 2;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lon(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c2v.proto.PathPoint)
  return target;
}

size_t PathPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c2v.proto.PathPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double lat = 1;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // double lon = 2;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c2v.proto.PathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c2v.proto.PathPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c2v.proto.PathPoint)
    MergeFrom(*source);
  }
}

void PathPoint::MergeFrom(const PathPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c2v.proto.PathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
}

void PathPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c2v.proto.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPoint::CopyFrom(const PathPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c2v.proto.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPoint::IsInitialized() const {
  return true;
}

void PathPoint::Swap(PathPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPoint::InternalSwap(PathPoint* other) {
  using std::swap;
  swap(lat_, other->lat_);
  swap(lon_, other->lon_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathPoint::GetMetadata() const {
  protobuf_Cloud2Vehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Cloud2Vehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Mission::InitAsDefaultInstance() {
  ::c2v::proto::_Mission_default_instance_._instance.get_mutable()->point_ = const_cast< ::c2v::proto::PathPoint*>(
      ::c2v::proto::PathPoint::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mission::kMissionIdFieldNumber;
const int Mission::kPointFieldNumber;
const int Mission::kMissionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mission::Mission()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Cloud2Vehicle_2eproto::InitDefaultsMission();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c2v.proto.Mission)
}
Mission::Mission(const Mission& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_point()) {
    point_ = new ::c2v::proto::PathPoint(*from.point_);
  } else {
    point_ = NULL;
  }
  ::memcpy(&mission_id_, &from.mission_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mission_type_) -
    reinterpret_cast<char*>(&mission_id_)) + sizeof(mission_type_));
  // @@protoc_insertion_point(copy_constructor:c2v.proto.Mission)
}

void Mission::SharedCtor() {
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mission_type_) -
      reinterpret_cast<char*>(&point_)) + sizeof(mission_type_));
  _cached_size_ = 0;
}

Mission::~Mission() {
  // @@protoc_insertion_point(destructor:c2v.proto.Mission)
  SharedDtor();
}

void Mission::SharedDtor() {
  if (this != internal_default_instance()) delete point_;
}

void Mission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mission::descriptor() {
  ::protobuf_Cloud2Vehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Cloud2Vehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mission& Mission::default_instance() {
  ::protobuf_Cloud2Vehicle_2eproto::InitDefaultsMission();
  return *internal_default_instance();
}

Mission* Mission::New(::google::protobuf::Arena* arena) const {
  Mission* n = new Mission;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mission::Clear() {
// @@protoc_insertion_point(message_clear_start:c2v.proto.Mission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && point_ != NULL) {
    delete point_;
  }
  point_ = NULL;
  ::memset(&mission_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mission_type_) -
      reinterpret_cast<char*>(&mission_id_)) + sizeof(mission_type_));
  _internal_metadata_.Clear();
}

bool Mission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c2v.proto.Mission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 mission_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .c2v.proto.PathPoint point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mission_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c2v.proto.Mission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c2v.proto.Mission)
  return false;
#undef DO_
}

void Mission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c2v.proto.Mission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mission_id = 1;
  if (this->mission_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mission_id(), output);
  }

  // .c2v.proto.PathPoint point = 2;
  if (this->has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->point_, output);
  }

  // int32 mission_type = 3;
  if (this->mission_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mission_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:c2v.proto.Mission)
}

::google::protobuf::uint8* Mission::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:c2v.proto.Mission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mission_id = 1;
  if (this->mission_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mission_id(), target);
  }

  // .c2v.proto.PathPoint point = 2;
  if (this->has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->point_, deterministic, target);
  }

  // int32 mission_type = 3;
  if (this->mission_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mission_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c2v.proto.Mission)
  return target;
}

size_t Mission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c2v.proto.Mission)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .c2v.proto.PathPoint point = 2;
  if (this->has_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->point_);
  }

  // int32 mission_id = 1;
  if (this->mission_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mission_id());
  }

  // int32 mission_type = 3;
  if (this->mission_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mission_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mission::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c2v.proto.Mission)
  GOOGLE_DCHECK_NE(&from, this);
  const Mission* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mission>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c2v.proto.Mission)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c2v.proto.Mission)
    MergeFrom(*source);
  }
}

void Mission::MergeFrom(const Mission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c2v.proto.Mission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_point()) {
    mutable_point()->::c2v::proto::PathPoint::MergeFrom(from.point());
  }
  if (from.mission_id() != 0) {
    set_mission_id(from.mission_id());
  }
  if (from.mission_type() != 0) {
    set_mission_type(from.mission_type());
  }
}

void Mission::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c2v.proto.Mission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mission::CopyFrom(const Mission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c2v.proto.Mission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission::IsInitialized() const {
  return true;
}

void Mission::Swap(Mission* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mission::InternalSwap(Mission* other) {
  using std::swap;
  swap(point_, other->point_);
  swap(mission_id_, other->mission_id_);
  swap(mission_type_, other->mission_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mission::GetMetadata() const {
  protobuf_Cloud2Vehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Cloud2Vehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vehicle2Cloud::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vehicle2Cloud::kTimestampFieldNumber;
const int Vehicle2Cloud::kVehicleIdFieldNumber;
const int Vehicle2Cloud::kCmdSequenceNumFieldNumber;
const int Vehicle2Cloud::kTaskCmdFieldNumber;
const int Vehicle2Cloud::kMissionPointsFieldNumber;
const int Vehicle2Cloud::kForbiddenPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vehicle2Cloud::Vehicle2Cloud()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Cloud2Vehicle_2eproto::InitDefaultsVehicle2Cloud();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:c2v.proto.Vehicle2Cloud)
}
Vehicle2Cloud::Vehicle2Cloud(const Vehicle2Cloud& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mission_points_(from.mission_points_),
      forbidden_points_(from.forbidden_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vehicle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vehicle_id().size() > 0) {
    vehicle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicle_id_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&task_cmd_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(task_cmd_));
  // @@protoc_insertion_point(copy_constructor:c2v.proto.Vehicle2Cloud)
}

void Vehicle2Cloud::SharedCtor() {
  vehicle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_cmd_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(task_cmd_));
  _cached_size_ = 0;
}

Vehicle2Cloud::~Vehicle2Cloud() {
  // @@protoc_insertion_point(destructor:c2v.proto.Vehicle2Cloud)
  SharedDtor();
}

void Vehicle2Cloud::SharedDtor() {
  vehicle_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Vehicle2Cloud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vehicle2Cloud::descriptor() {
  ::protobuf_Cloud2Vehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Cloud2Vehicle_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vehicle2Cloud& Vehicle2Cloud::default_instance() {
  ::protobuf_Cloud2Vehicle_2eproto::InitDefaultsVehicle2Cloud();
  return *internal_default_instance();
}

Vehicle2Cloud* Vehicle2Cloud::New(::google::protobuf::Arena* arena) const {
  Vehicle2Cloud* n = new Vehicle2Cloud;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vehicle2Cloud::Clear() {
// @@protoc_insertion_point(message_clear_start:c2v.proto.Vehicle2Cloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mission_points_.Clear();
  forbidden_points_.Clear();
  vehicle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_cmd_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(task_cmd_));
  _internal_metadata_.Clear();
}

bool Vehicle2Cloud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:c2v.proto.Vehicle2Cloud)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string vehicle_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicle_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vehicle_id().data(), static_cast<int>(this->vehicle_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "c2v.proto.Vehicle2Cloud.vehicle_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cmd_sequence_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_sequence_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 task_cmd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .c2v.proto.Mission mission_points = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_mission_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .c2v.proto.PathPoint forbidden_points = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_forbidden_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:c2v.proto.Vehicle2Cloud)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:c2v.proto.Vehicle2Cloud)
  return false;
#undef DO_
}

void Vehicle2Cloud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:c2v.proto.Vehicle2Cloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // string vehicle_id = 2;
  if (this->vehicle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vehicle_id().data(), static_cast<int>(this->vehicle_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "c2v.proto.Vehicle2Cloud.vehicle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vehicle_id(), output);
  }

  // int32 cmd_sequence_num = 3;
  if (this->cmd_sequence_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cmd_sequence_num(), output);
  }

  // int32 task_cmd = 4;
  if (this->task_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->task_cmd(), output);
  }

  // repeated .c2v.proto.Mission mission_points = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mission_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mission_points(static_cast<int>(i)), output);
  }

  // repeated .c2v.proto.PathPoint forbidden_points = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->forbidden_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->forbidden_points(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:c2v.proto.Vehicle2Cloud)
}

::google::protobuf::uint8* Vehicle2Cloud::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:c2v.proto.Vehicle2Cloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // string vehicle_id = 2;
  if (this->vehicle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vehicle_id().data(), static_cast<int>(this->vehicle_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "c2v.proto.Vehicle2Cloud.vehicle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vehicle_id(), target);
  }

  // int32 cmd_sequence_num = 3;
  if (this->cmd_sequence_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cmd_sequence_num(), target);
  }

  // int32 task_cmd = 4;
  if (this->task_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->task_cmd(), target);
  }

  // repeated .c2v.proto.Mission mission_points = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mission_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->mission_points(static_cast<int>(i)), deterministic, target);
  }

  // repeated .c2v.proto.PathPoint forbidden_points = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->forbidden_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->forbidden_points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:c2v.proto.Vehicle2Cloud)
  return target;
}

size_t Vehicle2Cloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:c2v.proto.Vehicle2Cloud)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .c2v.proto.Mission mission_points = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->mission_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mission_points(static_cast<int>(i)));
    }
  }

  // repeated .c2v.proto.PathPoint forbidden_points = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->forbidden_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->forbidden_points(static_cast<int>(i)));
    }
  }

  // string vehicle_id = 2;
  if (this->vehicle_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vehicle_id());
  }

  // double timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  // int32 cmd_sequence_num = 3;
  if (this->cmd_sequence_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd_sequence_num());
  }

  // int32 task_cmd = 4;
  if (this->task_cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->task_cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vehicle2Cloud::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:c2v.proto.Vehicle2Cloud)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle2Cloud* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vehicle2Cloud>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:c2v.proto.Vehicle2Cloud)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:c2v.proto.Vehicle2Cloud)
    MergeFrom(*source);
  }
}

void Vehicle2Cloud::MergeFrom(const Vehicle2Cloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:c2v.proto.Vehicle2Cloud)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mission_points_.MergeFrom(from.mission_points_);
  forbidden_points_.MergeFrom(from.forbidden_points_);
  if (from.vehicle_id().size() > 0) {

    vehicle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicle_id_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.cmd_sequence_num() != 0) {
    set_cmd_sequence_num(from.cmd_sequence_num());
  }
  if (from.task_cmd() != 0) {
    set_task_cmd(from.task_cmd());
  }
}

void Vehicle2Cloud::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:c2v.proto.Vehicle2Cloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle2Cloud::CopyFrom(const Vehicle2Cloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:c2v.proto.Vehicle2Cloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle2Cloud::IsInitialized() const {
  return true;
}

void Vehicle2Cloud::Swap(Vehicle2Cloud* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vehicle2Cloud::InternalSwap(Vehicle2Cloud* other) {
  using std::swap;
  mission_points_.InternalSwap(&other->mission_points_);
  forbidden_points_.InternalSwap(&other->forbidden_points_);
  vehicle_id_.Swap(&other->vehicle_id_);
  swap(timestamp_, other->timestamp_);
  swap(cmd_sequence_num_, other->cmd_sequence_num_);
  swap(task_cmd_, other->task_cmd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vehicle2Cloud::GetMetadata() const {
  protobuf_Cloud2Vehicle_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Cloud2Vehicle_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace c2v

// @@protoc_insertion_point(global_scope)
