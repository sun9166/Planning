// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mapengine_msgs.proto

#include "mapengine_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace mapengine_msgs {
class BusinessAreaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BusinessArea>
      _instance;
} _BusinessArea_default_instance_;
class MissionPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MissionPoint>
      _instance;
} _MissionPoint_default_instance_;
class MissionLineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MissionLine>
      _instance;
} _MissionLine_default_instance_;
class MissionAreaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MissionArea>
      _instance;
} _MissionArea_default_instance_;
class MissionContentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MissionContent>
      _instance;
} _MissionContent_default_instance_;
class RoutePointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoutePoint>
      _instance;
} _RoutePoint_default_instance_;
class MissionRouteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MissionRoute>
      _instance;
} _MissionRoute_default_instance_;
class ImuInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImuInfo>
      _instance;
} _ImuInfo_default_instance_;
class TrafficLightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficLight>
      _instance;
} _TrafficLight_default_instance_;
class PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point>
      _instance;
} _Point_default_instance_;
class ReferencePointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReferencePoint>
      _instance;
} _ReferencePoint_default_instance_;
class AreaRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AreaRange>
      _instance;
} _AreaRange_default_instance_;
class DisRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DisRange>
      _instance;
} _DisRange_default_instance_;
class FuncInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FuncInfo>
      _instance;
} _FuncInfo_default_instance_;
class RelationLaneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RelationLane>
      _instance;
} _RelationLane_default_instance_;
class LineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Line>
      _instance;
} _Line_default_instance_;
class LineListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LineList>
      _instance;
} _LineList_default_instance_;
class MapInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapInfo>
      _instance;
} _MapInfo_default_instance_;
class GlobalPathCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GlobalPathCommand>
      _instance;
} _GlobalPathCommand_default_instance_;
class GlobalPathResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GlobalPathResult>
      _instance;
} _GlobalPathResult_default_instance_;
class NavigationCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NavigationCommand>
      _instance;
} _NavigationCommand_default_instance_;
class NavigationResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NavigationResult>
      _instance;
} _NavigationResult_default_instance_;
class NavigationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Navigation>
      _instance;
} _Navigation_default_instance_;
class NavMissionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NavMission>
      _instance;
} _NavMission_default_instance_;
class DebugDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Debug>
      _instance;
} _Debug_default_instance_;
}  // namespace mapengine_msgs
namespace protobuf_mapengine_5fmsgs_2eproto {
void InitDefaultsBusinessAreaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mapengine_msgs::_BusinessArea_default_instance_;
    new (ptr) ::mapengine_msgs::BusinessArea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::BusinessArea::InitAsDefaultInstance();
}

void InitDefaultsBusinessArea() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBusinessAreaImpl);
}

void InitDefaultsMissionPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mapengine_msgs::_MissionPoint_default_instance_;
    new (ptr) ::mapengine_msgs::MissionPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::MissionPoint::InitAsDefaultInstance();
}

void InitDefaultsMissionPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMissionPointImpl);
}

void InitDefaultsMissionLineImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mapengine_msgs::_MissionLine_default_instance_;
    new (ptr) ::mapengine_msgs::MissionLine();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::MissionLine::InitAsDefaultInstance();
}

void InitDefaultsMissionLine() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMissionLineImpl);
}

void InitDefaultsMissionAreaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mapengine_msgs::_MissionArea_default_instance_;
    new (ptr) ::mapengine_msgs::MissionArea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::MissionArea::InitAsDefaultInstance();
}

void InitDefaultsMissionArea() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMissionAreaImpl);
}

void InitDefaultsMissionContentImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionPoint();
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionLine();
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionArea();
  {
    void* ptr = &::mapengine_msgs::_MissionContent_default_instance_;
    new (ptr) ::mapengine_msgs::MissionContent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::MissionContent::InitAsDefaultInstance();
}

void InitDefaultsMissionContent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMissionContentImpl);
}

void InitDefaultsRoutePointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mapengine_msgs::_RoutePoint_default_instance_;
    new (ptr) ::mapengine_msgs::RoutePoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::RoutePoint::InitAsDefaultInstance();
}

void InitDefaultsRoutePoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoutePointImpl);
}

void InitDefaultsMissionRouteImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsRoutePoint();
  {
    void* ptr = &::mapengine_msgs::_MissionRoute_default_instance_;
    new (ptr) ::mapengine_msgs::MissionRoute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::MissionRoute::InitAsDefaultInstance();
}

void InitDefaultsMissionRoute() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMissionRouteImpl);
}

void InitDefaultsImuInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mapengine_msgs::_ImuInfo_default_instance_;
    new (ptr) ::mapengine_msgs::ImuInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::ImuInfo::InitAsDefaultInstance();
}

void InitDefaultsImuInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImuInfoImpl);
}

void InitDefaultsTrafficLightImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mapengine_msgs::_TrafficLight_default_instance_;
    new (ptr) ::mapengine_msgs::TrafficLight();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::TrafficLight::InitAsDefaultInstance();
}

void InitDefaultsTrafficLight() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTrafficLightImpl);
}

void InitDefaultsPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mapengine_msgs::_Point_default_instance_;
    new (ptr) ::mapengine_msgs::Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::Point::InitAsDefaultInstance();
}

void InitDefaultsPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPointImpl);
}

void InitDefaultsReferencePointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mapengine_msgs::_ReferencePoint_default_instance_;
    new (ptr) ::mapengine_msgs::ReferencePoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::ReferencePoint::InitAsDefaultInstance();
}

void InitDefaultsReferencePoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReferencePointImpl);
}

void InitDefaultsAreaRangeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsPoint();
  {
    void* ptr = &::mapengine_msgs::_AreaRange_default_instance_;
    new (ptr) ::mapengine_msgs::AreaRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::AreaRange::InitAsDefaultInstance();
}

void InitDefaultsAreaRange() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAreaRangeImpl);
}

void InitDefaultsDisRangeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mapengine_msgs::_DisRange_default_instance_;
    new (ptr) ::mapengine_msgs::DisRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::DisRange::InitAsDefaultInstance();
}

void InitDefaultsDisRange() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDisRangeImpl);
}

void InitDefaultsFuncInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mapengine_msgs::_FuncInfo_default_instance_;
    new (ptr) ::mapengine_msgs::FuncInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::FuncInfo::InitAsDefaultInstance();
}

void InitDefaultsFuncInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFuncInfoImpl);
}

void InitDefaultsRelationLaneImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mapengine_msgs::_RelationLane_default_instance_;
    new (ptr) ::mapengine_msgs::RelationLane();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::RelationLane::InitAsDefaultInstance();
}

void InitDefaultsRelationLane() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRelationLaneImpl);
}

void InitDefaultsLineImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsRelationLane();
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsDisRange();
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsAreaRange();
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsTrafficLight();
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsReferencePoint();
  {
    void* ptr = &::mapengine_msgs::_Line_default_instance_;
    new (ptr) ::mapengine_msgs::Line();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::Line::InitAsDefaultInstance();
}

void InitDefaultsLine() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLineImpl);
}

void InitDefaultsLineListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsLine();
  {
    void* ptr = &::mapengine_msgs::_LineList_default_instance_;
    new (ptr) ::mapengine_msgs::LineList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::LineList::InitAsDefaultInstance();
}

void InitDefaultsLineList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLineListImpl);
}

void InitDefaultsMapInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsLineList();
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsPoint();
  {
    void* ptr = &::mapengine_msgs::_MapInfo_default_instance_;
    new (ptr) ::mapengine_msgs::MapInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::MapInfo::InitAsDefaultInstance();
}

void InitDefaultsMapInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMapInfoImpl);
}

void InitDefaultsGlobalPathCommandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_5fmsgs_2eproto::InitDefaultsHeader();
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionContent();
  {
    void* ptr = &::mapengine_msgs::_GlobalPathCommand_default_instance_;
    new (ptr) ::mapengine_msgs::GlobalPathCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::GlobalPathCommand::InitAsDefaultInstance();
}

void InitDefaultsGlobalPathCommand() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGlobalPathCommandImpl);
}

void InitDefaultsGlobalPathResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_5fmsgs_2eproto::InitDefaultsHeader();
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionContent();
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionRoute();
  {
    void* ptr = &::mapengine_msgs::_GlobalPathResult_default_instance_;
    new (ptr) ::mapengine_msgs::GlobalPathResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::GlobalPathResult::InitAsDefaultInstance();
}

void InitDefaultsGlobalPathResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGlobalPathResultImpl);
}

void InitDefaultsNavigationCommandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionContent();
  {
    void* ptr = &::mapengine_msgs::_NavigationCommand_default_instance_;
    new (ptr) ::mapengine_msgs::NavigationCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::NavigationCommand::InitAsDefaultInstance();
}

void InitDefaultsNavigationCommand() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNavigationCommandImpl);
}

void InitDefaultsNavigationResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::mapengine_msgs::_NavigationResult_default_instance_;
    new (ptr) ::mapengine_msgs::NavigationResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::NavigationResult::InitAsDefaultInstance();
}

void InitDefaultsNavigationResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNavigationResultImpl);
}

void InitDefaultsNavigationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_5fmsgs_2eproto::InitDefaultsHeader();
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsFuncInfo();
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMapInfo();
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsImuInfo();
  {
    void* ptr = &::mapengine_msgs::_Navigation_default_instance_;
    new (ptr) ::mapengine_msgs::Navigation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::Navigation::InitAsDefaultInstance();
}

void InitDefaultsNavigation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNavigationImpl);
}

void InitDefaultsNavMissionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_5fmsgs_2eproto::InitDefaultsHeader();
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsBusinessArea();
  {
    void* ptr = &::mapengine_msgs::_NavMission_default_instance_;
    new (ptr) ::mapengine_msgs::NavMission();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::NavMission::InitAsDefaultInstance();
}

void InitDefaultsNavMission() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNavMissionImpl);
}

void InitDefaultsDebugImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsGlobalPathCommand();
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsNavigationCommand();
  protobuf_mapengine_5fmsgs_2eproto::InitDefaultsFuncInfo();
  {
    void* ptr = &::mapengine_msgs::_Debug_default_instance_;
    new (ptr) ::mapengine_msgs::Debug();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mapengine_msgs::Debug::InitAsDefaultInstance();
}

void InitDefaultsDebug() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugImpl);
}

::google::protobuf::Metadata file_level_metadata[25];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::BusinessArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::BusinessArea, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::BusinessArea, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionPoint, xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionPoint, yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionPoint, heading_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionLine, line_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionLine, start_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionLine, end_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionArea, area_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionArea, line_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionContent, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionContent, line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionContent, area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionContent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionContent, mission_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionContent, is_stop_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::RoutePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::RoutePoint, xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::RoutePoint, yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::RoutePoint, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::RoutePoint, length_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionRoute, global_road_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionRoute, global_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionRoute, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionRoute, dis_to_next_turn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MissionRoute, next_turn_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ImuInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ImuInfo, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ImuInfo, xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ImuInfo, yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ImuInfo, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ImuInfo, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ImuInfo, vx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ImuInfo, vy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ImuInfo, loc_xg_dr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ImuInfo, loc_yg_dr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ImuInfo, loc_yaw_dr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ImuInfo, correction_flag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::TrafficLight, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::TrafficLight, key_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::TrafficLight, lon_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::TrafficLight, xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::TrafficLight, yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::TrafficLight, globalangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::TrafficLight, light_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::TrafficLight, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::TrafficLight, same_light_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Point, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Point, angle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ReferencePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ReferencePoint, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ReferencePoint, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ReferencePoint, angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ReferencePoint, xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ReferencePoint, yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ReferencePoint, angleglobal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ReferencePoint, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ReferencePoint, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ReferencePoint, curvature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::ReferencePoint, direction_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::AreaRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::AreaRange, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::AreaRange, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::AreaRange, area_points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::DisRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::DisRange, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::DisRange, start_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::DisRange, end_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::DisRange, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::DisRange, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::FuncInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::FuncInfo, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::FuncInfo, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::FuncInfo, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::FuncInfo, c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::FuncInfo, start_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::FuncInfo, end_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::FuncInfo, life_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::RelationLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::RelationLane, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::RelationLane, start_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::RelationLane, end_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::RelationLane, relation_start_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::RelationLane, relation_end_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::RelationLane, lon_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::RelationLane, confluence_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::RelationLane, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, line_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, dis_to_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, dis_to_diversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, dis_to_merge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, first_lane_start_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, dis_to_driving_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, able_driving_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, lane_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, relation_lanes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, lane_turns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, lane_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, left_bd_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, right_bd_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, dis_to_ends_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, expected_speeds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, left_passable_distances_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, right_passable_distances_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, dis_to_speed_bumps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, dis_to_forbid_areas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, dis_to_junctions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, dis_to_crosswalks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, dis_to_yield_areas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, dis_to_stop_areas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, isolationbelts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, laneside_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, laneside_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, contain_light_junction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, contain_light_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, trafficlights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, map_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, left_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Line, right_boundary_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::LineList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::LineList, frontline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::LineList, backlines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::LineList, dis_lc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::LineList, first_lc_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::LineList, first_lc_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::LineList, all_lc_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::LineList, global_cost_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MapInfo, current_line_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MapInfo, alllinelists_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MapInfo, revlinelist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MapInfo, startpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MapInfo, endpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MapInfo, dis2endpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::MapInfo, change_task_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::GlobalPathCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::GlobalPathCommand, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::GlobalPathCommand, mission_command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::GlobalPathCommand, mission_request_vec_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::GlobalPathResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::GlobalPathResult, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::GlobalPathResult, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::GlobalPathResult, mission_response_vec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::GlobalPathResult, mission_route_vec_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavigationCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavigationCommand, mission_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavigationCommand, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavigationCommand, content_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavigationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavigationResult, cur_mission_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavigationResult, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Navigation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Navigation, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Navigation, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Navigation, map_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Navigation, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Navigation, last_vision_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Navigation, vision_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Navigation, map_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Navigation, last_imu_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Navigation, imu_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Navigation, last_correct_imu_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Navigation, correct_imu_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavMission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavMission, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavMission, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavMission, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavMission, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavMission, cur_mission_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavMission, cur_mission_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavMission, all_mission_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavMission, all_mission_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavMission, business_areas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavMission, remain_road_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavMission, global_road_success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavMission, navigation_success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavMission, find_current_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::NavMission, failed_reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, route_command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, nav_command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, mission_road_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, global_road_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, global_road_success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, navigation_success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, find_current_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, failed_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, current_road_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, routeplan_cost_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, globallane_cost_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, navigation_cost_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, min_delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, loc_list_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, sim_vision_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, in_tunnel_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, gccs_dr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, vision_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, map_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, loc_vision_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, loc_vision_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, correction_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, delta_yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mapengine_msgs::Debug, delta_dis_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mapengine_msgs::BusinessArea)},
  { 7, -1, sizeof(::mapengine_msgs::MissionPoint)},
  { 15, -1, sizeof(::mapengine_msgs::MissionLine)},
  { 23, -1, sizeof(::mapengine_msgs::MissionArea)},
  { 30, -1, sizeof(::mapengine_msgs::MissionContent)},
  { 41, -1, sizeof(::mapengine_msgs::RoutePoint)},
  { 50, -1, sizeof(::mapengine_msgs::MissionRoute)},
  { 60, -1, sizeof(::mapengine_msgs::ImuInfo)},
  { 76, -1, sizeof(::mapengine_msgs::TrafficLight)},
  { 90, -1, sizeof(::mapengine_msgs::Point)},
  { 98, -1, sizeof(::mapengine_msgs::ReferencePoint)},
  { 113, -1, sizeof(::mapengine_msgs::AreaRange)},
  { 121, -1, sizeof(::mapengine_msgs::DisRange)},
  { 131, -1, sizeof(::mapengine_msgs::FuncInfo)},
  { 143, -1, sizeof(::mapengine_msgs::RelationLane)},
  { 156, -1, sizeof(::mapengine_msgs::Line)},
  { 193, -1, sizeof(::mapengine_msgs::LineList)},
  { 205, -1, sizeof(::mapengine_msgs::MapInfo)},
  { 217, -1, sizeof(::mapengine_msgs::GlobalPathCommand)},
  { 225, -1, sizeof(::mapengine_msgs::GlobalPathResult)},
  { 234, -1, sizeof(::mapengine_msgs::NavigationCommand)},
  { 242, -1, sizeof(::mapengine_msgs::NavigationResult)},
  { 249, -1, sizeof(::mapengine_msgs::Navigation)},
  { 265, -1, sizeof(::mapengine_msgs::NavMission)},
  { 284, -1, sizeof(::mapengine_msgs::Debug)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_BusinessArea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_MissionPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_MissionLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_MissionArea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_MissionContent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_RoutePoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_MissionRoute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_ImuInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_TrafficLight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_ReferencePoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_AreaRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_DisRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_FuncInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_RelationLane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_Line_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_LineList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_MapInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_GlobalPathCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_GlobalPathResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_NavigationCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_NavigationResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_Navigation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_NavMission_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mapengine_msgs::_Debug_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mapengine_msgs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 25);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024mapengine_msgs.proto\022\016mapengine_msgs\032\021"
      "common_msgs.proto\"*\n\014BusinessArea\022\014\n\004nam"
      "e\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\"7\n\014MissionPoint\022\n\n"
      "\002xg\030\001 \001(\001\022\n\n\002yg\030\002 \001(\001\022\017\n\007heading\030\003 \001(\002\"F"
      "\n\013MissionLine\022\017\n\007line_id\030\001 \001(\t\022\023\n\013start_"
      "index\030\002 \001(\005\022\021\n\tend_index\030\003 \001(\005\"/\n\013Missio"
      "nArea\022\017\n\007area_id\030\001 \001(\t\022\017\n\007line_id\030\002 \001(\t\""
      "\306\001\n\016MissionContent\022+\n\005point\030\001 \001(\0132\034.mape"
      "ngine_msgs.MissionPoint\022)\n\004line\030\002 \001(\0132\033."
      "mapengine_msgs.MissionLine\022)\n\004area\030\003 \001(\013"
      "2\033.mapengine_msgs.MissionArea\022\014\n\004type\030\004 "
      "\001(\005\022\022\n\nmission_id\030\005 \001(\005\022\017\n\007is_stop\030\006 \001(\010"
      "\"E\n\nRoutePoint\022\n\n\002xg\030\001 \001(\001\022\n\n\002yg\030\002 \001(\001\022\017"
      "\n\007heading\030\003 \001(\002\022\016\n\006length\030\004 \001(\005\"\226\001\n\014Miss"
      "ionRoute\022\023\n\013global_road\030\001 \003(\t\022/\n\013global_"
      "path\030\002 \003(\0132\032.mapengine_msgs.RoutePoint\022\016"
      "\n\006length\030\003 \001(\002\022\030\n\020dis_to_next_turn\030\004 \001(\002"
      "\022\026\n\016next_turn_type\030\005 \001(\005\"\277\001\n\007ImuInfo\022\022\n\n"
      "time_stamp\030\001 \001(\001\022\n\n\002xg\030\002 \001(\001\022\n\n\002yg\030\003 \001(\001"
      "\022\013\n\003yaw\030\004 \001(\001\022\020\n\010velocity\030\005 \001(\001\022\n\n\002vx\030\006 "
      "\001(\001\022\n\n\002vy\030\007 \001(\001\022\021\n\tloc_xg_dr\030\010 \001(\001\022\021\n\tlo"
      "c_yg_dr\030\t \001(\001\022\022\n\nloc_yaw_dr\030\n \001(\001\022\027\n\017cor"
      "rection_flag\030\013 \001(\010\"\247\001\n\014TrafficLight\022\n\n\002i"
      "d\030\001 \001(\t\022\021\n\tkey_light\030\002 \001(\010\022\021\n\tlon_index\030"
      "\003 \001(\005\022\n\n\002xg\030\004 \001(\002\022\n\n\002yg\030\005 \001(\002\022\023\n\013globala"
      "ngle\030\006 \001(\002\022\017\n\007light_s\030\007 \001(\002\022\017\n\007lane_id\030\010"
      " \001(\t\022\026\n\016same_light_ids\030\t \003(\t\",\n\005Point\022\t\n"
      "\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\r\n\005angle\030\003 \001(\002\"\247\001\n\016R"
      "eferencePoint\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\r\n\005a"
      "ngle\030\003 \001(\002\022\n\n\002xg\030\004 \001(\001\022\n\n\002yg\030\005 \001(\001\022\023\n\013an"
      "gleglobal\030\006 \001(\002\022\r\n\005index\030\007 \001(\003\022\016\n\006length"
      "\030\010 \001(\002\022\021\n\tcurvature\030\t \001(\002\022\021\n\tdirection\030\n"
      " \001(\005\"Q\n\tAreaRange\022\n\n\002id\030\001 \001(\t\022\014\n\004type\030\002 "
      "\001(\005\022*\n\013area_points\030\003 \003(\0132\025.mapengine_msg"
      "s.Point\"S\n\010DisRange\022\n\n\002id\030\001 \001(\t\022\017\n\007start"
      "_s\030\002 \001(\002\022\r\n\005end_s\030\003 \001(\002\022\r\n\005value\030\004 \001(\002\022\014"
      "\n\004type\030\005 \001(\005\"k\n\010FuncInfo\022\013\n\003key\030\001 \001(\005\022\t\n"
      "\001a\030\002 \001(\002\022\t\n\001b\030\003 \001(\002\022\t\n\001c\030\004 \001(\002\022\017\n\007start_"
      "x\030\005 \001(\002\022\r\n\005end_x\030\006 \001(\002\022\021\n\tlife_time\030\007 \001("
      "\005\"\247\001\n\014RelationLane\022\n\n\002id\030\001 \001(\t\022\017\n\007start_"
      "s\030\002 \001(\002\022\r\n\005end_s\030\003 \001(\002\022\030\n\020relation_start"
      "_s\030\004 \001(\002\022\026\n\016relation_end_s\030\005 \001(\002\022\021\n\tlon_"
      "index\030\006 \001(\005\022\030\n\020confluence_index\030\007 \003(\005\022\014\n"
      "\004type\030\010 \001(\005\"\301\n\n\004Line\022\026\n\016line_direction\030\001"
      " \001(\005\022\023\n\013dis_to_line\030\002 \001(\002\022\030\n\020dis_to_dive"
      "rsion\030\003 \001(\002\022\024\n\014dis_to_merge\030\004 \001(\002\022\032\n\022fir"
      "st_lane_start_s\030\005 \001(\002\022\026\n\016dis_to_driving\030"
      "\006 \001(\002\022\024\n\014able_driving\030\007 \001(\010\022\020\n\010lane_ids\030"
      "\010 \003(\t\0224\n\016relation_lanes\030\t \003(\0132\034.mapengin"
      "e_msgs.RelationLane\022,\n\nlane_turns\030\n \003(\0132"
      "\030.mapengine_msgs.DisRange\022,\n\nlane_types\030"
      "\013 \003(\0132\030.mapengine_msgs.DisRange\022/\n\rleft_"
      "bd_types\030\014 \003(\0132\030.mapengine_msgs.DisRange"
      "\0220\n\016right_bd_types\030\r \003(\0132\030.mapengine_msg"
      "s.DisRange\022-\n\013dis_to_ends\030\016 \003(\0132\030.mapeng"
      "ine_msgs.DisRange\0221\n\017expected_speeds\030\017 \003"
      "(\0132\030.mapengine_msgs.DisRange\0229\n\027left_pas"
      "sable_distances\030\020 \003(\0132\030.mapengine_msgs.D"
      "isRange\022:\n\030right_passable_distances\030\021 \003("
      "\0132\030.mapengine_msgs.DisRange\0224\n\022dis_to_sp"
      "eed_bumps\030\022 \003(\0132\030.mapengine_msgs.DisRang"
      "e\0225\n\023dis_to_forbid_areas\030\023 \003(\0132\030.mapengi"
      "ne_msgs.DisRange\0222\n\020dis_to_junctions\030\024 \003"
      "(\0132\030.mapengine_msgs.DisRange\0223\n\021dis_to_c"
      "rosswalks\030\025 \003(\0132\030.mapengine_msgs.DisRang"
      "e\0224\n\022dis_to_yield_areas\030\026 \003(\0132\030.mapengin"
      "e_msgs.DisRange\0223\n\021dis_to_stop_areas\030\027 \003"
      "(\0132\030.mapengine_msgs.DisRange\0221\n\016isolatio"
      "nbelts\030\030 \003(\0132\031.mapengine_msgs.AreaRange\022"
      "\025\n\rlaneside_left\030\031 \001(\002\022\026\n\016laneside_right"
      "\030\032 \001(\002\022\036\n\026contain_light_junction\030\033 \001(\010\022\027"
      "\n\017contain_light_s\030\034 \001(\002\0223\n\rtrafficlights"
      "\030\035 \003(\0132\034.mapengine_msgs.TrafficLight\0222\n\n"
      "map_points\030\036 \003(\0132\036.mapengine_msgs.Refere"
      "ncePoint\0225\n\rleft_boundary\030\037 \003(\0132\036.mapeng"
      "ine_msgs.ReferencePoint\0226\n\016right_boundar"
      "y\030  \003(\0132\036.mapengine_msgs.ReferencePoint\""
      "\305\001\n\010LineList\022\'\n\tfrontline\030\001 \001(\0132\024.mapeng"
      "ine_msgs.Line\022\'\n\tbacklines\030\002 \003(\0132\024.mapen"
      "gine_msgs.Line\022\016\n\006dis_lc\030\003 \001(\001\022\025\n\rfirst_"
      "lc_time\030\004 \001(\005\022\026\n\016first_lc_index\030\005 \001(\005\022\023\n"
      "\013all_lc_time\030\006 \001(\005\022\023\n\013global_cost\030\007 \001(\005\""
      "\203\002\n\007MapInfo\022\032\n\022current_line_index\030\001 \001(\005\022"
      ".\n\014alllinelists\030\002 \003(\0132\030.mapengine_msgs.L"
      "ineList\022-\n\013revlinelist\030\003 \001(\0132\030.mapengine"
      "_msgs.LineList\022)\n\nstartpoint\030\004 \001(\0132\025.map"
      "engine_msgs.Point\022\'\n\010endpoint\030\005 \001(\0132\025.ma"
      "pengine_msgs.Point\022\024\n\014dis2endpoint\030\006 \001(\002"
      "\022\023\n\013change_task\030\007 \001(\010\"\216\001\n\021GlobalPathComm"
      "and\022#\n\006header\030\001 \001(\0132\023.common_msgs.Header"
      "\022\027\n\017mission_command\030\002 \001(\005\022;\n\023mission_req"
      "uest_vec\030\003 \003(\0132\036.mapengine_msgs.MissionC"
      "ontent\"\276\001\n\020GlobalPathResult\022#\n\006header\030\001 "
      "\001(\0132\023.common_msgs.Header\022\016\n\006result\030\002 \001(\005"
      "\022<\n\024mission_response_vec\030\003 \003(\0132\036.mapengi"
      "ne_msgs.MissionContent\0227\n\021mission_route_"
      "vec\030\004 \003(\0132\034.mapengine_msgs.MissionRoute\""
      "i\n\021NavigationCommand\022\022\n\nmission_id\030\001 \001(\005"
      "\022\017\n\007command\030\002 \001(\005\022/\n\007content\030\003 \001(\0132\036.map"
      "engine_msgs.MissionContent\":\n\020Navigation"
      "Result\022\026\n\016cur_mission_id\030\001 \001(\005\022\016\n\006result"
      "\030\002 \001(\005\"\263\003\n\nNavigation\022#\n\006header\030\001 \001(\0132\023."
      "common_msgs.Header\022\n\n\002id\030\002 \001(\005\022\020\n\010map_ty"
      "pe\030\003 \001(\005\022\016\n\006status\030\004 \001(\005\0222\n\020last_vision_"
      "info\030\005 \003(\0132\030.mapengine_msgs.FuncInfo\022-\n\013"
      "vision_info\030\006 \003(\0132\030.mapengine_msgs.FuncI"
      "nfo\022)\n\010map_info\030\007 \001(\0132\027.mapengine_msgs.M"
      "apInfo\022.\n\rlast_imu_data\030\010 \001(\0132\027.mapengin"
      "e_msgs.ImuInfo\022)\n\010imu_data\030\t \001(\0132\027.mapen"
      "gine_msgs.ImuInfo\0226\n\025last_correct_imu_da"
      "ta\030\n \001(\0132\027.mapengine_msgs.ImuInfo\0221\n\020cor"
      "rect_imu_data\030\013 \001(\0132\027.mapengine_msgs.Imu"
      "Info\"\376\002\n\nNavMission\022#\n\006header\030\001 \001(\0132\023.co"
      "mmon_msgs.Header\022\n\n\002id\030\002 \001(\005\022\014\n\004type\030\003 \001"
      "(\005\022\016\n\006status\030\004 \001(\005\022\031\n\021cur_mission_total\030"
      "\005 \001(\002\022\030\n\020cur_mission_left\030\006 \001(\002\022\031\n\021all_m"
      "ission_total\030\007 \001(\002\022\030\n\020all_mission_left\030\010"
      " \001(\002\0224\n\016business_areas\030\t \003(\0132\034.mapengine"
      "_msgs.BusinessArea\022\026\n\016remain_road_id\030\n \003"
      "(\t\022\033\n\023global_road_success\030\013 \001(\010\022\032\n\022navig"
      "ation_success\030\014 \001(\010\022\031\n\021find_current_lane"
      "\030\r \001(\010\022\025\n\rfailed_reason\030\016 \003(\t\"\302\005\n\005Debug\022"
      "8\n\rroute_command\030\001 \001(\0132!.mapengine_msgs."
      "GlobalPathCommand\0226\n\013nav_command\030\002 \001(\0132!"
      ".mapengine_msgs.NavigationCommand\022\027\n\017mis"
      "sion_road_id\030\003 \003(\t\022\023\n\013global_road\030\004 \003(\t\022"
      "\033\n\023global_road_success\030\005 \001(\010\022\032\n\022navigati"
      "on_success\030\006 \001(\010\022\031\n\021find_current_lane\030\007 "
      "\001(\010\022\025\n\rfailed_reason\030\010 \003(\t\022\032\n\022current_ro"
      "ad_index\030\t \001(\r\022\033\n\023routeplan_cost_time\030\n "
      "\001(\002\022\034\n\024globallane_cost_time\030\013 \001(\002\022\034\n\024nav"
      "igation_cost_time\030\014 \001(\002\022\021\n\tmin_delta\030\r \001"
      "(\002\022\025\n\rloc_list_time\030\016 \003(\001\022\027\n\017sim_vision_"
      "time\030\017 \001(\r\022\026\n\016in_tunnel_flag\030\020 \001(\010\022\017\n\007gc"
      "cs_dr\030\021 \001(\010\022-\n\013vision_info\030\022 \003(\0132\030.mapen"
      "gine_msgs.FuncInfo\022*\n\010map_info\030\023 \003(\0132\030.m"
      "apengine_msgs.FuncInfo\022\030\n\020loc_vision_sta"
      "te\030\024 \001(\005\022\031\n\021loc_vision_string\030\025 \001(\t\022\027\n\017c"
      "orrection_cost\030\027 \001(\002\022\021\n\tdelta_yaw\030\030 \001(\002\022"
      "\021\n\tdelta_dis\030\031 \001(\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5586);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mapengine_msgs.proto", &protobuf_RegisterTypes);
  ::protobuf_common_5fmsgs_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_mapengine_5fmsgs_2eproto
namespace mapengine_msgs {

// ===================================================================

void BusinessArea::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BusinessArea::kNameFieldNumber;
const int BusinessArea::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BusinessArea::BusinessArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsBusinessArea();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.BusinessArea)
}
BusinessArea::BusinessArea(const BusinessArea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.BusinessArea)
}

void BusinessArea::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BusinessArea::~BusinessArea() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.BusinessArea)
  SharedDtor();
}

void BusinessArea::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BusinessArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BusinessArea::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BusinessArea& BusinessArea::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsBusinessArea();
  return *internal_default_instance();
}

BusinessArea* BusinessArea::New(::google::protobuf::Arena* arena) const {
  BusinessArea* n = new BusinessArea;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BusinessArea::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.BusinessArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool BusinessArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.BusinessArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mapengine_msgs.BusinessArea.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mapengine_msgs.BusinessArea.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.BusinessArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.BusinessArea)
  return false;
#undef DO_
}

void BusinessArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.BusinessArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.BusinessArea.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.BusinessArea.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.BusinessArea)
}

::google::protobuf::uint8* BusinessArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.BusinessArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.BusinessArea.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.BusinessArea.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.BusinessArea)
  return target;
}

size_t BusinessArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.BusinessArea)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BusinessArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.BusinessArea)
  GOOGLE_DCHECK_NE(&from, this);
  const BusinessArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BusinessArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.BusinessArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.BusinessArea)
    MergeFrom(*source);
  }
}

void BusinessArea::MergeFrom(const BusinessArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.BusinessArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
}

void BusinessArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.BusinessArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusinessArea::CopyFrom(const BusinessArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.BusinessArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusinessArea::IsInitialized() const {
  return true;
}

void BusinessArea::Swap(BusinessArea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BusinessArea::InternalSwap(BusinessArea* other) {
  using std::swap;
  name_.Swap(&other->name_);
  type_.Swap(&other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BusinessArea::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MissionPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MissionPoint::kXgFieldNumber;
const int MissionPoint::kYgFieldNumber;
const int MissionPoint::kHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MissionPoint::MissionPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.MissionPoint)
}
MissionPoint::MissionPoint(const MissionPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&xg_, &from.xg_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&xg_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.MissionPoint)
}

void MissionPoint::SharedCtor() {
  ::memset(&xg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&xg_)) + sizeof(heading_));
  _cached_size_ = 0;
}

MissionPoint::~MissionPoint() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.MissionPoint)
  SharedDtor();
}

void MissionPoint::SharedDtor() {
}

void MissionPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionPoint::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MissionPoint& MissionPoint::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionPoint();
  return *internal_default_instance();
}

MissionPoint* MissionPoint::New(::google::protobuf::Arena* arena) const {
  MissionPoint* n = new MissionPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MissionPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.MissionPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&xg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&xg_)) + sizeof(heading_));
  _internal_metadata_.Clear();
}

bool MissionPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.MissionPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double xg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.MissionPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.MissionPoint)
  return false;
#undef DO_
}

void MissionPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.MissionPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double xg = 1;
  if (this->xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->xg(), output);
  }

  // double yg = 2;
  if (this->yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->yg(), output);
  }

  // float heading = 3;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->heading(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.MissionPoint)
}

::google::protobuf::uint8* MissionPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.MissionPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double xg = 1;
  if (this->xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->xg(), target);
  }

  // double yg = 2;
  if (this->yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->yg(), target);
  }

  // float heading = 3;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->heading(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.MissionPoint)
  return target;
}

size_t MissionPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.MissionPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double xg = 1;
  if (this->xg() != 0) {
    total_size += 1 + 8;
  }

  // double yg = 2;
  if (this->yg() != 0) {
    total_size += 1 + 8;
  }

  // float heading = 3;
  if (this->heading() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.MissionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MissionPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.MissionPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.MissionPoint)
    MergeFrom(*source);
  }
}

void MissionPoint::MergeFrom(const MissionPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.MissionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.xg() != 0) {
    set_xg(from.xg());
  }
  if (from.yg() != 0) {
    set_yg(from.yg());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
}

void MissionPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.MissionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionPoint::CopyFrom(const MissionPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.MissionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionPoint::IsInitialized() const {
  return true;
}

void MissionPoint::Swap(MissionPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MissionPoint::InternalSwap(MissionPoint* other) {
  using std::swap;
  swap(xg_, other->xg_);
  swap(yg_, other->yg_);
  swap(heading_, other->heading_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MissionPoint::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MissionLine::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MissionLine::kLineIdFieldNumber;
const int MissionLine::kStartIndexFieldNumber;
const int MissionLine::kEndIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MissionLine::MissionLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionLine();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.MissionLine)
}
MissionLine::MissionLine(const MissionLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  line_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.line_id().size() > 0) {
    line_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_id_);
  }
  ::memcpy(&start_index_, &from.start_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_index_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(end_index_));
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.MissionLine)
}

void MissionLine::SharedCtor() {
  line_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_index_) -
      reinterpret_cast<char*>(&start_index_)) + sizeof(end_index_));
  _cached_size_ = 0;
}

MissionLine::~MissionLine() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.MissionLine)
  SharedDtor();
}

void MissionLine::SharedDtor() {
  line_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MissionLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionLine::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MissionLine& MissionLine::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionLine();
  return *internal_default_instance();
}

MissionLine* MissionLine::New(::google::protobuf::Arena* arena) const {
  MissionLine* n = new MissionLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MissionLine::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.MissionLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  line_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_index_) -
      reinterpret_cast<char*>(&start_index_)) + sizeof(end_index_));
  _internal_metadata_.Clear();
}

bool MissionLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.MissionLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string line_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_line_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->line_id().data(), static_cast<int>(this->line_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mapengine_msgs.MissionLine.line_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 end_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.MissionLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.MissionLine)
  return false;
#undef DO_
}

void MissionLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.MissionLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string line_id = 1;
  if (this->line_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->line_id().data(), static_cast<int>(this->line_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.MissionLine.line_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->line_id(), output);
  }

  // int32 start_index = 2;
  if (this->start_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_index(), output);
  }

  // int32 end_index = 3;
  if (this->end_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.MissionLine)
}

::google::protobuf::uint8* MissionLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.MissionLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string line_id = 1;
  if (this->line_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->line_id().data(), static_cast<int>(this->line_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.MissionLine.line_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->line_id(), target);
  }

  // int32 start_index = 2;
  if (this->start_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start_index(), target);
  }

  // int32 end_index = 3;
  if (this->end_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->end_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.MissionLine)
  return target;
}

size_t MissionLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.MissionLine)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string line_id = 1;
  if (this->line_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->line_id());
  }

  // int32 start_index = 2;
  if (this->start_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_index());
  }

  // int32 end_index = 3;
  if (this->end_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.MissionLine)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionLine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MissionLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.MissionLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.MissionLine)
    MergeFrom(*source);
  }
}

void MissionLine::MergeFrom(const MissionLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.MissionLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.line_id().size() > 0) {

    line_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_id_);
  }
  if (from.start_index() != 0) {
    set_start_index(from.start_index());
  }
  if (from.end_index() != 0) {
    set_end_index(from.end_index());
  }
}

void MissionLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.MissionLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionLine::CopyFrom(const MissionLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.MissionLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionLine::IsInitialized() const {
  return true;
}

void MissionLine::Swap(MissionLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MissionLine::InternalSwap(MissionLine* other) {
  using std::swap;
  line_id_.Swap(&other->line_id_);
  swap(start_index_, other->start_index_);
  swap(end_index_, other->end_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MissionLine::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MissionArea::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MissionArea::kAreaIdFieldNumber;
const int MissionArea::kLineIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MissionArea::MissionArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionArea();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.MissionArea)
}
MissionArea::MissionArea(const MissionArea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  area_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.area_id().size() > 0) {
    area_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.area_id_);
  }
  line_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.line_id().size() > 0) {
    line_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_id_);
  }
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.MissionArea)
}

void MissionArea::SharedCtor() {
  area_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MissionArea::~MissionArea() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.MissionArea)
  SharedDtor();
}

void MissionArea::SharedDtor() {
  area_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MissionArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionArea::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MissionArea& MissionArea::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionArea();
  return *internal_default_instance();
}

MissionArea* MissionArea::New(::google::protobuf::Arena* arena) const {
  MissionArea* n = new MissionArea;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MissionArea::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.MissionArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  area_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool MissionArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.MissionArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string area_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_area_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->area_id().data(), static_cast<int>(this->area_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mapengine_msgs.MissionArea.area_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string line_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_line_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->line_id().data(), static_cast<int>(this->line_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mapengine_msgs.MissionArea.line_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.MissionArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.MissionArea)
  return false;
#undef DO_
}

void MissionArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.MissionArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string area_id = 1;
  if (this->area_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->area_id().data(), static_cast<int>(this->area_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.MissionArea.area_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->area_id(), output);
  }

  // string line_id = 2;
  if (this->line_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->line_id().data(), static_cast<int>(this->line_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.MissionArea.line_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->line_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.MissionArea)
}

::google::protobuf::uint8* MissionArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.MissionArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string area_id = 1;
  if (this->area_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->area_id().data(), static_cast<int>(this->area_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.MissionArea.area_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->area_id(), target);
  }

  // string line_id = 2;
  if (this->line_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->line_id().data(), static_cast<int>(this->line_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.MissionArea.line_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->line_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.MissionArea)
  return target;
}

size_t MissionArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.MissionArea)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string area_id = 1;
  if (this->area_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->area_id());
  }

  // string line_id = 2;
  if (this->line_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->line_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.MissionArea)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MissionArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.MissionArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.MissionArea)
    MergeFrom(*source);
  }
}

void MissionArea::MergeFrom(const MissionArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.MissionArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.area_id().size() > 0) {

    area_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.area_id_);
  }
  if (from.line_id().size() > 0) {

    line_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_id_);
  }
}

void MissionArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.MissionArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionArea::CopyFrom(const MissionArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.MissionArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionArea::IsInitialized() const {
  return true;
}

void MissionArea::Swap(MissionArea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MissionArea::InternalSwap(MissionArea* other) {
  using std::swap;
  area_id_.Swap(&other->area_id_);
  line_id_.Swap(&other->line_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MissionArea::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MissionContent::InitAsDefaultInstance() {
  ::mapengine_msgs::_MissionContent_default_instance_._instance.get_mutable()->point_ = const_cast< ::mapengine_msgs::MissionPoint*>(
      ::mapengine_msgs::MissionPoint::internal_default_instance());
  ::mapengine_msgs::_MissionContent_default_instance_._instance.get_mutable()->line_ = const_cast< ::mapengine_msgs::MissionLine*>(
      ::mapengine_msgs::MissionLine::internal_default_instance());
  ::mapengine_msgs::_MissionContent_default_instance_._instance.get_mutable()->area_ = const_cast< ::mapengine_msgs::MissionArea*>(
      ::mapengine_msgs::MissionArea::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MissionContent::kPointFieldNumber;
const int MissionContent::kLineFieldNumber;
const int MissionContent::kAreaFieldNumber;
const int MissionContent::kTypeFieldNumber;
const int MissionContent::kMissionIdFieldNumber;
const int MissionContent::kIsStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MissionContent::MissionContent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionContent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.MissionContent)
}
MissionContent::MissionContent(const MissionContent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_point()) {
    point_ = new ::mapengine_msgs::MissionPoint(*from.point_);
  } else {
    point_ = NULL;
  }
  if (from.has_line()) {
    line_ = new ::mapengine_msgs::MissionLine(*from.line_);
  } else {
    line_ = NULL;
  }
  if (from.has_area()) {
    area_ = new ::mapengine_msgs::MissionArea(*from.area_);
  } else {
    area_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_stop_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_stop_));
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.MissionContent)
}

void MissionContent::SharedCtor() {
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_stop_) -
      reinterpret_cast<char*>(&point_)) + sizeof(is_stop_));
  _cached_size_ = 0;
}

MissionContent::~MissionContent() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.MissionContent)
  SharedDtor();
}

void MissionContent::SharedDtor() {
  if (this != internal_default_instance()) delete point_;
  if (this != internal_default_instance()) delete line_;
  if (this != internal_default_instance()) delete area_;
}

void MissionContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionContent::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MissionContent& MissionContent::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionContent();
  return *internal_default_instance();
}

MissionContent* MissionContent::New(::google::protobuf::Arena* arena) const {
  MissionContent* n = new MissionContent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MissionContent::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.MissionContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && point_ != NULL) {
    delete point_;
  }
  point_ = NULL;
  if (GetArenaNoVirtual() == NULL && line_ != NULL) {
    delete line_;
  }
  line_ = NULL;
  if (GetArenaNoVirtual() == NULL && area_ != NULL) {
    delete area_;
  }
  area_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_stop_) -
      reinterpret_cast<char*>(&type_)) + sizeof(is_stop_));
  _internal_metadata_.Clear();
}

bool MissionContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.MissionContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mapengine_msgs.MissionPoint point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mapengine_msgs.MissionLine line = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mapengine_msgs.MissionArea area = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mission_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_stop = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.MissionContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.MissionContent)
  return false;
#undef DO_
}

void MissionContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.MissionContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mapengine_msgs.MissionPoint point = 1;
  if (this->has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->point_, output);
  }

  // .mapengine_msgs.MissionLine line = 2;
  if (this->has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->line_, output);
  }

  // .mapengine_msgs.MissionArea area = 3;
  if (this->has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->area_, output);
  }

  // int32 type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // int32 mission_id = 5;
  if (this->mission_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mission_id(), output);
  }

  // bool is_stop = 6;
  if (this->is_stop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_stop(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.MissionContent)
}

::google::protobuf::uint8* MissionContent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.MissionContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mapengine_msgs.MissionPoint point = 1;
  if (this->has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->point_, deterministic, target);
  }

  // .mapengine_msgs.MissionLine line = 2;
  if (this->has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->line_, deterministic, target);
  }

  // .mapengine_msgs.MissionArea area = 3;
  if (this->has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->area_, deterministic, target);
  }

  // int32 type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // int32 mission_id = 5;
  if (this->mission_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mission_id(), target);
  }

  // bool is_stop = 6;
  if (this->is_stop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_stop(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.MissionContent)
  return target;
}

size_t MissionContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.MissionContent)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mapengine_msgs.MissionPoint point = 1;
  if (this->has_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->point_);
  }

  // .mapengine_msgs.MissionLine line = 2;
  if (this->has_line()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->line_);
  }

  // .mapengine_msgs.MissionArea area = 3;
  if (this->has_area()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->area_);
  }

  // int32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 mission_id = 5;
  if (this->mission_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mission_id());
  }

  // bool is_stop = 6;
  if (this->is_stop() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionContent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.MissionContent)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionContent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MissionContent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.MissionContent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.MissionContent)
    MergeFrom(*source);
  }
}

void MissionContent::MergeFrom(const MissionContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.MissionContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_point()) {
    mutable_point()->::mapengine_msgs::MissionPoint::MergeFrom(from.point());
  }
  if (from.has_line()) {
    mutable_line()->::mapengine_msgs::MissionLine::MergeFrom(from.line());
  }
  if (from.has_area()) {
    mutable_area()->::mapengine_msgs::MissionArea::MergeFrom(from.area());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.mission_id() != 0) {
    set_mission_id(from.mission_id());
  }
  if (from.is_stop() != 0) {
    set_is_stop(from.is_stop());
  }
}

void MissionContent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.MissionContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionContent::CopyFrom(const MissionContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.MissionContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionContent::IsInitialized() const {
  return true;
}

void MissionContent::Swap(MissionContent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MissionContent::InternalSwap(MissionContent* other) {
  using std::swap;
  swap(point_, other->point_);
  swap(line_, other->line_);
  swap(area_, other->area_);
  swap(type_, other->type_);
  swap(mission_id_, other->mission_id_);
  swap(is_stop_, other->is_stop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MissionContent::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoutePoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoutePoint::kXgFieldNumber;
const int RoutePoint::kYgFieldNumber;
const int RoutePoint::kHeadingFieldNumber;
const int RoutePoint::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoutePoint::RoutePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsRoutePoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.RoutePoint)
}
RoutePoint::RoutePoint(const RoutePoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&xg_, &from.xg_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&xg_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.RoutePoint)
}

void RoutePoint::SharedCtor() {
  ::memset(&xg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&xg_)) + sizeof(length_));
  _cached_size_ = 0;
}

RoutePoint::~RoutePoint() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.RoutePoint)
  SharedDtor();
}

void RoutePoint::SharedDtor() {
}

void RoutePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoutePoint::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoutePoint& RoutePoint::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsRoutePoint();
  return *internal_default_instance();
}

RoutePoint* RoutePoint::New(::google::protobuf::Arena* arena) const {
  RoutePoint* n = new RoutePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoutePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.RoutePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&xg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&xg_)) + sizeof(length_));
  _internal_metadata_.Clear();
}

bool RoutePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.RoutePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double xg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 length = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.RoutePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.RoutePoint)
  return false;
#undef DO_
}

void RoutePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.RoutePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double xg = 1;
  if (this->xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->xg(), output);
  }

  // double yg = 2;
  if (this->yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->yg(), output);
  }

  // float heading = 3;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->heading(), output);
  }

  // int32 length = 4;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->length(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.RoutePoint)
}

::google::protobuf::uint8* RoutePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.RoutePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double xg = 1;
  if (this->xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->xg(), target);
  }

  // double yg = 2;
  if (this->yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->yg(), target);
  }

  // float heading = 3;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->heading(), target);
  }

  // int32 length = 4;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->length(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.RoutePoint)
  return target;
}

size_t RoutePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.RoutePoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double xg = 1;
  if (this->xg() != 0) {
    total_size += 1 + 8;
  }

  // double yg = 2;
  if (this->yg() != 0) {
    total_size += 1 + 8;
  }

  // float heading = 3;
  if (this->heading() != 0) {
    total_size += 1 + 4;
  }

  // int32 length = 4;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoutePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.RoutePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutePoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoutePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.RoutePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.RoutePoint)
    MergeFrom(*source);
  }
}

void RoutePoint::MergeFrom(const RoutePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.RoutePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.xg() != 0) {
    set_xg(from.xg());
  }
  if (from.yg() != 0) {
    set_yg(from.yg());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void RoutePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.RoutePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutePoint::CopyFrom(const RoutePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.RoutePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutePoint::IsInitialized() const {
  return true;
}

void RoutePoint::Swap(RoutePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoutePoint::InternalSwap(RoutePoint* other) {
  using std::swap;
  swap(xg_, other->xg_);
  swap(yg_, other->yg_);
  swap(heading_, other->heading_);
  swap(length_, other->length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoutePoint::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MissionRoute::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MissionRoute::kGlobalRoadFieldNumber;
const int MissionRoute::kGlobalPathFieldNumber;
const int MissionRoute::kLengthFieldNumber;
const int MissionRoute::kDisToNextTurnFieldNumber;
const int MissionRoute::kNextTurnTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MissionRoute::MissionRoute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionRoute();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.MissionRoute)
}
MissionRoute::MissionRoute(const MissionRoute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      global_road_(from.global_road_),
      global_path_(from.global_path_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_turn_type_) -
    reinterpret_cast<char*>(&length_)) + sizeof(next_turn_type_));
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.MissionRoute)
}

void MissionRoute::SharedCtor() {
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_turn_type_) -
      reinterpret_cast<char*>(&length_)) + sizeof(next_turn_type_));
  _cached_size_ = 0;
}

MissionRoute::~MissionRoute() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.MissionRoute)
  SharedDtor();
}

void MissionRoute::SharedDtor() {
}

void MissionRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionRoute::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MissionRoute& MissionRoute::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMissionRoute();
  return *internal_default_instance();
}

MissionRoute* MissionRoute::New(::google::protobuf::Arena* arena) const {
  MissionRoute* n = new MissionRoute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MissionRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.MissionRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  global_road_.Clear();
  global_path_.Clear();
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_turn_type_) -
      reinterpret_cast<char*>(&length_)) + sizeof(next_turn_type_));
  _internal_metadata_.Clear();
}

bool MissionRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.MissionRoute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string global_road = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_global_road()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->global_road(this->global_road_size() - 1).data(),
            static_cast<int>(this->global_road(this->global_road_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mapengine_msgs.MissionRoute.global_road"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.RoutePoint global_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_global_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dis_to_next_turn = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dis_to_next_turn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 next_turn_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_turn_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.MissionRoute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.MissionRoute)
  return false;
#undef DO_
}

void MissionRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.MissionRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string global_road = 1;
  for (int i = 0, n = this->global_road_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->global_road(i).data(), static_cast<int>(this->global_road(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.MissionRoute.global_road");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->global_road(i), output);
  }

  // repeated .mapengine_msgs.RoutePoint global_path = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->global_path_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->global_path(static_cast<int>(i)), output);
  }

  // float length = 3;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->length(), output);
  }

  // float dis_to_next_turn = 4;
  if (this->dis_to_next_turn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dis_to_next_turn(), output);
  }

  // int32 next_turn_type = 5;
  if (this->next_turn_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->next_turn_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.MissionRoute)
}

::google::protobuf::uint8* MissionRoute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.MissionRoute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string global_road = 1;
  for (int i = 0, n = this->global_road_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->global_road(i).data(), static_cast<int>(this->global_road(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.MissionRoute.global_road");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->global_road(i), target);
  }

  // repeated .mapengine_msgs.RoutePoint global_path = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->global_path_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->global_path(static_cast<int>(i)), deterministic, target);
  }

  // float length = 3;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->length(), target);
  }

  // float dis_to_next_turn = 4;
  if (this->dis_to_next_turn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dis_to_next_turn(), target);
  }

  // int32 next_turn_type = 5;
  if (this->next_turn_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->next_turn_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.MissionRoute)
  return target;
}

size_t MissionRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.MissionRoute)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string global_road = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->global_road_size());
  for (int i = 0, n = this->global_road_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->global_road(i));
  }

  // repeated .mapengine_msgs.RoutePoint global_path = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->global_path_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->global_path(static_cast<int>(i)));
    }
  }

  // float length = 3;
  if (this->length() != 0) {
    total_size += 1 + 4;
  }

  // float dis_to_next_turn = 4;
  if (this->dis_to_next_turn() != 0) {
    total_size += 1 + 4;
  }

  // int32 next_turn_type = 5;
  if (this->next_turn_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->next_turn_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionRoute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.MissionRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionRoute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MissionRoute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.MissionRoute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.MissionRoute)
    MergeFrom(*source);
  }
}

void MissionRoute::MergeFrom(const MissionRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.MissionRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  global_road_.MergeFrom(from.global_road_);
  global_path_.MergeFrom(from.global_path_);
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.dis_to_next_turn() != 0) {
    set_dis_to_next_turn(from.dis_to_next_turn());
  }
  if (from.next_turn_type() != 0) {
    set_next_turn_type(from.next_turn_type());
  }
}

void MissionRoute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.MissionRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionRoute::CopyFrom(const MissionRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.MissionRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionRoute::IsInitialized() const {
  return true;
}

void MissionRoute::Swap(MissionRoute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MissionRoute::InternalSwap(MissionRoute* other) {
  using std::swap;
  global_road_.InternalSwap(&other->global_road_);
  global_path_.InternalSwap(&other->global_path_);
  swap(length_, other->length_);
  swap(dis_to_next_turn_, other->dis_to_next_turn_);
  swap(next_turn_type_, other->next_turn_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MissionRoute::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImuInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImuInfo::kTimeStampFieldNumber;
const int ImuInfo::kXgFieldNumber;
const int ImuInfo::kYgFieldNumber;
const int ImuInfo::kYawFieldNumber;
const int ImuInfo::kVelocityFieldNumber;
const int ImuInfo::kVxFieldNumber;
const int ImuInfo::kVyFieldNumber;
const int ImuInfo::kLocXgDrFieldNumber;
const int ImuInfo::kLocYgDrFieldNumber;
const int ImuInfo::kLocYawDrFieldNumber;
const int ImuInfo::kCorrectionFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImuInfo::ImuInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsImuInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.ImuInfo)
}
ImuInfo::ImuInfo(const ImuInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&correction_flag_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(correction_flag_));
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.ImuInfo)
}

void ImuInfo::SharedCtor() {
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&correction_flag_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(correction_flag_));
  _cached_size_ = 0;
}

ImuInfo::~ImuInfo() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.ImuInfo)
  SharedDtor();
}

void ImuInfo::SharedDtor() {
}

void ImuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImuInfo::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImuInfo& ImuInfo::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsImuInfo();
  return *internal_default_instance();
}

ImuInfo* ImuInfo::New(::google::protobuf::Arena* arena) const {
  ImuInfo* n = new ImuInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImuInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.ImuInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&correction_flag_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(correction_flag_));
  _internal_metadata_.Clear();
}

bool ImuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.ImuInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double time_stamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double xg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double velocity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vx = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vy = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double loc_xg_dr = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loc_xg_dr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double loc_yg_dr = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loc_yg_dr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double loc_yaw_dr = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loc_yaw_dr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool correction_flag = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &correction_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.ImuInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.ImuInfo)
  return false;
#undef DO_
}

void ImuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.ImuInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_stamp = 1;
  if (this->time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time_stamp(), output);
  }

  // double xg = 2;
  if (this->xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->xg(), output);
  }

  // double yg = 3;
  if (this->yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->yg(), output);
  }

  // double yaw = 4;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->yaw(), output);
  }

  // double velocity = 5;
  if (this->velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->velocity(), output);
  }

  // double vx = 6;
  if (this->vx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->vx(), output);
  }

  // double vy = 7;
  if (this->vy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->vy(), output);
  }

  // double loc_xg_dr = 8;
  if (this->loc_xg_dr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->loc_xg_dr(), output);
  }

  // double loc_yg_dr = 9;
  if (this->loc_yg_dr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->loc_yg_dr(), output);
  }

  // double loc_yaw_dr = 10;
  if (this->loc_yaw_dr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->loc_yaw_dr(), output);
  }

  // bool correction_flag = 11;
  if (this->correction_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->correction_flag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.ImuInfo)
}

::google::protobuf::uint8* ImuInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.ImuInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_stamp = 1;
  if (this->time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time_stamp(), target);
  }

  // double xg = 2;
  if (this->xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->xg(), target);
  }

  // double yg = 3;
  if (this->yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->yg(), target);
  }

  // double yaw = 4;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->yaw(), target);
  }

  // double velocity = 5;
  if (this->velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->velocity(), target);
  }

  // double vx = 6;
  if (this->vx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->vx(), target);
  }

  // double vy = 7;
  if (this->vy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->vy(), target);
  }

  // double loc_xg_dr = 8;
  if (this->loc_xg_dr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->loc_xg_dr(), target);
  }

  // double loc_yg_dr = 9;
  if (this->loc_yg_dr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->loc_yg_dr(), target);
  }

  // double loc_yaw_dr = 10;
  if (this->loc_yaw_dr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->loc_yaw_dr(), target);
  }

  // bool correction_flag = 11;
  if (this->correction_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->correction_flag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.ImuInfo)
  return target;
}

size_t ImuInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.ImuInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double time_stamp = 1;
  if (this->time_stamp() != 0) {
    total_size += 1 + 8;
  }

  // double xg = 2;
  if (this->xg() != 0) {
    total_size += 1 + 8;
  }

  // double yg = 3;
  if (this->yg() != 0) {
    total_size += 1 + 8;
  }

  // double yaw = 4;
  if (this->yaw() != 0) {
    total_size += 1 + 8;
  }

  // double velocity = 5;
  if (this->velocity() != 0) {
    total_size += 1 + 8;
  }

  // double vx = 6;
  if (this->vx() != 0) {
    total_size += 1 + 8;
  }

  // double vy = 7;
  if (this->vy() != 0) {
    total_size += 1 + 8;
  }

  // double loc_xg_dr = 8;
  if (this->loc_xg_dr() != 0) {
    total_size += 1 + 8;
  }

  // double loc_yg_dr = 9;
  if (this->loc_yg_dr() != 0) {
    total_size += 1 + 8;
  }

  // double loc_yaw_dr = 10;
  if (this->loc_yaw_dr() != 0) {
    total_size += 1 + 8;
  }

  // bool correction_flag = 11;
  if (this->correction_flag() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImuInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.ImuInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImuInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.ImuInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.ImuInfo)
    MergeFrom(*source);
  }
}

void ImuInfo::MergeFrom(const ImuInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.ImuInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time_stamp() != 0) {
    set_time_stamp(from.time_stamp());
  }
  if (from.xg() != 0) {
    set_xg(from.xg());
  }
  if (from.yg() != 0) {
    set_yg(from.yg());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.velocity() != 0) {
    set_velocity(from.velocity());
  }
  if (from.vx() != 0) {
    set_vx(from.vx());
  }
  if (from.vy() != 0) {
    set_vy(from.vy());
  }
  if (from.loc_xg_dr() != 0) {
    set_loc_xg_dr(from.loc_xg_dr());
  }
  if (from.loc_yg_dr() != 0) {
    set_loc_yg_dr(from.loc_yg_dr());
  }
  if (from.loc_yaw_dr() != 0) {
    set_loc_yaw_dr(from.loc_yaw_dr());
  }
  if (from.correction_flag() != 0) {
    set_correction_flag(from.correction_flag());
  }
}

void ImuInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.ImuInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuInfo::CopyFrom(const ImuInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.ImuInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuInfo::IsInitialized() const {
  return true;
}

void ImuInfo::Swap(ImuInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImuInfo::InternalSwap(ImuInfo* other) {
  using std::swap;
  swap(time_stamp_, other->time_stamp_);
  swap(xg_, other->xg_);
  swap(yg_, other->yg_);
  swap(yaw_, other->yaw_);
  swap(velocity_, other->velocity_);
  swap(vx_, other->vx_);
  swap(vy_, other->vy_);
  swap(loc_xg_dr_, other->loc_xg_dr_);
  swap(loc_yg_dr_, other->loc_yg_dr_);
  swap(loc_yaw_dr_, other->loc_yaw_dr_);
  swap(correction_flag_, other->correction_flag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImuInfo::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficLight::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLight::kIdFieldNumber;
const int TrafficLight::kKeyLightFieldNumber;
const int TrafficLight::kLonIndexFieldNumber;
const int TrafficLight::kXgFieldNumber;
const int TrafficLight::kYgFieldNumber;
const int TrafficLight::kGlobalangleFieldNumber;
const int TrafficLight::kLightSFieldNumber;
const int TrafficLight::kLaneIdFieldNumber;
const int TrafficLight::kSameLightIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLight::TrafficLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsTrafficLight();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      same_light_ids_(from.same_light_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lane_id().size() > 0) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&key_light_, &from.key_light_,
    static_cast<size_t>(reinterpret_cast<char*>(&light_s_) -
    reinterpret_cast<char*>(&key_light_)) + sizeof(light_s_));
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.TrafficLight)
}

void TrafficLight::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_light_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&light_s_) -
      reinterpret_cast<char*>(&key_light_)) + sizeof(light_s_));
  _cached_size_ = 0;
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrafficLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLight::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLight& TrafficLight::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsTrafficLight();
  return *internal_default_instance();
}

TrafficLight* TrafficLight::New(::google::protobuf::Arena* arena) const {
  TrafficLight* n = new TrafficLight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  same_light_ids_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_light_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&light_s_) -
      reinterpret_cast<char*>(&key_light_)) + sizeof(light_s_));
  _internal_metadata_.Clear();
}

bool TrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.TrafficLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mapengine_msgs.TrafficLight.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool key_light = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &key_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lon_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lon_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float xg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float globalangle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &globalangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float light_s = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &light_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lane_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mapengine_msgs.TrafficLight.lane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string same_light_ids = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_same_light_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->same_light_ids(this->same_light_ids_size() - 1).data(),
            static_cast<int>(this->same_light_ids(this->same_light_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mapengine_msgs.TrafficLight.same_light_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.TrafficLight)
  return false;
#undef DO_
}

void TrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.TrafficLight.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // bool key_light = 2;
  if (this->key_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->key_light(), output);
  }

  // int32 lon_index = 3;
  if (this->lon_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lon_index(), output);
  }

  // float xg = 4;
  if (this->xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->xg(), output);
  }

  // float yg = 5;
  if (this->yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->yg(), output);
  }

  // float globalangle = 6;
  if (this->globalangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->globalangle(), output);
  }

  // float light_s = 7;
  if (this->light_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->light_s(), output);
  }

  // string lane_id = 8;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.TrafficLight.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->lane_id(), output);
  }

  // repeated string same_light_ids = 9;
  for (int i = 0, n = this->same_light_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->same_light_ids(i).data(), static_cast<int>(this->same_light_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.TrafficLight.same_light_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->same_light_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.TrafficLight)
}

::google::protobuf::uint8* TrafficLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.TrafficLight.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // bool key_light = 2;
  if (this->key_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->key_light(), target);
  }

  // int32 lon_index = 3;
  if (this->lon_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lon_index(), target);
  }

  // float xg = 4;
  if (this->xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->xg(), target);
  }

  // float yg = 5;
  if (this->yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->yg(), target);
  }

  // float globalangle = 6;
  if (this->globalangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->globalangle(), target);
  }

  // float light_s = 7;
  if (this->light_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->light_s(), target);
  }

  // string lane_id = 8;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.TrafficLight.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lane_id(), target);
  }

  // repeated string same_light_ids = 9;
  for (int i = 0, n = this->same_light_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->same_light_ids(i).data(), static_cast<int>(this->same_light_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.TrafficLight.same_light_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->same_light_ids(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.TrafficLight)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string same_light_ids = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->same_light_ids_size());
  for (int i = 0, n = this->same_light_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->same_light_ids(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string lane_id = 8;
  if (this->lane_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lane_id());
  }

  // bool key_light = 2;
  if (this->key_light() != 0) {
    total_size += 1 + 1;
  }

  // int32 lon_index = 3;
  if (this->lon_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lon_index());
  }

  // float xg = 4;
  if (this->xg() != 0) {
    total_size += 1 + 4;
  }

  // float yg = 5;
  if (this->yg() != 0) {
    total_size += 1 + 4;
  }

  // float globalangle = 6;
  if (this->globalangle() != 0) {
    total_size += 1 + 4;
  }

  // float light_s = 7;
  if (this->light_s() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.TrafficLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  same_light_ids_.MergeFrom(from.same_light_ids_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.lane_id().size() > 0) {

    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  if (from.key_light() != 0) {
    set_key_light(from.key_light());
  }
  if (from.lon_index() != 0) {
    set_lon_index(from.lon_index());
  }
  if (from.xg() != 0) {
    set_xg(from.xg());
  }
  if (from.yg() != 0) {
    set_yg(from.yg());
  }
  if (from.globalangle() != 0) {
    set_globalangle(from.globalangle());
  }
  if (from.light_s() != 0) {
    set_light_s(from.light_s());
  }
}

void TrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::Swap(TrafficLight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLight::InternalSwap(TrafficLight* other) {
  using std::swap;
  same_light_ids_.InternalSwap(&other->same_light_ids_);
  id_.Swap(&other->id_);
  lane_id_.Swap(&other->lane_id_);
  swap(key_light_, other->key_light_);
  swap(lon_index_, other->lon_index_);
  swap(xg_, other->xg_);
  swap(yg_, other->yg_);
  swap(globalangle_, other->globalangle_);
  swap(light_s_, other->light_s_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLight::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&x_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&x_)) + sizeof(angle_));
  _cached_size_ = 0;
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsPoint();
  return *internal_default_instance();
}

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&x_)) + sizeof(angle_));
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // float angle = 3;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // float angle = 3;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.Point)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // float angle = 3;
  if (this->angle() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(angle_, other->angle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReferencePoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferencePoint::kXFieldNumber;
const int ReferencePoint::kYFieldNumber;
const int ReferencePoint::kAngleFieldNumber;
const int ReferencePoint::kXgFieldNumber;
const int ReferencePoint::kYgFieldNumber;
const int ReferencePoint::kAngleglobalFieldNumber;
const int ReferencePoint::kIndexFieldNumber;
const int ReferencePoint::kLengthFieldNumber;
const int ReferencePoint::kCurvatureFieldNumber;
const int ReferencePoint::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReferencePoint::ReferencePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsReferencePoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.ReferencePoint)
}
ReferencePoint::ReferencePoint(const ReferencePoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&x_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.ReferencePoint)
}

void ReferencePoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&x_)) + sizeof(direction_));
  _cached_size_ = 0;
}

ReferencePoint::~ReferencePoint() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.ReferencePoint)
  SharedDtor();
}

void ReferencePoint::SharedDtor() {
}

void ReferencePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferencePoint::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReferencePoint& ReferencePoint::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsReferencePoint();
  return *internal_default_instance();
}

ReferencePoint* ReferencePoint::New(::google::protobuf::Arena* arena) const {
  ReferencePoint* n = new ReferencePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReferencePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.ReferencePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&x_)) + sizeof(direction_));
  _internal_metadata_.Clear();
}

bool ReferencePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.ReferencePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double xg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angleglobal = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angleglobal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float length = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float curvature = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 direction = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.ReferencePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.ReferencePoint)
  return false;
#undef DO_
}

void ReferencePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.ReferencePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float angle = 3;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle(), output);
  }

  // double xg = 4;
  if (this->xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->xg(), output);
  }

  // double yg = 5;
  if (this->yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->yg(), output);
  }

  // float angleglobal = 6;
  if (this->angleglobal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->angleglobal(), output);
  }

  // int64 index = 7;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->index(), output);
  }

  // float length = 8;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->length(), output);
  }

  // float curvature = 9;
  if (this->curvature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->curvature(), output);
  }

  // int32 direction = 10;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->direction(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.ReferencePoint)
}

::google::protobuf::uint8* ReferencePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.ReferencePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float angle = 3;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle(), target);
  }

  // double xg = 4;
  if (this->xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->xg(), target);
  }

  // double yg = 5;
  if (this->yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->yg(), target);
  }

  // float angleglobal = 6;
  if (this->angleglobal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->angleglobal(), target);
  }

  // int64 index = 7;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->index(), target);
  }

  // float length = 8;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->length(), target);
  }

  // float curvature = 9;
  if (this->curvature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->curvature(), target);
  }

  // int32 direction = 10;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->direction(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.ReferencePoint)
  return target;
}

size_t ReferencePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.ReferencePoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // double xg = 4;
  if (this->xg() != 0) {
    total_size += 1 + 8;
  }

  // float angle = 3;
  if (this->angle() != 0) {
    total_size += 1 + 4;
  }

  // float angleglobal = 6;
  if (this->angleglobal() != 0) {
    total_size += 1 + 4;
  }

  // double yg = 5;
  if (this->yg() != 0) {
    total_size += 1 + 8;
  }

  // int64 index = 7;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->index());
  }

  // float length = 8;
  if (this->length() != 0) {
    total_size += 1 + 4;
  }

  // float curvature = 9;
  if (this->curvature() != 0) {
    total_size += 1 + 4;
  }

  // int32 direction = 10;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferencePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.ReferencePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferencePoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReferencePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.ReferencePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.ReferencePoint)
    MergeFrom(*source);
  }
}

void ReferencePoint::MergeFrom(const ReferencePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.ReferencePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.xg() != 0) {
    set_xg(from.xg());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
  if (from.angleglobal() != 0) {
    set_angleglobal(from.angleglobal());
  }
  if (from.yg() != 0) {
    set_yg(from.yg());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.curvature() != 0) {
    set_curvature(from.curvature());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
}

void ReferencePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.ReferencePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferencePoint::CopyFrom(const ReferencePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.ReferencePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferencePoint::IsInitialized() const {
  return true;
}

void ReferencePoint::Swap(ReferencePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReferencePoint::InternalSwap(ReferencePoint* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(xg_, other->xg_);
  swap(angle_, other->angle_);
  swap(angleglobal_, other->angleglobal_);
  swap(yg_, other->yg_);
  swap(index_, other->index_);
  swap(length_, other->length_);
  swap(curvature_, other->curvature_);
  swap(direction_, other->direction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReferencePoint::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AreaRange::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AreaRange::kIdFieldNumber;
const int AreaRange::kTypeFieldNumber;
const int AreaRange::kAreaPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AreaRange::AreaRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsAreaRange();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.AreaRange)
}
AreaRange::AreaRange(const AreaRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      area_points_(from.area_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.AreaRange)
}

void AreaRange::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

AreaRange::~AreaRange() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.AreaRange)
  SharedDtor();
}

void AreaRange::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AreaRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AreaRange::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AreaRange& AreaRange::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsAreaRange();
  return *internal_default_instance();
}

AreaRange* AreaRange::New(::google::protobuf::Arena* arena) const {
  AreaRange* n = new AreaRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AreaRange::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.AreaRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  area_points_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool AreaRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.AreaRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mapengine_msgs.AreaRange.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.Point area_points = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_area_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.AreaRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.AreaRange)
  return false;
#undef DO_
}

void AreaRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.AreaRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.AreaRange.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated .mapengine_msgs.Point area_points = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->area_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->area_points(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.AreaRange)
}

::google::protobuf::uint8* AreaRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.AreaRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.AreaRange.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated .mapengine_msgs.Point area_points = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->area_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->area_points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.AreaRange)
  return target;
}

size_t AreaRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.AreaRange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .mapengine_msgs.Point area_points = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->area_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->area_points(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AreaRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.AreaRange)
  GOOGLE_DCHECK_NE(&from, this);
  const AreaRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AreaRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.AreaRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.AreaRange)
    MergeFrom(*source);
  }
}

void AreaRange::MergeFrom(const AreaRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.AreaRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  area_points_.MergeFrom(from.area_points_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void AreaRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.AreaRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AreaRange::CopyFrom(const AreaRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.AreaRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AreaRange::IsInitialized() const {
  return true;
}

void AreaRange::Swap(AreaRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AreaRange::InternalSwap(AreaRange* other) {
  using std::swap;
  area_points_.InternalSwap(&other->area_points_);
  id_.Swap(&other->id_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AreaRange::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DisRange::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DisRange::kIdFieldNumber;
const int DisRange::kStartSFieldNumber;
const int DisRange::kEndSFieldNumber;
const int DisRange::kValueFieldNumber;
const int DisRange::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DisRange::DisRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsDisRange();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.DisRange)
}
DisRange::DisRange(const DisRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&start_s_, &from.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.DisRange)
}

void DisRange::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&start_s_)) + sizeof(type_));
  _cached_size_ = 0;
}

DisRange::~DisRange() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.DisRange)
  SharedDtor();
}

void DisRange::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DisRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisRange::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DisRange& DisRange::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsDisRange();
  return *internal_default_instance();
}

DisRange* DisRange::New(::google::protobuf::Arena* arena) const {
  DisRange* n = new DisRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DisRange::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.DisRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&start_s_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool DisRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.DisRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mapengine_msgs.DisRange.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float start_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float end_s = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.DisRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.DisRange)
  return false;
#undef DO_
}

void DisRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.DisRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.DisRange.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // float start_s = 2;
  if (this->start_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->start_s(), output);
  }

  // float end_s = 3;
  if (this->end_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->end_s(), output);
  }

  // float value = 4;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->value(), output);
  }

  // int32 type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.DisRange)
}

::google::protobuf::uint8* DisRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.DisRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.DisRange.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // float start_s = 2;
  if (this->start_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->start_s(), target);
  }

  // float end_s = 3;
  if (this->end_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->end_s(), target);
  }

  // float value = 4;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->value(), target);
  }

  // int32 type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.DisRange)
  return target;
}

size_t DisRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.DisRange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // float start_s = 2;
  if (this->start_s() != 0) {
    total_size += 1 + 4;
  }

  // float end_s = 3;
  if (this->end_s() != 0) {
    total_size += 1 + 4;
  }

  // float value = 4;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  // int32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.DisRange)
  GOOGLE_DCHECK_NE(&from, this);
  const DisRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DisRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.DisRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.DisRange)
    MergeFrom(*source);
  }
}

void DisRange::MergeFrom(const DisRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.DisRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.start_s() != 0) {
    set_start_s(from.start_s());
  }
  if (from.end_s() != 0) {
    set_end_s(from.end_s());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DisRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.DisRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisRange::CopyFrom(const DisRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.DisRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisRange::IsInitialized() const {
  return true;
}

void DisRange::Swap(DisRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DisRange::InternalSwap(DisRange* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(start_s_, other->start_s_);
  swap(end_s_, other->end_s_);
  swap(value_, other->value_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DisRange::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FuncInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FuncInfo::kKeyFieldNumber;
const int FuncInfo::kAFieldNumber;
const int FuncInfo::kBFieldNumber;
const int FuncInfo::kCFieldNumber;
const int FuncInfo::kStartXFieldNumber;
const int FuncInfo::kEndXFieldNumber;
const int FuncInfo::kLifeTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FuncInfo::FuncInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsFuncInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.FuncInfo)
}
FuncInfo::FuncInfo(const FuncInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&life_time_) -
    reinterpret_cast<char*>(&key_)) + sizeof(life_time_));
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.FuncInfo)
}

void FuncInfo::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&life_time_) -
      reinterpret_cast<char*>(&key_)) + sizeof(life_time_));
  _cached_size_ = 0;
}

FuncInfo::~FuncInfo() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.FuncInfo)
  SharedDtor();
}

void FuncInfo::SharedDtor() {
}

void FuncInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FuncInfo::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FuncInfo& FuncInfo::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsFuncInfo();
  return *internal_default_instance();
}

FuncInfo* FuncInfo::New(::google::protobuf::Arena* arena) const {
  FuncInfo* n = new FuncInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FuncInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.FuncInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&life_time_) -
      reinterpret_cast<char*>(&key_)) + sizeof(life_time_));
  _internal_metadata_.Clear();
}

bool FuncInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.FuncInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float a = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float c = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float start_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float end_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 life_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &life_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.FuncInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.FuncInfo)
  return false;
#undef DO_
}

void FuncInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.FuncInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // float a = 2;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->a(), output);
  }

  // float b = 3;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->b(), output);
  }

  // float c = 4;
  if (this->c() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->c(), output);
  }

  // float start_x = 5;
  if (this->start_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->start_x(), output);
  }

  // float end_x = 6;
  if (this->end_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->end_x(), output);
  }

  // int32 life_time = 7;
  if (this->life_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->life_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.FuncInfo)
}

::google::protobuf::uint8* FuncInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.FuncInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // float a = 2;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->a(), target);
  }

  // float b = 3;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->b(), target);
  }

  // float c = 4;
  if (this->c() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->c(), target);
  }

  // float start_x = 5;
  if (this->start_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->start_x(), target);
  }

  // float end_x = 6;
  if (this->end_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->end_x(), target);
  }

  // int32 life_time = 7;
  if (this->life_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->life_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.FuncInfo)
  return target;
}

size_t FuncInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.FuncInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());
  }

  // float a = 2;
  if (this->a() != 0) {
    total_size += 1 + 4;
  }

  // float b = 3;
  if (this->b() != 0) {
    total_size += 1 + 4;
  }

  // float c = 4;
  if (this->c() != 0) {
    total_size += 1 + 4;
  }

  // float start_x = 5;
  if (this->start_x() != 0) {
    total_size += 1 + 4;
  }

  // float end_x = 6;
  if (this->end_x() != 0) {
    total_size += 1 + 4;
  }

  // int32 life_time = 7;
  if (this->life_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->life_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FuncInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.FuncInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FuncInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FuncInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.FuncInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.FuncInfo)
    MergeFrom(*source);
  }
}

void FuncInfo::MergeFrom(const FuncInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.FuncInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.c() != 0) {
    set_c(from.c());
  }
  if (from.start_x() != 0) {
    set_start_x(from.start_x());
  }
  if (from.end_x() != 0) {
    set_end_x(from.end_x());
  }
  if (from.life_time() != 0) {
    set_life_time(from.life_time());
  }
}

void FuncInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.FuncInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuncInfo::CopyFrom(const FuncInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.FuncInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuncInfo::IsInitialized() const {
  return true;
}

void FuncInfo::Swap(FuncInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FuncInfo::InternalSwap(FuncInfo* other) {
  using std::swap;
  swap(key_, other->key_);
  swap(a_, other->a_);
  swap(b_, other->b_);
  swap(c_, other->c_);
  swap(start_x_, other->start_x_);
  swap(end_x_, other->end_x_);
  swap(life_time_, other->life_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FuncInfo::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RelationLane::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelationLane::kIdFieldNumber;
const int RelationLane::kStartSFieldNumber;
const int RelationLane::kEndSFieldNumber;
const int RelationLane::kRelationStartSFieldNumber;
const int RelationLane::kRelationEndSFieldNumber;
const int RelationLane::kLonIndexFieldNumber;
const int RelationLane::kConfluenceIndexFieldNumber;
const int RelationLane::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelationLane::RelationLane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsRelationLane();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.RelationLane)
}
RelationLane::RelationLane(const RelationLane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      confluence_index_(from.confluence_index_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&start_s_, &from.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.RelationLane)
}

void RelationLane::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&start_s_)) + sizeof(type_));
  _cached_size_ = 0;
}

RelationLane::~RelationLane() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.RelationLane)
  SharedDtor();
}

void RelationLane::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RelationLane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelationLane::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RelationLane& RelationLane::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsRelationLane();
  return *internal_default_instance();
}

RelationLane* RelationLane::New(::google::protobuf::Arena* arena) const {
  RelationLane* n = new RelationLane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RelationLane::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.RelationLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  confluence_index_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&start_s_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool RelationLane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.RelationLane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mapengine_msgs.RelationLane.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float start_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float end_s = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relation_start_s = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relation_start_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float relation_end_s = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relation_end_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lon_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lon_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 confluence_index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_confluence_index())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_confluence_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.RelationLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.RelationLane)
  return false;
#undef DO_
}

void RelationLane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.RelationLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.RelationLane.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // float start_s = 2;
  if (this->start_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->start_s(), output);
  }

  // float end_s = 3;
  if (this->end_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->end_s(), output);
  }

  // float relation_start_s = 4;
  if (this->relation_start_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->relation_start_s(), output);
  }

  // float relation_end_s = 5;
  if (this->relation_end_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->relation_end_s(), output);
  }

  // int32 lon_index = 6;
  if (this->lon_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lon_index(), output);
  }

  // repeated int32 confluence_index = 7;
  if (this->confluence_index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _confluence_index_cached_byte_size_));
  }
  for (int i = 0, n = this->confluence_index_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->confluence_index(i), output);
  }

  // int32 type = 8;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.RelationLane)
}

::google::protobuf::uint8* RelationLane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.RelationLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.RelationLane.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // float start_s = 2;
  if (this->start_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->start_s(), target);
  }

  // float end_s = 3;
  if (this->end_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->end_s(), target);
  }

  // float relation_start_s = 4;
  if (this->relation_start_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->relation_start_s(), target);
  }

  // float relation_end_s = 5;
  if (this->relation_end_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->relation_end_s(), target);
  }

  // int32 lon_index = 6;
  if (this->lon_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lon_index(), target);
  }

  // repeated int32 confluence_index = 7;
  if (this->confluence_index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _confluence_index_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->confluence_index_, target);
  }

  // int32 type = 8;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.RelationLane)
  return target;
}

size_t RelationLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.RelationLane)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 confluence_index = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->confluence_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _confluence_index_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // float start_s = 2;
  if (this->start_s() != 0) {
    total_size += 1 + 4;
  }

  // float end_s = 3;
  if (this->end_s() != 0) {
    total_size += 1 + 4;
  }

  // float relation_start_s = 4;
  if (this->relation_start_s() != 0) {
    total_size += 1 + 4;
  }

  // float relation_end_s = 5;
  if (this->relation_end_s() != 0) {
    total_size += 1 + 4;
  }

  // int32 lon_index = 6;
  if (this->lon_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lon_index());
  }

  // int32 type = 8;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelationLane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.RelationLane)
  GOOGLE_DCHECK_NE(&from, this);
  const RelationLane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RelationLane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.RelationLane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.RelationLane)
    MergeFrom(*source);
  }
}

void RelationLane::MergeFrom(const RelationLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.RelationLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  confluence_index_.MergeFrom(from.confluence_index_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.start_s() != 0) {
    set_start_s(from.start_s());
  }
  if (from.end_s() != 0) {
    set_end_s(from.end_s());
  }
  if (from.relation_start_s() != 0) {
    set_relation_start_s(from.relation_start_s());
  }
  if (from.relation_end_s() != 0) {
    set_relation_end_s(from.relation_end_s());
  }
  if (from.lon_index() != 0) {
    set_lon_index(from.lon_index());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void RelationLane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.RelationLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationLane::CopyFrom(const RelationLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.RelationLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationLane::IsInitialized() const {
  return true;
}

void RelationLane::Swap(RelationLane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelationLane::InternalSwap(RelationLane* other) {
  using std::swap;
  confluence_index_.InternalSwap(&other->confluence_index_);
  id_.Swap(&other->id_);
  swap(start_s_, other->start_s_);
  swap(end_s_, other->end_s_);
  swap(relation_start_s_, other->relation_start_s_);
  swap(relation_end_s_, other->relation_end_s_);
  swap(lon_index_, other->lon_index_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RelationLane::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Line::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Line::kLineDirectionFieldNumber;
const int Line::kDisToLineFieldNumber;
const int Line::kDisToDiversionFieldNumber;
const int Line::kDisToMergeFieldNumber;
const int Line::kFirstLaneStartSFieldNumber;
const int Line::kDisToDrivingFieldNumber;
const int Line::kAbleDrivingFieldNumber;
const int Line::kLaneIdsFieldNumber;
const int Line::kRelationLanesFieldNumber;
const int Line::kLaneTurnsFieldNumber;
const int Line::kLaneTypesFieldNumber;
const int Line::kLeftBdTypesFieldNumber;
const int Line::kRightBdTypesFieldNumber;
const int Line::kDisToEndsFieldNumber;
const int Line::kExpectedSpeedsFieldNumber;
const int Line::kLeftPassableDistancesFieldNumber;
const int Line::kRightPassableDistancesFieldNumber;
const int Line::kDisToSpeedBumpsFieldNumber;
const int Line::kDisToForbidAreasFieldNumber;
const int Line::kDisToJunctionsFieldNumber;
const int Line::kDisToCrosswalksFieldNumber;
const int Line::kDisToYieldAreasFieldNumber;
const int Line::kDisToStopAreasFieldNumber;
const int Line::kIsolationbeltsFieldNumber;
const int Line::kLanesideLeftFieldNumber;
const int Line::kLanesideRightFieldNumber;
const int Line::kContainLightJunctionFieldNumber;
const int Line::kContainLightSFieldNumber;
const int Line::kTrafficlightsFieldNumber;
const int Line::kMapPointsFieldNumber;
const int Line::kLeftBoundaryFieldNumber;
const int Line::kRightBoundaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Line::Line()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsLine();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.Line)
}
Line::Line(const Line& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lane_ids_(from.lane_ids_),
      relation_lanes_(from.relation_lanes_),
      lane_turns_(from.lane_turns_),
      lane_types_(from.lane_types_),
      left_bd_types_(from.left_bd_types_),
      right_bd_types_(from.right_bd_types_),
      dis_to_ends_(from.dis_to_ends_),
      expected_speeds_(from.expected_speeds_),
      left_passable_distances_(from.left_passable_distances_),
      right_passable_distances_(from.right_passable_distances_),
      dis_to_speed_bumps_(from.dis_to_speed_bumps_),
      dis_to_forbid_areas_(from.dis_to_forbid_areas_),
      dis_to_junctions_(from.dis_to_junctions_),
      dis_to_crosswalks_(from.dis_to_crosswalks_),
      dis_to_yield_areas_(from.dis_to_yield_areas_),
      dis_to_stop_areas_(from.dis_to_stop_areas_),
      isolationbelts_(from.isolationbelts_),
      trafficlights_(from.trafficlights_),
      map_points_(from.map_points_),
      left_boundary_(from.left_boundary_),
      right_boundary_(from.right_boundary_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&line_direction_, &from.line_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&contain_light_s_) -
    reinterpret_cast<char*>(&line_direction_)) + sizeof(contain_light_s_));
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.Line)
}

void Line::SharedCtor() {
  ::memset(&line_direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contain_light_s_) -
      reinterpret_cast<char*>(&line_direction_)) + sizeof(contain_light_s_));
  _cached_size_ = 0;
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.Line)
  SharedDtor();
}

void Line::SharedDtor() {
}

void Line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Line::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Line& Line::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsLine();
  return *internal_default_instance();
}

Line* Line::New(::google::protobuf::Arena* arena) const {
  Line* n = new Line;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_ids_.Clear();
  relation_lanes_.Clear();
  lane_turns_.Clear();
  lane_types_.Clear();
  left_bd_types_.Clear();
  right_bd_types_.Clear();
  dis_to_ends_.Clear();
  expected_speeds_.Clear();
  left_passable_distances_.Clear();
  right_passable_distances_.Clear();
  dis_to_speed_bumps_.Clear();
  dis_to_forbid_areas_.Clear();
  dis_to_junctions_.Clear();
  dis_to_crosswalks_.Clear();
  dis_to_yield_areas_.Clear();
  dis_to_stop_areas_.Clear();
  isolationbelts_.Clear();
  trafficlights_.Clear();
  map_points_.Clear();
  left_boundary_.Clear();
  right_boundary_.Clear();
  ::memset(&line_direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contain_light_s_) -
      reinterpret_cast<char*>(&line_direction_)) + sizeof(contain_light_s_));
  _internal_metadata_.Clear();
}

bool Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.Line)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 line_direction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dis_to_line = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dis_to_line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dis_to_diversion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dis_to_diversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dis_to_merge = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dis_to_merge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float first_lane_start_s = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &first_lane_start_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dis_to_driving = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dis_to_driving_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool able_driving = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &able_driving_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string lane_ids = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lane_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lane_ids(this->lane_ids_size() - 1).data(),
            static_cast<int>(this->lane_ids(this->lane_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mapengine_msgs.Line.lane_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.RelationLane relation_lanes = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_relation_lanes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.DisRange lane_turns = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_lane_turns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.DisRange lane_types = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_lane_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.DisRange left_bd_types = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_left_bd_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.DisRange right_bd_types = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_right_bd_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.DisRange dis_to_ends = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_dis_to_ends()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.DisRange expected_speeds = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_expected_speeds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.DisRange left_passable_distances = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_left_passable_distances()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.DisRange right_passable_distances = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_right_passable_distances()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.DisRange dis_to_speed_bumps = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_dis_to_speed_bumps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.DisRange dis_to_forbid_areas = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_dis_to_forbid_areas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.DisRange dis_to_junctions = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_dis_to_junctions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.DisRange dis_to_crosswalks = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_dis_to_crosswalks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.DisRange dis_to_yield_areas = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_dis_to_yield_areas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.DisRange dis_to_stop_areas = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_dis_to_stop_areas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.AreaRange isolationbelts = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_isolationbelts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float laneside_left = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u /* 205 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &laneside_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float laneside_right = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 213 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &laneside_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool contain_light_junction = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contain_light_junction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float contain_light_s = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u /* 229 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contain_light_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.TrafficLight trafficlights = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_trafficlights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.ReferencePoint map_points = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_map_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.ReferencePoint left_boundary = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_left_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.ReferencePoint right_boundary = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_right_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.Line)
  return false;
#undef DO_
}

void Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 line_direction = 1;
  if (this->line_direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->line_direction(), output);
  }

  // float dis_to_line = 2;
  if (this->dis_to_line() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dis_to_line(), output);
  }

  // float dis_to_diversion = 3;
  if (this->dis_to_diversion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dis_to_diversion(), output);
  }

  // float dis_to_merge = 4;
  if (this->dis_to_merge() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dis_to_merge(), output);
  }

  // float first_lane_start_s = 5;
  if (this->first_lane_start_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->first_lane_start_s(), output);
  }

  // float dis_to_driving = 6;
  if (this->dis_to_driving() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->dis_to_driving(), output);
  }

  // bool able_driving = 7;
  if (this->able_driving() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->able_driving(), output);
  }

  // repeated string lane_ids = 8;
  for (int i = 0, n = this->lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_ids(i).data(), static_cast<int>(this->lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.Line.lane_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->lane_ids(i), output);
  }

  // repeated .mapengine_msgs.RelationLane relation_lanes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->relation_lanes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->relation_lanes(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.DisRange lane_turns = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_turns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->lane_turns(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.DisRange lane_types = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_types_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->lane_types(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.DisRange left_bd_types = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_bd_types_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->left_bd_types(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.DisRange right_bd_types = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_bd_types_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->right_bd_types(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.DisRange dis_to_ends = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dis_to_ends_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->dis_to_ends(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.DisRange expected_speeds = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->expected_speeds_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->expected_speeds(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.DisRange left_passable_distances = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_passable_distances_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->left_passable_distances(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.DisRange right_passable_distances = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_passable_distances_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->right_passable_distances(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.DisRange dis_to_speed_bumps = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dis_to_speed_bumps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->dis_to_speed_bumps(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.DisRange dis_to_forbid_areas = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dis_to_forbid_areas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->dis_to_forbid_areas(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.DisRange dis_to_junctions = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dis_to_junctions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->dis_to_junctions(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.DisRange dis_to_crosswalks = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dis_to_crosswalks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->dis_to_crosswalks(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.DisRange dis_to_yield_areas = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dis_to_yield_areas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->dis_to_yield_areas(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.DisRange dis_to_stop_areas = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dis_to_stop_areas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->dis_to_stop_areas(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.AreaRange isolationbelts = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->isolationbelts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->isolationbelts(static_cast<int>(i)), output);
  }

  // float laneside_left = 25;
  if (this->laneside_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->laneside_left(), output);
  }

  // float laneside_right = 26;
  if (this->laneside_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->laneside_right(), output);
  }

  // bool contain_light_junction = 27;
  if (this->contain_light_junction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->contain_light_junction(), output);
  }

  // float contain_light_s = 28;
  if (this->contain_light_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->contain_light_s(), output);
  }

  // repeated .mapengine_msgs.TrafficLight trafficlights = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trafficlights_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->trafficlights(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.ReferencePoint map_points = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->map_points(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.ReferencePoint left_boundary = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_boundary_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->left_boundary(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.ReferencePoint right_boundary = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_boundary_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->right_boundary(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.Line)
}

::google::protobuf::uint8* Line::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 line_direction = 1;
  if (this->line_direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->line_direction(), target);
  }

  // float dis_to_line = 2;
  if (this->dis_to_line() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dis_to_line(), target);
  }

  // float dis_to_diversion = 3;
  if (this->dis_to_diversion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dis_to_diversion(), target);
  }

  // float dis_to_merge = 4;
  if (this->dis_to_merge() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dis_to_merge(), target);
  }

  // float first_lane_start_s = 5;
  if (this->first_lane_start_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->first_lane_start_s(), target);
  }

  // float dis_to_driving = 6;
  if (this->dis_to_driving() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->dis_to_driving(), target);
  }

  // bool able_driving = 7;
  if (this->able_driving() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->able_driving(), target);
  }

  // repeated string lane_ids = 8;
  for (int i = 0, n = this->lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_ids(i).data(), static_cast<int>(this->lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.Line.lane_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->lane_ids(i), target);
  }

  // repeated .mapengine_msgs.RelationLane relation_lanes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->relation_lanes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->relation_lanes(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.DisRange lane_turns = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_turns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->lane_turns(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.DisRange lane_types = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_types_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->lane_types(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.DisRange left_bd_types = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_bd_types_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->left_bd_types(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.DisRange right_bd_types = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_bd_types_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->right_bd_types(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.DisRange dis_to_ends = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dis_to_ends_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->dis_to_ends(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.DisRange expected_speeds = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->expected_speeds_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->expected_speeds(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.DisRange left_passable_distances = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_passable_distances_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->left_passable_distances(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.DisRange right_passable_distances = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_passable_distances_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->right_passable_distances(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.DisRange dis_to_speed_bumps = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dis_to_speed_bumps_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->dis_to_speed_bumps(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.DisRange dis_to_forbid_areas = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dis_to_forbid_areas_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->dis_to_forbid_areas(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.DisRange dis_to_junctions = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dis_to_junctions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->dis_to_junctions(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.DisRange dis_to_crosswalks = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dis_to_crosswalks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->dis_to_crosswalks(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.DisRange dis_to_yield_areas = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dis_to_yield_areas_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->dis_to_yield_areas(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.DisRange dis_to_stop_areas = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dis_to_stop_areas_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->dis_to_stop_areas(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.AreaRange isolationbelts = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->isolationbelts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->isolationbelts(static_cast<int>(i)), deterministic, target);
  }

  // float laneside_left = 25;
  if (this->laneside_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->laneside_left(), target);
  }

  // float laneside_right = 26;
  if (this->laneside_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->laneside_right(), target);
  }

  // bool contain_light_junction = 27;
  if (this->contain_light_junction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->contain_light_junction(), target);
  }

  // float contain_light_s = 28;
  if (this->contain_light_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->contain_light_s(), target);
  }

  // repeated .mapengine_msgs.TrafficLight trafficlights = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trafficlights_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, this->trafficlights(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.ReferencePoint map_points = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->map_points(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.ReferencePoint left_boundary = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_boundary_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, this->left_boundary(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.ReferencePoint right_boundary = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_boundary_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, this->right_boundary(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.Line)
  return target;
}

size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.Line)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string lane_ids = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->lane_ids_size());
  for (int i = 0, n = this->lane_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lane_ids(i));
  }

  // repeated .mapengine_msgs.RelationLane relation_lanes = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->relation_lanes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->relation_lanes(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.DisRange lane_turns = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_turns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_turns(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.DisRange lane_types = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_types_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_types(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.DisRange left_bd_types = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->left_bd_types_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->left_bd_types(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.DisRange right_bd_types = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->right_bd_types_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->right_bd_types(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.DisRange dis_to_ends = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->dis_to_ends_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dis_to_ends(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.DisRange expected_speeds = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->expected_speeds_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->expected_speeds(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.DisRange left_passable_distances = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->left_passable_distances_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->left_passable_distances(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.DisRange right_passable_distances = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->right_passable_distances_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->right_passable_distances(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.DisRange dis_to_speed_bumps = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->dis_to_speed_bumps_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dis_to_speed_bumps(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.DisRange dis_to_forbid_areas = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->dis_to_forbid_areas_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dis_to_forbid_areas(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.DisRange dis_to_junctions = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->dis_to_junctions_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dis_to_junctions(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.DisRange dis_to_crosswalks = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->dis_to_crosswalks_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dis_to_crosswalks(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.DisRange dis_to_yield_areas = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->dis_to_yield_areas_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dis_to_yield_areas(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.DisRange dis_to_stop_areas = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->dis_to_stop_areas_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dis_to_stop_areas(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.AreaRange isolationbelts = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->isolationbelts_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->isolationbelts(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.TrafficLight trafficlights = 29;
  {
    unsigned int count = static_cast<unsigned int>(this->trafficlights_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trafficlights(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.ReferencePoint map_points = 30;
  {
    unsigned int count = static_cast<unsigned int>(this->map_points_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->map_points(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.ReferencePoint left_boundary = 31;
  {
    unsigned int count = static_cast<unsigned int>(this->left_boundary_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->left_boundary(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.ReferencePoint right_boundary = 32;
  {
    unsigned int count = static_cast<unsigned int>(this->right_boundary_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->right_boundary(static_cast<int>(i)));
    }
  }

  // int32 line_direction = 1;
  if (this->line_direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line_direction());
  }

  // float dis_to_line = 2;
  if (this->dis_to_line() != 0) {
    total_size += 1 + 4;
  }

  // float dis_to_diversion = 3;
  if (this->dis_to_diversion() != 0) {
    total_size += 1 + 4;
  }

  // float dis_to_merge = 4;
  if (this->dis_to_merge() != 0) {
    total_size += 1 + 4;
  }

  // float first_lane_start_s = 5;
  if (this->first_lane_start_s() != 0) {
    total_size += 1 + 4;
  }

  // float dis_to_driving = 6;
  if (this->dis_to_driving() != 0) {
    total_size += 1 + 4;
  }

  // bool able_driving = 7;
  if (this->able_driving() != 0) {
    total_size += 1 + 1;
  }

  // bool contain_light_junction = 27;
  if (this->contain_light_junction() != 0) {
    total_size += 2 + 1;
  }

  // float laneside_left = 25;
  if (this->laneside_left() != 0) {
    total_size += 2 + 4;
  }

  // float laneside_right = 26;
  if (this->laneside_right() != 0) {
    total_size += 2 + 4;
  }

  // float contain_light_s = 28;
  if (this->contain_light_s() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Line::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.Line)
  GOOGLE_DCHECK_NE(&from, this);
  const Line* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Line>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.Line)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.Line)
    MergeFrom(*source);
  }
}

void Line::MergeFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.Line)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_ids_.MergeFrom(from.lane_ids_);
  relation_lanes_.MergeFrom(from.relation_lanes_);
  lane_turns_.MergeFrom(from.lane_turns_);
  lane_types_.MergeFrom(from.lane_types_);
  left_bd_types_.MergeFrom(from.left_bd_types_);
  right_bd_types_.MergeFrom(from.right_bd_types_);
  dis_to_ends_.MergeFrom(from.dis_to_ends_);
  expected_speeds_.MergeFrom(from.expected_speeds_);
  left_passable_distances_.MergeFrom(from.left_passable_distances_);
  right_passable_distances_.MergeFrom(from.right_passable_distances_);
  dis_to_speed_bumps_.MergeFrom(from.dis_to_speed_bumps_);
  dis_to_forbid_areas_.MergeFrom(from.dis_to_forbid_areas_);
  dis_to_junctions_.MergeFrom(from.dis_to_junctions_);
  dis_to_crosswalks_.MergeFrom(from.dis_to_crosswalks_);
  dis_to_yield_areas_.MergeFrom(from.dis_to_yield_areas_);
  dis_to_stop_areas_.MergeFrom(from.dis_to_stop_areas_);
  isolationbelts_.MergeFrom(from.isolationbelts_);
  trafficlights_.MergeFrom(from.trafficlights_);
  map_points_.MergeFrom(from.map_points_);
  left_boundary_.MergeFrom(from.left_boundary_);
  right_boundary_.MergeFrom(from.right_boundary_);
  if (from.line_direction() != 0) {
    set_line_direction(from.line_direction());
  }
  if (from.dis_to_line() != 0) {
    set_dis_to_line(from.dis_to_line());
  }
  if (from.dis_to_diversion() != 0) {
    set_dis_to_diversion(from.dis_to_diversion());
  }
  if (from.dis_to_merge() != 0) {
    set_dis_to_merge(from.dis_to_merge());
  }
  if (from.first_lane_start_s() != 0) {
    set_first_lane_start_s(from.first_lane_start_s());
  }
  if (from.dis_to_driving() != 0) {
    set_dis_to_driving(from.dis_to_driving());
  }
  if (from.able_driving() != 0) {
    set_able_driving(from.able_driving());
  }
  if (from.contain_light_junction() != 0) {
    set_contain_light_junction(from.contain_light_junction());
  }
  if (from.laneside_left() != 0) {
    set_laneside_left(from.laneside_left());
  }
  if (from.laneside_right() != 0) {
    set_laneside_right(from.laneside_right());
  }
  if (from.contain_light_s() != 0) {
    set_contain_light_s(from.contain_light_s());
  }
}

void Line::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {
  return true;
}

void Line::Swap(Line* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Line::InternalSwap(Line* other) {
  using std::swap;
  lane_ids_.InternalSwap(&other->lane_ids_);
  relation_lanes_.InternalSwap(&other->relation_lanes_);
  lane_turns_.InternalSwap(&other->lane_turns_);
  lane_types_.InternalSwap(&other->lane_types_);
  left_bd_types_.InternalSwap(&other->left_bd_types_);
  right_bd_types_.InternalSwap(&other->right_bd_types_);
  dis_to_ends_.InternalSwap(&other->dis_to_ends_);
  expected_speeds_.InternalSwap(&other->expected_speeds_);
  left_passable_distances_.InternalSwap(&other->left_passable_distances_);
  right_passable_distances_.InternalSwap(&other->right_passable_distances_);
  dis_to_speed_bumps_.InternalSwap(&other->dis_to_speed_bumps_);
  dis_to_forbid_areas_.InternalSwap(&other->dis_to_forbid_areas_);
  dis_to_junctions_.InternalSwap(&other->dis_to_junctions_);
  dis_to_crosswalks_.InternalSwap(&other->dis_to_crosswalks_);
  dis_to_yield_areas_.InternalSwap(&other->dis_to_yield_areas_);
  dis_to_stop_areas_.InternalSwap(&other->dis_to_stop_areas_);
  isolationbelts_.InternalSwap(&other->isolationbelts_);
  trafficlights_.InternalSwap(&other->trafficlights_);
  map_points_.InternalSwap(&other->map_points_);
  left_boundary_.InternalSwap(&other->left_boundary_);
  right_boundary_.InternalSwap(&other->right_boundary_);
  swap(line_direction_, other->line_direction_);
  swap(dis_to_line_, other->dis_to_line_);
  swap(dis_to_diversion_, other->dis_to_diversion_);
  swap(dis_to_merge_, other->dis_to_merge_);
  swap(first_lane_start_s_, other->first_lane_start_s_);
  swap(dis_to_driving_, other->dis_to_driving_);
  swap(able_driving_, other->able_driving_);
  swap(contain_light_junction_, other->contain_light_junction_);
  swap(laneside_left_, other->laneside_left_);
  swap(laneside_right_, other->laneside_right_);
  swap(contain_light_s_, other->contain_light_s_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Line::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LineList::InitAsDefaultInstance() {
  ::mapengine_msgs::_LineList_default_instance_._instance.get_mutable()->frontline_ = const_cast< ::mapengine_msgs::Line*>(
      ::mapengine_msgs::Line::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LineList::kFrontlineFieldNumber;
const int LineList::kBacklinesFieldNumber;
const int LineList::kDisLcFieldNumber;
const int LineList::kFirstLcTimeFieldNumber;
const int LineList::kFirstLcIndexFieldNumber;
const int LineList::kAllLcTimeFieldNumber;
const int LineList::kGlobalCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LineList::LineList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsLineList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.LineList)
}
LineList::LineList(const LineList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      backlines_(from.backlines_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_frontline()) {
    frontline_ = new ::mapengine_msgs::Line(*from.frontline_);
  } else {
    frontline_ = NULL;
  }
  ::memcpy(&dis_lc_, &from.dis_lc_,
    static_cast<size_t>(reinterpret_cast<char*>(&global_cost_) -
    reinterpret_cast<char*>(&dis_lc_)) + sizeof(global_cost_));
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.LineList)
}

void LineList::SharedCtor() {
  ::memset(&frontline_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&global_cost_) -
      reinterpret_cast<char*>(&frontline_)) + sizeof(global_cost_));
  _cached_size_ = 0;
}

LineList::~LineList() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.LineList)
  SharedDtor();
}

void LineList::SharedDtor() {
  if (this != internal_default_instance()) delete frontline_;
}

void LineList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineList::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LineList& LineList::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsLineList();
  return *internal_default_instance();
}

LineList* LineList::New(::google::protobuf::Arena* arena) const {
  LineList* n = new LineList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LineList::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.LineList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  backlines_.Clear();
  if (GetArenaNoVirtual() == NULL && frontline_ != NULL) {
    delete frontline_;
  }
  frontline_ = NULL;
  ::memset(&dis_lc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&global_cost_) -
      reinterpret_cast<char*>(&dis_lc_)) + sizeof(global_cost_));
  _internal_metadata_.Clear();
}

bool LineList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.LineList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mapengine_msgs.Line frontline = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frontline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.Line backlines = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_backlines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dis_lc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dis_lc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 first_lc_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_lc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 first_lc_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_lc_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 all_lc_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_lc_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 global_cost = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &global_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.LineList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.LineList)
  return false;
#undef DO_
}

void LineList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.LineList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mapengine_msgs.Line frontline = 1;
  if (this->has_frontline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->frontline_, output);
  }

  // repeated .mapengine_msgs.Line backlines = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->backlines_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->backlines(static_cast<int>(i)), output);
  }

  // double dis_lc = 3;
  if (this->dis_lc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dis_lc(), output);
  }

  // int32 first_lc_time = 4;
  if (this->first_lc_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->first_lc_time(), output);
  }

  // int32 first_lc_index = 5;
  if (this->first_lc_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->first_lc_index(), output);
  }

  // int32 all_lc_time = 6;
  if (this->all_lc_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->all_lc_time(), output);
  }

  // int32 global_cost = 7;
  if (this->global_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->global_cost(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.LineList)
}

::google::protobuf::uint8* LineList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.LineList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mapengine_msgs.Line frontline = 1;
  if (this->has_frontline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->frontline_, deterministic, target);
  }

  // repeated .mapengine_msgs.Line backlines = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->backlines_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->backlines(static_cast<int>(i)), deterministic, target);
  }

  // double dis_lc = 3;
  if (this->dis_lc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dis_lc(), target);
  }

  // int32 first_lc_time = 4;
  if (this->first_lc_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->first_lc_time(), target);
  }

  // int32 first_lc_index = 5;
  if (this->first_lc_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->first_lc_index(), target);
  }

  // int32 all_lc_time = 6;
  if (this->all_lc_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->all_lc_time(), target);
  }

  // int32 global_cost = 7;
  if (this->global_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->global_cost(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.LineList)
  return target;
}

size_t LineList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.LineList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .mapengine_msgs.Line backlines = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->backlines_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->backlines(static_cast<int>(i)));
    }
  }

  // .mapengine_msgs.Line frontline = 1;
  if (this->has_frontline()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->frontline_);
  }

  // double dis_lc = 3;
  if (this->dis_lc() != 0) {
    total_size += 1 + 8;
  }

  // int32 first_lc_time = 4;
  if (this->first_lc_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->first_lc_time());
  }

  // int32 first_lc_index = 5;
  if (this->first_lc_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->first_lc_index());
  }

  // int32 all_lc_time = 6;
  if (this->all_lc_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->all_lc_time());
  }

  // int32 global_cost = 7;
  if (this->global_cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->global_cost());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.LineList)
  GOOGLE_DCHECK_NE(&from, this);
  const LineList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LineList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.LineList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.LineList)
    MergeFrom(*source);
  }
}

void LineList::MergeFrom(const LineList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.LineList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  backlines_.MergeFrom(from.backlines_);
  if (from.has_frontline()) {
    mutable_frontline()->::mapengine_msgs::Line::MergeFrom(from.frontline());
  }
  if (from.dis_lc() != 0) {
    set_dis_lc(from.dis_lc());
  }
  if (from.first_lc_time() != 0) {
    set_first_lc_time(from.first_lc_time());
  }
  if (from.first_lc_index() != 0) {
    set_first_lc_index(from.first_lc_index());
  }
  if (from.all_lc_time() != 0) {
    set_all_lc_time(from.all_lc_time());
  }
  if (from.global_cost() != 0) {
    set_global_cost(from.global_cost());
  }
}

void LineList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.LineList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineList::CopyFrom(const LineList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.LineList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineList::IsInitialized() const {
  return true;
}

void LineList::Swap(LineList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LineList::InternalSwap(LineList* other) {
  using std::swap;
  backlines_.InternalSwap(&other->backlines_);
  swap(frontline_, other->frontline_);
  swap(dis_lc_, other->dis_lc_);
  swap(first_lc_time_, other->first_lc_time_);
  swap(first_lc_index_, other->first_lc_index_);
  swap(all_lc_time_, other->all_lc_time_);
  swap(global_cost_, other->global_cost_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LineList::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapInfo::InitAsDefaultInstance() {
  ::mapengine_msgs::_MapInfo_default_instance_._instance.get_mutable()->revlinelist_ = const_cast< ::mapengine_msgs::LineList*>(
      ::mapengine_msgs::LineList::internal_default_instance());
  ::mapengine_msgs::_MapInfo_default_instance_._instance.get_mutable()->startpoint_ = const_cast< ::mapengine_msgs::Point*>(
      ::mapengine_msgs::Point::internal_default_instance());
  ::mapengine_msgs::_MapInfo_default_instance_._instance.get_mutable()->endpoint_ = const_cast< ::mapengine_msgs::Point*>(
      ::mapengine_msgs::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapInfo::kCurrentLineIndexFieldNumber;
const int MapInfo::kAlllinelistsFieldNumber;
const int MapInfo::kRevlinelistFieldNumber;
const int MapInfo::kStartpointFieldNumber;
const int MapInfo::kEndpointFieldNumber;
const int MapInfo::kDis2EndpointFieldNumber;
const int MapInfo::kChangeTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapInfo::MapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMapInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.MapInfo)
}
MapInfo::MapInfo(const MapInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      alllinelists_(from.alllinelists_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_revlinelist()) {
    revlinelist_ = new ::mapengine_msgs::LineList(*from.revlinelist_);
  } else {
    revlinelist_ = NULL;
  }
  if (from.has_startpoint()) {
    startpoint_ = new ::mapengine_msgs::Point(*from.startpoint_);
  } else {
    startpoint_ = NULL;
  }
  if (from.has_endpoint()) {
    endpoint_ = new ::mapengine_msgs::Point(*from.endpoint_);
  } else {
    endpoint_ = NULL;
  }
  ::memcpy(&current_line_index_, &from.current_line_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_task_) -
    reinterpret_cast<char*>(&current_line_index_)) + sizeof(change_task_));
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.MapInfo)
}

void MapInfo::SharedCtor() {
  ::memset(&revlinelist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_task_) -
      reinterpret_cast<char*>(&revlinelist_)) + sizeof(change_task_));
  _cached_size_ = 0;
}

MapInfo::~MapInfo() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.MapInfo)
  SharedDtor();
}

void MapInfo::SharedDtor() {
  if (this != internal_default_instance()) delete revlinelist_;
  if (this != internal_default_instance()) delete startpoint_;
  if (this != internal_default_instance()) delete endpoint_;
}

void MapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapInfo::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapInfo& MapInfo::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsMapInfo();
  return *internal_default_instance();
}

MapInfo* MapInfo::New(::google::protobuf::Arena* arena) const {
  MapInfo* n = new MapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.MapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alllinelists_.Clear();
  if (GetArenaNoVirtual() == NULL && revlinelist_ != NULL) {
    delete revlinelist_;
  }
  revlinelist_ = NULL;
  if (GetArenaNoVirtual() == NULL && startpoint_ != NULL) {
    delete startpoint_;
  }
  startpoint_ = NULL;
  if (GetArenaNoVirtual() == NULL && endpoint_ != NULL) {
    delete endpoint_;
  }
  endpoint_ = NULL;
  ::memset(&current_line_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_task_) -
      reinterpret_cast<char*>(&current_line_index_)) + sizeof(change_task_));
  _internal_metadata_.Clear();
}

bool MapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.MapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 current_line_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_line_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.LineList alllinelists = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_alllinelists()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mapengine_msgs.LineList revlinelist = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_revlinelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mapengine_msgs.Point startpoint = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_startpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mapengine_msgs.Point endpoint = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_endpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dis2endpoint = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dis2endpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool change_task = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &change_task_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.MapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.MapInfo)
  return false;
#undef DO_
}

void MapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.MapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 current_line_index = 1;
  if (this->current_line_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->current_line_index(), output);
  }

  // repeated .mapengine_msgs.LineList alllinelists = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alllinelists_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->alllinelists(static_cast<int>(i)), output);
  }

  // .mapengine_msgs.LineList revlinelist = 3;
  if (this->has_revlinelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->revlinelist_, output);
  }

  // .mapengine_msgs.Point startpoint = 4;
  if (this->has_startpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->startpoint_, output);
  }

  // .mapengine_msgs.Point endpoint = 5;
  if (this->has_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->endpoint_, output);
  }

  // float dis2endpoint = 6;
  if (this->dis2endpoint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->dis2endpoint(), output);
  }

  // bool change_task = 7;
  if (this->change_task() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->change_task(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.MapInfo)
}

::google::protobuf::uint8* MapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.MapInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 current_line_index = 1;
  if (this->current_line_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->current_line_index(), target);
  }

  // repeated .mapengine_msgs.LineList alllinelists = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alllinelists_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->alllinelists(static_cast<int>(i)), deterministic, target);
  }

  // .mapengine_msgs.LineList revlinelist = 3;
  if (this->has_revlinelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->revlinelist_, deterministic, target);
  }

  // .mapengine_msgs.Point startpoint = 4;
  if (this->has_startpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->startpoint_, deterministic, target);
  }

  // .mapengine_msgs.Point endpoint = 5;
  if (this->has_endpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->endpoint_, deterministic, target);
  }

  // float dis2endpoint = 6;
  if (this->dis2endpoint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->dis2endpoint(), target);
  }

  // bool change_task = 7;
  if (this->change_task() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->change_task(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.MapInfo)
  return target;
}

size_t MapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.MapInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .mapengine_msgs.LineList alllinelists = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->alllinelists_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->alllinelists(static_cast<int>(i)));
    }
  }

  // .mapengine_msgs.LineList revlinelist = 3;
  if (this->has_revlinelist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->revlinelist_);
  }

  // .mapengine_msgs.Point startpoint = 4;
  if (this->has_startpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->startpoint_);
  }

  // .mapengine_msgs.Point endpoint = 5;
  if (this->has_endpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->endpoint_);
  }

  // int32 current_line_index = 1;
  if (this->current_line_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_line_index());
  }

  // float dis2endpoint = 6;
  if (this->dis2endpoint() != 0) {
    total_size += 1 + 4;
  }

  // bool change_task = 7;
  if (this->change_task() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.MapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MapInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.MapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.MapInfo)
    MergeFrom(*source);
  }
}

void MapInfo::MergeFrom(const MapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.MapInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alllinelists_.MergeFrom(from.alllinelists_);
  if (from.has_revlinelist()) {
    mutable_revlinelist()->::mapengine_msgs::LineList::MergeFrom(from.revlinelist());
  }
  if (from.has_startpoint()) {
    mutable_startpoint()->::mapengine_msgs::Point::MergeFrom(from.startpoint());
  }
  if (from.has_endpoint()) {
    mutable_endpoint()->::mapengine_msgs::Point::MergeFrom(from.endpoint());
  }
  if (from.current_line_index() != 0) {
    set_current_line_index(from.current_line_index());
  }
  if (from.dis2endpoint() != 0) {
    set_dis2endpoint(from.dis2endpoint());
  }
  if (from.change_task() != 0) {
    set_change_task(from.change_task());
  }
}

void MapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.MapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapInfo::CopyFrom(const MapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.MapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapInfo::IsInitialized() const {
  return true;
}

void MapInfo::Swap(MapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapInfo::InternalSwap(MapInfo* other) {
  using std::swap;
  alllinelists_.InternalSwap(&other->alllinelists_);
  swap(revlinelist_, other->revlinelist_);
  swap(startpoint_, other->startpoint_);
  swap(endpoint_, other->endpoint_);
  swap(current_line_index_, other->current_line_index_);
  swap(dis2endpoint_, other->dis2endpoint_);
  swap(change_task_, other->change_task_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapInfo::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GlobalPathCommand::InitAsDefaultInstance() {
  ::mapengine_msgs::_GlobalPathCommand_default_instance_._instance.get_mutable()->header_ = const_cast< ::common_msgs::Header*>(
      ::common_msgs::Header::internal_default_instance());
}
void GlobalPathCommand::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GlobalPathCommand::kHeaderFieldNumber;
const int GlobalPathCommand::kMissionCommandFieldNumber;
const int GlobalPathCommand::kMissionRequestVecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GlobalPathCommand::GlobalPathCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsGlobalPathCommand();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.GlobalPathCommand)
}
GlobalPathCommand::GlobalPathCommand(const GlobalPathCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mission_request_vec_(from.mission_request_vec_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::common_msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  mission_command_ = from.mission_command_;
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.GlobalPathCommand)
}

void GlobalPathCommand::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mission_command_) -
      reinterpret_cast<char*>(&header_)) + sizeof(mission_command_));
  _cached_size_ = 0;
}

GlobalPathCommand::~GlobalPathCommand() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.GlobalPathCommand)
  SharedDtor();
}

void GlobalPathCommand::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GlobalPathCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalPathCommand::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GlobalPathCommand& GlobalPathCommand::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsGlobalPathCommand();
  return *internal_default_instance();
}

GlobalPathCommand* GlobalPathCommand::New(::google::protobuf::Arena* arena) const {
  GlobalPathCommand* n = new GlobalPathCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GlobalPathCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.GlobalPathCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mission_request_vec_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  mission_command_ = 0;
  _internal_metadata_.Clear();
}

bool GlobalPathCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.GlobalPathCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common_msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mission_command = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.MissionContent mission_request_vec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_mission_request_vec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.GlobalPathCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.GlobalPathCommand)
  return false;
#undef DO_
}

void GlobalPathCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.GlobalPathCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 mission_command = 2;
  if (this->mission_command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mission_command(), output);
  }

  // repeated .mapengine_msgs.MissionContent mission_request_vec = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mission_request_vec_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mission_request_vec(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.GlobalPathCommand)
}

::google::protobuf::uint8* GlobalPathCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.GlobalPathCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // int32 mission_command = 2;
  if (this->mission_command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mission_command(), target);
  }

  // repeated .mapengine_msgs.MissionContent mission_request_vec = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mission_request_vec_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->mission_request_vec(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.GlobalPathCommand)
  return target;
}

size_t GlobalPathCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.GlobalPathCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .mapengine_msgs.MissionContent mission_request_vec = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->mission_request_vec_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mission_request_vec(static_cast<int>(i)));
    }
  }

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // int32 mission_command = 2;
  if (this->mission_command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mission_command());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalPathCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.GlobalPathCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobalPathCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GlobalPathCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.GlobalPathCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.GlobalPathCommand)
    MergeFrom(*source);
  }
}

void GlobalPathCommand::MergeFrom(const GlobalPathCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.GlobalPathCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mission_request_vec_.MergeFrom(from.mission_request_vec_);
  if (from.has_header()) {
    mutable_header()->::common_msgs::Header::MergeFrom(from.header());
  }
  if (from.mission_command() != 0) {
    set_mission_command(from.mission_command());
  }
}

void GlobalPathCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.GlobalPathCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalPathCommand::CopyFrom(const GlobalPathCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.GlobalPathCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalPathCommand::IsInitialized() const {
  return true;
}

void GlobalPathCommand::Swap(GlobalPathCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GlobalPathCommand::InternalSwap(GlobalPathCommand* other) {
  using std::swap;
  mission_request_vec_.InternalSwap(&other->mission_request_vec_);
  swap(header_, other->header_);
  swap(mission_command_, other->mission_command_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GlobalPathCommand::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GlobalPathResult::InitAsDefaultInstance() {
  ::mapengine_msgs::_GlobalPathResult_default_instance_._instance.get_mutable()->header_ = const_cast< ::common_msgs::Header*>(
      ::common_msgs::Header::internal_default_instance());
}
void GlobalPathResult::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GlobalPathResult::kHeaderFieldNumber;
const int GlobalPathResult::kResultFieldNumber;
const int GlobalPathResult::kMissionResponseVecFieldNumber;
const int GlobalPathResult::kMissionRouteVecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GlobalPathResult::GlobalPathResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsGlobalPathResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.GlobalPathResult)
}
GlobalPathResult::GlobalPathResult(const GlobalPathResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mission_response_vec_(from.mission_response_vec_),
      mission_route_vec_(from.mission_route_vec_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::common_msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.GlobalPathResult)
}

void GlobalPathResult::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&header_)) + sizeof(result_));
  _cached_size_ = 0;
}

GlobalPathResult::~GlobalPathResult() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.GlobalPathResult)
  SharedDtor();
}

void GlobalPathResult::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void GlobalPathResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalPathResult::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GlobalPathResult& GlobalPathResult::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsGlobalPathResult();
  return *internal_default_instance();
}

GlobalPathResult* GlobalPathResult::New(::google::protobuf::Arena* arena) const {
  GlobalPathResult* n = new GlobalPathResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GlobalPathResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.GlobalPathResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mission_response_vec_.Clear();
  mission_route_vec_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  result_ = 0;
  _internal_metadata_.Clear();
}

bool GlobalPathResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.GlobalPathResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common_msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.MissionContent mission_response_vec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_mission_response_vec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.MissionRoute mission_route_vec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_mission_route_vec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.GlobalPathResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.GlobalPathResult)
  return false;
#undef DO_
}

void GlobalPathResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.GlobalPathResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated .mapengine_msgs.MissionContent mission_response_vec = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mission_response_vec_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mission_response_vec(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.MissionRoute mission_route_vec = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mission_route_vec_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mission_route_vec(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.GlobalPathResult)
}

::google::protobuf::uint8* GlobalPathResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.GlobalPathResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated .mapengine_msgs.MissionContent mission_response_vec = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mission_response_vec_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->mission_response_vec(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.MissionRoute mission_route_vec = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mission_route_vec_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->mission_route_vec(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.GlobalPathResult)
  return target;
}

size_t GlobalPathResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.GlobalPathResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .mapengine_msgs.MissionContent mission_response_vec = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->mission_response_vec_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mission_response_vec(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.MissionRoute mission_route_vec = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->mission_route_vec_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mission_route_vec(static_cast<int>(i)));
    }
  }

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalPathResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.GlobalPathResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobalPathResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GlobalPathResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.GlobalPathResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.GlobalPathResult)
    MergeFrom(*source);
  }
}

void GlobalPathResult::MergeFrom(const GlobalPathResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.GlobalPathResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mission_response_vec_.MergeFrom(from.mission_response_vec_);
  mission_route_vec_.MergeFrom(from.mission_route_vec_);
  if (from.has_header()) {
    mutable_header()->::common_msgs::Header::MergeFrom(from.header());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void GlobalPathResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.GlobalPathResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalPathResult::CopyFrom(const GlobalPathResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.GlobalPathResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalPathResult::IsInitialized() const {
  return true;
}

void GlobalPathResult::Swap(GlobalPathResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GlobalPathResult::InternalSwap(GlobalPathResult* other) {
  using std::swap;
  mission_response_vec_.InternalSwap(&other->mission_response_vec_);
  mission_route_vec_.InternalSwap(&other->mission_route_vec_);
  swap(header_, other->header_);
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GlobalPathResult::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NavigationCommand::InitAsDefaultInstance() {
  ::mapengine_msgs::_NavigationCommand_default_instance_._instance.get_mutable()->content_ = const_cast< ::mapengine_msgs::MissionContent*>(
      ::mapengine_msgs::MissionContent::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigationCommand::kMissionIdFieldNumber;
const int NavigationCommand::kCommandFieldNumber;
const int NavigationCommand::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigationCommand::NavigationCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsNavigationCommand();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.NavigationCommand)
}
NavigationCommand::NavigationCommand(const NavigationCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_content()) {
    content_ = new ::mapengine_msgs::MissionContent(*from.content_);
  } else {
    content_ = NULL;
  }
  ::memcpy(&mission_id_, &from.mission_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_) -
    reinterpret_cast<char*>(&mission_id_)) + sizeof(command_));
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.NavigationCommand)
}

void NavigationCommand::SharedCtor() {
  ::memset(&content_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_) -
      reinterpret_cast<char*>(&content_)) + sizeof(command_));
  _cached_size_ = 0;
}

NavigationCommand::~NavigationCommand() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.NavigationCommand)
  SharedDtor();
}

void NavigationCommand::SharedDtor() {
  if (this != internal_default_instance()) delete content_;
}

void NavigationCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavigationCommand::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavigationCommand& NavigationCommand::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsNavigationCommand();
  return *internal_default_instance();
}

NavigationCommand* NavigationCommand::New(::google::protobuf::Arena* arena) const {
  NavigationCommand* n = new NavigationCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NavigationCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.NavigationCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && content_ != NULL) {
    delete content_;
  }
  content_ = NULL;
  ::memset(&mission_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_) -
      reinterpret_cast<char*>(&mission_id_)) + sizeof(command_));
  _internal_metadata_.Clear();
}

bool NavigationCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.NavigationCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 mission_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 command = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mapengine_msgs.MissionContent content = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.NavigationCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.NavigationCommand)
  return false;
#undef DO_
}

void NavigationCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.NavigationCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mission_id = 1;
  if (this->mission_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mission_id(), output);
  }

  // int32 command = 2;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->command(), output);
  }

  // .mapengine_msgs.MissionContent content = 3;
  if (this->has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->content_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.NavigationCommand)
}

::google::protobuf::uint8* NavigationCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.NavigationCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mission_id = 1;
  if (this->mission_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mission_id(), target);
  }

  // int32 command = 2;
  if (this->command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->command(), target);
  }

  // .mapengine_msgs.MissionContent content = 3;
  if (this->has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->content_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.NavigationCommand)
  return target;
}

size_t NavigationCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.NavigationCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .mapengine_msgs.MissionContent content = 3;
  if (this->has_content()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->content_);
  }

  // int32 mission_id = 1;
  if (this->mission_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mission_id());
  }

  // int32 command = 2;
  if (this->command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->command());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavigationCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.NavigationCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigationCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.NavigationCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.NavigationCommand)
    MergeFrom(*source);
  }
}

void NavigationCommand::MergeFrom(const NavigationCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.NavigationCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_content()) {
    mutable_content()->::mapengine_msgs::MissionContent::MergeFrom(from.content());
  }
  if (from.mission_id() != 0) {
    set_mission_id(from.mission_id());
  }
  if (from.command() != 0) {
    set_command(from.command());
  }
}

void NavigationCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.NavigationCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationCommand::CopyFrom(const NavigationCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.NavigationCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationCommand::IsInitialized() const {
  return true;
}

void NavigationCommand::Swap(NavigationCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavigationCommand::InternalSwap(NavigationCommand* other) {
  using std::swap;
  swap(content_, other->content_);
  swap(mission_id_, other->mission_id_);
  swap(command_, other->command_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NavigationCommand::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NavigationResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigationResult::kCurMissionIdFieldNumber;
const int NavigationResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigationResult::NavigationResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsNavigationResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.NavigationResult)
}
NavigationResult::NavigationResult(const NavigationResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_mission_id_, &from.cur_mission_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&cur_mission_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.NavigationResult)
}

void NavigationResult::SharedCtor() {
  ::memset(&cur_mission_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&cur_mission_id_)) + sizeof(result_));
  _cached_size_ = 0;
}

NavigationResult::~NavigationResult() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.NavigationResult)
  SharedDtor();
}

void NavigationResult::SharedDtor() {
}

void NavigationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavigationResult::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavigationResult& NavigationResult::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsNavigationResult();
  return *internal_default_instance();
}

NavigationResult* NavigationResult::New(::google::protobuf::Arena* arena) const {
  NavigationResult* n = new NavigationResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NavigationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.NavigationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cur_mission_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&cur_mission_id_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

bool NavigationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.NavigationResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 cur_mission_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_mission_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.NavigationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.NavigationResult)
  return false;
#undef DO_
}

void NavigationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.NavigationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cur_mission_id = 1;
  if (this->cur_mission_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cur_mission_id(), output);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.NavigationResult)
}

::google::protobuf::uint8* NavigationResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.NavigationResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cur_mission_id = 1;
  if (this->cur_mission_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cur_mission_id(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.NavigationResult)
  return target;
}

size_t NavigationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.NavigationResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 cur_mission_id = 1;
  if (this->cur_mission_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cur_mission_id());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavigationResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.NavigationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigationResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.NavigationResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.NavigationResult)
    MergeFrom(*source);
  }
}

void NavigationResult::MergeFrom(const NavigationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.NavigationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cur_mission_id() != 0) {
    set_cur_mission_id(from.cur_mission_id());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void NavigationResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.NavigationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationResult::CopyFrom(const NavigationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.NavigationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationResult::IsInitialized() const {
  return true;
}

void NavigationResult::Swap(NavigationResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavigationResult::InternalSwap(NavigationResult* other) {
  using std::swap;
  swap(cur_mission_id_, other->cur_mission_id_);
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NavigationResult::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Navigation::InitAsDefaultInstance() {
  ::mapengine_msgs::_Navigation_default_instance_._instance.get_mutable()->header_ = const_cast< ::common_msgs::Header*>(
      ::common_msgs::Header::internal_default_instance());
  ::mapengine_msgs::_Navigation_default_instance_._instance.get_mutable()->map_info_ = const_cast< ::mapengine_msgs::MapInfo*>(
      ::mapengine_msgs::MapInfo::internal_default_instance());
  ::mapengine_msgs::_Navigation_default_instance_._instance.get_mutable()->last_imu_data_ = const_cast< ::mapengine_msgs::ImuInfo*>(
      ::mapengine_msgs::ImuInfo::internal_default_instance());
  ::mapengine_msgs::_Navigation_default_instance_._instance.get_mutable()->imu_data_ = const_cast< ::mapengine_msgs::ImuInfo*>(
      ::mapengine_msgs::ImuInfo::internal_default_instance());
  ::mapengine_msgs::_Navigation_default_instance_._instance.get_mutable()->last_correct_imu_data_ = const_cast< ::mapengine_msgs::ImuInfo*>(
      ::mapengine_msgs::ImuInfo::internal_default_instance());
  ::mapengine_msgs::_Navigation_default_instance_._instance.get_mutable()->correct_imu_data_ = const_cast< ::mapengine_msgs::ImuInfo*>(
      ::mapengine_msgs::ImuInfo::internal_default_instance());
}
void Navigation::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Navigation::kHeaderFieldNumber;
const int Navigation::kIdFieldNumber;
const int Navigation::kMapTypeFieldNumber;
const int Navigation::kStatusFieldNumber;
const int Navigation::kLastVisionInfoFieldNumber;
const int Navigation::kVisionInfoFieldNumber;
const int Navigation::kMapInfoFieldNumber;
const int Navigation::kLastImuDataFieldNumber;
const int Navigation::kImuDataFieldNumber;
const int Navigation::kLastCorrectImuDataFieldNumber;
const int Navigation::kCorrectImuDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Navigation::Navigation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsNavigation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.Navigation)
}
Navigation::Navigation(const Navigation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      last_vision_info_(from.last_vision_info_),
      vision_info_(from.vision_info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::common_msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_map_info()) {
    map_info_ = new ::mapengine_msgs::MapInfo(*from.map_info_);
  } else {
    map_info_ = NULL;
  }
  if (from.has_last_imu_data()) {
    last_imu_data_ = new ::mapengine_msgs::ImuInfo(*from.last_imu_data_);
  } else {
    last_imu_data_ = NULL;
  }
  if (from.has_imu_data()) {
    imu_data_ = new ::mapengine_msgs::ImuInfo(*from.imu_data_);
  } else {
    imu_data_ = NULL;
  }
  if (from.has_last_correct_imu_data()) {
    last_correct_imu_data_ = new ::mapengine_msgs::ImuInfo(*from.last_correct_imu_data_);
  } else {
    last_correct_imu_data_ = NULL;
  }
  if (from.has_correct_imu_data()) {
    correct_imu_data_ = new ::mapengine_msgs::ImuInfo(*from.correct_imu_data_);
  } else {
    correct_imu_data_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.Navigation)
}

void Navigation::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
  _cached_size_ = 0;
}

Navigation::~Navigation() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.Navigation)
  SharedDtor();
}

void Navigation::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete map_info_;
  if (this != internal_default_instance()) delete last_imu_data_;
  if (this != internal_default_instance()) delete imu_data_;
  if (this != internal_default_instance()) delete last_correct_imu_data_;
  if (this != internal_default_instance()) delete correct_imu_data_;
}

void Navigation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Navigation::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Navigation& Navigation::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsNavigation();
  return *internal_default_instance();
}

Navigation* Navigation::New(::google::protobuf::Arena* arena) const {
  Navigation* n = new Navigation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Navigation::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.Navigation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_vision_info_.Clear();
  vision_info_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && map_info_ != NULL) {
    delete map_info_;
  }
  map_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && last_imu_data_ != NULL) {
    delete last_imu_data_;
  }
  last_imu_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && imu_data_ != NULL) {
    delete imu_data_;
  }
  imu_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && last_correct_imu_data_ != NULL) {
    delete last_correct_imu_data_;
  }
  last_correct_imu_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && correct_imu_data_ != NULL) {
    delete correct_imu_data_;
  }
  correct_imu_data_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

bool Navigation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.Navigation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common_msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 map_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.FuncInfo last_vision_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_last_vision_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.FuncInfo vision_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_vision_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mapengine_msgs.MapInfo map_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mapengine_msgs.ImuInfo last_imu_data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_imu_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mapengine_msgs.ImuInfo imu_data = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_imu_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mapengine_msgs.ImuInfo last_correct_imu_data = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_correct_imu_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mapengine_msgs.ImuInfo correct_imu_data = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_correct_imu_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.Navigation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.Navigation)
  return false;
#undef DO_
}

void Navigation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.Navigation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // int32 map_type = 3;
  if (this->map_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_type(), output);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // repeated .mapengine_msgs.FuncInfo last_vision_info = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->last_vision_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->last_vision_info(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.FuncInfo vision_info = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vision_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->vision_info(static_cast<int>(i)), output);
  }

  // .mapengine_msgs.MapInfo map_info = 7;
  if (this->has_map_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->map_info_, output);
  }

  // .mapengine_msgs.ImuInfo last_imu_data = 8;
  if (this->has_last_imu_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->last_imu_data_, output);
  }

  // .mapengine_msgs.ImuInfo imu_data = 9;
  if (this->has_imu_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->imu_data_, output);
  }

  // .mapengine_msgs.ImuInfo last_correct_imu_data = 10;
  if (this->has_last_correct_imu_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->last_correct_imu_data_, output);
  }

  // .mapengine_msgs.ImuInfo correct_imu_data = 11;
  if (this->has_correct_imu_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->correct_imu_data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.Navigation)
}

::google::protobuf::uint8* Navigation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.Navigation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // int32 map_type = 3;
  if (this->map_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_type(), target);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // repeated .mapengine_msgs.FuncInfo last_vision_info = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->last_vision_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->last_vision_info(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.FuncInfo vision_info = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vision_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->vision_info(static_cast<int>(i)), deterministic, target);
  }

  // .mapengine_msgs.MapInfo map_info = 7;
  if (this->has_map_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->map_info_, deterministic, target);
  }

  // .mapengine_msgs.ImuInfo last_imu_data = 8;
  if (this->has_last_imu_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->last_imu_data_, deterministic, target);
  }

  // .mapengine_msgs.ImuInfo imu_data = 9;
  if (this->has_imu_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->imu_data_, deterministic, target);
  }

  // .mapengine_msgs.ImuInfo last_correct_imu_data = 10;
  if (this->has_last_correct_imu_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->last_correct_imu_data_, deterministic, target);
  }

  // .mapengine_msgs.ImuInfo correct_imu_data = 11;
  if (this->has_correct_imu_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->correct_imu_data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.Navigation)
  return target;
}

size_t Navigation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.Navigation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .mapengine_msgs.FuncInfo last_vision_info = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->last_vision_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->last_vision_info(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.FuncInfo vision_info = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->vision_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vision_info(static_cast<int>(i)));
    }
  }

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .mapengine_msgs.MapInfo map_info = 7;
  if (this->has_map_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->map_info_);
  }

  // .mapengine_msgs.ImuInfo last_imu_data = 8;
  if (this->has_last_imu_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->last_imu_data_);
  }

  // .mapengine_msgs.ImuInfo imu_data = 9;
  if (this->has_imu_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->imu_data_);
  }

  // .mapengine_msgs.ImuInfo last_correct_imu_data = 10;
  if (this->has_last_correct_imu_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->last_correct_imu_data_);
  }

  // .mapengine_msgs.ImuInfo correct_imu_data = 11;
  if (this->has_correct_imu_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->correct_imu_data_);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 map_type = 3;
  if (this->map_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->map_type());
  }

  // int32 status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Navigation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.Navigation)
  GOOGLE_DCHECK_NE(&from, this);
  const Navigation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Navigation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.Navigation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.Navigation)
    MergeFrom(*source);
  }
}

void Navigation::MergeFrom(const Navigation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.Navigation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  last_vision_info_.MergeFrom(from.last_vision_info_);
  vision_info_.MergeFrom(from.vision_info_);
  if (from.has_header()) {
    mutable_header()->::common_msgs::Header::MergeFrom(from.header());
  }
  if (from.has_map_info()) {
    mutable_map_info()->::mapengine_msgs::MapInfo::MergeFrom(from.map_info());
  }
  if (from.has_last_imu_data()) {
    mutable_last_imu_data()->::mapengine_msgs::ImuInfo::MergeFrom(from.last_imu_data());
  }
  if (from.has_imu_data()) {
    mutable_imu_data()->::mapengine_msgs::ImuInfo::MergeFrom(from.imu_data());
  }
  if (from.has_last_correct_imu_data()) {
    mutable_last_correct_imu_data()->::mapengine_msgs::ImuInfo::MergeFrom(from.last_correct_imu_data());
  }
  if (from.has_correct_imu_data()) {
    mutable_correct_imu_data()->::mapengine_msgs::ImuInfo::MergeFrom(from.correct_imu_data());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.map_type() != 0) {
    set_map_type(from.map_type());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Navigation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.Navigation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Navigation::CopyFrom(const Navigation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.Navigation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Navigation::IsInitialized() const {
  return true;
}

void Navigation::Swap(Navigation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Navigation::InternalSwap(Navigation* other) {
  using std::swap;
  last_vision_info_.InternalSwap(&other->last_vision_info_);
  vision_info_.InternalSwap(&other->vision_info_);
  swap(header_, other->header_);
  swap(map_info_, other->map_info_);
  swap(last_imu_data_, other->last_imu_data_);
  swap(imu_data_, other->imu_data_);
  swap(last_correct_imu_data_, other->last_correct_imu_data_);
  swap(correct_imu_data_, other->correct_imu_data_);
  swap(id_, other->id_);
  swap(map_type_, other->map_type_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Navigation::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NavMission::InitAsDefaultInstance() {
  ::mapengine_msgs::_NavMission_default_instance_._instance.get_mutable()->header_ = const_cast< ::common_msgs::Header*>(
      ::common_msgs::Header::internal_default_instance());
}
void NavMission::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavMission::kHeaderFieldNumber;
const int NavMission::kIdFieldNumber;
const int NavMission::kTypeFieldNumber;
const int NavMission::kStatusFieldNumber;
const int NavMission::kCurMissionTotalFieldNumber;
const int NavMission::kCurMissionLeftFieldNumber;
const int NavMission::kAllMissionTotalFieldNumber;
const int NavMission::kAllMissionLeftFieldNumber;
const int NavMission::kBusinessAreasFieldNumber;
const int NavMission::kRemainRoadIdFieldNumber;
const int NavMission::kGlobalRoadSuccessFieldNumber;
const int NavMission::kNavigationSuccessFieldNumber;
const int NavMission::kFindCurrentLaneFieldNumber;
const int NavMission::kFailedReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavMission::NavMission()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsNavMission();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.NavMission)
}
NavMission::NavMission(const NavMission& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      business_areas_(from.business_areas_),
      remain_road_id_(from.remain_road_id_),
      failed_reason_(from.failed_reason_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::common_msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&find_current_lane_) -
    reinterpret_cast<char*>(&id_)) + sizeof(find_current_lane_));
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.NavMission)
}

void NavMission::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&find_current_lane_) -
      reinterpret_cast<char*>(&header_)) + sizeof(find_current_lane_));
  _cached_size_ = 0;
}

NavMission::~NavMission() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.NavMission)
  SharedDtor();
}

void NavMission::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void NavMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavMission::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavMission& NavMission::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsNavMission();
  return *internal_default_instance();
}

NavMission* NavMission::New(::google::protobuf::Arena* arena) const {
  NavMission* n = new NavMission;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NavMission::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.NavMission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  business_areas_.Clear();
  remain_road_id_.Clear();
  failed_reason_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&find_current_lane_) -
      reinterpret_cast<char*>(&id_)) + sizeof(find_current_lane_));
  _internal_metadata_.Clear();
}

bool NavMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.NavMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common_msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cur_mission_total = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_mission_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cur_mission_left = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cur_mission_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float all_mission_total = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &all_mission_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float all_mission_left = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &all_mission_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.BusinessArea business_areas = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_business_areas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string remain_road_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_remain_road_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remain_road_id(this->remain_road_id_size() - 1).data(),
            static_cast<int>(this->remain_road_id(this->remain_road_id_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mapengine_msgs.NavMission.remain_road_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool global_road_success = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &global_road_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool navigation_success = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &navigation_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool find_current_lane = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &find_current_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string failed_reason = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_failed_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->failed_reason(this->failed_reason_size() - 1).data(),
            static_cast<int>(this->failed_reason(this->failed_reason_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mapengine_msgs.NavMission.failed_reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.NavMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.NavMission)
  return false;
#undef DO_
}

void NavMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.NavMission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // float cur_mission_total = 5;
  if (this->cur_mission_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cur_mission_total(), output);
  }

  // float cur_mission_left = 6;
  if (this->cur_mission_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->cur_mission_left(), output);
  }

  // float all_mission_total = 7;
  if (this->all_mission_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->all_mission_total(), output);
  }

  // float all_mission_left = 8;
  if (this->all_mission_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->all_mission_left(), output);
  }

  // repeated .mapengine_msgs.BusinessArea business_areas = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->business_areas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->business_areas(static_cast<int>(i)), output);
  }

  // repeated string remain_road_id = 10;
  for (int i = 0, n = this->remain_road_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remain_road_id(i).data(), static_cast<int>(this->remain_road_id(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.NavMission.remain_road_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->remain_road_id(i), output);
  }

  // bool global_road_success = 11;
  if (this->global_road_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->global_road_success(), output);
  }

  // bool navigation_success = 12;
  if (this->navigation_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->navigation_success(), output);
  }

  // bool find_current_lane = 13;
  if (this->find_current_lane() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->find_current_lane(), output);
  }

  // repeated string failed_reason = 14;
  for (int i = 0, n = this->failed_reason_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->failed_reason(i).data(), static_cast<int>(this->failed_reason(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.NavMission.failed_reason");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->failed_reason(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.NavMission)
}

::google::protobuf::uint8* NavMission::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.NavMission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // float cur_mission_total = 5;
  if (this->cur_mission_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cur_mission_total(), target);
  }

  // float cur_mission_left = 6;
  if (this->cur_mission_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->cur_mission_left(), target);
  }

  // float all_mission_total = 7;
  if (this->all_mission_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->all_mission_total(), target);
  }

  // float all_mission_left = 8;
  if (this->all_mission_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->all_mission_left(), target);
  }

  // repeated .mapengine_msgs.BusinessArea business_areas = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->business_areas_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->business_areas(static_cast<int>(i)), deterministic, target);
  }

  // repeated string remain_road_id = 10;
  for (int i = 0, n = this->remain_road_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remain_road_id(i).data(), static_cast<int>(this->remain_road_id(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.NavMission.remain_road_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->remain_road_id(i), target);
  }

  // bool global_road_success = 11;
  if (this->global_road_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->global_road_success(), target);
  }

  // bool navigation_success = 12;
  if (this->navigation_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->navigation_success(), target);
  }

  // bool find_current_lane = 13;
  if (this->find_current_lane() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->find_current_lane(), target);
  }

  // repeated string failed_reason = 14;
  for (int i = 0, n = this->failed_reason_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->failed_reason(i).data(), static_cast<int>(this->failed_reason(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.NavMission.failed_reason");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->failed_reason(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.NavMission)
  return target;
}

size_t NavMission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.NavMission)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .mapengine_msgs.BusinessArea business_areas = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->business_areas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->business_areas(static_cast<int>(i)));
    }
  }

  // repeated string remain_road_id = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->remain_road_id_size());
  for (int i = 0, n = this->remain_road_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->remain_road_id(i));
  }

  // repeated string failed_reason = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->failed_reason_size());
  for (int i = 0, n = this->failed_reason_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->failed_reason(i));
  }

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // float cur_mission_total = 5;
  if (this->cur_mission_total() != 0) {
    total_size += 1 + 4;
  }

  // float cur_mission_left = 6;
  if (this->cur_mission_left() != 0) {
    total_size += 1 + 4;
  }

  // float all_mission_total = 7;
  if (this->all_mission_total() != 0) {
    total_size += 1 + 4;
  }

  // float all_mission_left = 8;
  if (this->all_mission_left() != 0) {
    total_size += 1 + 4;
  }

  // bool global_road_success = 11;
  if (this->global_road_success() != 0) {
    total_size += 1 + 1;
  }

  // bool navigation_success = 12;
  if (this->navigation_success() != 0) {
    total_size += 1 + 1;
  }

  // bool find_current_lane = 13;
  if (this->find_current_lane() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavMission::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.NavMission)
  GOOGLE_DCHECK_NE(&from, this);
  const NavMission* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavMission>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.NavMission)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.NavMission)
    MergeFrom(*source);
  }
}

void NavMission::MergeFrom(const NavMission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.NavMission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  business_areas_.MergeFrom(from.business_areas_);
  remain_road_id_.MergeFrom(from.remain_road_id_);
  failed_reason_.MergeFrom(from.failed_reason_);
  if (from.has_header()) {
    mutable_header()->::common_msgs::Header::MergeFrom(from.header());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.cur_mission_total() != 0) {
    set_cur_mission_total(from.cur_mission_total());
  }
  if (from.cur_mission_left() != 0) {
    set_cur_mission_left(from.cur_mission_left());
  }
  if (from.all_mission_total() != 0) {
    set_all_mission_total(from.all_mission_total());
  }
  if (from.all_mission_left() != 0) {
    set_all_mission_left(from.all_mission_left());
  }
  if (from.global_road_success() != 0) {
    set_global_road_success(from.global_road_success());
  }
  if (from.navigation_success() != 0) {
    set_navigation_success(from.navigation_success());
  }
  if (from.find_current_lane() != 0) {
    set_find_current_lane(from.find_current_lane());
  }
}

void NavMission::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.NavMission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavMission::CopyFrom(const NavMission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.NavMission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavMission::IsInitialized() const {
  return true;
}

void NavMission::Swap(NavMission* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavMission::InternalSwap(NavMission* other) {
  using std::swap;
  business_areas_.InternalSwap(&other->business_areas_);
  remain_road_id_.InternalSwap(&other->remain_road_id_);
  failed_reason_.InternalSwap(&other->failed_reason_);
  swap(header_, other->header_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(status_, other->status_);
  swap(cur_mission_total_, other->cur_mission_total_);
  swap(cur_mission_left_, other->cur_mission_left_);
  swap(all_mission_total_, other->all_mission_total_);
  swap(all_mission_left_, other->all_mission_left_);
  swap(global_road_success_, other->global_road_success_);
  swap(navigation_success_, other->navigation_success_);
  swap(find_current_lane_, other->find_current_lane_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NavMission::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Debug::InitAsDefaultInstance() {
  ::mapengine_msgs::_Debug_default_instance_._instance.get_mutable()->route_command_ = const_cast< ::mapengine_msgs::GlobalPathCommand*>(
      ::mapengine_msgs::GlobalPathCommand::internal_default_instance());
  ::mapengine_msgs::_Debug_default_instance_._instance.get_mutable()->nav_command_ = const_cast< ::mapengine_msgs::NavigationCommand*>(
      ::mapengine_msgs::NavigationCommand::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug::kRouteCommandFieldNumber;
const int Debug::kNavCommandFieldNumber;
const int Debug::kMissionRoadIdFieldNumber;
const int Debug::kGlobalRoadFieldNumber;
const int Debug::kGlobalRoadSuccessFieldNumber;
const int Debug::kNavigationSuccessFieldNumber;
const int Debug::kFindCurrentLaneFieldNumber;
const int Debug::kFailedReasonFieldNumber;
const int Debug::kCurrentRoadIndexFieldNumber;
const int Debug::kRouteplanCostTimeFieldNumber;
const int Debug::kGloballaneCostTimeFieldNumber;
const int Debug::kNavigationCostTimeFieldNumber;
const int Debug::kMinDeltaFieldNumber;
const int Debug::kLocListTimeFieldNumber;
const int Debug::kSimVisionTimeFieldNumber;
const int Debug::kInTunnelFlagFieldNumber;
const int Debug::kGccsDrFieldNumber;
const int Debug::kVisionInfoFieldNumber;
const int Debug::kMapInfoFieldNumber;
const int Debug::kLocVisionStateFieldNumber;
const int Debug::kLocVisionStringFieldNumber;
const int Debug::kCorrectionCostFieldNumber;
const int Debug::kDeltaYawFieldNumber;
const int Debug::kDeltaDisFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug::Debug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsDebug();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mapengine_msgs.Debug)
}
Debug::Debug(const Debug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mission_road_id_(from.mission_road_id_),
      global_road_(from.global_road_),
      failed_reason_(from.failed_reason_),
      loc_list_time_(from.loc_list_time_),
      vision_info_(from.vision_info_),
      map_info_(from.map_info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  loc_vision_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.loc_vision_string().size() > 0) {
    loc_vision_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loc_vision_string_);
  }
  if (from.has_route_command()) {
    route_command_ = new ::mapengine_msgs::GlobalPathCommand(*from.route_command_);
  } else {
    route_command_ = NULL;
  }
  if (from.has_nav_command()) {
    nav_command_ = new ::mapengine_msgs::NavigationCommand(*from.nav_command_);
  } else {
    nav_command_ = NULL;
  }
  ::memcpy(&global_road_success_, &from.global_road_success_,
    static_cast<size_t>(reinterpret_cast<char*>(&delta_dis_) -
    reinterpret_cast<char*>(&global_road_success_)) + sizeof(delta_dis_));
  // @@protoc_insertion_point(copy_constructor:mapengine_msgs.Debug)
}

void Debug::SharedCtor() {
  loc_vision_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&route_command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delta_dis_) -
      reinterpret_cast<char*>(&route_command_)) + sizeof(delta_dis_));
  _cached_size_ = 0;
}

Debug::~Debug() {
  // @@protoc_insertion_point(destructor:mapengine_msgs.Debug)
  SharedDtor();
}

void Debug::SharedDtor() {
  loc_vision_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete route_command_;
  if (this != internal_default_instance()) delete nav_command_;
}

void Debug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug::descriptor() {
  ::protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Debug& Debug::default_instance() {
  ::protobuf_mapengine_5fmsgs_2eproto::InitDefaultsDebug();
  return *internal_default_instance();
}

Debug* Debug::New(::google::protobuf::Arena* arena) const {
  Debug* n = new Debug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug::Clear() {
// @@protoc_insertion_point(message_clear_start:mapengine_msgs.Debug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mission_road_id_.Clear();
  global_road_.Clear();
  failed_reason_.Clear();
  loc_list_time_.Clear();
  vision_info_.Clear();
  map_info_.Clear();
  loc_vision_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && route_command_ != NULL) {
    delete route_command_;
  }
  route_command_ = NULL;
  if (GetArenaNoVirtual() == NULL && nav_command_ != NULL) {
    delete nav_command_;
  }
  nav_command_ = NULL;
  ::memset(&global_road_success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delta_dis_) -
      reinterpret_cast<char*>(&global_road_success_)) + sizeof(delta_dis_));
  _internal_metadata_.Clear();
}

bool Debug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mapengine_msgs.Debug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mapengine_msgs.GlobalPathCommand route_command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_route_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .mapengine_msgs.NavigationCommand nav_command = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nav_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string mission_road_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mission_road_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mission_road_id(this->mission_road_id_size() - 1).data(),
            static_cast<int>(this->mission_road_id(this->mission_road_id_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mapengine_msgs.Debug.mission_road_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string global_road = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_global_road()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->global_road(this->global_road_size() - 1).data(),
            static_cast<int>(this->global_road(this->global_road_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mapengine_msgs.Debug.global_road"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool global_road_success = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &global_road_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool navigation_success = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &navigation_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool find_current_lane = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &find_current_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string failed_reason = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_failed_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->failed_reason(this->failed_reason_size() - 1).data(),
            static_cast<int>(this->failed_reason(this->failed_reason_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mapengine_msgs.Debug.failed_reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 current_road_index = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_road_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float routeplan_cost_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &routeplan_cost_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float globallane_cost_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &globallane_cost_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float navigation_cost_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &navigation_cost_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_delta = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double loc_list_time = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_loc_list_time())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 114u, input, this->mutable_loc_list_time())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sim_vision_time = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sim_vision_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool in_tunnel_flag = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_tunnel_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool gccs_dr = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gccs_dr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.FuncInfo vision_info = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_vision_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mapengine_msgs.FuncInfo map_info = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_map_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 loc_vision_state = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loc_vision_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string loc_vision_string = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loc_vision_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->loc_vision_string().data(), static_cast<int>(this->loc_vision_string().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "mapengine_msgs.Debug.loc_vision_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float correction_cost = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &correction_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float delta_yaw = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 197 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float delta_dis = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u /* 205 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_dis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mapengine_msgs.Debug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mapengine_msgs.Debug)
  return false;
#undef DO_
}

void Debug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mapengine_msgs.Debug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mapengine_msgs.GlobalPathCommand route_command = 1;
  if (this->has_route_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->route_command_, output);
  }

  // .mapengine_msgs.NavigationCommand nav_command = 2;
  if (this->has_nav_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->nav_command_, output);
  }

  // repeated string mission_road_id = 3;
  for (int i = 0, n = this->mission_road_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mission_road_id(i).data(), static_cast<int>(this->mission_road_id(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.Debug.mission_road_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mission_road_id(i), output);
  }

  // repeated string global_road = 4;
  for (int i = 0, n = this->global_road_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->global_road(i).data(), static_cast<int>(this->global_road(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.Debug.global_road");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->global_road(i), output);
  }

  // bool global_road_success = 5;
  if (this->global_road_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->global_road_success(), output);
  }

  // bool navigation_success = 6;
  if (this->navigation_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->navigation_success(), output);
  }

  // bool find_current_lane = 7;
  if (this->find_current_lane() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->find_current_lane(), output);
  }

  // repeated string failed_reason = 8;
  for (int i = 0, n = this->failed_reason_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->failed_reason(i).data(), static_cast<int>(this->failed_reason(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.Debug.failed_reason");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->failed_reason(i), output);
  }

  // uint32 current_road_index = 9;
  if (this->current_road_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->current_road_index(), output);
  }

  // float routeplan_cost_time = 10;
  if (this->routeplan_cost_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->routeplan_cost_time(), output);
  }

  // float globallane_cost_time = 11;
  if (this->globallane_cost_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->globallane_cost_time(), output);
  }

  // float navigation_cost_time = 12;
  if (this->navigation_cost_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->navigation_cost_time(), output);
  }

  // float min_delta = 13;
  if (this->min_delta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->min_delta(), output);
  }

  // repeated double loc_list_time = 14;
  if (this->loc_list_time_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _loc_list_time_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->loc_list_time().data(), this->loc_list_time_size(), output);
  }

  // uint32 sim_vision_time = 15;
  if (this->sim_vision_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->sim_vision_time(), output);
  }

  // bool in_tunnel_flag = 16;
  if (this->in_tunnel_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->in_tunnel_flag(), output);
  }

  // bool gccs_dr = 17;
  if (this->gccs_dr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->gccs_dr(), output);
  }

  // repeated .mapengine_msgs.FuncInfo vision_info = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vision_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->vision_info(static_cast<int>(i)), output);
  }

  // repeated .mapengine_msgs.FuncInfo map_info = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->map_info(static_cast<int>(i)), output);
  }

  // int32 loc_vision_state = 20;
  if (this->loc_vision_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->loc_vision_state(), output);
  }

  // string loc_vision_string = 21;
  if (this->loc_vision_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->loc_vision_string().data(), static_cast<int>(this->loc_vision_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.Debug.loc_vision_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->loc_vision_string(), output);
  }

  // float correction_cost = 23;
  if (this->correction_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->correction_cost(), output);
  }

  // float delta_yaw = 24;
  if (this->delta_yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->delta_yaw(), output);
  }

  // float delta_dis = 25;
  if (this->delta_dis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->delta_dis(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:mapengine_msgs.Debug)
}

::google::protobuf::uint8* Debug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mapengine_msgs.Debug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mapengine_msgs.GlobalPathCommand route_command = 1;
  if (this->has_route_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->route_command_, deterministic, target);
  }

  // .mapengine_msgs.NavigationCommand nav_command = 2;
  if (this->has_nav_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->nav_command_, deterministic, target);
  }

  // repeated string mission_road_id = 3;
  for (int i = 0, n = this->mission_road_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mission_road_id(i).data(), static_cast<int>(this->mission_road_id(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.Debug.mission_road_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->mission_road_id(i), target);
  }

  // repeated string global_road = 4;
  for (int i = 0, n = this->global_road_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->global_road(i).data(), static_cast<int>(this->global_road(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.Debug.global_road");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->global_road(i), target);
  }

  // bool global_road_success = 5;
  if (this->global_road_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->global_road_success(), target);
  }

  // bool navigation_success = 6;
  if (this->navigation_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->navigation_success(), target);
  }

  // bool find_current_lane = 7;
  if (this->find_current_lane() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->find_current_lane(), target);
  }

  // repeated string failed_reason = 8;
  for (int i = 0, n = this->failed_reason_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->failed_reason(i).data(), static_cast<int>(this->failed_reason(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.Debug.failed_reason");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->failed_reason(i), target);
  }

  // uint32 current_road_index = 9;
  if (this->current_road_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->current_road_index(), target);
  }

  // float routeplan_cost_time = 10;
  if (this->routeplan_cost_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->routeplan_cost_time(), target);
  }

  // float globallane_cost_time = 11;
  if (this->globallane_cost_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->globallane_cost_time(), target);
  }

  // float navigation_cost_time = 12;
  if (this->navigation_cost_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->navigation_cost_time(), target);
  }

  // float min_delta = 13;
  if (this->min_delta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->min_delta(), target);
  }

  // repeated double loc_list_time = 14;
  if (this->loc_list_time_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _loc_list_time_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->loc_list_time_, target);
  }

  // uint32 sim_vision_time = 15;
  if (this->sim_vision_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->sim_vision_time(), target);
  }

  // bool in_tunnel_flag = 16;
  if (this->in_tunnel_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->in_tunnel_flag(), target);
  }

  // bool gccs_dr = 17;
  if (this->gccs_dr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->gccs_dr(), target);
  }

  // repeated .mapengine_msgs.FuncInfo vision_info = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vision_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->vision_info(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mapengine_msgs.FuncInfo map_info = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->map_info(static_cast<int>(i)), deterministic, target);
  }

  // int32 loc_vision_state = 20;
  if (this->loc_vision_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->loc_vision_state(), target);
  }

  // string loc_vision_string = 21;
  if (this->loc_vision_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->loc_vision_string().data(), static_cast<int>(this->loc_vision_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "mapengine_msgs.Debug.loc_vision_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->loc_vision_string(), target);
  }

  // float correction_cost = 23;
  if (this->correction_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->correction_cost(), target);
  }

  // float delta_yaw = 24;
  if (this->delta_yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->delta_yaw(), target);
  }

  // float delta_dis = 25;
  if (this->delta_dis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->delta_dis(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mapengine_msgs.Debug)
  return target;
}

size_t Debug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mapengine_msgs.Debug)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string mission_road_id = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mission_road_id_size());
  for (int i = 0, n = this->mission_road_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mission_road_id(i));
  }

  // repeated string global_road = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->global_road_size());
  for (int i = 0, n = this->global_road_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->global_road(i));
  }

  // repeated string failed_reason = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->failed_reason_size());
  for (int i = 0, n = this->failed_reason_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->failed_reason(i));
  }

  // repeated double loc_list_time = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->loc_list_time_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _loc_list_time_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .mapengine_msgs.FuncInfo vision_info = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->vision_info_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vision_info(static_cast<int>(i)));
    }
  }

  // repeated .mapengine_msgs.FuncInfo map_info = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->map_info_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->map_info(static_cast<int>(i)));
    }
  }

  // string loc_vision_string = 21;
  if (this->loc_vision_string().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->loc_vision_string());
  }

  // .mapengine_msgs.GlobalPathCommand route_command = 1;
  if (this->has_route_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->route_command_);
  }

  // .mapengine_msgs.NavigationCommand nav_command = 2;
  if (this->has_nav_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->nav_command_);
  }

  // bool global_road_success = 5;
  if (this->global_road_success() != 0) {
    total_size += 1 + 1;
  }

  // bool navigation_success = 6;
  if (this->navigation_success() != 0) {
    total_size += 1 + 1;
  }

  // bool find_current_lane = 7;
  if (this->find_current_lane() != 0) {
    total_size += 1 + 1;
  }

  // bool in_tunnel_flag = 16;
  if (this->in_tunnel_flag() != 0) {
    total_size += 2 + 1;
  }

  // uint32 current_road_index = 9;
  if (this->current_road_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->current_road_index());
  }

  // float routeplan_cost_time = 10;
  if (this->routeplan_cost_time() != 0) {
    total_size += 1 + 4;
  }

  // float globallane_cost_time = 11;
  if (this->globallane_cost_time() != 0) {
    total_size += 1 + 4;
  }

  // float navigation_cost_time = 12;
  if (this->navigation_cost_time() != 0) {
    total_size += 1 + 4;
  }

  // float min_delta = 13;
  if (this->min_delta() != 0) {
    total_size += 1 + 4;
  }

  // uint32 sim_vision_time = 15;
  if (this->sim_vision_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sim_vision_time());
  }

  // bool gccs_dr = 17;
  if (this->gccs_dr() != 0) {
    total_size += 2 + 1;
  }

  // int32 loc_vision_state = 20;
  if (this->loc_vision_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->loc_vision_state());
  }

  // float correction_cost = 23;
  if (this->correction_cost() != 0) {
    total_size += 2 + 4;
  }

  // float delta_yaw = 24;
  if (this->delta_yaw() != 0) {
    total_size += 2 + 4;
  }

  // float delta_dis = 25;
  if (this->delta_dis() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mapengine_msgs.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mapengine_msgs.Debug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mapengine_msgs.Debug)
    MergeFrom(*source);
  }
}

void Debug::MergeFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mapengine_msgs.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mission_road_id_.MergeFrom(from.mission_road_id_);
  global_road_.MergeFrom(from.global_road_);
  failed_reason_.MergeFrom(from.failed_reason_);
  loc_list_time_.MergeFrom(from.loc_list_time_);
  vision_info_.MergeFrom(from.vision_info_);
  map_info_.MergeFrom(from.map_info_);
  if (from.loc_vision_string().size() > 0) {

    loc_vision_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loc_vision_string_);
  }
  if (from.has_route_command()) {
    mutable_route_command()->::mapengine_msgs::GlobalPathCommand::MergeFrom(from.route_command());
  }
  if (from.has_nav_command()) {
    mutable_nav_command()->::mapengine_msgs::NavigationCommand::MergeFrom(from.nav_command());
  }
  if (from.global_road_success() != 0) {
    set_global_road_success(from.global_road_success());
  }
  if (from.navigation_success() != 0) {
    set_navigation_success(from.navigation_success());
  }
  if (from.find_current_lane() != 0) {
    set_find_current_lane(from.find_current_lane());
  }
  if (from.in_tunnel_flag() != 0) {
    set_in_tunnel_flag(from.in_tunnel_flag());
  }
  if (from.current_road_index() != 0) {
    set_current_road_index(from.current_road_index());
  }
  if (from.routeplan_cost_time() != 0) {
    set_routeplan_cost_time(from.routeplan_cost_time());
  }
  if (from.globallane_cost_time() != 0) {
    set_globallane_cost_time(from.globallane_cost_time());
  }
  if (from.navigation_cost_time() != 0) {
    set_navigation_cost_time(from.navigation_cost_time());
  }
  if (from.min_delta() != 0) {
    set_min_delta(from.min_delta());
  }
  if (from.sim_vision_time() != 0) {
    set_sim_vision_time(from.sim_vision_time());
  }
  if (from.gccs_dr() != 0) {
    set_gccs_dr(from.gccs_dr());
  }
  if (from.loc_vision_state() != 0) {
    set_loc_vision_state(from.loc_vision_state());
  }
  if (from.correction_cost() != 0) {
    set_correction_cost(from.correction_cost());
  }
  if (from.delta_yaw() != 0) {
    set_delta_yaw(from.delta_yaw());
  }
  if (from.delta_dis() != 0) {
    set_delta_dis(from.delta_dis());
  }
}

void Debug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mapengine_msgs.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug::CopyFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mapengine_msgs.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug::IsInitialized() const {
  return true;
}

void Debug::Swap(Debug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug::InternalSwap(Debug* other) {
  using std::swap;
  mission_road_id_.InternalSwap(&other->mission_road_id_);
  global_road_.InternalSwap(&other->global_road_);
  failed_reason_.InternalSwap(&other->failed_reason_);
  loc_list_time_.InternalSwap(&other->loc_list_time_);
  vision_info_.InternalSwap(&other->vision_info_);
  map_info_.InternalSwap(&other->map_info_);
  loc_vision_string_.Swap(&other->loc_vision_string_);
  swap(route_command_, other->route_command_);
  swap(nav_command_, other->nav_command_);
  swap(global_road_success_, other->global_road_success_);
  swap(navigation_success_, other->navigation_success_);
  swap(find_current_lane_, other->find_current_lane_);
  swap(in_tunnel_flag_, other->in_tunnel_flag_);
  swap(current_road_index_, other->current_road_index_);
  swap(routeplan_cost_time_, other->routeplan_cost_time_);
  swap(globallane_cost_time_, other->globallane_cost_time_);
  swap(navigation_cost_time_, other->navigation_cost_time_);
  swap(min_delta_, other->min_delta_);
  swap(sim_vision_time_, other->sim_vision_time_);
  swap(gccs_dr_, other->gccs_dr_);
  swap(loc_vision_state_, other->loc_vision_state_);
  swap(correction_cost_, other->correction_cost_);
  swap(delta_yaw_, other->delta_yaw_);
  swap(delta_dis_, other->delta_dis_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug::GetMetadata() const {
  protobuf_mapengine_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mapengine_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mapengine_msgs

// @@protoc_insertion_point(global_scope)
