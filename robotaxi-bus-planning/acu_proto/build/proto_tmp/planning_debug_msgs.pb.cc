// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning_debug_msgs.proto

#include "planning_debug_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace planning_debug_msgs {
class DebugStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugState>
      _instance;
} _DebugState_default_instance_;
class SLPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SLPoint>
      _instance;
} _SLPoint_default_instance_;
class SpeedPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedPoint>
      _instance;
} _SpeedPoint_default_instance_;
class DebugMotionPlanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugMotionPlan>
      _instance;
} _DebugMotionPlan_default_instance_;
class STpairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<STpair>
      _instance;
} _STpair_default_instance_;
class DebugPdObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugPdObject>
      _instance;
} _DebugPdObject_default_instance_;
class DebugObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugObject>
      _instance;
} _DebugObject_default_instance_;
class DebugGapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugGap>
      _instance;
} _DebugGap_default_instance_;
class DebugLineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugLine>
      _instance;
} _DebugLine_default_instance_;
class DebugLightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugLight>
      _instance;
} _DebugLight_default_instance_;
class DebugCognitionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugCognition>
      _instance;
} _DebugCognition_default_instance_;
class DecisionPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DecisionPoint>
      _instance;
} _DecisionPoint_default_instance_;
class STGraphDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<STGraph>
      _instance;
} _STGraph_default_instance_;
class DebugSTGraphDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugSTGraph>
      _instance;
} _DebugSTGraph_default_instance_;
class SentenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sentence>
      _instance;
} _Sentence_default_instance_;
class DebugDecisionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugDecision>
      _instance;
} _DebugDecision_default_instance_;
class DebugPredictionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugPrediction>
      _instance;
} _DebugPrediction_default_instance_;
class DebugImuDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugImu>
      _instance;
} _DebugImu_default_instance_;
class PlanningDebugDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlanningDebug>
      _instance;
} _PlanningDebug_default_instance_;
class DebugBusinessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugBusiness>
      _instance;
} _DebugBusiness_default_instance_;
class DebugSTPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugSTPoint>
      _instance;
} _DebugSTPoint_default_instance_;
class DebugstmapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Debugstmap>
      _instance;
} _Debugstmap_default_instance_;
class DebugObjectByLineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugObjectByLine>
      _instance;
} _DebugObjectByLine_default_instance_;
class LBoundsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LBounds>
      _instance;
} _LBounds_default_instance_;
class SoftBoundaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SoftBoundary>
      _instance;
} _SoftBoundary_default_instance_;
class BoundaryTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BoundaryType>
      _instance;
} _BoundaryType_default_instance_;
class DebugSLBoundaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugSLBoundary>
      _instance;
} _DebugSLBoundary_default_instance_;
class motion_obstacleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<motion_obstacle>
      _instance;
} _motion_obstacle_default_instance_;
class motion_obstacle_vecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<motion_obstacle_vec>
      _instance;
} _motion_obstacle_vec_default_instance_;
class DebugXTBoundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugXTBound>
      _instance;
} _DebugXTBound_default_instance_;
class XTBoundsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XTBounds>
      _instance;
} _XTBounds_default_instance_;
class DebugExtraDecisionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugExtraDecision>
      _instance;
} _DebugExtraDecision_default_instance_;
}  // namespace planning_debug_msgs
namespace protobuf_planning_5fdebug_5fmsgs_2eproto {
void InitDefaultsDebugStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_debug_msgs::_DebugState_default_instance_;
    new (ptr) ::planning_debug_msgs::DebugState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::DebugState::InitAsDefaultInstance();
}

void InitDefaultsDebugState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugStateImpl);
}

void InitDefaultsSLPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_debug_msgs::_SLPoint_default_instance_;
    new (ptr) ::planning_debug_msgs::SLPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::SLPoint::InitAsDefaultInstance();
}

void InitDefaultsSLPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSLPointImpl);
}

void InitDefaultsSpeedPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_debug_msgs::_SpeedPoint_default_instance_;
    new (ptr) ::planning_debug_msgs::SpeedPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::SpeedPoint::InitAsDefaultInstance();
}

void InitDefaultsSpeedPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpeedPointImpl);
}

void InitDefaultsDebugMotionPlanImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSLPoint();
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSpeedPoint();
  {
    void* ptr = &::planning_debug_msgs::_DebugMotionPlan_default_instance_;
    new (ptr) ::planning_debug_msgs::DebugMotionPlan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::DebugMotionPlan::InitAsDefaultInstance();
}

void InitDefaultsDebugMotionPlan() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugMotionPlanImpl);
}

void InitDefaultsSTpairImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_debug_msgs::_STpair_default_instance_;
    new (ptr) ::planning_debug_msgs::STpair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::STpair::InitAsDefaultInstance();
}

void InitDefaultsSTpair() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSTpairImpl);
}

void InitDefaultsDebugPdObjectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSTpair();
  {
    void* ptr = &::planning_debug_msgs::_DebugPdObject_default_instance_;
    new (ptr) ::planning_debug_msgs::DebugPdObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::DebugPdObject::InitAsDefaultInstance();
}

void InitDefaultsDebugPdObject() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugPdObjectImpl);
}

void InitDefaultsDebugObjectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugPdObject();
  {
    void* ptr = &::planning_debug_msgs::_DebugObject_default_instance_;
    new (ptr) ::planning_debug_msgs::DebugObject();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::DebugObject::InitAsDefaultInstance();
}

void InitDefaultsDebugObject() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugObjectImpl);
}

void InitDefaultsDebugGapImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_debug_msgs::_DebugGap_default_instance_;
    new (ptr) ::planning_debug_msgs::DebugGap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::DebugGap::InitAsDefaultInstance();
}

void InitDefaultsDebugGap() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugGapImpl);
}

void InitDefaultsDebugLineImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugState();
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugObject();
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugGap();
  {
    void* ptr = &::planning_debug_msgs::_DebugLine_default_instance_;
    new (ptr) ::planning_debug_msgs::DebugLine();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::DebugLine::InitAsDefaultInstance();
}

void InitDefaultsDebugLine() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugLineImpl);
}

void InitDefaultsDebugLightImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_debug_msgs::_DebugLight_default_instance_;
    new (ptr) ::planning_debug_msgs::DebugLight();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::DebugLight::InitAsDefaultInstance();
}

void InitDefaultsDebugLight() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugLightImpl);
}

void InitDefaultsDebugCognitionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugLine();
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugLight();
  {
    void* ptr = &::planning_debug_msgs::_DebugCognition_default_instance_;
    new (ptr) ::planning_debug_msgs::DebugCognition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::DebugCognition::InitAsDefaultInstance();
}

void InitDefaultsDebugCognition() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugCognitionImpl);
}

void InitDefaultsDecisionPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_debug_msgs::_DecisionPoint_default_instance_;
    new (ptr) ::planning_debug_msgs::DecisionPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::DecisionPoint::InitAsDefaultInstance();
}

void InitDefaultsDecisionPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDecisionPointImpl);
}

void InitDefaultsSTGraphImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_debug_msgs::_STGraph_default_instance_;
    new (ptr) ::planning_debug_msgs::STGraph();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::STGraph::InitAsDefaultInstance();
}

void InitDefaultsSTGraph() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSTGraphImpl);
}

void InitDefaultsDebugSTGraphImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSTGraph();
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDecisionPoint();
  {
    void* ptr = &::planning_debug_msgs::_DebugSTGraph_default_instance_;
    new (ptr) ::planning_debug_msgs::DebugSTGraph();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::DebugSTGraph::InitAsDefaultInstance();
}

void InitDefaultsDebugSTGraph() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugSTGraphImpl);
}

void InitDefaultsSentenceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_debug_msgs::_Sentence_default_instance_;
    new (ptr) ::planning_debug_msgs::Sentence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::Sentence::InitAsDefaultInstance();
}

void InitDefaultsSentence() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSentenceImpl);
}

void InitDefaultsDebugDecisionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSentence();
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugSTGraph();
  protobuf_planning_5fmsgs_2eproto::InitDefaultsTrajectory();
  {
    void* ptr = &::planning_debug_msgs::_DebugDecision_default_instance_;
    new (ptr) ::planning_debug_msgs::DebugDecision();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::DebugDecision::InitAsDefaultInstance();
}

void InitDefaultsDebugDecision() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugDecisionImpl);
}

void InitDefaultsDebugPredictionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_planning_5fmsgs_2eproto::InitDefaultsTrajectory();
  {
    void* ptr = &::planning_debug_msgs::_DebugPrediction_default_instance_;
    new (ptr) ::planning_debug_msgs::DebugPrediction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::DebugPrediction::InitAsDefaultInstance();
}

void InitDefaultsDebugPrediction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugPredictionImpl);
}

void InitDefaultsDebugImuImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_debug_msgs::_DebugImu_default_instance_;
    new (ptr) ::planning_debug_msgs::DebugImu();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::DebugImu::InitAsDefaultInstance();
}

void InitDefaultsDebugImu() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugImuImpl);
}

void InitDefaultsPlanningDebugImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_common_5fmsgs_2eproto::InitDefaultsHeader();
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugState();
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugMotionPlan();
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugCognition();
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugDecision();
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugPrediction();
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugImu();
  protobuf_perception_5fobjects_5fmsgs_2eproto::InitDefaultsObject();
  {
    void* ptr = &::planning_debug_msgs::_PlanningDebug_default_instance_;
    new (ptr) ::planning_debug_msgs::PlanningDebug();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::PlanningDebug::InitAsDefaultInstance();
}

void InitDefaultsPlanningDebug() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPlanningDebugImpl);
}

void InitDefaultsDebugBusinessImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_debug_msgs::_DebugBusiness_default_instance_;
    new (ptr) ::planning_debug_msgs::DebugBusiness();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::DebugBusiness::InitAsDefaultInstance();
}

void InitDefaultsDebugBusiness() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugBusinessImpl);
}

void InitDefaultsDebugSTPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_debug_msgs::_DebugSTPoint_default_instance_;
    new (ptr) ::planning_debug_msgs::DebugSTPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::DebugSTPoint::InitAsDefaultInstance();
}

void InitDefaultsDebugSTPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugSTPointImpl);
}

void InitDefaultsDebugstmapImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugSTPoint();
  {
    void* ptr = &::planning_debug_msgs::_Debugstmap_default_instance_;
    new (ptr) ::planning_debug_msgs::Debugstmap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::Debugstmap::InitAsDefaultInstance();
}

void InitDefaultsDebugstmap() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugstmapImpl);
}

void InitDefaultsDebugObjectByLineImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugObject();
  {
    void* ptr = &::planning_debug_msgs::_DebugObjectByLine_default_instance_;
    new (ptr) ::planning_debug_msgs::DebugObjectByLine();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::DebugObjectByLine::InitAsDefaultInstance();
}

void InitDefaultsDebugObjectByLine() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugObjectByLineImpl);
}

void InitDefaultsLBoundsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_debug_msgs::_LBounds_default_instance_;
    new (ptr) ::planning_debug_msgs::LBounds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::LBounds::InitAsDefaultInstance();
}

void InitDefaultsLBounds() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLBoundsImpl);
}

void InitDefaultsSoftBoundaryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsLBounds();
  {
    void* ptr = &::planning_debug_msgs::_SoftBoundary_default_instance_;
    new (ptr) ::planning_debug_msgs::SoftBoundary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::SoftBoundary::InitAsDefaultInstance();
}

void InitDefaultsSoftBoundary() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSoftBoundaryImpl);
}

void InitDefaultsBoundaryTypeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_debug_msgs::_BoundaryType_default_instance_;
    new (ptr) ::planning_debug_msgs::BoundaryType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::BoundaryType::InitAsDefaultInstance();
}

void InitDefaultsBoundaryType() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBoundaryTypeImpl);
}

void InitDefaultsDebugSLBoundaryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsLBounds();
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSoftBoundary();
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsBoundaryType();
  {
    void* ptr = &::planning_debug_msgs::_DebugSLBoundary_default_instance_;
    new (ptr) ::planning_debug_msgs::DebugSLBoundary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::DebugSLBoundary::InitAsDefaultInstance();
}

void InitDefaultsDebugSLBoundary() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugSLBoundaryImpl);
}

void InitDefaultsmotion_obstacleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_debug_msgs::_motion_obstacle_default_instance_;
    new (ptr) ::planning_debug_msgs::motion_obstacle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::motion_obstacle::InitAsDefaultInstance();
}

void InitDefaultsmotion_obstacle() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsmotion_obstacleImpl);
}

void InitDefaultsmotion_obstacle_vecImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsmotion_obstacle();
  {
    void* ptr = &::planning_debug_msgs::_motion_obstacle_vec_default_instance_;
    new (ptr) ::planning_debug_msgs::motion_obstacle_vec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::motion_obstacle_vec::InitAsDefaultInstance();
}

void InitDefaultsmotion_obstacle_vec() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsmotion_obstacle_vecImpl);
}

void InitDefaultsDebugXTBoundImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_debug_msgs::_DebugXTBound_default_instance_;
    new (ptr) ::planning_debug_msgs::DebugXTBound();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::DebugXTBound::InitAsDefaultInstance();
}

void InitDefaultsDebugXTBound() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugXTBoundImpl);
}

void InitDefaultsXTBoundsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugXTBound();
  {
    void* ptr = &::planning_debug_msgs::_XTBounds_default_instance_;
    new (ptr) ::planning_debug_msgs::XTBounds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::XTBounds::InitAsDefaultInstance();
}

void InitDefaultsXTBounds() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXTBoundsImpl);
}

void InitDefaultsDebugExtraDecisionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::planning_debug_msgs::_DebugExtraDecision_default_instance_;
    new (ptr) ::planning_debug_msgs::DebugExtraDecision();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::planning_debug_msgs::DebugExtraDecision::InitAsDefaultInstance();
}

void InitDefaultsDebugExtraDecision() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDebugExtraDecisionImpl);
}

::google::protobuf::Metadata file_level_metadata[32];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugState, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugState, str_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::SLPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::SLPoint, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::SLPoint, l_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::SpeedPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::SpeedPoint, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::SpeedPoint, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::SpeedPoint, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::SpeedPoint, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::SpeedPoint, da_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, kappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, ego_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, cruise_speed_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, following_object_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, following_object_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, following_object_dis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, following_object_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, following_object_min_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, following_object_min_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, following_object_target_dis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, is_new_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, init_point_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, init_point_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, init_point_dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, init_point_ddl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, locpos_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, is_fallback_trajectory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, path_fallback_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, speed_fallback_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, trajectory_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, is_replan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, replan_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, generate_stop_trajectory_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, yield_object_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, yield_object_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, yield_object_current_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, yield_object_collision_min_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, yield_object_collision_min_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, path_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, speed_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, reference_line_smoothed_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, min_kappa_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, max_kappa_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, kappa_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, kappa_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, total_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, pathplan_total_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, speedplan_total_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, speedplan_task_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, speedplan_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, speed_upper_constraint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, speed_lower_constraint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, s_upper_constraint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, s_lower_constraint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, behavior_parser_time_spend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, behavior_parser_reset_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, behavior_parser_findtargetrefline_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, borrow_time_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, behavior_parser_createreferencelinedata_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, plan_in_lane__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, frame_time_spend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, trajectory_stitcher_time_spend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, generate_trajectory_time_spend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, passby_limit_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, passby_limit_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, passby_limit_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, yield_weight_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, cruise_weight_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, follow_weight_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, borrow_lane_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, box_planning_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, jerk_weight_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, follow_v_weight_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, acc_dcc_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, follow_dis_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, real_time_ob_avoid_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, no_real_time_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, cog_linear_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, dis_to_virtual_wall_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugMotionPlan, sentence_action_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STpair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STpair, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STpair, min_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STpair, max_s_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugPdObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugPdObject, lane_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugPdObject, right_of_way_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugPdObject, conflict_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugPdObject, st_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugPdObject, range_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugPdObject, range_pd_s_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObject, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObject, cell_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObject, acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObject, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObject, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObject, is_static_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObject, was_dynamic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObject, need_focus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObject, key_focus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObject, is_reverse_traveling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObject, dis_to_junction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObject, s_l_min_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObject, s_l_max_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObject, s_l_min_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObject, s_l_max_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObject, nearest_xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObject, nearest_yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObject, pd_objs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugGap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugGap, start_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugGap, end_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugGap, aim_min_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugGap, aim_max_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugGap, allow_min_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugGap, allow_max_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugGap, allow_min_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugGap, feasibility_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugGap, safety_level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLine, lane_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLine, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLine, dis2line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLine, distance_to_mission_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLine, block_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLine, slow_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLine, global_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLine, speed_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLine, long_term_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLine, short_term_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLine, objs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLine, line_queue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLine, is_congestion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLine, gaps_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLight, lane_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLight, jc_light_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLight, response_area_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLight, unkey_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLight, area_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugLight, light_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugCognition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugCognition, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugCognition, reference_lane_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugCognition, reference_target_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugCognition, mapengine_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugCognition, correction_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugCognition, target_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugCognition, key_line_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugCognition, in_current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugCognition, in_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugCognition, map_delta_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugCognition, imu_delta_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugCognition, current_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugCognition, left_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugCognition, right_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugCognition, local_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugCognition, light_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugCognition, drive_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugCognition, time_cost_ms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DecisionPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DecisionPoint, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DecisionPoint, s_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, cell_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, is_static_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, was_dynamic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, right_of_way_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, conflict_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, s_l_min_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, s_l_max_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, s_l_min_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, s_l_max_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, t_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, min_s_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, max_s_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, t_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, min_s_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, max_s_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, st_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, st_min_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, st_max_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, min_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::STGraph, max_s_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugSTGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugSTGraph, cognition_objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugSTGraph, decision_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugSTGraph, original_objects_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::Sentence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::Sentence, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::Sentence, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::Sentence, dis_to_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::Sentence, dis_to_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::Sentence, xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::Sentence, yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::Sentence, heading_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, target_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, giveway_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, boundary_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, left_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, right_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, object_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, object_decision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, sentences_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, st_graph_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, cmd_feedback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, lc_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, decision_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, scenario_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, intention_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, option_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, turning_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, stop_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, lateral_decision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, ready_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, dis_to_junction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, dis_to_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, light_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, light_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, left_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, light_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, turning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, expand_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, trajectory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, is_passable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, passable_lane_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugDecision, black_road_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugPrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugPrediction, points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugImu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugImu, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugImu, xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugImu, yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugImu, yaw_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::PlanningDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::PlanningDebug, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::PlanningDebug, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::PlanningDebug, main_stream_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::PlanningDebug, task_fsm_condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::PlanningDebug, task_fsm_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::PlanningDebug, cognition_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::PlanningDebug, business_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::PlanningDebug, behavior_fsm_condition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::PlanningDebug, behavior_fsm_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::PlanningDebug, pathplan_msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::PlanningDebug, thread_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::PlanningDebug, motionplan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::PlanningDebug, cognition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::PlanningDebug, decision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::PlanningDebug, prediction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::PlanningDebug, locpose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::PlanningDebug, perception_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::PlanningDebug, time_cost_ms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugBusiness, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugBusiness, dis_to_mission_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugBusiness, car_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugBusiness, process_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugBusiness, is_current_line_null_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugBusiness, business_exucute_over_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugSTPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugSTPoint, p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugSTPoint, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugSTPoint, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugSTPoint, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::Debugstmap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::Debugstmap, st_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::Debugstmap, decision_st_points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObjectByLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObjectByLine, object_debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObjectByLine, object_decision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObjectByLine, max_p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugObjectByLine, limit_v_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::LBounds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::LBounds, right_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::LBounds, left_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::LBounds, right_boundary_xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::LBounds, right_boundary_yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::LBounds, right_boundary_globalangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::LBounds, right_boundary_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::LBounds, right_boundary_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::LBounds, right_boundary_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::LBounds, left_boundary_xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::LBounds, left_boundary_yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::LBounds, left_boundary_globalangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::LBounds, left_boundary_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::LBounds, left_boundary_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::LBounds, left_boundary_angle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::SoftBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::SoftBoundary, l_bounds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::SoftBoundary, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::SoftBoundary, obj_occupy_delt_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::SoftBoundary, obj_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::BoundaryType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::BoundaryType, right_bound_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::BoundaryType, left_bound_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugSLBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugSLBoundary, start_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugSLBoundary, delta_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugSLBoundary, boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugSLBoundary, box_modified_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugSLBoundary, dynamic_obstacle_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugSLBoundary, soft_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugSLBoundary, boundary_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugSLBoundary, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugSLBoundary, blocking_obstacle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugSLBoundary, is_blocked_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::motion_obstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::motion_obstacle, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::motion_obstacle, perceptionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::motion_obstacle, perception_xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::motion_obstacle, perception_yg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::motion_obstacle, isstatic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::motion_obstacle, isvirtual_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::motion_obstacle_vec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::motion_obstacle_vec, motion_obstacles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugXTBound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugXTBound, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugXTBound, min_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugXTBound, max_bound_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::XTBounds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::XTBounds, st_bounds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::XTBounds, dst_bounds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::XTBounds, ddst_bounds_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugExtraDecision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugExtraDecision, dist_to_ends_xg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::planning_debug_msgs::DebugExtraDecision, dist_to_ends_yg_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::planning_debug_msgs::DebugState)},
  { 7, -1, sizeof(::planning_debug_msgs::SLPoint)},
  { 14, -1, sizeof(::planning_debug_msgs::SpeedPoint)},
  { 24, -1, sizeof(::planning_debug_msgs::DebugMotionPlan)},
  { 102, -1, sizeof(::planning_debug_msgs::STpair)},
  { 110, -1, sizeof(::planning_debug_msgs::DebugPdObject)},
  { 121, -1, sizeof(::planning_debug_msgs::DebugObject)},
  { 144, -1, sizeof(::planning_debug_msgs::DebugGap)},
  { 158, -1, sizeof(::planning_debug_msgs::DebugLine)},
  { 177, -1, sizeof(::planning_debug_msgs::DebugLight)},
  { 188, -1, sizeof(::planning_debug_msgs::DebugCognition)},
  { 211, -1, sizeof(::planning_debug_msgs::DecisionPoint)},
  { 218, -1, sizeof(::planning_debug_msgs::STGraph)},
  { 247, -1, sizeof(::planning_debug_msgs::DebugSTGraph)},
  { 255, -1, sizeof(::planning_debug_msgs::Sentence)},
  { 267, -1, sizeof(::planning_debug_msgs::DebugDecision)},
  { 305, -1, sizeof(::planning_debug_msgs::DebugPrediction)},
  { 311, -1, sizeof(::planning_debug_msgs::DebugImu)},
  { 320, -1, sizeof(::planning_debug_msgs::PlanningDebug)},
  { 343, -1, sizeof(::planning_debug_msgs::DebugBusiness)},
  { 353, -1, sizeof(::planning_debug_msgs::DebugSTPoint)},
  { 362, -1, sizeof(::planning_debug_msgs::Debugstmap)},
  { 369, -1, sizeof(::planning_debug_msgs::DebugObjectByLine)},
  { 378, -1, sizeof(::planning_debug_msgs::LBounds)},
  { 397, -1, sizeof(::planning_debug_msgs::SoftBoundary)},
  { 406, -1, sizeof(::planning_debug_msgs::BoundaryType)},
  { 413, -1, sizeof(::planning_debug_msgs::DebugSLBoundary)},
  { 428, -1, sizeof(::planning_debug_msgs::motion_obstacle)},
  { 439, -1, sizeof(::planning_debug_msgs::motion_obstacle_vec)},
  { 445, -1, sizeof(::planning_debug_msgs::DebugXTBound)},
  { 453, -1, sizeof(::planning_debug_msgs::XTBounds)},
  { 461, -1, sizeof(::planning_debug_msgs::DebugExtraDecision)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_DebugState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_SLPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_SpeedPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_DebugMotionPlan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_STpair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_DebugPdObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_DebugObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_DebugGap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_DebugLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_DebugLight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_DebugCognition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_DecisionPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_STGraph_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_DebugSTGraph_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_Sentence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_DebugDecision_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_DebugPrediction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_DebugImu_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_PlanningDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_DebugBusiness_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_DebugSTPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_Debugstmap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_DebugObjectByLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_LBounds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_SoftBoundary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_BoundaryType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_DebugSLBoundary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_motion_obstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_motion_obstacle_vec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_DebugXTBound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_XTBounds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::planning_debug_msgs::_DebugExtraDecision_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "planning_debug_msgs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 32);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031planning_debug_msgs.proto\022\023planning_de"
      "bug_msgs\032\021common_msgs.proto\032\023planning_ms"
      "gs.proto\032\035perception_objects_msgs.proto\""
      "(\n\nDebugState\022\r\n\005value\030\001 \001(\005\022\013\n\003str\030\002 \001("
      "\t\"\037\n\007SLPoint\022\t\n\001s\030\001 \001(\001\022\t\n\001l\030\002 \001(\001\"D\n\nSp"
      "eedPoint\022\t\n\001t\030\001 \001(\001\022\t\n\001s\030\002 \001(\001\022\t\n\001v\030\003 \001("
      "\001\022\t\n\001a\030\004 \001(\001\022\n\n\002da\030\005 \001(\001\"\252\020\n\017DebugMotion"
      "Plan\022\022\n\ntime_stamp\030\001 \001(\001\022\t\n\001v\030\002 \001(\001\022\r\n\005k"
      "appa\030\003 \001(\001\022\t\n\001a\030\004 \001(\001\022\021\n\tego_speed\030\005 \001(\001"
      "\022\030\n\020cruise_speed_max\030\006 \001(\001\022\033\n\023following_"
      "object_id\030\007 \001(\005\022\032\n\022following_object_v\030\010 "
      "\001(\001\022\034\n\024following_object_dis\030\t \001(\001\022\032\n\022fol"
      "lowing_object_a\030\n \001(\001\022\036\n\026following_objec"
      "t_min_s\030\013 \001(\001\022\036\n\026following_object_min_t\030"
      "\014 \001(\001\022#\n\033following_object_target_dis\030\r \001"
      "(\001\022\023\n\013is_new_path\030\016 \001(\005\022\024\n\014init_point_s\030"
      "\017 \001(\001\022\024\n\014init_point_l\030\020 \001(\001\022\025\n\rinit_poin"
      "t_dl\030\021 \001(\001\022\026\n\016init_point_ddl\030\022 \001(\001\022\020\n\010lo"
      "cpos_s\030\023 \001(\001\022\036\n\026is_fallback_trajectory\030\024"
      " \001(\005\022\034\n\024path_fallback_reason\030\025 \001(\t\022\035\n\025sp"
      "eed_fallback_reason\030\026 \001(\t\022\027\n\017trajectory_"
      "type\030\027 \001(\005\022\021\n\tis_replan\030\030 \001(\010\022\025\n\rreplan_"
      "reason\030\031 \001(\005\022\'\n\037generate_stop_trajectory"
      "_reason\030\032 \001(\t\022\027\n\017yield_object_id\030\033 \001(\005\022\026"
      "\n\016yield_object_v\030\034 \001(\001\022\036\n\026yield_object_c"
      "urrent_s\030\035 \001(\001\022$\n\034yield_object_collision"
      "_min_s\030\036 \001(\001\022$\n\034yield_object_collision_m"
      "in_t\030\037 \001(\001\022/\n\tpath_data\030  \003(\0132\034.planning"
      "_debug_msgs.SLPoint\0223\n\nspeed_data\030! \003(\0132"
      "\037.planning_debug_msgs.SpeedPoint\022&\n\036refe"
      "rence_line_smoothed_status\030\" \001(\005\022\027\n\017min_"
      "kappa_index\030# \001(\005\022\027\n\017max_kappa_index\030$ \001"
      "(\005\022\021\n\tkappa_min\030% \001(\002\022\021\n\tkappa_max\030& \001(\002"
      "\022\022\n\ntotal_time\030\' \001(\002\022\033\n\023pathplan_total_t"
      "ime\030( \001(\002\022\034\n\024speedplan_total_time\030) \001(\002\022"
      "\026\n\016speedplan_task\030* \003(\t\022\026\n\016speedplan_tim"
      "e\030+ \003(\002\022\036\n\026speed_upper_constraint\030, \003(\002\022"
      "\036\n\026speed_lower_constraint\030- \003(\002\022\032\n\022s_upp"
      "er_constraint\030. \003(\002\022\032\n\022s_lower_constrain"
      "t\030/ \003(\002\022\"\n\032behavior_parser_time_spend\0300 "
      "\001(\002\022\037\n\027behavior_parser_Reset_t\0301 \001(\002\022+\n#"
      "behavior_parser_FindTargetRefLine_t\0302 \001("
      "\002\022\031\n\021borrow_time_count\0303 \001(\005\0221\n)behavior"
      "_parser_CreateReferenceLineData_t\0304 \001(\002\022"
      "\025\n\rplan_in_lane_\0305 \001(\005\022\030\n\020frame_time_spe"
      "nd\0306 \001(\002\022&\n\036trajectory_stitcher_time_spe"
      "nd\0307 \001(\002\022&\n\036generate_trajectory_time_spe"
      "nd\0308 \001(\002\022\031\n\021passby_limit_flag\0309 \001(\005\022\026\n\016p"
      "assby_limit_s\030: \001(\002\022\026\n\016passby_limit_v\030; "
      "\001(\002\022\033\n\023yield_weight_factor\030< \001(\002\022\034\n\024crui"
      "se_weight_factor\030= \001(\002\022\034\n\024follow_weight_"
      "factor\030> \001(\002\022\030\n\020borrow_lane_type\030\? \001(\005\022\032"
      "\n\022box_planning_state\030@ \001(\005\022\032\n\022jerk_weigh"
      "t_factor\030A \001(\002\022\036\n\026follow_v_weight_factor"
      "\030B \001(\002\022\024\n\014acc_dcc_mode\030C \001(\005\022\030\n\020follow_d"
      "is_error\030D \001(\002\022 \n\030real_time_ob_avoid_sta"
      "te\030E \001(\005\022\030\n\020no_real_time_cnt\030F \001(\005\022\033\n\023co"
      "g_linear_velocity\030G \001(\002\022\033\n\023dis_to_virtua"
      "l_wall\030H \001(\002\022\027\n\017sentence_action\030I \001(\005\"1\n"
      "\006STpair\022\t\n\001t\030\001 \001(\002\022\r\n\005min_s\030\002 \001(\002\022\r\n\005max"
      "_s\030\003 \001(\002\"\234\001\n\rDebugPdObject\022\020\n\010lane_ids\030\001"
      " \003(\t\022\024\n\014right_of_way\030\002 \001(\010\022\025\n\rconflict_t"
      "ype\030\003 \001(\005\022\'\n\002st\030\004 \003(\0132\033.planning_debug_m"
      "sgs.STpair\022\017\n\007range_a\030\005 \003(\002\022\022\n\nrange_pd_"
      "s\030\006 \003(\002\"\207\003\n\013DebugObject\022\n\n\002id\030\001 \001(\005\022\020\n\010c"
      "ell_num\030\002 \001(\005\022\013\n\003acc\030\003 \001(\002\022\r\n\005speed\030\004 \001("
      "\002\022\017\n\007lane_id\030\005 \001(\t\022\021\n\tis_static\030\006 \001(\010\022\023\n"
      "\013was_dynamic\030\007 \001(\010\022\022\n\nneed_focus\030\010 \001(\010\022\021"
      "\n\tkey_focus\030\t \001(\010\022\034\n\024is_reverse_travelin"
      "g\030\n \001(\010\022\027\n\017dis_to_junction\030\013 \001(\002\022\021\n\ts_l_"
      "min_s\030\014 \001(\002\022\021\n\ts_l_max_s\030\r \001(\002\022\021\n\ts_l_mi"
      "n_l\030\016 \001(\002\022\021\n\ts_l_max_l\030\017 \001(\002\022\022\n\nnearest_"
      "xg\030\020 \001(\001\022\022\n\nnearest_yg\030\021 \001(\001\0223\n\007pd_objs\030"
      "\022 \003(\0132\".planning_debug_msgs.DebugPdObjec"
      "t\"\302\001\n\010DebugGap\022\020\n\010start_id\030\001 \001(\005\022\016\n\006end_"
      "id\030\002 \001(\005\022\021\n\taim_min_s\030\003 \001(\002\022\021\n\taim_max_s"
      "\030\004 \001(\002\022\023\n\013allow_min_v\030\005 \001(\002\022\023\n\013allow_max"
      "_v\030\006 \001(\002\022\023\n\013allow_min_t\030\007 \001(\002\022\031\n\021feasibi"
      "lity_level\030\010 \001(\r\022\024\n\014safety_level\030\t \001(\r\"\266"
      "\003\n\tDebugLine\022\020\n\010lane_ids\030\001 \003(\t\022\023\n\013speed_"
      "limit\030\002 \001(\002\022\020\n\010dis2line\030\003 \001(\002\022!\n\031distanc"
      "e_to_mission_point\030\004 \001(\002\0224\n\013block_state\030"
      "\005 \001(\0132\037.planning_debug_msgs.DebugState\0223"
      "\n\nslow_state\030\006 \001(\0132\037.planning_debug_msgs"
      ".DebugState\022\023\n\013global_cost\030\007 \001(\005\022\022\n\nspee"
      "d_cost\030\010 \001(\002\022\027\n\017long_term_speed\030\t \001(\002\022\030\n"
      "\020short_term_speed\030\n \001(\002\022.\n\004objs\030\013 \003(\0132 ."
      "planning_debug_msgs.DebugObject\022\022\n\nline_"
      "queue\030\014 \001(\010\022\025\n\ris_congestion\030\r \001(\010\022+\n\004ga"
      "ps\030\016 \003(\0132\035.planning_debug_msgs.DebugGap\""
      "\216\001\n\nDebugLight\022\020\n\010lane_ids\030\001 \003(\t\022\026\n\016jc_l"
      "ight_state\030\002 \001(\005\022\033\n\023response_area_light\030"
      "\003 \001(\010\022\023\n\013unkey_color\030\004 \001(\005\022\022\n\narea_color"
      "\030\005 \001(\005\022\020\n\010light_id\030\006 \001(\t\"\304\004\n\016DebugCognit"
      "ion\022\022\n\ntime_stamp\030\001 \001(\001\022\032\n\022reference_lan"
      "e_ids\030\002 \003(\t\022\034\n\024reference_target_ids\030\003 \003("
      "\t\022\027\n\017mapengine_index\030\004 \001(\r\022\030\n\020correction"
      "_index\030\005 \001(\r\022\024\n\014target_index\030\006 \001(\r\022\023\n\013ke"
      "y_line_id\030\007 \003(\r\022\022\n\nin_current\030\010 \001(\010\022\021\n\ti"
      "n_target\030\t \001(\010\022\026\n\016map_delta_time\030\n \001(\002\022\026"
      "\n\016imu_delta_time\030\013 \001(\002\0224\n\014current_line\030\014"
      " \003(\0132\036.planning_debug_msgs.DebugLine\0221\n\t"
      "left_line\030\r \003(\0132\036.planning_debug_msgs.De"
      "bugLine\0222\n\nright_line\030\016 \003(\0132\036.planning_d"
      "ebug_msgs.DebugLine\0222\n\nlocal_line\030\017 \003(\0132"
      "\036.planning_debug_msgs.DebugLine\0223\n\nlight"
      "_info\030\020 \001(\0132\037.planning_debug_msgs.DebugL"
      "ight\022\023\n\013drive_state\030\021 \001(\r\022\024\n\014time_cost_m"
      "s\030\022 \001(\002\"%\n\rDecisionPoint\022\t\n\001t\030\001 \001(\005\022\t\n\001s"
      "\030\002 \001(\005\"\241\003\n\007STGraph\022\n\n\002id\030\001 \001(\005\022\020\n\010cell_n"
      "um\030\002 \001(\005\022\017\n\007lane_id\030\003 \001(\t\022\021\n\tis_static\030\004"
      " \001(\010\022\023\n\013was_dynamic\030\005 \001(\010\022\024\n\014right_of_wa"
      "y\030\006 \001(\010\022\025\n\rconflict_type\030\007 \001(\005\022\021\n\ts_l_mi"
      "n_s\030\010 \001(\002\022\021\n\ts_l_max_s\030\t \001(\002\022\021\n\ts_l_min_"
      "l\030\n \001(\002\022\021\n\ts_l_max_l\030\013 \001(\002\022\013\n\003t_1\030\014 \001(\002\022"
      "\017\n\007min_s_1\030\r \001(\002\022\017\n\007max_s_1\030\016 \001(\002\022\013\n\003t_2"
      "\030\017 \001(\002\022\017\n\007min_s_2\030\020 \001(\002\022\017\n\007max_s_2\030\021 \001(\002"
      "\022\014\n\004st_t\030\022 \003(\002\022\020\n\010st_min_s\030\023 \003(\002\022\020\n\010st_m"
      "ax_s\030\024 \003(\002\022\r\n\005speed\030\025 \001(\002\022\t\n\001t\030\026 \003(\002\022\r\n\005"
      "min_s\030\027 \003(\002\022\r\n\005max_s\030\030 \003(\002\"\274\001\n\014DebugSTGr"
      "aph\0227\n\021cognition_objects\030\001 \003(\0132\034.plannin"
      "g_debug_msgs.STGraph\022;\n\017decision_points\030"
      "\002 \003(\0132\".planning_debug_msgs.DecisionPoin"
      "t\0226\n\020original_objects\030\003 \003(\0132\034.planning_d"
      "ebug_msgs.STGraph\"\203\001\n\010Sentence\022\016\n\006action"
      "\030\001 \001(\t\022\021\n\tdirection\030\002 \001(\r\022\022\n\ndis_to_end\030"
      "\003 \001(\002\022\027\n\017dis_to_boundary\030\004 \001(\002\022\n\n\002xg\030\005 \001"
      "(\002\022\n\n\002yg\030\006 \001(\002\022\017\n\007heading\030\007 \001(\002\"\253\006\n\rDebu"
      "gDecision\022\022\n\ntime_stamp\030\001 \001(\001\022\023\n\013target_"
      "line\030\002 \001(\r\022\022\n\ngiveway_id\030\003 \001(\005\022\023\n\013speed_"
      "limit\030\004 \001(\002\022\022\n\nboundary_s\030\005 \003(\002\022\025\n\rleft_"
      "boundary\030\006 \003(\002\022\026\n\016right_boundary\030\007 \003(\002\022\021"
      "\n\tobject_id\030\010 \003(\005\022\027\n\017object_decision\030\t \003"
      "(\005\0220\n\tsentences\030\n \003(\0132\035.planning_debug_m"
      "sgs.Sentence\0223\n\010st_graph\030\013 \001(\0132!.plannin"
      "g_debug_msgs.DebugSTGraph\022\024\n\014cmd_feedbac"
      "k\030\014 \001(\t\022\021\n\tlc_status\030\r \001(\r\022\027\n\017decision_r"
      "esult\030\016 \001(\005\022\025\n\rscenario_type\030\017 \001(\r\022\026\n\016in"
      "tention_type\030\020 \001(\r\022\023\n\013option_type\030\021 \001(\r\022"
      "\024\n\014turning_type\030\022 \001(\r\022\021\n\tstop_type\030\023 \001(\r"
      "\022\030\n\020lateral_decision\030\024 \001(\r\022\024\n\014ready_stat"
      "us\030\025 \001(\r\022\027\n\017dis_to_junction\030\026 \001(\002\022\023\n\013dis"
      "_to_stop\030\027 \001(\002\022\017\n\007light_s\030\030 \001(\002\022\022\n\nlight"
      "_time\030\031 \001(\002\022\021\n\tleft_time\030\032 \001(\002\022\023\n\013light_"
      "color\030\033 \001(\r\022\017\n\007turning\030\034 \001(\r\022\020\n\010expand_l"
      "\030\035 \001(\002\022-\n\ntrajectory\030\036 \001(\0132\031.planning_ms"
      "gs.Trajectory\022\023\n\013is_passable\030\037 \001(\005\022\031\n\021pa"
      "ssable_lane_ids\030  \003(\t\022\026\n\016black_road_ids\030"
      "! \003(\t\"<\n\017DebugPrediction\022)\n\006points\030\001 \003(\013"
      "2\031.planning_msgs.Trajectory\"C\n\010DebugImu\022"
      "\022\n\ntime_stamp\030\001 \001(\001\022\n\n\002xg\030\002 \001(\001\022\n\n\002yg\030\003 "
      "\001(\001\022\013\n\003yaw\030\004 \001(\001\"\225\007\n\rPlanningDebug\022#\n\006he"
      "ader\030\001 \001(\0132\023.common_msgs.Header\022\017\n\007versi"
      "on\030\002 \001(\t\0228\n\017main_stream_msg\030\003 \001(\0132\037.plan"
      "ning_debug_msgs.DebugState\022;\n\022task_fsm_c"
      "ondition\030\004 \001(\0132\037.planning_debug_msgs.Deb"
      "ugState\0227\n\016task_fsm_state\030\005 \001(\0132\037.planni"
      "ng_debug_msgs.DebugState\0226\n\rcognition_ms"
      "g\030\006 \001(\0132\037.planning_debug_msgs.DebugState"
      "\0225\n\014business_msg\030\007 \001(\0132\037.planning_debug_"
      "msgs.DebugState\022\?\n\026behavior_fsm_conditio"
      "n\030\010 \001(\0132\037.planning_debug_msgs.DebugState"
      "\022;\n\022behavior_fsm_state\030\t \001(\0132\037.planning_"
      "debug_msgs.DebugState\0225\n\014pathplan_msg\030\n "
      "\001(\0132\037.planning_debug_msgs.DebugState\0225\n\014"
      "thread_state\030\013 \001(\0132\037.planning_debug_msgs"
      ".DebugState\0228\n\nmotionplan\030\014 \001(\0132$.planni"
      "ng_debug_msgs.DebugMotionPlan\0226\n\tcogniti"
      "on\030\r \001(\0132#.planning_debug_msgs.DebugCogn"
      "ition\0224\n\010decision\030\016 \001(\0132\".planning_debug"
      "_msgs.DebugDecision\0228\n\nprediction\030\017 \001(\0132"
      "$.planning_debug_msgs.DebugPrediction\022.\n"
      "\007locpose\030\020 \001(\0132\035.planning_debug_msgs.Deb"
      "ugImu\022\033\n\nperception\030\021 \003(\0132\007.Object\022\024\n\014ti"
      "me_cost_ms\030\022 \001(\002\"\230\001\n\rDebugBusiness\022\034\n\024di"
      "s_to_mission_point\030\001 \001(\002\022\024\n\014car_velocity"
      "\030\002 \001(\002\022\026\n\016process_status\030\003 \001(\005\022\034\n\024is_cur"
      "rent_line_null\030\004 \001(\005\022\035\n\025business_exucute"
      "_over\030\005 \001(\005\";\n\014DebugSTPoint\022\t\n\001p\030\001 \001(\002\022\t"
      "\n\001s\030\002 \001(\002\022\t\n\001t\030\003 \001(\002\022\n\n\002id\030\004 \003(\005\"\201\001\n\nDeb"
      "ugstmap\0224\n\tst_points\030\001 \003(\0132!.planning_de"
      "bug_msgs.DebugSTPoint\022=\n\022decision_st_poi"
      "nts\030\002 \003(\0132!.planning_debug_msgs.DebugSTP"
      "oint\"\204\001\n\021DebugObjectByLine\0226\n\014object_deb"
      "ug\030\001 \003(\0132 .planning_debug_msgs.DebugObje"
      "ct\022\027\n\017object_decision\030\002 \001(\005\022\r\n\005max_p\030\003 \001"
      "(\002\022\017\n\007limit_v\030\004 \001(\002\"\212\003\n\007LBounds\022\026\n\016right"
      "_boundary\030\001 \001(\001\022\025\n\rleft_boundary\030\002 \001(\001\022\031"
      "\n\021right_boundary_xg\030\003 \001(\001\022\031\n\021right_bound"
      "ary_yg\030\004 \001(\001\022\"\n\032right_boundary_globalang"
      "le\030\005 \001(\001\022\030\n\020right_boundary_x\030\006 \001(\001\022\030\n\020ri"
      "ght_boundary_y\030\007 \001(\001\022\034\n\024right_boundary_a"
      "ngle\030\010 \001(\001\022\030\n\020left_boundary_xg\030\t \001(\001\022\030\n\020"
      "left_boundary_yg\030\n \001(\001\022!\n\031left_boundary_"
      "globalangle\030\013 \001(\001\022\027\n\017left_boundary_x\030\014 \001"
      "(\001\022\027\n\017left_boundary_y\030\r \001(\001\022\033\n\023left_boun"
      "dary_angle\030\016 \001(\001\"~\n\014SoftBoundary\022.\n\010l_bo"
      "unds\030\001 \001(\0132\034.planning_debug_msgs.LBounds"
      "\022\023\n\013probability\030\002 \001(\001\022\031\n\021obj_occupy_delt"
      "_l\030\003 \001(\001\022\016\n\006obj_id\030\004 \001(\t\"A\n\014BoundaryType"
      "\022\030\n\020right_bound_type\030\001 \001(\005\022\027\n\017left_bound"
      "_type\030\002 \001(\005\"\226\003\n\017DebugSLBoundary\022\017\n\007start"
      "_s\030\001 \001(\001\022\017\n\007delta_s\030\002 \001(\001\022.\n\010boundary\030\003 "
      "\003(\0132\034.planning_debug_msgs.LBounds\022;\n\025box"
      "_modified_boundary\030\004 \003(\0132\034.planning_debu"
      "g_msgs.LBounds\022\?\n\031dynamic_obstacle_bound"
      "ary\030\005 \003(\0132\034.planning_debug_msgs.LBounds\022"
      "8\n\rsoft_boundary\030\006 \003(\0132!.planning_debug_"
      "msgs.SoftBoundary\0228\n\rboundary_type\030\007 \003(\013"
      "2!.planning_debug_msgs.BoundaryType\022\r\n\005l"
      "abel\030\010 \001(\t\022\034\n\024blocking_obstacle_id\030\t \001(\t"
      "\022\022\n\nis_blocked\030\n \001(\010\"\206\001\n\017motion_obstacle"
      "\022\n\n\002Id\030\001 \001(\t\022\024\n\014PerceptionId\030\002 \001(\005\022\025\n\rPe"
      "rception_xg\030\003 \001(\001\022\025\n\rPerception_yg\030\004 \001(\001"
      "\022\020\n\010IsStatic\030\005 \001(\005\022\021\n\tIsVirtual\030\006 \001(\005\"U\n"
      "\023motion_obstacle_vec\022>\n\020motion_obstacles"
      "\030\001 \003(\0132$.planning_debug_msgs.motion_obst"
      "acle\"\?\n\014DebugXTBound\022\t\n\001t\030\001 \001(\002\022\021\n\tmin_b"
      "ound\030\002 \001(\002\022\021\n\tmax_bound\030\003 \001(\002\"\257\001\n\010XTBoun"
      "ds\0224\n\tst_bounds\030\001 \003(\0132!.planning_debug_m"
      "sgs.DebugXTBound\0225\n\ndst_bounds\030\002 \003(\0132!.p"
      "lanning_debug_msgs.DebugXTBound\0226\n\013ddst_"
      "bounds\030\003 \003(\0132!.planning_debug_msgs.Debug"
      "XTBound\"F\n\022DebugExtraDecision\022\027\n\017dist_to"
      "_ends_xg\030\001 \003(\002\022\027\n\017dist_to_ends_yg\030\002 \003(\002b"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 9007);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planning_debug_msgs.proto", &protobuf_RegisterTypes);
  ::protobuf_common_5fmsgs_2eproto::AddDescriptors();
  ::protobuf_planning_5fmsgs_2eproto::AddDescriptors();
  ::protobuf_perception_5fobjects_5fmsgs_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_planning_5fdebug_5fmsgs_2eproto
namespace planning_debug_msgs {

// ===================================================================

void DebugState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugState::kValueFieldNumber;
const int DebugState::kStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugState::DebugState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.DebugState)
}
DebugState::DebugState(const DebugState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.str().size() > 0) {
    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.DebugState)
}

void DebugState::SharedCtor() {
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  _cached_size_ = 0;
}

DebugState::~DebugState() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.DebugState)
  SharedDtor();
}

void DebugState::SharedDtor() {
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DebugState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugState::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugState& DebugState::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugState();
  return *internal_default_instance();
}

DebugState* DebugState::New(::google::protobuf::Arena* arena) const {
  DebugState* n = new DebugState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugState::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.DebugState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  _internal_metadata_.Clear();
}

bool DebugState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.DebugState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string str = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->str().data(), static_cast<int>(this->str().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.DebugState.str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.DebugState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.DebugState)
  return false;
#undef DO_
}

void DebugState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.DebugState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  // string str = 2;
  if (this->str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), static_cast<int>(this->str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugState.str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->str(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.DebugState)
}

::google::protobuf::uint8* DebugState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.DebugState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  // string str = 2;
  if (this->str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->str().data(), static_cast<int>(this->str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugState.str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.DebugState)
  return target;
}

size_t DebugState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.DebugState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string str = 2;
  if (this->str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str());
  }

  // int32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.DebugState)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.DebugState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.DebugState)
    MergeFrom(*source);
  }
}

void DebugState::MergeFrom(const DebugState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.DebugState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.str().size() > 0) {

    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void DebugState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.DebugState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugState::CopyFrom(const DebugState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.DebugState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugState::IsInitialized() const {
  return true;
}

void DebugState::Swap(DebugState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugState::InternalSwap(DebugState* other) {
  using std::swap;
  str_.Swap(&other->str_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugState::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SLPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLPoint::kSFieldNumber;
const int SLPoint::kLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLPoint::SLPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSLPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.SLPoint)
}
SLPoint::SLPoint(const SLPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&l_) -
    reinterpret_cast<char*>(&s_)) + sizeof(l_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.SLPoint)
}

void SLPoint::SharedCtor() {
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&l_) -
      reinterpret_cast<char*>(&s_)) + sizeof(l_));
  _cached_size_ = 0;
}

SLPoint::~SLPoint() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.SLPoint)
  SharedDtor();
}

void SLPoint::SharedDtor() {
}

void SLPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLPoint::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SLPoint& SLPoint::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSLPoint();
  return *internal_default_instance();
}

SLPoint* SLPoint::New(::google::protobuf::Arena* arena) const {
  SLPoint* n = new SLPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.SLPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&l_) -
      reinterpret_cast<char*>(&s_)) + sizeof(l_));
  _internal_metadata_.Clear();
}

bool SLPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.SLPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double l = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.SLPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.SLPoint)
  return false;
#undef DO_
}

void SLPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.SLPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s = 1;
  if (this->s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // double l = 2;
  if (this->l() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->l(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.SLPoint)
}

::google::protobuf::uint8* SLPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.SLPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s = 1;
  if (this->s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // double l = 2;
  if (this->l() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->l(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.SLPoint)
  return target;
}

size_t SLPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.SLPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double s = 1;
  if (this->s() != 0) {
    total_size += 1 + 8;
  }

  // double l = 2;
  if (this->l() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.SLPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SLPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.SLPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.SLPoint)
    MergeFrom(*source);
  }
}

void SLPoint::MergeFrom(const SLPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.SLPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.s() != 0) {
    set_s(from.s());
  }
  if (from.l() != 0) {
    set_l(from.l());
  }
}

void SLPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.SLPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLPoint::CopyFrom(const SLPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.SLPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPoint::IsInitialized() const {
  return true;
}

void SLPoint::Swap(SLPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLPoint::InternalSwap(SLPoint* other) {
  using std::swap;
  swap(s_, other->s_);
  swap(l_, other->l_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLPoint::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeedPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedPoint::kTFieldNumber;
const int SpeedPoint::kSFieldNumber;
const int SpeedPoint::kVFieldNumber;
const int SpeedPoint::kAFieldNumber;
const int SpeedPoint::kDaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedPoint::SpeedPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSpeedPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.SpeedPoint)
}
SpeedPoint::SpeedPoint(const SpeedPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&t_, &from.t_,
    static_cast<size_t>(reinterpret_cast<char*>(&da_) -
    reinterpret_cast<char*>(&t_)) + sizeof(da_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.SpeedPoint)
}

void SpeedPoint::SharedCtor() {
  ::memset(&t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&da_) -
      reinterpret_cast<char*>(&t_)) + sizeof(da_));
  _cached_size_ = 0;
}

SpeedPoint::~SpeedPoint() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.SpeedPoint)
  SharedDtor();
}

void SpeedPoint::SharedDtor() {
}

void SpeedPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedPoint::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedPoint& SpeedPoint::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSpeedPoint();
  return *internal_default_instance();
}

SpeedPoint* SpeedPoint::New(::google::protobuf::Arena* arena) const {
  SpeedPoint* n = new SpeedPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.SpeedPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&da_) -
      reinterpret_cast<char*>(&t_)) + sizeof(da_));
  _internal_metadata_.Clear();
}

bool SpeedPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.SpeedPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double t = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double v = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double a = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double da = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &da_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.SpeedPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.SpeedPoint)
  return false;
#undef DO_
}

void SpeedPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.SpeedPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double t = 1;
  if (this->t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->t(), output);
  }

  // double s = 2;
  if (this->s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->s(), output);
  }

  // double v = 3;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->v(), output);
  }

  // double a = 4;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->a(), output);
  }

  // double da = 5;
  if (this->da() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->da(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.SpeedPoint)
}

::google::protobuf::uint8* SpeedPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.SpeedPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double t = 1;
  if (this->t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->t(), target);
  }

  // double s = 2;
  if (this->s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->s(), target);
  }

  // double v = 3;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->v(), target);
  }

  // double a = 4;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->a(), target);
  }

  // double da = 5;
  if (this->da() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->da(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.SpeedPoint)
  return target;
}

size_t SpeedPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.SpeedPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double t = 1;
  if (this->t() != 0) {
    total_size += 1 + 8;
  }

  // double s = 2;
  if (this->s() != 0) {
    total_size += 1 + 8;
  }

  // double v = 3;
  if (this->v() != 0) {
    total_size += 1 + 8;
  }

  // double a = 4;
  if (this->a() != 0) {
    total_size += 1 + 8;
  }

  // double da = 5;
  if (this->da() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.SpeedPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.SpeedPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.SpeedPoint)
    MergeFrom(*source);
  }
}

void SpeedPoint::MergeFrom(const SpeedPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.SpeedPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.t() != 0) {
    set_t(from.t());
  }
  if (from.s() != 0) {
    set_s(from.s());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.da() != 0) {
    set_da(from.da());
  }
}

void SpeedPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.SpeedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPoint::CopyFrom(const SpeedPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.SpeedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPoint::IsInitialized() const {
  return true;
}

void SpeedPoint::Swap(SpeedPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedPoint::InternalSwap(SpeedPoint* other) {
  using std::swap;
  swap(t_, other->t_);
  swap(s_, other->s_);
  swap(v_, other->v_);
  swap(a_, other->a_);
  swap(da_, other->da_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedPoint::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugMotionPlan::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugMotionPlan::kTimeStampFieldNumber;
const int DebugMotionPlan::kVFieldNumber;
const int DebugMotionPlan::kKappaFieldNumber;
const int DebugMotionPlan::kAFieldNumber;
const int DebugMotionPlan::kEgoSpeedFieldNumber;
const int DebugMotionPlan::kCruiseSpeedMaxFieldNumber;
const int DebugMotionPlan::kFollowingObjectIdFieldNumber;
const int DebugMotionPlan::kFollowingObjectVFieldNumber;
const int DebugMotionPlan::kFollowingObjectDisFieldNumber;
const int DebugMotionPlan::kFollowingObjectAFieldNumber;
const int DebugMotionPlan::kFollowingObjectMinSFieldNumber;
const int DebugMotionPlan::kFollowingObjectMinTFieldNumber;
const int DebugMotionPlan::kFollowingObjectTargetDisFieldNumber;
const int DebugMotionPlan::kIsNewPathFieldNumber;
const int DebugMotionPlan::kInitPointSFieldNumber;
const int DebugMotionPlan::kInitPointLFieldNumber;
const int DebugMotionPlan::kInitPointDlFieldNumber;
const int DebugMotionPlan::kInitPointDdlFieldNumber;
const int DebugMotionPlan::kLocposSFieldNumber;
const int DebugMotionPlan::kIsFallbackTrajectoryFieldNumber;
const int DebugMotionPlan::kPathFallbackReasonFieldNumber;
const int DebugMotionPlan::kSpeedFallbackReasonFieldNumber;
const int DebugMotionPlan::kTrajectoryTypeFieldNumber;
const int DebugMotionPlan::kIsReplanFieldNumber;
const int DebugMotionPlan::kReplanReasonFieldNumber;
const int DebugMotionPlan::kGenerateStopTrajectoryReasonFieldNumber;
const int DebugMotionPlan::kYieldObjectIdFieldNumber;
const int DebugMotionPlan::kYieldObjectVFieldNumber;
const int DebugMotionPlan::kYieldObjectCurrentSFieldNumber;
const int DebugMotionPlan::kYieldObjectCollisionMinSFieldNumber;
const int DebugMotionPlan::kYieldObjectCollisionMinTFieldNumber;
const int DebugMotionPlan::kPathDataFieldNumber;
const int DebugMotionPlan::kSpeedDataFieldNumber;
const int DebugMotionPlan::kReferenceLineSmoothedStatusFieldNumber;
const int DebugMotionPlan::kMinKappaIndexFieldNumber;
const int DebugMotionPlan::kMaxKappaIndexFieldNumber;
const int DebugMotionPlan::kKappaMinFieldNumber;
const int DebugMotionPlan::kKappaMaxFieldNumber;
const int DebugMotionPlan::kTotalTimeFieldNumber;
const int DebugMotionPlan::kPathplanTotalTimeFieldNumber;
const int DebugMotionPlan::kSpeedplanTotalTimeFieldNumber;
const int DebugMotionPlan::kSpeedplanTaskFieldNumber;
const int DebugMotionPlan::kSpeedplanTimeFieldNumber;
const int DebugMotionPlan::kSpeedUpperConstraintFieldNumber;
const int DebugMotionPlan::kSpeedLowerConstraintFieldNumber;
const int DebugMotionPlan::kSUpperConstraintFieldNumber;
const int DebugMotionPlan::kSLowerConstraintFieldNumber;
const int DebugMotionPlan::kBehaviorParserTimeSpendFieldNumber;
const int DebugMotionPlan::kBehaviorParserResetTFieldNumber;
const int DebugMotionPlan::kBehaviorParserFindTargetRefLineTFieldNumber;
const int DebugMotionPlan::kBorrowTimeCountFieldNumber;
const int DebugMotionPlan::kBehaviorParserCreateReferenceLineDataTFieldNumber;
const int DebugMotionPlan::kPlanInLaneFieldNumber;
const int DebugMotionPlan::kFrameTimeSpendFieldNumber;
const int DebugMotionPlan::kTrajectoryStitcherTimeSpendFieldNumber;
const int DebugMotionPlan::kGenerateTrajectoryTimeSpendFieldNumber;
const int DebugMotionPlan::kPassbyLimitFlagFieldNumber;
const int DebugMotionPlan::kPassbyLimitSFieldNumber;
const int DebugMotionPlan::kPassbyLimitVFieldNumber;
const int DebugMotionPlan::kYieldWeightFactorFieldNumber;
const int DebugMotionPlan::kCruiseWeightFactorFieldNumber;
const int DebugMotionPlan::kFollowWeightFactorFieldNumber;
const int DebugMotionPlan::kBorrowLaneTypeFieldNumber;
const int DebugMotionPlan::kBoxPlanningStateFieldNumber;
const int DebugMotionPlan::kJerkWeightFactorFieldNumber;
const int DebugMotionPlan::kFollowVWeightFactorFieldNumber;
const int DebugMotionPlan::kAccDccModeFieldNumber;
const int DebugMotionPlan::kFollowDisErrorFieldNumber;
const int DebugMotionPlan::kRealTimeObAvoidStateFieldNumber;
const int DebugMotionPlan::kNoRealTimeCntFieldNumber;
const int DebugMotionPlan::kCogLinearVelocityFieldNumber;
const int DebugMotionPlan::kDisToVirtualWallFieldNumber;
const int DebugMotionPlan::kSentenceActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugMotionPlan::DebugMotionPlan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugMotionPlan();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.DebugMotionPlan)
}
DebugMotionPlan::DebugMotionPlan(const DebugMotionPlan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      path_data_(from.path_data_),
      speed_data_(from.speed_data_),
      speedplan_task_(from.speedplan_task_),
      speedplan_time_(from.speedplan_time_),
      speed_upper_constraint_(from.speed_upper_constraint_),
      speed_lower_constraint_(from.speed_lower_constraint_),
      s_upper_constraint_(from.s_upper_constraint_),
      s_lower_constraint_(from.s_lower_constraint_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_fallback_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path_fallback_reason().size() > 0) {
    path_fallback_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_fallback_reason_);
  }
  speed_fallback_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.speed_fallback_reason().size() > 0) {
    speed_fallback_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.speed_fallback_reason_);
  }
  generate_stop_trajectory_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.generate_stop_trajectory_reason().size() > 0) {
    generate_stop_trajectory_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generate_stop_trajectory_reason_);
  }
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&sentence_action_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(sentence_action_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.DebugMotionPlan)
}

void DebugMotionPlan::SharedCtor() {
  path_fallback_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  speed_fallback_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generate_stop_trajectory_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sentence_action_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(sentence_action_));
  _cached_size_ = 0;
}

DebugMotionPlan::~DebugMotionPlan() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.DebugMotionPlan)
  SharedDtor();
}

void DebugMotionPlan::SharedDtor() {
  path_fallback_reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  speed_fallback_reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generate_stop_trajectory_reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DebugMotionPlan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugMotionPlan::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugMotionPlan& DebugMotionPlan::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugMotionPlan();
  return *internal_default_instance();
}

DebugMotionPlan* DebugMotionPlan::New(::google::protobuf::Arena* arena) const {
  DebugMotionPlan* n = new DebugMotionPlan;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugMotionPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.DebugMotionPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_data_.Clear();
  speed_data_.Clear();
  speedplan_task_.Clear();
  speedplan_time_.Clear();
  speed_upper_constraint_.Clear();
  speed_lower_constraint_.Clear();
  s_upper_constraint_.Clear();
  s_lower_constraint_.Clear();
  path_fallback_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  speed_fallback_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generate_stop_trajectory_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sentence_action_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(sentence_action_));
  _internal_metadata_.Clear();
}

bool DebugMotionPlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.DebugMotionPlan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double time_stamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double v = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double kappa = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double a = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ego_speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ego_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cruise_speed_max = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cruise_speed_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 following_object_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &following_object_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double following_object_v = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &following_object_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double following_object_dis = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &following_object_dis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double following_object_a = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &following_object_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double following_object_min_s = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &following_object_min_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double following_object_min_t = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &following_object_min_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double following_object_target_dis = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &following_object_target_dis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_new_path = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_new_path_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double init_point_s = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &init_point_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double init_point_l = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &init_point_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double init_point_dl = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &init_point_dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double init_point_ddl = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &init_point_ddl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double locpos_s = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &locpos_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_fallback_trajectory = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_fallback_trajectory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path_fallback_reason = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path_fallback_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path_fallback_reason().data(), static_cast<int>(this->path_fallback_reason().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.DebugMotionPlan.path_fallback_reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string speed_fallback_reason = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_speed_fallback_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->speed_fallback_reason().data(), static_cast<int>(this->speed_fallback_reason().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.DebugMotionPlan.speed_fallback_reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trajectory_type = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_replan = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_replan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 replan_reason = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replan_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string generate_stop_trajectory_reason = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_generate_stop_trajectory_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->generate_stop_trajectory_reason().data(), static_cast<int>(this->generate_stop_trajectory_reason().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.DebugMotionPlan.generate_stop_trajectory_reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 yield_object_id = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yield_object_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yield_object_v = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yield_object_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yield_object_current_s = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yield_object_current_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yield_object_collision_min_s = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yield_object_collision_min_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yield_object_collision_min_t = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u /* 249 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yield_object_collision_min_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.SLPoint path_data = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_path_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.SpeedPoint speed_data = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_speed_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reference_line_smoothed_status = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reference_line_smoothed_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_kappa_index = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_kappa_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_kappa_index = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_kappa_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float kappa_min = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 301 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kappa_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float kappa_max = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 309 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kappa_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float total_time = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 317 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pathplan_total_time = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 325 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pathplan_total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speedplan_total_time = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 333 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speedplan_total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string speedplan_task = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_speedplan_task()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->speedplan_task(this->speedplan_task_size() - 1).data(),
            static_cast<int>(this->speedplan_task(this->speedplan_task_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.DebugMotionPlan.speedplan_task"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float speedplan_time = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 346 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_speedplan_time())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 349 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 346u, input, this->mutable_speedplan_time())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float speed_upper_constraint = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 354 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_speed_upper_constraint())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 357 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 354u, input, this->mutable_speed_upper_constraint())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float speed_lower_constraint = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 362 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_speed_lower_constraint())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 365 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 362u, input, this->mutable_speed_lower_constraint())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float s_upper_constraint = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 370 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_s_upper_constraint())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 373 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 370u, input, this->mutable_s_upper_constraint())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float s_lower_constraint = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 378 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_s_lower_constraint())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 381 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 378u, input, this->mutable_s_lower_constraint())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float behavior_parser_time_spend = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 389 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &behavior_parser_time_spend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float behavior_parser_Reset_t = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 397 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &behavior_parser_reset_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float behavior_parser_FindTargetRefLine_t = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 405 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &behavior_parser_findtargetrefline_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 borrow_time_count = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 408 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &borrow_time_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float behavior_parser_CreateReferenceLineData_t = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 421 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &behavior_parser_createreferencelinedata_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 plan_in_lane_ = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plan_in_lane__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float frame_time_spend = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 437 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frame_time_spend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float trajectory_stitcher_time_spend = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 445 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &trajectory_stitcher_time_spend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float generate_trajectory_time_spend = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 453 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &generate_trajectory_time_spend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 passby_limit_flag = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passby_limit_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float passby_limit_s = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 469 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &passby_limit_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float passby_limit_v = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u /* 477 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &passby_limit_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yield_weight_factor = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u /* 485 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yield_weight_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cruise_weight_factor = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(237u /* 493 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cruise_weight_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float follow_weight_factor = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(245u /* 501 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &follow_weight_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 borrow_lane_type = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 504 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &borrow_lane_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 box_planning_state = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 512 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &box_planning_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float jerk_weight_factor = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 525 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jerk_weight_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float follow_v_weight_factor = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 533 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &follow_v_weight_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 acc_dcc_mode = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 536 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acc_dcc_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float follow_dis_error = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 549 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &follow_dis_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 real_time_ob_avoid_state = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 552 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &real_time_ob_avoid_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 no_real_time_cnt = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &no_real_time_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cog_linear_velocity = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 573 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cog_linear_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dis_to_virtual_wall = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 581 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dis_to_virtual_wall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sentence_action = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 584 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sentence_action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.DebugMotionPlan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.DebugMotionPlan)
  return false;
#undef DO_
}

void DebugMotionPlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.DebugMotionPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_stamp = 1;
  if (this->time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time_stamp(), output);
  }

  // double v = 2;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->v(), output);
  }

  // double kappa = 3;
  if (this->kappa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->kappa(), output);
  }

  // double a = 4;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->a(), output);
  }

  // double ego_speed = 5;
  if (this->ego_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ego_speed(), output);
  }

  // double cruise_speed_max = 6;
  if (this->cruise_speed_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->cruise_speed_max(), output);
  }

  // int32 following_object_id = 7;
  if (this->following_object_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->following_object_id(), output);
  }

  // double following_object_v = 8;
  if (this->following_object_v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->following_object_v(), output);
  }

  // double following_object_dis = 9;
  if (this->following_object_dis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->following_object_dis(), output);
  }

  // double following_object_a = 10;
  if (this->following_object_a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->following_object_a(), output);
  }

  // double following_object_min_s = 11;
  if (this->following_object_min_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->following_object_min_s(), output);
  }

  // double following_object_min_t = 12;
  if (this->following_object_min_t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->following_object_min_t(), output);
  }

  // double following_object_target_dis = 13;
  if (this->following_object_target_dis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->following_object_target_dis(), output);
  }

  // int32 is_new_path = 14;
  if (this->is_new_path() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->is_new_path(), output);
  }

  // double init_point_s = 15;
  if (this->init_point_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->init_point_s(), output);
  }

  // double init_point_l = 16;
  if (this->init_point_l() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->init_point_l(), output);
  }

  // double init_point_dl = 17;
  if (this->init_point_dl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->init_point_dl(), output);
  }

  // double init_point_ddl = 18;
  if (this->init_point_ddl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->init_point_ddl(), output);
  }

  // double locpos_s = 19;
  if (this->locpos_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->locpos_s(), output);
  }

  // int32 is_fallback_trajectory = 20;
  if (this->is_fallback_trajectory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->is_fallback_trajectory(), output);
  }

  // string path_fallback_reason = 21;
  if (this->path_fallback_reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path_fallback_reason().data(), static_cast<int>(this->path_fallback_reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugMotionPlan.path_fallback_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->path_fallback_reason(), output);
  }

  // string speed_fallback_reason = 22;
  if (this->speed_fallback_reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->speed_fallback_reason().data(), static_cast<int>(this->speed_fallback_reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugMotionPlan.speed_fallback_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->speed_fallback_reason(), output);
  }

  // int32 trajectory_type = 23;
  if (this->trajectory_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->trajectory_type(), output);
  }

  // bool is_replan = 24;
  if (this->is_replan() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->is_replan(), output);
  }

  // int32 replan_reason = 25;
  if (this->replan_reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->replan_reason(), output);
  }

  // string generate_stop_trajectory_reason = 26;
  if (this->generate_stop_trajectory_reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->generate_stop_trajectory_reason().data(), static_cast<int>(this->generate_stop_trajectory_reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugMotionPlan.generate_stop_trajectory_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->generate_stop_trajectory_reason(), output);
  }

  // int32 yield_object_id = 27;
  if (this->yield_object_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->yield_object_id(), output);
  }

  // double yield_object_v = 28;
  if (this->yield_object_v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->yield_object_v(), output);
  }

  // double yield_object_current_s = 29;
  if (this->yield_object_current_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->yield_object_current_s(), output);
  }

  // double yield_object_collision_min_s = 30;
  if (this->yield_object_collision_min_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->yield_object_collision_min_s(), output);
  }

  // double yield_object_collision_min_t = 31;
  if (this->yield_object_collision_min_t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->yield_object_collision_min_t(), output);
  }

  // repeated .planning_debug_msgs.SLPoint path_data = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->path_data(static_cast<int>(i)), output);
  }

  // repeated .planning_debug_msgs.SpeedPoint speed_data = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speed_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->speed_data(static_cast<int>(i)), output);
  }

  // int32 reference_line_smoothed_status = 34;
  if (this->reference_line_smoothed_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->reference_line_smoothed_status(), output);
  }

  // int32 min_kappa_index = 35;
  if (this->min_kappa_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->min_kappa_index(), output);
  }

  // int32 max_kappa_index = 36;
  if (this->max_kappa_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->max_kappa_index(), output);
  }

  // float kappa_min = 37;
  if (this->kappa_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->kappa_min(), output);
  }

  // float kappa_max = 38;
  if (this->kappa_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->kappa_max(), output);
  }

  // float total_time = 39;
  if (this->total_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->total_time(), output);
  }

  // float pathplan_total_time = 40;
  if (this->pathplan_total_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->pathplan_total_time(), output);
  }

  // float speedplan_total_time = 41;
  if (this->speedplan_total_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->speedplan_total_time(), output);
  }

  // repeated string speedplan_task = 42;
  for (int i = 0, n = this->speedplan_task_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->speedplan_task(i).data(), static_cast<int>(this->speedplan_task(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugMotionPlan.speedplan_task");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      42, this->speedplan_task(i), output);
  }

  // repeated float speedplan_time = 43;
  if (this->speedplan_time_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(43, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _speedplan_time_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->speedplan_time().data(), this->speedplan_time_size(), output);
  }

  // repeated float speed_upper_constraint = 44;
  if (this->speed_upper_constraint_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(44, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _speed_upper_constraint_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->speed_upper_constraint().data(), this->speed_upper_constraint_size(), output);
  }

  // repeated float speed_lower_constraint = 45;
  if (this->speed_lower_constraint_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(45, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _speed_lower_constraint_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->speed_lower_constraint().data(), this->speed_lower_constraint_size(), output);
  }

  // repeated float s_upper_constraint = 46;
  if (this->s_upper_constraint_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(46, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _s_upper_constraint_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->s_upper_constraint().data(), this->s_upper_constraint_size(), output);
  }

  // repeated float s_lower_constraint = 47;
  if (this->s_lower_constraint_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(47, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _s_lower_constraint_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->s_lower_constraint().data(), this->s_lower_constraint_size(), output);
  }

  // float behavior_parser_time_spend = 48;
  if (this->behavior_parser_time_spend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(48, this->behavior_parser_time_spend(), output);
  }

  // float behavior_parser_Reset_t = 49;
  if (this->behavior_parser_reset_t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(49, this->behavior_parser_reset_t(), output);
  }

  // float behavior_parser_FindTargetRefLine_t = 50;
  if (this->behavior_parser_findtargetrefline_t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->behavior_parser_findtargetrefline_t(), output);
  }

  // int32 borrow_time_count = 51;
  if (this->borrow_time_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->borrow_time_count(), output);
  }

  // float behavior_parser_CreateReferenceLineData_t = 52;
  if (this->behavior_parser_createreferencelinedata_t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(52, this->behavior_parser_createreferencelinedata_t(), output);
  }

  // int32 plan_in_lane_ = 53;
  if (this->plan_in_lane_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->plan_in_lane_(), output);
  }

  // float frame_time_spend = 54;
  if (this->frame_time_spend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(54, this->frame_time_spend(), output);
  }

  // float trajectory_stitcher_time_spend = 55;
  if (this->trajectory_stitcher_time_spend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(55, this->trajectory_stitcher_time_spend(), output);
  }

  // float generate_trajectory_time_spend = 56;
  if (this->generate_trajectory_time_spend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(56, this->generate_trajectory_time_spend(), output);
  }

  // int32 passby_limit_flag = 57;
  if (this->passby_limit_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->passby_limit_flag(), output);
  }

  // float passby_limit_s = 58;
  if (this->passby_limit_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(58, this->passby_limit_s(), output);
  }

  // float passby_limit_v = 59;
  if (this->passby_limit_v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(59, this->passby_limit_v(), output);
  }

  // float yield_weight_factor = 60;
  if (this->yield_weight_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(60, this->yield_weight_factor(), output);
  }

  // float cruise_weight_factor = 61;
  if (this->cruise_weight_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(61, this->cruise_weight_factor(), output);
  }

  // float follow_weight_factor = 62;
  if (this->follow_weight_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(62, this->follow_weight_factor(), output);
  }

  // int32 borrow_lane_type = 63;
  if (this->borrow_lane_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->borrow_lane_type(), output);
  }

  // int32 box_planning_state = 64;
  if (this->box_planning_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->box_planning_state(), output);
  }

  // float jerk_weight_factor = 65;
  if (this->jerk_weight_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(65, this->jerk_weight_factor(), output);
  }

  // float follow_v_weight_factor = 66;
  if (this->follow_v_weight_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(66, this->follow_v_weight_factor(), output);
  }

  // int32 acc_dcc_mode = 67;
  if (this->acc_dcc_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->acc_dcc_mode(), output);
  }

  // float follow_dis_error = 68;
  if (this->follow_dis_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(68, this->follow_dis_error(), output);
  }

  // int32 real_time_ob_avoid_state = 69;
  if (this->real_time_ob_avoid_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->real_time_ob_avoid_state(), output);
  }

  // int32 no_real_time_cnt = 70;
  if (this->no_real_time_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->no_real_time_cnt(), output);
  }

  // float cog_linear_velocity = 71;
  if (this->cog_linear_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(71, this->cog_linear_velocity(), output);
  }

  // float dis_to_virtual_wall = 72;
  if (this->dis_to_virtual_wall() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(72, this->dis_to_virtual_wall(), output);
  }

  // int32 sentence_action = 73;
  if (this->sentence_action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(73, this->sentence_action(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.DebugMotionPlan)
}

::google::protobuf::uint8* DebugMotionPlan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.DebugMotionPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_stamp = 1;
  if (this->time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time_stamp(), target);
  }

  // double v = 2;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->v(), target);
  }

  // double kappa = 3;
  if (this->kappa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->kappa(), target);
  }

  // double a = 4;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->a(), target);
  }

  // double ego_speed = 5;
  if (this->ego_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ego_speed(), target);
  }

  // double cruise_speed_max = 6;
  if (this->cruise_speed_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->cruise_speed_max(), target);
  }

  // int32 following_object_id = 7;
  if (this->following_object_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->following_object_id(), target);
  }

  // double following_object_v = 8;
  if (this->following_object_v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->following_object_v(), target);
  }

  // double following_object_dis = 9;
  if (this->following_object_dis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->following_object_dis(), target);
  }

  // double following_object_a = 10;
  if (this->following_object_a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->following_object_a(), target);
  }

  // double following_object_min_s = 11;
  if (this->following_object_min_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->following_object_min_s(), target);
  }

  // double following_object_min_t = 12;
  if (this->following_object_min_t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->following_object_min_t(), target);
  }

  // double following_object_target_dis = 13;
  if (this->following_object_target_dis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->following_object_target_dis(), target);
  }

  // int32 is_new_path = 14;
  if (this->is_new_path() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->is_new_path(), target);
  }

  // double init_point_s = 15;
  if (this->init_point_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->init_point_s(), target);
  }

  // double init_point_l = 16;
  if (this->init_point_l() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->init_point_l(), target);
  }

  // double init_point_dl = 17;
  if (this->init_point_dl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->init_point_dl(), target);
  }

  // double init_point_ddl = 18;
  if (this->init_point_ddl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->init_point_ddl(), target);
  }

  // double locpos_s = 19;
  if (this->locpos_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->locpos_s(), target);
  }

  // int32 is_fallback_trajectory = 20;
  if (this->is_fallback_trajectory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->is_fallback_trajectory(), target);
  }

  // string path_fallback_reason = 21;
  if (this->path_fallback_reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path_fallback_reason().data(), static_cast<int>(this->path_fallback_reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugMotionPlan.path_fallback_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->path_fallback_reason(), target);
  }

  // string speed_fallback_reason = 22;
  if (this->speed_fallback_reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->speed_fallback_reason().data(), static_cast<int>(this->speed_fallback_reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugMotionPlan.speed_fallback_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->speed_fallback_reason(), target);
  }

  // int32 trajectory_type = 23;
  if (this->trajectory_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->trajectory_type(), target);
  }

  // bool is_replan = 24;
  if (this->is_replan() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->is_replan(), target);
  }

  // int32 replan_reason = 25;
  if (this->replan_reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->replan_reason(), target);
  }

  // string generate_stop_trajectory_reason = 26;
  if (this->generate_stop_trajectory_reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->generate_stop_trajectory_reason().data(), static_cast<int>(this->generate_stop_trajectory_reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugMotionPlan.generate_stop_trajectory_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->generate_stop_trajectory_reason(), target);
  }

  // int32 yield_object_id = 27;
  if (this->yield_object_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->yield_object_id(), target);
  }

  // double yield_object_v = 28;
  if (this->yield_object_v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->yield_object_v(), target);
  }

  // double yield_object_current_s = 29;
  if (this->yield_object_current_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->yield_object_current_s(), target);
  }

  // double yield_object_collision_min_s = 30;
  if (this->yield_object_collision_min_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->yield_object_collision_min_s(), target);
  }

  // double yield_object_collision_min_t = 31;
  if (this->yield_object_collision_min_t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->yield_object_collision_min_t(), target);
  }

  // repeated .planning_debug_msgs.SLPoint path_data = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, this->path_data(static_cast<int>(i)), deterministic, target);
  }

  // repeated .planning_debug_msgs.SpeedPoint speed_data = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speed_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        33, this->speed_data(static_cast<int>(i)), deterministic, target);
  }

  // int32 reference_line_smoothed_status = 34;
  if (this->reference_line_smoothed_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->reference_line_smoothed_status(), target);
  }

  // int32 min_kappa_index = 35;
  if (this->min_kappa_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->min_kappa_index(), target);
  }

  // int32 max_kappa_index = 36;
  if (this->max_kappa_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->max_kappa_index(), target);
  }

  // float kappa_min = 37;
  if (this->kappa_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(37, this->kappa_min(), target);
  }

  // float kappa_max = 38;
  if (this->kappa_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->kappa_max(), target);
  }

  // float total_time = 39;
  if (this->total_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->total_time(), target);
  }

  // float pathplan_total_time = 40;
  if (this->pathplan_total_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->pathplan_total_time(), target);
  }

  // float speedplan_total_time = 41;
  if (this->speedplan_total_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(41, this->speedplan_total_time(), target);
  }

  // repeated string speedplan_task = 42;
  for (int i = 0, n = this->speedplan_task_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->speedplan_task(i).data(), static_cast<int>(this->speedplan_task(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugMotionPlan.speedplan_task");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(42, this->speedplan_task(i), target);
  }

  // repeated float speedplan_time = 43;
  if (this->speedplan_time_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      43,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _speedplan_time_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->speedplan_time_, target);
  }

  // repeated float speed_upper_constraint = 44;
  if (this->speed_upper_constraint_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      44,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _speed_upper_constraint_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->speed_upper_constraint_, target);
  }

  // repeated float speed_lower_constraint = 45;
  if (this->speed_lower_constraint_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      45,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _speed_lower_constraint_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->speed_lower_constraint_, target);
  }

  // repeated float s_upper_constraint = 46;
  if (this->s_upper_constraint_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      46,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _s_upper_constraint_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->s_upper_constraint_, target);
  }

  // repeated float s_lower_constraint = 47;
  if (this->s_lower_constraint_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      47,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _s_lower_constraint_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->s_lower_constraint_, target);
  }

  // float behavior_parser_time_spend = 48;
  if (this->behavior_parser_time_spend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(48, this->behavior_parser_time_spend(), target);
  }

  // float behavior_parser_Reset_t = 49;
  if (this->behavior_parser_reset_t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(49, this->behavior_parser_reset_t(), target);
  }

  // float behavior_parser_FindTargetRefLine_t = 50;
  if (this->behavior_parser_findtargetrefline_t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(50, this->behavior_parser_findtargetrefline_t(), target);
  }

  // int32 borrow_time_count = 51;
  if (this->borrow_time_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->borrow_time_count(), target);
  }

  // float behavior_parser_CreateReferenceLineData_t = 52;
  if (this->behavior_parser_createreferencelinedata_t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(52, this->behavior_parser_createreferencelinedata_t(), target);
  }

  // int32 plan_in_lane_ = 53;
  if (this->plan_in_lane_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->plan_in_lane_(), target);
  }

  // float frame_time_spend = 54;
  if (this->frame_time_spend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(54, this->frame_time_spend(), target);
  }

  // float trajectory_stitcher_time_spend = 55;
  if (this->trajectory_stitcher_time_spend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(55, this->trajectory_stitcher_time_spend(), target);
  }

  // float generate_trajectory_time_spend = 56;
  if (this->generate_trajectory_time_spend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(56, this->generate_trajectory_time_spend(), target);
  }

  // int32 passby_limit_flag = 57;
  if (this->passby_limit_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->passby_limit_flag(), target);
  }

  // float passby_limit_s = 58;
  if (this->passby_limit_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(58, this->passby_limit_s(), target);
  }

  // float passby_limit_v = 59;
  if (this->passby_limit_v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(59, this->passby_limit_v(), target);
  }

  // float yield_weight_factor = 60;
  if (this->yield_weight_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(60, this->yield_weight_factor(), target);
  }

  // float cruise_weight_factor = 61;
  if (this->cruise_weight_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(61, this->cruise_weight_factor(), target);
  }

  // float follow_weight_factor = 62;
  if (this->follow_weight_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(62, this->follow_weight_factor(), target);
  }

  // int32 borrow_lane_type = 63;
  if (this->borrow_lane_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->borrow_lane_type(), target);
  }

  // int32 box_planning_state = 64;
  if (this->box_planning_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->box_planning_state(), target);
  }

  // float jerk_weight_factor = 65;
  if (this->jerk_weight_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(65, this->jerk_weight_factor(), target);
  }

  // float follow_v_weight_factor = 66;
  if (this->follow_v_weight_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(66, this->follow_v_weight_factor(), target);
  }

  // int32 acc_dcc_mode = 67;
  if (this->acc_dcc_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->acc_dcc_mode(), target);
  }

  // float follow_dis_error = 68;
  if (this->follow_dis_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(68, this->follow_dis_error(), target);
  }

  // int32 real_time_ob_avoid_state = 69;
  if (this->real_time_ob_avoid_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->real_time_ob_avoid_state(), target);
  }

  // int32 no_real_time_cnt = 70;
  if (this->no_real_time_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->no_real_time_cnt(), target);
  }

  // float cog_linear_velocity = 71;
  if (this->cog_linear_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(71, this->cog_linear_velocity(), target);
  }

  // float dis_to_virtual_wall = 72;
  if (this->dis_to_virtual_wall() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(72, this->dis_to_virtual_wall(), target);
  }

  // int32 sentence_action = 73;
  if (this->sentence_action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(73, this->sentence_action(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.DebugMotionPlan)
  return target;
}

size_t DebugMotionPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.DebugMotionPlan)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .planning_debug_msgs.SLPoint path_data = 32;
  {
    unsigned int count = static_cast<unsigned int>(this->path_data_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->path_data(static_cast<int>(i)));
    }
  }

  // repeated .planning_debug_msgs.SpeedPoint speed_data = 33;
  {
    unsigned int count = static_cast<unsigned int>(this->speed_data_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->speed_data(static_cast<int>(i)));
    }
  }

  // repeated string speedplan_task = 42;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->speedplan_task_size());
  for (int i = 0, n = this->speedplan_task_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->speedplan_task(i));
  }

  // repeated float speedplan_time = 43;
  {
    unsigned int count = static_cast<unsigned int>(this->speedplan_time_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _speedplan_time_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float speed_upper_constraint = 44;
  {
    unsigned int count = static_cast<unsigned int>(this->speed_upper_constraint_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _speed_upper_constraint_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float speed_lower_constraint = 45;
  {
    unsigned int count = static_cast<unsigned int>(this->speed_lower_constraint_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _speed_lower_constraint_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float s_upper_constraint = 46;
  {
    unsigned int count = static_cast<unsigned int>(this->s_upper_constraint_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _s_upper_constraint_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float s_lower_constraint = 47;
  {
    unsigned int count = static_cast<unsigned int>(this->s_lower_constraint_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _s_lower_constraint_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string path_fallback_reason = 21;
  if (this->path_fallback_reason().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path_fallback_reason());
  }

  // string speed_fallback_reason = 22;
  if (this->speed_fallback_reason().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->speed_fallback_reason());
  }

  // string generate_stop_trajectory_reason = 26;
  if (this->generate_stop_trajectory_reason().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->generate_stop_trajectory_reason());
  }

  // double time_stamp = 1;
  if (this->time_stamp() != 0) {
    total_size += 1 + 8;
  }

  // double v = 2;
  if (this->v() != 0) {
    total_size += 1 + 8;
  }

  // double kappa = 3;
  if (this->kappa() != 0) {
    total_size += 1 + 8;
  }

  // double a = 4;
  if (this->a() != 0) {
    total_size += 1 + 8;
  }

  // double ego_speed = 5;
  if (this->ego_speed() != 0) {
    total_size += 1 + 8;
  }

  // double cruise_speed_max = 6;
  if (this->cruise_speed_max() != 0) {
    total_size += 1 + 8;
  }

  // double following_object_v = 8;
  if (this->following_object_v() != 0) {
    total_size += 1 + 8;
  }

  // double following_object_dis = 9;
  if (this->following_object_dis() != 0) {
    total_size += 1 + 8;
  }

  // double following_object_a = 10;
  if (this->following_object_a() != 0) {
    total_size += 1 + 8;
  }

  // int32 following_object_id = 7;
  if (this->following_object_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->following_object_id());
  }

  // int32 is_new_path = 14;
  if (this->is_new_path() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_new_path());
  }

  // double following_object_min_s = 11;
  if (this->following_object_min_s() != 0) {
    total_size += 1 + 8;
  }

  // double following_object_min_t = 12;
  if (this->following_object_min_t() != 0) {
    total_size += 1 + 8;
  }

  // double following_object_target_dis = 13;
  if (this->following_object_target_dis() != 0) {
    total_size += 1 + 8;
  }

  // double init_point_s = 15;
  if (this->init_point_s() != 0) {
    total_size += 1 + 8;
  }

  // double init_point_l = 16;
  if (this->init_point_l() != 0) {
    total_size += 2 + 8;
  }

  // double init_point_dl = 17;
  if (this->init_point_dl() != 0) {
    total_size += 2 + 8;
  }

  // double init_point_ddl = 18;
  if (this->init_point_ddl() != 0) {
    total_size += 2 + 8;
  }

  // double locpos_s = 19;
  if (this->locpos_s() != 0) {
    total_size += 2 + 8;
  }

  // int32 is_fallback_trajectory = 20;
  if (this->is_fallback_trajectory() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_fallback_trajectory());
  }

  // int32 trajectory_type = 23;
  if (this->trajectory_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_type());
  }

  // bool is_replan = 24;
  if (this->is_replan() != 0) {
    total_size += 2 + 1;
  }

  // int32 replan_reason = 25;
  if (this->replan_reason() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replan_reason());
  }

  // double yield_object_v = 28;
  if (this->yield_object_v() != 0) {
    total_size += 2 + 8;
  }

  // double yield_object_current_s = 29;
  if (this->yield_object_current_s() != 0) {
    total_size += 2 + 8;
  }

  // double yield_object_collision_min_s = 30;
  if (this->yield_object_collision_min_s() != 0) {
    total_size += 2 + 8;
  }

  // int32 yield_object_id = 27;
  if (this->yield_object_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->yield_object_id());
  }

  // int32 reference_line_smoothed_status = 34;
  if (this->reference_line_smoothed_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reference_line_smoothed_status());
  }

  // double yield_object_collision_min_t = 31;
  if (this->yield_object_collision_min_t() != 0) {
    total_size += 2 + 8;
  }

  // int32 min_kappa_index = 35;
  if (this->min_kappa_index() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_kappa_index());
  }

  // int32 max_kappa_index = 36;
  if (this->max_kappa_index() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_kappa_index());
  }

  // float kappa_min = 37;
  if (this->kappa_min() != 0) {
    total_size += 2 + 4;
  }

  // float kappa_max = 38;
  if (this->kappa_max() != 0) {
    total_size += 2 + 4;
  }

  // float total_time = 39;
  if (this->total_time() != 0) {
    total_size += 2 + 4;
  }

  // float pathplan_total_time = 40;
  if (this->pathplan_total_time() != 0) {
    total_size += 2 + 4;
  }

  // float speedplan_total_time = 41;
  if (this->speedplan_total_time() != 0) {
    total_size += 2 + 4;
  }

  // float behavior_parser_time_spend = 48;
  if (this->behavior_parser_time_spend() != 0) {
    total_size += 2 + 4;
  }

  // float behavior_parser_Reset_t = 49;
  if (this->behavior_parser_reset_t() != 0) {
    total_size += 2 + 4;
  }

  // float behavior_parser_FindTargetRefLine_t = 50;
  if (this->behavior_parser_findtargetrefline_t() != 0) {
    total_size += 2 + 4;
  }

  // int32 borrow_time_count = 51;
  if (this->borrow_time_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->borrow_time_count());
  }

  // float behavior_parser_CreateReferenceLineData_t = 52;
  if (this->behavior_parser_createreferencelinedata_t() != 0) {
    total_size += 2 + 4;
  }

  // int32 plan_in_lane_ = 53;
  if (this->plan_in_lane_() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->plan_in_lane_());
  }

  // float frame_time_spend = 54;
  if (this->frame_time_spend() != 0) {
    total_size += 2 + 4;
  }

  // float trajectory_stitcher_time_spend = 55;
  if (this->trajectory_stitcher_time_spend() != 0) {
    total_size += 2 + 4;
  }

  // float generate_trajectory_time_spend = 56;
  if (this->generate_trajectory_time_spend() != 0) {
    total_size += 2 + 4;
  }

  // int32 passby_limit_flag = 57;
  if (this->passby_limit_flag() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->passby_limit_flag());
  }

  // float passby_limit_s = 58;
  if (this->passby_limit_s() != 0) {
    total_size += 2 + 4;
  }

  // float passby_limit_v = 59;
  if (this->passby_limit_v() != 0) {
    total_size += 2 + 4;
  }

  // float yield_weight_factor = 60;
  if (this->yield_weight_factor() != 0) {
    total_size += 2 + 4;
  }

  // float cruise_weight_factor = 61;
  if (this->cruise_weight_factor() != 0) {
    total_size += 2 + 4;
  }

  // float follow_weight_factor = 62;
  if (this->follow_weight_factor() != 0) {
    total_size += 2 + 4;
  }

  // int32 borrow_lane_type = 63;
  if (this->borrow_lane_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->borrow_lane_type());
  }

  // int32 box_planning_state = 64;
  if (this->box_planning_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->box_planning_state());
  }

  // float jerk_weight_factor = 65;
  if (this->jerk_weight_factor() != 0) {
    total_size += 2 + 4;
  }

  // float follow_v_weight_factor = 66;
  if (this->follow_v_weight_factor() != 0) {
    total_size += 2 + 4;
  }

  // int32 acc_dcc_mode = 67;
  if (this->acc_dcc_mode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->acc_dcc_mode());
  }

  // float follow_dis_error = 68;
  if (this->follow_dis_error() != 0) {
    total_size += 2 + 4;
  }

  // int32 real_time_ob_avoid_state = 69;
  if (this->real_time_ob_avoid_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->real_time_ob_avoid_state());
  }

  // int32 no_real_time_cnt = 70;
  if (this->no_real_time_cnt() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->no_real_time_cnt());
  }

  // float cog_linear_velocity = 71;
  if (this->cog_linear_velocity() != 0) {
    total_size += 2 + 4;
  }

  // float dis_to_virtual_wall = 72;
  if (this->dis_to_virtual_wall() != 0) {
    total_size += 2 + 4;
  }

  // int32 sentence_action = 73;
  if (this->sentence_action() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sentence_action());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugMotionPlan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.DebugMotionPlan)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugMotionPlan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugMotionPlan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.DebugMotionPlan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.DebugMotionPlan)
    MergeFrom(*source);
  }
}

void DebugMotionPlan::MergeFrom(const DebugMotionPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.DebugMotionPlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_data_.MergeFrom(from.path_data_);
  speed_data_.MergeFrom(from.speed_data_);
  speedplan_task_.MergeFrom(from.speedplan_task_);
  speedplan_time_.MergeFrom(from.speedplan_time_);
  speed_upper_constraint_.MergeFrom(from.speed_upper_constraint_);
  speed_lower_constraint_.MergeFrom(from.speed_lower_constraint_);
  s_upper_constraint_.MergeFrom(from.s_upper_constraint_);
  s_lower_constraint_.MergeFrom(from.s_lower_constraint_);
  if (from.path_fallback_reason().size() > 0) {

    path_fallback_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_fallback_reason_);
  }
  if (from.speed_fallback_reason().size() > 0) {

    speed_fallback_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.speed_fallback_reason_);
  }
  if (from.generate_stop_trajectory_reason().size() > 0) {

    generate_stop_trajectory_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generate_stop_trajectory_reason_);
  }
  if (from.time_stamp() != 0) {
    set_time_stamp(from.time_stamp());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.kappa() != 0) {
    set_kappa(from.kappa());
  }
  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.ego_speed() != 0) {
    set_ego_speed(from.ego_speed());
  }
  if (from.cruise_speed_max() != 0) {
    set_cruise_speed_max(from.cruise_speed_max());
  }
  if (from.following_object_v() != 0) {
    set_following_object_v(from.following_object_v());
  }
  if (from.following_object_dis() != 0) {
    set_following_object_dis(from.following_object_dis());
  }
  if (from.following_object_a() != 0) {
    set_following_object_a(from.following_object_a());
  }
  if (from.following_object_id() != 0) {
    set_following_object_id(from.following_object_id());
  }
  if (from.is_new_path() != 0) {
    set_is_new_path(from.is_new_path());
  }
  if (from.following_object_min_s() != 0) {
    set_following_object_min_s(from.following_object_min_s());
  }
  if (from.following_object_min_t() != 0) {
    set_following_object_min_t(from.following_object_min_t());
  }
  if (from.following_object_target_dis() != 0) {
    set_following_object_target_dis(from.following_object_target_dis());
  }
  if (from.init_point_s() != 0) {
    set_init_point_s(from.init_point_s());
  }
  if (from.init_point_l() != 0) {
    set_init_point_l(from.init_point_l());
  }
  if (from.init_point_dl() != 0) {
    set_init_point_dl(from.init_point_dl());
  }
  if (from.init_point_ddl() != 0) {
    set_init_point_ddl(from.init_point_ddl());
  }
  if (from.locpos_s() != 0) {
    set_locpos_s(from.locpos_s());
  }
  if (from.is_fallback_trajectory() != 0) {
    set_is_fallback_trajectory(from.is_fallback_trajectory());
  }
  if (from.trajectory_type() != 0) {
    set_trajectory_type(from.trajectory_type());
  }
  if (from.is_replan() != 0) {
    set_is_replan(from.is_replan());
  }
  if (from.replan_reason() != 0) {
    set_replan_reason(from.replan_reason());
  }
  if (from.yield_object_v() != 0) {
    set_yield_object_v(from.yield_object_v());
  }
  if (from.yield_object_current_s() != 0) {
    set_yield_object_current_s(from.yield_object_current_s());
  }
  if (from.yield_object_collision_min_s() != 0) {
    set_yield_object_collision_min_s(from.yield_object_collision_min_s());
  }
  if (from.yield_object_id() != 0) {
    set_yield_object_id(from.yield_object_id());
  }
  if (from.reference_line_smoothed_status() != 0) {
    set_reference_line_smoothed_status(from.reference_line_smoothed_status());
  }
  if (from.yield_object_collision_min_t() != 0) {
    set_yield_object_collision_min_t(from.yield_object_collision_min_t());
  }
  if (from.min_kappa_index() != 0) {
    set_min_kappa_index(from.min_kappa_index());
  }
  if (from.max_kappa_index() != 0) {
    set_max_kappa_index(from.max_kappa_index());
  }
  if (from.kappa_min() != 0) {
    set_kappa_min(from.kappa_min());
  }
  if (from.kappa_max() != 0) {
    set_kappa_max(from.kappa_max());
  }
  if (from.total_time() != 0) {
    set_total_time(from.total_time());
  }
  if (from.pathplan_total_time() != 0) {
    set_pathplan_total_time(from.pathplan_total_time());
  }
  if (from.speedplan_total_time() != 0) {
    set_speedplan_total_time(from.speedplan_total_time());
  }
  if (from.behavior_parser_time_spend() != 0) {
    set_behavior_parser_time_spend(from.behavior_parser_time_spend());
  }
  if (from.behavior_parser_reset_t() != 0) {
    set_behavior_parser_reset_t(from.behavior_parser_reset_t());
  }
  if (from.behavior_parser_findtargetrefline_t() != 0) {
    set_behavior_parser_findtargetrefline_t(from.behavior_parser_findtargetrefline_t());
  }
  if (from.borrow_time_count() != 0) {
    set_borrow_time_count(from.borrow_time_count());
  }
  if (from.behavior_parser_createreferencelinedata_t() != 0) {
    set_behavior_parser_createreferencelinedata_t(from.behavior_parser_createreferencelinedata_t());
  }
  if (from.plan_in_lane_() != 0) {
    set_plan_in_lane_(from.plan_in_lane_());
  }
  if (from.frame_time_spend() != 0) {
    set_frame_time_spend(from.frame_time_spend());
  }
  if (from.trajectory_stitcher_time_spend() != 0) {
    set_trajectory_stitcher_time_spend(from.trajectory_stitcher_time_spend());
  }
  if (from.generate_trajectory_time_spend() != 0) {
    set_generate_trajectory_time_spend(from.generate_trajectory_time_spend());
  }
  if (from.passby_limit_flag() != 0) {
    set_passby_limit_flag(from.passby_limit_flag());
  }
  if (from.passby_limit_s() != 0) {
    set_passby_limit_s(from.passby_limit_s());
  }
  if (from.passby_limit_v() != 0) {
    set_passby_limit_v(from.passby_limit_v());
  }
  if (from.yield_weight_factor() != 0) {
    set_yield_weight_factor(from.yield_weight_factor());
  }
  if (from.cruise_weight_factor() != 0) {
    set_cruise_weight_factor(from.cruise_weight_factor());
  }
  if (from.follow_weight_factor() != 0) {
    set_follow_weight_factor(from.follow_weight_factor());
  }
  if (from.borrow_lane_type() != 0) {
    set_borrow_lane_type(from.borrow_lane_type());
  }
  if (from.box_planning_state() != 0) {
    set_box_planning_state(from.box_planning_state());
  }
  if (from.jerk_weight_factor() != 0) {
    set_jerk_weight_factor(from.jerk_weight_factor());
  }
  if (from.follow_v_weight_factor() != 0) {
    set_follow_v_weight_factor(from.follow_v_weight_factor());
  }
  if (from.acc_dcc_mode() != 0) {
    set_acc_dcc_mode(from.acc_dcc_mode());
  }
  if (from.follow_dis_error() != 0) {
    set_follow_dis_error(from.follow_dis_error());
  }
  if (from.real_time_ob_avoid_state() != 0) {
    set_real_time_ob_avoid_state(from.real_time_ob_avoid_state());
  }
  if (from.no_real_time_cnt() != 0) {
    set_no_real_time_cnt(from.no_real_time_cnt());
  }
  if (from.cog_linear_velocity() != 0) {
    set_cog_linear_velocity(from.cog_linear_velocity());
  }
  if (from.dis_to_virtual_wall() != 0) {
    set_dis_to_virtual_wall(from.dis_to_virtual_wall());
  }
  if (from.sentence_action() != 0) {
    set_sentence_action(from.sentence_action());
  }
}

void DebugMotionPlan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.DebugMotionPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugMotionPlan::CopyFrom(const DebugMotionPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.DebugMotionPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugMotionPlan::IsInitialized() const {
  return true;
}

void DebugMotionPlan::Swap(DebugMotionPlan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugMotionPlan::InternalSwap(DebugMotionPlan* other) {
  using std::swap;
  path_data_.InternalSwap(&other->path_data_);
  speed_data_.InternalSwap(&other->speed_data_);
  speedplan_task_.InternalSwap(&other->speedplan_task_);
  speedplan_time_.InternalSwap(&other->speedplan_time_);
  speed_upper_constraint_.InternalSwap(&other->speed_upper_constraint_);
  speed_lower_constraint_.InternalSwap(&other->speed_lower_constraint_);
  s_upper_constraint_.InternalSwap(&other->s_upper_constraint_);
  s_lower_constraint_.InternalSwap(&other->s_lower_constraint_);
  path_fallback_reason_.Swap(&other->path_fallback_reason_);
  speed_fallback_reason_.Swap(&other->speed_fallback_reason_);
  generate_stop_trajectory_reason_.Swap(&other->generate_stop_trajectory_reason_);
  swap(time_stamp_, other->time_stamp_);
  swap(v_, other->v_);
  swap(kappa_, other->kappa_);
  swap(a_, other->a_);
  swap(ego_speed_, other->ego_speed_);
  swap(cruise_speed_max_, other->cruise_speed_max_);
  swap(following_object_v_, other->following_object_v_);
  swap(following_object_dis_, other->following_object_dis_);
  swap(following_object_a_, other->following_object_a_);
  swap(following_object_id_, other->following_object_id_);
  swap(is_new_path_, other->is_new_path_);
  swap(following_object_min_s_, other->following_object_min_s_);
  swap(following_object_min_t_, other->following_object_min_t_);
  swap(following_object_target_dis_, other->following_object_target_dis_);
  swap(init_point_s_, other->init_point_s_);
  swap(init_point_l_, other->init_point_l_);
  swap(init_point_dl_, other->init_point_dl_);
  swap(init_point_ddl_, other->init_point_ddl_);
  swap(locpos_s_, other->locpos_s_);
  swap(is_fallback_trajectory_, other->is_fallback_trajectory_);
  swap(trajectory_type_, other->trajectory_type_);
  swap(is_replan_, other->is_replan_);
  swap(replan_reason_, other->replan_reason_);
  swap(yield_object_v_, other->yield_object_v_);
  swap(yield_object_current_s_, other->yield_object_current_s_);
  swap(yield_object_collision_min_s_, other->yield_object_collision_min_s_);
  swap(yield_object_id_, other->yield_object_id_);
  swap(reference_line_smoothed_status_, other->reference_line_smoothed_status_);
  swap(yield_object_collision_min_t_, other->yield_object_collision_min_t_);
  swap(min_kappa_index_, other->min_kappa_index_);
  swap(max_kappa_index_, other->max_kappa_index_);
  swap(kappa_min_, other->kappa_min_);
  swap(kappa_max_, other->kappa_max_);
  swap(total_time_, other->total_time_);
  swap(pathplan_total_time_, other->pathplan_total_time_);
  swap(speedplan_total_time_, other->speedplan_total_time_);
  swap(behavior_parser_time_spend_, other->behavior_parser_time_spend_);
  swap(behavior_parser_reset_t_, other->behavior_parser_reset_t_);
  swap(behavior_parser_findtargetrefline_t_, other->behavior_parser_findtargetrefline_t_);
  swap(borrow_time_count_, other->borrow_time_count_);
  swap(behavior_parser_createreferencelinedata_t_, other->behavior_parser_createreferencelinedata_t_);
  swap(plan_in_lane__, other->plan_in_lane__);
  swap(frame_time_spend_, other->frame_time_spend_);
  swap(trajectory_stitcher_time_spend_, other->trajectory_stitcher_time_spend_);
  swap(generate_trajectory_time_spend_, other->generate_trajectory_time_spend_);
  swap(passby_limit_flag_, other->passby_limit_flag_);
  swap(passby_limit_s_, other->passby_limit_s_);
  swap(passby_limit_v_, other->passby_limit_v_);
  swap(yield_weight_factor_, other->yield_weight_factor_);
  swap(cruise_weight_factor_, other->cruise_weight_factor_);
  swap(follow_weight_factor_, other->follow_weight_factor_);
  swap(borrow_lane_type_, other->borrow_lane_type_);
  swap(box_planning_state_, other->box_planning_state_);
  swap(jerk_weight_factor_, other->jerk_weight_factor_);
  swap(follow_v_weight_factor_, other->follow_v_weight_factor_);
  swap(acc_dcc_mode_, other->acc_dcc_mode_);
  swap(follow_dis_error_, other->follow_dis_error_);
  swap(real_time_ob_avoid_state_, other->real_time_ob_avoid_state_);
  swap(no_real_time_cnt_, other->no_real_time_cnt_);
  swap(cog_linear_velocity_, other->cog_linear_velocity_);
  swap(dis_to_virtual_wall_, other->dis_to_virtual_wall_);
  swap(sentence_action_, other->sentence_action_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugMotionPlan::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void STpair::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int STpair::kTFieldNumber;
const int STpair::kMinSFieldNumber;
const int STpair::kMaxSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

STpair::STpair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSTpair();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.STpair)
}
STpair::STpair(const STpair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&t_, &from.t_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_s_) -
    reinterpret_cast<char*>(&t_)) + sizeof(max_s_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.STpair)
}

void STpair::SharedCtor() {
  ::memset(&t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_s_) -
      reinterpret_cast<char*>(&t_)) + sizeof(max_s_));
  _cached_size_ = 0;
}

STpair::~STpair() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.STpair)
  SharedDtor();
}

void STpair::SharedDtor() {
}

void STpair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STpair::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const STpair& STpair::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSTpair();
  return *internal_default_instance();
}

STpair* STpair::New(::google::protobuf::Arena* arena) const {
  STpair* n = new STpair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void STpair::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.STpair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_s_) -
      reinterpret_cast<char*>(&t_)) + sizeof(max_s_));
  _internal_metadata_.Clear();
}

bool STpair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.STpair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float t = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_s = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.STpair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.STpair)
  return false;
#undef DO_
}

void STpair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.STpair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float t = 1;
  if (this->t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->t(), output);
  }

  // float min_s = 2;
  if (this->min_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_s(), output);
  }

  // float max_s = 3;
  if (this->max_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_s(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.STpair)
}

::google::protobuf::uint8* STpair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.STpair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float t = 1;
  if (this->t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->t(), target);
  }

  // float min_s = 2;
  if (this->min_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_s(), target);
  }

  // float max_s = 3;
  if (this->max_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_s(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.STpair)
  return target;
}

size_t STpair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.STpair)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float t = 1;
  if (this->t() != 0) {
    total_size += 1 + 4;
  }

  // float min_s = 2;
  if (this->min_s() != 0) {
    total_size += 1 + 4;
  }

  // float max_s = 3;
  if (this->max_s() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STpair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.STpair)
  GOOGLE_DCHECK_NE(&from, this);
  const STpair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const STpair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.STpair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.STpair)
    MergeFrom(*source);
  }
}

void STpair::MergeFrom(const STpair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.STpair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.t() != 0) {
    set_t(from.t());
  }
  if (from.min_s() != 0) {
    set_min_s(from.min_s());
  }
  if (from.max_s() != 0) {
    set_max_s(from.max_s());
  }
}

void STpair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.STpair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STpair::CopyFrom(const STpair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.STpair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STpair::IsInitialized() const {
  return true;
}

void STpair::Swap(STpair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void STpair::InternalSwap(STpair* other) {
  using std::swap;
  swap(t_, other->t_);
  swap(min_s_, other->min_s_);
  swap(max_s_, other->max_s_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata STpair::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugPdObject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugPdObject::kLaneIdsFieldNumber;
const int DebugPdObject::kRightOfWayFieldNumber;
const int DebugPdObject::kConflictTypeFieldNumber;
const int DebugPdObject::kStFieldNumber;
const int DebugPdObject::kRangeAFieldNumber;
const int DebugPdObject::kRangePdSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugPdObject::DebugPdObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugPdObject();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.DebugPdObject)
}
DebugPdObject::DebugPdObject(const DebugPdObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lane_ids_(from.lane_ids_),
      st_(from.st_),
      range_a_(from.range_a_),
      range_pd_s_(from.range_pd_s_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&right_of_way_, &from.right_of_way_,
    static_cast<size_t>(reinterpret_cast<char*>(&conflict_type_) -
    reinterpret_cast<char*>(&right_of_way_)) + sizeof(conflict_type_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.DebugPdObject)
}

void DebugPdObject::SharedCtor() {
  ::memset(&right_of_way_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conflict_type_) -
      reinterpret_cast<char*>(&right_of_way_)) + sizeof(conflict_type_));
  _cached_size_ = 0;
}

DebugPdObject::~DebugPdObject() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.DebugPdObject)
  SharedDtor();
}

void DebugPdObject::SharedDtor() {
}

void DebugPdObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugPdObject::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugPdObject& DebugPdObject::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugPdObject();
  return *internal_default_instance();
}

DebugPdObject* DebugPdObject::New(::google::protobuf::Arena* arena) const {
  DebugPdObject* n = new DebugPdObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugPdObject::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.DebugPdObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_ids_.Clear();
  st_.Clear();
  range_a_.Clear();
  range_pd_s_.Clear();
  ::memset(&right_of_way_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conflict_type_) -
      reinterpret_cast<char*>(&right_of_way_)) + sizeof(conflict_type_));
  _internal_metadata_.Clear();
}

bool DebugPdObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.DebugPdObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string lane_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lane_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lane_ids(this->lane_ids_size() - 1).data(),
            static_cast<int>(this->lane_ids(this->lane_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.DebugPdObject.lane_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool right_of_way = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_of_way_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 conflict_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conflict_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.STpair st = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_st()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float range_a = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_range_a())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_range_a())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float range_pd_s = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_range_pd_s())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50u, input, this->mutable_range_pd_s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.DebugPdObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.DebugPdObject)
  return false;
#undef DO_
}

void DebugPdObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.DebugPdObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string lane_ids = 1;
  for (int i = 0, n = this->lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_ids(i).data(), static_cast<int>(this->lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugPdObject.lane_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lane_ids(i), output);
  }

  // bool right_of_way = 2;
  if (this->right_of_way() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->right_of_way(), output);
  }

  // int32 conflict_type = 3;
  if (this->conflict_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->conflict_type(), output);
  }

  // repeated .planning_debug_msgs.STpair st = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->st_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->st(static_cast<int>(i)), output);
  }

  // repeated float range_a = 5;
  if (this->range_a_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _range_a_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->range_a().data(), this->range_a_size(), output);
  }

  // repeated float range_pd_s = 6;
  if (this->range_pd_s_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _range_pd_s_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->range_pd_s().data(), this->range_pd_s_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.DebugPdObject)
}

::google::protobuf::uint8* DebugPdObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.DebugPdObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string lane_ids = 1;
  for (int i = 0, n = this->lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_ids(i).data(), static_cast<int>(this->lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugPdObject.lane_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->lane_ids(i), target);
  }

  // bool right_of_way = 2;
  if (this->right_of_way() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->right_of_way(), target);
  }

  // int32 conflict_type = 3;
  if (this->conflict_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->conflict_type(), target);
  }

  // repeated .planning_debug_msgs.STpair st = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->st_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->st(static_cast<int>(i)), deterministic, target);
  }

  // repeated float range_a = 5;
  if (this->range_a_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _range_a_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->range_a_, target);
  }

  // repeated float range_pd_s = 6;
  if (this->range_pd_s_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _range_pd_s_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->range_pd_s_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.DebugPdObject)
  return target;
}

size_t DebugPdObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.DebugPdObject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string lane_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->lane_ids_size());
  for (int i = 0, n = this->lane_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lane_ids(i));
  }

  // repeated .planning_debug_msgs.STpair st = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->st_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->st(static_cast<int>(i)));
    }
  }

  // repeated float range_a = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->range_a_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _range_a_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float range_pd_s = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->range_pd_s_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _range_pd_s_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bool right_of_way = 2;
  if (this->right_of_way() != 0) {
    total_size += 1 + 1;
  }

  // int32 conflict_type = 3;
  if (this->conflict_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->conflict_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugPdObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.DebugPdObject)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugPdObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugPdObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.DebugPdObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.DebugPdObject)
    MergeFrom(*source);
  }
}

void DebugPdObject::MergeFrom(const DebugPdObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.DebugPdObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_ids_.MergeFrom(from.lane_ids_);
  st_.MergeFrom(from.st_);
  range_a_.MergeFrom(from.range_a_);
  range_pd_s_.MergeFrom(from.range_pd_s_);
  if (from.right_of_way() != 0) {
    set_right_of_way(from.right_of_way());
  }
  if (from.conflict_type() != 0) {
    set_conflict_type(from.conflict_type());
  }
}

void DebugPdObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.DebugPdObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugPdObject::CopyFrom(const DebugPdObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.DebugPdObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugPdObject::IsInitialized() const {
  return true;
}

void DebugPdObject::Swap(DebugPdObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugPdObject::InternalSwap(DebugPdObject* other) {
  using std::swap;
  lane_ids_.InternalSwap(&other->lane_ids_);
  st_.InternalSwap(&other->st_);
  range_a_.InternalSwap(&other->range_a_);
  range_pd_s_.InternalSwap(&other->range_pd_s_);
  swap(right_of_way_, other->right_of_way_);
  swap(conflict_type_, other->conflict_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugPdObject::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugObject::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugObject::kIdFieldNumber;
const int DebugObject::kCellNumFieldNumber;
const int DebugObject::kAccFieldNumber;
const int DebugObject::kSpeedFieldNumber;
const int DebugObject::kLaneIdFieldNumber;
const int DebugObject::kIsStaticFieldNumber;
const int DebugObject::kWasDynamicFieldNumber;
const int DebugObject::kNeedFocusFieldNumber;
const int DebugObject::kKeyFocusFieldNumber;
const int DebugObject::kIsReverseTravelingFieldNumber;
const int DebugObject::kDisToJunctionFieldNumber;
const int DebugObject::kSLMinSFieldNumber;
const int DebugObject::kSLMaxSFieldNumber;
const int DebugObject::kSLMinLFieldNumber;
const int DebugObject::kSLMaxLFieldNumber;
const int DebugObject::kNearestXgFieldNumber;
const int DebugObject::kNearestYgFieldNumber;
const int DebugObject::kPdObjsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugObject::DebugObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugObject();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.DebugObject)
}
DebugObject::DebugObject(const DebugObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pd_objs_(from.pd_objs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lane_id().size() > 0) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&s_l_max_l_) -
    reinterpret_cast<char*>(&id_)) + sizeof(s_l_max_l_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.DebugObject)
}

void DebugObject::SharedCtor() {
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_l_max_l_) -
      reinterpret_cast<char*>(&id_)) + sizeof(s_l_max_l_));
  _cached_size_ = 0;
}

DebugObject::~DebugObject() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.DebugObject)
  SharedDtor();
}

void DebugObject::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DebugObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugObject::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugObject& DebugObject::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugObject();
  return *internal_default_instance();
}

DebugObject* DebugObject::New(::google::protobuf::Arena* arena) const {
  DebugObject* n = new DebugObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugObject::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.DebugObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pd_objs_.Clear();
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_l_max_l_) -
      reinterpret_cast<char*>(&id_)) + sizeof(s_l_max_l_));
  _internal_metadata_.Clear();
}

bool DebugObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.DebugObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cell_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lane_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.DebugObject.lane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_static = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_static_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool was_dynamic = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_dynamic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool need_focus = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_focus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool key_focus = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &key_focus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_reverse_traveling = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reverse_traveling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dis_to_junction = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dis_to_junction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s_l_min_s = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_l_min_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s_l_max_s = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_l_max_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s_l_min_l = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_l_min_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s_l_max_l = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_l_max_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double nearest_xg = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nearest_xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double nearest_yg = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nearest_yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.DebugPdObject pd_objs = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_pd_objs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.DebugObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.DebugObject)
  return false;
#undef DO_
}

void DebugObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.DebugObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 cell_num = 2;
  if (this->cell_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cell_num(), output);
  }

  // float acc = 3;
  if (this->acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->acc(), output);
  }

  // float speed = 4;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->speed(), output);
  }

  // string lane_id = 5;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugObject.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->lane_id(), output);
  }

  // bool is_static = 6;
  if (this->is_static() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_static(), output);
  }

  // bool was_dynamic = 7;
  if (this->was_dynamic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->was_dynamic(), output);
  }

  // bool need_focus = 8;
  if (this->need_focus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->need_focus(), output);
  }

  // bool key_focus = 9;
  if (this->key_focus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->key_focus(), output);
  }

  // bool is_reverse_traveling = 10;
  if (this->is_reverse_traveling() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_reverse_traveling(), output);
  }

  // float dis_to_junction = 11;
  if (this->dis_to_junction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->dis_to_junction(), output);
  }

  // float s_l_min_s = 12;
  if (this->s_l_min_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->s_l_min_s(), output);
  }

  // float s_l_max_s = 13;
  if (this->s_l_max_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->s_l_max_s(), output);
  }

  // float s_l_min_l = 14;
  if (this->s_l_min_l() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->s_l_min_l(), output);
  }

  // float s_l_max_l = 15;
  if (this->s_l_max_l() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->s_l_max_l(), output);
  }

  // double nearest_xg = 16;
  if (this->nearest_xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->nearest_xg(), output);
  }

  // double nearest_yg = 17;
  if (this->nearest_yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->nearest_yg(), output);
  }

  // repeated .planning_debug_msgs.DebugPdObject pd_objs = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pd_objs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->pd_objs(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.DebugObject)
}

::google::protobuf::uint8* DebugObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.DebugObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 cell_num = 2;
  if (this->cell_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cell_num(), target);
  }

  // float acc = 3;
  if (this->acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->acc(), target);
  }

  // float speed = 4;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->speed(), target);
  }

  // string lane_id = 5;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugObject.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->lane_id(), target);
  }

  // bool is_static = 6;
  if (this->is_static() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_static(), target);
  }

  // bool was_dynamic = 7;
  if (this->was_dynamic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->was_dynamic(), target);
  }

  // bool need_focus = 8;
  if (this->need_focus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->need_focus(), target);
  }

  // bool key_focus = 9;
  if (this->key_focus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->key_focus(), target);
  }

  // bool is_reverse_traveling = 10;
  if (this->is_reverse_traveling() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_reverse_traveling(), target);
  }

  // float dis_to_junction = 11;
  if (this->dis_to_junction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->dis_to_junction(), target);
  }

  // float s_l_min_s = 12;
  if (this->s_l_min_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->s_l_min_s(), target);
  }

  // float s_l_max_s = 13;
  if (this->s_l_max_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->s_l_max_s(), target);
  }

  // float s_l_min_l = 14;
  if (this->s_l_min_l() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->s_l_min_l(), target);
  }

  // float s_l_max_l = 15;
  if (this->s_l_max_l() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->s_l_max_l(), target);
  }

  // double nearest_xg = 16;
  if (this->nearest_xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->nearest_xg(), target);
  }

  // double nearest_yg = 17;
  if (this->nearest_yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->nearest_yg(), target);
  }

  // repeated .planning_debug_msgs.DebugPdObject pd_objs = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pd_objs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->pd_objs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.DebugObject)
  return target;
}

size_t DebugObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.DebugObject)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .planning_debug_msgs.DebugPdObject pd_objs = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->pd_objs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pd_objs(static_cast<int>(i)));
    }
  }

  // string lane_id = 5;
  if (this->lane_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lane_id());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 cell_num = 2;
  if (this->cell_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cell_num());
  }

  // float acc = 3;
  if (this->acc() != 0) {
    total_size += 1 + 4;
  }

  // float speed = 4;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  // bool is_static = 6;
  if (this->is_static() != 0) {
    total_size += 1 + 1;
  }

  // bool was_dynamic = 7;
  if (this->was_dynamic() != 0) {
    total_size += 1 + 1;
  }

  // bool need_focus = 8;
  if (this->need_focus() != 0) {
    total_size += 1 + 1;
  }

  // bool key_focus = 9;
  if (this->key_focus() != 0) {
    total_size += 1 + 1;
  }

  // bool is_reverse_traveling = 10;
  if (this->is_reverse_traveling() != 0) {
    total_size += 1 + 1;
  }

  // float dis_to_junction = 11;
  if (this->dis_to_junction() != 0) {
    total_size += 1 + 4;
  }

  // float s_l_min_s = 12;
  if (this->s_l_min_s() != 0) {
    total_size += 1 + 4;
  }

  // float s_l_max_s = 13;
  if (this->s_l_max_s() != 0) {
    total_size += 1 + 4;
  }

  // float s_l_min_l = 14;
  if (this->s_l_min_l() != 0) {
    total_size += 1 + 4;
  }

  // double nearest_xg = 16;
  if (this->nearest_xg() != 0) {
    total_size += 2 + 8;
  }

  // double nearest_yg = 17;
  if (this->nearest_yg() != 0) {
    total_size += 2 + 8;
  }

  // float s_l_max_l = 15;
  if (this->s_l_max_l() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.DebugObject)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.DebugObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.DebugObject)
    MergeFrom(*source);
  }
}

void DebugObject::MergeFrom(const DebugObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.DebugObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pd_objs_.MergeFrom(from.pd_objs_);
  if (from.lane_id().size() > 0) {

    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.cell_num() != 0) {
    set_cell_num(from.cell_num());
  }
  if (from.acc() != 0) {
    set_acc(from.acc());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.is_static() != 0) {
    set_is_static(from.is_static());
  }
  if (from.was_dynamic() != 0) {
    set_was_dynamic(from.was_dynamic());
  }
  if (from.need_focus() != 0) {
    set_need_focus(from.need_focus());
  }
  if (from.key_focus() != 0) {
    set_key_focus(from.key_focus());
  }
  if (from.is_reverse_traveling() != 0) {
    set_is_reverse_traveling(from.is_reverse_traveling());
  }
  if (from.dis_to_junction() != 0) {
    set_dis_to_junction(from.dis_to_junction());
  }
  if (from.s_l_min_s() != 0) {
    set_s_l_min_s(from.s_l_min_s());
  }
  if (from.s_l_max_s() != 0) {
    set_s_l_max_s(from.s_l_max_s());
  }
  if (from.s_l_min_l() != 0) {
    set_s_l_min_l(from.s_l_min_l());
  }
  if (from.nearest_xg() != 0) {
    set_nearest_xg(from.nearest_xg());
  }
  if (from.nearest_yg() != 0) {
    set_nearest_yg(from.nearest_yg());
  }
  if (from.s_l_max_l() != 0) {
    set_s_l_max_l(from.s_l_max_l());
  }
}

void DebugObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.DebugObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugObject::CopyFrom(const DebugObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.DebugObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugObject::IsInitialized() const {
  return true;
}

void DebugObject::Swap(DebugObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugObject::InternalSwap(DebugObject* other) {
  using std::swap;
  pd_objs_.InternalSwap(&other->pd_objs_);
  lane_id_.Swap(&other->lane_id_);
  swap(id_, other->id_);
  swap(cell_num_, other->cell_num_);
  swap(acc_, other->acc_);
  swap(speed_, other->speed_);
  swap(is_static_, other->is_static_);
  swap(was_dynamic_, other->was_dynamic_);
  swap(need_focus_, other->need_focus_);
  swap(key_focus_, other->key_focus_);
  swap(is_reverse_traveling_, other->is_reverse_traveling_);
  swap(dis_to_junction_, other->dis_to_junction_);
  swap(s_l_min_s_, other->s_l_min_s_);
  swap(s_l_max_s_, other->s_l_max_s_);
  swap(s_l_min_l_, other->s_l_min_l_);
  swap(nearest_xg_, other->nearest_xg_);
  swap(nearest_yg_, other->nearest_yg_);
  swap(s_l_max_l_, other->s_l_max_l_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugObject::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugGap::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugGap::kStartIdFieldNumber;
const int DebugGap::kEndIdFieldNumber;
const int DebugGap::kAimMinSFieldNumber;
const int DebugGap::kAimMaxSFieldNumber;
const int DebugGap::kAllowMinVFieldNumber;
const int DebugGap::kAllowMaxVFieldNumber;
const int DebugGap::kAllowMinTFieldNumber;
const int DebugGap::kFeasibilityLevelFieldNumber;
const int DebugGap::kSafetyLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugGap::DebugGap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugGap();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.DebugGap)
}
DebugGap::DebugGap(const DebugGap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_id_, &from.start_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&safety_level_) -
    reinterpret_cast<char*>(&start_id_)) + sizeof(safety_level_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.DebugGap)
}

void DebugGap::SharedCtor() {
  ::memset(&start_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safety_level_) -
      reinterpret_cast<char*>(&start_id_)) + sizeof(safety_level_));
  _cached_size_ = 0;
}

DebugGap::~DebugGap() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.DebugGap)
  SharedDtor();
}

void DebugGap::SharedDtor() {
}

void DebugGap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugGap::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugGap& DebugGap::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugGap();
  return *internal_default_instance();
}

DebugGap* DebugGap::New(::google::protobuf::Arena* arena) const {
  DebugGap* n = new DebugGap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugGap::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.DebugGap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&safety_level_) -
      reinterpret_cast<char*>(&start_id_)) + sizeof(safety_level_));
  _internal_metadata_.Clear();
}

bool DebugGap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.DebugGap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 start_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 end_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float aim_min_s = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aim_min_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float aim_max_s = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aim_max_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float allow_min_v = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &allow_min_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float allow_max_v = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &allow_max_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float allow_min_t = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &allow_min_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 feasibility_level = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feasibility_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 safety_level = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &safety_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.DebugGap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.DebugGap)
  return false;
#undef DO_
}

void DebugGap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.DebugGap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start_id = 1;
  if (this->start_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->start_id(), output);
  }

  // int32 end_id = 2;
  if (this->end_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end_id(), output);
  }

  // float aim_min_s = 3;
  if (this->aim_min_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->aim_min_s(), output);
  }

  // float aim_max_s = 4;
  if (this->aim_max_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->aim_max_s(), output);
  }

  // float allow_min_v = 5;
  if (this->allow_min_v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->allow_min_v(), output);
  }

  // float allow_max_v = 6;
  if (this->allow_max_v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->allow_max_v(), output);
  }

  // float allow_min_t = 7;
  if (this->allow_min_t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->allow_min_t(), output);
  }

  // uint32 feasibility_level = 8;
  if (this->feasibility_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->feasibility_level(), output);
  }

  // uint32 safety_level = 9;
  if (this->safety_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->safety_level(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.DebugGap)
}

::google::protobuf::uint8* DebugGap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.DebugGap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start_id = 1;
  if (this->start_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->start_id(), target);
  }

  // int32 end_id = 2;
  if (this->end_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end_id(), target);
  }

  // float aim_min_s = 3;
  if (this->aim_min_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->aim_min_s(), target);
  }

  // float aim_max_s = 4;
  if (this->aim_max_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->aim_max_s(), target);
  }

  // float allow_min_v = 5;
  if (this->allow_min_v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->allow_min_v(), target);
  }

  // float allow_max_v = 6;
  if (this->allow_max_v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->allow_max_v(), target);
  }

  // float allow_min_t = 7;
  if (this->allow_min_t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->allow_min_t(), target);
  }

  // uint32 feasibility_level = 8;
  if (this->feasibility_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->feasibility_level(), target);
  }

  // uint32 safety_level = 9;
  if (this->safety_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->safety_level(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.DebugGap)
  return target;
}

size_t DebugGap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.DebugGap)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 start_id = 1;
  if (this->start_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_id());
  }

  // int32 end_id = 2;
  if (this->end_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end_id());
  }

  // float aim_min_s = 3;
  if (this->aim_min_s() != 0) {
    total_size += 1 + 4;
  }

  // float aim_max_s = 4;
  if (this->aim_max_s() != 0) {
    total_size += 1 + 4;
  }

  // float allow_min_v = 5;
  if (this->allow_min_v() != 0) {
    total_size += 1 + 4;
  }

  // float allow_max_v = 6;
  if (this->allow_max_v() != 0) {
    total_size += 1 + 4;
  }

  // float allow_min_t = 7;
  if (this->allow_min_t() != 0) {
    total_size += 1 + 4;
  }

  // uint32 feasibility_level = 8;
  if (this->feasibility_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->feasibility_level());
  }

  // uint32 safety_level = 9;
  if (this->safety_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->safety_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugGap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.DebugGap)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugGap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugGap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.DebugGap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.DebugGap)
    MergeFrom(*source);
  }
}

void DebugGap::MergeFrom(const DebugGap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.DebugGap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_id() != 0) {
    set_start_id(from.start_id());
  }
  if (from.end_id() != 0) {
    set_end_id(from.end_id());
  }
  if (from.aim_min_s() != 0) {
    set_aim_min_s(from.aim_min_s());
  }
  if (from.aim_max_s() != 0) {
    set_aim_max_s(from.aim_max_s());
  }
  if (from.allow_min_v() != 0) {
    set_allow_min_v(from.allow_min_v());
  }
  if (from.allow_max_v() != 0) {
    set_allow_max_v(from.allow_max_v());
  }
  if (from.allow_min_t() != 0) {
    set_allow_min_t(from.allow_min_t());
  }
  if (from.feasibility_level() != 0) {
    set_feasibility_level(from.feasibility_level());
  }
  if (from.safety_level() != 0) {
    set_safety_level(from.safety_level());
  }
}

void DebugGap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.DebugGap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugGap::CopyFrom(const DebugGap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.DebugGap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugGap::IsInitialized() const {
  return true;
}

void DebugGap::Swap(DebugGap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugGap::InternalSwap(DebugGap* other) {
  using std::swap;
  swap(start_id_, other->start_id_);
  swap(end_id_, other->end_id_);
  swap(aim_min_s_, other->aim_min_s_);
  swap(aim_max_s_, other->aim_max_s_);
  swap(allow_min_v_, other->allow_min_v_);
  swap(allow_max_v_, other->allow_max_v_);
  swap(allow_min_t_, other->allow_min_t_);
  swap(feasibility_level_, other->feasibility_level_);
  swap(safety_level_, other->safety_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugGap::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugLine::InitAsDefaultInstance() {
  ::planning_debug_msgs::_DebugLine_default_instance_._instance.get_mutable()->block_state_ = const_cast< ::planning_debug_msgs::DebugState*>(
      ::planning_debug_msgs::DebugState::internal_default_instance());
  ::planning_debug_msgs::_DebugLine_default_instance_._instance.get_mutable()->slow_state_ = const_cast< ::planning_debug_msgs::DebugState*>(
      ::planning_debug_msgs::DebugState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugLine::kLaneIdsFieldNumber;
const int DebugLine::kSpeedLimitFieldNumber;
const int DebugLine::kDis2LineFieldNumber;
const int DebugLine::kDistanceToMissionPointFieldNumber;
const int DebugLine::kBlockStateFieldNumber;
const int DebugLine::kSlowStateFieldNumber;
const int DebugLine::kGlobalCostFieldNumber;
const int DebugLine::kSpeedCostFieldNumber;
const int DebugLine::kLongTermSpeedFieldNumber;
const int DebugLine::kShortTermSpeedFieldNumber;
const int DebugLine::kObjsFieldNumber;
const int DebugLine::kLineQueueFieldNumber;
const int DebugLine::kIsCongestionFieldNumber;
const int DebugLine::kGapsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugLine::DebugLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugLine();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.DebugLine)
}
DebugLine::DebugLine(const DebugLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lane_ids_(from.lane_ids_),
      objs_(from.objs_),
      gaps_(from.gaps_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_block_state()) {
    block_state_ = new ::planning_debug_msgs::DebugState(*from.block_state_);
  } else {
    block_state_ = NULL;
  }
  if (from.has_slow_state()) {
    slow_state_ = new ::planning_debug_msgs::DebugState(*from.slow_state_);
  } else {
    slow_state_ = NULL;
  }
  ::memcpy(&speed_limit_, &from.speed_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_congestion_) -
    reinterpret_cast<char*>(&speed_limit_)) + sizeof(is_congestion_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.DebugLine)
}

void DebugLine::SharedCtor() {
  ::memset(&block_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_congestion_) -
      reinterpret_cast<char*>(&block_state_)) + sizeof(is_congestion_));
  _cached_size_ = 0;
}

DebugLine::~DebugLine() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.DebugLine)
  SharedDtor();
}

void DebugLine::SharedDtor() {
  if (this != internal_default_instance()) delete block_state_;
  if (this != internal_default_instance()) delete slow_state_;
}

void DebugLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugLine::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugLine& DebugLine::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugLine();
  return *internal_default_instance();
}

DebugLine* DebugLine::New(::google::protobuf::Arena* arena) const {
  DebugLine* n = new DebugLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugLine::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.DebugLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_ids_.Clear();
  objs_.Clear();
  gaps_.Clear();
  if (GetArenaNoVirtual() == NULL && block_state_ != NULL) {
    delete block_state_;
  }
  block_state_ = NULL;
  if (GetArenaNoVirtual() == NULL && slow_state_ != NULL) {
    delete slow_state_;
  }
  slow_state_ = NULL;
  ::memset(&speed_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_congestion_) -
      reinterpret_cast<char*>(&speed_limit_)) + sizeof(is_congestion_));
  _internal_metadata_.Clear();
}

bool DebugLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.DebugLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string lane_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lane_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lane_ids(this->lane_ids_size() - 1).data(),
            static_cast<int>(this->lane_ids(this->lane_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.DebugLine.lane_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dis2line = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dis2line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float distance_to_mission_point = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_to_mission_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_debug_msgs.DebugState block_state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_block_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_debug_msgs.DebugState slow_state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_slow_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 global_cost = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &global_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_cost = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float long_term_speed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &long_term_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float short_term_speed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &short_term_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.DebugObject objs = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_objs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool line_queue = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &line_queue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_congestion = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_congestion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.DebugGap gaps = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_gaps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.DebugLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.DebugLine)
  return false;
#undef DO_
}

void DebugLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.DebugLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string lane_ids = 1;
  for (int i = 0, n = this->lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_ids(i).data(), static_cast<int>(this->lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugLine.lane_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lane_ids(i), output);
  }

  // float speed_limit = 2;
  if (this->speed_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->speed_limit(), output);
  }

  // float dis2line = 3;
  if (this->dis2line() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dis2line(), output);
  }

  // float distance_to_mission_point = 4;
  if (this->distance_to_mission_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance_to_mission_point(), output);
  }

  // .planning_debug_msgs.DebugState block_state = 5;
  if (this->has_block_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->block_state_, output);
  }

  // .planning_debug_msgs.DebugState slow_state = 6;
  if (this->has_slow_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->slow_state_, output);
  }

  // int32 global_cost = 7;
  if (this->global_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->global_cost(), output);
  }

  // float speed_cost = 8;
  if (this->speed_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->speed_cost(), output);
  }

  // float long_term_speed = 9;
  if (this->long_term_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->long_term_speed(), output);
  }

  // float short_term_speed = 10;
  if (this->short_term_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->short_term_speed(), output);
  }

  // repeated .planning_debug_msgs.DebugObject objs = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->objs(static_cast<int>(i)), output);
  }

  // bool line_queue = 12;
  if (this->line_queue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->line_queue(), output);
  }

  // bool is_congestion = 13;
  if (this->is_congestion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_congestion(), output);
  }

  // repeated .planning_debug_msgs.DebugGap gaps = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gaps_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->gaps(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.DebugLine)
}

::google::protobuf::uint8* DebugLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.DebugLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string lane_ids = 1;
  for (int i = 0, n = this->lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_ids(i).data(), static_cast<int>(this->lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugLine.lane_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->lane_ids(i), target);
  }

  // float speed_limit = 2;
  if (this->speed_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->speed_limit(), target);
  }

  // float dis2line = 3;
  if (this->dis2line() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dis2line(), target);
  }

  // float distance_to_mission_point = 4;
  if (this->distance_to_mission_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance_to_mission_point(), target);
  }

  // .planning_debug_msgs.DebugState block_state = 5;
  if (this->has_block_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->block_state_, deterministic, target);
  }

  // .planning_debug_msgs.DebugState slow_state = 6;
  if (this->has_slow_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->slow_state_, deterministic, target);
  }

  // int32 global_cost = 7;
  if (this->global_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->global_cost(), target);
  }

  // float speed_cost = 8;
  if (this->speed_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->speed_cost(), target);
  }

  // float long_term_speed = 9;
  if (this->long_term_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->long_term_speed(), target);
  }

  // float short_term_speed = 10;
  if (this->short_term_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->short_term_speed(), target);
  }

  // repeated .planning_debug_msgs.DebugObject objs = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->objs(static_cast<int>(i)), deterministic, target);
  }

  // bool line_queue = 12;
  if (this->line_queue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->line_queue(), target);
  }

  // bool is_congestion = 13;
  if (this->is_congestion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_congestion(), target);
  }

  // repeated .planning_debug_msgs.DebugGap gaps = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gaps_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->gaps(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.DebugLine)
  return target;
}

size_t DebugLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.DebugLine)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string lane_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->lane_ids_size());
  for (int i = 0, n = this->lane_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lane_ids(i));
  }

  // repeated .planning_debug_msgs.DebugObject objs = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->objs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->objs(static_cast<int>(i)));
    }
  }

  // repeated .planning_debug_msgs.DebugGap gaps = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->gaps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->gaps(static_cast<int>(i)));
    }
  }

  // .planning_debug_msgs.DebugState block_state = 5;
  if (this->has_block_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->block_state_);
  }

  // .planning_debug_msgs.DebugState slow_state = 6;
  if (this->has_slow_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->slow_state_);
  }

  // float speed_limit = 2;
  if (this->speed_limit() != 0) {
    total_size += 1 + 4;
  }

  // float dis2line = 3;
  if (this->dis2line() != 0) {
    total_size += 1 + 4;
  }

  // float distance_to_mission_point = 4;
  if (this->distance_to_mission_point() != 0) {
    total_size += 1 + 4;
  }

  // int32 global_cost = 7;
  if (this->global_cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->global_cost());
  }

  // float speed_cost = 8;
  if (this->speed_cost() != 0) {
    total_size += 1 + 4;
  }

  // float long_term_speed = 9;
  if (this->long_term_speed() != 0) {
    total_size += 1 + 4;
  }

  // float short_term_speed = 10;
  if (this->short_term_speed() != 0) {
    total_size += 1 + 4;
  }

  // bool line_queue = 12;
  if (this->line_queue() != 0) {
    total_size += 1 + 1;
  }

  // bool is_congestion = 13;
  if (this->is_congestion() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.DebugLine)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugLine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.DebugLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.DebugLine)
    MergeFrom(*source);
  }
}

void DebugLine::MergeFrom(const DebugLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.DebugLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_ids_.MergeFrom(from.lane_ids_);
  objs_.MergeFrom(from.objs_);
  gaps_.MergeFrom(from.gaps_);
  if (from.has_block_state()) {
    mutable_block_state()->::planning_debug_msgs::DebugState::MergeFrom(from.block_state());
  }
  if (from.has_slow_state()) {
    mutable_slow_state()->::planning_debug_msgs::DebugState::MergeFrom(from.slow_state());
  }
  if (from.speed_limit() != 0) {
    set_speed_limit(from.speed_limit());
  }
  if (from.dis2line() != 0) {
    set_dis2line(from.dis2line());
  }
  if (from.distance_to_mission_point() != 0) {
    set_distance_to_mission_point(from.distance_to_mission_point());
  }
  if (from.global_cost() != 0) {
    set_global_cost(from.global_cost());
  }
  if (from.speed_cost() != 0) {
    set_speed_cost(from.speed_cost());
  }
  if (from.long_term_speed() != 0) {
    set_long_term_speed(from.long_term_speed());
  }
  if (from.short_term_speed() != 0) {
    set_short_term_speed(from.short_term_speed());
  }
  if (from.line_queue() != 0) {
    set_line_queue(from.line_queue());
  }
  if (from.is_congestion() != 0) {
    set_is_congestion(from.is_congestion());
  }
}

void DebugLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.DebugLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugLine::CopyFrom(const DebugLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.DebugLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugLine::IsInitialized() const {
  return true;
}

void DebugLine::Swap(DebugLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugLine::InternalSwap(DebugLine* other) {
  using std::swap;
  lane_ids_.InternalSwap(&other->lane_ids_);
  objs_.InternalSwap(&other->objs_);
  gaps_.InternalSwap(&other->gaps_);
  swap(block_state_, other->block_state_);
  swap(slow_state_, other->slow_state_);
  swap(speed_limit_, other->speed_limit_);
  swap(dis2line_, other->dis2line_);
  swap(distance_to_mission_point_, other->distance_to_mission_point_);
  swap(global_cost_, other->global_cost_);
  swap(speed_cost_, other->speed_cost_);
  swap(long_term_speed_, other->long_term_speed_);
  swap(short_term_speed_, other->short_term_speed_);
  swap(line_queue_, other->line_queue_);
  swap(is_congestion_, other->is_congestion_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugLine::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugLight::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugLight::kLaneIdsFieldNumber;
const int DebugLight::kJcLightStateFieldNumber;
const int DebugLight::kResponseAreaLightFieldNumber;
const int DebugLight::kUnkeyColorFieldNumber;
const int DebugLight::kAreaColorFieldNumber;
const int DebugLight::kLightIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugLight::DebugLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugLight();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.DebugLight)
}
DebugLight::DebugLight(const DebugLight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lane_ids_(from.lane_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  light_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.light_id().size() > 0) {
    light_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.light_id_);
  }
  ::memcpy(&jc_light_state_, &from.jc_light_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&area_color_) -
    reinterpret_cast<char*>(&jc_light_state_)) + sizeof(area_color_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.DebugLight)
}

void DebugLight::SharedCtor() {
  light_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&jc_light_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_color_) -
      reinterpret_cast<char*>(&jc_light_state_)) + sizeof(area_color_));
  _cached_size_ = 0;
}

DebugLight::~DebugLight() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.DebugLight)
  SharedDtor();
}

void DebugLight::SharedDtor() {
  light_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DebugLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugLight::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugLight& DebugLight::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugLight();
  return *internal_default_instance();
}

DebugLight* DebugLight::New(::google::protobuf::Arena* arena) const {
  DebugLight* n = new DebugLight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugLight::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.DebugLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_ids_.Clear();
  light_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&jc_light_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&area_color_) -
      reinterpret_cast<char*>(&jc_light_state_)) + sizeof(area_color_));
  _internal_metadata_.Clear();
}

bool DebugLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.DebugLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string lane_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lane_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lane_ids(this->lane_ids_size() - 1).data(),
            static_cast<int>(this->lane_ids(this->lane_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.DebugLight.lane_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 jc_light_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jc_light_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool response_area_light = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &response_area_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 unkey_color = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unkey_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 area_color = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string light_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_light_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->light_id().data(), static_cast<int>(this->light_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.DebugLight.light_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.DebugLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.DebugLight)
  return false;
#undef DO_
}

void DebugLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.DebugLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string lane_ids = 1;
  for (int i = 0, n = this->lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_ids(i).data(), static_cast<int>(this->lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugLight.lane_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lane_ids(i), output);
  }

  // int32 jc_light_state = 2;
  if (this->jc_light_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->jc_light_state(), output);
  }

  // bool response_area_light = 3;
  if (this->response_area_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->response_area_light(), output);
  }

  // int32 unkey_color = 4;
  if (this->unkey_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->unkey_color(), output);
  }

  // int32 area_color = 5;
  if (this->area_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->area_color(), output);
  }

  // string light_id = 6;
  if (this->light_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->light_id().data(), static_cast<int>(this->light_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugLight.light_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->light_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.DebugLight)
}

::google::protobuf::uint8* DebugLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.DebugLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string lane_ids = 1;
  for (int i = 0, n = this->lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_ids(i).data(), static_cast<int>(this->lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugLight.lane_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->lane_ids(i), target);
  }

  // int32 jc_light_state = 2;
  if (this->jc_light_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->jc_light_state(), target);
  }

  // bool response_area_light = 3;
  if (this->response_area_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->response_area_light(), target);
  }

  // int32 unkey_color = 4;
  if (this->unkey_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->unkey_color(), target);
  }

  // int32 area_color = 5;
  if (this->area_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->area_color(), target);
  }

  // string light_id = 6;
  if (this->light_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->light_id().data(), static_cast<int>(this->light_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugLight.light_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->light_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.DebugLight)
  return target;
}

size_t DebugLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.DebugLight)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string lane_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->lane_ids_size());
  for (int i = 0, n = this->lane_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lane_ids(i));
  }

  // string light_id = 6;
  if (this->light_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->light_id());
  }

  // int32 jc_light_state = 2;
  if (this->jc_light_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->jc_light_state());
  }

  // bool response_area_light = 3;
  if (this->response_area_light() != 0) {
    total_size += 1 + 1;
  }

  // int32 unkey_color = 4;
  if (this->unkey_color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unkey_color());
  }

  // int32 area_color = 5;
  if (this->area_color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->area_color());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.DebugLight)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugLight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.DebugLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.DebugLight)
    MergeFrom(*source);
  }
}

void DebugLight::MergeFrom(const DebugLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.DebugLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_ids_.MergeFrom(from.lane_ids_);
  if (from.light_id().size() > 0) {

    light_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.light_id_);
  }
  if (from.jc_light_state() != 0) {
    set_jc_light_state(from.jc_light_state());
  }
  if (from.response_area_light() != 0) {
    set_response_area_light(from.response_area_light());
  }
  if (from.unkey_color() != 0) {
    set_unkey_color(from.unkey_color());
  }
  if (from.area_color() != 0) {
    set_area_color(from.area_color());
  }
}

void DebugLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.DebugLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugLight::CopyFrom(const DebugLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.DebugLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugLight::IsInitialized() const {
  return true;
}

void DebugLight::Swap(DebugLight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugLight::InternalSwap(DebugLight* other) {
  using std::swap;
  lane_ids_.InternalSwap(&other->lane_ids_);
  light_id_.Swap(&other->light_id_);
  swap(jc_light_state_, other->jc_light_state_);
  swap(response_area_light_, other->response_area_light_);
  swap(unkey_color_, other->unkey_color_);
  swap(area_color_, other->area_color_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugLight::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugCognition::InitAsDefaultInstance() {
  ::planning_debug_msgs::_DebugCognition_default_instance_._instance.get_mutable()->light_info_ = const_cast< ::planning_debug_msgs::DebugLight*>(
      ::planning_debug_msgs::DebugLight::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugCognition::kTimeStampFieldNumber;
const int DebugCognition::kReferenceLaneIdsFieldNumber;
const int DebugCognition::kReferenceTargetIdsFieldNumber;
const int DebugCognition::kMapengineIndexFieldNumber;
const int DebugCognition::kCorrectionIndexFieldNumber;
const int DebugCognition::kTargetIndexFieldNumber;
const int DebugCognition::kKeyLineIdFieldNumber;
const int DebugCognition::kInCurrentFieldNumber;
const int DebugCognition::kInTargetFieldNumber;
const int DebugCognition::kMapDeltaTimeFieldNumber;
const int DebugCognition::kImuDeltaTimeFieldNumber;
const int DebugCognition::kCurrentLineFieldNumber;
const int DebugCognition::kLeftLineFieldNumber;
const int DebugCognition::kRightLineFieldNumber;
const int DebugCognition::kLocalLineFieldNumber;
const int DebugCognition::kLightInfoFieldNumber;
const int DebugCognition::kDriveStateFieldNumber;
const int DebugCognition::kTimeCostMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugCognition::DebugCognition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugCognition();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.DebugCognition)
}
DebugCognition::DebugCognition(const DebugCognition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      reference_lane_ids_(from.reference_lane_ids_),
      reference_target_ids_(from.reference_target_ids_),
      key_line_id_(from.key_line_id_),
      current_line_(from.current_line_),
      left_line_(from.left_line_),
      right_line_(from.right_line_),
      local_line_(from.local_line_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_light_info()) {
    light_info_ = new ::planning_debug_msgs::DebugLight(*from.light_info_);
  } else {
    light_info_ = NULL;
  }
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_cost_ms_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(time_cost_ms_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.DebugCognition)
}

void DebugCognition::SharedCtor() {
  ::memset(&light_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_cost_ms_) -
      reinterpret_cast<char*>(&light_info_)) + sizeof(time_cost_ms_));
  _cached_size_ = 0;
}

DebugCognition::~DebugCognition() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.DebugCognition)
  SharedDtor();
}

void DebugCognition::SharedDtor() {
  if (this != internal_default_instance()) delete light_info_;
}

void DebugCognition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugCognition::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugCognition& DebugCognition::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugCognition();
  return *internal_default_instance();
}

DebugCognition* DebugCognition::New(::google::protobuf::Arena* arena) const {
  DebugCognition* n = new DebugCognition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugCognition::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.DebugCognition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_lane_ids_.Clear();
  reference_target_ids_.Clear();
  key_line_id_.Clear();
  current_line_.Clear();
  left_line_.Clear();
  right_line_.Clear();
  local_line_.Clear();
  if (GetArenaNoVirtual() == NULL && light_info_ != NULL) {
    delete light_info_;
  }
  light_info_ = NULL;
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_cost_ms_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(time_cost_ms_));
  _internal_metadata_.Clear();
}

bool DebugCognition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.DebugCognition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double time_stamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string reference_lane_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_reference_lane_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_lane_ids(this->reference_lane_ids_size() - 1).data(),
            static_cast<int>(this->reference_lane_ids(this->reference_lane_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.DebugCognition.reference_lane_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string reference_target_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_reference_target_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reference_target_ids(this->reference_target_ids_size() - 1).data(),
            static_cast<int>(this->reference_target_ids(this->reference_target_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.DebugCognition.reference_target_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mapengine_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapengine_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 correction_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &correction_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 key_line_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_key_line_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58u, input, this->mutable_key_line_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool in_current = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool in_target = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float map_delta_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &map_delta_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float imu_delta_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &imu_delta_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.DebugLine current_line = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_current_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.DebugLine left_line = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_left_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.DebugLine right_line = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_right_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.DebugLine local_line = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_local_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_debug_msgs.DebugLight light_info = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_light_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 drive_state = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drive_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time_cost_ms = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_cost_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.DebugCognition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.DebugCognition)
  return false;
#undef DO_
}

void DebugCognition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.DebugCognition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_stamp = 1;
  if (this->time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time_stamp(), output);
  }

  // repeated string reference_lane_ids = 2;
  for (int i = 0, n = this->reference_lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_lane_ids(i).data(), static_cast<int>(this->reference_lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugCognition.reference_lane_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->reference_lane_ids(i), output);
  }

  // repeated string reference_target_ids = 3;
  for (int i = 0, n = this->reference_target_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_target_ids(i).data(), static_cast<int>(this->reference_target_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugCognition.reference_target_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->reference_target_ids(i), output);
  }

  // uint32 mapengine_index = 4;
  if (this->mapengine_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mapengine_index(), output);
  }

  // uint32 correction_index = 5;
  if (this->correction_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->correction_index(), output);
  }

  // uint32 target_index = 6;
  if (this->target_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->target_index(), output);
  }

  // repeated uint32 key_line_id = 7;
  if (this->key_line_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _key_line_id_cached_byte_size_));
  }
  for (int i = 0, n = this->key_line_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->key_line_id(i), output);
  }

  // bool in_current = 8;
  if (this->in_current() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->in_current(), output);
  }

  // bool in_target = 9;
  if (this->in_target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->in_target(), output);
  }

  // float map_delta_time = 10;
  if (this->map_delta_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->map_delta_time(), output);
  }

  // float imu_delta_time = 11;
  if (this->imu_delta_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->imu_delta_time(), output);
  }

  // repeated .planning_debug_msgs.DebugLine current_line = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->current_line_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->current_line(static_cast<int>(i)), output);
  }

  // repeated .planning_debug_msgs.DebugLine left_line = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_line_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->left_line(static_cast<int>(i)), output);
  }

  // repeated .planning_debug_msgs.DebugLine right_line = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_line_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->right_line(static_cast<int>(i)), output);
  }

  // repeated .planning_debug_msgs.DebugLine local_line = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->local_line_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->local_line(static_cast<int>(i)), output);
  }

  // .planning_debug_msgs.DebugLight light_info = 16;
  if (this->has_light_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->light_info_, output);
  }

  // uint32 drive_state = 17;
  if (this->drive_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->drive_state(), output);
  }

  // float time_cost_ms = 18;
  if (this->time_cost_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->time_cost_ms(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.DebugCognition)
}

::google::protobuf::uint8* DebugCognition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.DebugCognition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_stamp = 1;
  if (this->time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time_stamp(), target);
  }

  // repeated string reference_lane_ids = 2;
  for (int i = 0, n = this->reference_lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_lane_ids(i).data(), static_cast<int>(this->reference_lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugCognition.reference_lane_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->reference_lane_ids(i), target);
  }

  // repeated string reference_target_ids = 3;
  for (int i = 0, n = this->reference_target_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reference_target_ids(i).data(), static_cast<int>(this->reference_target_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugCognition.reference_target_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->reference_target_ids(i), target);
  }

  // uint32 mapengine_index = 4;
  if (this->mapengine_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mapengine_index(), target);
  }

  // uint32 correction_index = 5;
  if (this->correction_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->correction_index(), target);
  }

  // uint32 target_index = 6;
  if (this->target_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->target_index(), target);
  }

  // repeated uint32 key_line_id = 7;
  if (this->key_line_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _key_line_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->key_line_id_, target);
  }

  // bool in_current = 8;
  if (this->in_current() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->in_current(), target);
  }

  // bool in_target = 9;
  if (this->in_target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->in_target(), target);
  }

  // float map_delta_time = 10;
  if (this->map_delta_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->map_delta_time(), target);
  }

  // float imu_delta_time = 11;
  if (this->imu_delta_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->imu_delta_time(), target);
  }

  // repeated .planning_debug_msgs.DebugLine current_line = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->current_line_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->current_line(static_cast<int>(i)), deterministic, target);
  }

  // repeated .planning_debug_msgs.DebugLine left_line = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_line_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->left_line(static_cast<int>(i)), deterministic, target);
  }

  // repeated .planning_debug_msgs.DebugLine right_line = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_line_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->right_line(static_cast<int>(i)), deterministic, target);
  }

  // repeated .planning_debug_msgs.DebugLine local_line = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->local_line_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->local_line(static_cast<int>(i)), deterministic, target);
  }

  // .planning_debug_msgs.DebugLight light_info = 16;
  if (this->has_light_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, *this->light_info_, deterministic, target);
  }

  // uint32 drive_state = 17;
  if (this->drive_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->drive_state(), target);
  }

  // float time_cost_ms = 18;
  if (this->time_cost_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->time_cost_ms(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.DebugCognition)
  return target;
}

size_t DebugCognition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.DebugCognition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string reference_lane_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->reference_lane_ids_size());
  for (int i = 0, n = this->reference_lane_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->reference_lane_ids(i));
  }

  // repeated string reference_target_ids = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->reference_target_ids_size());
  for (int i = 0, n = this->reference_target_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->reference_target_ids(i));
  }

  // repeated uint32 key_line_id = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->key_line_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _key_line_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .planning_debug_msgs.DebugLine current_line = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->current_line_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->current_line(static_cast<int>(i)));
    }
  }

  // repeated .planning_debug_msgs.DebugLine left_line = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->left_line_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->left_line(static_cast<int>(i)));
    }
  }

  // repeated .planning_debug_msgs.DebugLine right_line = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->right_line_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->right_line(static_cast<int>(i)));
    }
  }

  // repeated .planning_debug_msgs.DebugLine local_line = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->local_line_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->local_line(static_cast<int>(i)));
    }
  }

  // .planning_debug_msgs.DebugLight light_info = 16;
  if (this->has_light_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->light_info_);
  }

  // double time_stamp = 1;
  if (this->time_stamp() != 0) {
    total_size += 1 + 8;
  }

  // uint32 mapengine_index = 4;
  if (this->mapengine_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mapengine_index());
  }

  // uint32 correction_index = 5;
  if (this->correction_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->correction_index());
  }

  // uint32 target_index = 6;
  if (this->target_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_index());
  }

  // bool in_current = 8;
  if (this->in_current() != 0) {
    total_size += 1 + 1;
  }

  // bool in_target = 9;
  if (this->in_target() != 0) {
    total_size += 1 + 1;
  }

  // float map_delta_time = 10;
  if (this->map_delta_time() != 0) {
    total_size += 1 + 4;
  }

  // float imu_delta_time = 11;
  if (this->imu_delta_time() != 0) {
    total_size += 1 + 4;
  }

  // uint32 drive_state = 17;
  if (this->drive_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->drive_state());
  }

  // float time_cost_ms = 18;
  if (this->time_cost_ms() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugCognition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.DebugCognition)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugCognition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugCognition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.DebugCognition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.DebugCognition)
    MergeFrom(*source);
  }
}

void DebugCognition::MergeFrom(const DebugCognition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.DebugCognition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reference_lane_ids_.MergeFrom(from.reference_lane_ids_);
  reference_target_ids_.MergeFrom(from.reference_target_ids_);
  key_line_id_.MergeFrom(from.key_line_id_);
  current_line_.MergeFrom(from.current_line_);
  left_line_.MergeFrom(from.left_line_);
  right_line_.MergeFrom(from.right_line_);
  local_line_.MergeFrom(from.local_line_);
  if (from.has_light_info()) {
    mutable_light_info()->::planning_debug_msgs::DebugLight::MergeFrom(from.light_info());
  }
  if (from.time_stamp() != 0) {
    set_time_stamp(from.time_stamp());
  }
  if (from.mapengine_index() != 0) {
    set_mapengine_index(from.mapengine_index());
  }
  if (from.correction_index() != 0) {
    set_correction_index(from.correction_index());
  }
  if (from.target_index() != 0) {
    set_target_index(from.target_index());
  }
  if (from.in_current() != 0) {
    set_in_current(from.in_current());
  }
  if (from.in_target() != 0) {
    set_in_target(from.in_target());
  }
  if (from.map_delta_time() != 0) {
    set_map_delta_time(from.map_delta_time());
  }
  if (from.imu_delta_time() != 0) {
    set_imu_delta_time(from.imu_delta_time());
  }
  if (from.drive_state() != 0) {
    set_drive_state(from.drive_state());
  }
  if (from.time_cost_ms() != 0) {
    set_time_cost_ms(from.time_cost_ms());
  }
}

void DebugCognition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.DebugCognition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugCognition::CopyFrom(const DebugCognition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.DebugCognition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugCognition::IsInitialized() const {
  return true;
}

void DebugCognition::Swap(DebugCognition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugCognition::InternalSwap(DebugCognition* other) {
  using std::swap;
  reference_lane_ids_.InternalSwap(&other->reference_lane_ids_);
  reference_target_ids_.InternalSwap(&other->reference_target_ids_);
  key_line_id_.InternalSwap(&other->key_line_id_);
  current_line_.InternalSwap(&other->current_line_);
  left_line_.InternalSwap(&other->left_line_);
  right_line_.InternalSwap(&other->right_line_);
  local_line_.InternalSwap(&other->local_line_);
  swap(light_info_, other->light_info_);
  swap(time_stamp_, other->time_stamp_);
  swap(mapengine_index_, other->mapengine_index_);
  swap(correction_index_, other->correction_index_);
  swap(target_index_, other->target_index_);
  swap(in_current_, other->in_current_);
  swap(in_target_, other->in_target_);
  swap(map_delta_time_, other->map_delta_time_);
  swap(imu_delta_time_, other->imu_delta_time_);
  swap(drive_state_, other->drive_state_);
  swap(time_cost_ms_, other->time_cost_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugCognition::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DecisionPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecisionPoint::kTFieldNumber;
const int DecisionPoint::kSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecisionPoint::DecisionPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDecisionPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.DecisionPoint)
}
DecisionPoint::DecisionPoint(const DecisionPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&t_, &from.t_,
    static_cast<size_t>(reinterpret_cast<char*>(&s_) -
    reinterpret_cast<char*>(&t_)) + sizeof(s_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.DecisionPoint)
}

void DecisionPoint::SharedCtor() {
  ::memset(&t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&t_)) + sizeof(s_));
  _cached_size_ = 0;
}

DecisionPoint::~DecisionPoint() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.DecisionPoint)
  SharedDtor();
}

void DecisionPoint::SharedDtor() {
}

void DecisionPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecisionPoint::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DecisionPoint& DecisionPoint::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDecisionPoint();
  return *internal_default_instance();
}

DecisionPoint* DecisionPoint::New(::google::protobuf::Arena* arena) const {
  DecisionPoint* n = new DecisionPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DecisionPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.DecisionPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&t_)) + sizeof(s_));
  _internal_metadata_.Clear();
}

bool DecisionPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.DecisionPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 t = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.DecisionPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.DecisionPoint)
  return false;
#undef DO_
}

void DecisionPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.DecisionPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 t = 1;
  if (this->t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->t(), output);
  }

  // int32 s = 2;
  if (this->s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->s(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.DecisionPoint)
}

::google::protobuf::uint8* DecisionPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.DecisionPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 t = 1;
  if (this->t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->t(), target);
  }

  // int32 s = 2;
  if (this->s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->s(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.DecisionPoint)
  return target;
}

size_t DecisionPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.DecisionPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 t = 1;
  if (this->t() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->t());
  }

  // int32 s = 2;
  if (this->s() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->s());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecisionPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.DecisionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const DecisionPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecisionPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.DecisionPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.DecisionPoint)
    MergeFrom(*source);
  }
}

void DecisionPoint::MergeFrom(const DecisionPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.DecisionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.t() != 0) {
    set_t(from.t());
  }
  if (from.s() != 0) {
    set_s(from.s());
  }
}

void DecisionPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.DecisionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionPoint::CopyFrom(const DecisionPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.DecisionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionPoint::IsInitialized() const {
  return true;
}

void DecisionPoint::Swap(DecisionPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecisionPoint::InternalSwap(DecisionPoint* other) {
  using std::swap;
  swap(t_, other->t_);
  swap(s_, other->s_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecisionPoint::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void STGraph::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int STGraph::kIdFieldNumber;
const int STGraph::kCellNumFieldNumber;
const int STGraph::kLaneIdFieldNumber;
const int STGraph::kIsStaticFieldNumber;
const int STGraph::kWasDynamicFieldNumber;
const int STGraph::kRightOfWayFieldNumber;
const int STGraph::kConflictTypeFieldNumber;
const int STGraph::kSLMinSFieldNumber;
const int STGraph::kSLMaxSFieldNumber;
const int STGraph::kSLMinLFieldNumber;
const int STGraph::kSLMaxLFieldNumber;
const int STGraph::kT1FieldNumber;
const int STGraph::kMinS1FieldNumber;
const int STGraph::kMaxS1FieldNumber;
const int STGraph::kT2FieldNumber;
const int STGraph::kMinS2FieldNumber;
const int STGraph::kMaxS2FieldNumber;
const int STGraph::kStTFieldNumber;
const int STGraph::kStMinSFieldNumber;
const int STGraph::kStMaxSFieldNumber;
const int STGraph::kSpeedFieldNumber;
const int STGraph::kTFieldNumber;
const int STGraph::kMinSFieldNumber;
const int STGraph::kMaxSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

STGraph::STGraph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSTGraph();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.STGraph)
}
STGraph::STGraph(const STGraph& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      st_t_(from.st_t_),
      st_min_s_(from.st_min_s_),
      st_max_s_(from.st_max_s_),
      t_(from.t_),
      min_s_(from.min_s_),
      max_s_(from.max_s_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lane_id().size() > 0) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&id_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.STGraph)
}

void STGraph::SharedCtor() {
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&id_)) + sizeof(speed_));
  _cached_size_ = 0;
}

STGraph::~STGraph() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.STGraph)
  SharedDtor();
}

void STGraph::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void STGraph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STGraph::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const STGraph& STGraph::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSTGraph();
  return *internal_default_instance();
}

STGraph* STGraph::New(::google::protobuf::Arena* arena) const {
  STGraph* n = new STGraph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void STGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.STGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  st_t_.Clear();
  st_min_s_.Clear();
  st_max_s_.Clear();
  t_.Clear();
  min_s_.Clear();
  max_s_.Clear();
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&id_)) + sizeof(speed_));
  _internal_metadata_.Clear();
}

bool STGraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.STGraph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cell_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lane_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.STGraph.lane_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_static = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_static_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool was_dynamic = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_dynamic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool right_of_way = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_of_way_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 conflict_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conflict_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s_l_min_s = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_l_min_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s_l_max_s = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_l_max_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s_l_min_l = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_l_min_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s_l_max_l = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_l_max_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float t_1 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_s_1 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_s_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_s_1 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_s_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float t_2 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_s_2 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_s_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_s_2 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_s_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float st_t = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_st_t())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 146u, input, this->mutable_st_t())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float st_min_s = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_st_min_s())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 154u, input, this->mutable_st_min_s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float st_max_s = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_st_max_s())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 162u, input, this->mutable_st_max_s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 178u, input, this->mutable_t())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float min_s = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_min_s())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 186u, input, this->mutable_min_s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float max_s = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_max_s())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 197 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 194u, input, this->mutable_max_s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.STGraph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.STGraph)
  return false;
#undef DO_
}

void STGraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.STGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 cell_num = 2;
  if (this->cell_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cell_num(), output);
  }

  // string lane_id = 3;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.STGraph.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lane_id(), output);
  }

  // bool is_static = 4;
  if (this->is_static() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_static(), output);
  }

  // bool was_dynamic = 5;
  if (this->was_dynamic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->was_dynamic(), output);
  }

  // bool right_of_way = 6;
  if (this->right_of_way() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->right_of_way(), output);
  }

  // int32 conflict_type = 7;
  if (this->conflict_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->conflict_type(), output);
  }

  // float s_l_min_s = 8;
  if (this->s_l_min_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->s_l_min_s(), output);
  }

  // float s_l_max_s = 9;
  if (this->s_l_max_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->s_l_max_s(), output);
  }

  // float s_l_min_l = 10;
  if (this->s_l_min_l() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->s_l_min_l(), output);
  }

  // float s_l_max_l = 11;
  if (this->s_l_max_l() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->s_l_max_l(), output);
  }

  // float t_1 = 12;
  if (this->t_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->t_1(), output);
  }

  // float min_s_1 = 13;
  if (this->min_s_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->min_s_1(), output);
  }

  // float max_s_1 = 14;
  if (this->max_s_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->max_s_1(), output);
  }

  // float t_2 = 15;
  if (this->t_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->t_2(), output);
  }

  // float min_s_2 = 16;
  if (this->min_s_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->min_s_2(), output);
  }

  // float max_s_2 = 17;
  if (this->max_s_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->max_s_2(), output);
  }

  // repeated float st_t = 18;
  if (this->st_t_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(18, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _st_t_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->st_t().data(), this->st_t_size(), output);
  }

  // repeated float st_min_s = 19;
  if (this->st_min_s_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(19, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _st_min_s_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->st_min_s().data(), this->st_min_s_size(), output);
  }

  // repeated float st_max_s = 20;
  if (this->st_max_s_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(20, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _st_max_s_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->st_max_s().data(), this->st_max_s_size(), output);
  }

  // float speed = 21;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->speed(), output);
  }

  // repeated float t = 22;
  if (this->t_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(22, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _t_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->t().data(), this->t_size(), output);
  }

  // repeated float min_s = 23;
  if (this->min_s_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(23, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _min_s_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->min_s().data(), this->min_s_size(), output);
  }

  // repeated float max_s = 24;
  if (this->max_s_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(24, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _max_s_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->max_s().data(), this->max_s_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.STGraph)
}

::google::protobuf::uint8* STGraph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.STGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 cell_num = 2;
  if (this->cell_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cell_num(), target);
  }

  // string lane_id = 3;
  if (this->lane_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.STGraph.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lane_id(), target);
  }

  // bool is_static = 4;
  if (this->is_static() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_static(), target);
  }

  // bool was_dynamic = 5;
  if (this->was_dynamic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->was_dynamic(), target);
  }

  // bool right_of_way = 6;
  if (this->right_of_way() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->right_of_way(), target);
  }

  // int32 conflict_type = 7;
  if (this->conflict_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->conflict_type(), target);
  }

  // float s_l_min_s = 8;
  if (this->s_l_min_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->s_l_min_s(), target);
  }

  // float s_l_max_s = 9;
  if (this->s_l_max_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->s_l_max_s(), target);
  }

  // float s_l_min_l = 10;
  if (this->s_l_min_l() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->s_l_min_l(), target);
  }

  // float s_l_max_l = 11;
  if (this->s_l_max_l() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->s_l_max_l(), target);
  }

  // float t_1 = 12;
  if (this->t_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->t_1(), target);
  }

  // float min_s_1 = 13;
  if (this->min_s_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->min_s_1(), target);
  }

  // float max_s_1 = 14;
  if (this->max_s_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->max_s_1(), target);
  }

  // float t_2 = 15;
  if (this->t_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->t_2(), target);
  }

  // float min_s_2 = 16;
  if (this->min_s_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->min_s_2(), target);
  }

  // float max_s_2 = 17;
  if (this->max_s_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->max_s_2(), target);
  }

  // repeated float st_t = 18;
  if (this->st_t_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      18,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _st_t_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->st_t_, target);
  }

  // repeated float st_min_s = 19;
  if (this->st_min_s_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      19,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _st_min_s_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->st_min_s_, target);
  }

  // repeated float st_max_s = 20;
  if (this->st_max_s_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      20,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _st_max_s_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->st_max_s_, target);
  }

  // float speed = 21;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->speed(), target);
  }

  // repeated float t = 22;
  if (this->t_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      22,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _t_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_, target);
  }

  // repeated float min_s = 23;
  if (this->min_s_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      23,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _min_s_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->min_s_, target);
  }

  // repeated float max_s = 24;
  if (this->max_s_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      24,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _max_s_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->max_s_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.STGraph)
  return target;
}

size_t STGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.STGraph)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float st_t = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->st_t_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _st_t_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float st_min_s = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->st_min_s_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _st_min_s_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float st_max_s = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->st_max_s_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _st_max_s_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float t = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->t_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _t_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float min_s = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->min_s_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _min_s_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float max_s = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->max_s_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _max_s_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string lane_id = 3;
  if (this->lane_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lane_id());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 cell_num = 2;
  if (this->cell_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cell_num());
  }

  // bool is_static = 4;
  if (this->is_static() != 0) {
    total_size += 1 + 1;
  }

  // bool was_dynamic = 5;
  if (this->was_dynamic() != 0) {
    total_size += 1 + 1;
  }

  // bool right_of_way = 6;
  if (this->right_of_way() != 0) {
    total_size += 1 + 1;
  }

  // int32 conflict_type = 7;
  if (this->conflict_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->conflict_type());
  }

  // float s_l_min_s = 8;
  if (this->s_l_min_s() != 0) {
    total_size += 1 + 4;
  }

  // float s_l_max_s = 9;
  if (this->s_l_max_s() != 0) {
    total_size += 1 + 4;
  }

  // float s_l_min_l = 10;
  if (this->s_l_min_l() != 0) {
    total_size += 1 + 4;
  }

  // float s_l_max_l = 11;
  if (this->s_l_max_l() != 0) {
    total_size += 1 + 4;
  }

  // float t_1 = 12;
  if (this->t_1() != 0) {
    total_size += 1 + 4;
  }

  // float min_s_1 = 13;
  if (this->min_s_1() != 0) {
    total_size += 1 + 4;
  }

  // float max_s_1 = 14;
  if (this->max_s_1() != 0) {
    total_size += 1 + 4;
  }

  // float t_2 = 15;
  if (this->t_2() != 0) {
    total_size += 1 + 4;
  }

  // float min_s_2 = 16;
  if (this->min_s_2() != 0) {
    total_size += 2 + 4;
  }

  // float max_s_2 = 17;
  if (this->max_s_2() != 0) {
    total_size += 2 + 4;
  }

  // float speed = 21;
  if (this->speed() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STGraph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.STGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const STGraph* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const STGraph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.STGraph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.STGraph)
    MergeFrom(*source);
  }
}

void STGraph::MergeFrom(const STGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.STGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  st_t_.MergeFrom(from.st_t_);
  st_min_s_.MergeFrom(from.st_min_s_);
  st_max_s_.MergeFrom(from.st_max_s_);
  t_.MergeFrom(from.t_);
  min_s_.MergeFrom(from.min_s_);
  max_s_.MergeFrom(from.max_s_);
  if (from.lane_id().size() > 0) {

    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.cell_num() != 0) {
    set_cell_num(from.cell_num());
  }
  if (from.is_static() != 0) {
    set_is_static(from.is_static());
  }
  if (from.was_dynamic() != 0) {
    set_was_dynamic(from.was_dynamic());
  }
  if (from.right_of_way() != 0) {
    set_right_of_way(from.right_of_way());
  }
  if (from.conflict_type() != 0) {
    set_conflict_type(from.conflict_type());
  }
  if (from.s_l_min_s() != 0) {
    set_s_l_min_s(from.s_l_min_s());
  }
  if (from.s_l_max_s() != 0) {
    set_s_l_max_s(from.s_l_max_s());
  }
  if (from.s_l_min_l() != 0) {
    set_s_l_min_l(from.s_l_min_l());
  }
  if (from.s_l_max_l() != 0) {
    set_s_l_max_l(from.s_l_max_l());
  }
  if (from.t_1() != 0) {
    set_t_1(from.t_1());
  }
  if (from.min_s_1() != 0) {
    set_min_s_1(from.min_s_1());
  }
  if (from.max_s_1() != 0) {
    set_max_s_1(from.max_s_1());
  }
  if (from.t_2() != 0) {
    set_t_2(from.t_2());
  }
  if (from.min_s_2() != 0) {
    set_min_s_2(from.min_s_2());
  }
  if (from.max_s_2() != 0) {
    set_max_s_2(from.max_s_2());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
}

void STGraph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.STGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STGraph::CopyFrom(const STGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.STGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraph::IsInitialized() const {
  return true;
}

void STGraph::Swap(STGraph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void STGraph::InternalSwap(STGraph* other) {
  using std::swap;
  st_t_.InternalSwap(&other->st_t_);
  st_min_s_.InternalSwap(&other->st_min_s_);
  st_max_s_.InternalSwap(&other->st_max_s_);
  t_.InternalSwap(&other->t_);
  min_s_.InternalSwap(&other->min_s_);
  max_s_.InternalSwap(&other->max_s_);
  lane_id_.Swap(&other->lane_id_);
  swap(id_, other->id_);
  swap(cell_num_, other->cell_num_);
  swap(is_static_, other->is_static_);
  swap(was_dynamic_, other->was_dynamic_);
  swap(right_of_way_, other->right_of_way_);
  swap(conflict_type_, other->conflict_type_);
  swap(s_l_min_s_, other->s_l_min_s_);
  swap(s_l_max_s_, other->s_l_max_s_);
  swap(s_l_min_l_, other->s_l_min_l_);
  swap(s_l_max_l_, other->s_l_max_l_);
  swap(t_1_, other->t_1_);
  swap(min_s_1_, other->min_s_1_);
  swap(max_s_1_, other->max_s_1_);
  swap(t_2_, other->t_2_);
  swap(min_s_2_, other->min_s_2_);
  swap(max_s_2_, other->max_s_2_);
  swap(speed_, other->speed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata STGraph::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugSTGraph::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugSTGraph::kCognitionObjectsFieldNumber;
const int DebugSTGraph::kDecisionPointsFieldNumber;
const int DebugSTGraph::kOriginalObjectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugSTGraph::DebugSTGraph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugSTGraph();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.DebugSTGraph)
}
DebugSTGraph::DebugSTGraph(const DebugSTGraph& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cognition_objects_(from.cognition_objects_),
      decision_points_(from.decision_points_),
      original_objects_(from.original_objects_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.DebugSTGraph)
}

void DebugSTGraph::SharedCtor() {
  _cached_size_ = 0;
}

DebugSTGraph::~DebugSTGraph() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.DebugSTGraph)
  SharedDtor();
}

void DebugSTGraph::SharedDtor() {
}

void DebugSTGraph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugSTGraph::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugSTGraph& DebugSTGraph::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugSTGraph();
  return *internal_default_instance();
}

DebugSTGraph* DebugSTGraph::New(::google::protobuf::Arena* arena) const {
  DebugSTGraph* n = new DebugSTGraph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugSTGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.DebugSTGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cognition_objects_.Clear();
  decision_points_.Clear();
  original_objects_.Clear();
  _internal_metadata_.Clear();
}

bool DebugSTGraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.DebugSTGraph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .planning_debug_msgs.STGraph cognition_objects = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_cognition_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.DecisionPoint decision_points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_decision_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.STGraph original_objects = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_original_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.DebugSTGraph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.DebugSTGraph)
  return false;
#undef DO_
}

void DebugSTGraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.DebugSTGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .planning_debug_msgs.STGraph cognition_objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cognition_objects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cognition_objects(static_cast<int>(i)), output);
  }

  // repeated .planning_debug_msgs.DecisionPoint decision_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->decision_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->decision_points(static_cast<int>(i)), output);
  }

  // repeated .planning_debug_msgs.STGraph original_objects = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->original_objects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->original_objects(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.DebugSTGraph)
}

::google::protobuf::uint8* DebugSTGraph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.DebugSTGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .planning_debug_msgs.STGraph cognition_objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cognition_objects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->cognition_objects(static_cast<int>(i)), deterministic, target);
  }

  // repeated .planning_debug_msgs.DecisionPoint decision_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->decision_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->decision_points(static_cast<int>(i)), deterministic, target);
  }

  // repeated .planning_debug_msgs.STGraph original_objects = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->original_objects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->original_objects(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.DebugSTGraph)
  return target;
}

size_t DebugSTGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.DebugSTGraph)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .planning_debug_msgs.STGraph cognition_objects = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->cognition_objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cognition_objects(static_cast<int>(i)));
    }
  }

  // repeated .planning_debug_msgs.DecisionPoint decision_points = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->decision_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->decision_points(static_cast<int>(i)));
    }
  }

  // repeated .planning_debug_msgs.STGraph original_objects = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->original_objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->original_objects(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugSTGraph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.DebugSTGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugSTGraph* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugSTGraph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.DebugSTGraph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.DebugSTGraph)
    MergeFrom(*source);
  }
}

void DebugSTGraph::MergeFrom(const DebugSTGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.DebugSTGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cognition_objects_.MergeFrom(from.cognition_objects_);
  decision_points_.MergeFrom(from.decision_points_);
  original_objects_.MergeFrom(from.original_objects_);
}

void DebugSTGraph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.DebugSTGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugSTGraph::CopyFrom(const DebugSTGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.DebugSTGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugSTGraph::IsInitialized() const {
  return true;
}

void DebugSTGraph::Swap(DebugSTGraph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugSTGraph::InternalSwap(DebugSTGraph* other) {
  using std::swap;
  cognition_objects_.InternalSwap(&other->cognition_objects_);
  decision_points_.InternalSwap(&other->decision_points_);
  original_objects_.InternalSwap(&other->original_objects_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugSTGraph::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Sentence::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sentence::kActionFieldNumber;
const int Sentence::kDirectionFieldNumber;
const int Sentence::kDisToEndFieldNumber;
const int Sentence::kDisToBoundaryFieldNumber;
const int Sentence::kXgFieldNumber;
const int Sentence::kYgFieldNumber;
const int Sentence::kHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sentence::Sentence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSentence();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.Sentence)
}
Sentence::Sentence(const Sentence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.action().size() > 0) {
    action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.Sentence)
}

void Sentence::SharedCtor() {
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(heading_));
  _cached_size_ = 0;
}

Sentence::~Sentence() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.Sentence)
  SharedDtor();
}

void Sentence::SharedDtor() {
  action_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Sentence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sentence::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sentence& Sentence::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSentence();
  return *internal_default_instance();
}

Sentence* Sentence::New(::google::protobuf::Arena* arena) const {
  Sentence* n = new Sentence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sentence::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.Sentence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(heading_));
  _internal_metadata_.Clear();
}

bool Sentence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.Sentence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->action().data(), static_cast<int>(this->action().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.Sentence.action"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dis_to_end = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dis_to_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dis_to_boundary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dis_to_boundary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float xg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float heading = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.Sentence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.Sentence)
  return false;
#undef DO_
}

void Sentence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.Sentence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string action = 1;
  if (this->action().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->action().data(), static_cast<int>(this->action().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.Sentence.action");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->action(), output);
  }

  // uint32 direction = 2;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->direction(), output);
  }

  // float dis_to_end = 3;
  if (this->dis_to_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dis_to_end(), output);
  }

  // float dis_to_boundary = 4;
  if (this->dis_to_boundary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dis_to_boundary(), output);
  }

  // float xg = 5;
  if (this->xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->xg(), output);
  }

  // float yg = 6;
  if (this->yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->yg(), output);
  }

  // float heading = 7;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->heading(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.Sentence)
}

::google::protobuf::uint8* Sentence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.Sentence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string action = 1;
  if (this->action().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->action().data(), static_cast<int>(this->action().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.Sentence.action");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->action(), target);
  }

  // uint32 direction = 2;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->direction(), target);
  }

  // float dis_to_end = 3;
  if (this->dis_to_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dis_to_end(), target);
  }

  // float dis_to_boundary = 4;
  if (this->dis_to_boundary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dis_to_boundary(), target);
  }

  // float xg = 5;
  if (this->xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->xg(), target);
  }

  // float yg = 6;
  if (this->yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->yg(), target);
  }

  // float heading = 7;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->heading(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.Sentence)
  return target;
}

size_t Sentence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.Sentence)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string action = 1;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->action());
  }

  // uint32 direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->direction());
  }

  // float dis_to_end = 3;
  if (this->dis_to_end() != 0) {
    total_size += 1 + 4;
  }

  // float dis_to_boundary = 4;
  if (this->dis_to_boundary() != 0) {
    total_size += 1 + 4;
  }

  // float xg = 5;
  if (this->xg() != 0) {
    total_size += 1 + 4;
  }

  // float yg = 6;
  if (this->yg() != 0) {
    total_size += 1 + 4;
  }

  // float heading = 7;
  if (this->heading() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sentence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.Sentence)
  GOOGLE_DCHECK_NE(&from, this);
  const Sentence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sentence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.Sentence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.Sentence)
    MergeFrom(*source);
  }
}

void Sentence::MergeFrom(const Sentence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.Sentence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.dis_to_end() != 0) {
    set_dis_to_end(from.dis_to_end());
  }
  if (from.dis_to_boundary() != 0) {
    set_dis_to_boundary(from.dis_to_boundary());
  }
  if (from.xg() != 0) {
    set_xg(from.xg());
  }
  if (from.yg() != 0) {
    set_yg(from.yg());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
}

void Sentence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.Sentence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sentence::CopyFrom(const Sentence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.Sentence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sentence::IsInitialized() const {
  return true;
}

void Sentence::Swap(Sentence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sentence::InternalSwap(Sentence* other) {
  using std::swap;
  action_.Swap(&other->action_);
  swap(direction_, other->direction_);
  swap(dis_to_end_, other->dis_to_end_);
  swap(dis_to_boundary_, other->dis_to_boundary_);
  swap(xg_, other->xg_);
  swap(yg_, other->yg_);
  swap(heading_, other->heading_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sentence::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugDecision::InitAsDefaultInstance() {
  ::planning_debug_msgs::_DebugDecision_default_instance_._instance.get_mutable()->st_graph_ = const_cast< ::planning_debug_msgs::DebugSTGraph*>(
      ::planning_debug_msgs::DebugSTGraph::internal_default_instance());
  ::planning_debug_msgs::_DebugDecision_default_instance_._instance.get_mutable()->trajectory_ = const_cast< ::planning_msgs::Trajectory*>(
      ::planning_msgs::Trajectory::internal_default_instance());
}
void DebugDecision::clear_trajectory() {
  if (GetArenaNoVirtual() == NULL && trajectory_ != NULL) {
    delete trajectory_;
  }
  trajectory_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugDecision::kTimeStampFieldNumber;
const int DebugDecision::kTargetLineFieldNumber;
const int DebugDecision::kGivewayIdFieldNumber;
const int DebugDecision::kSpeedLimitFieldNumber;
const int DebugDecision::kBoundarySFieldNumber;
const int DebugDecision::kLeftBoundaryFieldNumber;
const int DebugDecision::kRightBoundaryFieldNumber;
const int DebugDecision::kObjectIdFieldNumber;
const int DebugDecision::kObjectDecisionFieldNumber;
const int DebugDecision::kSentencesFieldNumber;
const int DebugDecision::kStGraphFieldNumber;
const int DebugDecision::kCmdFeedbackFieldNumber;
const int DebugDecision::kLcStatusFieldNumber;
const int DebugDecision::kDecisionResultFieldNumber;
const int DebugDecision::kScenarioTypeFieldNumber;
const int DebugDecision::kIntentionTypeFieldNumber;
const int DebugDecision::kOptionTypeFieldNumber;
const int DebugDecision::kTurningTypeFieldNumber;
const int DebugDecision::kStopTypeFieldNumber;
const int DebugDecision::kLateralDecisionFieldNumber;
const int DebugDecision::kReadyStatusFieldNumber;
const int DebugDecision::kDisToJunctionFieldNumber;
const int DebugDecision::kDisToStopFieldNumber;
const int DebugDecision::kLightSFieldNumber;
const int DebugDecision::kLightTimeFieldNumber;
const int DebugDecision::kLeftTimeFieldNumber;
const int DebugDecision::kLightColorFieldNumber;
const int DebugDecision::kTurningFieldNumber;
const int DebugDecision::kExpandLFieldNumber;
const int DebugDecision::kTrajectoryFieldNumber;
const int DebugDecision::kIsPassableFieldNumber;
const int DebugDecision::kPassableLaneIdsFieldNumber;
const int DebugDecision::kBlackRoadIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugDecision::DebugDecision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugDecision();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.DebugDecision)
}
DebugDecision::DebugDecision(const DebugDecision& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      boundary_s_(from.boundary_s_),
      left_boundary_(from.left_boundary_),
      right_boundary_(from.right_boundary_),
      object_id_(from.object_id_),
      object_decision_(from.object_decision_),
      sentences_(from.sentences_),
      passable_lane_ids_(from.passable_lane_ids_),
      black_road_ids_(from.black_road_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_feedback_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cmd_feedback().size() > 0) {
    cmd_feedback_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_feedback_);
  }
  if (from.has_st_graph()) {
    st_graph_ = new ::planning_debug_msgs::DebugSTGraph(*from.st_graph_);
  } else {
    st_graph_ = NULL;
  }
  if (from.has_trajectory()) {
    trajectory_ = new ::planning_msgs::Trajectory(*from.trajectory_);
  } else {
    trajectory_ = NULL;
  }
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_passable_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(is_passable_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.DebugDecision)
}

void DebugDecision::SharedCtor() {
  cmd_feedback_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&st_graph_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_passable_) -
      reinterpret_cast<char*>(&st_graph_)) + sizeof(is_passable_));
  _cached_size_ = 0;
}

DebugDecision::~DebugDecision() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.DebugDecision)
  SharedDtor();
}

void DebugDecision::SharedDtor() {
  cmd_feedback_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete st_graph_;
  if (this != internal_default_instance()) delete trajectory_;
}

void DebugDecision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugDecision::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugDecision& DebugDecision::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugDecision();
  return *internal_default_instance();
}

DebugDecision* DebugDecision::New(::google::protobuf::Arena* arena) const {
  DebugDecision* n = new DebugDecision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugDecision::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.DebugDecision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boundary_s_.Clear();
  left_boundary_.Clear();
  right_boundary_.Clear();
  object_id_.Clear();
  object_decision_.Clear();
  sentences_.Clear();
  passable_lane_ids_.Clear();
  black_road_ids_.Clear();
  cmd_feedback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && st_graph_ != NULL) {
    delete st_graph_;
  }
  st_graph_ = NULL;
  if (GetArenaNoVirtual() == NULL && trajectory_ != NULL) {
    delete trajectory_;
  }
  trajectory_ = NULL;
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_passable_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(is_passable_));
  _internal_metadata_.Clear();
}

bool DebugDecision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.DebugDecision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double time_stamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_line = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 giveway_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giveway_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float boundary_s = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_boundary_s())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_boundary_s())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float left_boundary = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_left_boundary())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50u, input, this->mutable_left_boundary())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float right_boundary = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_right_boundary())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 58u, input, this->mutable_right_boundary())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 object_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_object_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66u, input, this->mutable_object_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 object_decision = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_object_decision())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74u, input, this->mutable_object_decision())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.Sentence sentences = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_sentences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_debug_msgs.DebugSTGraph st_graph = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_st_graph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cmd_feedback = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd_feedback()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cmd_feedback().data(), static_cast<int>(this->cmd_feedback().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.DebugDecision.cmd_feedback"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lc_status = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lc_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 decision_result = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decision_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 scenario_type = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenario_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 intention_type = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intention_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 option_type = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &option_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 turning_type = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turning_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stop_type = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stop_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lateral_decision = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lateral_decision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ready_status = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ready_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dis_to_junction = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dis_to_junction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dis_to_stop = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dis_to_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float light_s = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 197 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &light_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float light_time = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u /* 205 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &light_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float left_time = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u /* 213 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 light_color = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &light_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 turning = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float expand_l = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(237u /* 237 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &expand_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_msgs.Trajectory trajectory = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_passable = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_passable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string passable_lane_ids = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_passable_lane_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->passable_lane_ids(this->passable_lane_ids_size() - 1).data(),
            static_cast<int>(this->passable_lane_ids(this->passable_lane_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.DebugDecision.passable_lane_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string black_road_ids = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_black_road_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->black_road_ids(this->black_road_ids_size() - 1).data(),
            static_cast<int>(this->black_road_ids(this->black_road_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.DebugDecision.black_road_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.DebugDecision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.DebugDecision)
  return false;
#undef DO_
}

void DebugDecision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.DebugDecision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_stamp = 1;
  if (this->time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time_stamp(), output);
  }

  // uint32 target_line = 2;
  if (this->target_line() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_line(), output);
  }

  // int32 giveway_id = 3;
  if (this->giveway_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->giveway_id(), output);
  }

  // float speed_limit = 4;
  if (this->speed_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->speed_limit(), output);
  }

  // repeated float boundary_s = 5;
  if (this->boundary_s_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _boundary_s_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->boundary_s().data(), this->boundary_s_size(), output);
  }

  // repeated float left_boundary = 6;
  if (this->left_boundary_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _left_boundary_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->left_boundary().data(), this->left_boundary_size(), output);
  }

  // repeated float right_boundary = 7;
  if (this->right_boundary_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _right_boundary_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->right_boundary().data(), this->right_boundary_size(), output);
  }

  // repeated int32 object_id = 8;
  if (this->object_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _object_id_cached_byte_size_));
  }
  for (int i = 0, n = this->object_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->object_id(i), output);
  }

  // repeated int32 object_decision = 9;
  if (this->object_decision_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _object_decision_cached_byte_size_));
  }
  for (int i = 0, n = this->object_decision_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->object_decision(i), output);
  }

  // repeated .planning_debug_msgs.Sentence sentences = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sentences_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->sentences(static_cast<int>(i)), output);
  }

  // .planning_debug_msgs.DebugSTGraph st_graph = 11;
  if (this->has_st_graph()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->st_graph_, output);
  }

  // string cmd_feedback = 12;
  if (this->cmd_feedback().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd_feedback().data(), static_cast<int>(this->cmd_feedback().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugDecision.cmd_feedback");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->cmd_feedback(), output);
  }

  // uint32 lc_status = 13;
  if (this->lc_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->lc_status(), output);
  }

  // int32 decision_result = 14;
  if (this->decision_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->decision_result(), output);
  }

  // uint32 scenario_type = 15;
  if (this->scenario_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->scenario_type(), output);
  }

  // uint32 intention_type = 16;
  if (this->intention_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->intention_type(), output);
  }

  // uint32 option_type = 17;
  if (this->option_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->option_type(), output);
  }

  // uint32 turning_type = 18;
  if (this->turning_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->turning_type(), output);
  }

  // uint32 stop_type = 19;
  if (this->stop_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->stop_type(), output);
  }

  // uint32 lateral_decision = 20;
  if (this->lateral_decision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->lateral_decision(), output);
  }

  // uint32 ready_status = 21;
  if (this->ready_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->ready_status(), output);
  }

  // float dis_to_junction = 22;
  if (this->dis_to_junction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->dis_to_junction(), output);
  }

  // float dis_to_stop = 23;
  if (this->dis_to_stop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->dis_to_stop(), output);
  }

  // float light_s = 24;
  if (this->light_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->light_s(), output);
  }

  // float light_time = 25;
  if (this->light_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->light_time(), output);
  }

  // float left_time = 26;
  if (this->left_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->left_time(), output);
  }

  // uint32 light_color = 27;
  if (this->light_color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->light_color(), output);
  }

  // uint32 turning = 28;
  if (this->turning() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->turning(), output);
  }

  // float expand_l = 29;
  if (this->expand_l() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->expand_l(), output);
  }

  // .planning_msgs.Trajectory trajectory = 30;
  if (this->has_trajectory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->trajectory_, output);
  }

  // int32 is_passable = 31;
  if (this->is_passable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->is_passable(), output);
  }

  // repeated string passable_lane_ids = 32;
  for (int i = 0, n = this->passable_lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passable_lane_ids(i).data(), static_cast<int>(this->passable_lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugDecision.passable_lane_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->passable_lane_ids(i), output);
  }

  // repeated string black_road_ids = 33;
  for (int i = 0, n = this->black_road_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->black_road_ids(i).data(), static_cast<int>(this->black_road_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugDecision.black_road_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->black_road_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.DebugDecision)
}

::google::protobuf::uint8* DebugDecision::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.DebugDecision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_stamp = 1;
  if (this->time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time_stamp(), target);
  }

  // uint32 target_line = 2;
  if (this->target_line() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_line(), target);
  }

  // int32 giveway_id = 3;
  if (this->giveway_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->giveway_id(), target);
  }

  // float speed_limit = 4;
  if (this->speed_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->speed_limit(), target);
  }

  // repeated float boundary_s = 5;
  if (this->boundary_s_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _boundary_s_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->boundary_s_, target);
  }

  // repeated float left_boundary = 6;
  if (this->left_boundary_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _left_boundary_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->left_boundary_, target);
  }

  // repeated float right_boundary = 7;
  if (this->right_boundary_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _right_boundary_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->right_boundary_, target);
  }

  // repeated int32 object_id = 8;
  if (this->object_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _object_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->object_id_, target);
  }

  // repeated int32 object_decision = 9;
  if (this->object_decision_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _object_decision_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->object_decision_, target);
  }

  // repeated .planning_debug_msgs.Sentence sentences = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sentences_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->sentences(static_cast<int>(i)), deterministic, target);
  }

  // .planning_debug_msgs.DebugSTGraph st_graph = 11;
  if (this->has_st_graph()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->st_graph_, deterministic, target);
  }

  // string cmd_feedback = 12;
  if (this->cmd_feedback().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd_feedback().data(), static_cast<int>(this->cmd_feedback().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugDecision.cmd_feedback");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->cmd_feedback(), target);
  }

  // uint32 lc_status = 13;
  if (this->lc_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->lc_status(), target);
  }

  // int32 decision_result = 14;
  if (this->decision_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->decision_result(), target);
  }

  // uint32 scenario_type = 15;
  if (this->scenario_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->scenario_type(), target);
  }

  // uint32 intention_type = 16;
  if (this->intention_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->intention_type(), target);
  }

  // uint32 option_type = 17;
  if (this->option_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->option_type(), target);
  }

  // uint32 turning_type = 18;
  if (this->turning_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->turning_type(), target);
  }

  // uint32 stop_type = 19;
  if (this->stop_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->stop_type(), target);
  }

  // uint32 lateral_decision = 20;
  if (this->lateral_decision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->lateral_decision(), target);
  }

  // uint32 ready_status = 21;
  if (this->ready_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->ready_status(), target);
  }

  // float dis_to_junction = 22;
  if (this->dis_to_junction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->dis_to_junction(), target);
  }

  // float dis_to_stop = 23;
  if (this->dis_to_stop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->dis_to_stop(), target);
  }

  // float light_s = 24;
  if (this->light_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->light_s(), target);
  }

  // float light_time = 25;
  if (this->light_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->light_time(), target);
  }

  // float left_time = 26;
  if (this->left_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->left_time(), target);
  }

  // uint32 light_color = 27;
  if (this->light_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->light_color(), target);
  }

  // uint32 turning = 28;
  if (this->turning() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->turning(), target);
  }

  // float expand_l = 29;
  if (this->expand_l() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->expand_l(), target);
  }

  // .planning_msgs.Trajectory trajectory = 30;
  if (this->has_trajectory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, *this->trajectory_, deterministic, target);
  }

  // int32 is_passable = 31;
  if (this->is_passable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->is_passable(), target);
  }

  // repeated string passable_lane_ids = 32;
  for (int i = 0, n = this->passable_lane_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->passable_lane_ids(i).data(), static_cast<int>(this->passable_lane_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugDecision.passable_lane_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(32, this->passable_lane_ids(i), target);
  }

  // repeated string black_road_ids = 33;
  for (int i = 0, n = this->black_road_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->black_road_ids(i).data(), static_cast<int>(this->black_road_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugDecision.black_road_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(33, this->black_road_ids(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.DebugDecision)
  return target;
}

size_t DebugDecision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.DebugDecision)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float boundary_s = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->boundary_s_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _boundary_s_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float left_boundary = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->left_boundary_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _left_boundary_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float right_boundary = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->right_boundary_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _right_boundary_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 object_id = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->object_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _object_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 object_decision = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->object_decision_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _object_decision_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .planning_debug_msgs.Sentence sentences = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->sentences_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sentences(static_cast<int>(i)));
    }
  }

  // repeated string passable_lane_ids = 32;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->passable_lane_ids_size());
  for (int i = 0, n = this->passable_lane_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->passable_lane_ids(i));
  }

  // repeated string black_road_ids = 33;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->black_road_ids_size());
  for (int i = 0, n = this->black_road_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->black_road_ids(i));
  }

  // string cmd_feedback = 12;
  if (this->cmd_feedback().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd_feedback());
  }

  // .planning_debug_msgs.DebugSTGraph st_graph = 11;
  if (this->has_st_graph()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->st_graph_);
  }

  // .planning_msgs.Trajectory trajectory = 30;
  if (this->has_trajectory()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->trajectory_);
  }

  // double time_stamp = 1;
  if (this->time_stamp() != 0) {
    total_size += 1 + 8;
  }

  // uint32 target_line = 2;
  if (this->target_line() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_line());
  }

  // int32 giveway_id = 3;
  if (this->giveway_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->giveway_id());
  }

  // float speed_limit = 4;
  if (this->speed_limit() != 0) {
    total_size += 1 + 4;
  }

  // uint32 lc_status = 13;
  if (this->lc_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lc_status());
  }

  // int32 decision_result = 14;
  if (this->decision_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->decision_result());
  }

  // uint32 scenario_type = 15;
  if (this->scenario_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scenario_type());
  }

  // uint32 intention_type = 16;
  if (this->intention_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->intention_type());
  }

  // uint32 option_type = 17;
  if (this->option_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->option_type());
  }

  // uint32 turning_type = 18;
  if (this->turning_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->turning_type());
  }

  // uint32 stop_type = 19;
  if (this->stop_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stop_type());
  }

  // uint32 lateral_decision = 20;
  if (this->lateral_decision() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lateral_decision());
  }

  // uint32 ready_status = 21;
  if (this->ready_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ready_status());
  }

  // float dis_to_junction = 22;
  if (this->dis_to_junction() != 0) {
    total_size += 2 + 4;
  }

  // float dis_to_stop = 23;
  if (this->dis_to_stop() != 0) {
    total_size += 2 + 4;
  }

  // float light_s = 24;
  if (this->light_s() != 0) {
    total_size += 2 + 4;
  }

  // float light_time = 25;
  if (this->light_time() != 0) {
    total_size += 2 + 4;
  }

  // float left_time = 26;
  if (this->left_time() != 0) {
    total_size += 2 + 4;
  }

  // uint32 light_color = 27;
  if (this->light_color() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->light_color());
  }

  // uint32 turning = 28;
  if (this->turning() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->turning());
  }

  // float expand_l = 29;
  if (this->expand_l() != 0) {
    total_size += 2 + 4;
  }

  // int32 is_passable = 31;
  if (this->is_passable() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_passable());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugDecision::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.DebugDecision)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugDecision* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugDecision>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.DebugDecision)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.DebugDecision)
    MergeFrom(*source);
  }
}

void DebugDecision::MergeFrom(const DebugDecision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.DebugDecision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boundary_s_.MergeFrom(from.boundary_s_);
  left_boundary_.MergeFrom(from.left_boundary_);
  right_boundary_.MergeFrom(from.right_boundary_);
  object_id_.MergeFrom(from.object_id_);
  object_decision_.MergeFrom(from.object_decision_);
  sentences_.MergeFrom(from.sentences_);
  passable_lane_ids_.MergeFrom(from.passable_lane_ids_);
  black_road_ids_.MergeFrom(from.black_road_ids_);
  if (from.cmd_feedback().size() > 0) {

    cmd_feedback_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_feedback_);
  }
  if (from.has_st_graph()) {
    mutable_st_graph()->::planning_debug_msgs::DebugSTGraph::MergeFrom(from.st_graph());
  }
  if (from.has_trajectory()) {
    mutable_trajectory()->::planning_msgs::Trajectory::MergeFrom(from.trajectory());
  }
  if (from.time_stamp() != 0) {
    set_time_stamp(from.time_stamp());
  }
  if (from.target_line() != 0) {
    set_target_line(from.target_line());
  }
  if (from.giveway_id() != 0) {
    set_giveway_id(from.giveway_id());
  }
  if (from.speed_limit() != 0) {
    set_speed_limit(from.speed_limit());
  }
  if (from.lc_status() != 0) {
    set_lc_status(from.lc_status());
  }
  if (from.decision_result() != 0) {
    set_decision_result(from.decision_result());
  }
  if (from.scenario_type() != 0) {
    set_scenario_type(from.scenario_type());
  }
  if (from.intention_type() != 0) {
    set_intention_type(from.intention_type());
  }
  if (from.option_type() != 0) {
    set_option_type(from.option_type());
  }
  if (from.turning_type() != 0) {
    set_turning_type(from.turning_type());
  }
  if (from.stop_type() != 0) {
    set_stop_type(from.stop_type());
  }
  if (from.lateral_decision() != 0) {
    set_lateral_decision(from.lateral_decision());
  }
  if (from.ready_status() != 0) {
    set_ready_status(from.ready_status());
  }
  if (from.dis_to_junction() != 0) {
    set_dis_to_junction(from.dis_to_junction());
  }
  if (from.dis_to_stop() != 0) {
    set_dis_to_stop(from.dis_to_stop());
  }
  if (from.light_s() != 0) {
    set_light_s(from.light_s());
  }
  if (from.light_time() != 0) {
    set_light_time(from.light_time());
  }
  if (from.left_time() != 0) {
    set_left_time(from.left_time());
  }
  if (from.light_color() != 0) {
    set_light_color(from.light_color());
  }
  if (from.turning() != 0) {
    set_turning(from.turning());
  }
  if (from.expand_l() != 0) {
    set_expand_l(from.expand_l());
  }
  if (from.is_passable() != 0) {
    set_is_passable(from.is_passable());
  }
}

void DebugDecision::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.DebugDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugDecision::CopyFrom(const DebugDecision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.DebugDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugDecision::IsInitialized() const {
  return true;
}

void DebugDecision::Swap(DebugDecision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugDecision::InternalSwap(DebugDecision* other) {
  using std::swap;
  boundary_s_.InternalSwap(&other->boundary_s_);
  left_boundary_.InternalSwap(&other->left_boundary_);
  right_boundary_.InternalSwap(&other->right_boundary_);
  object_id_.InternalSwap(&other->object_id_);
  object_decision_.InternalSwap(&other->object_decision_);
  sentences_.InternalSwap(&other->sentences_);
  passable_lane_ids_.InternalSwap(&other->passable_lane_ids_);
  black_road_ids_.InternalSwap(&other->black_road_ids_);
  cmd_feedback_.Swap(&other->cmd_feedback_);
  swap(st_graph_, other->st_graph_);
  swap(trajectory_, other->trajectory_);
  swap(time_stamp_, other->time_stamp_);
  swap(target_line_, other->target_line_);
  swap(giveway_id_, other->giveway_id_);
  swap(speed_limit_, other->speed_limit_);
  swap(lc_status_, other->lc_status_);
  swap(decision_result_, other->decision_result_);
  swap(scenario_type_, other->scenario_type_);
  swap(intention_type_, other->intention_type_);
  swap(option_type_, other->option_type_);
  swap(turning_type_, other->turning_type_);
  swap(stop_type_, other->stop_type_);
  swap(lateral_decision_, other->lateral_decision_);
  swap(ready_status_, other->ready_status_);
  swap(dis_to_junction_, other->dis_to_junction_);
  swap(dis_to_stop_, other->dis_to_stop_);
  swap(light_s_, other->light_s_);
  swap(light_time_, other->light_time_);
  swap(left_time_, other->left_time_);
  swap(light_color_, other->light_color_);
  swap(turning_, other->turning_);
  swap(expand_l_, other->expand_l_);
  swap(is_passable_, other->is_passable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugDecision::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugPrediction::InitAsDefaultInstance() {
}
void DebugPrediction::clear_points() {
  points_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugPrediction::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugPrediction::DebugPrediction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugPrediction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.DebugPrediction)
}
DebugPrediction::DebugPrediction(const DebugPrediction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.DebugPrediction)
}

void DebugPrediction::SharedCtor() {
  _cached_size_ = 0;
}

DebugPrediction::~DebugPrediction() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.DebugPrediction)
  SharedDtor();
}

void DebugPrediction::SharedDtor() {
}

void DebugPrediction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugPrediction::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugPrediction& DebugPrediction::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugPrediction();
  return *internal_default_instance();
}

DebugPrediction* DebugPrediction::New(::google::protobuf::Arena* arena) const {
  DebugPrediction* n = new DebugPrediction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.DebugPrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear();
}

bool DebugPrediction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.DebugPrediction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .planning_msgs.Trajectory points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.DebugPrediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.DebugPrediction)
  return false;
#undef DO_
}

void DebugPrediction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.DebugPrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .planning_msgs.Trajectory points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.DebugPrediction)
}

::google::protobuf::uint8* DebugPrediction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.DebugPrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .planning_msgs.Trajectory points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.DebugPrediction)
  return target;
}

size_t DebugPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.DebugPrediction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .planning_msgs.Trajectory points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugPrediction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.DebugPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugPrediction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugPrediction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.DebugPrediction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.DebugPrediction)
    MergeFrom(*source);
  }
}

void DebugPrediction::MergeFrom(const DebugPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.DebugPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void DebugPrediction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.DebugPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugPrediction::CopyFrom(const DebugPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.DebugPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugPrediction::IsInitialized() const {
  return true;
}

void DebugPrediction::Swap(DebugPrediction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugPrediction::InternalSwap(DebugPrediction* other) {
  using std::swap;
  points_.InternalSwap(&other->points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugPrediction::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugImu::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugImu::kTimeStampFieldNumber;
const int DebugImu::kXgFieldNumber;
const int DebugImu::kYgFieldNumber;
const int DebugImu::kYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugImu::DebugImu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugImu();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.DebugImu)
}
DebugImu::DebugImu(const DebugImu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.DebugImu)
}

void DebugImu::SharedCtor() {
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(yaw_));
  _cached_size_ = 0;
}

DebugImu::~DebugImu() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.DebugImu)
  SharedDtor();
}

void DebugImu::SharedDtor() {
}

void DebugImu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugImu::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugImu& DebugImu::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugImu();
  return *internal_default_instance();
}

DebugImu* DebugImu::New(::google::protobuf::Arena* arena) const {
  DebugImu* n = new DebugImu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugImu::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.DebugImu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(yaw_));
  _internal_metadata_.Clear();
}

bool DebugImu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.DebugImu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double time_stamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double xg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.DebugImu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.DebugImu)
  return false;
#undef DO_
}

void DebugImu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.DebugImu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_stamp = 1;
  if (this->time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time_stamp(), output);
  }

  // double xg = 2;
  if (this->xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->xg(), output);
  }

  // double yg = 3;
  if (this->yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->yg(), output);
  }

  // double yaw = 4;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->yaw(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.DebugImu)
}

::google::protobuf::uint8* DebugImu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.DebugImu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_stamp = 1;
  if (this->time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time_stamp(), target);
  }

  // double xg = 2;
  if (this->xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->xg(), target);
  }

  // double yg = 3;
  if (this->yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->yg(), target);
  }

  // double yaw = 4;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->yaw(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.DebugImu)
  return target;
}

size_t DebugImu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.DebugImu)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double time_stamp = 1;
  if (this->time_stamp() != 0) {
    total_size += 1 + 8;
  }

  // double xg = 2;
  if (this->xg() != 0) {
    total_size += 1 + 8;
  }

  // double yg = 3;
  if (this->yg() != 0) {
    total_size += 1 + 8;
  }

  // double yaw = 4;
  if (this->yaw() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugImu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.DebugImu)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugImu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugImu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.DebugImu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.DebugImu)
    MergeFrom(*source);
  }
}

void DebugImu::MergeFrom(const DebugImu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.DebugImu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time_stamp() != 0) {
    set_time_stamp(from.time_stamp());
  }
  if (from.xg() != 0) {
    set_xg(from.xg());
  }
  if (from.yg() != 0) {
    set_yg(from.yg());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
}

void DebugImu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.DebugImu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugImu::CopyFrom(const DebugImu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.DebugImu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugImu::IsInitialized() const {
  return true;
}

void DebugImu::Swap(DebugImu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugImu::InternalSwap(DebugImu* other) {
  using std::swap;
  swap(time_stamp_, other->time_stamp_);
  swap(xg_, other->xg_);
  swap(yg_, other->yg_);
  swap(yaw_, other->yaw_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugImu::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlanningDebug::InitAsDefaultInstance() {
  ::planning_debug_msgs::_PlanningDebug_default_instance_._instance.get_mutable()->header_ = const_cast< ::common_msgs::Header*>(
      ::common_msgs::Header::internal_default_instance());
  ::planning_debug_msgs::_PlanningDebug_default_instance_._instance.get_mutable()->main_stream_msg_ = const_cast< ::planning_debug_msgs::DebugState*>(
      ::planning_debug_msgs::DebugState::internal_default_instance());
  ::planning_debug_msgs::_PlanningDebug_default_instance_._instance.get_mutable()->task_fsm_condition_ = const_cast< ::planning_debug_msgs::DebugState*>(
      ::planning_debug_msgs::DebugState::internal_default_instance());
  ::planning_debug_msgs::_PlanningDebug_default_instance_._instance.get_mutable()->task_fsm_state_ = const_cast< ::planning_debug_msgs::DebugState*>(
      ::planning_debug_msgs::DebugState::internal_default_instance());
  ::planning_debug_msgs::_PlanningDebug_default_instance_._instance.get_mutable()->cognition_msg_ = const_cast< ::planning_debug_msgs::DebugState*>(
      ::planning_debug_msgs::DebugState::internal_default_instance());
  ::planning_debug_msgs::_PlanningDebug_default_instance_._instance.get_mutable()->business_msg_ = const_cast< ::planning_debug_msgs::DebugState*>(
      ::planning_debug_msgs::DebugState::internal_default_instance());
  ::planning_debug_msgs::_PlanningDebug_default_instance_._instance.get_mutable()->behavior_fsm_condition_ = const_cast< ::planning_debug_msgs::DebugState*>(
      ::planning_debug_msgs::DebugState::internal_default_instance());
  ::planning_debug_msgs::_PlanningDebug_default_instance_._instance.get_mutable()->behavior_fsm_state_ = const_cast< ::planning_debug_msgs::DebugState*>(
      ::planning_debug_msgs::DebugState::internal_default_instance());
  ::planning_debug_msgs::_PlanningDebug_default_instance_._instance.get_mutable()->pathplan_msg_ = const_cast< ::planning_debug_msgs::DebugState*>(
      ::planning_debug_msgs::DebugState::internal_default_instance());
  ::planning_debug_msgs::_PlanningDebug_default_instance_._instance.get_mutable()->thread_state_ = const_cast< ::planning_debug_msgs::DebugState*>(
      ::planning_debug_msgs::DebugState::internal_default_instance());
  ::planning_debug_msgs::_PlanningDebug_default_instance_._instance.get_mutable()->motionplan_ = const_cast< ::planning_debug_msgs::DebugMotionPlan*>(
      ::planning_debug_msgs::DebugMotionPlan::internal_default_instance());
  ::planning_debug_msgs::_PlanningDebug_default_instance_._instance.get_mutable()->cognition_ = const_cast< ::planning_debug_msgs::DebugCognition*>(
      ::planning_debug_msgs::DebugCognition::internal_default_instance());
  ::planning_debug_msgs::_PlanningDebug_default_instance_._instance.get_mutable()->decision_ = const_cast< ::planning_debug_msgs::DebugDecision*>(
      ::planning_debug_msgs::DebugDecision::internal_default_instance());
  ::planning_debug_msgs::_PlanningDebug_default_instance_._instance.get_mutable()->prediction_ = const_cast< ::planning_debug_msgs::DebugPrediction*>(
      ::planning_debug_msgs::DebugPrediction::internal_default_instance());
  ::planning_debug_msgs::_PlanningDebug_default_instance_._instance.get_mutable()->locpose_ = const_cast< ::planning_debug_msgs::DebugImu*>(
      ::planning_debug_msgs::DebugImu::internal_default_instance());
}
void PlanningDebug::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void PlanningDebug::clear_perception() {
  perception_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningDebug::kHeaderFieldNumber;
const int PlanningDebug::kVersionFieldNumber;
const int PlanningDebug::kMainStreamMsgFieldNumber;
const int PlanningDebug::kTaskFsmConditionFieldNumber;
const int PlanningDebug::kTaskFsmStateFieldNumber;
const int PlanningDebug::kCognitionMsgFieldNumber;
const int PlanningDebug::kBusinessMsgFieldNumber;
const int PlanningDebug::kBehaviorFsmConditionFieldNumber;
const int PlanningDebug::kBehaviorFsmStateFieldNumber;
const int PlanningDebug::kPathplanMsgFieldNumber;
const int PlanningDebug::kThreadStateFieldNumber;
const int PlanningDebug::kMotionplanFieldNumber;
const int PlanningDebug::kCognitionFieldNumber;
const int PlanningDebug::kDecisionFieldNumber;
const int PlanningDebug::kPredictionFieldNumber;
const int PlanningDebug::kLocposeFieldNumber;
const int PlanningDebug::kPerceptionFieldNumber;
const int PlanningDebug::kTimeCostMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningDebug::PlanningDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsPlanningDebug();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.PlanningDebug)
}
PlanningDebug::PlanningDebug(const PlanningDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      perception_(from.perception_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_header()) {
    header_ = new ::common_msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_main_stream_msg()) {
    main_stream_msg_ = new ::planning_debug_msgs::DebugState(*from.main_stream_msg_);
  } else {
    main_stream_msg_ = NULL;
  }
  if (from.has_task_fsm_condition()) {
    task_fsm_condition_ = new ::planning_debug_msgs::DebugState(*from.task_fsm_condition_);
  } else {
    task_fsm_condition_ = NULL;
  }
  if (from.has_task_fsm_state()) {
    task_fsm_state_ = new ::planning_debug_msgs::DebugState(*from.task_fsm_state_);
  } else {
    task_fsm_state_ = NULL;
  }
  if (from.has_cognition_msg()) {
    cognition_msg_ = new ::planning_debug_msgs::DebugState(*from.cognition_msg_);
  } else {
    cognition_msg_ = NULL;
  }
  if (from.has_business_msg()) {
    business_msg_ = new ::planning_debug_msgs::DebugState(*from.business_msg_);
  } else {
    business_msg_ = NULL;
  }
  if (from.has_behavior_fsm_condition()) {
    behavior_fsm_condition_ = new ::planning_debug_msgs::DebugState(*from.behavior_fsm_condition_);
  } else {
    behavior_fsm_condition_ = NULL;
  }
  if (from.has_behavior_fsm_state()) {
    behavior_fsm_state_ = new ::planning_debug_msgs::DebugState(*from.behavior_fsm_state_);
  } else {
    behavior_fsm_state_ = NULL;
  }
  if (from.has_pathplan_msg()) {
    pathplan_msg_ = new ::planning_debug_msgs::DebugState(*from.pathplan_msg_);
  } else {
    pathplan_msg_ = NULL;
  }
  if (from.has_thread_state()) {
    thread_state_ = new ::planning_debug_msgs::DebugState(*from.thread_state_);
  } else {
    thread_state_ = NULL;
  }
  if (from.has_motionplan()) {
    motionplan_ = new ::planning_debug_msgs::DebugMotionPlan(*from.motionplan_);
  } else {
    motionplan_ = NULL;
  }
  if (from.has_cognition()) {
    cognition_ = new ::planning_debug_msgs::DebugCognition(*from.cognition_);
  } else {
    cognition_ = NULL;
  }
  if (from.has_decision()) {
    decision_ = new ::planning_debug_msgs::DebugDecision(*from.decision_);
  } else {
    decision_ = NULL;
  }
  if (from.has_prediction()) {
    prediction_ = new ::planning_debug_msgs::DebugPrediction(*from.prediction_);
  } else {
    prediction_ = NULL;
  }
  if (from.has_locpose()) {
    locpose_ = new ::planning_debug_msgs::DebugImu(*from.locpose_);
  } else {
    locpose_ = NULL;
  }
  time_cost_ms_ = from.time_cost_ms_;
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.PlanningDebug)
}

void PlanningDebug::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_cost_ms_) -
      reinterpret_cast<char*>(&header_)) + sizeof(time_cost_ms_));
  _cached_size_ = 0;
}

PlanningDebug::~PlanningDebug() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.PlanningDebug)
  SharedDtor();
}

void PlanningDebug::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete main_stream_msg_;
  if (this != internal_default_instance()) delete task_fsm_condition_;
  if (this != internal_default_instance()) delete task_fsm_state_;
  if (this != internal_default_instance()) delete cognition_msg_;
  if (this != internal_default_instance()) delete business_msg_;
  if (this != internal_default_instance()) delete behavior_fsm_condition_;
  if (this != internal_default_instance()) delete behavior_fsm_state_;
  if (this != internal_default_instance()) delete pathplan_msg_;
  if (this != internal_default_instance()) delete thread_state_;
  if (this != internal_default_instance()) delete motionplan_;
  if (this != internal_default_instance()) delete cognition_;
  if (this != internal_default_instance()) delete decision_;
  if (this != internal_default_instance()) delete prediction_;
  if (this != internal_default_instance()) delete locpose_;
}

void PlanningDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanningDebug::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanningDebug& PlanningDebug::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsPlanningDebug();
  return *internal_default_instance();
}

PlanningDebug* PlanningDebug::New(::google::protobuf::Arena* arena) const {
  PlanningDebug* n = new PlanningDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanningDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.PlanningDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perception_.Clear();
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && main_stream_msg_ != NULL) {
    delete main_stream_msg_;
  }
  main_stream_msg_ = NULL;
  if (GetArenaNoVirtual() == NULL && task_fsm_condition_ != NULL) {
    delete task_fsm_condition_;
  }
  task_fsm_condition_ = NULL;
  if (GetArenaNoVirtual() == NULL && task_fsm_state_ != NULL) {
    delete task_fsm_state_;
  }
  task_fsm_state_ = NULL;
  if (GetArenaNoVirtual() == NULL && cognition_msg_ != NULL) {
    delete cognition_msg_;
  }
  cognition_msg_ = NULL;
  if (GetArenaNoVirtual() == NULL && business_msg_ != NULL) {
    delete business_msg_;
  }
  business_msg_ = NULL;
  if (GetArenaNoVirtual() == NULL && behavior_fsm_condition_ != NULL) {
    delete behavior_fsm_condition_;
  }
  behavior_fsm_condition_ = NULL;
  if (GetArenaNoVirtual() == NULL && behavior_fsm_state_ != NULL) {
    delete behavior_fsm_state_;
  }
  behavior_fsm_state_ = NULL;
  if (GetArenaNoVirtual() == NULL && pathplan_msg_ != NULL) {
    delete pathplan_msg_;
  }
  pathplan_msg_ = NULL;
  if (GetArenaNoVirtual() == NULL && thread_state_ != NULL) {
    delete thread_state_;
  }
  thread_state_ = NULL;
  if (GetArenaNoVirtual() == NULL && motionplan_ != NULL) {
    delete motionplan_;
  }
  motionplan_ = NULL;
  if (GetArenaNoVirtual() == NULL && cognition_ != NULL) {
    delete cognition_;
  }
  cognition_ = NULL;
  if (GetArenaNoVirtual() == NULL && decision_ != NULL) {
    delete decision_;
  }
  decision_ = NULL;
  if (GetArenaNoVirtual() == NULL && prediction_ != NULL) {
    delete prediction_;
  }
  prediction_ = NULL;
  if (GetArenaNoVirtual() == NULL && locpose_ != NULL) {
    delete locpose_;
  }
  locpose_ = NULL;
  time_cost_ms_ = 0;
  _internal_metadata_.Clear();
}

bool PlanningDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.PlanningDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common_msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.PlanningDebug.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_debug_msgs.DebugState main_stream_msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_main_stream_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_debug_msgs.DebugState task_fsm_condition = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task_fsm_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_debug_msgs.DebugState task_fsm_state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task_fsm_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_debug_msgs.DebugState cognition_msg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cognition_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_debug_msgs.DebugState business_msg = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_business_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_debug_msgs.DebugState behavior_fsm_condition = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_behavior_fsm_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_debug_msgs.DebugState behavior_fsm_state = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_behavior_fsm_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_debug_msgs.DebugState pathplan_msg = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pathplan_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_debug_msgs.DebugState thread_state = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_thread_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_debug_msgs.DebugMotionPlan motionplan = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_motionplan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_debug_msgs.DebugCognition cognition = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cognition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_debug_msgs.DebugDecision decision = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_decision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_debug_msgs.DebugPrediction prediction = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prediction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .planning_debug_msgs.DebugImu locpose = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_locpose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Object perception = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_perception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time_cost_ms = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_cost_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.PlanningDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.PlanningDebug)
  return false;
#undef DO_
}

void PlanningDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.PlanningDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.PlanningDebug.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // .planning_debug_msgs.DebugState main_stream_msg = 3;
  if (this->has_main_stream_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->main_stream_msg_, output);
  }

  // .planning_debug_msgs.DebugState task_fsm_condition = 4;
  if (this->has_task_fsm_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->task_fsm_condition_, output);
  }

  // .planning_debug_msgs.DebugState task_fsm_state = 5;
  if (this->has_task_fsm_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->task_fsm_state_, output);
  }

  // .planning_debug_msgs.DebugState cognition_msg = 6;
  if (this->has_cognition_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->cognition_msg_, output);
  }

  // .planning_debug_msgs.DebugState business_msg = 7;
  if (this->has_business_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->business_msg_, output);
  }

  // .planning_debug_msgs.DebugState behavior_fsm_condition = 8;
  if (this->has_behavior_fsm_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->behavior_fsm_condition_, output);
  }

  // .planning_debug_msgs.DebugState behavior_fsm_state = 9;
  if (this->has_behavior_fsm_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->behavior_fsm_state_, output);
  }

  // .planning_debug_msgs.DebugState pathplan_msg = 10;
  if (this->has_pathplan_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->pathplan_msg_, output);
  }

  // .planning_debug_msgs.DebugState thread_state = 11;
  if (this->has_thread_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->thread_state_, output);
  }

  // .planning_debug_msgs.DebugMotionPlan motionplan = 12;
  if (this->has_motionplan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->motionplan_, output);
  }

  // .planning_debug_msgs.DebugCognition cognition = 13;
  if (this->has_cognition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->cognition_, output);
  }

  // .planning_debug_msgs.DebugDecision decision = 14;
  if (this->has_decision()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->decision_, output);
  }

  // .planning_debug_msgs.DebugPrediction prediction = 15;
  if (this->has_prediction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->prediction_, output);
  }

  // .planning_debug_msgs.DebugImu locpose = 16;
  if (this->has_locpose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->locpose_, output);
  }

  // repeated .Object perception = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perception_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->perception(static_cast<int>(i)), output);
  }

  // float time_cost_ms = 18;
  if (this->time_cost_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->time_cost_ms(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.PlanningDebug)
}

::google::protobuf::uint8* PlanningDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.PlanningDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.PlanningDebug.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // .planning_debug_msgs.DebugState main_stream_msg = 3;
  if (this->has_main_stream_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->main_stream_msg_, deterministic, target);
  }

  // .planning_debug_msgs.DebugState task_fsm_condition = 4;
  if (this->has_task_fsm_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->task_fsm_condition_, deterministic, target);
  }

  // .planning_debug_msgs.DebugState task_fsm_state = 5;
  if (this->has_task_fsm_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->task_fsm_state_, deterministic, target);
  }

  // .planning_debug_msgs.DebugState cognition_msg = 6;
  if (this->has_cognition_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->cognition_msg_, deterministic, target);
  }

  // .planning_debug_msgs.DebugState business_msg = 7;
  if (this->has_business_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->business_msg_, deterministic, target);
  }

  // .planning_debug_msgs.DebugState behavior_fsm_condition = 8;
  if (this->has_behavior_fsm_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->behavior_fsm_condition_, deterministic, target);
  }

  // .planning_debug_msgs.DebugState behavior_fsm_state = 9;
  if (this->has_behavior_fsm_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->behavior_fsm_state_, deterministic, target);
  }

  // .planning_debug_msgs.DebugState pathplan_msg = 10;
  if (this->has_pathplan_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->pathplan_msg_, deterministic, target);
  }

  // .planning_debug_msgs.DebugState thread_state = 11;
  if (this->has_thread_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->thread_state_, deterministic, target);
  }

  // .planning_debug_msgs.DebugMotionPlan motionplan = 12;
  if (this->has_motionplan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *this->motionplan_, deterministic, target);
  }

  // .planning_debug_msgs.DebugCognition cognition = 13;
  if (this->has_cognition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, *this->cognition_, deterministic, target);
  }

  // .planning_debug_msgs.DebugDecision decision = 14;
  if (this->has_decision()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, *this->decision_, deterministic, target);
  }

  // .planning_debug_msgs.DebugPrediction prediction = 15;
  if (this->has_prediction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, *this->prediction_, deterministic, target);
  }

  // .planning_debug_msgs.DebugImu locpose = 16;
  if (this->has_locpose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, *this->locpose_, deterministic, target);
  }

  // repeated .Object perception = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perception_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->perception(static_cast<int>(i)), deterministic, target);
  }

  // float time_cost_ms = 18;
  if (this->time_cost_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->time_cost_ms(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.PlanningDebug)
  return target;
}

size_t PlanningDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.PlanningDebug)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Object perception = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->perception_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->perception(static_cast<int>(i)));
    }
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // .common_msgs.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .planning_debug_msgs.DebugState main_stream_msg = 3;
  if (this->has_main_stream_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->main_stream_msg_);
  }

  // .planning_debug_msgs.DebugState task_fsm_condition = 4;
  if (this->has_task_fsm_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->task_fsm_condition_);
  }

  // .planning_debug_msgs.DebugState task_fsm_state = 5;
  if (this->has_task_fsm_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->task_fsm_state_);
  }

  // .planning_debug_msgs.DebugState cognition_msg = 6;
  if (this->has_cognition_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cognition_msg_);
  }

  // .planning_debug_msgs.DebugState business_msg = 7;
  if (this->has_business_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->business_msg_);
  }

  // .planning_debug_msgs.DebugState behavior_fsm_condition = 8;
  if (this->has_behavior_fsm_condition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->behavior_fsm_condition_);
  }

  // .planning_debug_msgs.DebugState behavior_fsm_state = 9;
  if (this->has_behavior_fsm_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->behavior_fsm_state_);
  }

  // .planning_debug_msgs.DebugState pathplan_msg = 10;
  if (this->has_pathplan_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pathplan_msg_);
  }

  // .planning_debug_msgs.DebugState thread_state = 11;
  if (this->has_thread_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->thread_state_);
  }

  // .planning_debug_msgs.DebugMotionPlan motionplan = 12;
  if (this->has_motionplan()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->motionplan_);
  }

  // .planning_debug_msgs.DebugCognition cognition = 13;
  if (this->has_cognition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cognition_);
  }

  // .planning_debug_msgs.DebugDecision decision = 14;
  if (this->has_decision()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->decision_);
  }

  // .planning_debug_msgs.DebugPrediction prediction = 15;
  if (this->has_prediction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->prediction_);
  }

  // .planning_debug_msgs.DebugImu locpose = 16;
  if (this->has_locpose()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->locpose_);
  }

  // float time_cost_ms = 18;
  if (this->time_cost_ms() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanningDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.PlanningDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.PlanningDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.PlanningDebug)
    MergeFrom(*source);
  }
}

void PlanningDebug::MergeFrom(const PlanningDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.PlanningDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perception_.MergeFrom(from.perception_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_header()) {
    mutable_header()->::common_msgs::Header::MergeFrom(from.header());
  }
  if (from.has_main_stream_msg()) {
    mutable_main_stream_msg()->::planning_debug_msgs::DebugState::MergeFrom(from.main_stream_msg());
  }
  if (from.has_task_fsm_condition()) {
    mutable_task_fsm_condition()->::planning_debug_msgs::DebugState::MergeFrom(from.task_fsm_condition());
  }
  if (from.has_task_fsm_state()) {
    mutable_task_fsm_state()->::planning_debug_msgs::DebugState::MergeFrom(from.task_fsm_state());
  }
  if (from.has_cognition_msg()) {
    mutable_cognition_msg()->::planning_debug_msgs::DebugState::MergeFrom(from.cognition_msg());
  }
  if (from.has_business_msg()) {
    mutable_business_msg()->::planning_debug_msgs::DebugState::MergeFrom(from.business_msg());
  }
  if (from.has_behavior_fsm_condition()) {
    mutable_behavior_fsm_condition()->::planning_debug_msgs::DebugState::MergeFrom(from.behavior_fsm_condition());
  }
  if (from.has_behavior_fsm_state()) {
    mutable_behavior_fsm_state()->::planning_debug_msgs::DebugState::MergeFrom(from.behavior_fsm_state());
  }
  if (from.has_pathplan_msg()) {
    mutable_pathplan_msg()->::planning_debug_msgs::DebugState::MergeFrom(from.pathplan_msg());
  }
  if (from.has_thread_state()) {
    mutable_thread_state()->::planning_debug_msgs::DebugState::MergeFrom(from.thread_state());
  }
  if (from.has_motionplan()) {
    mutable_motionplan()->::planning_debug_msgs::DebugMotionPlan::MergeFrom(from.motionplan());
  }
  if (from.has_cognition()) {
    mutable_cognition()->::planning_debug_msgs::DebugCognition::MergeFrom(from.cognition());
  }
  if (from.has_decision()) {
    mutable_decision()->::planning_debug_msgs::DebugDecision::MergeFrom(from.decision());
  }
  if (from.has_prediction()) {
    mutable_prediction()->::planning_debug_msgs::DebugPrediction::MergeFrom(from.prediction());
  }
  if (from.has_locpose()) {
    mutable_locpose()->::planning_debug_msgs::DebugImu::MergeFrom(from.locpose());
  }
  if (from.time_cost_ms() != 0) {
    set_time_cost_ms(from.time_cost_ms());
  }
}

void PlanningDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.PlanningDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningDebug::CopyFrom(const PlanningDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.PlanningDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningDebug::IsInitialized() const {
  return true;
}

void PlanningDebug::Swap(PlanningDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningDebug::InternalSwap(PlanningDebug* other) {
  using std::swap;
  perception_.InternalSwap(&other->perception_);
  version_.Swap(&other->version_);
  swap(header_, other->header_);
  swap(main_stream_msg_, other->main_stream_msg_);
  swap(task_fsm_condition_, other->task_fsm_condition_);
  swap(task_fsm_state_, other->task_fsm_state_);
  swap(cognition_msg_, other->cognition_msg_);
  swap(business_msg_, other->business_msg_);
  swap(behavior_fsm_condition_, other->behavior_fsm_condition_);
  swap(behavior_fsm_state_, other->behavior_fsm_state_);
  swap(pathplan_msg_, other->pathplan_msg_);
  swap(thread_state_, other->thread_state_);
  swap(motionplan_, other->motionplan_);
  swap(cognition_, other->cognition_);
  swap(decision_, other->decision_);
  swap(prediction_, other->prediction_);
  swap(locpose_, other->locpose_);
  swap(time_cost_ms_, other->time_cost_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanningDebug::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugBusiness::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugBusiness::kDisToMissionPointFieldNumber;
const int DebugBusiness::kCarVelocityFieldNumber;
const int DebugBusiness::kProcessStatusFieldNumber;
const int DebugBusiness::kIsCurrentLineNullFieldNumber;
const int DebugBusiness::kBusinessExucuteOverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugBusiness::DebugBusiness()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugBusiness();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.DebugBusiness)
}
DebugBusiness::DebugBusiness(const DebugBusiness& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dis_to_mission_point_, &from.dis_to_mission_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&business_exucute_over_) -
    reinterpret_cast<char*>(&dis_to_mission_point_)) + sizeof(business_exucute_over_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.DebugBusiness)
}

void DebugBusiness::SharedCtor() {
  ::memset(&dis_to_mission_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&business_exucute_over_) -
      reinterpret_cast<char*>(&dis_to_mission_point_)) + sizeof(business_exucute_over_));
  _cached_size_ = 0;
}

DebugBusiness::~DebugBusiness() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.DebugBusiness)
  SharedDtor();
}

void DebugBusiness::SharedDtor() {
}

void DebugBusiness::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugBusiness::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugBusiness& DebugBusiness::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugBusiness();
  return *internal_default_instance();
}

DebugBusiness* DebugBusiness::New(::google::protobuf::Arena* arena) const {
  DebugBusiness* n = new DebugBusiness;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugBusiness::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.DebugBusiness)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dis_to_mission_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&business_exucute_over_) -
      reinterpret_cast<char*>(&dis_to_mission_point_)) + sizeof(business_exucute_over_));
  _internal_metadata_.Clear();
}

bool DebugBusiness::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.DebugBusiness)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float dis_to_mission_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dis_to_mission_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float car_velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &car_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 process_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_current_line_null = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_current_line_null_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 business_exucute_over = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &business_exucute_over_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.DebugBusiness)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.DebugBusiness)
  return false;
#undef DO_
}

void DebugBusiness::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.DebugBusiness)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float dis_to_mission_point = 1;
  if (this->dis_to_mission_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->dis_to_mission_point(), output);
  }

  // float car_velocity = 2;
  if (this->car_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->car_velocity(), output);
  }

  // int32 process_status = 3;
  if (this->process_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->process_status(), output);
  }

  // int32 is_current_line_null = 4;
  if (this->is_current_line_null() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_current_line_null(), output);
  }

  // int32 business_exucute_over = 5;
  if (this->business_exucute_over() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->business_exucute_over(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.DebugBusiness)
}

::google::protobuf::uint8* DebugBusiness::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.DebugBusiness)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float dis_to_mission_point = 1;
  if (this->dis_to_mission_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->dis_to_mission_point(), target);
  }

  // float car_velocity = 2;
  if (this->car_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->car_velocity(), target);
  }

  // int32 process_status = 3;
  if (this->process_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->process_status(), target);
  }

  // int32 is_current_line_null = 4;
  if (this->is_current_line_null() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_current_line_null(), target);
  }

  // int32 business_exucute_over = 5;
  if (this->business_exucute_over() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->business_exucute_over(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.DebugBusiness)
  return target;
}

size_t DebugBusiness::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.DebugBusiness)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float dis_to_mission_point = 1;
  if (this->dis_to_mission_point() != 0) {
    total_size += 1 + 4;
  }

  // float car_velocity = 2;
  if (this->car_velocity() != 0) {
    total_size += 1 + 4;
  }

  // int32 process_status = 3;
  if (this->process_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->process_status());
  }

  // int32 is_current_line_null = 4;
  if (this->is_current_line_null() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_current_line_null());
  }

  // int32 business_exucute_over = 5;
  if (this->business_exucute_over() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->business_exucute_over());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugBusiness::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.DebugBusiness)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugBusiness* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugBusiness>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.DebugBusiness)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.DebugBusiness)
    MergeFrom(*source);
  }
}

void DebugBusiness::MergeFrom(const DebugBusiness& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.DebugBusiness)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dis_to_mission_point() != 0) {
    set_dis_to_mission_point(from.dis_to_mission_point());
  }
  if (from.car_velocity() != 0) {
    set_car_velocity(from.car_velocity());
  }
  if (from.process_status() != 0) {
    set_process_status(from.process_status());
  }
  if (from.is_current_line_null() != 0) {
    set_is_current_line_null(from.is_current_line_null());
  }
  if (from.business_exucute_over() != 0) {
    set_business_exucute_over(from.business_exucute_over());
  }
}

void DebugBusiness::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.DebugBusiness)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugBusiness::CopyFrom(const DebugBusiness& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.DebugBusiness)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugBusiness::IsInitialized() const {
  return true;
}

void DebugBusiness::Swap(DebugBusiness* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugBusiness::InternalSwap(DebugBusiness* other) {
  using std::swap;
  swap(dis_to_mission_point_, other->dis_to_mission_point_);
  swap(car_velocity_, other->car_velocity_);
  swap(process_status_, other->process_status_);
  swap(is_current_line_null_, other->is_current_line_null_);
  swap(business_exucute_over_, other->business_exucute_over_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugBusiness::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugSTPoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugSTPoint::kPFieldNumber;
const int DebugSTPoint::kSFieldNumber;
const int DebugSTPoint::kTFieldNumber;
const int DebugSTPoint::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugSTPoint::DebugSTPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugSTPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.DebugSTPoint)
}
DebugSTPoint::DebugSTPoint(const DebugSTPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      id_(from.id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&p_, &from.p_,
    static_cast<size_t>(reinterpret_cast<char*>(&t_) -
    reinterpret_cast<char*>(&p_)) + sizeof(t_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.DebugSTPoint)
}

void DebugSTPoint::SharedCtor() {
  ::memset(&p_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&p_)) + sizeof(t_));
  _cached_size_ = 0;
}

DebugSTPoint::~DebugSTPoint() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.DebugSTPoint)
  SharedDtor();
}

void DebugSTPoint::SharedDtor() {
}

void DebugSTPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugSTPoint::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugSTPoint& DebugSTPoint::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugSTPoint();
  return *internal_default_instance();
}

DebugSTPoint* DebugSTPoint::New(::google::protobuf::Arena* arena) const {
  DebugSTPoint* n = new DebugSTPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugSTPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.DebugSTPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.Clear();
  ::memset(&p_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&p_)) + sizeof(t_));
  _internal_metadata_.Clear();
}

bool DebugSTPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.DebugSTPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float p = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float t = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.DebugSTPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.DebugSTPoint)
  return false;
#undef DO_
}

void DebugSTPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.DebugSTPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float p = 1;
  if (this->p() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->p(), output);
  }

  // float s = 2;
  if (this->s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->s(), output);
  }

  // float t = 3;
  if (this->t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->t(), output);
  }

  // repeated int32 id = 4;
  if (this->id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _id_cached_byte_size_));
  }
  for (int i = 0, n = this->id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->id(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.DebugSTPoint)
}

::google::protobuf::uint8* DebugSTPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.DebugSTPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float p = 1;
  if (this->p() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->p(), target);
  }

  // float s = 2;
  if (this->s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->s(), target);
  }

  // float t = 3;
  if (this->t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->t(), target);
  }

  // repeated int32 id = 4;
  if (this->id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->id_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.DebugSTPoint)
  return target;
}

size_t DebugSTPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.DebugSTPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 id = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // float p = 1;
  if (this->p() != 0) {
    total_size += 1 + 4;
  }

  // float s = 2;
  if (this->s() != 0) {
    total_size += 1 + 4;
  }

  // float t = 3;
  if (this->t() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugSTPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.DebugSTPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugSTPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugSTPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.DebugSTPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.DebugSTPoint)
    MergeFrom(*source);
  }
}

void DebugSTPoint::MergeFrom(const DebugSTPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.DebugSTPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_.MergeFrom(from.id_);
  if (from.p() != 0) {
    set_p(from.p());
  }
  if (from.s() != 0) {
    set_s(from.s());
  }
  if (from.t() != 0) {
    set_t(from.t());
  }
}

void DebugSTPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.DebugSTPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugSTPoint::CopyFrom(const DebugSTPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.DebugSTPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugSTPoint::IsInitialized() const {
  return true;
}

void DebugSTPoint::Swap(DebugSTPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugSTPoint::InternalSwap(DebugSTPoint* other) {
  using std::swap;
  id_.InternalSwap(&other->id_);
  swap(p_, other->p_);
  swap(s_, other->s_);
  swap(t_, other->t_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugSTPoint::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Debugstmap::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debugstmap::kStPointsFieldNumber;
const int Debugstmap::kDecisionStPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debugstmap::Debugstmap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugstmap();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.Debugstmap)
}
Debugstmap::Debugstmap(const Debugstmap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      st_points_(from.st_points_),
      decision_st_points_(from.decision_st_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.Debugstmap)
}

void Debugstmap::SharedCtor() {
  _cached_size_ = 0;
}

Debugstmap::~Debugstmap() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.Debugstmap)
  SharedDtor();
}

void Debugstmap::SharedDtor() {
}

void Debugstmap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debugstmap::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Debugstmap& Debugstmap::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugstmap();
  return *internal_default_instance();
}

Debugstmap* Debugstmap::New(::google::protobuf::Arena* arena) const {
  Debugstmap* n = new Debugstmap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debugstmap::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.Debugstmap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  st_points_.Clear();
  decision_st_points_.Clear();
  _internal_metadata_.Clear();
}

bool Debugstmap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.Debugstmap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .planning_debug_msgs.DebugSTPoint st_points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_st_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.DebugSTPoint decision_st_points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_decision_st_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.Debugstmap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.Debugstmap)
  return false;
#undef DO_
}

void Debugstmap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.Debugstmap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .planning_debug_msgs.DebugSTPoint st_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->st_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->st_points(static_cast<int>(i)), output);
  }

  // repeated .planning_debug_msgs.DebugSTPoint decision_st_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->decision_st_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->decision_st_points(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.Debugstmap)
}

::google::protobuf::uint8* Debugstmap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.Debugstmap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .planning_debug_msgs.DebugSTPoint st_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->st_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->st_points(static_cast<int>(i)), deterministic, target);
  }

  // repeated .planning_debug_msgs.DebugSTPoint decision_st_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->decision_st_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->decision_st_points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.Debugstmap)
  return target;
}

size_t Debugstmap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.Debugstmap)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .planning_debug_msgs.DebugSTPoint st_points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->st_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->st_points(static_cast<int>(i)));
    }
  }

  // repeated .planning_debug_msgs.DebugSTPoint decision_st_points = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->decision_st_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->decision_st_points(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debugstmap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.Debugstmap)
  GOOGLE_DCHECK_NE(&from, this);
  const Debugstmap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debugstmap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.Debugstmap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.Debugstmap)
    MergeFrom(*source);
  }
}

void Debugstmap::MergeFrom(const Debugstmap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.Debugstmap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  st_points_.MergeFrom(from.st_points_);
  decision_st_points_.MergeFrom(from.decision_st_points_);
}

void Debugstmap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.Debugstmap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debugstmap::CopyFrom(const Debugstmap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.Debugstmap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debugstmap::IsInitialized() const {
  return true;
}

void Debugstmap::Swap(Debugstmap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debugstmap::InternalSwap(Debugstmap* other) {
  using std::swap;
  st_points_.InternalSwap(&other->st_points_);
  decision_st_points_.InternalSwap(&other->decision_st_points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debugstmap::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugObjectByLine::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugObjectByLine::kObjectDebugFieldNumber;
const int DebugObjectByLine::kObjectDecisionFieldNumber;
const int DebugObjectByLine::kMaxPFieldNumber;
const int DebugObjectByLine::kLimitVFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugObjectByLine::DebugObjectByLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugObjectByLine();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.DebugObjectByLine)
}
DebugObjectByLine::DebugObjectByLine(const DebugObjectByLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      object_debug_(from.object_debug_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&object_decision_, &from.object_decision_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_v_) -
    reinterpret_cast<char*>(&object_decision_)) + sizeof(limit_v_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.DebugObjectByLine)
}

void DebugObjectByLine::SharedCtor() {
  ::memset(&object_decision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_v_) -
      reinterpret_cast<char*>(&object_decision_)) + sizeof(limit_v_));
  _cached_size_ = 0;
}

DebugObjectByLine::~DebugObjectByLine() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.DebugObjectByLine)
  SharedDtor();
}

void DebugObjectByLine::SharedDtor() {
}

void DebugObjectByLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugObjectByLine::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugObjectByLine& DebugObjectByLine::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugObjectByLine();
  return *internal_default_instance();
}

DebugObjectByLine* DebugObjectByLine::New(::google::protobuf::Arena* arena) const {
  DebugObjectByLine* n = new DebugObjectByLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugObjectByLine::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.DebugObjectByLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_debug_.Clear();
  ::memset(&object_decision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_v_) -
      reinterpret_cast<char*>(&object_decision_)) + sizeof(limit_v_));
  _internal_metadata_.Clear();
}

bool DebugObjectByLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.DebugObjectByLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .planning_debug_msgs.DebugObject object_debug = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_object_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 object_decision = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &object_decision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_p = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_p_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float limit_v = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &limit_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.DebugObjectByLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.DebugObjectByLine)
  return false;
#undef DO_
}

void DebugObjectByLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.DebugObjectByLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .planning_debug_msgs.DebugObject object_debug = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_debug_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object_debug(static_cast<int>(i)), output);
  }

  // int32 object_decision = 2;
  if (this->object_decision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->object_decision(), output);
  }

  // float max_p = 3;
  if (this->max_p() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_p(), output);
  }

  // float limit_v = 4;
  if (this->limit_v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->limit_v(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.DebugObjectByLine)
}

::google::protobuf::uint8* DebugObjectByLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.DebugObjectByLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .planning_debug_msgs.DebugObject object_debug = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_debug_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->object_debug(static_cast<int>(i)), deterministic, target);
  }

  // int32 object_decision = 2;
  if (this->object_decision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->object_decision(), target);
  }

  // float max_p = 3;
  if (this->max_p() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_p(), target);
  }

  // float limit_v = 4;
  if (this->limit_v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->limit_v(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.DebugObjectByLine)
  return target;
}

size_t DebugObjectByLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.DebugObjectByLine)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .planning_debug_msgs.DebugObject object_debug = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->object_debug_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object_debug(static_cast<int>(i)));
    }
  }

  // int32 object_decision = 2;
  if (this->object_decision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->object_decision());
  }

  // float max_p = 3;
  if (this->max_p() != 0) {
    total_size += 1 + 4;
  }

  // float limit_v = 4;
  if (this->limit_v() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugObjectByLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.DebugObjectByLine)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugObjectByLine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugObjectByLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.DebugObjectByLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.DebugObjectByLine)
    MergeFrom(*source);
  }
}

void DebugObjectByLine::MergeFrom(const DebugObjectByLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.DebugObjectByLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_debug_.MergeFrom(from.object_debug_);
  if (from.object_decision() != 0) {
    set_object_decision(from.object_decision());
  }
  if (from.max_p() != 0) {
    set_max_p(from.max_p());
  }
  if (from.limit_v() != 0) {
    set_limit_v(from.limit_v());
  }
}

void DebugObjectByLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.DebugObjectByLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugObjectByLine::CopyFrom(const DebugObjectByLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.DebugObjectByLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugObjectByLine::IsInitialized() const {
  return true;
}

void DebugObjectByLine::Swap(DebugObjectByLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugObjectByLine::InternalSwap(DebugObjectByLine* other) {
  using std::swap;
  object_debug_.InternalSwap(&other->object_debug_);
  swap(object_decision_, other->object_decision_);
  swap(max_p_, other->max_p_);
  swap(limit_v_, other->limit_v_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugObjectByLine::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LBounds::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LBounds::kRightBoundaryFieldNumber;
const int LBounds::kLeftBoundaryFieldNumber;
const int LBounds::kRightBoundaryXgFieldNumber;
const int LBounds::kRightBoundaryYgFieldNumber;
const int LBounds::kRightBoundaryGlobalangleFieldNumber;
const int LBounds::kRightBoundaryXFieldNumber;
const int LBounds::kRightBoundaryYFieldNumber;
const int LBounds::kRightBoundaryAngleFieldNumber;
const int LBounds::kLeftBoundaryXgFieldNumber;
const int LBounds::kLeftBoundaryYgFieldNumber;
const int LBounds::kLeftBoundaryGlobalangleFieldNumber;
const int LBounds::kLeftBoundaryXFieldNumber;
const int LBounds::kLeftBoundaryYFieldNumber;
const int LBounds::kLeftBoundaryAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LBounds::LBounds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsLBounds();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.LBounds)
}
LBounds::LBounds(const LBounds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&right_boundary_, &from.right_boundary_,
    static_cast<size_t>(reinterpret_cast<char*>(&left_boundary_angle_) -
    reinterpret_cast<char*>(&right_boundary_)) + sizeof(left_boundary_angle_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.LBounds)
}

void LBounds::SharedCtor() {
  ::memset(&right_boundary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_boundary_angle_) -
      reinterpret_cast<char*>(&right_boundary_)) + sizeof(left_boundary_angle_));
  _cached_size_ = 0;
}

LBounds::~LBounds() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.LBounds)
  SharedDtor();
}

void LBounds::SharedDtor() {
}

void LBounds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LBounds::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LBounds& LBounds::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsLBounds();
  return *internal_default_instance();
}

LBounds* LBounds::New(::google::protobuf::Arena* arena) const {
  LBounds* n = new LBounds;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LBounds::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.LBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&right_boundary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_boundary_angle_) -
      reinterpret_cast<char*>(&right_boundary_)) + sizeof(left_boundary_angle_));
  _internal_metadata_.Clear();
}

bool LBounds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.LBounds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double right_boundary = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_boundary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double left_boundary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_boundary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double right_boundary_xg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_boundary_xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double right_boundary_yg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_boundary_yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double right_boundary_globalangle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_boundary_globalangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double right_boundary_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_boundary_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double right_boundary_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_boundary_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double right_boundary_angle = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_boundary_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double left_boundary_xg = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_boundary_xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double left_boundary_yg = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_boundary_yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double left_boundary_globalangle = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_boundary_globalangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double left_boundary_x = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_boundary_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double left_boundary_y = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_boundary_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double left_boundary_angle = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_boundary_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.LBounds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.LBounds)
  return false;
#undef DO_
}

void LBounds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.LBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double right_boundary = 1;
  if (this->right_boundary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->right_boundary(), output);
  }

  // double left_boundary = 2;
  if (this->left_boundary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->left_boundary(), output);
  }

  // double right_boundary_xg = 3;
  if (this->right_boundary_xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->right_boundary_xg(), output);
  }

  // double right_boundary_yg = 4;
  if (this->right_boundary_yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->right_boundary_yg(), output);
  }

  // double right_boundary_globalangle = 5;
  if (this->right_boundary_globalangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->right_boundary_globalangle(), output);
  }

  // double right_boundary_x = 6;
  if (this->right_boundary_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->right_boundary_x(), output);
  }

  // double right_boundary_y = 7;
  if (this->right_boundary_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->right_boundary_y(), output);
  }

  // double right_boundary_angle = 8;
  if (this->right_boundary_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->right_boundary_angle(), output);
  }

  // double left_boundary_xg = 9;
  if (this->left_boundary_xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->left_boundary_xg(), output);
  }

  // double left_boundary_yg = 10;
  if (this->left_boundary_yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->left_boundary_yg(), output);
  }

  // double left_boundary_globalangle = 11;
  if (this->left_boundary_globalangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->left_boundary_globalangle(), output);
  }

  // double left_boundary_x = 12;
  if (this->left_boundary_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->left_boundary_x(), output);
  }

  // double left_boundary_y = 13;
  if (this->left_boundary_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->left_boundary_y(), output);
  }

  // double left_boundary_angle = 14;
  if (this->left_boundary_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->left_boundary_angle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.LBounds)
}

::google::protobuf::uint8* LBounds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.LBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double right_boundary = 1;
  if (this->right_boundary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->right_boundary(), target);
  }

  // double left_boundary = 2;
  if (this->left_boundary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->left_boundary(), target);
  }

  // double right_boundary_xg = 3;
  if (this->right_boundary_xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->right_boundary_xg(), target);
  }

  // double right_boundary_yg = 4;
  if (this->right_boundary_yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->right_boundary_yg(), target);
  }

  // double right_boundary_globalangle = 5;
  if (this->right_boundary_globalangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->right_boundary_globalangle(), target);
  }

  // double right_boundary_x = 6;
  if (this->right_boundary_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->right_boundary_x(), target);
  }

  // double right_boundary_y = 7;
  if (this->right_boundary_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->right_boundary_y(), target);
  }

  // double right_boundary_angle = 8;
  if (this->right_boundary_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->right_boundary_angle(), target);
  }

  // double left_boundary_xg = 9;
  if (this->left_boundary_xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->left_boundary_xg(), target);
  }

  // double left_boundary_yg = 10;
  if (this->left_boundary_yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->left_boundary_yg(), target);
  }

  // double left_boundary_globalangle = 11;
  if (this->left_boundary_globalangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->left_boundary_globalangle(), target);
  }

  // double left_boundary_x = 12;
  if (this->left_boundary_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->left_boundary_x(), target);
  }

  // double left_boundary_y = 13;
  if (this->left_boundary_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->left_boundary_y(), target);
  }

  // double left_boundary_angle = 14;
  if (this->left_boundary_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->left_boundary_angle(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.LBounds)
  return target;
}

size_t LBounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.LBounds)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double right_boundary = 1;
  if (this->right_boundary() != 0) {
    total_size += 1 + 8;
  }

  // double left_boundary = 2;
  if (this->left_boundary() != 0) {
    total_size += 1 + 8;
  }

  // double right_boundary_xg = 3;
  if (this->right_boundary_xg() != 0) {
    total_size += 1 + 8;
  }

  // double right_boundary_yg = 4;
  if (this->right_boundary_yg() != 0) {
    total_size += 1 + 8;
  }

  // double right_boundary_globalangle = 5;
  if (this->right_boundary_globalangle() != 0) {
    total_size += 1 + 8;
  }

  // double right_boundary_x = 6;
  if (this->right_boundary_x() != 0) {
    total_size += 1 + 8;
  }

  // double right_boundary_y = 7;
  if (this->right_boundary_y() != 0) {
    total_size += 1 + 8;
  }

  // double right_boundary_angle = 8;
  if (this->right_boundary_angle() != 0) {
    total_size += 1 + 8;
  }

  // double left_boundary_xg = 9;
  if (this->left_boundary_xg() != 0) {
    total_size += 1 + 8;
  }

  // double left_boundary_yg = 10;
  if (this->left_boundary_yg() != 0) {
    total_size += 1 + 8;
  }

  // double left_boundary_globalangle = 11;
  if (this->left_boundary_globalangle() != 0) {
    total_size += 1 + 8;
  }

  // double left_boundary_x = 12;
  if (this->left_boundary_x() != 0) {
    total_size += 1 + 8;
  }

  // double left_boundary_y = 13;
  if (this->left_boundary_y() != 0) {
    total_size += 1 + 8;
  }

  // double left_boundary_angle = 14;
  if (this->left_boundary_angle() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LBounds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.LBounds)
  GOOGLE_DCHECK_NE(&from, this);
  const LBounds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LBounds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.LBounds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.LBounds)
    MergeFrom(*source);
  }
}

void LBounds::MergeFrom(const LBounds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.LBounds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.right_boundary() != 0) {
    set_right_boundary(from.right_boundary());
  }
  if (from.left_boundary() != 0) {
    set_left_boundary(from.left_boundary());
  }
  if (from.right_boundary_xg() != 0) {
    set_right_boundary_xg(from.right_boundary_xg());
  }
  if (from.right_boundary_yg() != 0) {
    set_right_boundary_yg(from.right_boundary_yg());
  }
  if (from.right_boundary_globalangle() != 0) {
    set_right_boundary_globalangle(from.right_boundary_globalangle());
  }
  if (from.right_boundary_x() != 0) {
    set_right_boundary_x(from.right_boundary_x());
  }
  if (from.right_boundary_y() != 0) {
    set_right_boundary_y(from.right_boundary_y());
  }
  if (from.right_boundary_angle() != 0) {
    set_right_boundary_angle(from.right_boundary_angle());
  }
  if (from.left_boundary_xg() != 0) {
    set_left_boundary_xg(from.left_boundary_xg());
  }
  if (from.left_boundary_yg() != 0) {
    set_left_boundary_yg(from.left_boundary_yg());
  }
  if (from.left_boundary_globalangle() != 0) {
    set_left_boundary_globalangle(from.left_boundary_globalangle());
  }
  if (from.left_boundary_x() != 0) {
    set_left_boundary_x(from.left_boundary_x());
  }
  if (from.left_boundary_y() != 0) {
    set_left_boundary_y(from.left_boundary_y());
  }
  if (from.left_boundary_angle() != 0) {
    set_left_boundary_angle(from.left_boundary_angle());
  }
}

void LBounds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.LBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LBounds::CopyFrom(const LBounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.LBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LBounds::IsInitialized() const {
  return true;
}

void LBounds::Swap(LBounds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LBounds::InternalSwap(LBounds* other) {
  using std::swap;
  swap(right_boundary_, other->right_boundary_);
  swap(left_boundary_, other->left_boundary_);
  swap(right_boundary_xg_, other->right_boundary_xg_);
  swap(right_boundary_yg_, other->right_boundary_yg_);
  swap(right_boundary_globalangle_, other->right_boundary_globalangle_);
  swap(right_boundary_x_, other->right_boundary_x_);
  swap(right_boundary_y_, other->right_boundary_y_);
  swap(right_boundary_angle_, other->right_boundary_angle_);
  swap(left_boundary_xg_, other->left_boundary_xg_);
  swap(left_boundary_yg_, other->left_boundary_yg_);
  swap(left_boundary_globalangle_, other->left_boundary_globalangle_);
  swap(left_boundary_x_, other->left_boundary_x_);
  swap(left_boundary_y_, other->left_boundary_y_);
  swap(left_boundary_angle_, other->left_boundary_angle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LBounds::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SoftBoundary::InitAsDefaultInstance() {
  ::planning_debug_msgs::_SoftBoundary_default_instance_._instance.get_mutable()->l_bounds_ = const_cast< ::planning_debug_msgs::LBounds*>(
      ::planning_debug_msgs::LBounds::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftBoundary::kLBoundsFieldNumber;
const int SoftBoundary::kProbabilityFieldNumber;
const int SoftBoundary::kObjOccupyDeltLFieldNumber;
const int SoftBoundary::kObjIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftBoundary::SoftBoundary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSoftBoundary();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.SoftBoundary)
}
SoftBoundary::SoftBoundary(const SoftBoundary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  obj_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.obj_id().size() > 0) {
    obj_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_id_);
  }
  if (from.has_l_bounds()) {
    l_bounds_ = new ::planning_debug_msgs::LBounds(*from.l_bounds_);
  } else {
    l_bounds_ = NULL;
  }
  ::memcpy(&probability_, &from.probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&obj_occupy_delt_l_) -
    reinterpret_cast<char*>(&probability_)) + sizeof(obj_occupy_delt_l_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.SoftBoundary)
}

void SoftBoundary::SharedCtor() {
  obj_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&l_bounds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obj_occupy_delt_l_) -
      reinterpret_cast<char*>(&l_bounds_)) + sizeof(obj_occupy_delt_l_));
  _cached_size_ = 0;
}

SoftBoundary::~SoftBoundary() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.SoftBoundary)
  SharedDtor();
}

void SoftBoundary::SharedDtor() {
  obj_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete l_bounds_;
}

void SoftBoundary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftBoundary::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SoftBoundary& SoftBoundary::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsSoftBoundary();
  return *internal_default_instance();
}

SoftBoundary* SoftBoundary::New(::google::protobuf::Arena* arena) const {
  SoftBoundary* n = new SoftBoundary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.SoftBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obj_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && l_bounds_ != NULL) {
    delete l_bounds_;
  }
  l_bounds_ = NULL;
  ::memset(&probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obj_occupy_delt_l_) -
      reinterpret_cast<char*>(&probability_)) + sizeof(obj_occupy_delt_l_));
  _internal_metadata_.Clear();
}

bool SoftBoundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.SoftBoundary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .planning_debug_msgs.LBounds l_bounds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_l_bounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double probability = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double obj_occupy_delt_l = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obj_occupy_delt_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string obj_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_obj_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->obj_id().data(), static_cast<int>(this->obj_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.SoftBoundary.obj_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.SoftBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.SoftBoundary)
  return false;
#undef DO_
}

void SoftBoundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.SoftBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .planning_debug_msgs.LBounds l_bounds = 1;
  if (this->has_l_bounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->l_bounds_, output);
  }

  // double probability = 2;
  if (this->probability() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->probability(), output);
  }

  // double obj_occupy_delt_l = 3;
  if (this->obj_occupy_delt_l() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->obj_occupy_delt_l(), output);
  }

  // string obj_id = 4;
  if (this->obj_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->obj_id().data(), static_cast<int>(this->obj_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.SoftBoundary.obj_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->obj_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.SoftBoundary)
}

::google::protobuf::uint8* SoftBoundary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.SoftBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .planning_debug_msgs.LBounds l_bounds = 1;
  if (this->has_l_bounds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->l_bounds_, deterministic, target);
  }

  // double probability = 2;
  if (this->probability() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->probability(), target);
  }

  // double obj_occupy_delt_l = 3;
  if (this->obj_occupy_delt_l() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->obj_occupy_delt_l(), target);
  }

  // string obj_id = 4;
  if (this->obj_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->obj_id().data(), static_cast<int>(this->obj_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.SoftBoundary.obj_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->obj_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.SoftBoundary)
  return target;
}

size_t SoftBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.SoftBoundary)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string obj_id = 4;
  if (this->obj_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->obj_id());
  }

  // .planning_debug_msgs.LBounds l_bounds = 1;
  if (this->has_l_bounds()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->l_bounds_);
  }

  // double probability = 2;
  if (this->probability() != 0) {
    total_size += 1 + 8;
  }

  // double obj_occupy_delt_l = 3;
  if (this->obj_occupy_delt_l() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftBoundary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.SoftBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftBoundary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftBoundary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.SoftBoundary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.SoftBoundary)
    MergeFrom(*source);
  }
}

void SoftBoundary::MergeFrom(const SoftBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.SoftBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.obj_id().size() > 0) {

    obj_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.obj_id_);
  }
  if (from.has_l_bounds()) {
    mutable_l_bounds()->::planning_debug_msgs::LBounds::MergeFrom(from.l_bounds());
  }
  if (from.probability() != 0) {
    set_probability(from.probability());
  }
  if (from.obj_occupy_delt_l() != 0) {
    set_obj_occupy_delt_l(from.obj_occupy_delt_l());
  }
}

void SoftBoundary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.SoftBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftBoundary::CopyFrom(const SoftBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.SoftBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftBoundary::IsInitialized() const {
  return true;
}

void SoftBoundary::Swap(SoftBoundary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftBoundary::InternalSwap(SoftBoundary* other) {
  using std::swap;
  obj_id_.Swap(&other->obj_id_);
  swap(l_bounds_, other->l_bounds_);
  swap(probability_, other->probability_);
  swap(obj_occupy_delt_l_, other->obj_occupy_delt_l_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftBoundary::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BoundaryType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundaryType::kRightBoundTypeFieldNumber;
const int BoundaryType::kLeftBoundTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundaryType::BoundaryType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsBoundaryType();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.BoundaryType)
}
BoundaryType::BoundaryType(const BoundaryType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&right_bound_type_, &from.right_bound_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&left_bound_type_) -
    reinterpret_cast<char*>(&right_bound_type_)) + sizeof(left_bound_type_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.BoundaryType)
}

void BoundaryType::SharedCtor() {
  ::memset(&right_bound_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_bound_type_) -
      reinterpret_cast<char*>(&right_bound_type_)) + sizeof(left_bound_type_));
  _cached_size_ = 0;
}

BoundaryType::~BoundaryType() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.BoundaryType)
  SharedDtor();
}

void BoundaryType::SharedDtor() {
}

void BoundaryType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundaryType::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BoundaryType& BoundaryType::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsBoundaryType();
  return *internal_default_instance();
}

BoundaryType* BoundaryType::New(::google::protobuf::Arena* arena) const {
  BoundaryType* n = new BoundaryType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoundaryType::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.BoundaryType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&right_bound_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_bound_type_) -
      reinterpret_cast<char*>(&right_bound_type_)) + sizeof(left_bound_type_));
  _internal_metadata_.Clear();
}

bool BoundaryType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.BoundaryType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 right_bound_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_bound_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left_bound_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_bound_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.BoundaryType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.BoundaryType)
  return false;
#undef DO_
}

void BoundaryType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.BoundaryType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 right_bound_type = 1;
  if (this->right_bound_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->right_bound_type(), output);
  }

  // int32 left_bound_type = 2;
  if (this->left_bound_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_bound_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.BoundaryType)
}

::google::protobuf::uint8* BoundaryType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.BoundaryType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 right_bound_type = 1;
  if (this->right_bound_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->right_bound_type(), target);
  }

  // int32 left_bound_type = 2;
  if (this->left_bound_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_bound_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.BoundaryType)
  return target;
}

size_t BoundaryType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.BoundaryType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 right_bound_type = 1;
  if (this->right_bound_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right_bound_type());
  }

  // int32 left_bound_type = 2;
  if (this->left_bound_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left_bound_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundaryType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.BoundaryType)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundaryType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoundaryType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.BoundaryType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.BoundaryType)
    MergeFrom(*source);
  }
}

void BoundaryType::MergeFrom(const BoundaryType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.BoundaryType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.right_bound_type() != 0) {
    set_right_bound_type(from.right_bound_type());
  }
  if (from.left_bound_type() != 0) {
    set_left_bound_type(from.left_bound_type());
  }
}

void BoundaryType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.BoundaryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryType::CopyFrom(const BoundaryType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.BoundaryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryType::IsInitialized() const {
  return true;
}

void BoundaryType::Swap(BoundaryType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundaryType::InternalSwap(BoundaryType* other) {
  using std::swap;
  swap(right_bound_type_, other->right_bound_type_);
  swap(left_bound_type_, other->left_bound_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoundaryType::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugSLBoundary::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugSLBoundary::kStartSFieldNumber;
const int DebugSLBoundary::kDeltaSFieldNumber;
const int DebugSLBoundary::kBoundaryFieldNumber;
const int DebugSLBoundary::kBoxModifiedBoundaryFieldNumber;
const int DebugSLBoundary::kDynamicObstacleBoundaryFieldNumber;
const int DebugSLBoundary::kSoftBoundaryFieldNumber;
const int DebugSLBoundary::kBoundaryTypeFieldNumber;
const int DebugSLBoundary::kLabelFieldNumber;
const int DebugSLBoundary::kBlockingObstacleIdFieldNumber;
const int DebugSLBoundary::kIsBlockedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugSLBoundary::DebugSLBoundary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugSLBoundary();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.DebugSLBoundary)
}
DebugSLBoundary::DebugSLBoundary(const DebugSLBoundary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      boundary_(from.boundary_),
      box_modified_boundary_(from.box_modified_boundary_),
      dynamic_obstacle_boundary_(from.dynamic_obstacle_boundary_),
      soft_boundary_(from.soft_boundary_),
      boundary_type_(from.boundary_type_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.label().size() > 0) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  blocking_obstacle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.blocking_obstacle_id().size() > 0) {
    blocking_obstacle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blocking_obstacle_id_);
  }
  ::memcpy(&start_s_, &from.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_blocked_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(is_blocked_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.DebugSLBoundary)
}

void DebugSLBoundary::SharedCtor() {
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blocking_obstacle_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_blocked_) -
      reinterpret_cast<char*>(&start_s_)) + sizeof(is_blocked_));
  _cached_size_ = 0;
}

DebugSLBoundary::~DebugSLBoundary() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.DebugSLBoundary)
  SharedDtor();
}

void DebugSLBoundary::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blocking_obstacle_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DebugSLBoundary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugSLBoundary::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugSLBoundary& DebugSLBoundary::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugSLBoundary();
  return *internal_default_instance();
}

DebugSLBoundary* DebugSLBoundary::New(::google::protobuf::Arena* arena) const {
  DebugSLBoundary* n = new DebugSLBoundary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugSLBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.DebugSLBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boundary_.Clear();
  box_modified_boundary_.Clear();
  dynamic_obstacle_boundary_.Clear();
  soft_boundary_.Clear();
  boundary_type_.Clear();
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blocking_obstacle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_blocked_) -
      reinterpret_cast<char*>(&start_s_)) + sizeof(is_blocked_));
  _internal_metadata_.Clear();
}

bool DebugSLBoundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.DebugSLBoundary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double start_s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double delta_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delta_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.LBounds boundary = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.LBounds box_modified_boundary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_box_modified_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.LBounds dynamic_obstacle_boundary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_dynamic_obstacle_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.SoftBoundary soft_boundary = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_soft_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.BoundaryType boundary_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_boundary_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string label = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->label().data(), static_cast<int>(this->label().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.DebugSLBoundary.label"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string blocking_obstacle_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blocking_obstacle_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->blocking_obstacle_id().data(), static_cast<int>(this->blocking_obstacle_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.DebugSLBoundary.blocking_obstacle_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_blocked = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_blocked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.DebugSLBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.DebugSLBoundary)
  return false;
#undef DO_
}

void DebugSLBoundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.DebugSLBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double start_s = 1;
  if (this->start_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start_s(), output);
  }

  // double delta_s = 2;
  if (this->delta_s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->delta_s(), output);
  }

  // repeated .planning_debug_msgs.LBounds boundary = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundary_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->boundary(static_cast<int>(i)), output);
  }

  // repeated .planning_debug_msgs.LBounds box_modified_boundary = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->box_modified_boundary_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->box_modified_boundary(static_cast<int>(i)), output);
  }

  // repeated .planning_debug_msgs.LBounds dynamic_obstacle_boundary = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dynamic_obstacle_boundary_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dynamic_obstacle_boundary(static_cast<int>(i)), output);
  }

  // repeated .planning_debug_msgs.SoftBoundary soft_boundary = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->soft_boundary_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->soft_boundary(static_cast<int>(i)), output);
  }

  // repeated .planning_debug_msgs.BoundaryType boundary_type = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundary_type_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->boundary_type(static_cast<int>(i)), output);
  }

  // string label = 8;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugSLBoundary.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->label(), output);
  }

  // string blocking_obstacle_id = 9;
  if (this->blocking_obstacle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->blocking_obstacle_id().data(), static_cast<int>(this->blocking_obstacle_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugSLBoundary.blocking_obstacle_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->blocking_obstacle_id(), output);
  }

  // bool is_blocked = 10;
  if (this->is_blocked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_blocked(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.DebugSLBoundary)
}

::google::protobuf::uint8* DebugSLBoundary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.DebugSLBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double start_s = 1;
  if (this->start_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start_s(), target);
  }

  // double delta_s = 2;
  if (this->delta_s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->delta_s(), target);
  }

  // repeated .planning_debug_msgs.LBounds boundary = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundary_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->boundary(static_cast<int>(i)), deterministic, target);
  }

  // repeated .planning_debug_msgs.LBounds box_modified_boundary = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->box_modified_boundary_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->box_modified_boundary(static_cast<int>(i)), deterministic, target);
  }

  // repeated .planning_debug_msgs.LBounds dynamic_obstacle_boundary = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dynamic_obstacle_boundary_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->dynamic_obstacle_boundary(static_cast<int>(i)), deterministic, target);
  }

  // repeated .planning_debug_msgs.SoftBoundary soft_boundary = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->soft_boundary_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->soft_boundary(static_cast<int>(i)), deterministic, target);
  }

  // repeated .planning_debug_msgs.BoundaryType boundary_type = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundary_type_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->boundary_type(static_cast<int>(i)), deterministic, target);
  }

  // string label = 8;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugSLBoundary.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->label(), target);
  }

  // string blocking_obstacle_id = 9;
  if (this->blocking_obstacle_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->blocking_obstacle_id().data(), static_cast<int>(this->blocking_obstacle_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.DebugSLBoundary.blocking_obstacle_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->blocking_obstacle_id(), target);
  }

  // bool is_blocked = 10;
  if (this->is_blocked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_blocked(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.DebugSLBoundary)
  return target;
}

size_t DebugSLBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.DebugSLBoundary)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .planning_debug_msgs.LBounds boundary = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->boundary_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->boundary(static_cast<int>(i)));
    }
  }

  // repeated .planning_debug_msgs.LBounds box_modified_boundary = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->box_modified_boundary_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->box_modified_boundary(static_cast<int>(i)));
    }
  }

  // repeated .planning_debug_msgs.LBounds dynamic_obstacle_boundary = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->dynamic_obstacle_boundary_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dynamic_obstacle_boundary(static_cast<int>(i)));
    }
  }

  // repeated .planning_debug_msgs.SoftBoundary soft_boundary = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->soft_boundary_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->soft_boundary(static_cast<int>(i)));
    }
  }

  // repeated .planning_debug_msgs.BoundaryType boundary_type = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->boundary_type_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->boundary_type(static_cast<int>(i)));
    }
  }

  // string label = 8;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());
  }

  // string blocking_obstacle_id = 9;
  if (this->blocking_obstacle_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->blocking_obstacle_id());
  }

  // double start_s = 1;
  if (this->start_s() != 0) {
    total_size += 1 + 8;
  }

  // double delta_s = 2;
  if (this->delta_s() != 0) {
    total_size += 1 + 8;
  }

  // bool is_blocked = 10;
  if (this->is_blocked() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugSLBoundary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.DebugSLBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugSLBoundary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugSLBoundary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.DebugSLBoundary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.DebugSLBoundary)
    MergeFrom(*source);
  }
}

void DebugSLBoundary::MergeFrom(const DebugSLBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.DebugSLBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boundary_.MergeFrom(from.boundary_);
  box_modified_boundary_.MergeFrom(from.box_modified_boundary_);
  dynamic_obstacle_boundary_.MergeFrom(from.dynamic_obstacle_boundary_);
  soft_boundary_.MergeFrom(from.soft_boundary_);
  boundary_type_.MergeFrom(from.boundary_type_);
  if (from.label().size() > 0) {

    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  if (from.blocking_obstacle_id().size() > 0) {

    blocking_obstacle_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blocking_obstacle_id_);
  }
  if (from.start_s() != 0) {
    set_start_s(from.start_s());
  }
  if (from.delta_s() != 0) {
    set_delta_s(from.delta_s());
  }
  if (from.is_blocked() != 0) {
    set_is_blocked(from.is_blocked());
  }
}

void DebugSLBoundary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.DebugSLBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugSLBoundary::CopyFrom(const DebugSLBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.DebugSLBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugSLBoundary::IsInitialized() const {
  return true;
}

void DebugSLBoundary::Swap(DebugSLBoundary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugSLBoundary::InternalSwap(DebugSLBoundary* other) {
  using std::swap;
  boundary_.InternalSwap(&other->boundary_);
  box_modified_boundary_.InternalSwap(&other->box_modified_boundary_);
  dynamic_obstacle_boundary_.InternalSwap(&other->dynamic_obstacle_boundary_);
  soft_boundary_.InternalSwap(&other->soft_boundary_);
  boundary_type_.InternalSwap(&other->boundary_type_);
  label_.Swap(&other->label_);
  blocking_obstacle_id_.Swap(&other->blocking_obstacle_id_);
  swap(start_s_, other->start_s_);
  swap(delta_s_, other->delta_s_);
  swap(is_blocked_, other->is_blocked_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugSLBoundary::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void motion_obstacle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int motion_obstacle::kIdFieldNumber;
const int motion_obstacle::kPerceptionIdFieldNumber;
const int motion_obstacle::kPerceptionXgFieldNumber;
const int motion_obstacle::kPerceptionYgFieldNumber;
const int motion_obstacle::kIsStaticFieldNumber;
const int motion_obstacle::kIsVirtualFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

motion_obstacle::motion_obstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsmotion_obstacle();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.motion_obstacle)
}
motion_obstacle::motion_obstacle(const motion_obstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&perception_xg_, &from.perception_xg_,
    static_cast<size_t>(reinterpret_cast<char*>(&isvirtual_) -
    reinterpret_cast<char*>(&perception_xg_)) + sizeof(isvirtual_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.motion_obstacle)
}

void motion_obstacle::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&perception_xg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isvirtual_) -
      reinterpret_cast<char*>(&perception_xg_)) + sizeof(isvirtual_));
  _cached_size_ = 0;
}

motion_obstacle::~motion_obstacle() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.motion_obstacle)
  SharedDtor();
}

void motion_obstacle::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void motion_obstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* motion_obstacle::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const motion_obstacle& motion_obstacle::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsmotion_obstacle();
  return *internal_default_instance();
}

motion_obstacle* motion_obstacle::New(::google::protobuf::Arena* arena) const {
  motion_obstacle* n = new motion_obstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void motion_obstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.motion_obstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&perception_xg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isvirtual_) -
      reinterpret_cast<char*>(&perception_xg_)) + sizeof(isvirtual_));
  _internal_metadata_.Clear();
}

bool motion_obstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.motion_obstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "planning_debug_msgs.motion_obstacle.Id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PerceptionId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &perceptionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Perception_xg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &perception_xg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Perception_yg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &perception_yg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 IsStatic = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isstatic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 IsVirtual = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isvirtual_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.motion_obstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.motion_obstacle)
  return false;
#undef DO_
}

void motion_obstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.motion_obstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.motion_obstacle.Id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // int32 PerceptionId = 2;
  if (this->perceptionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->perceptionid(), output);
  }

  // double Perception_xg = 3;
  if (this->perception_xg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->perception_xg(), output);
  }

  // double Perception_yg = 4;
  if (this->perception_yg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->perception_yg(), output);
  }

  // int32 IsStatic = 5;
  if (this->isstatic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isstatic(), output);
  }

  // int32 IsVirtual = 6;
  if (this->isvirtual() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->isvirtual(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.motion_obstacle)
}

::google::protobuf::uint8* motion_obstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.motion_obstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "planning_debug_msgs.motion_obstacle.Id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // int32 PerceptionId = 2;
  if (this->perceptionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->perceptionid(), target);
  }

  // double Perception_xg = 3;
  if (this->perception_xg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->perception_xg(), target);
  }

  // double Perception_yg = 4;
  if (this->perception_yg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->perception_yg(), target);
  }

  // int32 IsStatic = 5;
  if (this->isstatic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->isstatic(), target);
  }

  // int32 IsVirtual = 6;
  if (this->isvirtual() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->isvirtual(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.motion_obstacle)
  return target;
}

size_t motion_obstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.motion_obstacle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // double Perception_xg = 3;
  if (this->perception_xg() != 0) {
    total_size += 1 + 8;
  }

  // int32 PerceptionId = 2;
  if (this->perceptionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->perceptionid());
  }

  // int32 IsStatic = 5;
  if (this->isstatic() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isstatic());
  }

  // double Perception_yg = 4;
  if (this->perception_yg() != 0) {
    total_size += 1 + 8;
  }

  // int32 IsVirtual = 6;
  if (this->isvirtual() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->isvirtual());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void motion_obstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.motion_obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const motion_obstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const motion_obstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.motion_obstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.motion_obstacle)
    MergeFrom(*source);
  }
}

void motion_obstacle::MergeFrom(const motion_obstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.motion_obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.perception_xg() != 0) {
    set_perception_xg(from.perception_xg());
  }
  if (from.perceptionid() != 0) {
    set_perceptionid(from.perceptionid());
  }
  if (from.isstatic() != 0) {
    set_isstatic(from.isstatic());
  }
  if (from.perception_yg() != 0) {
    set_perception_yg(from.perception_yg());
  }
  if (from.isvirtual() != 0) {
    set_isvirtual(from.isvirtual());
  }
}

void motion_obstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.motion_obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void motion_obstacle::CopyFrom(const motion_obstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.motion_obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool motion_obstacle::IsInitialized() const {
  return true;
}

void motion_obstacle::Swap(motion_obstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void motion_obstacle::InternalSwap(motion_obstacle* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(perception_xg_, other->perception_xg_);
  swap(perceptionid_, other->perceptionid_);
  swap(isstatic_, other->isstatic_);
  swap(perception_yg_, other->perception_yg_);
  swap(isvirtual_, other->isvirtual_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata motion_obstacle::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void motion_obstacle_vec::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int motion_obstacle_vec::kMotionObstaclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

motion_obstacle_vec::motion_obstacle_vec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsmotion_obstacle_vec();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.motion_obstacle_vec)
}
motion_obstacle_vec::motion_obstacle_vec(const motion_obstacle_vec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      motion_obstacles_(from.motion_obstacles_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.motion_obstacle_vec)
}

void motion_obstacle_vec::SharedCtor() {
  _cached_size_ = 0;
}

motion_obstacle_vec::~motion_obstacle_vec() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.motion_obstacle_vec)
  SharedDtor();
}

void motion_obstacle_vec::SharedDtor() {
}

void motion_obstacle_vec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* motion_obstacle_vec::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const motion_obstacle_vec& motion_obstacle_vec::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsmotion_obstacle_vec();
  return *internal_default_instance();
}

motion_obstacle_vec* motion_obstacle_vec::New(::google::protobuf::Arena* arena) const {
  motion_obstacle_vec* n = new motion_obstacle_vec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void motion_obstacle_vec::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.motion_obstacle_vec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  motion_obstacles_.Clear();
  _internal_metadata_.Clear();
}

bool motion_obstacle_vec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.motion_obstacle_vec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .planning_debug_msgs.motion_obstacle motion_obstacles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_motion_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.motion_obstacle_vec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.motion_obstacle_vec)
  return false;
#undef DO_
}

void motion_obstacle_vec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.motion_obstacle_vec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .planning_debug_msgs.motion_obstacle motion_obstacles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->motion_obstacles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->motion_obstacles(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.motion_obstacle_vec)
}

::google::protobuf::uint8* motion_obstacle_vec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.motion_obstacle_vec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .planning_debug_msgs.motion_obstacle motion_obstacles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->motion_obstacles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->motion_obstacles(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.motion_obstacle_vec)
  return target;
}

size_t motion_obstacle_vec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.motion_obstacle_vec)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .planning_debug_msgs.motion_obstacle motion_obstacles = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->motion_obstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->motion_obstacles(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void motion_obstacle_vec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.motion_obstacle_vec)
  GOOGLE_DCHECK_NE(&from, this);
  const motion_obstacle_vec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const motion_obstacle_vec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.motion_obstacle_vec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.motion_obstacle_vec)
    MergeFrom(*source);
  }
}

void motion_obstacle_vec::MergeFrom(const motion_obstacle_vec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.motion_obstacle_vec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  motion_obstacles_.MergeFrom(from.motion_obstacles_);
}

void motion_obstacle_vec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.motion_obstacle_vec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void motion_obstacle_vec::CopyFrom(const motion_obstacle_vec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.motion_obstacle_vec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool motion_obstacle_vec::IsInitialized() const {
  return true;
}

void motion_obstacle_vec::Swap(motion_obstacle_vec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void motion_obstacle_vec::InternalSwap(motion_obstacle_vec* other) {
  using std::swap;
  motion_obstacles_.InternalSwap(&other->motion_obstacles_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata motion_obstacle_vec::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugXTBound::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugXTBound::kTFieldNumber;
const int DebugXTBound::kMinBoundFieldNumber;
const int DebugXTBound::kMaxBoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugXTBound::DebugXTBound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugXTBound();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.DebugXTBound)
}
DebugXTBound::DebugXTBound(const DebugXTBound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&t_, &from.t_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_bound_) -
    reinterpret_cast<char*>(&t_)) + sizeof(max_bound_));
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.DebugXTBound)
}

void DebugXTBound::SharedCtor() {
  ::memset(&t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_bound_) -
      reinterpret_cast<char*>(&t_)) + sizeof(max_bound_));
  _cached_size_ = 0;
}

DebugXTBound::~DebugXTBound() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.DebugXTBound)
  SharedDtor();
}

void DebugXTBound::SharedDtor() {
}

void DebugXTBound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugXTBound::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugXTBound& DebugXTBound::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugXTBound();
  return *internal_default_instance();
}

DebugXTBound* DebugXTBound::New(::google::protobuf::Arena* arena) const {
  DebugXTBound* n = new DebugXTBound;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugXTBound::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.DebugXTBound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_bound_) -
      reinterpret_cast<char*>(&t_)) + sizeof(max_bound_));
  _internal_metadata_.Clear();
}

bool DebugXTBound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.DebugXTBound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float t = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_bound = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_bound = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_bound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.DebugXTBound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.DebugXTBound)
  return false;
#undef DO_
}

void DebugXTBound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.DebugXTBound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float t = 1;
  if (this->t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->t(), output);
  }

  // float min_bound = 2;
  if (this->min_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_bound(), output);
  }

  // float max_bound = 3;
  if (this->max_bound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_bound(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.DebugXTBound)
}

::google::protobuf::uint8* DebugXTBound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.DebugXTBound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float t = 1;
  if (this->t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->t(), target);
  }

  // float min_bound = 2;
  if (this->min_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_bound(), target);
  }

  // float max_bound = 3;
  if (this->max_bound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_bound(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.DebugXTBound)
  return target;
}

size_t DebugXTBound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.DebugXTBound)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float t = 1;
  if (this->t() != 0) {
    total_size += 1 + 4;
  }

  // float min_bound = 2;
  if (this->min_bound() != 0) {
    total_size += 1 + 4;
  }

  // float max_bound = 3;
  if (this->max_bound() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugXTBound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.DebugXTBound)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugXTBound* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugXTBound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.DebugXTBound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.DebugXTBound)
    MergeFrom(*source);
  }
}

void DebugXTBound::MergeFrom(const DebugXTBound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.DebugXTBound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.t() != 0) {
    set_t(from.t());
  }
  if (from.min_bound() != 0) {
    set_min_bound(from.min_bound());
  }
  if (from.max_bound() != 0) {
    set_max_bound(from.max_bound());
  }
}

void DebugXTBound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.DebugXTBound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugXTBound::CopyFrom(const DebugXTBound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.DebugXTBound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugXTBound::IsInitialized() const {
  return true;
}

void DebugXTBound::Swap(DebugXTBound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugXTBound::InternalSwap(DebugXTBound* other) {
  using std::swap;
  swap(t_, other->t_);
  swap(min_bound_, other->min_bound_);
  swap(max_bound_, other->max_bound_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugXTBound::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XTBounds::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XTBounds::kStBoundsFieldNumber;
const int XTBounds::kDstBoundsFieldNumber;
const int XTBounds::kDdstBoundsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XTBounds::XTBounds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsXTBounds();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.XTBounds)
}
XTBounds::XTBounds(const XTBounds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      st_bounds_(from.st_bounds_),
      dst_bounds_(from.dst_bounds_),
      ddst_bounds_(from.ddst_bounds_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.XTBounds)
}

void XTBounds::SharedCtor() {
  _cached_size_ = 0;
}

XTBounds::~XTBounds() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.XTBounds)
  SharedDtor();
}

void XTBounds::SharedDtor() {
}

void XTBounds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XTBounds::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XTBounds& XTBounds::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsXTBounds();
  return *internal_default_instance();
}

XTBounds* XTBounds::New(::google::protobuf::Arena* arena) const {
  XTBounds* n = new XTBounds;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XTBounds::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.XTBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  st_bounds_.Clear();
  dst_bounds_.Clear();
  ddst_bounds_.Clear();
  _internal_metadata_.Clear();
}

bool XTBounds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.XTBounds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .planning_debug_msgs.DebugXTBound st_bounds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_st_bounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.DebugXTBound dst_bounds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_dst_bounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .planning_debug_msgs.DebugXTBound ddst_bounds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_ddst_bounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.XTBounds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.XTBounds)
  return false;
#undef DO_
}

void XTBounds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.XTBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .planning_debug_msgs.DebugXTBound st_bounds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->st_bounds_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->st_bounds(static_cast<int>(i)), output);
  }

  // repeated .planning_debug_msgs.DebugXTBound dst_bounds = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dst_bounds_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dst_bounds(static_cast<int>(i)), output);
  }

  // repeated .planning_debug_msgs.DebugXTBound ddst_bounds = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ddst_bounds_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ddst_bounds(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.XTBounds)
}

::google::protobuf::uint8* XTBounds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.XTBounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .planning_debug_msgs.DebugXTBound st_bounds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->st_bounds_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->st_bounds(static_cast<int>(i)), deterministic, target);
  }

  // repeated .planning_debug_msgs.DebugXTBound dst_bounds = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dst_bounds_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->dst_bounds(static_cast<int>(i)), deterministic, target);
  }

  // repeated .planning_debug_msgs.DebugXTBound ddst_bounds = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ddst_bounds_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->ddst_bounds(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.XTBounds)
  return target;
}

size_t XTBounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.XTBounds)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .planning_debug_msgs.DebugXTBound st_bounds = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->st_bounds_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->st_bounds(static_cast<int>(i)));
    }
  }

  // repeated .planning_debug_msgs.DebugXTBound dst_bounds = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dst_bounds_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->dst_bounds(static_cast<int>(i)));
    }
  }

  // repeated .planning_debug_msgs.DebugXTBound ddst_bounds = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->ddst_bounds_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ddst_bounds(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XTBounds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.XTBounds)
  GOOGLE_DCHECK_NE(&from, this);
  const XTBounds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XTBounds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.XTBounds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.XTBounds)
    MergeFrom(*source);
  }
}

void XTBounds::MergeFrom(const XTBounds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.XTBounds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  st_bounds_.MergeFrom(from.st_bounds_);
  dst_bounds_.MergeFrom(from.dst_bounds_);
  ddst_bounds_.MergeFrom(from.ddst_bounds_);
}

void XTBounds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.XTBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XTBounds::CopyFrom(const XTBounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.XTBounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XTBounds::IsInitialized() const {
  return true;
}

void XTBounds::Swap(XTBounds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XTBounds::InternalSwap(XTBounds* other) {
  using std::swap;
  st_bounds_.InternalSwap(&other->st_bounds_);
  dst_bounds_.InternalSwap(&other->dst_bounds_);
  ddst_bounds_.InternalSwap(&other->ddst_bounds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XTBounds::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugExtraDecision::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugExtraDecision::kDistToEndsXgFieldNumber;
const int DebugExtraDecision::kDistToEndsYgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugExtraDecision::DebugExtraDecision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugExtraDecision();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:planning_debug_msgs.DebugExtraDecision)
}
DebugExtraDecision::DebugExtraDecision(const DebugExtraDecision& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dist_to_ends_xg_(from.dist_to_ends_xg_),
      dist_to_ends_yg_(from.dist_to_ends_yg_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:planning_debug_msgs.DebugExtraDecision)
}

void DebugExtraDecision::SharedCtor() {
  _cached_size_ = 0;
}

DebugExtraDecision::~DebugExtraDecision() {
  // @@protoc_insertion_point(destructor:planning_debug_msgs.DebugExtraDecision)
  SharedDtor();
}

void DebugExtraDecision::SharedDtor() {
}

void DebugExtraDecision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugExtraDecision::descriptor() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugExtraDecision& DebugExtraDecision::default_instance() {
  ::protobuf_planning_5fdebug_5fmsgs_2eproto::InitDefaultsDebugExtraDecision();
  return *internal_default_instance();
}

DebugExtraDecision* DebugExtraDecision::New(::google::protobuf::Arena* arena) const {
  DebugExtraDecision* n = new DebugExtraDecision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugExtraDecision::Clear() {
// @@protoc_insertion_point(message_clear_start:planning_debug_msgs.DebugExtraDecision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dist_to_ends_xg_.Clear();
  dist_to_ends_yg_.Clear();
  _internal_metadata_.Clear();
}

bool DebugExtraDecision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:planning_debug_msgs.DebugExtraDecision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float dist_to_ends_xg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_dist_to_ends_xg())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_dist_to_ends_xg())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float dist_to_ends_yg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_dist_to_ends_yg())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_dist_to_ends_yg())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:planning_debug_msgs.DebugExtraDecision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:planning_debug_msgs.DebugExtraDecision)
  return false;
#undef DO_
}

void DebugExtraDecision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:planning_debug_msgs.DebugExtraDecision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float dist_to_ends_xg = 1;
  if (this->dist_to_ends_xg_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _dist_to_ends_xg_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->dist_to_ends_xg().data(), this->dist_to_ends_xg_size(), output);
  }

  // repeated float dist_to_ends_yg = 2;
  if (this->dist_to_ends_yg_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _dist_to_ends_yg_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->dist_to_ends_yg().data(), this->dist_to_ends_yg_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:planning_debug_msgs.DebugExtraDecision)
}

::google::protobuf::uint8* DebugExtraDecision::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:planning_debug_msgs.DebugExtraDecision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float dist_to_ends_xg = 1;
  if (this->dist_to_ends_xg_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _dist_to_ends_xg_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->dist_to_ends_xg_, target);
  }

  // repeated float dist_to_ends_yg = 2;
  if (this->dist_to_ends_yg_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _dist_to_ends_yg_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->dist_to_ends_yg_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:planning_debug_msgs.DebugExtraDecision)
  return target;
}

size_t DebugExtraDecision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:planning_debug_msgs.DebugExtraDecision)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float dist_to_ends_xg = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->dist_to_ends_xg_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dist_to_ends_xg_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float dist_to_ends_yg = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->dist_to_ends_yg_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dist_to_ends_yg_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugExtraDecision::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:planning_debug_msgs.DebugExtraDecision)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugExtraDecision* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugExtraDecision>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:planning_debug_msgs.DebugExtraDecision)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:planning_debug_msgs.DebugExtraDecision)
    MergeFrom(*source);
  }
}

void DebugExtraDecision::MergeFrom(const DebugExtraDecision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:planning_debug_msgs.DebugExtraDecision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dist_to_ends_xg_.MergeFrom(from.dist_to_ends_xg_);
  dist_to_ends_yg_.MergeFrom(from.dist_to_ends_yg_);
}

void DebugExtraDecision::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:planning_debug_msgs.DebugExtraDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugExtraDecision::CopyFrom(const DebugExtraDecision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:planning_debug_msgs.DebugExtraDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugExtraDecision::IsInitialized() const {
  return true;
}

void DebugExtraDecision::Swap(DebugExtraDecision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugExtraDecision::InternalSwap(DebugExtraDecision* other) {
  using std::swap;
  dist_to_ends_xg_.InternalSwap(&other->dist_to_ends_xg_);
  dist_to_ends_yg_.InternalSwap(&other->dist_to_ends_yg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugExtraDecision::GetMetadata() const {
  protobuf_planning_5fdebug_5fmsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_planning_5fdebug_5fmsgs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning_debug_msgs

// @@protoc_insertion_point(global_scope)
