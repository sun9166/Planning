// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Canbus.proto

#include "Canbus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Canbus {
namespace proto {
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
class FaultInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FaultInfo>
      _instance;
} _FaultInfo_default_instance_;
class KeyStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyState>
      _instance;
} _KeyState_default_instance_;
class VehicleInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleInfo>
      _instance;
} _VehicleInfo_default_instance_;
class VehicleStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleState>
      _instance;
} _VehicleState_default_instance_;
class VehicleFeedbackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleFeedback>
      _instance;
} _VehicleFeedback_default_instance_;
class AddOnFeedbackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddOnFeedback>
      _instance;
} _AddOnFeedback_default_instance_;
}  // namespace proto
}  // namespace Canbus
namespace protobuf_Canbus_2eproto {
void InitDefaultsHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Canbus::proto::_Header_default_instance_;
    new (ptr) ::Canbus::proto::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canbus::proto::Header::InitAsDefaultInstance();
}

void InitDefaultsHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHeaderImpl);
}

void InitDefaultsFaultInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Canbus::proto::_FaultInfo_default_instance_;
    new (ptr) ::Canbus::proto::FaultInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canbus::proto::FaultInfo::InitAsDefaultInstance();
}

void InitDefaultsFaultInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFaultInfoImpl);
}

void InitDefaultsKeyStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Canbus::proto::_KeyState_default_instance_;
    new (ptr) ::Canbus::proto::KeyState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canbus::proto::KeyState::InitAsDefaultInstance();
}

void InitDefaultsKeyState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsKeyStateImpl);
}

void InitDefaultsVehicleInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Canbus::proto::_VehicleInfo_default_instance_;
    new (ptr) ::Canbus::proto::VehicleInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canbus::proto::VehicleInfo::InitAsDefaultInstance();
}

void InitDefaultsVehicleInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicleInfoImpl);
}

void InitDefaultsVehicleStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Canbus::proto::_VehicleState_default_instance_;
    new (ptr) ::Canbus::proto::VehicleState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canbus::proto::VehicleState::InitAsDefaultInstance();
}

void InitDefaultsVehicleState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicleStateImpl);
}

void InitDefaultsVehicleFeedbackImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Canbus_2eproto::InitDefaultsHeader();
  protobuf_Canbus_2eproto::InitDefaultsVehicleInfo();
  protobuf_Canbus_2eproto::InitDefaultsKeyState();
  protobuf_Canbus_2eproto::InitDefaultsVehicleState();
  protobuf_Canbus_2eproto::InitDefaultsFaultInfo();
  {
    void* ptr = &::Canbus::proto::_VehicleFeedback_default_instance_;
    new (ptr) ::Canbus::proto::VehicleFeedback();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canbus::proto::VehicleFeedback::InitAsDefaultInstance();
}

void InitDefaultsVehicleFeedback() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVehicleFeedbackImpl);
}

void InitDefaultsAddOnFeedbackImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Canbus_2eproto::InitDefaultsHeader();
  {
    void* ptr = &::Canbus::proto::_AddOnFeedback_default_instance_;
    new (ptr) ::Canbus::proto::AddOnFeedback();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canbus::proto::AddOnFeedback::InitAsDefaultInstance();
}

void InitDefaultsAddOnFeedback() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddOnFeedbackImpl);
}

::google::protobuf::Metadata file_level_metadata[7];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::Header, timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::Header, module_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::Header, sequence_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::Header, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::FaultInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::FaultInfo, eps_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::FaultInfo, brake_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::FaultInfo, drive_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::FaultInfo, epb_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::FaultInfo, power12_over_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::FaultInfo, power12_low_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::FaultInfo, powerign_over_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::FaultInfo, powerign_low_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::FaultInfo, eps_com_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::FaultInfo, bcm_com_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::FaultInfo, epb_com_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::FaultInfo, cpu_com_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::FaultInfo, vcu_com_fault_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, emergency_brake_key_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, slow_brake_key_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, drive_key_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, break_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, auto_switch_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, active_switch_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, steer_left_up_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, steer_left_down_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, steer_left_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, steer_left_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, turn_light_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, position_light_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, front_wiper_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, hazard_lamp_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, door_closing_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, door_opening_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, top_light_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, front_washer_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, lowbeam_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::KeyState, highbeam_switch_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleInfo, steerangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleInfo, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleInfo, dcdc_work_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleInfo, batterystatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleInfo, shift_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleInfo, epb_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleInfo, current_drive_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleInfo, control_switch_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleInfo, brake_switch_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleInfo, break_pressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleInfo, accpedalposi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleInfo, lon_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleInfo, lon_jerk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleInfo, lat_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleInfo, lat_jerk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleInfo, yawrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleInfo, steerwheeltorq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, brake_light_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, doubleflash_light_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, lowbeam_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, highbeam_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, leftturn_light_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, rightturn_light_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, frontfog_light_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, rearfog_light_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, tail_light_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, horn_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, wiper_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, driver_door_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, passager_door_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, driver_door_lock_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, passager_door_lock_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, left_rear_door_lock_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, right_rear_door_lock_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, trunk_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, driver_seatbeltrst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, passager_seatbeltrst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, bms_battery_soc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, vehicle_total_mile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, mile_left_over_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, vehicle_temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, front_washer_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, top_light_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, tyre_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, eps_mode_fb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, accl_mode_fb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, brak_mode_fb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, epb_mode_fb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, bcm_mode_fb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, accl_allow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, epb_allow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, gear_intervene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleState, vcu_ad_exitreq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleFeedback, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleFeedback, vehicle_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleFeedback, key_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleFeedback, vehicle_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::VehicleFeedback, fault_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::AddOnFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::AddOnFeedback, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Canbus::proto::AddOnFeedback, slow_brake_key_2_state_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Canbus::proto::Header)},
  { 9, -1, sizeof(::Canbus::proto::FaultInfo)},
  { 27, -1, sizeof(::Canbus::proto::KeyState)},
  { 52, -1, sizeof(::Canbus::proto::VehicleInfo)},
  { 74, -1, sizeof(::Canbus::proto::VehicleState)},
  { 115, -1, sizeof(::Canbus::proto::VehicleFeedback)},
  { 125, -1, sizeof(::Canbus::proto::AddOnFeedback)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Canbus::proto::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Canbus::proto::_FaultInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Canbus::proto::_KeyState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Canbus::proto::_VehicleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Canbus::proto::_VehicleState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Canbus::proto::_VehicleFeedback_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Canbus::proto::_AddOnFeedback_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Canbus.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014Canbus.proto\022\014Canbus.proto\"[\n\006Header\022\025"
      "\n\rtimestamp_sec\030\001 \001(\001\022\023\n\013module_name\030\002 \001"
      "(\t\022\024\n\014sequence_num\030\003 \001(\r\022\017\n\007version\030\004 \001("
      "\t\"\276\002\n\tFaultInfo\022\021\n\tEPS_fault\030\001 \001(\005\022\023\n\013Br"
      "ake_fault\030\002 \001(\005\022\023\n\013Drive_fault\030\003 \001(\005\022\021\n\t"
      "EPB_fault\030\004 \001(\005\022\032\n\022Power12_Over_fault\030\005 "
      "\001(\005\022\031\n\021Power12_Low_fault\030\006 \001(\005\022\033\n\023PowerI"
      "GN_Over_fault\030\007 \001(\005\022\032\n\022PowerIGN_Low_faul"
      "t\030\010 \001(\005\022\025\n\rEPS_Com_fault\030\t \001(\005\022\025\n\rBCM_Co"
      "m_fault\030\n \001(\005\022\025\n\rEPB_Com_fault\030\013 \001(\005\022\025\n\r"
      "CPU_Com_fault\030\014 \001(\005\022\025\n\rVCU_Com_fault\030\r \001"
      "(\005\"\250\004\n\010KeyState\022!\n\031emergency_brake_key_s"
      "tate\030\001 \001(\005\022\034\n\024slow_brake_key_state\030\002 \001(\005"
      "\022\027\n\017drive_key_state\030\003 \001(\005\022\023\n\013break_state"
      "\030\004 \001(\005\022\031\n\021auto_switch_state\030\005 \001(\005\022\033\n\023act"
      "ive_switch_state\030\006 \001(\005\022\025\n\rsteer_left_up\030"
      "\007 \001(\005\022\027\n\017steer_left_down\030\010 \001(\005\022\027\n\017steer_"
      "left_left\030\t \001(\005\022\030\n\020steer_left_right\030\n \001("
      "\005\022\031\n\021turn_light_switch\030\013 \001(\005\022\035\n\025position"
      "_light_switch\030\014 \001(\005\022\032\n\022front_wiper_switc"
      "h\030\r \001(\005\022\032\n\022hazard_lamp_switch\030\016 \001(\005\022\033\n\023d"
      "oor_closing_button\030\017 \001(\005\022\033\n\023door_opening"
      "_button\030\020 \001(\005\022\030\n\020top_light_button\030\021 \001(\005\022"
      "\033\n\023front_washer_switch\030\022 \001(\005\022\026\n\016lowbeam_"
      "switch\030\023 \001(\005\022\027\n\017highbeam_switch\030\024 \001(\005\"\203\003"
      "\n\013VehicleInfo\022\022\n\nsteerangle\030\001 \001(\002\022\r\n\005spe"
      "ed\030\002 \001(\002\022\027\n\017DCDC_work_state\030\003 \001(\005\022\025\n\rbat"
      "teryStatus\030\004 \001(\005\022\026\n\016shift_position\030\005 \001(\005"
      "\022\022\n\nepb_status\030\006 \001(\005\022\032\n\022current_drive_mo"
      "de\030\007 \001(\005\022\034\n\024control_switch_state\030\010 \001(\005\022\032"
      "\n\022brake_switch_state\030\t \001(\005\022\026\n\016break_pres"
      "sure\030\n \001(\002\022\024\n\014accpedalposi\030\013 \001(\002\022\021\n\tlon_"
      "accel\030\014 \001(\002\022\020\n\010lon_jerk\030\r \001(\002\022\021\n\tlat_acc"
      "el\030\016 \001(\002\022\020\n\010lat_jerk\030\017 \001(\002\022\017\n\007yawrate\030\020 "
      "\001(\002\022\026\n\016steerwheeltorq\030\021 \001(\002\"\271\007\n\014VehicleS"
      "tate\022\031\n\021brake_light_state\030\001 \001(\005\022\037\n\027doubl"
      "eflash_light_state\030\002 \001(\005\022\025\n\rlowbeam_stat"
      "e\030\003 \001(\005\022\026\n\016highbeam_state\030\004 \001(\005\022\034\n\024leftt"
      "urn_light_state\030\005 \001(\005\022\035\n\025rightturn_light"
      "_state\030\006 \001(\005\022\034\n\024frontfog_light_state\030\007 \001"
      "(\005\022\033\n\023rearfog_light_state\030\010 \001(\005\022\030\n\020tail_"
      "light_state\030\t \001(\005\022\022\n\nhorn_state\030\n \001(\005\022\023\n"
      "\013wiper_state\030\013 \001(\005\022\031\n\021driver_door_state\030"
      "\014 \001(\005\022\033\n\023passager_door_state\030\r \001(\005\022\036\n\026dr"
      "iver_door_lock_state\030\016 \001(\005\022 \n\030passager_d"
      "oor_lock_state\030\017 \001(\005\022!\n\031left_rear_door_l"
      "ock_state\030\020 \001(\005\022\"\n\032right_rear_door_lock_"
      "state\030\021 \001(\005\022\023\n\013trunk_state\030\022 \001(\005\022\032\n\022driv"
      "er_seatbeltrst\030\023 \001(\005\022\034\n\024passager_seatbel"
      "trst\030\024 \001(\005\022\027\n\017bms_battery_soc\030\025 \001(\001\022\032\n\022v"
      "ehicle_total_mile\030\026 \001(\001\022\026\n\016mile_left_ove"
      "r\030\027 \001(\001\022\033\n\023vehicle_temperature\030\030 \001(\001\022\032\n\022"
      "front_washer_state\030\031 \001(\005\022\027\n\017top_light_st"
      "ate\030\032 \001(\005\022\022\n\ntyre_state\030\033 \001(\005\022\023\n\013eps_mod"
      "e_fb\030\034 \001(\005\022\024\n\014accl_mode_fb\030\035 \001(\005\022\024\n\014brak"
      "_mode_fb\030\036 \001(\005\022\023\n\013epb_mode_fb\030\037 \001(\005\022\023\n\013b"
      "cm_mode_fb\030  \001(\005\022\022\n\naccl_allow\030! \001(\005\022\021\n\t"
      "epb_allow\030\" \001(\005\022\026\n\016gear_intervene\030# \001(\005\022"
      "\026\n\016vcu_ad_exitreq\030$ \001(\005\"\363\001\n\017VehicleFeedb"
      "ack\022$\n\006header\030\001 \001(\0132\024.Canbus.proto.Heade"
      "r\022/\n\014vehicle_info\030\002 \001(\0132\031.Canbus.proto.V"
      "ehicleInfo\022)\n\tkey_state\030\003 \001(\0132\026.Canbus.p"
      "roto.KeyState\0221\n\rvehicle_state\030\004 \001(\0132\032.C"
      "anbus.proto.VehicleState\022+\n\nfault_info\030\005"
      " \001(\0132\027.Canbus.proto.FaultInfo\"U\n\rAddOnFe"
      "edback\022$\n\006header\030\001 \001(\0132\024.Canbus.proto.He"
      "ader\022\036\n\026slow_brake_key_2_state\030\002 \001(\005b\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2684);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Canbus.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Canbus_2eproto
namespace Canbus {
namespace proto {

// ===================================================================

void Header::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kTimestampSecFieldNumber;
const int Header::kModuleNameFieldNumber;
const int Header::kSequenceNumFieldNumber;
const int Header::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Canbus_2eproto::InitDefaultsHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Canbus.proto.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.module_name().size() > 0) {
    module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  ::memcpy(&timestamp_sec_, &from.timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_num_) -
    reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(sequence_num_));
  // @@protoc_insertion_point(copy_constructor:Canbus.proto.Header)
}

void Header::SharedCtor() {
  module_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_num_) -
      reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(sequence_num_));
  _cached_size_ = 0;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:Canbus.proto.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  module_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_Canbus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Canbus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::protobuf_Canbus_2eproto::InitDefaultsHeader();
  return *internal_default_instance();
}

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:Canbus.proto.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_num_) -
      reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(sequence_num_));
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Canbus.proto.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string module_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->module_name().data(), static_cast<int>(this->module_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Canbus.proto.Header.module_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sequence_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Canbus.proto.Header.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Canbus.proto.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Canbus.proto.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Canbus.proto.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp_sec = 1;
  if (this->timestamp_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp_sec(), output);
  }

  // string module_name = 2;
  if (this->module_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_name().data(), static_cast<int>(this->module_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Canbus.proto.Header.module_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->module_name(), output);
  }

  // uint32 sequence_num = 3;
  if (this->sequence_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence_num(), output);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Canbus.proto.Header.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Canbus.proto.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Canbus.proto.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp_sec = 1;
  if (this->timestamp_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp_sec(), target);
  }

  // string module_name = 2;
  if (this->module_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->module_name().data(), static_cast<int>(this->module_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Canbus.proto.Header.module_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->module_name(), target);
  }

  // uint32 sequence_num = 3;
  if (this->sequence_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence_num(), target);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Canbus.proto.Header.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canbus.proto.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canbus.proto.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string module_name = 2;
  if (this->module_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->module_name());
  }

  // string version = 4;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // double timestamp_sec = 1;
  if (this->timestamp_sec() != 0) {
    total_size += 1 + 8;
  }

  // uint32 sequence_num = 3;
  if (this->sequence_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sequence_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canbus.proto.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canbus.proto.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canbus.proto.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canbus.proto.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.module_name().size() > 0) {

    module_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.module_name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.timestamp_sec() != 0) {
    set_timestamp_sec(from.timestamp_sec());
  }
  if (from.sequence_num() != 0) {
    set_sequence_num(from.sequence_num());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canbus.proto.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canbus.proto.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  module_name_.Swap(&other->module_name_);
  version_.Swap(&other->version_);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(sequence_num_, other->sequence_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_Canbus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Canbus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FaultInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FaultInfo::kEPSFaultFieldNumber;
const int FaultInfo::kBrakeFaultFieldNumber;
const int FaultInfo::kDriveFaultFieldNumber;
const int FaultInfo::kEPBFaultFieldNumber;
const int FaultInfo::kPower12OverFaultFieldNumber;
const int FaultInfo::kPower12LowFaultFieldNumber;
const int FaultInfo::kPowerIGNOverFaultFieldNumber;
const int FaultInfo::kPowerIGNLowFaultFieldNumber;
const int FaultInfo::kEPSComFaultFieldNumber;
const int FaultInfo::kBCMComFaultFieldNumber;
const int FaultInfo::kEPBComFaultFieldNumber;
const int FaultInfo::kCPUComFaultFieldNumber;
const int FaultInfo::kVCUComFaultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FaultInfo::FaultInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Canbus_2eproto::InitDefaultsFaultInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Canbus.proto.FaultInfo)
}
FaultInfo::FaultInfo(const FaultInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eps_fault_, &from.eps_fault_,
    static_cast<size_t>(reinterpret_cast<char*>(&vcu_com_fault_) -
    reinterpret_cast<char*>(&eps_fault_)) + sizeof(vcu_com_fault_));
  // @@protoc_insertion_point(copy_constructor:Canbus.proto.FaultInfo)
}

void FaultInfo::SharedCtor() {
  ::memset(&eps_fault_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vcu_com_fault_) -
      reinterpret_cast<char*>(&eps_fault_)) + sizeof(vcu_com_fault_));
  _cached_size_ = 0;
}

FaultInfo::~FaultInfo() {
  // @@protoc_insertion_point(destructor:Canbus.proto.FaultInfo)
  SharedDtor();
}

void FaultInfo::SharedDtor() {
}

void FaultInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FaultInfo::descriptor() {
  ::protobuf_Canbus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Canbus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FaultInfo& FaultInfo::default_instance() {
  ::protobuf_Canbus_2eproto::InitDefaultsFaultInfo();
  return *internal_default_instance();
}

FaultInfo* FaultInfo::New(::google::protobuf::Arena* arena) const {
  FaultInfo* n = new FaultInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FaultInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Canbus.proto.FaultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&eps_fault_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vcu_com_fault_) -
      reinterpret_cast<char*>(&eps_fault_)) + sizeof(vcu_com_fault_));
  _internal_metadata_.Clear();
}

bool FaultInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Canbus.proto.FaultInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 EPS_fault = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eps_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Brake_fault = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brake_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Drive_fault = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drive_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 EPB_fault = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epb_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Power12_Over_fault = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power12_over_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Power12_Low_fault = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power12_low_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PowerIGN_Over_fault = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &powerign_over_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PowerIGN_Low_fault = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &powerign_low_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 EPS_Com_fault = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eps_com_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 BCM_Com_fault = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bcm_com_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 EPB_Com_fault = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epb_com_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CPU_Com_fault = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpu_com_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 VCU_Com_fault = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcu_com_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Canbus.proto.FaultInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Canbus.proto.FaultInfo)
  return false;
#undef DO_
}

void FaultInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Canbus.proto.FaultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 EPS_fault = 1;
  if (this->eps_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eps_fault(), output);
  }

  // int32 Brake_fault = 2;
  if (this->brake_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->brake_fault(), output);
  }

  // int32 Drive_fault = 3;
  if (this->drive_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->drive_fault(), output);
  }

  // int32 EPB_fault = 4;
  if (this->epb_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->epb_fault(), output);
  }

  // int32 Power12_Over_fault = 5;
  if (this->power12_over_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->power12_over_fault(), output);
  }

  // int32 Power12_Low_fault = 6;
  if (this->power12_low_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->power12_low_fault(), output);
  }

  // int32 PowerIGN_Over_fault = 7;
  if (this->powerign_over_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->powerign_over_fault(), output);
  }

  // int32 PowerIGN_Low_fault = 8;
  if (this->powerign_low_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->powerign_low_fault(), output);
  }

  // int32 EPS_Com_fault = 9;
  if (this->eps_com_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->eps_com_fault(), output);
  }

  // int32 BCM_Com_fault = 10;
  if (this->bcm_com_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bcm_com_fault(), output);
  }

  // int32 EPB_Com_fault = 11;
  if (this->epb_com_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->epb_com_fault(), output);
  }

  // int32 CPU_Com_fault = 12;
  if (this->cpu_com_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cpu_com_fault(), output);
  }

  // int32 VCU_Com_fault = 13;
  if (this->vcu_com_fault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->vcu_com_fault(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Canbus.proto.FaultInfo)
}

::google::protobuf::uint8* FaultInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Canbus.proto.FaultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 EPS_fault = 1;
  if (this->eps_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eps_fault(), target);
  }

  // int32 Brake_fault = 2;
  if (this->brake_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->brake_fault(), target);
  }

  // int32 Drive_fault = 3;
  if (this->drive_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->drive_fault(), target);
  }

  // int32 EPB_fault = 4;
  if (this->epb_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->epb_fault(), target);
  }

  // int32 Power12_Over_fault = 5;
  if (this->power12_over_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->power12_over_fault(), target);
  }

  // int32 Power12_Low_fault = 6;
  if (this->power12_low_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->power12_low_fault(), target);
  }

  // int32 PowerIGN_Over_fault = 7;
  if (this->powerign_over_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->powerign_over_fault(), target);
  }

  // int32 PowerIGN_Low_fault = 8;
  if (this->powerign_low_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->powerign_low_fault(), target);
  }

  // int32 EPS_Com_fault = 9;
  if (this->eps_com_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->eps_com_fault(), target);
  }

  // int32 BCM_Com_fault = 10;
  if (this->bcm_com_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bcm_com_fault(), target);
  }

  // int32 EPB_Com_fault = 11;
  if (this->epb_com_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->epb_com_fault(), target);
  }

  // int32 CPU_Com_fault = 12;
  if (this->cpu_com_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cpu_com_fault(), target);
  }

  // int32 VCU_Com_fault = 13;
  if (this->vcu_com_fault() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->vcu_com_fault(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canbus.proto.FaultInfo)
  return target;
}

size_t FaultInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canbus.proto.FaultInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 EPS_fault = 1;
  if (this->eps_fault() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eps_fault());
  }

  // int32 Brake_fault = 2;
  if (this->brake_fault() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brake_fault());
  }

  // int32 Drive_fault = 3;
  if (this->drive_fault() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->drive_fault());
  }

  // int32 EPB_fault = 4;
  if (this->epb_fault() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->epb_fault());
  }

  // int32 Power12_Over_fault = 5;
  if (this->power12_over_fault() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->power12_over_fault());
  }

  // int32 Power12_Low_fault = 6;
  if (this->power12_low_fault() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->power12_low_fault());
  }

  // int32 PowerIGN_Over_fault = 7;
  if (this->powerign_over_fault() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->powerign_over_fault());
  }

  // int32 PowerIGN_Low_fault = 8;
  if (this->powerign_low_fault() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->powerign_low_fault());
  }

  // int32 EPS_Com_fault = 9;
  if (this->eps_com_fault() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eps_com_fault());
  }

  // int32 BCM_Com_fault = 10;
  if (this->bcm_com_fault() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bcm_com_fault());
  }

  // int32 EPB_Com_fault = 11;
  if (this->epb_com_fault() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->epb_com_fault());
  }

  // int32 CPU_Com_fault = 12;
  if (this->cpu_com_fault() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cpu_com_fault());
  }

  // int32 VCU_Com_fault = 13;
  if (this->vcu_com_fault() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vcu_com_fault());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaultInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canbus.proto.FaultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FaultInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FaultInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canbus.proto.FaultInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canbus.proto.FaultInfo)
    MergeFrom(*source);
  }
}

void FaultInfo::MergeFrom(const FaultInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canbus.proto.FaultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.eps_fault() != 0) {
    set_eps_fault(from.eps_fault());
  }
  if (from.brake_fault() != 0) {
    set_brake_fault(from.brake_fault());
  }
  if (from.drive_fault() != 0) {
    set_drive_fault(from.drive_fault());
  }
  if (from.epb_fault() != 0) {
    set_epb_fault(from.epb_fault());
  }
  if (from.power12_over_fault() != 0) {
    set_power12_over_fault(from.power12_over_fault());
  }
  if (from.power12_low_fault() != 0) {
    set_power12_low_fault(from.power12_low_fault());
  }
  if (from.powerign_over_fault() != 0) {
    set_powerign_over_fault(from.powerign_over_fault());
  }
  if (from.powerign_low_fault() != 0) {
    set_powerign_low_fault(from.powerign_low_fault());
  }
  if (from.eps_com_fault() != 0) {
    set_eps_com_fault(from.eps_com_fault());
  }
  if (from.bcm_com_fault() != 0) {
    set_bcm_com_fault(from.bcm_com_fault());
  }
  if (from.epb_com_fault() != 0) {
    set_epb_com_fault(from.epb_com_fault());
  }
  if (from.cpu_com_fault() != 0) {
    set_cpu_com_fault(from.cpu_com_fault());
  }
  if (from.vcu_com_fault() != 0) {
    set_vcu_com_fault(from.vcu_com_fault());
  }
}

void FaultInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canbus.proto.FaultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaultInfo::CopyFrom(const FaultInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canbus.proto.FaultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaultInfo::IsInitialized() const {
  return true;
}

void FaultInfo::Swap(FaultInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FaultInfo::InternalSwap(FaultInfo* other) {
  using std::swap;
  swap(eps_fault_, other->eps_fault_);
  swap(brake_fault_, other->brake_fault_);
  swap(drive_fault_, other->drive_fault_);
  swap(epb_fault_, other->epb_fault_);
  swap(power12_over_fault_, other->power12_over_fault_);
  swap(power12_low_fault_, other->power12_low_fault_);
  swap(powerign_over_fault_, other->powerign_over_fault_);
  swap(powerign_low_fault_, other->powerign_low_fault_);
  swap(eps_com_fault_, other->eps_com_fault_);
  swap(bcm_com_fault_, other->bcm_com_fault_);
  swap(epb_com_fault_, other->epb_com_fault_);
  swap(cpu_com_fault_, other->cpu_com_fault_);
  swap(vcu_com_fault_, other->vcu_com_fault_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FaultInfo::GetMetadata() const {
  protobuf_Canbus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Canbus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KeyState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyState::kEmergencyBrakeKeyStateFieldNumber;
const int KeyState::kSlowBrakeKeyStateFieldNumber;
const int KeyState::kDriveKeyStateFieldNumber;
const int KeyState::kBreakStateFieldNumber;
const int KeyState::kAutoSwitchStateFieldNumber;
const int KeyState::kActiveSwitchStateFieldNumber;
const int KeyState::kSteerLeftUpFieldNumber;
const int KeyState::kSteerLeftDownFieldNumber;
const int KeyState::kSteerLeftLeftFieldNumber;
const int KeyState::kSteerLeftRightFieldNumber;
const int KeyState::kTurnLightSwitchFieldNumber;
const int KeyState::kPositionLightSwitchFieldNumber;
const int KeyState::kFrontWiperSwitchFieldNumber;
const int KeyState::kHazardLampSwitchFieldNumber;
const int KeyState::kDoorClosingButtonFieldNumber;
const int KeyState::kDoorOpeningButtonFieldNumber;
const int KeyState::kTopLightButtonFieldNumber;
const int KeyState::kFrontWasherSwitchFieldNumber;
const int KeyState::kLowbeamSwitchFieldNumber;
const int KeyState::kHighbeamSwitchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyState::KeyState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Canbus_2eproto::InitDefaultsKeyState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Canbus.proto.KeyState)
}
KeyState::KeyState(const KeyState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&emergency_brake_key_state_, &from.emergency_brake_key_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&highbeam_switch_) -
    reinterpret_cast<char*>(&emergency_brake_key_state_)) + sizeof(highbeam_switch_));
  // @@protoc_insertion_point(copy_constructor:Canbus.proto.KeyState)
}

void KeyState::SharedCtor() {
  ::memset(&emergency_brake_key_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&highbeam_switch_) -
      reinterpret_cast<char*>(&emergency_brake_key_state_)) + sizeof(highbeam_switch_));
  _cached_size_ = 0;
}

KeyState::~KeyState() {
  // @@protoc_insertion_point(destructor:Canbus.proto.KeyState)
  SharedDtor();
}

void KeyState::SharedDtor() {
}

void KeyState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyState::descriptor() {
  ::protobuf_Canbus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Canbus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyState& KeyState::default_instance() {
  ::protobuf_Canbus_2eproto::InitDefaultsKeyState();
  return *internal_default_instance();
}

KeyState* KeyState::New(::google::protobuf::Arena* arena) const {
  KeyState* n = new KeyState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyState::Clear() {
// @@protoc_insertion_point(message_clear_start:Canbus.proto.KeyState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&emergency_brake_key_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&highbeam_switch_) -
      reinterpret_cast<char*>(&emergency_brake_key_state_)) + sizeof(highbeam_switch_));
  _internal_metadata_.Clear();
}

bool KeyState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Canbus.proto.KeyState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 emergency_brake_key_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emergency_brake_key_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 slow_brake_key_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slow_brake_key_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 drive_key_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drive_key_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 break_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &break_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 auto_switch_state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_switch_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 active_switch_state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_switch_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 steer_left_up = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steer_left_up_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 steer_left_down = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steer_left_down_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 steer_left_left = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steer_left_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 steer_left_right = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steer_left_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 turn_light_switch = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turn_light_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 position_light_switch = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_light_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 front_wiper_switch = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_wiper_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hazard_lamp_switch = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hazard_lamp_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 door_closing_button = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &door_closing_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 door_opening_button = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &door_opening_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 top_light_button = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_light_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 front_washer_switch = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_washer_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lowbeam_switch = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lowbeam_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 highbeam_switch = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &highbeam_switch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Canbus.proto.KeyState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Canbus.proto.KeyState)
  return false;
#undef DO_
}

void KeyState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Canbus.proto.KeyState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 emergency_brake_key_state = 1;
  if (this->emergency_brake_key_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->emergency_brake_key_state(), output);
  }

  // int32 slow_brake_key_state = 2;
  if (this->slow_brake_key_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slow_brake_key_state(), output);
  }

  // int32 drive_key_state = 3;
  if (this->drive_key_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->drive_key_state(), output);
  }

  // int32 break_state = 4;
  if (this->break_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->break_state(), output);
  }

  // int32 auto_switch_state = 5;
  if (this->auto_switch_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->auto_switch_state(), output);
  }

  // int32 active_switch_state = 6;
  if (this->active_switch_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->active_switch_state(), output);
  }

  // int32 steer_left_up = 7;
  if (this->steer_left_up() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->steer_left_up(), output);
  }

  // int32 steer_left_down = 8;
  if (this->steer_left_down() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->steer_left_down(), output);
  }

  // int32 steer_left_left = 9;
  if (this->steer_left_left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->steer_left_left(), output);
  }

  // int32 steer_left_right = 10;
  if (this->steer_left_right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->steer_left_right(), output);
  }

  // int32 turn_light_switch = 11;
  if (this->turn_light_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->turn_light_switch(), output);
  }

  // int32 position_light_switch = 12;
  if (this->position_light_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->position_light_switch(), output);
  }

  // int32 front_wiper_switch = 13;
  if (this->front_wiper_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->front_wiper_switch(), output);
  }

  // int32 hazard_lamp_switch = 14;
  if (this->hazard_lamp_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->hazard_lamp_switch(), output);
  }

  // int32 door_closing_button = 15;
  if (this->door_closing_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->door_closing_button(), output);
  }

  // int32 door_opening_button = 16;
  if (this->door_opening_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->door_opening_button(), output);
  }

  // int32 top_light_button = 17;
  if (this->top_light_button() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->top_light_button(), output);
  }

  // int32 front_washer_switch = 18;
  if (this->front_washer_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->front_washer_switch(), output);
  }

  // int32 lowbeam_switch = 19;
  if (this->lowbeam_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->lowbeam_switch(), output);
  }

  // int32 highbeam_switch = 20;
  if (this->highbeam_switch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->highbeam_switch(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Canbus.proto.KeyState)
}

::google::protobuf::uint8* KeyState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Canbus.proto.KeyState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 emergency_brake_key_state = 1;
  if (this->emergency_brake_key_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->emergency_brake_key_state(), target);
  }

  // int32 slow_brake_key_state = 2;
  if (this->slow_brake_key_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slow_brake_key_state(), target);
  }

  // int32 drive_key_state = 3;
  if (this->drive_key_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->drive_key_state(), target);
  }

  // int32 break_state = 4;
  if (this->break_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->break_state(), target);
  }

  // int32 auto_switch_state = 5;
  if (this->auto_switch_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->auto_switch_state(), target);
  }

  // int32 active_switch_state = 6;
  if (this->active_switch_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->active_switch_state(), target);
  }

  // int32 steer_left_up = 7;
  if (this->steer_left_up() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->steer_left_up(), target);
  }

  // int32 steer_left_down = 8;
  if (this->steer_left_down() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->steer_left_down(), target);
  }

  // int32 steer_left_left = 9;
  if (this->steer_left_left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->steer_left_left(), target);
  }

  // int32 steer_left_right = 10;
  if (this->steer_left_right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->steer_left_right(), target);
  }

  // int32 turn_light_switch = 11;
  if (this->turn_light_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->turn_light_switch(), target);
  }

  // int32 position_light_switch = 12;
  if (this->position_light_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->position_light_switch(), target);
  }

  // int32 front_wiper_switch = 13;
  if (this->front_wiper_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->front_wiper_switch(), target);
  }

  // int32 hazard_lamp_switch = 14;
  if (this->hazard_lamp_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->hazard_lamp_switch(), target);
  }

  // int32 door_closing_button = 15;
  if (this->door_closing_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->door_closing_button(), target);
  }

  // int32 door_opening_button = 16;
  if (this->door_opening_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->door_opening_button(), target);
  }

  // int32 top_light_button = 17;
  if (this->top_light_button() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->top_light_button(), target);
  }

  // int32 front_washer_switch = 18;
  if (this->front_washer_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->front_washer_switch(), target);
  }

  // int32 lowbeam_switch = 19;
  if (this->lowbeam_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->lowbeam_switch(), target);
  }

  // int32 highbeam_switch = 20;
  if (this->highbeam_switch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->highbeam_switch(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canbus.proto.KeyState)
  return target;
}

size_t KeyState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canbus.proto.KeyState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 emergency_brake_key_state = 1;
  if (this->emergency_brake_key_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->emergency_brake_key_state());
  }

  // int32 slow_brake_key_state = 2;
  if (this->slow_brake_key_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slow_brake_key_state());
  }

  // int32 drive_key_state = 3;
  if (this->drive_key_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->drive_key_state());
  }

  // int32 break_state = 4;
  if (this->break_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->break_state());
  }

  // int32 auto_switch_state = 5;
  if (this->auto_switch_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->auto_switch_state());
  }

  // int32 active_switch_state = 6;
  if (this->active_switch_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->active_switch_state());
  }

  // int32 steer_left_up = 7;
  if (this->steer_left_up() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->steer_left_up());
  }

  // int32 steer_left_down = 8;
  if (this->steer_left_down() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->steer_left_down());
  }

  // int32 steer_left_left = 9;
  if (this->steer_left_left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->steer_left_left());
  }

  // int32 steer_left_right = 10;
  if (this->steer_left_right() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->steer_left_right());
  }

  // int32 turn_light_switch = 11;
  if (this->turn_light_switch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->turn_light_switch());
  }

  // int32 position_light_switch = 12;
  if (this->position_light_switch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position_light_switch());
  }

  // int32 front_wiper_switch = 13;
  if (this->front_wiper_switch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->front_wiper_switch());
  }

  // int32 hazard_lamp_switch = 14;
  if (this->hazard_lamp_switch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hazard_lamp_switch());
  }

  // int32 door_closing_button = 15;
  if (this->door_closing_button() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->door_closing_button());
  }

  // int32 door_opening_button = 16;
  if (this->door_opening_button() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->door_opening_button());
  }

  // int32 top_light_button = 17;
  if (this->top_light_button() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->top_light_button());
  }

  // int32 front_washer_switch = 18;
  if (this->front_washer_switch() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->front_washer_switch());
  }

  // int32 lowbeam_switch = 19;
  if (this->lowbeam_switch() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lowbeam_switch());
  }

  // int32 highbeam_switch = 20;
  if (this->highbeam_switch() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->highbeam_switch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canbus.proto.KeyState)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canbus.proto.KeyState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canbus.proto.KeyState)
    MergeFrom(*source);
  }
}

void KeyState::MergeFrom(const KeyState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canbus.proto.KeyState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.emergency_brake_key_state() != 0) {
    set_emergency_brake_key_state(from.emergency_brake_key_state());
  }
  if (from.slow_brake_key_state() != 0) {
    set_slow_brake_key_state(from.slow_brake_key_state());
  }
  if (from.drive_key_state() != 0) {
    set_drive_key_state(from.drive_key_state());
  }
  if (from.break_state() != 0) {
    set_break_state(from.break_state());
  }
  if (from.auto_switch_state() != 0) {
    set_auto_switch_state(from.auto_switch_state());
  }
  if (from.active_switch_state() != 0) {
    set_active_switch_state(from.active_switch_state());
  }
  if (from.steer_left_up() != 0) {
    set_steer_left_up(from.steer_left_up());
  }
  if (from.steer_left_down() != 0) {
    set_steer_left_down(from.steer_left_down());
  }
  if (from.steer_left_left() != 0) {
    set_steer_left_left(from.steer_left_left());
  }
  if (from.steer_left_right() != 0) {
    set_steer_left_right(from.steer_left_right());
  }
  if (from.turn_light_switch() != 0) {
    set_turn_light_switch(from.turn_light_switch());
  }
  if (from.position_light_switch() != 0) {
    set_position_light_switch(from.position_light_switch());
  }
  if (from.front_wiper_switch() != 0) {
    set_front_wiper_switch(from.front_wiper_switch());
  }
  if (from.hazard_lamp_switch() != 0) {
    set_hazard_lamp_switch(from.hazard_lamp_switch());
  }
  if (from.door_closing_button() != 0) {
    set_door_closing_button(from.door_closing_button());
  }
  if (from.door_opening_button() != 0) {
    set_door_opening_button(from.door_opening_button());
  }
  if (from.top_light_button() != 0) {
    set_top_light_button(from.top_light_button());
  }
  if (from.front_washer_switch() != 0) {
    set_front_washer_switch(from.front_washer_switch());
  }
  if (from.lowbeam_switch() != 0) {
    set_lowbeam_switch(from.lowbeam_switch());
  }
  if (from.highbeam_switch() != 0) {
    set_highbeam_switch(from.highbeam_switch());
  }
}

void KeyState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canbus.proto.KeyState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyState::CopyFrom(const KeyState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canbus.proto.KeyState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyState::IsInitialized() const {
  return true;
}

void KeyState::Swap(KeyState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyState::InternalSwap(KeyState* other) {
  using std::swap;
  swap(emergency_brake_key_state_, other->emergency_brake_key_state_);
  swap(slow_brake_key_state_, other->slow_brake_key_state_);
  swap(drive_key_state_, other->drive_key_state_);
  swap(break_state_, other->break_state_);
  swap(auto_switch_state_, other->auto_switch_state_);
  swap(active_switch_state_, other->active_switch_state_);
  swap(steer_left_up_, other->steer_left_up_);
  swap(steer_left_down_, other->steer_left_down_);
  swap(steer_left_left_, other->steer_left_left_);
  swap(steer_left_right_, other->steer_left_right_);
  swap(turn_light_switch_, other->turn_light_switch_);
  swap(position_light_switch_, other->position_light_switch_);
  swap(front_wiper_switch_, other->front_wiper_switch_);
  swap(hazard_lamp_switch_, other->hazard_lamp_switch_);
  swap(door_closing_button_, other->door_closing_button_);
  swap(door_opening_button_, other->door_opening_button_);
  swap(top_light_button_, other->top_light_button_);
  swap(front_washer_switch_, other->front_washer_switch_);
  swap(lowbeam_switch_, other->lowbeam_switch_);
  swap(highbeam_switch_, other->highbeam_switch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyState::GetMetadata() const {
  protobuf_Canbus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Canbus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleInfo::kSteerangleFieldNumber;
const int VehicleInfo::kSpeedFieldNumber;
const int VehicleInfo::kDCDCWorkStateFieldNumber;
const int VehicleInfo::kBatteryStatusFieldNumber;
const int VehicleInfo::kShiftPositionFieldNumber;
const int VehicleInfo::kEpbStatusFieldNumber;
const int VehicleInfo::kCurrentDriveModeFieldNumber;
const int VehicleInfo::kControlSwitchStateFieldNumber;
const int VehicleInfo::kBrakeSwitchStateFieldNumber;
const int VehicleInfo::kBreakPressureFieldNumber;
const int VehicleInfo::kAccpedalposiFieldNumber;
const int VehicleInfo::kLonAccelFieldNumber;
const int VehicleInfo::kLonJerkFieldNumber;
const int VehicleInfo::kLatAccelFieldNumber;
const int VehicleInfo::kLatJerkFieldNumber;
const int VehicleInfo::kYawrateFieldNumber;
const int VehicleInfo::kSteerwheeltorqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleInfo::VehicleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Canbus_2eproto::InitDefaultsVehicleInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Canbus.proto.VehicleInfo)
}
VehicleInfo::VehicleInfo(const VehicleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steerangle_, &from.steerangle_,
    static_cast<size_t>(reinterpret_cast<char*>(&steerwheeltorq_) -
    reinterpret_cast<char*>(&steerangle_)) + sizeof(steerwheeltorq_));
  // @@protoc_insertion_point(copy_constructor:Canbus.proto.VehicleInfo)
}

void VehicleInfo::SharedCtor() {
  ::memset(&steerangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steerwheeltorq_) -
      reinterpret_cast<char*>(&steerangle_)) + sizeof(steerwheeltorq_));
  _cached_size_ = 0;
}

VehicleInfo::~VehicleInfo() {
  // @@protoc_insertion_point(destructor:Canbus.proto.VehicleInfo)
  SharedDtor();
}

void VehicleInfo::SharedDtor() {
}

void VehicleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleInfo::descriptor() {
  ::protobuf_Canbus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Canbus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleInfo& VehicleInfo::default_instance() {
  ::protobuf_Canbus_2eproto::InitDefaultsVehicleInfo();
  return *internal_default_instance();
}

VehicleInfo* VehicleInfo::New(::google::protobuf::Arena* arena) const {
  VehicleInfo* n = new VehicleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Canbus.proto.VehicleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&steerangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steerwheeltorq_) -
      reinterpret_cast<char*>(&steerangle_)) + sizeof(steerwheeltorq_));
  _internal_metadata_.Clear();
}

bool VehicleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Canbus.proto.VehicleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float steerangle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steerangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 DCDC_work_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dcdc_work_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 batteryStatus = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batterystatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 shift_position = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shift_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 epb_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epb_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 current_drive_mode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_drive_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 control_switch_state = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_switch_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 brake_switch_state = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brake_switch_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float break_pressure = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &break_pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float accpedalposi = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accpedalposi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lon_accel = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lon_jerk = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_jerk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat_accel = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lat_jerk = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lat_jerk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yawrate = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yawrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float steerwheeltorq = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steerwheeltorq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Canbus.proto.VehicleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Canbus.proto.VehicleInfo)
  return false;
#undef DO_
}

void VehicleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Canbus.proto.VehicleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float steerangle = 1;
  if (this->steerangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->steerangle(), output);
  }

  // float speed = 2;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->speed(), output);
  }

  // int32 DCDC_work_state = 3;
  if (this->dcdc_work_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dcdc_work_state(), output);
  }

  // int32 batteryStatus = 4;
  if (this->batterystatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->batterystatus(), output);
  }

  // int32 shift_position = 5;
  if (this->shift_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->shift_position(), output);
  }

  // int32 epb_status = 6;
  if (this->epb_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->epb_status(), output);
  }

  // int32 current_drive_mode = 7;
  if (this->current_drive_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->current_drive_mode(), output);
  }

  // int32 control_switch_state = 8;
  if (this->control_switch_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->control_switch_state(), output);
  }

  // int32 brake_switch_state = 9;
  if (this->brake_switch_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->brake_switch_state(), output);
  }

  // float break_pressure = 10;
  if (this->break_pressure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->break_pressure(), output);
  }

  // float accpedalposi = 11;
  if (this->accpedalposi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->accpedalposi(), output);
  }

  // float lon_accel = 12;
  if (this->lon_accel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->lon_accel(), output);
  }

  // float lon_jerk = 13;
  if (this->lon_jerk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->lon_jerk(), output);
  }

  // float lat_accel = 14;
  if (this->lat_accel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->lat_accel(), output);
  }

  // float lat_jerk = 15;
  if (this->lat_jerk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->lat_jerk(), output);
  }

  // float yawrate = 16;
  if (this->yawrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->yawrate(), output);
  }

  // float steerwheeltorq = 17;
  if (this->steerwheeltorq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->steerwheeltorq(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Canbus.proto.VehicleInfo)
}

::google::protobuf::uint8* VehicleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Canbus.proto.VehicleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float steerangle = 1;
  if (this->steerangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->steerangle(), target);
  }

  // float speed = 2;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->speed(), target);
  }

  // int32 DCDC_work_state = 3;
  if (this->dcdc_work_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dcdc_work_state(), target);
  }

  // int32 batteryStatus = 4;
  if (this->batterystatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->batterystatus(), target);
  }

  // int32 shift_position = 5;
  if (this->shift_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->shift_position(), target);
  }

  // int32 epb_status = 6;
  if (this->epb_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->epb_status(), target);
  }

  // int32 current_drive_mode = 7;
  if (this->current_drive_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->current_drive_mode(), target);
  }

  // int32 control_switch_state = 8;
  if (this->control_switch_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->control_switch_state(), target);
  }

  // int32 brake_switch_state = 9;
  if (this->brake_switch_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->brake_switch_state(), target);
  }

  // float break_pressure = 10;
  if (this->break_pressure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->break_pressure(), target);
  }

  // float accpedalposi = 11;
  if (this->accpedalposi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->accpedalposi(), target);
  }

  // float lon_accel = 12;
  if (this->lon_accel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->lon_accel(), target);
  }

  // float lon_jerk = 13;
  if (this->lon_jerk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->lon_jerk(), target);
  }

  // float lat_accel = 14;
  if (this->lat_accel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->lat_accel(), target);
  }

  // float lat_jerk = 15;
  if (this->lat_jerk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->lat_jerk(), target);
  }

  // float yawrate = 16;
  if (this->yawrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->yawrate(), target);
  }

  // float steerwheeltorq = 17;
  if (this->steerwheeltorq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->steerwheeltorq(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canbus.proto.VehicleInfo)
  return target;
}

size_t VehicleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canbus.proto.VehicleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float steerangle = 1;
  if (this->steerangle() != 0) {
    total_size += 1 + 4;
  }

  // float speed = 2;
  if (this->speed() != 0) {
    total_size += 1 + 4;
  }

  // int32 DCDC_work_state = 3;
  if (this->dcdc_work_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dcdc_work_state());
  }

  // int32 batteryStatus = 4;
  if (this->batterystatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->batterystatus());
  }

  // int32 shift_position = 5;
  if (this->shift_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shift_position());
  }

  // int32 epb_status = 6;
  if (this->epb_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->epb_status());
  }

  // int32 current_drive_mode = 7;
  if (this->current_drive_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_drive_mode());
  }

  // int32 control_switch_state = 8;
  if (this->control_switch_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->control_switch_state());
  }

  // int32 brake_switch_state = 9;
  if (this->brake_switch_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brake_switch_state());
  }

  // float break_pressure = 10;
  if (this->break_pressure() != 0) {
    total_size += 1 + 4;
  }

  // float accpedalposi = 11;
  if (this->accpedalposi() != 0) {
    total_size += 1 + 4;
  }

  // float lon_accel = 12;
  if (this->lon_accel() != 0) {
    total_size += 1 + 4;
  }

  // float lon_jerk = 13;
  if (this->lon_jerk() != 0) {
    total_size += 1 + 4;
  }

  // float lat_accel = 14;
  if (this->lat_accel() != 0) {
    total_size += 1 + 4;
  }

  // float lat_jerk = 15;
  if (this->lat_jerk() != 0) {
    total_size += 1 + 4;
  }

  // float yawrate = 16;
  if (this->yawrate() != 0) {
    total_size += 2 + 4;
  }

  // float steerwheeltorq = 17;
  if (this->steerwheeltorq() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canbus.proto.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canbus.proto.VehicleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canbus.proto.VehicleInfo)
    MergeFrom(*source);
  }
}

void VehicleInfo::MergeFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canbus.proto.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.steerangle() != 0) {
    set_steerangle(from.steerangle());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.dcdc_work_state() != 0) {
    set_dcdc_work_state(from.dcdc_work_state());
  }
  if (from.batterystatus() != 0) {
    set_batterystatus(from.batterystatus());
  }
  if (from.shift_position() != 0) {
    set_shift_position(from.shift_position());
  }
  if (from.epb_status() != 0) {
    set_epb_status(from.epb_status());
  }
  if (from.current_drive_mode() != 0) {
    set_current_drive_mode(from.current_drive_mode());
  }
  if (from.control_switch_state() != 0) {
    set_control_switch_state(from.control_switch_state());
  }
  if (from.brake_switch_state() != 0) {
    set_brake_switch_state(from.brake_switch_state());
  }
  if (from.break_pressure() != 0) {
    set_break_pressure(from.break_pressure());
  }
  if (from.accpedalposi() != 0) {
    set_accpedalposi(from.accpedalposi());
  }
  if (from.lon_accel() != 0) {
    set_lon_accel(from.lon_accel());
  }
  if (from.lon_jerk() != 0) {
    set_lon_jerk(from.lon_jerk());
  }
  if (from.lat_accel() != 0) {
    set_lat_accel(from.lat_accel());
  }
  if (from.lat_jerk() != 0) {
    set_lat_jerk(from.lat_jerk());
  }
  if (from.yawrate() != 0) {
    set_yawrate(from.yawrate());
  }
  if (from.steerwheeltorq() != 0) {
    set_steerwheeltorq(from.steerwheeltorq());
  }
}

void VehicleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canbus.proto.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleInfo::CopyFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canbus.proto.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleInfo::IsInitialized() const {
  return true;
}

void VehicleInfo::Swap(VehicleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleInfo::InternalSwap(VehicleInfo* other) {
  using std::swap;
  swap(steerangle_, other->steerangle_);
  swap(speed_, other->speed_);
  swap(dcdc_work_state_, other->dcdc_work_state_);
  swap(batterystatus_, other->batterystatus_);
  swap(shift_position_, other->shift_position_);
  swap(epb_status_, other->epb_status_);
  swap(current_drive_mode_, other->current_drive_mode_);
  swap(control_switch_state_, other->control_switch_state_);
  swap(brake_switch_state_, other->brake_switch_state_);
  swap(break_pressure_, other->break_pressure_);
  swap(accpedalposi_, other->accpedalposi_);
  swap(lon_accel_, other->lon_accel_);
  swap(lon_jerk_, other->lon_jerk_);
  swap(lat_accel_, other->lat_accel_);
  swap(lat_jerk_, other->lat_jerk_);
  swap(yawrate_, other->yawrate_);
  swap(steerwheeltorq_, other->steerwheeltorq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleInfo::GetMetadata() const {
  protobuf_Canbus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Canbus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleState::kBrakeLightStateFieldNumber;
const int VehicleState::kDoubleflashLightStateFieldNumber;
const int VehicleState::kLowbeamStateFieldNumber;
const int VehicleState::kHighbeamStateFieldNumber;
const int VehicleState::kLeftturnLightStateFieldNumber;
const int VehicleState::kRightturnLightStateFieldNumber;
const int VehicleState::kFrontfogLightStateFieldNumber;
const int VehicleState::kRearfogLightStateFieldNumber;
const int VehicleState::kTailLightStateFieldNumber;
const int VehicleState::kHornStateFieldNumber;
const int VehicleState::kWiperStateFieldNumber;
const int VehicleState::kDriverDoorStateFieldNumber;
const int VehicleState::kPassagerDoorStateFieldNumber;
const int VehicleState::kDriverDoorLockStateFieldNumber;
const int VehicleState::kPassagerDoorLockStateFieldNumber;
const int VehicleState::kLeftRearDoorLockStateFieldNumber;
const int VehicleState::kRightRearDoorLockStateFieldNumber;
const int VehicleState::kTrunkStateFieldNumber;
const int VehicleState::kDriverSeatbeltrstFieldNumber;
const int VehicleState::kPassagerSeatbeltrstFieldNumber;
const int VehicleState::kBmsBatterySocFieldNumber;
const int VehicleState::kVehicleTotalMileFieldNumber;
const int VehicleState::kMileLeftOverFieldNumber;
const int VehicleState::kVehicleTemperatureFieldNumber;
const int VehicleState::kFrontWasherStateFieldNumber;
const int VehicleState::kTopLightStateFieldNumber;
const int VehicleState::kTyreStateFieldNumber;
const int VehicleState::kEpsModeFbFieldNumber;
const int VehicleState::kAcclModeFbFieldNumber;
const int VehicleState::kBrakModeFbFieldNumber;
const int VehicleState::kEpbModeFbFieldNumber;
const int VehicleState::kBcmModeFbFieldNumber;
const int VehicleState::kAcclAllowFieldNumber;
const int VehicleState::kEpbAllowFieldNumber;
const int VehicleState::kGearInterveneFieldNumber;
const int VehicleState::kVcuAdExitreqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleState::VehicleState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Canbus_2eproto::InitDefaultsVehicleState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Canbus.proto.VehicleState)
}
VehicleState::VehicleState(const VehicleState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brake_light_state_, &from.brake_light_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&vcu_ad_exitreq_) -
    reinterpret_cast<char*>(&brake_light_state_)) + sizeof(vcu_ad_exitreq_));
  // @@protoc_insertion_point(copy_constructor:Canbus.proto.VehicleState)
}

void VehicleState::SharedCtor() {
  ::memset(&brake_light_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vcu_ad_exitreq_) -
      reinterpret_cast<char*>(&brake_light_state_)) + sizeof(vcu_ad_exitreq_));
  _cached_size_ = 0;
}

VehicleState::~VehicleState() {
  // @@protoc_insertion_point(destructor:Canbus.proto.VehicleState)
  SharedDtor();
}

void VehicleState::SharedDtor() {
}

void VehicleState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleState::descriptor() {
  ::protobuf_Canbus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Canbus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleState& VehicleState::default_instance() {
  ::protobuf_Canbus_2eproto::InitDefaultsVehicleState();
  return *internal_default_instance();
}

VehicleState* VehicleState::New(::google::protobuf::Arena* arena) const {
  VehicleState* n = new VehicleState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleState::Clear() {
// @@protoc_insertion_point(message_clear_start:Canbus.proto.VehicleState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&brake_light_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vcu_ad_exitreq_) -
      reinterpret_cast<char*>(&brake_light_state_)) + sizeof(vcu_ad_exitreq_));
  _internal_metadata_.Clear();
}

bool VehicleState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Canbus.proto.VehicleState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 brake_light_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brake_light_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 doubleflash_light_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doubleflash_light_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lowbeam_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lowbeam_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 highbeam_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &highbeam_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 leftturn_light_state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftturn_light_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rightturn_light_state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rightturn_light_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frontfog_light_state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontfog_light_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rearfog_light_state = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rearfog_light_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tail_light_state = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tail_light_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 horn_state = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horn_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 wiper_state = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wiper_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 driver_door_state = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &driver_door_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 passager_door_state = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passager_door_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 driver_door_lock_state = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &driver_door_lock_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 passager_door_lock_state = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passager_door_lock_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left_rear_door_lock_state = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_rear_door_lock_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right_rear_door_lock_state = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_rear_door_lock_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trunk_state = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trunk_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 driver_seatbeltrst = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &driver_seatbeltrst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 passager_seatbeltrst = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passager_seatbeltrst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double bms_battery_soc = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bms_battery_soc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vehicle_total_mile = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_total_mile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double mile_left_over = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mile_left_over_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vehicle_temperature = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 front_washer_state = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_washer_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 top_light_state = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_light_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tyre_state = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tyre_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 eps_mode_fb = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eps_mode_fb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 accl_mode_fb = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accl_mode_fb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 brak_mode_fb = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brak_mode_fb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 epb_mode_fb = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epb_mode_fb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bcm_mode_fb = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bcm_mode_fb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 accl_allow = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accl_allow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 epb_allow = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epb_allow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gear_intervene = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_intervene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vcu_ad_exitreq = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vcu_ad_exitreq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Canbus.proto.VehicleState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Canbus.proto.VehicleState)
  return false;
#undef DO_
}

void VehicleState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Canbus.proto.VehicleState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 brake_light_state = 1;
  if (this->brake_light_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->brake_light_state(), output);
  }

  // int32 doubleflash_light_state = 2;
  if (this->doubleflash_light_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->doubleflash_light_state(), output);
  }

  // int32 lowbeam_state = 3;
  if (this->lowbeam_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lowbeam_state(), output);
  }

  // int32 highbeam_state = 4;
  if (this->highbeam_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->highbeam_state(), output);
  }

  // int32 leftturn_light_state = 5;
  if (this->leftturn_light_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leftturn_light_state(), output);
  }

  // int32 rightturn_light_state = 6;
  if (this->rightturn_light_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rightturn_light_state(), output);
  }

  // int32 frontfog_light_state = 7;
  if (this->frontfog_light_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->frontfog_light_state(), output);
  }

  // int32 rearfog_light_state = 8;
  if (this->rearfog_light_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rearfog_light_state(), output);
  }

  // int32 tail_light_state = 9;
  if (this->tail_light_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->tail_light_state(), output);
  }

  // int32 horn_state = 10;
  if (this->horn_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->horn_state(), output);
  }

  // int32 wiper_state = 11;
  if (this->wiper_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->wiper_state(), output);
  }

  // int32 driver_door_state = 12;
  if (this->driver_door_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->driver_door_state(), output);
  }

  // int32 passager_door_state = 13;
  if (this->passager_door_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->passager_door_state(), output);
  }

  // int32 driver_door_lock_state = 14;
  if (this->driver_door_lock_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->driver_door_lock_state(), output);
  }

  // int32 passager_door_lock_state = 15;
  if (this->passager_door_lock_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->passager_door_lock_state(), output);
  }

  // int32 left_rear_door_lock_state = 16;
  if (this->left_rear_door_lock_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->left_rear_door_lock_state(), output);
  }

  // int32 right_rear_door_lock_state = 17;
  if (this->right_rear_door_lock_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->right_rear_door_lock_state(), output);
  }

  // int32 trunk_state = 18;
  if (this->trunk_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->trunk_state(), output);
  }

  // int32 driver_seatbeltrst = 19;
  if (this->driver_seatbeltrst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->driver_seatbeltrst(), output);
  }

  // int32 passager_seatbeltrst = 20;
  if (this->passager_seatbeltrst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->passager_seatbeltrst(), output);
  }

  // double bms_battery_soc = 21;
  if (this->bms_battery_soc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->bms_battery_soc(), output);
  }

  // double vehicle_total_mile = 22;
  if (this->vehicle_total_mile() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->vehicle_total_mile(), output);
  }

  // double mile_left_over = 23;
  if (this->mile_left_over() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->mile_left_over(), output);
  }

  // double vehicle_temperature = 24;
  if (this->vehicle_temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->vehicle_temperature(), output);
  }

  // int32 front_washer_state = 25;
  if (this->front_washer_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->front_washer_state(), output);
  }

  // int32 top_light_state = 26;
  if (this->top_light_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->top_light_state(), output);
  }

  // int32 tyre_state = 27;
  if (this->tyre_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->tyre_state(), output);
  }

  // int32 eps_mode_fb = 28;
  if (this->eps_mode_fb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->eps_mode_fb(), output);
  }

  // int32 accl_mode_fb = 29;
  if (this->accl_mode_fb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->accl_mode_fb(), output);
  }

  // int32 brak_mode_fb = 30;
  if (this->brak_mode_fb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->brak_mode_fb(), output);
  }

  // int32 epb_mode_fb = 31;
  if (this->epb_mode_fb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->epb_mode_fb(), output);
  }

  // int32 bcm_mode_fb = 32;
  if (this->bcm_mode_fb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->bcm_mode_fb(), output);
  }

  // int32 accl_allow = 33;
  if (this->accl_allow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->accl_allow(), output);
  }

  // int32 epb_allow = 34;
  if (this->epb_allow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->epb_allow(), output);
  }

  // int32 gear_intervene = 35;
  if (this->gear_intervene() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->gear_intervene(), output);
  }

  // int32 vcu_ad_exitreq = 36;
  if (this->vcu_ad_exitreq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->vcu_ad_exitreq(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Canbus.proto.VehicleState)
}

::google::protobuf::uint8* VehicleState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Canbus.proto.VehicleState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 brake_light_state = 1;
  if (this->brake_light_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->brake_light_state(), target);
  }

  // int32 doubleflash_light_state = 2;
  if (this->doubleflash_light_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->doubleflash_light_state(), target);
  }

  // int32 lowbeam_state = 3;
  if (this->lowbeam_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lowbeam_state(), target);
  }

  // int32 highbeam_state = 4;
  if (this->highbeam_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->highbeam_state(), target);
  }

  // int32 leftturn_light_state = 5;
  if (this->leftturn_light_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->leftturn_light_state(), target);
  }

  // int32 rightturn_light_state = 6;
  if (this->rightturn_light_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rightturn_light_state(), target);
  }

  // int32 frontfog_light_state = 7;
  if (this->frontfog_light_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->frontfog_light_state(), target);
  }

  // int32 rearfog_light_state = 8;
  if (this->rearfog_light_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rearfog_light_state(), target);
  }

  // int32 tail_light_state = 9;
  if (this->tail_light_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->tail_light_state(), target);
  }

  // int32 horn_state = 10;
  if (this->horn_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->horn_state(), target);
  }

  // int32 wiper_state = 11;
  if (this->wiper_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->wiper_state(), target);
  }

  // int32 driver_door_state = 12;
  if (this->driver_door_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->driver_door_state(), target);
  }

  // int32 passager_door_state = 13;
  if (this->passager_door_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->passager_door_state(), target);
  }

  // int32 driver_door_lock_state = 14;
  if (this->driver_door_lock_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->driver_door_lock_state(), target);
  }

  // int32 passager_door_lock_state = 15;
  if (this->passager_door_lock_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->passager_door_lock_state(), target);
  }

  // int32 left_rear_door_lock_state = 16;
  if (this->left_rear_door_lock_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->left_rear_door_lock_state(), target);
  }

  // int32 right_rear_door_lock_state = 17;
  if (this->right_rear_door_lock_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->right_rear_door_lock_state(), target);
  }

  // int32 trunk_state = 18;
  if (this->trunk_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->trunk_state(), target);
  }

  // int32 driver_seatbeltrst = 19;
  if (this->driver_seatbeltrst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->driver_seatbeltrst(), target);
  }

  // int32 passager_seatbeltrst = 20;
  if (this->passager_seatbeltrst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->passager_seatbeltrst(), target);
  }

  // double bms_battery_soc = 21;
  if (this->bms_battery_soc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->bms_battery_soc(), target);
  }

  // double vehicle_total_mile = 22;
  if (this->vehicle_total_mile() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->vehicle_total_mile(), target);
  }

  // double mile_left_over = 23;
  if (this->mile_left_over() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->mile_left_over(), target);
  }

  // double vehicle_temperature = 24;
  if (this->vehicle_temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->vehicle_temperature(), target);
  }

  // int32 front_washer_state = 25;
  if (this->front_washer_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->front_washer_state(), target);
  }

  // int32 top_light_state = 26;
  if (this->top_light_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->top_light_state(), target);
  }

  // int32 tyre_state = 27;
  if (this->tyre_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->tyre_state(), target);
  }

  // int32 eps_mode_fb = 28;
  if (this->eps_mode_fb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->eps_mode_fb(), target);
  }

  // int32 accl_mode_fb = 29;
  if (this->accl_mode_fb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->accl_mode_fb(), target);
  }

  // int32 brak_mode_fb = 30;
  if (this->brak_mode_fb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->brak_mode_fb(), target);
  }

  // int32 epb_mode_fb = 31;
  if (this->epb_mode_fb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->epb_mode_fb(), target);
  }

  // int32 bcm_mode_fb = 32;
  if (this->bcm_mode_fb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->bcm_mode_fb(), target);
  }

  // int32 accl_allow = 33;
  if (this->accl_allow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->accl_allow(), target);
  }

  // int32 epb_allow = 34;
  if (this->epb_allow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->epb_allow(), target);
  }

  // int32 gear_intervene = 35;
  if (this->gear_intervene() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->gear_intervene(), target);
  }

  // int32 vcu_ad_exitreq = 36;
  if (this->vcu_ad_exitreq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->vcu_ad_exitreq(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canbus.proto.VehicleState)
  return target;
}

size_t VehicleState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canbus.proto.VehicleState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 brake_light_state = 1;
  if (this->brake_light_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brake_light_state());
  }

  // int32 doubleflash_light_state = 2;
  if (this->doubleflash_light_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->doubleflash_light_state());
  }

  // int32 lowbeam_state = 3;
  if (this->lowbeam_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lowbeam_state());
  }

  // int32 highbeam_state = 4;
  if (this->highbeam_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->highbeam_state());
  }

  // int32 leftturn_light_state = 5;
  if (this->leftturn_light_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leftturn_light_state());
  }

  // int32 rightturn_light_state = 6;
  if (this->rightturn_light_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rightturn_light_state());
  }

  // int32 frontfog_light_state = 7;
  if (this->frontfog_light_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frontfog_light_state());
  }

  // int32 rearfog_light_state = 8;
  if (this->rearfog_light_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rearfog_light_state());
  }

  // int32 tail_light_state = 9;
  if (this->tail_light_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tail_light_state());
  }

  // int32 horn_state = 10;
  if (this->horn_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->horn_state());
  }

  // int32 wiper_state = 11;
  if (this->wiper_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->wiper_state());
  }

  // int32 driver_door_state = 12;
  if (this->driver_door_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->driver_door_state());
  }

  // int32 passager_door_state = 13;
  if (this->passager_door_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->passager_door_state());
  }

  // int32 driver_door_lock_state = 14;
  if (this->driver_door_lock_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->driver_door_lock_state());
  }

  // int32 passager_door_lock_state = 15;
  if (this->passager_door_lock_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->passager_door_lock_state());
  }

  // int32 left_rear_door_lock_state = 16;
  if (this->left_rear_door_lock_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left_rear_door_lock_state());
  }

  // int32 right_rear_door_lock_state = 17;
  if (this->right_rear_door_lock_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right_rear_door_lock_state());
  }

  // int32 trunk_state = 18;
  if (this->trunk_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trunk_state());
  }

  // int32 driver_seatbeltrst = 19;
  if (this->driver_seatbeltrst() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->driver_seatbeltrst());
  }

  // int32 passager_seatbeltrst = 20;
  if (this->passager_seatbeltrst() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->passager_seatbeltrst());
  }

  // double bms_battery_soc = 21;
  if (this->bms_battery_soc() != 0) {
    total_size += 2 + 8;
  }

  // double vehicle_total_mile = 22;
  if (this->vehicle_total_mile() != 0) {
    total_size += 2 + 8;
  }

  // double mile_left_over = 23;
  if (this->mile_left_over() != 0) {
    total_size += 2 + 8;
  }

  // double vehicle_temperature = 24;
  if (this->vehicle_temperature() != 0) {
    total_size += 2 + 8;
  }

  // int32 front_washer_state = 25;
  if (this->front_washer_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->front_washer_state());
  }

  // int32 top_light_state = 26;
  if (this->top_light_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->top_light_state());
  }

  // int32 tyre_state = 27;
  if (this->tyre_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tyre_state());
  }

  // int32 eps_mode_fb = 28;
  if (this->eps_mode_fb() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eps_mode_fb());
  }

  // int32 accl_mode_fb = 29;
  if (this->accl_mode_fb() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->accl_mode_fb());
  }

  // int32 brak_mode_fb = 30;
  if (this->brak_mode_fb() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->brak_mode_fb());
  }

  // int32 epb_mode_fb = 31;
  if (this->epb_mode_fb() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->epb_mode_fb());
  }

  // int32 bcm_mode_fb = 32;
  if (this->bcm_mode_fb() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bcm_mode_fb());
  }

  // int32 accl_allow = 33;
  if (this->accl_allow() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->accl_allow());
  }

  // int32 epb_allow = 34;
  if (this->epb_allow() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->epb_allow());
  }

  // int32 gear_intervene = 35;
  if (this->gear_intervene() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gear_intervene());
  }

  // int32 vcu_ad_exitreq = 36;
  if (this->vcu_ad_exitreq() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vcu_ad_exitreq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canbus.proto.VehicleState)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canbus.proto.VehicleState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canbus.proto.VehicleState)
    MergeFrom(*source);
  }
}

void VehicleState::MergeFrom(const VehicleState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canbus.proto.VehicleState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.brake_light_state() != 0) {
    set_brake_light_state(from.brake_light_state());
  }
  if (from.doubleflash_light_state() != 0) {
    set_doubleflash_light_state(from.doubleflash_light_state());
  }
  if (from.lowbeam_state() != 0) {
    set_lowbeam_state(from.lowbeam_state());
  }
  if (from.highbeam_state() != 0) {
    set_highbeam_state(from.highbeam_state());
  }
  if (from.leftturn_light_state() != 0) {
    set_leftturn_light_state(from.leftturn_light_state());
  }
  if (from.rightturn_light_state() != 0) {
    set_rightturn_light_state(from.rightturn_light_state());
  }
  if (from.frontfog_light_state() != 0) {
    set_frontfog_light_state(from.frontfog_light_state());
  }
  if (from.rearfog_light_state() != 0) {
    set_rearfog_light_state(from.rearfog_light_state());
  }
  if (from.tail_light_state() != 0) {
    set_tail_light_state(from.tail_light_state());
  }
  if (from.horn_state() != 0) {
    set_horn_state(from.horn_state());
  }
  if (from.wiper_state() != 0) {
    set_wiper_state(from.wiper_state());
  }
  if (from.driver_door_state() != 0) {
    set_driver_door_state(from.driver_door_state());
  }
  if (from.passager_door_state() != 0) {
    set_passager_door_state(from.passager_door_state());
  }
  if (from.driver_door_lock_state() != 0) {
    set_driver_door_lock_state(from.driver_door_lock_state());
  }
  if (from.passager_door_lock_state() != 0) {
    set_passager_door_lock_state(from.passager_door_lock_state());
  }
  if (from.left_rear_door_lock_state() != 0) {
    set_left_rear_door_lock_state(from.left_rear_door_lock_state());
  }
  if (from.right_rear_door_lock_state() != 0) {
    set_right_rear_door_lock_state(from.right_rear_door_lock_state());
  }
  if (from.trunk_state() != 0) {
    set_trunk_state(from.trunk_state());
  }
  if (from.driver_seatbeltrst() != 0) {
    set_driver_seatbeltrst(from.driver_seatbeltrst());
  }
  if (from.passager_seatbeltrst() != 0) {
    set_passager_seatbeltrst(from.passager_seatbeltrst());
  }
  if (from.bms_battery_soc() != 0) {
    set_bms_battery_soc(from.bms_battery_soc());
  }
  if (from.vehicle_total_mile() != 0) {
    set_vehicle_total_mile(from.vehicle_total_mile());
  }
  if (from.mile_left_over() != 0) {
    set_mile_left_over(from.mile_left_over());
  }
  if (from.vehicle_temperature() != 0) {
    set_vehicle_temperature(from.vehicle_temperature());
  }
  if (from.front_washer_state() != 0) {
    set_front_washer_state(from.front_washer_state());
  }
  if (from.top_light_state() != 0) {
    set_top_light_state(from.top_light_state());
  }
  if (from.tyre_state() != 0) {
    set_tyre_state(from.tyre_state());
  }
  if (from.eps_mode_fb() != 0) {
    set_eps_mode_fb(from.eps_mode_fb());
  }
  if (from.accl_mode_fb() != 0) {
    set_accl_mode_fb(from.accl_mode_fb());
  }
  if (from.brak_mode_fb() != 0) {
    set_brak_mode_fb(from.brak_mode_fb());
  }
  if (from.epb_mode_fb() != 0) {
    set_epb_mode_fb(from.epb_mode_fb());
  }
  if (from.bcm_mode_fb() != 0) {
    set_bcm_mode_fb(from.bcm_mode_fb());
  }
  if (from.accl_allow() != 0) {
    set_accl_allow(from.accl_allow());
  }
  if (from.epb_allow() != 0) {
    set_epb_allow(from.epb_allow());
  }
  if (from.gear_intervene() != 0) {
    set_gear_intervene(from.gear_intervene());
  }
  if (from.vcu_ad_exitreq() != 0) {
    set_vcu_ad_exitreq(from.vcu_ad_exitreq());
  }
}

void VehicleState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canbus.proto.VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleState::CopyFrom(const VehicleState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canbus.proto.VehicleState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleState::IsInitialized() const {
  return true;
}

void VehicleState::Swap(VehicleState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleState::InternalSwap(VehicleState* other) {
  using std::swap;
  swap(brake_light_state_, other->brake_light_state_);
  swap(doubleflash_light_state_, other->doubleflash_light_state_);
  swap(lowbeam_state_, other->lowbeam_state_);
  swap(highbeam_state_, other->highbeam_state_);
  swap(leftturn_light_state_, other->leftturn_light_state_);
  swap(rightturn_light_state_, other->rightturn_light_state_);
  swap(frontfog_light_state_, other->frontfog_light_state_);
  swap(rearfog_light_state_, other->rearfog_light_state_);
  swap(tail_light_state_, other->tail_light_state_);
  swap(horn_state_, other->horn_state_);
  swap(wiper_state_, other->wiper_state_);
  swap(driver_door_state_, other->driver_door_state_);
  swap(passager_door_state_, other->passager_door_state_);
  swap(driver_door_lock_state_, other->driver_door_lock_state_);
  swap(passager_door_lock_state_, other->passager_door_lock_state_);
  swap(left_rear_door_lock_state_, other->left_rear_door_lock_state_);
  swap(right_rear_door_lock_state_, other->right_rear_door_lock_state_);
  swap(trunk_state_, other->trunk_state_);
  swap(driver_seatbeltrst_, other->driver_seatbeltrst_);
  swap(passager_seatbeltrst_, other->passager_seatbeltrst_);
  swap(bms_battery_soc_, other->bms_battery_soc_);
  swap(vehicle_total_mile_, other->vehicle_total_mile_);
  swap(mile_left_over_, other->mile_left_over_);
  swap(vehicle_temperature_, other->vehicle_temperature_);
  swap(front_washer_state_, other->front_washer_state_);
  swap(top_light_state_, other->top_light_state_);
  swap(tyre_state_, other->tyre_state_);
  swap(eps_mode_fb_, other->eps_mode_fb_);
  swap(accl_mode_fb_, other->accl_mode_fb_);
  swap(brak_mode_fb_, other->brak_mode_fb_);
  swap(epb_mode_fb_, other->epb_mode_fb_);
  swap(bcm_mode_fb_, other->bcm_mode_fb_);
  swap(accl_allow_, other->accl_allow_);
  swap(epb_allow_, other->epb_allow_);
  swap(gear_intervene_, other->gear_intervene_);
  swap(vcu_ad_exitreq_, other->vcu_ad_exitreq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleState::GetMetadata() const {
  protobuf_Canbus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Canbus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleFeedback::InitAsDefaultInstance() {
  ::Canbus::proto::_VehicleFeedback_default_instance_._instance.get_mutable()->header_ = const_cast< ::Canbus::proto::Header*>(
      ::Canbus::proto::Header::internal_default_instance());
  ::Canbus::proto::_VehicleFeedback_default_instance_._instance.get_mutable()->vehicle_info_ = const_cast< ::Canbus::proto::VehicleInfo*>(
      ::Canbus::proto::VehicleInfo::internal_default_instance());
  ::Canbus::proto::_VehicleFeedback_default_instance_._instance.get_mutable()->key_state_ = const_cast< ::Canbus::proto::KeyState*>(
      ::Canbus::proto::KeyState::internal_default_instance());
  ::Canbus::proto::_VehicleFeedback_default_instance_._instance.get_mutable()->vehicle_state_ = const_cast< ::Canbus::proto::VehicleState*>(
      ::Canbus::proto::VehicleState::internal_default_instance());
  ::Canbus::proto::_VehicleFeedback_default_instance_._instance.get_mutable()->fault_info_ = const_cast< ::Canbus::proto::FaultInfo*>(
      ::Canbus::proto::FaultInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleFeedback::kHeaderFieldNumber;
const int VehicleFeedback::kVehicleInfoFieldNumber;
const int VehicleFeedback::kKeyStateFieldNumber;
const int VehicleFeedback::kVehicleStateFieldNumber;
const int VehicleFeedback::kFaultInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleFeedback::VehicleFeedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Canbus_2eproto::InitDefaultsVehicleFeedback();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Canbus.proto.VehicleFeedback)
}
VehicleFeedback::VehicleFeedback(const VehicleFeedback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::Canbus::proto::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_vehicle_info()) {
    vehicle_info_ = new ::Canbus::proto::VehicleInfo(*from.vehicle_info_);
  } else {
    vehicle_info_ = NULL;
  }
  if (from.has_key_state()) {
    key_state_ = new ::Canbus::proto::KeyState(*from.key_state_);
  } else {
    key_state_ = NULL;
  }
  if (from.has_vehicle_state()) {
    vehicle_state_ = new ::Canbus::proto::VehicleState(*from.vehicle_state_);
  } else {
    vehicle_state_ = NULL;
  }
  if (from.has_fault_info()) {
    fault_info_ = new ::Canbus::proto::FaultInfo(*from.fault_info_);
  } else {
    fault_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Canbus.proto.VehicleFeedback)
}

void VehicleFeedback::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fault_info_) -
      reinterpret_cast<char*>(&header_)) + sizeof(fault_info_));
  _cached_size_ = 0;
}

VehicleFeedback::~VehicleFeedback() {
  // @@protoc_insertion_point(destructor:Canbus.proto.VehicleFeedback)
  SharedDtor();
}

void VehicleFeedback::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete vehicle_info_;
  if (this != internal_default_instance()) delete key_state_;
  if (this != internal_default_instance()) delete vehicle_state_;
  if (this != internal_default_instance()) delete fault_info_;
}

void VehicleFeedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleFeedback::descriptor() {
  ::protobuf_Canbus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Canbus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleFeedback& VehicleFeedback::default_instance() {
  ::protobuf_Canbus_2eproto::InitDefaultsVehicleFeedback();
  return *internal_default_instance();
}

VehicleFeedback* VehicleFeedback::New(::google::protobuf::Arena* arena) const {
  VehicleFeedback* n = new VehicleFeedback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:Canbus.proto.VehicleFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && vehicle_info_ != NULL) {
    delete vehicle_info_;
  }
  vehicle_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_state_ != NULL) {
    delete key_state_;
  }
  key_state_ = NULL;
  if (GetArenaNoVirtual() == NULL && vehicle_state_ != NULL) {
    delete vehicle_state_;
  }
  vehicle_state_ = NULL;
  if (GetArenaNoVirtual() == NULL && fault_info_ != NULL) {
    delete fault_info_;
  }
  fault_info_ = NULL;
  _internal_metadata_.Clear();
}

bool VehicleFeedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Canbus.proto.VehicleFeedback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Canbus.proto.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Canbus.proto.VehicleInfo vehicle_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Canbus.proto.KeyState key_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_key_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Canbus.proto.VehicleState vehicle_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Canbus.proto.FaultInfo fault_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fault_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Canbus.proto.VehicleFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Canbus.proto.VehicleFeedback)
  return false;
#undef DO_
}

void VehicleFeedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Canbus.proto.VehicleFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Canbus.proto.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .Canbus.proto.VehicleInfo vehicle_info = 2;
  if (this->has_vehicle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->vehicle_info_, output);
  }

  // .Canbus.proto.KeyState key_state = 3;
  if (this->has_key_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->key_state_, output);
  }

  // .Canbus.proto.VehicleState vehicle_state = 4;
  if (this->has_vehicle_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->vehicle_state_, output);
  }

  // .Canbus.proto.FaultInfo fault_info = 5;
  if (this->has_fault_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->fault_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Canbus.proto.VehicleFeedback)
}

::google::protobuf::uint8* VehicleFeedback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Canbus.proto.VehicleFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Canbus.proto.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .Canbus.proto.VehicleInfo vehicle_info = 2;
  if (this->has_vehicle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->vehicle_info_, deterministic, target);
  }

  // .Canbus.proto.KeyState key_state = 3;
  if (this->has_key_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->key_state_, deterministic, target);
  }

  // .Canbus.proto.VehicleState vehicle_state = 4;
  if (this->has_vehicle_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->vehicle_state_, deterministic, target);
  }

  // .Canbus.proto.FaultInfo fault_info = 5;
  if (this->has_fault_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->fault_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canbus.proto.VehicleFeedback)
  return target;
}

size_t VehicleFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canbus.proto.VehicleFeedback)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Canbus.proto.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .Canbus.proto.VehicleInfo vehicle_info = 2;
  if (this->has_vehicle_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vehicle_info_);
  }

  // .Canbus.proto.KeyState key_state = 3;
  if (this->has_key_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->key_state_);
  }

  // .Canbus.proto.VehicleState vehicle_state = 4;
  if (this->has_vehicle_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->vehicle_state_);
  }

  // .Canbus.proto.FaultInfo fault_info = 5;
  if (this->has_fault_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->fault_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleFeedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canbus.proto.VehicleFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleFeedback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleFeedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canbus.proto.VehicleFeedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canbus.proto.VehicleFeedback)
    MergeFrom(*source);
  }
}

void VehicleFeedback::MergeFrom(const VehicleFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canbus.proto.VehicleFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::Canbus::proto::Header::MergeFrom(from.header());
  }
  if (from.has_vehicle_info()) {
    mutable_vehicle_info()->::Canbus::proto::VehicleInfo::MergeFrom(from.vehicle_info());
  }
  if (from.has_key_state()) {
    mutable_key_state()->::Canbus::proto::KeyState::MergeFrom(from.key_state());
  }
  if (from.has_vehicle_state()) {
    mutable_vehicle_state()->::Canbus::proto::VehicleState::MergeFrom(from.vehicle_state());
  }
  if (from.has_fault_info()) {
    mutable_fault_info()->::Canbus::proto::FaultInfo::MergeFrom(from.fault_info());
  }
}

void VehicleFeedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canbus.proto.VehicleFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleFeedback::CopyFrom(const VehicleFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canbus.proto.VehicleFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleFeedback::IsInitialized() const {
  return true;
}

void VehicleFeedback::Swap(VehicleFeedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleFeedback::InternalSwap(VehicleFeedback* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(vehicle_info_, other->vehicle_info_);
  swap(key_state_, other->key_state_);
  swap(vehicle_state_, other->vehicle_state_);
  swap(fault_info_, other->fault_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleFeedback::GetMetadata() const {
  protobuf_Canbus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Canbus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddOnFeedback::InitAsDefaultInstance() {
  ::Canbus::proto::_AddOnFeedback_default_instance_._instance.get_mutable()->header_ = const_cast< ::Canbus::proto::Header*>(
      ::Canbus::proto::Header::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddOnFeedback::kHeaderFieldNumber;
const int AddOnFeedback::kSlowBrakeKey2StateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddOnFeedback::AddOnFeedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Canbus_2eproto::InitDefaultsAddOnFeedback();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Canbus.proto.AddOnFeedback)
}
AddOnFeedback::AddOnFeedback(const AddOnFeedback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::Canbus::proto::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  slow_brake_key_2_state_ = from.slow_brake_key_2_state_;
  // @@protoc_insertion_point(copy_constructor:Canbus.proto.AddOnFeedback)
}

void AddOnFeedback::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slow_brake_key_2_state_) -
      reinterpret_cast<char*>(&header_)) + sizeof(slow_brake_key_2_state_));
  _cached_size_ = 0;
}

AddOnFeedback::~AddOnFeedback() {
  // @@protoc_insertion_point(destructor:Canbus.proto.AddOnFeedback)
  SharedDtor();
}

void AddOnFeedback::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void AddOnFeedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddOnFeedback::descriptor() {
  ::protobuf_Canbus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Canbus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddOnFeedback& AddOnFeedback::default_instance() {
  ::protobuf_Canbus_2eproto::InitDefaultsAddOnFeedback();
  return *internal_default_instance();
}

AddOnFeedback* AddOnFeedback::New(::google::protobuf::Arena* arena) const {
  AddOnFeedback* n = new AddOnFeedback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddOnFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:Canbus.proto.AddOnFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  slow_brake_key_2_state_ = 0;
  _internal_metadata_.Clear();
}

bool AddOnFeedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Canbus.proto.AddOnFeedback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Canbus.proto.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 slow_brake_key_2_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slow_brake_key_2_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Canbus.proto.AddOnFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Canbus.proto.AddOnFeedback)
  return false;
#undef DO_
}

void AddOnFeedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Canbus.proto.AddOnFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Canbus.proto.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 slow_brake_key_2_state = 2;
  if (this->slow_brake_key_2_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slow_brake_key_2_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Canbus.proto.AddOnFeedback)
}

::google::protobuf::uint8* AddOnFeedback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Canbus.proto.AddOnFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Canbus.proto.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // int32 slow_brake_key_2_state = 2;
  if (this->slow_brake_key_2_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slow_brake_key_2_state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canbus.proto.AddOnFeedback)
  return target;
}

size_t AddOnFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canbus.proto.AddOnFeedback)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Canbus.proto.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // int32 slow_brake_key_2_state = 2;
  if (this->slow_brake_key_2_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slow_brake_key_2_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddOnFeedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canbus.proto.AddOnFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  const AddOnFeedback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddOnFeedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canbus.proto.AddOnFeedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canbus.proto.AddOnFeedback)
    MergeFrom(*source);
  }
}

void AddOnFeedback::MergeFrom(const AddOnFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canbus.proto.AddOnFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::Canbus::proto::Header::MergeFrom(from.header());
  }
  if (from.slow_brake_key_2_state() != 0) {
    set_slow_brake_key_2_state(from.slow_brake_key_2_state());
  }
}

void AddOnFeedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canbus.proto.AddOnFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddOnFeedback::CopyFrom(const AddOnFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canbus.proto.AddOnFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddOnFeedback::IsInitialized() const {
  return true;
}

void AddOnFeedback::Swap(AddOnFeedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddOnFeedback::InternalSwap(AddOnFeedback* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(slow_brake_key_2_state_, other->slow_brake_key_2_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddOnFeedback::GetMetadata() const {
  protobuf_Canbus_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Canbus_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace Canbus

// @@protoc_insertion_point(global_scope)
